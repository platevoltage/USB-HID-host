<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="nrf__radio_8h" kind="file" language="C++">
    <compoundname>nrf_radio.h</compoundname>
    <includes local="no">nrfx.h</includes>
    <incdepgraph>
      <node id="1">
        <label>hal/nrf_radio.h</label>
        <link refid="nrf__radio_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>nrfx.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="structnrf__radio__packet__conf__t" prot="public">nrf_radio_packet_conf_t</innerclass>
    <innerclass refid="structnrf__radio__cteinline__conf__t" prot="public">nrf_radio_cteinline_conf_t</innerclass>
    <innerclass refid="structnrf__radio__dfectrl__conf__t" prot="public">nrf_radio_dfectrl_conf_t</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__nrf__radio__hal_1ga3e1cd53cc3794d26a2f00b968e6f8aa9" prot="public" static="no">
        <name>NRF_RADIO_DPPI_OFFSET</name>
        <initializer>NRF_SUBSCRIBE_PUBLISH_OFFSET_RADIO</initializer>
        <briefdescription>
<para>Symbol specifying offset between address of TASK/EVENT register and address of associated SUBSCRIBE/PUBLISH register. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_radio.h" line="52" column="9" bodyfile="hal/nrf_radio.h" bodystart="52" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="group__nrf__radio__hal_1ga607fff2f027c323b3dc8af40ab489a2f" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_radio_task_t</name>
        <enumvalue id="group__nrf__radio__hal_1gga607fff2f027c323b3dc8af40ab489a2fae1451e5aec10c18695c15527d804cf09" prot="public">
          <name>NRF_RADIO_TASK_TXEN</name>
          <initializer>= offsetof(NRF_RADIO_Type, TASKS_TXEN)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Enable RADIO in TX mode. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1gga607fff2f027c323b3dc8af40ab489a2fae05fb7983f797292c0790e1607188ad1" prot="public">
          <name>NRF_RADIO_TASK_RXEN</name>
          <initializer>= offsetof(NRF_RADIO_Type, TASKS_RXEN)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Enable RADIO in RX mode. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1gga607fff2f027c323b3dc8af40ab489a2fa876b6cd1a9bf263fa29e2d47540515ec" prot="public">
          <name>NRF_RADIO_TASK_START</name>
          <initializer>= offsetof(NRF_RADIO_Type, TASKS_START)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Start RADIO. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1gga607fff2f027c323b3dc8af40ab489a2fa2ebd7963e40a7de73029e20488837c23" prot="public">
          <name>NRF_RADIO_TASK_STOP</name>
          <initializer>= offsetof(NRF_RADIO_Type, TASKS_STOP)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Stop RADIO. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1gga607fff2f027c323b3dc8af40ab489a2fac601d79da621af94ce9335700b410b63" prot="public">
          <name>NRF_RADIO_TASK_DISABLE</name>
          <initializer>= offsetof(NRF_RADIO_Type, TASKS_DISABLE)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Disable RADIO. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1gga607fff2f027c323b3dc8af40ab489a2fa37040a6ad4b91be84f3f5ffe0b7ea835" prot="public">
          <name>NRF_RADIO_TASK_RSSISTART</name>
          <initializer>= offsetof(NRF_RADIO_Type, TASKS_RSSISTART)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Start the RSSI and take one single sample of the receive signal strength. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1gga607fff2f027c323b3dc8af40ab489a2fa42942760825d40b3ba93b2270cef5bc3" prot="public">
          <name>NRF_RADIO_TASK_RSSISTOP</name>
          <initializer>= offsetof(NRF_RADIO_Type, TASKS_RSSISTOP)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Stop the RSSI measurement. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1gga607fff2f027c323b3dc8af40ab489a2fab2b2b976fc38d23a67fb6724947eecef" prot="public">
          <name>NRF_RADIO_TASK_BCSTART</name>
          <initializer>= offsetof(NRF_RADIO_Type, TASKS_BCSTART)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Start the bit counter. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1gga607fff2f027c323b3dc8af40ab489a2facacdd2fd6570c3c8dcb856d2156ee8be" prot="public">
          <name>NRF_RADIO_TASK_BCSTOP</name>
          <initializer>= offsetof(NRF_RADIO_Type, TASKS_BCSTOP)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Stop the bit counter. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1gga607fff2f027c323b3dc8af40ab489a2fad47e9b2b986eb3f3db64d6bc9740508c" prot="public">
          <name>NRF_RADIO_TASK_EDSTART</name>
          <initializer>= offsetof(NRF_RADIO_Type, TASKS_EDSTART)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Start the Energy Detect measurement used in IEEE 802.15.4 mode. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1gga607fff2f027c323b3dc8af40ab489a2fa89a7e51344929d6d08c1aba19360e285" prot="public">
          <name>NRF_RADIO_TASK_EDSTOP</name>
          <initializer>= offsetof(NRF_RADIO_Type, TASKS_EDSTOP)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Stop the Energy Detect measurement. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1gga607fff2f027c323b3dc8af40ab489a2fa83d8cc8e18b2bf558c0e1ec1511f7775" prot="public">
          <name>NRF_RADIO_TASK_CCASTART</name>
          <initializer>= offsetof(NRF_RADIO_Type, TASKS_CCASTART)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Start the Clear Channel Assessment used in IEEE 802.15.4 mode. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1gga607fff2f027c323b3dc8af40ab489a2fac449d58be252ec127432cda741033d98" prot="public">
          <name>NRF_RADIO_TASK_CCASTOP</name>
          <initializer>= offsetof(NRF_RADIO_Type, TASKS_CCASTOP)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Stop the Clear Channel Assessment. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>RADIO tasks. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_radio.h" line="56" column="1" bodyfile="hal/nrf_radio.h" bodystart="57" bodyend="83"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__radio__hal_1ga7c4b15ec33a0704a9caa2fa0b36e98bb" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_radio_event_t</name>
        <enumvalue id="group__nrf__radio__hal_1gga7c4b15ec33a0704a9caa2fa0b36e98bbaa0e8be0b24ad0fb03a191328155a02c5" prot="public">
          <name>NRF_RADIO_EVENT_READY</name>
          <initializer>= offsetof(NRF_RADIO_Type, EVENTS_READY)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Radio has ramped up and is ready to be started. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1gga7c4b15ec33a0704a9caa2fa0b36e98bba748bb9eb7838787e0c594eb554cd5204" prot="public">
          <name>NRF_RADIO_EVENT_ADDRESS</name>
          <initializer>= offsetof(NRF_RADIO_Type, EVENTS_ADDRESS)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Address sent or received. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1gga7c4b15ec33a0704a9caa2fa0b36e98bbaea3dad72e62ba032e07938d73f7c760a" prot="public">
          <name>NRF_RADIO_EVENT_PAYLOAD</name>
          <initializer>= offsetof(NRF_RADIO_Type, EVENTS_PAYLOAD)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Packet payload sent or received. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1gga7c4b15ec33a0704a9caa2fa0b36e98bba60e98fda9706e505e03a17c7db1bd431" prot="public">
          <name>NRF_RADIO_EVENT_END</name>
          <initializer>= offsetof(NRF_RADIO_Type, EVENTS_END)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Packet transmitted or received. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1gga7c4b15ec33a0704a9caa2fa0b36e98bbad8952f65789574e7d1db61fc2d6ae1fd" prot="public">
          <name>NRF_RADIO_EVENT_DISABLED</name>
          <initializer>= offsetof(NRF_RADIO_Type, EVENTS_DISABLED)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>RADIO has been disabled. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1gga7c4b15ec33a0704a9caa2fa0b36e98bbaaee811ff191efb80a366c616ca82edcd" prot="public">
          <name>NRF_RADIO_EVENT_DEVMATCH</name>
          <initializer>= offsetof(NRF_RADIO_Type, EVENTS_DEVMATCH)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>A device address match occurred on the last received packet. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1gga7c4b15ec33a0704a9caa2fa0b36e98bbac1dbfb30de77841be101c4e3b0ed6a07" prot="public">
          <name>NRF_RADIO_EVENT_DEVMISS</name>
          <initializer>= offsetof(NRF_RADIO_Type, EVENTS_DEVMISS)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>No device address match occurred on the last received packet. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1gga7c4b15ec33a0704a9caa2fa0b36e98bba6af0b753ba1664d9e99de0af38c18344" prot="public">
          <name>NRF_RADIO_EVENT_RSSIEND</name>
          <initializer>= offsetof(NRF_RADIO_Type, EVENTS_RSSIEND)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Sampling of receive signal strength complete. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1gga7c4b15ec33a0704a9caa2fa0b36e98bbafcf0b264704a55523cd0fd4e573e9a30" prot="public">
          <name>NRF_RADIO_EVENT_BCMATCH</name>
          <initializer>= offsetof(NRF_RADIO_Type, EVENTS_BCMATCH)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Bit counter reached bit count value. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1gga7c4b15ec33a0704a9caa2fa0b36e98bbab41abc6a4884ac9f970ff3166464e028" prot="public">
          <name>NRF_RADIO_EVENT_CRCOK</name>
          <initializer>= offsetof(NRF_RADIO_Type, EVENTS_CRCOK)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Packet received with correct CRC. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1gga7c4b15ec33a0704a9caa2fa0b36e98bbafb9edff42f9a2113bafc7462c463bce9" prot="public">
          <name>NRF_RADIO_EVENT_CRCERROR</name>
          <initializer>= offsetof(NRF_RADIO_Type, EVENTS_CRCERROR)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Packet received with incorrect CRC. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1gga7c4b15ec33a0704a9caa2fa0b36e98bbae965faf63ad8a97c2721bb17206eb7ae" prot="public">
          <name>NRF_RADIO_EVENT_FRAMESTART</name>
          <initializer>= offsetof(NRF_RADIO_Type, EVENTS_FRAMESTART)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>IEEE 802.15.4 length field received. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1gga7c4b15ec33a0704a9caa2fa0b36e98bbaa85d99f7da6c2fcc2d54ac1e8a20e307" prot="public">
          <name>NRF_RADIO_EVENT_EDEND</name>
          <initializer>= offsetof(NRF_RADIO_Type, EVENTS_EDEND)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Energy Detection procedure ended. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1gga7c4b15ec33a0704a9caa2fa0b36e98bba84fc32565c0ee0c573f819421e4af36a" prot="public">
          <name>NRF_RADIO_EVENT_EDSTOPPED</name>
          <initializer>= offsetof(NRF_RADIO_Type, EVENTS_EDSTOPPED)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>The sampling of Energy Detection has stopped. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1gga7c4b15ec33a0704a9caa2fa0b36e98bba28d98206f74d0bb10c3ed2b22611d7f5" prot="public">
          <name>NRF_RADIO_EVENT_CCAIDLE</name>
          <initializer>= offsetof(NRF_RADIO_Type, EVENTS_CCAIDLE)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Wireless medium in idle - clear to send. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1gga7c4b15ec33a0704a9caa2fa0b36e98bbad795f59b22f5ae79e329bfea8c66fff6" prot="public">
          <name>NRF_RADIO_EVENT_CCABUSY</name>
          <initializer>= offsetof(NRF_RADIO_Type, EVENTS_CCABUSY)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Wireless medium busy - do not send. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1gga7c4b15ec33a0704a9caa2fa0b36e98bba7b07ca7a148a3d9728d9ef043d052004" prot="public">
          <name>NRF_RADIO_EVENT_CCASTOPPED</name>
          <initializer>= offsetof(NRF_RADIO_Type, EVENTS_CCASTOPPED)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>The CCA has stopped. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1gga7c4b15ec33a0704a9caa2fa0b36e98bba9e22c507246b0221124d3f30ba1d7eb3" prot="public">
          <name>NRF_RADIO_EVENT_RATEBOOST</name>
          <initializer>= offsetof(NRF_RADIO_Type, EVENTS_RATEBOOST)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Ble_LR CI field received, receive mode is changed from Ble_LR125Kbit to Ble_LR500Kbit. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1gga7c4b15ec33a0704a9caa2fa0b36e98bba2ff10f8d4797b2482e59782285bdb858" prot="public">
          <name>NRF_RADIO_EVENT_TXREADY</name>
          <initializer>= offsetof(NRF_RADIO_Type, EVENTS_TXREADY)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>RADIO has ramped up and is ready to be started TX path. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1gga7c4b15ec33a0704a9caa2fa0b36e98bba2ea07eeddae2b29127dd7f5c9841b4c7" prot="public">
          <name>NRF_RADIO_EVENT_RXREADY</name>
          <initializer>= offsetof(NRF_RADIO_Type, EVENTS_RXREADY)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>RADIO has ramped up and is ready to be started RX path. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1gga7c4b15ec33a0704a9caa2fa0b36e98bba9a7890b0337003b7554e2fa8b258a8e4" prot="public">
          <name>NRF_RADIO_EVENT_MHRMATCH</name>
          <initializer>= offsetof(NRF_RADIO_Type, EVENTS_MHRMATCH)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>MAC Header match found. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1gga7c4b15ec33a0704a9caa2fa0b36e98bba4ef4af2edab809e26523af6a571de22e" prot="public">
          <name>NRF_RADIO_EVENT_PHYEND</name>
          <initializer>= offsetof(NRF_RADIO_Type, EVENTS_PHYEND)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Generated in Ble_LR125Kbit, Ble_LR500Kbit and BleIeee802154_250Kbit modes when last bit is sent on the air. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1gga7c4b15ec33a0704a9caa2fa0b36e98bba5d58c0c9a0a23bea189d47bacaa81a05" prot="public">
          <name>NRF_RADIO_EVENT_SYNC</name>
          <initializer>= offsetof(NRF_RADIO_Type, EVENTS_SYNC)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Generated in Ble_LR125Kbit, Ble_LR500Kbit and BleIeee802154_250Kbit modes when possible preamble has been received. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1gga7c4b15ec33a0704a9caa2fa0b36e98bbacb7e79280c73be155ae2105d96304957" prot="public">
          <name>NRF_RADIO_EVENT_CTEPRESENT</name>
          <initializer>= offsetof(NRF_RADIO_Type, EVENTS_CTEPRESENT)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>CTE is present. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>RADIO events. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_radio.h" line="86" column="1" bodyfile="hal/nrf_radio.h" bodystart="87" bodyend="180"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__radio__hal_1ga73ab58523931ff53d367f0fda54a545f" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_radio_int_mask_t</name>
        <enumvalue id="group__nrf__radio__hal_1gga73ab58523931ff53d367f0fda54a545fa5bc250d687045c86e5a13e498e9d3d2e" prot="public">
          <name>NRF_RADIO_INT_READY_MASK</name>
          <initializer>= RADIO_INTENSET_READY_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Interrupt on READY event. <linebreak/>
 </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1gga73ab58523931ff53d367f0fda54a545fa6983354bf31f048d173006a2531cf36b" prot="public">
          <name>NRF_RADIO_INT_ADDRESS_MASK</name>
          <initializer>= RADIO_INTENSET_ADDRESS_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Interrupt on ADDRESS event. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1gga73ab58523931ff53d367f0fda54a545faaca31166d25b4ca715d40d352206f8a2" prot="public">
          <name>NRF_RADIO_INT_PAYLOAD_MASK</name>
          <initializer>= RADIO_INTENSET_PAYLOAD_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Interrupt on PAYLOAD event. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1gga73ab58523931ff53d367f0fda54a545fa1f6c8363ab38f25b3ceb8c4a2bc7f12a" prot="public">
          <name>NRF_RADIO_INT_END_MASK</name>
          <initializer>= RADIO_INTENSET_END_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Interrupt on END event. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1gga73ab58523931ff53d367f0fda54a545fad97fdb0f2dfa2ca3328d58825a15b460" prot="public">
          <name>NRF_RADIO_INT_DISABLED_MASK</name>
          <initializer>= RADIO_INTENSET_DISABLED_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Interrupt on DISABLED event. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1gga73ab58523931ff53d367f0fda54a545fa0dc742b5d047b9a87bb16b519cd3dc7e" prot="public">
          <name>NRF_RADIO_INT_DEVMATCH_MASK</name>
          <initializer>= RADIO_INTENSET_DEVMATCH_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Interrupt on DEVMATCH event. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1gga73ab58523931ff53d367f0fda54a545faf57fd38047cb8db3e074789baf627c06" prot="public">
          <name>NRF_RADIO_INT_DEVMISS_MASK</name>
          <initializer>= RADIO_INTENSET_DEVMISS_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Interrupt on DEVMISS event. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1gga73ab58523931ff53d367f0fda54a545fa889c01442d8fc5134161c7f457eab47f" prot="public">
          <name>NRF_RADIO_INT_RSSIEND_MASK</name>
          <initializer>= RADIO_INTENSET_RSSIEND_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Interrupt on RSSIEND event. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1gga73ab58523931ff53d367f0fda54a545fa2db24a22e42f4759dfd5515f47814c44" prot="public">
          <name>NRF_RADIO_INT_BCMATCH_MASK</name>
          <initializer>= RADIO_INTENSET_BCMATCH_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Interrupt on BCMATCH event. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1gga73ab58523931ff53d367f0fda54a545fab05648dfcadd2e72a8acb82fb204be54" prot="public">
          <name>NRF_RADIO_INT_CRCOK_MASK</name>
          <initializer>= RADIO_INTENSET_CRCOK_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Interrupt on CRCOK event. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1gga73ab58523931ff53d367f0fda54a545faea3583eea86679b28726e3c0fc954709" prot="public">
          <name>NRF_RADIO_INT_CRCERROR_MASK</name>
          <initializer>= RADIO_INTENSET_CRCERROR_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Interrupt on CRCERROR event. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1gga73ab58523931ff53d367f0fda54a545faa1e47b0e926a9ed6ae6db872dfbf3b51" prot="public">
          <name>NRF_RADIO_INT_FRAMESTART_MASK</name>
          <initializer>= RADIO_INTENSET_FRAMESTART_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Interrupt on FRAMESTART event. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1gga73ab58523931ff53d367f0fda54a545fa94aa13bca6cf8b37deff643fdd3db355" prot="public">
          <name>NRF_RADIO_INT_EDEND_MASK</name>
          <initializer>= RADIO_INTENSET_EDEND_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Interrupt on EDEND event. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1gga73ab58523931ff53d367f0fda54a545faab3a1f51972577ad0ec849eabc3f1567" prot="public">
          <name>NRF_RADIO_INT_EDSTOPPED_MASK</name>
          <initializer>= RADIO_INTENSET_EDSTOPPED_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Interrupt on EDSTOPPED event. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1gga73ab58523931ff53d367f0fda54a545fa17806b6ba6ff02a907811eef4c6c7cf9" prot="public">
          <name>NRF_RADIO_INT_CCAIDLE_MASK</name>
          <initializer>= RADIO_INTENSET_CCAIDLE_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Interrupt on CCAIDLE event. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1gga73ab58523931ff53d367f0fda54a545fa9469f7c4ad8adbfe50c55a2b26ed7a6d" prot="public">
          <name>NRF_RADIO_INT_CCABUSY_MASK</name>
          <initializer>= RADIO_INTENSET_CCABUSY_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Interrupt on CCABUSY event. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1gga73ab58523931ff53d367f0fda54a545fa0edb26b992cb2095a622a613bb3a3082" prot="public">
          <name>NRF_RADIO_INT_CCASTOPPED_MASK</name>
          <initializer>= RADIO_INTENSET_CCASTOPPED_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Interrupt on CCASTOPPED event. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1gga73ab58523931ff53d367f0fda54a545fa711260a814ad31db651af73227327096" prot="public">
          <name>NRF_RADIO_INT_RATEBOOST_MASK</name>
          <initializer>= RADIO_INTENSET_RATEBOOST_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Interrupt on RATEBOOST event. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1gga73ab58523931ff53d367f0fda54a545fab37517cb1b7ea6a87719514f3813b5d4" prot="public">
          <name>NRF_RADIO_INT_TXREADY_MASK</name>
          <initializer>= RADIO_INTENSET_TXREADY_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Interrupt on TXREADY event. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1gga73ab58523931ff53d367f0fda54a545fa493be4f094de8f36adceff3224ebbd22" prot="public">
          <name>NRF_RADIO_INT_RXREADY_MASK</name>
          <initializer>= RADIO_INTENSET_RXREADY_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Interrupt on RXREADY event. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1gga73ab58523931ff53d367f0fda54a545fadec950831c5ab0920ce4717ff548bf37" prot="public">
          <name>NRF_RADIO_INT_MHRMATCH_MASK</name>
          <initializer>= RADIO_INTENSET_MHRMATCH_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Interrupt on MHRMATCH event. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1gga73ab58523931ff53d367f0fda54a545fa764c177c27ddf46742c0d3a89aa67df5" prot="public">
          <name>NRF_RADIO_INT_PHYEND_MASK</name>
          <initializer>= RADIO_INTENSET_PHYEND_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Interrupt on PHYEND event. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1gga73ab58523931ff53d367f0fda54a545faf2d6b18f487ad52ff4ff61c5ee7017f5" prot="public">
          <name>NRF_RADIO_INT_SYNC_MASK</name>
          <initializer>= RADIO_INTENSET_SYNC_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Interrupt on SYNC event. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1gga73ab58523931ff53d367f0fda54a545fad5d2ab8ad2d2c88a87edea488901e0c0" prot="public">
          <name>NRF_RADIO_INT_CTEPRESENT_MASK</name>
          <initializer>= RADIO_INTENSET_CTEPRESENT_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Interrupt on CTEPRESENT event. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>RADIO interrupts. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_radio.h" line="183" column="1" bodyfile="hal/nrf_radio.h" bodystart="184" bodyend="305"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__radio__hal_1gabedef6176305eeb4e42032ec24424728" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_radio_short_mask_t</name>
        <enumvalue id="group__nrf__radio__hal_1ggabedef6176305eeb4e42032ec24424728a415c69c93a21406a68d90f8f39ce8cbd" prot="public">
          <name>NRF_RADIO_SHORT_READY_START_MASK</name>
          <initializer>= RADIO_SHORTS_READY_START_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Shortcut between READY event and START task. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1ggabedef6176305eeb4e42032ec24424728a5edccab079f130633db685f3dee74f9a" prot="public">
          <name>NRF_RADIO_SHORT_END_DISABLE_MASK</name>
          <initializer>= RADIO_SHORTS_END_DISABLE_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Shortcut between END event and DISABLE task. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1ggabedef6176305eeb4e42032ec24424728a64354bbebd5d989f0a394529a1b522df" prot="public">
          <name>NRF_RADIO_SHORT_DISABLED_TXEN_MASK</name>
          <initializer>= RADIO_SHORTS_DISABLED_TXEN_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Shortcut between DISABLED event and TXEN task. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1ggabedef6176305eeb4e42032ec24424728ae219ce22ce74699b2c2548abdfa1bdfe" prot="public">
          <name>NRF_RADIO_SHORT_DISABLED_RXEN_MASK</name>
          <initializer>= RADIO_SHORTS_DISABLED_RXEN_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Shortcut between DISABLED event and RXEN task. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1ggabedef6176305eeb4e42032ec24424728a082b580997589ec7c4cba00682bcb5ae" prot="public">
          <name>NRF_RADIO_SHORT_ADDRESS_RSSISTART_MASK</name>
          <initializer>= RADIO_SHORTS_ADDRESS_RSSISTART_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Shortcut between ADDRESS event and RSSISTART task. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1ggabedef6176305eeb4e42032ec24424728aff554fe38ea7dbdd99bb19e4dc96c7c7" prot="public">
          <name>NRF_RADIO_SHORT_END_START_MASK</name>
          <initializer>= RADIO_SHORTS_END_START_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Shortcut between END event and START task. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1ggabedef6176305eeb4e42032ec24424728a821b8c75b7af0dda4a3e806c9deaec45" prot="public">
          <name>NRF_RADIO_SHORT_ADDRESS_BCSTART_MASK</name>
          <initializer>= RADIO_SHORTS_ADDRESS_BCSTART_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Shortcut between ADDRESS event and BCSTART task. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1ggabedef6176305eeb4e42032ec24424728ae8e2bb94ec71b4ac1f8e88cd3573ad8a" prot="public">
          <name>NRF_RADIO_SHORT_DISABLED_RSSISTOP_MASK</name>
          <initializer>= RADIO_SHORTS_DISABLED_RSSISTOP_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Shortcut between DISABLED event and RSSISTOP task. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1ggabedef6176305eeb4e42032ec24424728a90702e397d56d0e01eab8cb2a1df0e1d" prot="public">
          <name>NRF_RADIO_SHORT_RXREADY_CCASTART_MASK</name>
          <initializer>= RADIO_SHORTS_RXREADY_CCASTART_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Shortcut between RXREADY event and CCASTART task. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1ggabedef6176305eeb4e42032ec24424728a136607c08f3eaab014f41c67471820d2" prot="public">
          <name>NRF_RADIO_SHORT_CCAIDLE_TXEN_MASK</name>
          <initializer>= RADIO_SHORTS_CCAIDLE_TXEN_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Shortcut between CCAIDLE event and TXEN task. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1ggabedef6176305eeb4e42032ec24424728a3b972f4707579adc655796a8f6bbd4dc" prot="public">
          <name>NRF_RADIO_SHORT_CCABUSY_DISABLE_MASK</name>
          <initializer>= RADIO_SHORTS_CCABUSY_DISABLE_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Shortcut between CCABUSY event and DISABLE task. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1ggabedef6176305eeb4e42032ec24424728aefc9aaebafdad30a432bbeb0127f82f7" prot="public">
          <name>NRF_RADIO_SHORT_FRAMESTART_BCSTART_MASK</name>
          <initializer>= RADIO_SHORTS_FRAMESTART_BCSTART_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Shortcut between FRAMESTART event and BCSTART task. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1ggabedef6176305eeb4e42032ec24424728a466241d16e26f121509c16d839a9f6be" prot="public">
          <name>NRF_RADIO_SHORT_READY_EDSTART_MASK</name>
          <initializer>= RADIO_SHORTS_READY_EDSTART_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Shortcut between READY event and EDSTART task. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1ggabedef6176305eeb4e42032ec24424728a3820582a3a45e2ea4724dbb0655c75ef" prot="public">
          <name>NRF_RADIO_SHORT_EDEND_DISABLE_MASK</name>
          <initializer>= RADIO_SHORTS_EDEND_DISABLE_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Shortcut between EDEND event and DISABLE task. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1ggabedef6176305eeb4e42032ec24424728a23309d0931978fd8f2d917bf1fd115c0" prot="public">
          <name>NRF_RADIO_SHORT_CCAIDLE_STOP_MASK</name>
          <initializer>= RADIO_SHORTS_CCAIDLE_STOP_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Shortcut between CCAIDLE event and STOP task. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1ggabedef6176305eeb4e42032ec24424728a0f89996875a78799808dad6503983c96" prot="public">
          <name>NRF_RADIO_SHORT_TXREADY_START_MASK</name>
          <initializer>= RADIO_SHORTS_TXREADY_START_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Shortcut between TXREADY event and START task. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1ggabedef6176305eeb4e42032ec24424728aab4f7e15633216fa015d73c806bf8aa7" prot="public">
          <name>NRF_RADIO_SHORT_RXREADY_START_MASK</name>
          <initializer>= RADIO_SHORTS_RXREADY_START_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Shortcut between RXREADY event and START task. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1ggabedef6176305eeb4e42032ec24424728a3ed23c9faaa9cf993e9ddf23c8bbfc8f" prot="public">
          <name>NRF_RADIO_SHORT_PHYEND_DISABLE_MASK</name>
          <initializer>= RADIO_SHORTS_PHYEND_DISABLE_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Shortcut between PHYEND event and DISABLE task. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1ggabedef6176305eeb4e42032ec24424728a10d02751902ea3938b87d79abb9977c2" prot="public">
          <name>NRF_RADIO_SHORT_PHYEND_START_MASK</name>
          <initializer>= RADIO_SHORTS_PHYEND_START_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Shortcut between PHYEND event and START task. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>RADIO shortcuts. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_radio.h" line="308" column="1" bodyfile="hal/nrf_radio.h" bodystart="309" bodyend="355"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__radio__hal_1gacd20cabadc17d4eae37fff80f4e9d1e5" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_radio_cca_mode_t</name>
        <enumvalue id="group__nrf__radio__hal_1ggacd20cabadc17d4eae37fff80f4e9d1e5ae532e43bf86cf1527dca13dc8c44ece2" prot="public">
          <name>NRF_RADIO_CCA_MODE_ED</name>
          <initializer>= RADIO_CCACTRL_CCAMODE_EdMode</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Energy Above Threshold. Will report busy whenever energy is detected above set threshold. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1ggacd20cabadc17d4eae37fff80f4e9d1e5a3d738fdf18dc51021c85f4664f15c21e" prot="public">
          <name>NRF_RADIO_CCA_MODE_CARRIER</name>
          <initializer>= RADIO_CCACTRL_CCAMODE_CarrierMode</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Carrier Seen. Will report busy whenever compliant IEEE 802.15.4 signal is seen. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1ggacd20cabadc17d4eae37fff80f4e9d1e5a2c38396ac127c0667fbf5dd38af2fd50" prot="public">
          <name>NRF_RADIO_CCA_MODE_CARRIER_AND_ED</name>
          <initializer>= RADIO_CCACTRL_CCAMODE_CarrierAndEdMode</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Energy Above Threshold AND Carrier Seen. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1ggacd20cabadc17d4eae37fff80f4e9d1e5ad5ce1b529ffea4dac44a3d50e9c9c80e" prot="public">
          <name>NRF_RADIO_CCA_MODE_CARRIER_OR_ED</name>
          <initializer>= RADIO_CCACTRL_CCAMODE_CarrierOrEdMode</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Energy Above Threshold OR Carrier Seen. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1ggacd20cabadc17d4eae37fff80f4e9d1e5a753a0545ec09c64c6deb174cf06952c3" prot="public">
          <name>NRF_RADIO_CCA_MODE_ED_TEST1</name>
          <initializer>= RADIO_CCACTRL_CCAMODE_EdModeTest1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Energy Above Threshold test mode that will abort when first ED measurement over threshold is seen. No averaging. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>RADIO Clear Channel Assessment modes. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_radio.h" line="359" column="1" bodyfile="hal/nrf_radio.h" bodystart="360" bodyend="366"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__radio__hal_1ga4ea9b1af13c23dc9316d60ca649b71dc" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_radio_state_t</name>
        <enumvalue id="group__nrf__radio__hal_1gga4ea9b1af13c23dc9316d60ca649b71dca746228c10342713c5e20c7dafabea198" prot="public">
          <name>NRF_RADIO_STATE_DISABLED</name>
          <initializer>= RADIO_STATE_STATE_Disabled</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>No operations are going on inside the radio and the power consumption is at a minimum. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1gga4ea9b1af13c23dc9316d60ca649b71dca7a8133c8235bfdae4dca73894526ea0a" prot="public">
          <name>NRF_RADIO_STATE_RXRU</name>
          <initializer>= RADIO_STATE_STATE_RxRu</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>The radio is ramping up and preparing for reception. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1gga4ea9b1af13c23dc9316d60ca649b71dca7c8513853702b8ae56ed317b2e9e4e30" prot="public">
          <name>NRF_RADIO_STATE_RXIDLE</name>
          <initializer>= RADIO_STATE_STATE_RxIdle</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>The radio is ready for reception to start. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1gga4ea9b1af13c23dc9316d60ca649b71dcaa10e7ab6753133d4435ede7490ae1b3f" prot="public">
          <name>NRF_RADIO_STATE_RX</name>
          <initializer>= RADIO_STATE_STATE_Rx</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Reception has been started. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1gga4ea9b1af13c23dc9316d60ca649b71dcaf8f1789bfec2cede715ae443a39b599d" prot="public">
          <name>NRF_RADIO_STATE_RXDISABLE</name>
          <initializer>= RADIO_STATE_STATE_RxDisable</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>The radio is disabling the receiver. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1gga4ea9b1af13c23dc9316d60ca649b71dca1c5c0e8f9dd06caeb84a81ae527430c1" prot="public">
          <name>NRF_RADIO_STATE_TXRU</name>
          <initializer>= RADIO_STATE_STATE_TxRu</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>The radio is ramping up and preparing for transmission. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1gga4ea9b1af13c23dc9316d60ca649b71dca8bf486c918bfb1a6b23bf91d13e7c38a" prot="public">
          <name>NRF_RADIO_STATE_TXIDLE</name>
          <initializer>= RADIO_STATE_STATE_TxIdle</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>The radio is ready for transmission to start. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1gga4ea9b1af13c23dc9316d60ca649b71dca7290c8a3df86ab9b8c89a55fe8865748" prot="public">
          <name>NRF_RADIO_STATE_TX</name>
          <initializer>= RADIO_STATE_STATE_Tx</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>The radio is transmitting a packet. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1gga4ea9b1af13c23dc9316d60ca649b71dca29feafdf4232c518678d46da990aae56" prot="public">
          <name>NRF_RADIO_STATE_TXDISABLE</name>
          <initializer>= RADIO_STATE_STATE_TxDisable</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>The radio is disabling the transmitter. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Types of RADIO states. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_radio.h" line="370" column="1" bodyfile="hal/nrf_radio.h" bodystart="371" bodyend="381"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__radio__hal_1gaf10bff1d03d8156b3af56540701d6b3d" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_radio_txpower_t</name>
        <enumvalue id="group__nrf__radio__hal_1ggaf10bff1d03d8156b3af56540701d6b3da686449b679230e5e123abf8661420990" prot="public">
          <name>NRF_RADIO_TXPOWER_POS10DBM</name>
          <initializer>= RADIO_TXPOWER_TXPOWER_Pos10dBm</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>10 dBm. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1ggaf10bff1d03d8156b3af56540701d6b3da58713fd06bb6a9bba0e0d5aa65068d9b" prot="public">
          <name>NRF_RADIO_TXPOWER_POS9DBM</name>
          <initializer>= RADIO_TXPOWER_TXPOWER_Pos9dBm</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>9 dBm. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1ggaf10bff1d03d8156b3af56540701d6b3dac84143d743b47b8c2d93dde692f4cb58" prot="public">
          <name>NRF_RADIO_TXPOWER_POS8DBM</name>
          <initializer>= RADIO_TXPOWER_TXPOWER_Pos8dBm</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>8 dBm. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1ggaf10bff1d03d8156b3af56540701d6b3da4066ab795ca5a26e2cbaf20e7bb48299" prot="public">
          <name>NRF_RADIO_TXPOWER_POS7DBM</name>
          <initializer>= RADIO_TXPOWER_TXPOWER_Pos7dBm</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>7 dBm. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1ggaf10bff1d03d8156b3af56540701d6b3da7b094e547b20f2a127ddbb7129a89c53" prot="public">
          <name>NRF_RADIO_TXPOWER_POS6DBM</name>
          <initializer>= RADIO_TXPOWER_TXPOWER_Pos6dBm</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>6 dBm. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1ggaf10bff1d03d8156b3af56540701d6b3da862590c83368f19ac0f124e019c46de5" prot="public">
          <name>NRF_RADIO_TXPOWER_POS5DBM</name>
          <initializer>= RADIO_TXPOWER_TXPOWER_Pos5dBm</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>5 dBm. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1ggaf10bff1d03d8156b3af56540701d6b3daa0a7418927f1b9c5341fce148b342e84" prot="public">
          <name>NRF_RADIO_TXPOWER_POS4DBM</name>
          <initializer>= RADIO_TXPOWER_TXPOWER_Pos4dBm</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>4 dBm. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1ggaf10bff1d03d8156b3af56540701d6b3daeb694c1022ba7fd6f3d87f4c52a96d57" prot="public">
          <name>NRF_RADIO_TXPOWER_POS3DBM</name>
          <initializer>= RADIO_TXPOWER_TXPOWER_Pos3dBm</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>3 dBm. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1ggaf10bff1d03d8156b3af56540701d6b3da53daadf318857ab2894c89b01f1dc844" prot="public">
          <name>NRF_RADIO_TXPOWER_POS2DBM</name>
          <initializer>= RADIO_TXPOWER_TXPOWER_Pos2dBm</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>2 dBm. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1ggaf10bff1d03d8156b3af56540701d6b3daed7c5bc0784167ffbc07e183a12fa723" prot="public">
          <name>NRF_RADIO_TXPOWER_POS1DBM</name>
          <initializer>= RADIO_TXPOWER_TXPOWER_Pos1dBm</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>1 dBm. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1ggaf10bff1d03d8156b3af56540701d6b3da78145e32ef4f9b0d730be485df71bce3" prot="public">
          <name>NRF_RADIO_TXPOWER_0DBM</name>
          <initializer>= RADIO_TXPOWER_TXPOWER_0dBm</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>0 dBm. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1ggaf10bff1d03d8156b3af56540701d6b3da92b6ff3b18242376f3360f5da723745f" prot="public">
          <name>NRF_RADIO_TXPOWER_NEG1DBM</name>
          <initializer>= RADIO_TXPOWER_TXPOWER_Neg1dBm</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>-1 dBm. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1ggaf10bff1d03d8156b3af56540701d6b3dadd6e90c72cf903ea9de89ff939e0f49d" prot="public">
          <name>NRF_RADIO_TXPOWER_NEG2DBM</name>
          <initializer>= RADIO_TXPOWER_TXPOWER_Neg2dBm</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>-2 dBm. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1ggaf10bff1d03d8156b3af56540701d6b3da4a8414b420cf55973ffddb9946447f16" prot="public">
          <name>NRF_RADIO_TXPOWER_NEG3DBM</name>
          <initializer>= RADIO_TXPOWER_TXPOWER_Neg3dBm</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>-3 dBm. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1ggaf10bff1d03d8156b3af56540701d6b3da76c1f820e37625a1846e6f7d186b0704" prot="public">
          <name>NRF_RADIO_TXPOWER_NEG4DBM</name>
          <initializer>= RADIO_TXPOWER_TXPOWER_Neg4dBm</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>-4 dBm. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1ggaf10bff1d03d8156b3af56540701d6b3daa7a4c8322a9d97d7a2f06b72ff2b059c" prot="public">
          <name>NRF_RADIO_TXPOWER_NEG5DBM</name>
          <initializer>= RADIO_TXPOWER_TXPOWER_Neg5dBm</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>-5 dBm. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1ggaf10bff1d03d8156b3af56540701d6b3da4e3268bbc73be755e9389ee121bd7ab3" prot="public">
          <name>NRF_RADIO_TXPOWER_NEG6DBM</name>
          <initializer>= RADIO_TXPOWER_TXPOWER_Neg6dBm</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>-6 dBm. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1ggaf10bff1d03d8156b3af56540701d6b3da56bc1b666d8111a5ef14a12735cceb6b" prot="public">
          <name>NRF_RADIO_TXPOWER_NEG7DBM</name>
          <initializer>= RADIO_TXPOWER_TXPOWER_Neg7dBm</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>-7 dBm. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1ggaf10bff1d03d8156b3af56540701d6b3da83d1bff91cf0717a88c63b1801df3421" prot="public">
          <name>NRF_RADIO_TXPOWER_NEG8DBM</name>
          <initializer>= RADIO_TXPOWER_TXPOWER_Neg8dBm</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>-8 dBm. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1ggaf10bff1d03d8156b3af56540701d6b3da12e5c9fef4a14384cc4c48a506479645" prot="public">
          <name>NRF_RADIO_TXPOWER_NEG12DBM</name>
          <initializer>= RADIO_TXPOWER_TXPOWER_Neg12dBm</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>-12 dBm. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1ggaf10bff1d03d8156b3af56540701d6b3da53dfa5569a98c1de1e5b675d4d08f464" prot="public">
          <name>NRF_RADIO_TXPOWER_NEG16DBM</name>
          <initializer>= RADIO_TXPOWER_TXPOWER_Neg16dBm</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>-16 dBm. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1ggaf10bff1d03d8156b3af56540701d6b3da9f56473abf6cc325d044c706ace9772e" prot="public">
          <name>NRF_RADIO_TXPOWER_NEG20DBM</name>
          <initializer>= RADIO_TXPOWER_TXPOWER_Neg20dBm</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>-20 dBm. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1ggaf10bff1d03d8156b3af56540701d6b3da7cef94ecd59d190ab3d5985e05d77046" prot="public">
          <name>NRF_RADIO_TXPOWER_NEG30DBM</name>
          <initializer>= RADIO_TXPOWER_TXPOWER_Neg30dBm</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>-30 dBm. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1ggaf10bff1d03d8156b3af56540701d6b3da2088a0698d2f444b3937788a20e8d582" prot="public">
          <name>NRF_RADIO_TXPOWER_NEG40DBM</name>
          <initializer>= RADIO_TXPOWER_TXPOWER_Neg40dBm</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>-40 dBm. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1ggaf10bff1d03d8156b3af56540701d6b3da93ced5a52ea0a27e0528cd555eb00760" prot="public">
          <name>NRF_RADIO_TXPOWER_NEG70DBM</name>
          <initializer>= RADIO_TXPOWER_TXPOWER_Neg70dBm</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>-70 dBm. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Types of RADIO TX power. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_radio.h" line="384" column="1" bodyfile="hal/nrf_radio.h" bodystart="385" bodyend="449"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__radio__hal_1gacf631e29d43c93acac290a18850e9c40" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_radio_mode_t</name>
        <enumvalue id="group__nrf__radio__hal_1ggacf631e29d43c93acac290a18850e9c40a951d15ee1a9b4c6bf74d4637496098ce" prot="public">
          <name>NRF_RADIO_MODE_NRF_1MBIT</name>
          <initializer>= RADIO_MODE_MODE_Nrf_1Mbit</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>1Mbit/s Nordic proprietary radio mode. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1ggacf631e29d43c93acac290a18850e9c40af2d5dbdc4b4afa5c86c76bfb6cc34e04" prot="public">
          <name>NRF_RADIO_MODE_NRF_2MBIT</name>
          <initializer>= RADIO_MODE_MODE_Nrf_2Mbit</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>2Mbit/s Nordic proprietary radio mode. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1ggacf631e29d43c93acac290a18850e9c40a9cc3caa41ead16fe0d98f0df9eb9ae8e" prot="public">
          <name>NRF_RADIO_MODE_NRF_250KBIT</name>
          <initializer>= RADIO_MODE_MODE_Nrf_250Kbit</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>250Kbit/s Nordic proprietary radio mode. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1ggacf631e29d43c93acac290a18850e9c40a2f22d25fb14609deb75c9b702798aaf7" prot="public">
          <name>NRF_RADIO_MODE_NRF_4MBIT_H_0_5</name>
          <initializer>= RADIO_MODE_MODE_Nrf_4Mbit0_5</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>4Mbit/s Nordic proprietary radio mode (BT=0.5/h=0.5). </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1ggacf631e29d43c93acac290a18850e9c40ad00442833e44294668cfa29faa786c92" prot="public">
          <name>NRF_RADIO_MODE_NRF_4MBIT_H_0_25</name>
          <initializer>= RADIO_MODE_MODE_Nrf_4Mbit0_25</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>4Mbit/s Nordic proprietary radio mode (BT=0.5/h=0.25). </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1ggacf631e29d43c93acac290a18850e9c40ae4b19edc5f6a0557e47effea35b6c031" prot="public">
          <name>NRF_RADIO_MODE_BLE_1MBIT</name>
          <initializer>= RADIO_MODE_MODE_Ble_1Mbit</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>1 Mbit/s Bluetooth Low Energy. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1ggacf631e29d43c93acac290a18850e9c40a8f70af7f390ab58d3555a7c9718acc1d" prot="public">
          <name>NRF_RADIO_MODE_BLE_2MBIT</name>
          <initializer>= RADIO_MODE_MODE_Ble_2Mbit</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>2 Mbit/s Bluetooth Low Energy. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1ggacf631e29d43c93acac290a18850e9c40a6d9f039845eb5d15cf6ba11c84adae95" prot="public">
          <name>NRF_RADIO_MODE_BLE_LR125KBIT</name>
          <initializer>= RADIO_MODE_MODE_Ble_LR125Kbit</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Bluetooth Low Energy Long range 125 kbit/s TX, 125 kbit/s and 500 kbit/s RX </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1ggacf631e29d43c93acac290a18850e9c40a623c0072435f2899faf891929da43427" prot="public">
          <name>NRF_RADIO_MODE_BLE_LR500KBIT</name>
          <initializer>= RADIO_MODE_MODE_Ble_LR500Kbit</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Bluetooth Low Energy Long range 500 kbit/s TX, 125 kbit/s and 500 kbit/s RX </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1ggacf631e29d43c93acac290a18850e9c40acdf5c38aa9008d6be5a972f8d2e4def0" prot="public">
          <name>NRF_RADIO_MODE_IEEE802154_250KBIT</name>
          <initializer>= RADIO_MODE_MODE_Ieee802154_250Kbit</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>IEEE 802.15.4-2006 250 kbit/s. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Types of RADIO modes (data rate and modulation). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_radio.h" line="452" column="1" bodyfile="hal/nrf_radio.h" bodystart="453" bodyend="478"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__radio__hal_1gac643453ca82a7634a045b1dbf72eece0" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_radio_preamble_length_t</name>
        <enumvalue id="group__nrf__radio__hal_1ggac643453ca82a7634a045b1dbf72eece0ad74e0950327f5bcd0238e0d3a5397268" prot="public">
          <name>NRF_RADIO_PREAMBLE_LENGTH_8BIT</name>
          <initializer>= RADIO_PCNF0_PLEN_8bit</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>8-bit preamble. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1ggac643453ca82a7634a045b1dbf72eece0a2d61164ca2f71aed56c49ed312f45ced" prot="public">
          <name>NRF_RADIO_PREAMBLE_LENGTH_16BIT</name>
          <initializer>= RADIO_PCNF0_PLEN_16bit</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>16-bit preamble. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1ggac643453ca82a7634a045b1dbf72eece0adbace5d8eba110d411ce42958c68a306" prot="public">
          <name>NRF_RADIO_PREAMBLE_LENGTH_32BIT_ZERO</name>
          <initializer>= RADIO_PCNF0_PLEN_32bitZero</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>32-bit zero preamble used for IEEE 802.15.4. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1ggac643453ca82a7634a045b1dbf72eece0aa1cc65e5e688dcc57e851199fa8d9e9e" prot="public">
          <name>NRF_RADIO_PREAMBLE_LENGTH_LONG_RANGE</name>
          <initializer>= RADIO_PCNF0_PLEN_LongRange</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Preamble - used for BTLE Long Range. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Types of preamble length. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_radio.h" line="482" column="1" bodyfile="hal/nrf_radio.h" bodystart="483" bodyend="492"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__radio__hal_1ga9e800ae5bddb82989b601ec2407ea229" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_radio_crc_addr_t</name>
        <enumvalue id="group__nrf__radio__hal_1gga9e800ae5bddb82989b601ec2407ea229a390e9309e68ba7f9ed88ce7a9610a48f" prot="public">
          <name>NRF_RADIO_CRC_ADDR_INCLUDE</name>
          <initializer>= RADIO_CRCCNF_SKIPADDR_Include</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>CRC calculation includes address field. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1gga9e800ae5bddb82989b601ec2407ea229a83dde7be6ffd8c7d2f6194d88667c55f" prot="public">
          <name>NRF_RADIO_CRC_ADDR_SKIP</name>
          <initializer>= RADIO_CRCCNF_SKIPADDR_Skip</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>CRC calculation does not include address field. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1gga9e800ae5bddb82989b601ec2407ea229a061a5d8bf5b9823265c4f828d6ba8a2a" prot="public">
          <name>NRF_RADIO_CRC_ADDR_IEEE802154</name>
          <initializer>= RADIO_CRCCNF_SKIPADDR_Ieee802154</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>CRC calculation as per 802.15.4 standard. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1gga9e800ae5bddb82989b601ec2407ea229a485840331232a3ddd56e1f7928264e25" prot="public">
          <name>NRF_RADIO_CRC_ADDR_S0</name>
          <initializer>= RADIO_CRCCNF_OFFSET_SO</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>CRC calculation starting at first byte after S0 field. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1gga9e800ae5bddb82989b601ec2407ea229a746706569662e81eb7b7b47f5d83b9b3" prot="public">
          <name>NRF_RADIO_CRC_ADDR_S1</name>
          <initializer>= RADIO_CRCCNF_OFFSET_S1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>CRC calculation starting at first byte after S1 field. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Types of CRC calculatons regarding address. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_radio.h" line="496" column="1" bodyfile="hal/nrf_radio.h" bodystart="497" bodyend="519"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__radio__hal_1ga50e6ec690192526db55f277b6727117d" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_radio_dfe_op_mode_t</name>
        <enumvalue id="group__nrf__radio__hal_1gga50e6ec690192526db55f277b6727117da53d3b89081b6b30d23fd83a6fe9de412" prot="public">
          <name>NRF_RADIO_DFE_OP_MODE_AOD</name>
          <initializer>= RADIO_DFEMODE_DFEOPMODE_AoD</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Angle-of-Departure mode. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1gga50e6ec690192526db55f277b6727117da4cfdf7b91b38b63e9d548fbf0af0bd36" prot="public">
          <name>NRF_RADIO_DFE_OP_MODE_AOA</name>
          <initializer>= RADIO_DFEMODE_DFEOPMODE_AoA</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Angle-of-Arrival mode. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Direction Finding operation modes. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_radio.h" line="551" column="1" bodyfile="hal/nrf_radio.h" bodystart="552" bodyend="555"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__radio__hal_1gaa6632d62276bfec4138e0688d5f73018" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_radio_dfe_switch_state_t</name>
        <enumvalue id="group__nrf__radio__hal_1ggaa6632d62276bfec4138e0688d5f73018a686e18534cde4b4789614c157241ad0b" prot="public">
          <name>NRF_RADIO_DFE_SWITCH_STATE_IDLE</name>
          <initializer>= RADIO_DFESTATUS_SWITCHINGSTATE_Idle</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Switching state Idle. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1ggaa6632d62276bfec4138e0688d5f73018a1de635b14e6f86baa59130e3b70458c0" prot="public">
          <name>NRF_RADIO_DFE_SWITCH_STATE_OFFSET</name>
          <initializer>= RADIO_DFESTATUS_SWITCHINGSTATE_Offset</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Switching state Offset. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1ggaa6632d62276bfec4138e0688d5f73018a6c9e9256a55dffa3e222eef480c48293" prot="public">
          <name>NRF_RADIO_DFE_SWITCH_STATE_GUARD</name>
          <initializer>= RADIO_DFESTATUS_SWITCHINGSTATE_Guard</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Switching state Guard. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1ggaa6632d62276bfec4138e0688d5f73018ac43a211e085fa6f76f0fe62ead6f487f" prot="public">
          <name>NRF_RADIO_DFE_SWITCH_STATE_REF</name>
          <initializer>= RADIO_DFESTATUS_SWITCHINGSTATE_Ref</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Switching state Ref. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1ggaa6632d62276bfec4138e0688d5f73018a3cf8caab8af53b52ceb6b17100571125" prot="public">
          <name>NRF_RADIO_DFE_SWITCH_STATE_SWITCHING</name>
          <initializer>= RADIO_DFESTATUS_SWITCHINGSTATE_Switching</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Switching state Switching. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1ggaa6632d62276bfec4138e0688d5f73018abce423577ee283bfdc44cba07ca01c11" prot="public">
          <name>NRF_RADIO_DFE_SWITCH_STATE_ENDING</name>
          <initializer>= RADIO_DFESTATUS_SWITCHINGSTATE_Ending</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Switching state Ending. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>States of Direction Finding switching state machine. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_radio.h" line="560" column="1" bodyfile="hal/nrf_radio.h" bodystart="561" bodyend="568"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__radio__hal_1ga8b27d0e94d3c0d4589d8876018cdcc7b" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_radio_dfe_sample_state_t</name>
        <enumvalue id="group__nrf__radio__hal_1gga8b27d0e94d3c0d4589d8876018cdcc7ba0f73845b55dddade8036d73d92e25903" prot="public">
          <name>NRF_RADIO_DFE_SAMPLE_STATE_IDLE</name>
          <initializer>= RADIO_DFESTATUS_SAMPLINGSTATE_Idle</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Sampling state Idle. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1gga8b27d0e94d3c0d4589d8876018cdcc7ba7dbc11d1dd54b3ba7dcacc4e9f60e330" prot="public">
          <name>NRF_RADIO_DFE_SAMPLE_STATE_SAMPLING</name>
          <initializer>= RADIO_DFESTATUS_SAMPLINGSTATE_Sampling</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Sampling state Sampling. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>States of Direction Finding sampling state machine. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_radio.h" line="571" column="1" bodyfile="hal/nrf_radio.h" bodystart="572" bodyend="575"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__radio__hal_1ga9858b66ec9cdd8ae5fd9e378c4f9f2b9" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_radio_cteinline_time_range_t</name>
        <enumvalue id="group__nrf__radio__hal_1gga9858b66ec9cdd8ae5fd9e378c4f9f2b9a8c204dcc985d76994f72d17443abb98c" prot="public">
          <name>NRF_RADIO_CTEINLINE_TIME_RANGE_20</name>
          <initializer>= RADIO_CTEINLINECONF_CTETIMEVALIDRANGE_20</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>20 units time range. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1gga9858b66ec9cdd8ae5fd9e378c4f9f2b9a9770f5e5ba1c401b97bf60117d8bef48" prot="public">
          <name>NRF_RADIO_CTEINLINE_TIME_RANGE_31</name>
          <initializer>= RADIO_CTEINLINECONF_CTETIMEVALIDRANGE_31</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>31 units time range. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1gga9858b66ec9cdd8ae5fd9e378c4f9f2b9a443133fb76954e913683ae5df0347c22" prot="public">
          <name>NRF_RADIO_CTEINLINE_TIME_RANGE_63</name>
          <initializer>= RADIO_CTEINLINECONF_CTETIMEVALIDRANGE_63</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>63 units time range. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Valid ranges of CTE time, expressed in 8 us units. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_radio.h" line="580" column="1" bodyfile="hal/nrf_radio.h" bodystart="581" bodyend="585"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__radio__hal_1ga0bf3be7a962831ad119d22e7fd47ac42" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_radio_cteinline_rx_mode_t</name>
        <enumvalue id="group__nrf__radio__hal_1gga0bf3be7a962831ad119d22e7fd47ac42ad94a5905988a8da5111747cd3e37b2fc" prot="public">
          <name>NRF_RADIO_CTEINLINE_RX_MODE_125NS</name>
          <initializer>= RADIO_CTEINLINECONF_CTEINLINERXMODE1US_125ns</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>125 ns spacing. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1gga0bf3be7a962831ad119d22e7fd47ac42a43c56c7c324c4ec43e80b01baa31eb14" prot="public">
          <name>NRF_RADIO_CTEINLINE_RX_MODE_250NS</name>
          <initializer>= RADIO_CTEINLINECONF_CTEINLINERXMODE1US_250ns</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>250 ns spacing. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1gga0bf3be7a962831ad119d22e7fd47ac42afadc96817e3d81b053c003e5b3eb30dd" prot="public">
          <name>NRF_RADIO_CTEINLINE_RX_MODE_500NS</name>
          <initializer>= RADIO_CTEINLINECONF_CTEINLINERXMODE1US_500ns</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>500 ns spacing. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1gga0bf3be7a962831ad119d22e7fd47ac42a1007927b146a0b2d7a158aaf0dc00594" prot="public">
          <name>NRF_RADIO_CTEINLINE_RX_MODE_1US</name>
          <initializer>= RADIO_CTEINLINECONF_CTEINLINERXMODE1US_1us</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>1 us spacing. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1gga0bf3be7a962831ad119d22e7fd47ac42acbae89288edfb3f0f64742b4ef01654b" prot="public">
          <name>NRF_RADIO_CTEINLINE_RX_MODE_2US</name>
          <initializer>= RADIO_CTEINLINECONF_CTEINLINERXMODE1US_2us</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>2 us spacing. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1gga0bf3be7a962831ad119d22e7fd47ac42a569b5053485c7fc8b907fa03ac361035" prot="public">
          <name>NRF_RADIO_CTEINLINE_RX_MODE_4US</name>
          <initializer>= RADIO_CTEINLINECONF_CTEINLINERXMODE1US_4us</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>4 us spacing. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Spacing between samples for the samples in the switching period. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_radio.h" line="588" column="1" bodyfile="hal/nrf_radio.h" bodystart="589" bodyend="596"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__radio__hal_1ga56344d716160842c78b173c797debf0d" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_radio_dfectrl_extension_t</name>
        <enumvalue id="group__nrf__radio__hal_1gga56344d716160842c78b173c797debf0dacdd58d9806c60261ef641853e1cb143e" prot="public">
          <name>NRF_RADIO_DFECTRL_EXTENSION_CRC</name>
          <initializer>= RADIO_DFECTRL1_DFEINEXTENSION_CRC</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>AoA/AoD procedure triggered at end of CRC. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1gga56344d716160842c78b173c797debf0da8c673aeefc621feacc627a71d6c9ce80" prot="public">
          <name>NRF_RADIO_DFECTRL_EXTENSION_PAYLOAD</name>
          <initializer>= RADIO_DFECTRL1_DFEINEXTENSION_Payload</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Antenna switching/sampling done in the packet payload. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>State when CTE extension is added and antenna switching/sampling is done. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_radio.h" line="614" column="1" bodyfile="hal/nrf_radio.h" bodystart="615" bodyend="618"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__radio__hal_1ga2615b22f05fde4684ecfbd7d755fc4ee" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_radio_dfectrl_switch_spacing_t</name>
        <enumvalue id="group__nrf__radio__hal_1gga2615b22f05fde4684ecfbd7d755fc4eea0f8a97c2db0b04e07b198a574b920825" prot="public">
          <name>NRF_RADIO_DFECTRL_SWITCH_SPACING_1US</name>
          <initializer>= RADIO_DFECTRL1_TSWITCHSPACING_1us</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>1 us interval between antenna change. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1gga2615b22f05fde4684ecfbd7d755fc4eea003a38b55e8b06dbcc8f369363aae2bb" prot="public">
          <name>NRF_RADIO_DFECTRL_SWITCH_SPACING_2US</name>
          <initializer>= RADIO_DFECTRL1_TSWITCHSPACING_2us</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>2 us interval between antenna change. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1gga2615b22f05fde4684ecfbd7d755fc4eead6e53dbf32e99850b8a72770f22a19f5" prot="public">
          <name>NRF_RADIO_DFECTRL_SWITCH_SPACING_4US</name>
          <initializer>= RADIO_DFECTRL1_TSWITCHSPACING_4us</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>4 us interval between antenna change. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Interval between antenna changes in the switching state. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_radio.h" line="621" column="1" bodyfile="hal/nrf_radio.h" bodystart="622" bodyend="626"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__radio__hal_1gae8d3e239eae19f02f55400a93307110f" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_radio_dfectrl_sample_spacing_t</name>
        <enumvalue id="group__nrf__radio__hal_1ggae8d3e239eae19f02f55400a93307110faee5d03d4d5d1e523d571c3cebc22159e" prot="public">
          <name>NRF_RADIO_DFECTRL_SAMPLE_SPACING_125NS</name>
          <initializer>= RADIO_DFECTRL1_TSAMPLESPACING_125ns</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>125 ns interval between samples. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1ggae8d3e239eae19f02f55400a93307110fa5bb3ffe386c74951a64cebf141d82eaa" prot="public">
          <name>NRF_RADIO_DFECTRL_SAMPLE_SPACING_250NS</name>
          <initializer>= RADIO_DFECTRL1_TSAMPLESPACING_250ns</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>250 ns interval between samples. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1ggae8d3e239eae19f02f55400a93307110fac83f8674cce6a655cc4401831435b63d" prot="public">
          <name>NRF_RADIO_DFECTRL_SAMPLE_SPACING_500NS</name>
          <initializer>= RADIO_DFECTRL1_TSAMPLESPACING_500ns</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>500 ns interval between samples. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1ggae8d3e239eae19f02f55400a93307110fa55579a036be7df7f65df9898ce87e810" prot="public">
          <name>NRF_RADIO_DFECTRL_SAMPLE_SPACING_1US</name>
          <initializer>= RADIO_DFECTRL1_TSAMPLESPACING_1us</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>1 us interval between samples. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1ggae8d3e239eae19f02f55400a93307110fafcce57e3fcf04807c7a4fa5b492daa14" prot="public">
          <name>NRF_RADIO_DFECTRL_SAMPLE_SPACING_2US</name>
          <initializer>= RADIO_DFECTRL1_TSAMPLESPACING_2us</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>2 us interval between samples. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1ggae8d3e239eae19f02f55400a93307110fa91fcf87864e1c83882ebc905a227e108" prot="public">
          <name>NRF_RADIO_DFECTRL_SAMPLE_SPACING_4US</name>
          <initializer>= RADIO_DFECTRL1_TSAMPLESPACING_4us</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>4 us interval between samples. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Interval between samples. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_radio.h" line="629" column="1" bodyfile="hal/nrf_radio.h" bodystart="630" bodyend="637"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__radio__hal_1gacf147f6a78d77e1a86240f5555fd11c1" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_radio_dfectrl_sample_type_t</name>
        <enumvalue id="group__nrf__radio__hal_1ggacf147f6a78d77e1a86240f5555fd11c1a7f7fbd83552813a64a42ed85e8179824" prot="public">
          <name>NRF_RADIO_DFECTRL_SAMPLE_TYPE_IQ</name>
          <initializer>= RADIO_DFECTRL1_SAMPLETYPE_IQ</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Complex samples in I and Q. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1ggacf147f6a78d77e1a86240f5555fd11c1a7031b60b9e7e9414fdc12e881cd9b992" prot="public">
          <name>NRF_RADIO_DFECTRL_SAMPLE_TYPE_MAGPHASE</name>
          <initializer>= RADIO_DFECTRL1_SAMPLETYPE_MagPhase</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Complex samples as magnitude and phase. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Direction finding sample type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_radio.h" line="640" column="1" bodyfile="hal/nrf_radio.h" bodystart="641" bodyend="644"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__nrf__radio__hal_1ga3c9a0741030060bba9d9d5bbf7f528b8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_radio_task_trigger</definition>
        <argsstring>(NRF_RADIO_Type *p_reg, nrf_radio_task_t task)</argsstring>
        <name>nrf_radio_task_trigger</name>
        <param>
          <type>NRF_RADIO_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__radio__hal_1ga607fff2f027c323b3dc8af40ab489a2f" kindref="member">nrf_radio_task_t</ref></type>
          <declname>task</declname>
        </param>
        <briefdescription>
<para>Function for activating a specific RADIO task. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">task</parametername>
</parameternamelist>
<parameterdescription>
<para>Task to be activated. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_radio.h" line="1591" column="24" bodyfile="hal/nrf_radio.h" bodystart="1591" bodyend="1594" declfile="hal/nrf_radio.h" declline="671" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__radio__hal_1ga2d24a390cb7660d259f664a4dd409555" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_radio_task_address_get</definition>
        <argsstring>(NRF_RADIO_Type const *p_reg, nrf_radio_task_t task)</argsstring>
        <name>nrf_radio_task_address_get</name>
        <param>
          <type>NRF_RADIO_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__radio__hal_1ga607fff2f027c323b3dc8af40ab489a2f" kindref="member">nrf_radio_task_t</ref></type>
          <declname>task</declname>
        </param>
        <briefdescription>
<para>Function for getting the address of a specific RADIO task register. </para>
        </briefdescription>
        <detaileddescription>
<para>This function can be used by the PPI module.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">task</parametername>
</parameternamelist>
<parameterdescription>
<para>Requested task.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Address of the specified task register. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_radio.h" line="1596" column="28" bodyfile="hal/nrf_radio.h" bodystart="1596" bodyend="1600" declfile="hal/nrf_radio.h" declline="683" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__radio__hal_1ga4722c840c42a42823687a1a86e1261ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_radio_event_clear</definition>
        <argsstring>(NRF_RADIO_Type *p_reg, nrf_radio_event_t event)</argsstring>
        <name>nrf_radio_event_clear</name>
        <param>
          <type>NRF_RADIO_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__radio__hal_1ga7c4b15ec33a0704a9caa2fa0b36e98bb" kindref="member">nrf_radio_event_t</ref></type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>Function for clearing a specific RADIO event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event to clean. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_radio.h" line="1602" column="24" bodyfile="hal/nrf_radio.h" bodystart="1602" bodyend="1606" declfile="hal/nrf_radio.h" declline="692" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__radio__hal_1ga07513cd4f3fe44e19e6dd7f57c99aded" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE bool</type>
        <definition>NRF_STATIC_INLINE bool nrf_radio_event_check</definition>
        <argsstring>(NRF_RADIO_Type const *p_reg, nrf_radio_event_t event)</argsstring>
        <name>nrf_radio_event_check</name>
        <param>
          <type>NRF_RADIO_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__radio__hal_1ga7c4b15ec33a0704a9caa2fa0b36e98bb" kindref="member">nrf_radio_event_t</ref></type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>Function for retrieving the state of the RADIO event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event to be checked.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>The event has been generated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>The event has not been generated. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_radio.h" line="1608" column="24" bodyfile="hal/nrf_radio.h" bodystart="1608" bodyend="1611" declfile="hal/nrf_radio.h" declline="703" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__radio__hal_1ga3332fde0b4673961bf8466dd323d59a4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_radio_event_address_get</definition>
        <argsstring>(NRF_RADIO_Type const *p_reg, nrf_radio_event_t event)</argsstring>
        <name>nrf_radio_event_address_get</name>
        <param>
          <type>NRF_RADIO_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__radio__hal_1ga7c4b15ec33a0704a9caa2fa0b36e98bb" kindref="member">nrf_radio_event_t</ref></type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>Function for getting the address of a specific RADIO event register. </para>
        </briefdescription>
        <detaileddescription>
<para>This function can be used by the PPI module.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>Requested Event.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Address of the specified event register. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_radio.h" line="1613" column="28" bodyfile="hal/nrf_radio.h" bodystart="1613" bodyend="1617" declfile="hal/nrf_radio.h" declline="715" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__radio__hal_1gac05dbdb99a5c5308818344391a778298" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_radio_shorts_enable</definition>
        <argsstring>(NRF_RADIO_Type *p_reg, uint32_t shorts_mask)</argsstring>
        <name>nrf_radio_shorts_enable</name>
        <param>
          <type>NRF_RADIO_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>shorts_mask</declname>
        </param>
        <briefdescription>
<para>Function for enabling specified RADIO shortcuts. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">shorts_mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of shortcuts. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_radio.h" line="1619" column="24" bodyfile="hal/nrf_radio.h" bodystart="1619" bodyend="1622" declfile="hal/nrf_radio.h" declline="724" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__radio__hal_1ga8f44040e5750c1e0b44633d362a7d36c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_radio_shorts_disable</definition>
        <argsstring>(NRF_RADIO_Type *p_reg, uint32_t shorts_mask)</argsstring>
        <name>nrf_radio_shorts_disable</name>
        <param>
          <type>NRF_RADIO_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>shorts_mask</declname>
        </param>
        <briefdescription>
<para>Function for disabling specified RADIO shortcuts. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">shorts_mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of shortcuts. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_radio.h" line="1624" column="24" bodyfile="hal/nrf_radio.h" bodystart="1624" bodyend="1627" declfile="hal/nrf_radio.h" declline="732" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__radio__hal_1gad795180cbe33c306c3fb3a5d864f17d2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_radio_shorts_set</definition>
        <argsstring>(NRF_RADIO_Type *p_reg, uint32_t shorts_mask)</argsstring>
        <name>nrf_radio_shorts_set</name>
        <param>
          <type>NRF_RADIO_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>shorts_mask</declname>
        </param>
        <briefdescription>
<para>Function for setting the configuration of RADIO shortcuts. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">shorts_mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Shortcuts configuration to set. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_radio.h" line="1629" column="24" bodyfile="hal/nrf_radio.h" bodystart="1629" bodyend="1632" declfile="hal/nrf_radio.h" declline="740" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__radio__hal_1gaad50cd6fcdb24e15fbaf79ac6a3c2135" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_radio_shorts_get</definition>
        <argsstring>(NRF_RADIO_Type const *p_reg)</argsstring>
        <name>nrf_radio_shorts_get</name>
        <param>
          <type>NRF_RADIO_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting the configuration of RADIO shortcuts. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Mask of currently enabled shortcuts. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_radio.h" line="1634" column="28" bodyfile="hal/nrf_radio.h" bodystart="1634" bodyend="1637" declfile="hal/nrf_radio.h" declline="749" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__radio__hal_1ga69ff216ed79aa8b7bdee0f378bd2607b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_radio_int_enable</definition>
        <argsstring>(NRF_RADIO_Type *p_reg, uint32_t mask)</argsstring>
        <name>nrf_radio_int_enable</name>
        <param>
          <type>NRF_RADIO_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Function for enabling specified RADIO interrupts. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of interrupts to be enabled. Use <ref refid="group__nrf__radio__hal_1ga73ab58523931ff53d367f0fda54a545f" kindref="member">nrf_radio_int_mask_t</ref> values for bit masking. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_radio.h" line="1639" column="24" bodyfile="hal/nrf_radio.h" bodystart="1639" bodyend="1646" declfile="hal/nrf_radio.h" declline="758" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__radio__hal_1ga9405c7546f98d1a3a4408a8ef6677094" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_radio_int_disable</definition>
        <argsstring>(NRF_RADIO_Type *p_reg, uint32_t mask)</argsstring>
        <name>nrf_radio_int_disable</name>
        <param>
          <type>NRF_RADIO_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Function for disabling specified RADIO interrupts. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of interrupts to be disabled. Use <ref refid="group__nrf__radio__hal_1ga73ab58523931ff53d367f0fda54a545f" kindref="member">nrf_radio_int_mask_t</ref> values for bit masking. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_radio.h" line="1648" column="24" bodyfile="hal/nrf_radio.h" bodystart="1648" bodyend="1655" declfile="hal/nrf_radio.h" declline="767" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__radio__hal_1gaae5190782f876f0d8b69c8298259f2c7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_radio_int_enable_check</definition>
        <argsstring>(NRF_RADIO_Type const *p_reg, uint32_t mask)</argsstring>
        <name>nrf_radio_int_enable_check</name>
        <param>
          <type>NRF_RADIO_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Function for checking if the specified interrupts are enabled. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of interrupts to be checked. Use <ref refid="group__nrf__radio__hal_1ga73ab58523931ff53d367f0fda54a545f" kindref="member">nrf_radio_int_mask_t</ref> values for bit masking.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Mask of enabled interrupts. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_radio.h" line="1657" column="28" bodyfile="hal/nrf_radio.h" bodystart="1657" bodyend="1664" declfile="hal/nrf_radio.h" declline="778" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__radio__hal_1gaed6f1018c5d7a16a910e2af53f35fc85" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_radio_subscribe_set</definition>
        <argsstring>(NRF_RADIO_Type *p_reg, nrf_radio_task_t task, uint8_t channel)</argsstring>
        <name>nrf_radio_subscribe_set</name>
        <param>
          <type>NRF_RADIO_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__radio__hal_1ga607fff2f027c323b3dc8af40ab489a2f" kindref="member">nrf_radio_task_t</ref></type>
          <declname>task</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>channel</declname>
        </param>
        <briefdescription>
<para>Function for setting the subscribe configuration for a given RADIO task. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">task</parametername>
</parameternamelist>
<parameterdescription>
<para>Task for which to set the configuration. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">channel</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel through which to subscribe events. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_radio.h" line="789" column="24" declfile="hal/nrf_radio.h" declline="789" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__radio__hal_1gae69ee57dd4175dfc9660cf994b8a8035" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_radio_subscribe_clear</definition>
        <argsstring>(NRF_RADIO_Type *p_reg, nrf_radio_task_t task)</argsstring>
        <name>nrf_radio_subscribe_clear</name>
        <param>
          <type>NRF_RADIO_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__radio__hal_1ga607fff2f027c323b3dc8af40ab489a2f" kindref="member">nrf_radio_task_t</ref></type>
          <declname>task</declname>
        </param>
        <briefdescription>
<para>Function for clearing the subscribe configuration for a given RADIO task. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">task</parametername>
</parameternamelist>
<parameterdescription>
<para>Task for which to clear the configuration. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_radio.h" line="800" column="24" declfile="hal/nrf_radio.h" declline="800" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__radio__hal_1ga2746b85fd6b490195aef6b8740e8e62b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_radio_publish_set</definition>
        <argsstring>(NRF_RADIO_Type *p_reg, nrf_radio_event_t event, uint8_t channel)</argsstring>
        <name>nrf_radio_publish_set</name>
        <param>
          <type>NRF_RADIO_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__radio__hal_1ga7c4b15ec33a0704a9caa2fa0b36e98bb" kindref="member">nrf_radio_event_t</ref></type>
          <declname>event</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>channel</declname>
        </param>
        <briefdescription>
<para>Function for setting the publish configuration for a given RADIO event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event for which to set the configuration. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">channel</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel through which to publish the event. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_radio.h" line="811" column="24" declfile="hal/nrf_radio.h" declline="811" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__radio__hal_1gaf7652e300e57600c73bb2567f728aa1e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_radio_publish_clear</definition>
        <argsstring>(NRF_RADIO_Type *p_reg, nrf_radio_event_t event)</argsstring>
        <name>nrf_radio_publish_clear</name>
        <param>
          <type>NRF_RADIO_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__radio__hal_1ga7c4b15ec33a0704a9caa2fa0b36e98bb" kindref="member">nrf_radio_event_t</ref></type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>Function for clearing the publish configuration for a given RADIO event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event for which to clear the configuration. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_radio.h" line="822" column="24" declfile="hal/nrf_radio.h" declline="822" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__radio__hal_1gab3f2df22572330363d9dc90de1a1b30e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE bool</type>
        <definition>NRF_STATIC_INLINE bool nrf_radio_crc_status_check</definition>
        <argsstring>(NRF_RADIO_Type const *p_reg)</argsstring>
        <name>nrf_radio_crc_status_check</name>
        <param>
          <type>NRF_RADIO_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting CRC status of last received packet. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>The packet was received without CRC error. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>The packet was received with CRC error. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_radio.h" line="1696" column="24" bodyfile="hal/nrf_radio.h" bodystart="1696" bodyend="1700" declfile="hal/nrf_radio.h" declline="834" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__radio__hal_1gacc37a3877b0c545ce6552760354c7460" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint8_t</type>
        <definition>NRF_STATIC_INLINE uint8_t nrf_radio_rxmatch_get</definition>
        <argsstring>(NRF_RADIO_Type const *p_reg)</argsstring>
        <name>nrf_radio_rxmatch_get</name>
        <param>
          <type>NRF_RADIO_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting the received address. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Received address. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_radio.h" line="1702" column="27" bodyfile="hal/nrf_radio.h" bodystart="1702" bodyend="1705" declfile="hal/nrf_radio.h" declline="843" declcolumn="27"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__radio__hal_1ga17d4cc3f5e15481ac6265a832acf896e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_radio_rxcrc_get</definition>
        <argsstring>(NRF_RADIO_Type const *p_reg)</argsstring>
        <name>nrf_radio_rxcrc_get</name>
        <param>
          <type>NRF_RADIO_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting CRC field of the last received packet. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>CRC field of previously received packet. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_radio.h" line="1707" column="28" bodyfile="hal/nrf_radio.h" bodystart="1707" bodyend="1710" declfile="hal/nrf_radio.h" declline="852" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__radio__hal_1gadc7960a01d313bab770fdbc3cda783d2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint8_t</type>
        <definition>NRF_STATIC_INLINE uint8_t nrf_radio_dai_get</definition>
        <argsstring>(NRF_RADIO_Type const *p_reg)</argsstring>
        <name>nrf_radio_dai_get</name>
        <param>
          <type>NRF_RADIO_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting the device address match index. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Device adress match index. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_radio.h" line="1712" column="27" bodyfile="hal/nrf_radio.h" bodystart="1712" bodyend="1715" declfile="hal/nrf_radio.h" declline="861" declcolumn="27"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__radio__hal_1gaa0025b27a99d784ff85ccbfe2ee58f97" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint8_t</type>
        <definition>NRF_STATIC_INLINE uint8_t nrf_radio_pdustat_get</definition>
        <argsstring>(NRF_RADIO_Type const *p_reg)</argsstring>
        <name>nrf_radio_pdustat_get</name>
        <param>
          <type>NRF_RADIO_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting status on payload length. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>The payload is lesser than PCNF1.MAXLEN. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>1</parametername>
</parameternamelist>
<parameterdescription>
<para>The payload is greater than PCNF1.MAXLEN. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_radio.h" line="872" column="27" declfile="hal/nrf_radio.h" declline="872" declcolumn="27"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__radio__hal_1ga2b8c779d8e91304b2f184688fa4eada4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint8_t</type>
        <definition>NRF_STATIC_INLINE uint8_t nrf_radio_cistat_get</definition>
        <argsstring>(NRF_RADIO_Type const *p_reg)</argsstring>
        <name>nrf_radio_cistat_get</name>
        <param>
          <type>NRF_RADIO_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting status on what rate packet is received with in Long Range. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>The frame is received at 125kbps. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>1</parametername>
</parameternamelist>
<parameterdescription>
<para>The frame is received at 500kbps. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_radio.h" line="884" column="27" declfile="hal/nrf_radio.h" declline="884" declcolumn="27"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__radio__hal_1ga19e2b6c37fd522fc4cc526f58efc03c8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_radio_packetptr_set</definition>
        <argsstring>(NRF_RADIO_Type *p_reg, void const *p_packet)</argsstring>
        <name>nrf_radio_packetptr_set</name>
        <param>
          <type>NRF_RADIO_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>void const *</type>
          <declname>p_packet</declname>
        </param>
        <briefdescription>
<para>Function for setting packet pointer to given location in memory. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">p_packet</parametername>
</parameternamelist>
<parameterdescription>
<para>Packet pointer. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_radio.h" line="1731" column="24" bodyfile="hal/nrf_radio.h" bodystart="1731" bodyend="1734" declfile="hal/nrf_radio.h" declline="893" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__radio__hal_1gae2007ebe98fa8315ec15e47feba3bc2f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void *</type>
        <definition>NRF_STATIC_INLINE void * nrf_radio_packetptr_get</definition>
        <argsstring>(NRF_RADIO_Type const *p_reg)</argsstring>
        <name>nrf_radio_packetptr_get</name>
        <param>
          <type>NRF_RADIO_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting packet pointer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to tx or rx packet buffer. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_radio.h" line="1736" column="25" bodyfile="hal/nrf_radio.h" bodystart="1736" bodyend="1739" declfile="hal/nrf_radio.h" declline="902" declcolumn="25"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__radio__hal_1ga5336279c1fd3e4ef5f6a28c2705eee13" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_radio_frequency_set</definition>
        <argsstring>(NRF_RADIO_Type *p_reg, uint16_t radio_frequency)</argsstring>
        <name>nrf_radio_frequency_set</name>
        <param>
          <type>NRF_RADIO_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>radio_frequency</declname>
        </param>
        <briefdescription>
<para>Function for setting the radio frequency. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">radio_frequency</parametername>
</parameternamelist>
<parameterdescription>
<para>Frequency in MHz. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_radio.h" line="1741" column="24" bodyfile="hal/nrf_radio.h" bodystart="1741" bodyend="1763" declfile="hal/nrf_radio.h" declline="910" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__radio__hal_1gae4f554230e5f845c82ac12db3615df64" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint16_t</type>
        <definition>NRF_STATIC_INLINE uint16_t nrf_radio_frequency_get</definition>
        <argsstring>(NRF_RADIO_Type const *p_reg)</argsstring>
        <name>nrf_radio_frequency_get</name>
        <param>
          <type>NRF_RADIO_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting the radio frequency. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Frequency in MHz. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_radio.h" line="1765" column="28" bodyfile="hal/nrf_radio.h" bodystart="1765" bodyend="1782" declfile="hal/nrf_radio.h" declline="919" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__radio__hal_1gaa4a51c240d14e2135455dfb9f8d836ba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_radio_txpower_set</definition>
        <argsstring>(NRF_RADIO_Type *p_reg, nrf_radio_txpower_t tx_power)</argsstring>
        <name>nrf_radio_txpower_set</name>
        <param>
          <type>NRF_RADIO_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__radio__hal_1gaf10bff1d03d8156b3af56540701d6b3d" kindref="member">nrf_radio_txpower_t</ref></type>
          <declname>tx_power</declname>
        </param>
        <briefdescription>
<para>Function for setting the radio transmit power. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">tx_power</parametername>
</parameternamelist>
<parameterdescription>
<para>Transmit power of the radio [dBm]. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_radio.h" line="1784" column="24" bodyfile="hal/nrf_radio.h" bodystart="1784" bodyend="1787" declfile="hal/nrf_radio.h" declline="927" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__radio__hal_1ga4e474b7e5f776a61f799fe847536f3d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE <ref refid="group__nrf__radio__hal_1gaf10bff1d03d8156b3af56540701d6b3d" kindref="member">nrf_radio_txpower_t</ref></type>
        <definition>NRF_STATIC_INLINE nrf_radio_txpower_t nrf_radio_txpower_get</definition>
        <argsstring>(NRF_RADIO_Type const *p_reg)</argsstring>
        <name>nrf_radio_txpower_get</name>
        <param>
          <type>NRF_RADIO_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting the radio transmit power. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Transmit power of the radio. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_radio.h" line="1789" column="39" bodyfile="hal/nrf_radio.h" bodystart="1789" bodyend="1792" declfile="hal/nrf_radio.h" declline="936" declcolumn="39"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__radio__hal_1gafc8fff377c15ae2c926bf1daaf9913a5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_radio_mode_set</definition>
        <argsstring>(NRF_RADIO_Type *p_reg, nrf_radio_mode_t radio_mode)</argsstring>
        <name>nrf_radio_mode_set</name>
        <param>
          <type>NRF_RADIO_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__radio__hal_1gacf631e29d43c93acac290a18850e9c40" kindref="member">nrf_radio_mode_t</ref></type>
          <declname>radio_mode</declname>
        </param>
        <briefdescription>
<para>Function for setting the radio data rate and modulation settings. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">radio_mode</parametername>
</parameternamelist>
<parameterdescription>
<para>Radio data rate and modulation. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_radio.h" line="1794" column="24" bodyfile="hal/nrf_radio.h" bodystart="1794" bodyend="1797" declfile="hal/nrf_radio.h" declline="944" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__radio__hal_1gaac5ea7fe15b9208f86fe7a5ecce15229" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE <ref refid="group__nrf__radio__hal_1gacf631e29d43c93acac290a18850e9c40" kindref="member">nrf_radio_mode_t</ref></type>
        <definition>NRF_STATIC_INLINE nrf_radio_mode_t nrf_radio_mode_get</definition>
        <argsstring>(NRF_RADIO_Type const *p_reg)</argsstring>
        <name>nrf_radio_mode_get</name>
        <param>
          <type>NRF_RADIO_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting Radio data rate and modulation settings. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Radio data rate and modulation. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_radio.h" line="1799" column="36" bodyfile="hal/nrf_radio.h" bodystart="1799" bodyend="1802" declfile="hal/nrf_radio.h" declline="953" declcolumn="36"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__radio__hal_1ga3ecb0f981f451b970810b457c70abcce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_radio_packet_configure</definition>
        <argsstring>(NRF_RADIO_Type *p_reg, nrf_radio_packet_conf_t const *p_config)</argsstring>
        <name>nrf_radio_packet_configure</name>
        <param>
          <type>NRF_RADIO_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="structnrf__radio__packet__conf__t" kindref="compound">nrf_radio_packet_conf_t</ref> const *</type>
          <declname>p_config</declname>
        </param>
        <briefdescription>
<para>Function for setting the packet configuration. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">p_config</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure with packet configuration. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_radio.h" line="1804" column="24" bodyfile="hal/nrf_radio.h" bodystart="1804" bodyend="1840" declfile="hal/nrf_radio.h" declline="961" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__radio__hal_1gaebf659968f4b463db0b36350ee1fd194" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_radio_base0_set</definition>
        <argsstring>(NRF_RADIO_Type *p_reg, uint32_t address)</argsstring>
        <name>nrf_radio_base0_set</name>
        <param>
          <type>NRF_RADIO_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>address</declname>
        </param>
        <briefdescription>
<para>Function for setting the base address 0. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">address</parametername>
</parameternamelist>
<parameterdescription>
<para>Base address 0 value. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_radio.h" line="1842" column="24" bodyfile="hal/nrf_radio.h" bodystart="1842" bodyend="1845" declfile="hal/nrf_radio.h" declline="970" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__radio__hal_1ga93bf51bdcbd9fd0cb9af6c90e6127e50" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_radio_base0_get</definition>
        <argsstring>(NRF_RADIO_Type const *p_reg)</argsstring>
        <name>nrf_radio_base0_get</name>
        <param>
          <type>NRF_RADIO_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting the base address 0. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Base address 0. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_radio.h" line="1847" column="28" bodyfile="hal/nrf_radio.h" bodystart="1847" bodyend="1850" declfile="hal/nrf_radio.h" declline="979" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__radio__hal_1ga3485758d1cd9c6645ccbc0b601e7bd13" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_radio_base1_set</definition>
        <argsstring>(NRF_RADIO_Type *p_reg, uint32_t address)</argsstring>
        <name>nrf_radio_base1_set</name>
        <param>
          <type>NRF_RADIO_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>address</declname>
        </param>
        <briefdescription>
<para>Function for setting Base address 1. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">address</parametername>
</parameternamelist>
<parameterdescription>
<para>Base address 1 value. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_radio.h" line="1852" column="24" bodyfile="hal/nrf_radio.h" bodystart="1852" bodyend="1855" declfile="hal/nrf_radio.h" declline="987" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__radio__hal_1gad3ce36538b713e9d6186af3d0ae0b29d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_radio_base1_get</definition>
        <argsstring>(NRF_RADIO_Type const *p_reg)</argsstring>
        <name>nrf_radio_base1_get</name>
        <param>
          <type>NRF_RADIO_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting base address 1. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Base address 1. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_radio.h" line="1857" column="28" bodyfile="hal/nrf_radio.h" bodystart="1857" bodyend="1860" declfile="hal/nrf_radio.h" declline="996" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__radio__hal_1ga9c75649dbb9e5b374f662dfb0787e445" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_radio_prefix0_set</definition>
        <argsstring>(NRF_RADIO_Type *p_reg, uint32_t prefixes)</argsstring>
        <name>nrf_radio_prefix0_set</name>
        <param>
          <type>NRF_RADIO_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>prefixes</declname>
        </param>
        <briefdescription>
<para>Function for setting prefixes bytes for logical addresses 0-3. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">prefixes</parametername>
</parameternamelist>
<parameterdescription>
<para>Prefixes bytes for logical addresses 0-3. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_radio.h" line="1862" column="24" bodyfile="hal/nrf_radio.h" bodystart="1862" bodyend="1865" declfile="hal/nrf_radio.h" declline="1004" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__radio__hal_1ga2bba67daa09782376a4fb4b0432a0fed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_radio_prefix0_get</definition>
        <argsstring>(NRF_RADIO_Type const *p_reg)</argsstring>
        <name>nrf_radio_prefix0_get</name>
        <param>
          <type>NRF_RADIO_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting prefixes bytes for logical addresses 0-3. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Prefixes bytes for logical addresses 0-3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_radio.h" line="1867" column="28" bodyfile="hal/nrf_radio.h" bodystart="1867" bodyend="1870" declfile="hal/nrf_radio.h" declline="1013" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__radio__hal_1ga71c5eae49d69976121d9ea00904023d3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_radio_prefix1_set</definition>
        <argsstring>(NRF_RADIO_Type *p_reg, uint32_t prefixes)</argsstring>
        <name>nrf_radio_prefix1_set</name>
        <param>
          <type>NRF_RADIO_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>prefixes</declname>
        </param>
        <briefdescription>
<para>Function for setting prefixes bytes for logical addresses 4-7. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">prefixes</parametername>
</parameternamelist>
<parameterdescription>
<para>Prefixes bytes for logical addresses 4-7. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_radio.h" line="1872" column="24" bodyfile="hal/nrf_radio.h" bodystart="1872" bodyend="1875" declfile="hal/nrf_radio.h" declline="1021" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__radio__hal_1ga7ee51cb90e0c8f933f44998c997f447a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_radio_prefix1_get</definition>
        <argsstring>(NRF_RADIO_Type const *p_reg)</argsstring>
        <name>nrf_radio_prefix1_get</name>
        <param>
          <type>NRF_RADIO_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting prefixes bytes for logical addresses 4-7. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Prefixes bytes for logical addresses 4-7 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_radio.h" line="1877" column="28" bodyfile="hal/nrf_radio.h" bodystart="1877" bodyend="1880" declfile="hal/nrf_radio.h" declline="1030" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__radio__hal_1gae88f74d8e994e7075f26be55845c832f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_radio_txaddress_set</definition>
        <argsstring>(NRF_RADIO_Type *p_reg, uint8_t txaddress)</argsstring>
        <name>nrf_radio_txaddress_set</name>
        <param>
          <type>NRF_RADIO_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>txaddress</declname>
        </param>
        <briefdescription>
<para>Function for setting the transmit address. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">txaddress</parametername>
</parameternamelist>
<parameterdescription>
<para>Logical address to be used when transmitting a packet. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_radio.h" line="1882" column="24" bodyfile="hal/nrf_radio.h" bodystart="1882" bodyend="1885" declfile="hal/nrf_radio.h" declline="1038" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__radio__hal_1ga6991cd5904a1d3ca463285cc99cf6cdd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint8_t</type>
        <definition>NRF_STATIC_INLINE uint8_t nrf_radio_txaddress_get</definition>
        <argsstring>(NRF_RADIO_Type const *p_reg)</argsstring>
        <name>nrf_radio_txaddress_get</name>
        <param>
          <type>NRF_RADIO_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting the transmit address select. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Logical address to be used when transmitting a packet. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_radio.h" line="1887" column="27" bodyfile="hal/nrf_radio.h" bodystart="1887" bodyend="1891" declfile="hal/nrf_radio.h" declline="1047" declcolumn="27"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__radio__hal_1gad397ff61bf37da3082f5e80820da4826" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_radio_rxaddresses_set</definition>
        <argsstring>(NRF_RADIO_Type *p_reg, uint8_t rxaddresses)</argsstring>
        <name>nrf_radio_rxaddresses_set</name>
        <param>
          <type>NRF_RADIO_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>rxaddresses</declname>
        </param>
        <briefdescription>
<para>Function for for selecting the receive addresses. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">rxaddresses</parametername>
</parameternamelist>
<parameterdescription>
<para>Enable or disable reception on logical address i. Read more in the Product Specification. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_radio.h" line="1893" column="24" bodyfile="hal/nrf_radio.h" bodystart="1893" bodyend="1896" declfile="hal/nrf_radio.h" declline="1056" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__radio__hal_1ga40aab0d76bc5761fc2f7922059b873d0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint8_t</type>
        <definition>NRF_STATIC_INLINE uint8_t nrf_radio_rxaddresses_get</definition>
        <argsstring>(NRF_RADIO_Type const *p_reg)</argsstring>
        <name>nrf_radio_rxaddresses_get</name>
        <param>
          <type>NRF_RADIO_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting receive address select. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Receive address select. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_radio.h" line="1898" column="27" bodyfile="hal/nrf_radio.h" bodystart="1898" bodyend="1901" declfile="hal/nrf_radio.h" declline="1065" declcolumn="27"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__radio__hal_1ga4ca667b05c3dea42b646b8c57009e868" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_radio_crc_configure</definition>
        <argsstring>(NRF_RADIO_Type *p_reg, uint8_t crc_length, nrf_radio_crc_addr_t crc_address, uint32_t crc_polynominal)</argsstring>
        <name>nrf_radio_crc_configure</name>
        <param>
          <type>NRF_RADIO_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>crc_length</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__radio__hal_1ga9e800ae5bddb82989b601ec2407ea229" kindref="member">nrf_radio_crc_addr_t</ref></type>
          <declname>crc_address</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>crc_polynominal</declname>
        </param>
        <briefdescription>
<para>Function for configure CRC. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">crc_length</parametername>
</parameternamelist>
<parameterdescription>
<para>CRC length in number of bytes [0-3]. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">crc_address</parametername>
</parameternamelist>
<parameterdescription>
<para>Include or exclude packet address field out of CRC. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">crc_polynominal</parametername>
</parameternamelist>
<parameterdescription>
<para>CRC polynominal to set. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_radio.h" line="1903" column="24" bodyfile="hal/nrf_radio.h" bodystart="1903" bodyend="1915" declfile="hal/nrf_radio.h" declline="1075" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__radio__hal_1ga65c98c3220300b11c3d00fd03764d1e5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_radio_crcinit_set</definition>
        <argsstring>(NRF_RADIO_Type *p_reg, uint32_t crc_init_value)</argsstring>
        <name>nrf_radio_crcinit_set</name>
        <param>
          <type>NRF_RADIO_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>crc_init_value</declname>
        </param>
        <briefdescription>
<para>Function for setting CRC initial value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">crc_init_value</parametername>
</parameternamelist>
<parameterdescription>
<para>CRC initial value </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_radio.h" line="1917" column="24" bodyfile="hal/nrf_radio.h" bodystart="1917" bodyend="1920" declfile="hal/nrf_radio.h" declline="1086" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__radio__hal_1gadeed410584b6e4cfa4336c81260ad207" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_radio_crcinit_get</definition>
        <argsstring>(NRF_RADIO_Type const *p_reg)</argsstring>
        <name>nrf_radio_crcinit_get</name>
        <param>
          <type>NRF_RADIO_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting CRC initial value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>CRC initial value. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_radio.h" line="1922" column="28" bodyfile="hal/nrf_radio.h" bodystart="1922" bodyend="1925" declfile="hal/nrf_radio.h" declline="1095" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__radio__hal_1ga8c63884b8ce414fcdf14a1232b9f1886" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_radio_ifs_set</definition>
        <argsstring>(NRF_RADIO_Type *p_reg, uint32_t radio_ifs)</argsstring>
        <name>nrf_radio_ifs_set</name>
        <param>
          <type>NRF_RADIO_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>radio_ifs</declname>
        </param>
        <briefdescription>
<para>Function for setting Inter Frame Spacing interval. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">radio_ifs</parametername>
</parameternamelist>
<parameterdescription>
<para>Inter frame spacing interval [us]. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_radio.h" line="1927" column="24" bodyfile="hal/nrf_radio.h" bodystart="1927" bodyend="1930" declfile="hal/nrf_radio.h" declline="1103" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__radio__hal_1ga4ccdcb4a2ed6074e48e33fa973b5d4ca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_radio_ifs_get</definition>
        <argsstring>(NRF_RADIO_Type const *p_reg)</argsstring>
        <name>nrf_radio_ifs_get</name>
        <param>
          <type>NRF_RADIO_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting Inter Frame Spacing interval. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Inter frame spacing interval [us]. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_radio.h" line="1932" column="28" bodyfile="hal/nrf_radio.h" bodystart="1932" bodyend="1935" declfile="hal/nrf_radio.h" declline="1112" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__radio__hal_1gafd04597ddc9b24925cccff5d53a40059" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint8_t</type>
        <definition>NRF_STATIC_INLINE uint8_t nrf_radio_rssi_sample_get</definition>
        <argsstring>(NRF_RADIO_Type const *p_reg)</argsstring>
        <name>nrf_radio_rssi_sample_get</name>
        <param>
          <type>NRF_RADIO_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting RSSI sample result. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>The read value is a positive value while the actual received signal is a negative value. Actual received signal strength is therefore as follows: received signal strength = - read_value dBm .</para>
</simplesect>
<simplesect kind="return"><para>RSSI sample result. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_radio.h" line="1937" column="27" bodyfile="hal/nrf_radio.h" bodystart="1937" bodyend="1941" declfile="hal/nrf_radio.h" declline="1125" declcolumn="27"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__radio__hal_1gacfe496cdb278f3616df3e8aa187e8f28" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE <ref refid="group__nrf__radio__hal_1ga4ea9b1af13c23dc9316d60ca649b71dc" kindref="member">nrf_radio_state_t</ref></type>
        <definition>NRF_STATIC_INLINE nrf_radio_state_t nrf_radio_state_get</definition>
        <argsstring>(NRF_RADIO_Type const *p_reg)</argsstring>
        <name>nrf_radio_state_get</name>
        <param>
          <type>NRF_RADIO_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting the current state of the radio module. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Current radio state. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_radio.h" line="1943" column="37" bodyfile="hal/nrf_radio.h" bodystart="1943" bodyend="1946" declfile="hal/nrf_radio.h" declline="1134" declcolumn="37"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__radio__hal_1ga638aefc787fd5638fb94119e368f71ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_radio_datawhiteiv_set</definition>
        <argsstring>(NRF_RADIO_Type *p_reg, uint8_t datawhiteiv)</argsstring>
        <name>nrf_radio_datawhiteiv_set</name>
        <param>
          <type>NRF_RADIO_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>datawhiteiv</declname>
        </param>
        <briefdescription>
<para>Function for setting the data whitening initial value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">datawhiteiv</parametername>
</parameternamelist>
<parameterdescription>
<para>Data whitening initial value. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_radio.h" line="1948" column="24" bodyfile="hal/nrf_radio.h" bodystart="1948" bodyend="1956" declfile="hal/nrf_radio.h" declline="1142" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__radio__hal_1ga0aabddcd53ebbebe965f6ad38ab292bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint8_t</type>
        <definition>NRF_STATIC_INLINE uint8_t nrf_radio_datawhiteiv_get</definition>
        <argsstring>(NRF_RADIO_Type const *p_reg)</argsstring>
        <name>nrf_radio_datawhiteiv_get</name>
        <param>
          <type>NRF_RADIO_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting the data whitening initial value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Data whitening initial value. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_radio.h" line="1958" column="27" bodyfile="hal/nrf_radio.h" bodystart="1958" bodyend="1965" declfile="hal/nrf_radio.h" declline="1151" declcolumn="27"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__radio__hal_1ga54628c088d83bea509646485b829682d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_radio_bcc_set</definition>
        <argsstring>(NRF_RADIO_Type *p_reg, uint32_t radio_bcc)</argsstring>
        <name>nrf_radio_bcc_set</name>
        <param>
          <type>NRF_RADIO_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>radio_bcc</declname>
        </param>
        <briefdescription>
<para>Function for setting Bit counter compare. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">radio_bcc</parametername>
</parameternamelist>
<parameterdescription>
<para>Bit counter compare [bits]. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_radio.h" line="1967" column="24" bodyfile="hal/nrf_radio.h" bodystart="1967" bodyend="1970" declfile="hal/nrf_radio.h" declline="1159" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__radio__hal_1gabde34a675642ac812c9a94d8cd7b8c69" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_radio_bcc_get</definition>
        <argsstring>(NRF_RADIO_Type const *p_reg)</argsstring>
        <name>nrf_radio_bcc_get</name>
        <param>
          <type>NRF_RADIO_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting Bit counter compare. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Bit counter compare. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_radio.h" line="1972" column="28" bodyfile="hal/nrf_radio.h" bodystart="1972" bodyend="1975" declfile="hal/nrf_radio.h" declline="1168" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__radio__hal_1ga4d7da491132adbd997aa6cf6f96ae61a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_radio_dab_set</definition>
        <argsstring>(NRF_RADIO_Type *p_reg, uint32_t dab_value, uint8_t segment)</argsstring>
        <name>nrf_radio_dab_set</name>
        <param>
          <type>NRF_RADIO_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>dab_value</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>segment</declname>
        </param>
        <briefdescription>
<para>Function for setting Device address base segment. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">dab_value</parametername>
</parameternamelist>
<parameterdescription>
<para>Particular base segment value. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">segment</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of the particular Device address base segment register. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_radio.h" line="1977" column="24" bodyfile="hal/nrf_radio.h" bodystart="1977" bodyend="1983" declfile="hal/nrf_radio.h" declline="1177" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__radio__hal_1gac0d3c65514eab7218eb4d44a5b3e5b1d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_radio_dab_get</definition>
        <argsstring>(NRF_RADIO_Type const *p_reg, uint8_t segment)</argsstring>
        <name>nrf_radio_dab_get</name>
        <param>
          <type>NRF_RADIO_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>segment</declname>
        </param>
        <briefdescription>
<para>Function for getting Device address base segment. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">segment</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of the Device address base segment.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Particular segment of the Device address base. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_radio.h" line="1985" column="28" bodyfile="hal/nrf_radio.h" bodystart="1985" bodyend="1989" declfile="hal/nrf_radio.h" declline="1189" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__radio__hal_1ga9517e6bc36dabadec2a92e069503e2fa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_radio_dap_set</definition>
        <argsstring>(NRF_RADIO_Type *p_reg, uint16_t dap_value, uint8_t prefix_index)</argsstring>
        <name>nrf_radio_dap_set</name>
        <param>
          <type>NRF_RADIO_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>dap_value</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>prefix_index</declname>
        </param>
        <briefdescription>
<para>Function for setting device address prefix. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">dap_value</parametername>
</parameternamelist>
<parameterdescription>
<para>Particular device address prefix value. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">prefix_index</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of the particular device address prefix register. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_radio.h" line="1991" column="24" bodyfile="hal/nrf_radio.h" bodystart="1991" bodyend="1997" declfile="hal/nrf_radio.h" declline="1198" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__radio__hal_1gac4aeecef4b8bf243b041d95a1a707b75" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_radio_dap_get</definition>
        <argsstring>(NRF_RADIO_Type const *p_reg, uint8_t prefix_index)</argsstring>
        <name>nrf_radio_dap_get</name>
        <param>
          <type>NRF_RADIO_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>prefix_index</declname>
        </param>
        <briefdescription>
<para>Function for getting Device address prefix. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">prefix_index</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of the Device address prefix segment.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Particular segment of the Device address prefix. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_radio.h" line="1999" column="28" bodyfile="hal/nrf_radio.h" bodystart="1999" bodyend="2003" declfile="hal/nrf_radio.h" declline="1210" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__radio__hal_1ga5111f4c5b1f8e556bd074212207b73fa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_radio_dacnf_set</definition>
        <argsstring>(NRF_RADIO_Type *p_reg, uint8_t ena, uint8_t txadd)</argsstring>
        <name>nrf_radio_dacnf_set</name>
        <param>
          <type>NRF_RADIO_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>ena</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>txadd</declname>
        </param>
        <briefdescription>
<para>Function for setting device address match configuration. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Read more about configuring device address match in the Product Specification.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">ena</parametername>
</parameternamelist>
<parameterdescription>
<para>Device address matching bitmask. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">txadd</parametername>
</parameternamelist>
<parameterdescription>
<para>TxAdd bitmask. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_radio.h" line="2005" column="24" bodyfile="hal/nrf_radio.h" bodystart="2005" bodyend="2009" declfile="hal/nrf_radio.h" declline="1221" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__radio__hal_1ga3fc6cb32144b31cd6cb23317031baa14" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint8_t</type>
        <definition>NRF_STATIC_INLINE uint8_t nrf_radio_dacnf_ena_get</definition>
        <argsstring>(NRF_RADIO_Type const *p_reg)</argsstring>
        <name>nrf_radio_dacnf_ena_get</name>
        <param>
          <type>NRF_RADIO_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting ENA field of the Device address match configuration register. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>ENA field of the Device address match configuration register. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_radio.h" line="2011" column="27" bodyfile="hal/nrf_radio.h" bodystart="2011" bodyend="2021" declfile="hal/nrf_radio.h" declline="1230" declcolumn="27"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__radio__hal_1ga97152ce4b608445f2b011b6268efdf9a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint8_t</type>
        <definition>NRF_STATIC_INLINE uint8_t nrf_radio_dacnf_txadd_get</definition>
        <argsstring>(NRF_RADIO_Type const *p_reg)</argsstring>
        <name>nrf_radio_dacnf_txadd_get</name>
        <param>
          <type>NRF_RADIO_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting TXADD field of the Device address match configuration register. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>TXADD field of the Device address match configuration register. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_radio.h" line="2023" column="27" bodyfile="hal/nrf_radio.h" bodystart="2023" bodyend="2033" declfile="hal/nrf_radio.h" declline="1239" declcolumn="27"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__radio__hal_1gafe19206475193a6ae885d35aa717621d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_radio_mhmu_search_pattern_set</definition>
        <argsstring>(NRF_RADIO_Type *p_reg, uint32_t radio_mhmu_search_pattern)</argsstring>
        <name>nrf_radio_mhmu_search_pattern_set</name>
        <param>
          <type>NRF_RADIO_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>radio_mhmu_search_pattern</declname>
        </param>
        <briefdescription>
<para>Function for setting MAC Header Match Unit search pattern configuration. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">radio_mhmu_search_pattern</parametername>
</parameternamelist>
<parameterdescription>
<para>Search Pattern Configuration. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_radio.h" line="1250" column="6" declfile="hal/nrf_radio.h" declline="1250" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__radio__hal_1ga6c661a8c9632e1c65a54d90c2db249db" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_radio_mhmu_search_pattern_get</definition>
        <argsstring>(NRF_RADIO_Type const *p_reg)</argsstring>
        <name>nrf_radio_mhmu_search_pattern_get</name>
        <param>
          <type>NRF_RADIO_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting MAC Header Match Unit search pattern configuration. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Search Pattern Configuration. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_radio.h" line="1260" column="28" declfile="hal/nrf_radio.h" declline="1260" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__radio__hal_1ga9a0edc87214f5b7df9bbb5b51c23e642" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_radio_mhmu_pattern_mask_set</definition>
        <argsstring>(NRF_RADIO_Type *p_reg, uint32_t radio_mhmu_pattern_mask)</argsstring>
        <name>nrf_radio_mhmu_pattern_mask_set</name>
        <param>
          <type>NRF_RADIO_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>radio_mhmu_pattern_mask</declname>
        </param>
        <briefdescription>
<para>Function for setting MAC Header Match Unit pattern mask configuration. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">radio_mhmu_pattern_mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Pattern mask. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_radio.h" line="1268" column="24" declfile="hal/nrf_radio.h" declline="1268" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__radio__hal_1gaa41d70217e353ef904b325a74048b9ba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_radio_mhmu_pattern_mask_get</definition>
        <argsstring>(NRF_RADIO_Type const *p_reg)</argsstring>
        <name>nrf_radio_mhmu_pattern_mask_get</name>
        <param>
          <type>NRF_RADIO_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting MAC Header Match Unit pattern mask configuration. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pattern mask. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_radio.h" line="1278" column="28" declfile="hal/nrf_radio.h" declline="1278" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__radio__hal_1ga3012c9c314425548a834f0d420fff667" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_radio_modecnf0_set</definition>
        <argsstring>(NRF_RADIO_Type *p_reg, bool fast_ramp_up, uint8_t default_tx)</argsstring>
        <name>nrf_radio_modecnf0_set</name>
        <param>
          <type>NRF_RADIO_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>fast_ramp_up</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>default_tx</declname>
        </param>
        <briefdescription>
<para>Function for setting Radio mode configuration register 0. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">fast_ramp_up</parametername>
</parameternamelist>
<parameterdescription>
<para>Use fast radio ramp-up time </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">default_tx</parametername>
</parameternamelist>
<parameterdescription>
<para>Default TX value during inactivity. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_radio.h" line="1290" column="24" declfile="hal/nrf_radio.h" declline="1290" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__radio__hal_1gac1b7d1e3365a889f4e5eec2301f44b23" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE bool</type>
        <definition>NRF_STATIC_INLINE bool nrf_radio_modecnf0_ru_get</definition>
        <argsstring>(NRF_RADIO_Type const *p_reg)</argsstring>
        <name>nrf_radio_modecnf0_ru_get</name>
        <param>
          <type>NRF_RADIO_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting ramp-up time configuration of the Radio mode configuration register 0. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>If the ramp-up time is set to fast. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>If the ramp-up time is set to default. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_radio.h" line="1302" column="24" declfile="hal/nrf_radio.h" declline="1302" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__radio__hal_1gad111d826a2e9d30e9e72b10410ada319" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint8_t</type>
        <definition>NRF_STATIC_INLINE uint8_t nrf_radio_modecnf0_dtx_get</definition>
        <argsstring>(NRF_RADIO_Type const *p_reg)</argsstring>
        <name>nrf_radio_modecnf0_dtx_get</name>
        <param>
          <type>NRF_RADIO_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting default TX value of the Radio mode configuration register 0. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Default TX value. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_radio.h" line="1311" column="27" declfile="hal/nrf_radio.h" declline="1311" declcolumn="27"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__radio__hal_1gac3f588610775bd5e7ac12a63ef6690c6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_radio_fast_ramp_up_enable_set</definition>
        <argsstring>(NRF_RADIO_Type *p_reg, bool enable)</argsstring>
        <name>nrf_radio_fast_ramp_up_enable_set</name>
        <param>
          <type>NRF_RADIO_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>enable</declname>
        </param>
        <briefdescription>
<para>Function for enabling or disabling fast ramp-up setting. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">enable</parametername>
</parameternamelist>
<parameterdescription>
<para>True if fast ramp-up is to be enabled, false otherwise. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_radio.h" line="1321" column="24" declfile="hal/nrf_radio.h" declline="1321" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__radio__hal_1gad270e10d0413260e0ec3cc6c99ac1d5c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE bool</type>
        <definition>NRF_STATIC_INLINE bool nrf_radio_fast_ramp_up_check</definition>
        <argsstring>(NRF_RADIO_Type const *p_reg)</argsstring>
        <name>nrf_radio_fast_ramp_up_check</name>
        <param>
          <type>NRF_RADIO_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for checking fast ramp-up time configuration. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true If the ramp-up time is set to fast. </para>
</simplesect>
<simplesect kind="return"><para>false If the ramp-up time is set to default compatible with 180nm radio. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_radio.h" line="1331" column="24" declfile="hal/nrf_radio.h" declline="1331" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__radio__hal_1gabe40e1e0f7ef1d6d0a3266875dc9a426" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_radio_sfd_set</definition>
        <argsstring>(NRF_RADIO_Type *p_reg, uint8_t sfd)</argsstring>
        <name>nrf_radio_sfd_set</name>
        <param>
          <type>NRF_RADIO_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>sfd</declname>
        </param>
        <briefdescription>
<para>Function for setting IEEE 802.15.4 start of frame delimiter. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">sfd</parametername>
</parameternamelist>
<parameterdescription>
<para>IEEE 802.15.4 start of frame delimiter. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_radio.h" line="1341" column="24" declfile="hal/nrf_radio.h" declline="1341" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__radio__hal_1gae093ea5b904d9f957a7cc91d74232f79" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint8_t</type>
        <definition>NRF_STATIC_INLINE uint8_t nrf_radio_sfd_get</definition>
        <argsstring>(NRF_RADIO_Type const *p_reg)</argsstring>
        <name>nrf_radio_sfd_get</name>
        <param>
          <type>NRF_RADIO_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting IEEE 802.15.4 start of frame delimiter. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>IEEE 802.15.4 start of frame delimiter. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_radio.h" line="1350" column="27" declfile="hal/nrf_radio.h" declline="1350" declcolumn="27"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__radio__hal_1gaf5aa628960e620b1aa2fcfd30222ab4c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_radio_ed_loop_count_set</definition>
        <argsstring>(NRF_RADIO_Type *p_reg, uint32_t ed_loop_count)</argsstring>
        <name>nrf_radio_ed_loop_count_set</name>
        <param>
          <type>NRF_RADIO_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>ed_loop_count</declname>
        </param>
        <briefdescription>
<para>Function for setting number of iterations to perform ED scan. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">ed_loop_count</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of iterations during ED procedure. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_radio.h" line="1360" column="24" declfile="hal/nrf_radio.h" declline="1360" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__radio__hal_1ga871ffceb643be94c3376ec357faa5a8c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_radio_ed_cca_period_set</definition>
        <argsstring>(NRF_RADIO_Type *p_reg, uint8_t ed_period)</argsstring>
        <name>nrf_radio_ed_cca_period_set</name>
        <param>
          <type>NRF_RADIO_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>ed_period</declname>
        </param>
        <briefdescription>
<para>Function for setting the period of a ED/CCA iteration. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">ed_period</parametername>
</parameternamelist>
<parameterdescription>
<para>Duration of a single ED/CCA iteration. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_radio.h" line="1370" column="24" declfile="hal/nrf_radio.h" declline="1370" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__radio__hal_1ga11647a756f741617dd218c0d9941fd0a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint8_t</type>
        <definition>NRF_STATIC_INLINE uint8_t nrf_radio_ed_sample_get</definition>
        <argsstring>(NRF_RADIO_Type const *p_reg)</argsstring>
        <name>nrf_radio_ed_sample_get</name>
        <param>
          <type>NRF_RADIO_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting Energy Detection level. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>IEEE 802.15.4 energy detect level. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_radio.h" line="1381" column="27" declfile="hal/nrf_radio.h" declline="1381" declcolumn="27"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__radio__hal_1gad942e9cf952a63f69d1511bfbc565050" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_radio_cca_configure</definition>
        <argsstring>(NRF_RADIO_Type *p_reg, nrf_radio_cca_mode_t cca_mode, uint8_t cca_ed_threshold, uint8_t cca_corr_threshold, uint8_t cca_corr_cnt)</argsstring>
        <name>nrf_radio_cca_configure</name>
        <param>
          <type>NRF_RADIO_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__radio__hal_1gacd20cabadc17d4eae37fff80f4e9d1e5" kindref="member">nrf_radio_cca_mode_t</ref></type>
          <declname>cca_mode</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>cca_ed_threshold</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>cca_corr_threshold</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>cca_corr_cnt</declname>
        </param>
        <briefdescription>
<para>Function for configuring the IEEE 802.15.4 clear channel assessment. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">cca_mode</parametername>
</parameternamelist>
<parameterdescription>
<para>Mode of CCA. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">cca_ed_threshold</parametername>
</parameternamelist>
<parameterdescription>
<para>Energy Detection threshold value. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">cca_corr_threshold</parametername>
</parameternamelist>
<parameterdescription>
<para>Correlator Busy Threshold. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">cca_corr_cnt</parametername>
</parameternamelist>
<parameterdescription>
<para>Limit of occurances above Correlator Threshold. When not equal to zero the correlator based signal detect is enabled. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_radio.h" line="1396" column="24" declfile="hal/nrf_radio.h" declline="1396" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__radio__hal_1ga382aeec6648cdb3fe1bc9355f076a900" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_radio_power_set</definition>
        <argsstring>(NRF_RADIO_Type *p_reg, bool radio_power)</argsstring>
        <name>nrf_radio_power_set</name>
        <param>
          <type>NRF_RADIO_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>radio_power</declname>
        </param>
        <briefdescription>
<para>Function for setting power mode of the radio peripheral. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">radio_power</parametername>
</parameternamelist>
<parameterdescription>
<para>If radio should be powered on. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_radio.h" line="1410" column="24" declfile="hal/nrf_radio.h" declline="1410" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__radio__hal_1ga3a92fd06c78602b07c884d1c96575e69" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_radio_cte_time_get</definition>
        <argsstring>(NRF_RADIO_Type const *p_reg)</argsstring>
        <name>nrf_radio_cte_time_get</name>
        <param>
          <type>NRF_RADIO_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting the CTE time parsed from received packet. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>CTE time. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_radio.h" line="1421" column="28" declfile="hal/nrf_radio.h" declline="1421" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__radio__hal_1gac310385e2369f66495ebd5fca7e8d0b2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_radio_cte_type_get</definition>
        <argsstring>(NRF_RADIO_Type const *p_reg)</argsstring>
        <name>nrf_radio_cte_type_get</name>
        <param>
          <type>NRF_RADIO_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting the CTE type parsed from received packet. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>CTE type. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_radio.h" line="1430" column="28" declfile="hal/nrf_radio.h" declline="1430" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__radio__hal_1ga13bcf8cdfb3176b80f158854377378d8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_radio_cte_rfu_get</definition>
        <argsstring>(NRF_RADIO_Type const *p_reg)</argsstring>
        <name>nrf_radio_cte_rfu_get</name>
        <param>
          <type>NRF_RADIO_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting the CTE RFU parsed from received packet. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>CTE RFU. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_radio.h" line="1439" column="28" declfile="hal/nrf_radio.h" declline="1439" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__radio__hal_1ga35f330bc5182d63d72bb32bab2174ef8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE <ref refid="group__nrf__radio__hal_1gaa6632d62276bfec4138e0688d5f73018" kindref="member">nrf_radio_dfe_switch_state_t</ref></type>
        <definition>NRF_STATIC_INLINE nrf_radio_dfe_switch_state_t nrf_radio_dfe_switch_state_get</definition>
        <argsstring>(NRF_RADIO_Type const *p_reg)</argsstring>
        <name>nrf_radio_dfe_switch_state_get</name>
        <param>
          <type>NRF_RADIO_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting the current state of DFE switching state machine. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>State of switching state machine. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_radio.h" line="1451" column="30" declfile="hal/nrf_radio.h" declline="1451" declcolumn="30"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__radio__hal_1ga92671cc220fed35d612c0f81f85fe0ff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE <ref refid="group__nrf__radio__hal_1ga8b27d0e94d3c0d4589d8876018cdcc7b" kindref="member">nrf_radio_dfe_sample_state_t</ref></type>
        <definition>NRF_STATIC_INLINE nrf_radio_dfe_sample_state_t nrf_radio_dfe_sample_state_get</definition>
        <argsstring>(NRF_RADIO_Type const *p_reg)</argsstring>
        <name>nrf_radio_dfe_sample_state_get</name>
        <param>
          <type>NRF_RADIO_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting the current state of DFE sampling state machine. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>State of sampling state machine. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_radio.h" line="1461" column="30" declfile="hal/nrf_radio.h" declline="1461" declcolumn="30"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__radio__hal_1ga46900b20699091144a2a989feaff0a66" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_radio_cteinline_configure</definition>
        <argsstring>(NRF_RADIO_Type *p_reg, nrf_radio_cteinline_conf_t const *p_config)</argsstring>
        <name>nrf_radio_cteinline_configure</name>
        <param>
          <type>NRF_RADIO_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="structnrf__radio__cteinline__conf__t" kindref="compound">nrf_radio_cteinline_conf_t</ref> const *</type>
          <declname>p_config</declname>
        </param>
        <briefdescription>
<para>Function for setting the configuration of CTE inline mode. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">p_config</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure with CTE inline mode configuration. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_radio.h" line="1471" column="24" declfile="hal/nrf_radio.h" declline="1471" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__radio__hal_1gab31f9189c3a898cde71ec102792a3b67" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_radio_dfectrl_configure</definition>
        <argsstring>(NRF_RADIO_Type *p_reg, nrf_radio_dfectrl_conf_t const *p_config)</argsstring>
        <name>nrf_radio_dfectrl_configure</name>
        <param>
          <type>NRF_RADIO_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="structnrf__radio__dfectrl__conf__t" kindref="compound">nrf_radio_dfectrl_conf_t</ref> const *</type>
          <declname>p_config</declname>
        </param>
        <briefdescription>
<para>Function for setting the direction finding configuration. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">p_config</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure with direction finding configuration. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_radio.h" line="1482" column="24" declfile="hal/nrf_radio.h" declline="1482" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__radio__hal_1ga3d5f4a42eb4bd4399bcfb240ae71c64f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_radio_dfe_pattern_pin_set</definition>
        <argsstring>(NRF_RADIO_Type *p_reg, uint32_t pin, uint8_t pos)</argsstring>
        <name>nrf_radio_dfe_pattern_pin_set</name>
        <param>
          <type>NRF_RADIO_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>pin</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>pos</declname>
        </param>
        <briefdescription>
<para>Function for configuring the specified GPIO pin for antenna control. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pin</parametername>
</parameternamelist>
<parameterdescription>
<para>Pin number. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pos</parametername>
</parameternamelist>
<parameterdescription>
<para>Position of the pin in the switching pattern configured with <ref refid="group__nrf__radio__hal_1gaabee02c2cd5d2757c44150b2ab376b34" kindref="member">nrf_radio_dfe_pattern_add()</ref> or <ref refid="group__nrf__radio__hal_1ga8d1b32585d9a0275667438eafb0fe9ff" kindref="member">nrf_radio_dfe_patterns_add()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_radio.h" line="1496" column="24" declfile="hal/nrf_radio.h" declline="1496" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__radio__hal_1gaabee02c2cd5d2757c44150b2ab376b34" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_radio_dfe_pattern_add</definition>
        <argsstring>(NRF_RADIO_Type *p_reg, uint8_t pin_mask)</argsstring>
        <name>nrf_radio_dfe_pattern_add</name>
        <param>
          <type>NRF_RADIO_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>pin_mask</declname>
        </param>
        <briefdescription>
<para>Function for adding single pattern to the array of GPIO patterns for antenna control. </para>
        </briefdescription>
        <detaileddescription>
<para>The GPIO pattern array size is 40 entries. This function configures single pattern consisting of 8 pins. To set subsequent pattern, call this function again. To get total number of currently configured patterns use <ref refid="group__nrf__radio__hal_1gaa1dd461894cce3777ef12165d93dda8a" kindref="member">nrf_radio_dfe_pattern_cnt_get()</ref>. To clear the array of GPIO patterns use <ref refid="group__nrf__radio__hal_1gaa576fb22d7447eeb644fd6c699584f54" kindref="member">nrf_radio_dfe_pattern_clear()</ref>.</para>
<para><simplesect kind="warning"><para>A minimum number of 3 patterns must be written.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pin_mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Bitmask specifying pins to be used in this switching pattern. Each bit corresponds to the index of the pin configured with <ref refid="group__nrf__radio__hal_1ga3d5f4a42eb4bd4399bcfb240ae71c64f" kindref="member">nrf_radio_dfe_pattern_pin_set()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_radio.h" line="1515" column="24" declfile="hal/nrf_radio.h" declline="1515" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__radio__hal_1ga8d1b32585d9a0275667438eafb0fe9ff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_radio_dfe_patterns_add</definition>
        <argsstring>(NRF_RADIO_Type *p_reg, uint8_t const *p_pin_masks, size_t length)</argsstring>
        <name>nrf_radio_dfe_patterns_add</name>
        <param>
          <type>NRF_RADIO_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint8_t const *</type>
          <declname>p_pin_masks</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>length</declname>
        </param>
        <briefdescription>
<para>Function for adding multiple patterns to the array of GPIO patterns for antenna control. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">p_pin_masks</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the array of bitmasks specifying pins to be used in subsequent switching patterns. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">length</parametername>
</parameternamelist>
<parameterdescription>
<para>Bitmask array length.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="group__nrf__radio__hal_1gaabee02c2cd5d2757c44150b2ab376b34" kindref="member">nrf_radio_dfe_pattern_add()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_radio.h" line="1527" column="24" declfile="hal/nrf_radio.h" declline="1527" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__radio__hal_1gaa1dd461894cce3777ef12165d93dda8a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_radio_dfe_pattern_cnt_get</definition>
        <argsstring>(NRF_RADIO_Type const *p_reg)</argsstring>
        <name>nrf_radio_dfe_pattern_cnt_get</name>
        <param>
          <type>NRF_RADIO_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting number of currently configured GPIO patterns for antenna control. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Number of patterns. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_radio.h" line="1538" column="28" declfile="hal/nrf_radio.h" declline="1538" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__radio__hal_1gaa576fb22d7447eeb644fd6c699584f54" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_radio_dfe_pattern_clear</definition>
        <argsstring>(NRF_RADIO_Type *p_reg)</argsstring>
        <name>nrf_radio_dfe_pattern_clear</name>
        <param>
          <type>NRF_RADIO_Type *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for clearing all of the currently configured GPIO patterns for antenna control. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_radio.h" line="1545" column="24" declfile="hal/nrf_radio.h" declline="1545" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__radio__hal_1gaec6ca2940b0c0da838f9d61a226109ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_radio_dfe_buffer_set</definition>
        <argsstring>(NRF_RADIO_Type *p_reg, uint32_t *p_buffer, size_t length)</argsstring>
        <name>nrf_radio_dfe_buffer_set</name>
        <param>
          <type>NRF_RADIO_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t *</type>
          <declname>p_buffer</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>length</declname>
        </param>
        <briefdescription>
<para>Function for setting the buffer for storing IQ samples or magnitude and phase pairs of the samples. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Each sample or pair is stored on a 32-bit word.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">p_buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the buffer for storing IQ samples or magnitude and phase of the samples. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">length</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum number of samples to receive. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_radio.h" line="1561" column="24" declfile="hal/nrf_radio.h" declline="1561" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__radio__hal_1gab6d271c9d8e00b647100f844081eb6ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_radio_dfe_amount_get</definition>
        <argsstring>(NRF_RADIO_Type const *p_reg)</argsstring>
        <name>nrf_radio_dfe_amount_get</name>
        <param>
          <type>NRF_RADIO_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting the number of stored IQ samples or magnitude and phase pairs of the samples during last transaction. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>Amount</parametername>
</parameternamelist>
<parameterdescription>
<para>of samples. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_radio.h" line="1573" column="28" declfile="hal/nrf_radio.h" declline="1573" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__radio__hal_1ga6ccabe7ebeab7ae29f57f5488f6fdecc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_radio_dfe_current_amount_get</definition>
        <argsstring>(NRF_RADIO_Type const *p_reg)</argsstring>
        <name>nrf_radio_dfe_current_amount_get</name>
        <param>
          <type>NRF_RADIO_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting the number of bytes transferred in the current transaction. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Number of bytes. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_radio.h" line="1583" column="28" declfile="hal/nrf_radio.h" declline="1583" declcolumn="28"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2018<sp/>-<sp/>2024,<sp/>Nordic<sp/>Semiconductor<sp/>ASA</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>All<sp/>rights<sp/>reserved.</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>SPDX-License-Identifier:<sp/>BSD-3-Clause</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions<sp/>are<sp/>met:</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>1.<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright<sp/>notice,<sp/>this</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>2.<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the<sp/>distribution.</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/>3.<sp/>Neither<sp/>the<sp/>name<sp/>of<sp/>the<sp/>copyright<sp/>holder<sp/>nor<sp/>the<sp/>names<sp/>of<sp/>its</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>contributors<sp/>may<sp/>be<sp/>used<sp/>to<sp/>endorse<sp/>or<sp/>promote<sp/>products<sp/>derived<sp/>from<sp/>this</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>software<sp/>without<sp/>specific<sp/>prior<sp/>written<sp/>permission.</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>COPYRIGHT<sp/>HOLDERS<sp/>AND<sp/>CONTRIBUTORS<sp/>&quot;AS<sp/>IS&quot;</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/>AND<sp/>ANY<sp/>EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>THE</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*<sp/>ARE<sp/>DISCLAIMED.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>COPYRIGHT<sp/>HOLDER<sp/>OR<sp/>CONTRIBUTORS<sp/>BE</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,<sp/>SPECIAL,<sp/>EXEMPLARY,<sp/>OR</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>PROCUREMENT<sp/>OF</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>*<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,<sp/>DATA,<sp/>OR<sp/>PROFITS;<sp/>OR<sp/>BUSINESS</highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/>*<sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY<sp/>THEORY<sp/>OF<sp/>LIABILITY,<sp/>WHETHER<sp/>IN</highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/>*<sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR<sp/>OTHERWISE)</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/>*<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE<sp/>OF<sp/>THIS<sp/>SOFTWARE,<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/>*<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight></codeline>
<codeline lineno="32"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>NRF_RADIO_H__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_RADIO_H__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;nrfx.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="43"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="44"><highlight class="comment"><sp/>*<sp/>@defgroup<sp/>nrf_radio_hal<sp/>RADIO<sp/>HAL</highlight></codeline>
<codeline lineno="45"><highlight class="comment"><sp/>*<sp/>@{</highlight></codeline>
<codeline lineno="46"><highlight class="comment"><sp/>*<sp/>@ingroup<sp/>nrf_radio</highlight></codeline>
<codeline lineno="47"><highlight class="comment"><sp/>*<sp/>@brief<sp/><sp/><sp/>Hardware<sp/>access<sp/>layer<sp/>for<sp/>managing<sp/>the<sp/>RADIO<sp/>peripheral.</highlight></codeline>
<codeline lineno="48"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(DPPI_PRESENT)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="51"><highlight class="comment">/**<sp/>@brief<sp/>Symbol<sp/>specifying<sp/>offset<sp/>between<sp/>address<sp/>of<sp/>TASK/EVENT<sp/>register<sp/>and<sp/>address<sp/>of<sp/>associated<sp/>SUBSCRIBE/PUBLISH<sp/>register.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_RADIO_DPPI_OFFSET<sp/>NRF_SUBSCRIBE_PUBLISH_OFFSET_RADIO</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>defined(DPPI_PRESENT)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="55"><highlight class="comment">/**<sp/>@brief<sp/>RADIO<sp/>tasks.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal">{</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__radio__hal_1gga607fff2f027c323b3dc8af40ab489a2fae1451e5aec10c18695c15527d804cf09" kindref="member">NRF_RADIO_TASK_TXEN</ref><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_RADIO_Type,<sp/>TASKS_TXEN),<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Enable<sp/>RADIO<sp/>in<sp/>TX<sp/>mode.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__radio__hal_1gga607fff2f027c323b3dc8af40ab489a2fae05fb7983f797292c0790e1607188ad1" kindref="member">NRF_RADIO_TASK_RXEN</ref><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_RADIO_Type,<sp/>TASKS_RXEN),<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Enable<sp/>RADIO<sp/>in<sp/>RX<sp/>mode.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__radio__hal_1gga607fff2f027c323b3dc8af40ab489a2fa876b6cd1a9bf263fa29e2d47540515ec" kindref="member">NRF_RADIO_TASK_START</ref><sp/><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_RADIO_Type,<sp/>TASKS_START),<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Start<sp/>RADIO.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__radio__hal_1gga607fff2f027c323b3dc8af40ab489a2fa2ebd7963e40a7de73029e20488837c23" kindref="member">NRF_RADIO_TASK_STOP</ref><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_RADIO_Type,<sp/>TASKS_STOP),<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Stop<sp/>RADIO.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__radio__hal_1gga607fff2f027c323b3dc8af40ab489a2fac601d79da621af94ce9335700b410b63" kindref="member">NRF_RADIO_TASK_DISABLE</ref><sp/><sp/><sp/>=<sp/>offsetof(NRF_RADIO_Type,<sp/>TASKS_DISABLE),<sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Disable<sp/>RADIO.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__radio__hal_1gga607fff2f027c323b3dc8af40ab489a2fa37040a6ad4b91be84f3f5ffe0b7ea835" kindref="member">NRF_RADIO_TASK_RSSISTART</ref><sp/>=<sp/>offsetof(NRF_RADIO_Type,<sp/>TASKS_RSSISTART),<sp/></highlight><highlight class="comment">/**&lt;<sp/>Start<sp/>the<sp/>RSSI<sp/>and<sp/>take<sp/>one<sp/>single<sp/>sample<sp/>of<sp/>the<sp/>receive<sp/>signal<sp/>strength.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(RADIO_TASKS_RSSISTOP_TASKS_RSSISTOP_Msk)<sp/>||<sp/>\</highlight></codeline>
<codeline lineno="65"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>defined(RADIO_SHORTS_DISABLED_RSSISTOP_Msk)<sp/>||<sp/>\</highlight></codeline>
<codeline lineno="66"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__radio__hal_1gga607fff2f027c323b3dc8af40ab489a2fa42942760825d40b3ba93b2270cef5bc3" kindref="member">NRF_RADIO_TASK_RSSISTOP</ref><sp/><sp/>=<sp/>offsetof(NRF_RADIO_Type,<sp/>TASKS_RSSISTOP),<sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Stop<sp/>the<sp/>RSSI<sp/>measurement.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__radio__hal_1gga607fff2f027c323b3dc8af40ab489a2fab2b2b976fc38d23a67fb6724947eecef" kindref="member">NRF_RADIO_TASK_BCSTART</ref><sp/><sp/><sp/>=<sp/>offsetof(NRF_RADIO_Type,<sp/>TASKS_BCSTART),<sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Start<sp/>the<sp/>bit<sp/>counter.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__radio__hal_1gga607fff2f027c323b3dc8af40ab489a2facacdd2fd6570c3c8dcb856d2156ee8be" kindref="member">NRF_RADIO_TASK_BCSTOP</ref><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_RADIO_Type,<sp/>TASKS_BCSTOP),<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Stop<sp/>the<sp/>bit<sp/>counter.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(RADIO_TASKS_EDSTART_TASKS_EDSTART_Msk)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__radio__hal_1gga607fff2f027c323b3dc8af40ab489a2fad47e9b2b986eb3f3db64d6bc9740508c" kindref="member">NRF_RADIO_TASK_EDSTART</ref><sp/><sp/><sp/>=<sp/>offsetof(NRF_RADIO_Type,<sp/>TASKS_EDSTART),<sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Start<sp/>the<sp/>Energy<sp/>Detect<sp/>measurement<sp/>used<sp/>in<sp/>IEEE<sp/>802.15.4<sp/>mode.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(RADIO_TASKS_EDSTOP_TASKS_EDSTOP_Msk)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__radio__hal_1gga607fff2f027c323b3dc8af40ab489a2fa89a7e51344929d6d08c1aba19360e285" kindref="member">NRF_RADIO_TASK_EDSTOP</ref><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_RADIO_Type,<sp/>TASKS_EDSTOP),<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Stop<sp/>the<sp/>Energy<sp/>Detect<sp/>measurement.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(RADIO_TASKS_CCASTART_TASKS_CCASTART_Msk)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__radio__hal_1gga607fff2f027c323b3dc8af40ab489a2fa83d8cc8e18b2bf558c0e1ec1511f7775" kindref="member">NRF_RADIO_TASK_CCASTART</ref><sp/><sp/>=<sp/>offsetof(NRF_RADIO_Type,<sp/>TASKS_CCASTART),<sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Start<sp/>the<sp/>Clear<sp/>Channel<sp/>Assessment<sp/>used<sp/>in<sp/>IEEE<sp/>802.15.4<sp/>mode.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(RADIO_TASKS_CCASTOP_TASKS_CCASTOP_Msk)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__radio__hal_1gga607fff2f027c323b3dc8af40ab489a2fac449d58be252ec127432cda741033d98" kindref="member">NRF_RADIO_TASK_CCASTOP</ref><sp/><sp/><sp/>=<sp/>offsetof(NRF_RADIO_Type,<sp/>TASKS_CCASTOP),<sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Stop<sp/>the<sp/>Clear<sp/>Channel<sp/>Assessment.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal">}<sp/><ref refid="group__nrf__radio__hal_1ga607fff2f027c323b3dc8af40ab489a2f" kindref="member">nrf_radio_task_t</ref>;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="85"><highlight class="comment">/**<sp/>@brief<sp/>RADIO<sp/>events.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal">{</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__radio__hal_1gga7c4b15ec33a0704a9caa2fa0b36e98bbaa0e8be0b24ad0fb03a191328155a02c5" kindref="member">NRF_RADIO_EVENT_READY</ref><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_RADIO_Type,<sp/>EVENTS_READY),<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Radio<sp/>has<sp/>ramped<sp/>up<sp/>and<sp/>is<sp/>ready<sp/>to<sp/>be<sp/>started.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__radio__hal_1gga7c4b15ec33a0704a9caa2fa0b36e98bba748bb9eb7838787e0c594eb554cd5204" kindref="member">NRF_RADIO_EVENT_ADDRESS</ref><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_RADIO_Type,<sp/>EVENTS_ADDRESS),<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Address<sp/>sent<sp/>or<sp/>received.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__radio__hal_1gga7c4b15ec33a0704a9caa2fa0b36e98bbaea3dad72e62ba032e07938d73f7c760a" kindref="member">NRF_RADIO_EVENT_PAYLOAD</ref><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_RADIO_Type,<sp/>EVENTS_PAYLOAD),<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Packet<sp/>payload<sp/>sent<sp/>or<sp/>received.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__radio__hal_1gga7c4b15ec33a0704a9caa2fa0b36e98bba60e98fda9706e505e03a17c7db1bd431" kindref="member">NRF_RADIO_EVENT_END</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_RADIO_Type,<sp/>EVENTS_END),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Packet<sp/>transmitted<sp/>or<sp/>received.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__radio__hal_1gga7c4b15ec33a0704a9caa2fa0b36e98bbad8952f65789574e7d1db61fc2d6ae1fd" kindref="member">NRF_RADIO_EVENT_DISABLED</ref><sp/><sp/><sp/>=<sp/>offsetof(NRF_RADIO_Type,<sp/>EVENTS_DISABLED),<sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>RADIO<sp/>has<sp/>been<sp/>disabled.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__radio__hal_1gga7c4b15ec33a0704a9caa2fa0b36e98bbaaee811ff191efb80a366c616ca82edcd" kindref="member">NRF_RADIO_EVENT_DEVMATCH</ref><sp/><sp/><sp/>=<sp/>offsetof(NRF_RADIO_Type,<sp/>EVENTS_DEVMATCH),<sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>A<sp/>device<sp/>address<sp/>match<sp/>occurred<sp/>on<sp/>the<sp/>last<sp/>received<sp/>packet.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__radio__hal_1gga7c4b15ec33a0704a9caa2fa0b36e98bbac1dbfb30de77841be101c4e3b0ed6a07" kindref="member">NRF_RADIO_EVENT_DEVMISS</ref><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_RADIO_Type,<sp/>EVENTS_DEVMISS),<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>No<sp/>device<sp/>address<sp/>match<sp/>occurred<sp/>on<sp/>the<sp/>last<sp/>received<sp/>packet.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(RADIO_INTENSET_RSSIEND_Msk)<sp/>||<sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="96"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>defined(RADIO_INTENSET00_RSSIEND_Msk)<sp/>||<sp/>\</highlight></codeline>
<codeline lineno="97"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__radio__hal_1gga7c4b15ec33a0704a9caa2fa0b36e98bba6af0b753ba1664d9e99de0af38c18344" kindref="member">NRF_RADIO_EVENT_RSSIEND</ref><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_RADIO_Type,<sp/>EVENTS_RSSIEND),<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Sampling<sp/>of<sp/>receive<sp/>signal<sp/>strength<sp/>complete.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__radio__hal_1gga7c4b15ec33a0704a9caa2fa0b36e98bbafcf0b264704a55523cd0fd4e573e9a30" kindref="member">NRF_RADIO_EVENT_BCMATCH</ref><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_RADIO_Type,<sp/>EVENTS_BCMATCH),<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Bit<sp/>counter<sp/>reached<sp/>bit<sp/>count<sp/>value.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(RADIO_INTENSET_CRCOK_Msk)<sp/>||<sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="102"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>defined(RADIO_INTENSET00_CRCOK_Msk)<sp/>||<sp/>\</highlight></codeline>
<codeline lineno="103"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__radio__hal_1gga7c4b15ec33a0704a9caa2fa0b36e98bbab41abc6a4884ac9f970ff3166464e028" kindref="member">NRF_RADIO_EVENT_CRCOK</ref><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_RADIO_Type,<sp/>EVENTS_CRCOK),<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Packet<sp/>received<sp/>with<sp/>correct<sp/>CRC.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(RADIO_INTENSET_CRCERROR_Msk)<sp/>||<sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="107"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>defined(RADIO_INTENSET00_CRCERROR_Msk)<sp/>||<sp/>\</highlight></codeline>
<codeline lineno="108"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__radio__hal_1gga7c4b15ec33a0704a9caa2fa0b36e98bbafb9edff42f9a2113bafc7462c463bce9" kindref="member">NRF_RADIO_EVENT_CRCERROR</ref><sp/><sp/><sp/>=<sp/>offsetof(NRF_RADIO_Type,<sp/>EVENTS_CRCERROR),<sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Packet<sp/>received<sp/>with<sp/>incorrect<sp/>CRC.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(RADIO_INTENSET_FRAMESTART_Msk)<sp/>||<sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="112"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>defined(RADIO_INTENSET00_FRAMESTART_Msk)<sp/>||<sp/>\</highlight></codeline>
<codeline lineno="113"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__radio__hal_1gga7c4b15ec33a0704a9caa2fa0b36e98bbae965faf63ad8a97c2721bb17206eb7ae" kindref="member">NRF_RADIO_EVENT_FRAMESTART</ref><sp/>=<sp/>offsetof(NRF_RADIO_Type,<sp/>EVENTS_FRAMESTART),<sp/></highlight><highlight class="comment">/**&lt;<sp/>IEEE<sp/>802.15.4<sp/>length<sp/>field<sp/>received.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(RADIO_INTENSET_EDEND_Msk)<sp/>||<sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="117"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>defined(RADIO_INTENSET00_EDEND_Msk)<sp/>||<sp/>\</highlight></codeline>
<codeline lineno="118"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__radio__hal_1gga7c4b15ec33a0704a9caa2fa0b36e98bbaa85d99f7da6c2fcc2d54ac1e8a20e307" kindref="member">NRF_RADIO_EVENT_EDEND</ref><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_RADIO_Type,<sp/>EVENTS_EDEND),<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Energy<sp/>Detection<sp/>procedure<sp/>ended.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(RADIO_INTENSET_EDSTOPPED_Msk)<sp/>||<sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="122"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>defined(RADIO_INTENSET00_EDSTOPPED_Msk)<sp/>||<sp/>\</highlight></codeline>
<codeline lineno="123"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__radio__hal_1gga7c4b15ec33a0704a9caa2fa0b36e98bba84fc32565c0ee0c573f819421e4af36a" kindref="member">NRF_RADIO_EVENT_EDSTOPPED</ref><sp/><sp/>=<sp/>offsetof(NRF_RADIO_Type,<sp/>EVENTS_EDSTOPPED),<sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>The<sp/>sampling<sp/>of<sp/>Energy<sp/>Detection<sp/>has<sp/>stopped.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(RADIO_INTENSET_CCAIDLE_Msk)<sp/>||<sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="127"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>defined(RADIO_INTENSET00_CCAIDLE_Msk)<sp/>||<sp/>\</highlight></codeline>
<codeline lineno="128"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__radio__hal_1gga7c4b15ec33a0704a9caa2fa0b36e98bba28d98206f74d0bb10c3ed2b22611d7f5" kindref="member">NRF_RADIO_EVENT_CCAIDLE</ref><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_RADIO_Type,<sp/>EVENTS_CCAIDLE),<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Wireless<sp/>medium<sp/>in<sp/>idle<sp/>-<sp/>clear<sp/>to<sp/>send.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(RADIO_INTENSET_CCABUSY_Msk)<sp/>||<sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="132"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>defined(RADIO_INTENSET00_CCABUSY_Msk)<sp/>||<sp/>\</highlight></codeline>
<codeline lineno="133"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__radio__hal_1gga7c4b15ec33a0704a9caa2fa0b36e98bbad795f59b22f5ae79e329bfea8c66fff6" kindref="member">NRF_RADIO_EVENT_CCABUSY</ref><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_RADIO_Type,<sp/>EVENTS_CCABUSY),<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Wireless<sp/>medium<sp/>busy<sp/>-<sp/>do<sp/>not<sp/>send.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(RADIO_INTENSET_CCASTOPPED_Msk)<sp/>||<sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="137"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>defined(RADIO_INTENSET00_CCASTOPPED_Msk)<sp/>||<sp/>\</highlight></codeline>
<codeline lineno="138"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__radio__hal_1gga7c4b15ec33a0704a9caa2fa0b36e98bba7b07ca7a148a3d9728d9ef043d052004" kindref="member">NRF_RADIO_EVENT_CCASTOPPED</ref><sp/>=<sp/>offsetof(NRF_RADIO_Type,<sp/>EVENTS_CCASTOPPED),<sp/></highlight><highlight class="comment">/**&lt;<sp/>The<sp/>CCA<sp/>has<sp/>stopped.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(RADIO_INTENSET_RATEBOOST_Msk)<sp/>||<sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="142"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>defined(RADIO_INTENSET00_RATEBOOST_Msk)<sp/>||<sp/>\</highlight></codeline>
<codeline lineno="143"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__radio__hal_1gga7c4b15ec33a0704a9caa2fa0b36e98bba9e22c507246b0221124d3f30ba1d7eb3" kindref="member">NRF_RADIO_EVENT_RATEBOOST</ref><sp/><sp/>=<sp/>offsetof(NRF_RADIO_Type,<sp/>EVENTS_RATEBOOST),<sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Ble_LR<sp/>CI<sp/>field<sp/>received,<sp/>receive<sp/>mode<sp/>is<sp/>changed<sp/>from<sp/>Ble_LR125Kbit<sp/>to<sp/>Ble_LR500Kbit.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(RADIO_INTENSET_TXREADY_Msk)<sp/>||<sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="147"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>defined(RADIO_INTENSET00_TXREADY_Msk)<sp/>||<sp/>\</highlight></codeline>
<codeline lineno="148"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__radio__hal_1gga7c4b15ec33a0704a9caa2fa0b36e98bba2ff10f8d4797b2482e59782285bdb858" kindref="member">NRF_RADIO_EVENT_TXREADY</ref><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_RADIO_Type,<sp/>EVENTS_TXREADY),<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>RADIO<sp/>has<sp/>ramped<sp/>up<sp/>and<sp/>is<sp/>ready<sp/>to<sp/>be<sp/>started<sp/>TX<sp/>path.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(RADIO_INTENSET_RXREADY_Msk)<sp/>||<sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="152"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>defined(RADIO_INTENSET00_RXREADY_Msk)<sp/>||<sp/>\</highlight></codeline>
<codeline lineno="153"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__radio__hal_1gga7c4b15ec33a0704a9caa2fa0b36e98bba2ea07eeddae2b29127dd7f5c9841b4c7" kindref="member">NRF_RADIO_EVENT_RXREADY</ref><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_RADIO_Type,<sp/>EVENTS_RXREADY),<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>RADIO<sp/>has<sp/>ramped<sp/>up<sp/>and<sp/>is<sp/>ready<sp/>to<sp/>be<sp/>started<sp/>RX<sp/>path.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(RADIO_INTENSET_MHRMATCH_Msk)<sp/>||<sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="157"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>defined(RADIO_INTENSET00_MHRMATCH_Msk)<sp/>||<sp/>\</highlight></codeline>
<codeline lineno="158"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__radio__hal_1gga7c4b15ec33a0704a9caa2fa0b36e98bba9a7890b0337003b7554e2fa8b258a8e4" kindref="member">NRF_RADIO_EVENT_MHRMATCH</ref><sp/><sp/><sp/>=<sp/>offsetof(NRF_RADIO_Type,<sp/>EVENTS_MHRMATCH),<sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>MAC<sp/>Header<sp/>match<sp/>found.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(RADIO_INTENSET_PHYEND_Msk)<sp/>||<sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="162"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>defined(RADIO_INTENSET00_PHYEND_Msk)<sp/>||<sp/>\</highlight></codeline>
<codeline lineno="163"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__radio__hal_1gga7c4b15ec33a0704a9caa2fa0b36e98bba4ef4af2edab809e26523af6a571de22e" kindref="member">NRF_RADIO_EVENT_PHYEND</ref><sp/><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_RADIO_Type,<sp/>EVENTS_PHYEND),<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Generated<sp/>in<sp/>Ble_LR125Kbit,<sp/>Ble_LR500Kbit</highlight></codeline>
<codeline lineno="165"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>and<sp/>BleIeee802154_250Kbit<sp/>modes<sp/>when<sp/>last</highlight></codeline>
<codeline lineno="166"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bit<sp/>is<sp/>sent<sp/>on<sp/>the<sp/>air.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(RADIO_INTENSET_SYNC_Msk)<sp/>||<sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="169"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>defined(RADIO_INTENSET00_SYNC_Msk)<sp/>||<sp/>\</highlight></codeline>
<codeline lineno="170"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__radio__hal_1gga7c4b15ec33a0704a9caa2fa0b36e98bba5d58c0c9a0a23bea189d47bacaa81a05" kindref="member">NRF_RADIO_EVENT_SYNC</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_RADIO_Type,<sp/>EVENTS_SYNC),<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Generated<sp/>in<sp/>Ble_LR125Kbit,<sp/>Ble_LR500Kbit</highlight></codeline>
<codeline lineno="172"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>and<sp/>BleIeee802154_250Kbit<sp/>modes<sp/>when<sp/>possible</highlight></codeline>
<codeline lineno="173"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>preamble<sp/>has<sp/>been<sp/>received.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(RADIO_INTENSET_CTEPRESENT_Msk)<sp/>||<sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="176"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>defined(RADIO_INTENSET00_CTEPRESENT_Msk)<sp/>||<sp/>\</highlight></codeline>
<codeline lineno="177"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__radio__hal_1gga7c4b15ec33a0704a9caa2fa0b36e98bbacb7e79280c73be155ae2105d96304957" kindref="member">NRF_RADIO_EVENT_CTEPRESENT</ref><sp/>=<sp/>offsetof(NRF_RADIO_Type,<sp/>EVENTS_CTEPRESENT)<sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>CTE<sp/>is<sp/>present.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal">}<sp/><ref refid="group__nrf__radio__hal_1ga7c4b15ec33a0704a9caa2fa0b36e98bb" kindref="member">nrf_radio_event_t</ref>;</highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="182"><highlight class="comment">/**<sp/>@brief<sp/>RADIO<sp/>interrupts.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal">{</highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(RADIO_INTENSET_READY_Msk)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__radio__hal_1gga73ab58523931ff53d367f0fda54a545fa5bc250d687045c86e5a13e498e9d3d2e" kindref="member">NRF_RADIO_INT_READY_MASK</ref><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>RADIO_INTENSET_READY_Msk,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Interrupt<sp/>on<sp/>READY<sp/>event.<sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(RADIO_INTENSET00_READY_Msk)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__radio__hal_1gga73ab58523931ff53d367f0fda54a545fa5bc250d687045c86e5a13e498e9d3d2e" kindref="member">NRF_RADIO_INT_READY_MASK</ref><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>RADIO_INTENSET00_READY_Msk,<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Interrupt<sp/>on<sp/>READY<sp/>event.<sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(RADIO_INTENSET_ADDRESS_Msk)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__radio__hal_1gga73ab58523931ff53d367f0fda54a545fa6983354bf31f048d173006a2531cf36b" kindref="member">NRF_RADIO_INT_ADDRESS_MASK</ref><sp/><sp/><sp/><sp/>=<sp/>RADIO_INTENSET_ADDRESS_Msk,<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Interrupt<sp/>on<sp/>ADDRESS<sp/>event.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(RADIO_INTENSET00_ADDRESS_Msk)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__radio__hal_1gga73ab58523931ff53d367f0fda54a545fa6983354bf31f048d173006a2531cf36b" kindref="member">NRF_RADIO_INT_ADDRESS_MASK</ref><sp/><sp/><sp/><sp/>=<sp/>RADIO_INTENSET00_ADDRESS_Msk,<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Interrupt<sp/>on<sp/>ADDRESS<sp/>event.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(RADIO_INTENSET_PAYLOAD_Msk)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__radio__hal_1gga73ab58523931ff53d367f0fda54a545faaca31166d25b4ca715d40d352206f8a2" kindref="member">NRF_RADIO_INT_PAYLOAD_MASK</ref><sp/><sp/><sp/><sp/>=<sp/>RADIO_INTENSET_PAYLOAD_Msk,<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Interrupt<sp/>on<sp/>PAYLOAD<sp/>event.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(RADIO_INTENSET00_PAYLOAD_Msk)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__radio__hal_1gga73ab58523931ff53d367f0fda54a545faaca31166d25b4ca715d40d352206f8a2" kindref="member">NRF_RADIO_INT_PAYLOAD_MASK</ref><sp/><sp/><sp/><sp/>=<sp/>RADIO_INTENSET00_PAYLOAD_Msk,<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Interrupt<sp/>on<sp/>PAYLOAD<sp/>event.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(RADIO_INTENSET_END_Msk)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__radio__hal_1gga73ab58523931ff53d367f0fda54a545fa1f6c8363ab38f25b3ceb8c4a2bc7f12a" kindref="member">NRF_RADIO_INT_END_MASK</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>RADIO_INTENSET_END_Msk,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Interrupt<sp/>on<sp/>END<sp/>event.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(RADIO_INTENSET00_END_Msk)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__radio__hal_1gga73ab58523931ff53d367f0fda54a545fa1f6c8363ab38f25b3ceb8c4a2bc7f12a" kindref="member">NRF_RADIO_INT_END_MASK</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>RADIO_INTENSET00_END_Msk,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Interrupt<sp/>on<sp/>END<sp/>event.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(RADIO_INTENSET_DISABLED_Msk)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__radio__hal_1gga73ab58523931ff53d367f0fda54a545fad97fdb0f2dfa2ca3328d58825a15b460" kindref="member">NRF_RADIO_INT_DISABLED_MASK</ref><sp/><sp/><sp/>=<sp/>RADIO_INTENSET_DISABLED_Msk,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Interrupt<sp/>on<sp/>DISABLED<sp/>event.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(RADIO_INTENSET00_DISABLED_Msk)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__radio__hal_1gga73ab58523931ff53d367f0fda54a545fad97fdb0f2dfa2ca3328d58825a15b460" kindref="member">NRF_RADIO_INT_DISABLED_MASK</ref><sp/><sp/><sp/>=<sp/>RADIO_INTENSET00_DISABLED_Msk,<sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Interrupt<sp/>on<sp/>DISABLED<sp/>event.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(RADIO_INTENSET_DEVMATCH_Msk)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__radio__hal_1gga73ab58523931ff53d367f0fda54a545fa0dc742b5d047b9a87bb16b519cd3dc7e" kindref="member">NRF_RADIO_INT_DEVMATCH_MASK</ref><sp/><sp/><sp/>=<sp/>RADIO_INTENSET_DEVMATCH_Msk,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Interrupt<sp/>on<sp/>DEVMATCH<sp/>event.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(RADIO_INTENSET00_DEVMATCH_Msk)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__radio__hal_1gga73ab58523931ff53d367f0fda54a545fa0dc742b5d047b9a87bb16b519cd3dc7e" kindref="member">NRF_RADIO_INT_DEVMATCH_MASK</ref><sp/><sp/><sp/>=<sp/>RADIO_INTENSET00_DEVMATCH_Msk,<sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Interrupt<sp/>on<sp/>DEVMATCH<sp/>event.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(RADIO_INTENSET_DEVMISS_Msk)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__radio__hal_1gga73ab58523931ff53d367f0fda54a545faf57fd38047cb8db3e074789baf627c06" kindref="member">NRF_RADIO_INT_DEVMISS_MASK</ref><sp/><sp/><sp/><sp/>=<sp/>RADIO_INTENSET_DEVMISS_Msk,<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Interrupt<sp/>on<sp/>DEVMISS<sp/>event.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(RADIO_INTENSET00_DEVMISS_Msk)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__radio__hal_1gga73ab58523931ff53d367f0fda54a545faf57fd38047cb8db3e074789baf627c06" kindref="member">NRF_RADIO_INT_DEVMISS_MASK</ref><sp/><sp/><sp/><sp/>=<sp/>RADIO_INTENSET00_DEVMISS_Msk,<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Interrupt<sp/>on<sp/>DEVMISS<sp/>event.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(RADIO_INTENSET_RSSIEND_Msk)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__radio__hal_1gga73ab58523931ff53d367f0fda54a545fa889c01442d8fc5134161c7f457eab47f" kindref="member">NRF_RADIO_INT_RSSIEND_MASK</ref><sp/><sp/><sp/><sp/>=<sp/>RADIO_INTENSET_RSSIEND_Msk,<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Interrupt<sp/>on<sp/>RSSIEND<sp/>event.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(RADIO_INTENSET00_RSSIEND_Msk)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__radio__hal_1gga73ab58523931ff53d367f0fda54a545fa889c01442d8fc5134161c7f457eab47f" kindref="member">NRF_RADIO_INT_RSSIEND_MASK</ref><sp/><sp/><sp/><sp/>=<sp/>RADIO_INTENSET00_RSSIEND_Msk,<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Interrupt<sp/>on<sp/>RSSIEND<sp/>event.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(RADIO_INTENSET_BCMATCH_Msk)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__radio__hal_1gga73ab58523931ff53d367f0fda54a545fa2db24a22e42f4759dfd5515f47814c44" kindref="member">NRF_RADIO_INT_BCMATCH_MASK</ref><sp/><sp/><sp/><sp/>=<sp/>RADIO_INTENSET_BCMATCH_Msk,<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Interrupt<sp/>on<sp/>BCMATCH<sp/>event.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(RADIO_INTENSET00_BCMATCH_Msk)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__radio__hal_1gga73ab58523931ff53d367f0fda54a545fa2db24a22e42f4759dfd5515f47814c44" kindref="member">NRF_RADIO_INT_BCMATCH_MASK</ref><sp/><sp/><sp/><sp/>=<sp/>RADIO_INTENSET00_BCMATCH_Msk,<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Interrupt<sp/>on<sp/>BCMATCH<sp/>event.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(RADIO_INTENSET_CRCOK_Msk)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__radio__hal_1gga73ab58523931ff53d367f0fda54a545fab05648dfcadd2e72a8acb82fb204be54" kindref="member">NRF_RADIO_INT_CRCOK_MASK</ref><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>RADIO_INTENSET_CRCOK_Msk,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Interrupt<sp/>on<sp/>CRCOK<sp/>event.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(RADIO_INTENSET00_CRCOK_Msk)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__radio__hal_1gga73ab58523931ff53d367f0fda54a545fab05648dfcadd2e72a8acb82fb204be54" kindref="member">NRF_RADIO_INT_CRCOK_MASK</ref><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>RADIO_INTENSET00_CRCOK_Msk,<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Interrupt<sp/>on<sp/>CRCOK<sp/>event.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(RADIO_INTENSET_CRCERROR_Msk)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__radio__hal_1gga73ab58523931ff53d367f0fda54a545faea3583eea86679b28726e3c0fc954709" kindref="member">NRF_RADIO_INT_CRCERROR_MASK</ref><sp/><sp/><sp/>=<sp/>RADIO_INTENSET_CRCERROR_Msk,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Interrupt<sp/>on<sp/>CRCERROR<sp/>event.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(RADIO_INTENSET00_CRCERROR_Msk)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__radio__hal_1gga73ab58523931ff53d367f0fda54a545faea3583eea86679b28726e3c0fc954709" kindref="member">NRF_RADIO_INT_CRCERROR_MASK</ref><sp/><sp/><sp/>=<sp/>RADIO_INTENSET00_CRCERROR_Msk,<sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Interrupt<sp/>on<sp/>CRCERROR<sp/>event.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(RADIO_INTENSET_FRAMESTART_Msk)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__radio__hal_1gga73ab58523931ff53d367f0fda54a545faa1e47b0e926a9ed6ae6db872dfbf3b51" kindref="member">NRF_RADIO_INT_FRAMESTART_MASK</ref><sp/>=<sp/>RADIO_INTENSET_FRAMESTART_Msk,<sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Interrupt<sp/>on<sp/>FRAMESTART<sp/>event.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(RADIO_INTENSET00_FRAMESTART_Msk)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__radio__hal_1gga73ab58523931ff53d367f0fda54a545faa1e47b0e926a9ed6ae6db872dfbf3b51" kindref="member">NRF_RADIO_INT_FRAMESTART_MASK</ref><sp/>=<sp/>RADIO_INTENSET00_FRAMESTART_Msk,<sp/></highlight><highlight class="comment">/**&lt;<sp/>Interrupt<sp/>on<sp/>FRAMESTART<sp/>event.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(RADIO_INTENSET_EDEND_Msk)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__radio__hal_1gga73ab58523931ff53d367f0fda54a545fa94aa13bca6cf8b37deff643fdd3db355" kindref="member">NRF_RADIO_INT_EDEND_MASK</ref><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>RADIO_INTENSET_EDEND_Msk,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Interrupt<sp/>on<sp/>EDEND<sp/>event.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(RADIO_INTENSET00_EDEND_Msk)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__radio__hal_1gga73ab58523931ff53d367f0fda54a545fa94aa13bca6cf8b37deff643fdd3db355" kindref="member">NRF_RADIO_INT_EDEND_MASK</ref><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>RADIO_INTENSET00_EDEND_Msk,<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Interrupt<sp/>on<sp/>EDEND<sp/>event.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(RADIO_INTENSET_EDSTOPPED_Msk)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__radio__hal_1gga73ab58523931ff53d367f0fda54a545faab3a1f51972577ad0ec849eabc3f1567" kindref="member">NRF_RADIO_INT_EDSTOPPED_MASK</ref><sp/><sp/>=<sp/>RADIO_INTENSET_EDSTOPPED_Msk,<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Interrupt<sp/>on<sp/>EDSTOPPED<sp/>event.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(RADIO_INTENSET00_EDSTOPPED_Msk)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__radio__hal_1gga73ab58523931ff53d367f0fda54a545faab3a1f51972577ad0ec849eabc3f1567" kindref="member">NRF_RADIO_INT_EDSTOPPED_MASK</ref><sp/><sp/>=<sp/>RADIO_INTENSET00_EDSTOPPED_Msk,<sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Interrupt<sp/>on<sp/>EDSTOPPED<sp/>event.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(RADIO_INTENSET_CCAIDLE_Msk)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__radio__hal_1gga73ab58523931ff53d367f0fda54a545fa17806b6ba6ff02a907811eef4c6c7cf9" kindref="member">NRF_RADIO_INT_CCAIDLE_MASK</ref><sp/><sp/><sp/><sp/>=<sp/>RADIO_INTENSET_CCAIDLE_Msk,<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Interrupt<sp/>on<sp/>CCAIDLE<sp/>event.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(RADIO_INTENSET00_CCAIDLE_Msk)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__radio__hal_1gga73ab58523931ff53d367f0fda54a545fa17806b6ba6ff02a907811eef4c6c7cf9" kindref="member">NRF_RADIO_INT_CCAIDLE_MASK</ref><sp/><sp/><sp/><sp/>=<sp/>RADIO_INTENSET00_CCAIDLE_Msk,<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Interrupt<sp/>on<sp/>CCAIDLE<sp/>event.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(RADIO_INTENSET_CCABUSY_Msk)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__radio__hal_1gga73ab58523931ff53d367f0fda54a545fa9469f7c4ad8adbfe50c55a2b26ed7a6d" kindref="member">NRF_RADIO_INT_CCABUSY_MASK</ref><sp/><sp/><sp/><sp/>=<sp/>RADIO_INTENSET_CCABUSY_Msk,<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Interrupt<sp/>on<sp/>CCABUSY<sp/>event.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(RADIO_INTENSET00_CCABUSY_Msk)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__radio__hal_1gga73ab58523931ff53d367f0fda54a545fa9469f7c4ad8adbfe50c55a2b26ed7a6d" kindref="member">NRF_RADIO_INT_CCABUSY_MASK</ref><sp/><sp/><sp/><sp/>=<sp/>RADIO_INTENSET00_CCABUSY_Msk,<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Interrupt<sp/>on<sp/>CCABUSY<sp/>event.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(RADIO_INTENSET_CCASTOPPED_Msk)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__radio__hal_1gga73ab58523931ff53d367f0fda54a545fa0edb26b992cb2095a622a613bb3a3082" kindref="member">NRF_RADIO_INT_CCASTOPPED_MASK</ref><sp/>=<sp/>RADIO_INTENSET_CCASTOPPED_Msk,<sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Interrupt<sp/>on<sp/>CCASTOPPED<sp/>event.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(RADIO_INTENSET00_CCASTOPPED_Msk)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__radio__hal_1gga73ab58523931ff53d367f0fda54a545fa0edb26b992cb2095a622a613bb3a3082" kindref="member">NRF_RADIO_INT_CCASTOPPED_MASK</ref><sp/>=<sp/>RADIO_INTENSET00_CCASTOPPED_Msk,<sp/></highlight><highlight class="comment">/**&lt;<sp/>Interrupt<sp/>on<sp/>CCASTOPPED<sp/>event.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(RADIO_INTENSET_RATEBOOST_Msk)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__radio__hal_1gga73ab58523931ff53d367f0fda54a545fa711260a814ad31db651af73227327096" kindref="member">NRF_RADIO_INT_RATEBOOST_MASK</ref><sp/><sp/>=<sp/>RADIO_INTENSET_RATEBOOST_Msk,<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Interrupt<sp/>on<sp/>RATEBOOST<sp/>event.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(RADIO_INTENSET00_RATEBOOST_Msk)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__radio__hal_1gga73ab58523931ff53d367f0fda54a545fa711260a814ad31db651af73227327096" kindref="member">NRF_RADIO_INT_RATEBOOST_MASK</ref><sp/><sp/>=<sp/>RADIO_INTENSET00_RATEBOOST_Msk,<sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Interrupt<sp/>on<sp/>RATEBOOST<sp/>event.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(RADIO_INTENSET_TXREADY_Msk)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__radio__hal_1gga73ab58523931ff53d367f0fda54a545fab37517cb1b7ea6a87719514f3813b5d4" kindref="member">NRF_RADIO_INT_TXREADY_MASK</ref><sp/><sp/><sp/><sp/>=<sp/>RADIO_INTENSET_TXREADY_Msk,<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Interrupt<sp/>on<sp/>TXREADY<sp/>event.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(RADIO_INTENSET00_TXREADY_Msk)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__radio__hal_1gga73ab58523931ff53d367f0fda54a545fab37517cb1b7ea6a87719514f3813b5d4" kindref="member">NRF_RADIO_INT_TXREADY_MASK</ref><sp/><sp/><sp/><sp/>=<sp/>RADIO_INTENSET00_TXREADY_Msk,<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Interrupt<sp/>on<sp/>TXREADY<sp/>event.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(RADIO_INTENSET_RXREADY_Msk)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__radio__hal_1gga73ab58523931ff53d367f0fda54a545fa493be4f094de8f36adceff3224ebbd22" kindref="member">NRF_RADIO_INT_RXREADY_MASK</ref><sp/><sp/><sp/><sp/>=<sp/>RADIO_INTENSET_RXREADY_Msk,<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Interrupt<sp/>on<sp/>RXREADY<sp/>event.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(RADIO_INTENSET00_RXREADY_Msk)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__radio__hal_1gga73ab58523931ff53d367f0fda54a545fa493be4f094de8f36adceff3224ebbd22" kindref="member">NRF_RADIO_INT_RXREADY_MASK</ref><sp/><sp/><sp/><sp/>=<sp/>RADIO_INTENSET00_RXREADY_Msk,<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Interrupt<sp/>on<sp/>RXREADY<sp/>event.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(RADIO_INTENSET_MHRMATCH_Msk)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__radio__hal_1gga73ab58523931ff53d367f0fda54a545fadec950831c5ab0920ce4717ff548bf37" kindref="member">NRF_RADIO_INT_MHRMATCH_MASK</ref><sp/><sp/><sp/>=<sp/>RADIO_INTENSET_MHRMATCH_Msk,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Interrupt<sp/>on<sp/>MHRMATCH<sp/>event.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(RADIO_INTENSET00_MHRMATCH_Msk)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__radio__hal_1gga73ab58523931ff53d367f0fda54a545fadec950831c5ab0920ce4717ff548bf37" kindref="member">NRF_RADIO_INT_MHRMATCH_MASK</ref><sp/><sp/><sp/>=<sp/>RADIO_INTENSET00_MHRMATCH_Msk,<sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Interrupt<sp/>on<sp/>MHRMATCH<sp/>event.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(RADIO_INTENSET_PHYEND_Msk)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__radio__hal_1gga73ab58523931ff53d367f0fda54a545fa764c177c27ddf46742c0d3a89aa67df5" kindref="member">NRF_RADIO_INT_PHYEND_MASK</ref><sp/><sp/><sp/><sp/><sp/>=<sp/>RADIO_INTENSET_PHYEND_Msk,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Interrupt<sp/>on<sp/>PHYEND<sp/>event.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(RADIO_INTENSET00_PHYEND_Msk)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__radio__hal_1gga73ab58523931ff53d367f0fda54a545fa764c177c27ddf46742c0d3a89aa67df5" kindref="member">NRF_RADIO_INT_PHYEND_MASK</ref><sp/><sp/><sp/><sp/><sp/>=<sp/>RADIO_INTENSET00_PHYEND_Msk,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Interrupt<sp/>on<sp/>PHYEND<sp/>event.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(RADIO_INTENSET_SYNC_Msk)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__radio__hal_1gga73ab58523931ff53d367f0fda54a545faf2d6b18f487ad52ff4ff61c5ee7017f5" kindref="member">NRF_RADIO_INT_SYNC_MASK</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>RADIO_INTENSET_SYNC_Msk,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Interrupt<sp/>on<sp/>SYNC<sp/>event.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(RADIO_INTENSET00_SYNC_Msk)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__radio__hal_1gga73ab58523931ff53d367f0fda54a545faf2d6b18f487ad52ff4ff61c5ee7017f5" kindref="member">NRF_RADIO_INT_SYNC_MASK</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>RADIO_INTENSET00_SYNC_Msk,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Interrupt<sp/>on<sp/>SYNC<sp/>event.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(RADIO_INTENSET_CTEPRESENT_Msk)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__radio__hal_1gga73ab58523931ff53d367f0fda54a545fad5d2ab8ad2d2c88a87edea488901e0c0" kindref="member">NRF_RADIO_INT_CTEPRESENT_MASK</ref><sp/>=<sp/>RADIO_INTENSET_CTEPRESENT_Msk<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Interrupt<sp/>on<sp/>CTEPRESENT<sp/>event.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(RADIO_INTENSET00_CTEPRESENT_Msk)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__radio__hal_1gga73ab58523931ff53d367f0fda54a545fad5d2ab8ad2d2c88a87edea488901e0c0" kindref="member">NRF_RADIO_INT_CTEPRESENT_MASK</ref><sp/>=<sp/>RADIO_INTENSET00_CTEPRESENT_Msk<sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Interrupt<sp/>on<sp/>CTEPRESENT<sp/>event.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal">}<sp/><ref refid="group__nrf__radio__hal_1ga73ab58523931ff53d367f0fda54a545f" kindref="member">nrf_radio_int_mask_t</ref>;</highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="307"><highlight class="comment">/**<sp/>@brief<sp/>RADIO<sp/>shortcuts.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal">{</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__radio__hal_1ggabedef6176305eeb4e42032ec24424728a415c69c93a21406a68d90f8f39ce8cbd" kindref="member">NRF_RADIO_SHORT_READY_START_MASK</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>RADIO_SHORTS_READY_START_Msk,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Shortcut<sp/>between<sp/>READY<sp/>event<sp/>and<sp/>START<sp/>task.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(RADIO_SHORTS_END_DISABLE_Msk)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__radio__hal_1ggabedef6176305eeb4e42032ec24424728a5edccab079f130633db685f3dee74f9a" kindref="member">NRF_RADIO_SHORT_END_DISABLE_MASK</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>RADIO_SHORTS_END_DISABLE_Msk,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Shortcut<sp/>between<sp/>END<sp/>event<sp/>and<sp/>DISABLE<sp/>task.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__radio__hal_1ggabedef6176305eeb4e42032ec24424728a64354bbebd5d989f0a394529a1b522df" kindref="member">NRF_RADIO_SHORT_DISABLED_TXEN_MASK</ref><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>RADIO_SHORTS_DISABLED_TXEN_Msk,<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Shortcut<sp/>between<sp/>DISABLED<sp/>event<sp/>and<sp/>TXEN<sp/>task.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__radio__hal_1ggabedef6176305eeb4e42032ec24424728ae219ce22ce74699b2c2548abdfa1bdfe" kindref="member">NRF_RADIO_SHORT_DISABLED_RXEN_MASK</ref><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>RADIO_SHORTS_DISABLED_RXEN_Msk,<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Shortcut<sp/>between<sp/>DISABLED<sp/>event<sp/>and<sp/>RXEN<sp/>task.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__radio__hal_1ggabedef6176305eeb4e42032ec24424728a082b580997589ec7c4cba00682bcb5ae" kindref="member">NRF_RADIO_SHORT_ADDRESS_RSSISTART_MASK</ref><sp/><sp/>=<sp/>RADIO_SHORTS_ADDRESS_RSSISTART_Msk,<sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Shortcut<sp/>between<sp/>ADDRESS<sp/>event<sp/>and<sp/>RSSISTART<sp/>task.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__radio__hal_1ggabedef6176305eeb4e42032ec24424728aff554fe38ea7dbdd99bb19e4dc96c7c7" kindref="member">NRF_RADIO_SHORT_END_START_MASK</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>RADIO_SHORTS_END_START_Msk,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Shortcut<sp/>between<sp/>END<sp/>event<sp/>and<sp/>START<sp/>task.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__radio__hal_1ggabedef6176305eeb4e42032ec24424728a821b8c75b7af0dda4a3e806c9deaec45" kindref="member">NRF_RADIO_SHORT_ADDRESS_BCSTART_MASK</ref><sp/><sp/><sp/><sp/>=<sp/>RADIO_SHORTS_ADDRESS_BCSTART_Msk,<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Shortcut<sp/>between<sp/>ADDRESS<sp/>event<sp/>and<sp/>BCSTART<sp/>task.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(RADIO_SHORTS_DISABLED_RSSISTOP_Msk)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__radio__hal_1ggabedef6176305eeb4e42032ec24424728ae8e2bb94ec71b4ac1f8e88cd3573ad8a" kindref="member">NRF_RADIO_SHORT_DISABLED_RSSISTOP_MASK</ref><sp/><sp/>=<sp/>RADIO_SHORTS_DISABLED_RSSISTOP_Msk,<sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Shortcut<sp/>between<sp/>DISABLED<sp/>event<sp/>and<sp/>RSSISTOP<sp/>task.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(RADIO_SHORTS_RXREADY_CCASTART_Msk)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__radio__hal_1ggabedef6176305eeb4e42032ec24424728a90702e397d56d0e01eab8cb2a1df0e1d" kindref="member">NRF_RADIO_SHORT_RXREADY_CCASTART_MASK</ref><sp/><sp/><sp/>=<sp/>RADIO_SHORTS_RXREADY_CCASTART_Msk,<sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Shortcut<sp/>between<sp/>RXREADY<sp/>event<sp/>and<sp/>CCASTART<sp/>task.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(RADIO_SHORTS_CCAIDLE_TXEN_Msk)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__radio__hal_1ggabedef6176305eeb4e42032ec24424728a136607c08f3eaab014f41c67471820d2" kindref="member">NRF_RADIO_SHORT_CCAIDLE_TXEN_MASK</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>RADIO_SHORTS_CCAIDLE_TXEN_Msk,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Shortcut<sp/>between<sp/>CCAIDLE<sp/>event<sp/>and<sp/>TXEN<sp/>task.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(RADIO_SHORTS_CCABUSY_DISABLE_Msk)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__radio__hal_1ggabedef6176305eeb4e42032ec24424728a3b972f4707579adc655796a8f6bbd4dc" kindref="member">NRF_RADIO_SHORT_CCABUSY_DISABLE_MASK</ref><sp/><sp/><sp/><sp/>=<sp/>RADIO_SHORTS_CCABUSY_DISABLE_Msk,<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Shortcut<sp/>between<sp/>CCABUSY<sp/>event<sp/>and<sp/>DISABLE<sp/>task.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(RADIO_SHORTS_FRAMESTART_BCSTART_Msk)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__radio__hal_1ggabedef6176305eeb4e42032ec24424728aefc9aaebafdad30a432bbeb0127f82f7" kindref="member">NRF_RADIO_SHORT_FRAMESTART_BCSTART_MASK</ref><sp/>=<sp/>RADIO_SHORTS_FRAMESTART_BCSTART_Msk,<sp/></highlight><highlight class="comment">/**&lt;<sp/>Shortcut<sp/>between<sp/>FRAMESTART<sp/>event<sp/>and<sp/>BCSTART<sp/>task.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(RADIO_SHORTS_READY_EDSTART_Msk)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__radio__hal_1ggabedef6176305eeb4e42032ec24424728a466241d16e26f121509c16d839a9f6be" kindref="member">NRF_RADIO_SHORT_READY_EDSTART_MASK</ref><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>RADIO_SHORTS_READY_EDSTART_Msk,<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Shortcut<sp/>between<sp/>READY<sp/>event<sp/>and<sp/>EDSTART<sp/>task.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(RADIO_SHORTS_EDEND_DISABLE_Msk)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__radio__hal_1ggabedef6176305eeb4e42032ec24424728a3820582a3a45e2ea4724dbb0655c75ef" kindref="member">NRF_RADIO_SHORT_EDEND_DISABLE_MASK</ref><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>RADIO_SHORTS_EDEND_DISABLE_Msk,<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Shortcut<sp/>between<sp/>EDEND<sp/>event<sp/>and<sp/>DISABLE<sp/>task.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(RADIO_SHORTS_CCAIDLE_STOP_Msk)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__radio__hal_1ggabedef6176305eeb4e42032ec24424728a23309d0931978fd8f2d917bf1fd115c0" kindref="member">NRF_RADIO_SHORT_CCAIDLE_STOP_MASK</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>RADIO_SHORTS_CCAIDLE_STOP_Msk,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Shortcut<sp/>between<sp/>CCAIDLE<sp/>event<sp/>and<sp/>STOP<sp/>task.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(RADIO_SHORTS_TXREADY_START_Msk)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__radio__hal_1ggabedef6176305eeb4e42032ec24424728a0f89996875a78799808dad6503983c96" kindref="member">NRF_RADIO_SHORT_TXREADY_START_MASK</ref><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>RADIO_SHORTS_TXREADY_START_Msk,<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Shortcut<sp/>between<sp/>TXREADY<sp/>event<sp/>and<sp/>START<sp/>task.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(RADIO_SHORTS_RXREADY_START_Msk)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__radio__hal_1ggabedef6176305eeb4e42032ec24424728aab4f7e15633216fa015d73c806bf8aa7" kindref="member">NRF_RADIO_SHORT_RXREADY_START_MASK</ref><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>RADIO_SHORTS_RXREADY_START_Msk,<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Shortcut<sp/>between<sp/>RXREADY<sp/>event<sp/>and<sp/>START<sp/>task.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(RADIO_SHORTS_PHYEND_DISABLE_Msk)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__radio__hal_1ggabedef6176305eeb4e42032ec24424728a3ed23c9faaa9cf993e9ddf23c8bbfc8f" kindref="member">NRF_RADIO_SHORT_PHYEND_DISABLE_MASK</ref><sp/><sp/><sp/><sp/><sp/>=<sp/>RADIO_SHORTS_PHYEND_DISABLE_Msk,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Shortcut<sp/>between<sp/>PHYEND<sp/>event<sp/>and<sp/>DISABLE<sp/>task.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(RADIO_SHORTS_PHYEND_START_Msk)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__radio__hal_1ggabedef6176305eeb4e42032ec24424728a10d02751902ea3938b87d79abb9977c2" kindref="member">NRF_RADIO_SHORT_PHYEND_START_MASK</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>RADIO_SHORTS_PHYEND_START_Msk,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Shortcut<sp/>between<sp/>PHYEND<sp/>event<sp/>and<sp/>START<sp/>task.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal">}<sp/><ref refid="group__nrf__radio__hal_1gabedef6176305eeb4e42032ec24424728" kindref="member">nrf_radio_short_mask_t</ref>;</highlight></codeline>
<codeline lineno="356"><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(RADIO_CCACTRL_CCAMODE_Msk)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="358"><highlight class="comment">/**<sp/>@brief<sp/>RADIO<sp/>Clear<sp/>Channel<sp/>Assessment<sp/>modes.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal">{</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__radio__hal_1ggacd20cabadc17d4eae37fff80f4e9d1e5ae532e43bf86cf1527dca13dc8c44ece2" kindref="member">NRF_RADIO_CCA_MODE_ED</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>RADIO_CCACTRL_CCAMODE_EdMode,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Energy<sp/>Above<sp/>Threshold.<sp/>Will<sp/>report<sp/>busy<sp/>whenever<sp/>energy<sp/>is<sp/>detected<sp/>above<sp/>set<sp/>threshold.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__radio__hal_1ggacd20cabadc17d4eae37fff80f4e9d1e5a3d738fdf18dc51021c85f4664f15c21e" kindref="member">NRF_RADIO_CCA_MODE_CARRIER</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>RADIO_CCACTRL_CCAMODE_CarrierMode,<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Carrier<sp/>Seen.<sp/>Will<sp/>report<sp/>busy<sp/>whenever<sp/>compliant<sp/>IEEE<sp/>802.15.4<sp/>signal<sp/>is<sp/>seen.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__radio__hal_1ggacd20cabadc17d4eae37fff80f4e9d1e5a2c38396ac127c0667fbf5dd38af2fd50" kindref="member">NRF_RADIO_CCA_MODE_CARRIER_AND_ED</ref><sp/>=<sp/>RADIO_CCACTRL_CCAMODE_CarrierAndEdMode,<sp/></highlight><highlight class="comment">/**&lt;<sp/>Energy<sp/>Above<sp/>Threshold<sp/>AND<sp/>Carrier<sp/>Seen.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__radio__hal_1ggacd20cabadc17d4eae37fff80f4e9d1e5ad5ce1b529ffea4dac44a3d50e9c9c80e" kindref="member">NRF_RADIO_CCA_MODE_CARRIER_OR_ED</ref><sp/><sp/>=<sp/>RADIO_CCACTRL_CCAMODE_CarrierOrEdMode,<sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Energy<sp/>Above<sp/>Threshold<sp/>OR<sp/>Carrier<sp/>Seen.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__radio__hal_1ggacd20cabadc17d4eae37fff80f4e9d1e5a753a0545ec09c64c6deb174cf06952c3" kindref="member">NRF_RADIO_CCA_MODE_ED_TEST1</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>RADIO_CCACTRL_CCAMODE_EdModeTest1,<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Energy<sp/>Above<sp/>Threshold<sp/>test<sp/>mode<sp/>that<sp/>will<sp/>abort<sp/>when<sp/>first<sp/>ED<sp/>measurement<sp/>over<sp/>threshold<sp/>is<sp/>seen.<sp/>No<sp/>averaging.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal">}<sp/><ref refid="group__nrf__radio__hal_1gacd20cabadc17d4eae37fff80f4e9d1e5" kindref="member">nrf_radio_cca_mode_t</ref>;</highlight></codeline>
<codeline lineno="367"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>defined(RADIO_CCACTRL_CCAMODE_Msk)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="369"><highlight class="comment">/**<sp/>@brief<sp/>Types<sp/>of<sp/>RADIO<sp/>states.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal">{</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__radio__hal_1gga4ea9b1af13c23dc9316d60ca649b71dca746228c10342713c5e20c7dafabea198" kindref="member">NRF_RADIO_STATE_DISABLED</ref><sp/><sp/>=<sp/>RADIO_STATE_STATE_Disabled,<sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>No<sp/>operations<sp/>are<sp/>going<sp/>on<sp/>inside<sp/>the<sp/>radio<sp/>and<sp/>the<sp/>power<sp/>consumption<sp/>is<sp/>at<sp/>a<sp/>minimum.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__radio__hal_1gga4ea9b1af13c23dc9316d60ca649b71dca7a8133c8235bfdae4dca73894526ea0a" kindref="member">NRF_RADIO_STATE_RXRU</ref><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>RADIO_STATE_STATE_RxRu,<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>The<sp/>radio<sp/>is<sp/>ramping<sp/>up<sp/>and<sp/>preparing<sp/>for<sp/>reception.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__radio__hal_1gga4ea9b1af13c23dc9316d60ca649b71dca7c8513853702b8ae56ed317b2e9e4e30" kindref="member">NRF_RADIO_STATE_RXIDLE</ref><sp/><sp/><sp/><sp/>=<sp/>RADIO_STATE_STATE_RxIdle,<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>The<sp/>radio<sp/>is<sp/>ready<sp/>for<sp/>reception<sp/>to<sp/>start.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__radio__hal_1gga4ea9b1af13c23dc9316d60ca649b71dcaa10e7ab6753133d4435ede7490ae1b3f" kindref="member">NRF_RADIO_STATE_RX</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>RADIO_STATE_STATE_Rx,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Reception<sp/>has<sp/>been<sp/>started.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__radio__hal_1gga4ea9b1af13c23dc9316d60ca649b71dcaf8f1789bfec2cede715ae443a39b599d" kindref="member">NRF_RADIO_STATE_RXDISABLE</ref><sp/>=<sp/>RADIO_STATE_STATE_RxDisable,<sp/></highlight><highlight class="comment">/**&lt;<sp/>The<sp/>radio<sp/>is<sp/>disabling<sp/>the<sp/>receiver.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__radio__hal_1gga4ea9b1af13c23dc9316d60ca649b71dca1c5c0e8f9dd06caeb84a81ae527430c1" kindref="member">NRF_RADIO_STATE_TXRU</ref><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>RADIO_STATE_STATE_TxRu,<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>The<sp/>radio<sp/>is<sp/>ramping<sp/>up<sp/>and<sp/>preparing<sp/>for<sp/>transmission.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__radio__hal_1gga4ea9b1af13c23dc9316d60ca649b71dca8bf486c918bfb1a6b23bf91d13e7c38a" kindref="member">NRF_RADIO_STATE_TXIDLE</ref><sp/><sp/><sp/><sp/>=<sp/>RADIO_STATE_STATE_TxIdle,<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>The<sp/>radio<sp/>is<sp/>ready<sp/>for<sp/>transmission<sp/>to<sp/>start.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__radio__hal_1gga4ea9b1af13c23dc9316d60ca649b71dca7290c8a3df86ab9b8c89a55fe8865748" kindref="member">NRF_RADIO_STATE_TX</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>RADIO_STATE_STATE_Tx,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>The<sp/>radio<sp/>is<sp/>transmitting<sp/>a<sp/>packet.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__radio__hal_1gga4ea9b1af13c23dc9316d60ca649b71dca29feafdf4232c518678d46da990aae56" kindref="member">NRF_RADIO_STATE_TXDISABLE</ref><sp/>=<sp/>RADIO_STATE_STATE_TxDisable,<sp/></highlight><highlight class="comment">/**&lt;<sp/>The<sp/>radio<sp/>is<sp/>disabling<sp/>the<sp/>transmitter.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal">}<sp/><ref refid="group__nrf__radio__hal_1ga4ea9b1af13c23dc9316d60ca649b71dc" kindref="member">nrf_radio_state_t</ref>;</highlight></codeline>
<codeline lineno="382"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="383"><highlight class="comment">/**<sp/>@brief<sp/>Types<sp/>of<sp/>RADIO<sp/>TX<sp/>power.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="385"><highlight class="normal">{</highlight></codeline>
<codeline lineno="386"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(RADIO_TXPOWER_TXPOWER_Pos10dBm)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__radio__hal_1ggaf10bff1d03d8156b3af56540701d6b3da686449b679230e5e123abf8661420990" kindref="member">NRF_RADIO_TXPOWER_POS10DBM</ref><sp/>=<sp/>RADIO_TXPOWER_TXPOWER_Pos10dBm,<sp/></highlight><highlight class="comment">/**&lt;<sp/>10<sp/>dBm.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="389"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(RADIO_TXPOWER_TXPOWER_Pos9dBm)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__radio__hal_1ggaf10bff1d03d8156b3af56540701d6b3da58713fd06bb6a9bba0e0d5aa65068d9b" kindref="member">NRF_RADIO_TXPOWER_POS9DBM</ref><sp/><sp/>=<sp/>RADIO_TXPOWER_TXPOWER_Pos9dBm,<sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>9<sp/>dBm.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(RADIO_TXPOWER_TXPOWER_Pos8dBm)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__radio__hal_1ggaf10bff1d03d8156b3af56540701d6b3dac84143d743b47b8c2d93dde692f4cb58" kindref="member">NRF_RADIO_TXPOWER_POS8DBM</ref><sp/><sp/>=<sp/>RADIO_TXPOWER_TXPOWER_Pos8dBm,<sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>8<sp/>dBm.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(RADIO_TXPOWER_TXPOWER_Pos7dBm)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__radio__hal_1ggaf10bff1d03d8156b3af56540701d6b3da4066ab795ca5a26e2cbaf20e7bb48299" kindref="member">NRF_RADIO_TXPOWER_POS7DBM</ref><sp/><sp/>=<sp/>RADIO_TXPOWER_TXPOWER_Pos7dBm,<sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>7<sp/>dBm.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="398"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(RADIO_TXPOWER_TXPOWER_Pos6dBm)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__radio__hal_1ggaf10bff1d03d8156b3af56540701d6b3da7b094e547b20f2a127ddbb7129a89c53" kindref="member">NRF_RADIO_TXPOWER_POS6DBM</ref><sp/><sp/>=<sp/>RADIO_TXPOWER_TXPOWER_Pos6dBm,<sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>6<sp/>dBm.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(RADIO_TXPOWER_TXPOWER_Pos5dBm)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__radio__hal_1ggaf10bff1d03d8156b3af56540701d6b3da862590c83368f19ac0f124e019c46de5" kindref="member">NRF_RADIO_TXPOWER_POS5DBM</ref><sp/><sp/>=<sp/>RADIO_TXPOWER_TXPOWER_Pos5dBm,<sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>5<sp/>dBm.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="404"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(RADIO_TXPOWER_TXPOWER_Pos4dBm)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__radio__hal_1ggaf10bff1d03d8156b3af56540701d6b3daa0a7418927f1b9c5341fce148b342e84" kindref="member">NRF_RADIO_TXPOWER_POS4DBM</ref><sp/><sp/>=<sp/>RADIO_TXPOWER_TXPOWER_Pos4dBm,<sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>4<sp/>dBm.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(RADIO_TXPOWER_TXPOWER_Pos3dBm)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__radio__hal_1ggaf10bff1d03d8156b3af56540701d6b3daeb694c1022ba7fd6f3d87f4c52a96d57" kindref="member">NRF_RADIO_TXPOWER_POS3DBM</ref><sp/><sp/>=<sp/>RADIO_TXPOWER_TXPOWER_Pos3dBm,<sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>3<sp/>dBm.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="409"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(RADIO_TXPOWER_TXPOWER_Pos2dBm)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__radio__hal_1ggaf10bff1d03d8156b3af56540701d6b3da53daadf318857ab2894c89b01f1dc844" kindref="member">NRF_RADIO_TXPOWER_POS2DBM</ref><sp/><sp/>=<sp/>RADIO_TXPOWER_TXPOWER_Pos2dBm,<sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>2<sp/>dBm.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(RADIO_TXPOWER_TXPOWER_Pos1dBm)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__radio__hal_1ggaf10bff1d03d8156b3af56540701d6b3daed7c5bc0784167ffbc07e183a12fa723" kindref="member">NRF_RADIO_TXPOWER_POS1DBM</ref><sp/><sp/>=<sp/>RADIO_TXPOWER_TXPOWER_Pos1dBm,<sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>1<sp/>dBm.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="415"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__radio__hal_1ggaf10bff1d03d8156b3af56540701d6b3da78145e32ef4f9b0d730be485df71bce3" kindref="member">NRF_RADIO_TXPOWER_0DBM</ref><sp/><sp/><sp/><sp/><sp/>=<sp/>RADIO_TXPOWER_TXPOWER_0dBm,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>0<sp/>dBm.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="417"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(RADIO_TXPOWER_TXPOWER_Neg1dBm)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__radio__hal_1ggaf10bff1d03d8156b3af56540701d6b3da92b6ff3b18242376f3360f5da723745f" kindref="member">NRF_RADIO_TXPOWER_NEG1DBM</ref><sp/><sp/>=<sp/>RADIO_TXPOWER_TXPOWER_Neg1dBm,<sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>-1<sp/>dBm.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="419"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="420"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(RADIO_TXPOWER_TXPOWER_Neg2dBm)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__radio__hal_1ggaf10bff1d03d8156b3af56540701d6b3dadd6e90c72cf903ea9de89ff939e0f49d" kindref="member">NRF_RADIO_TXPOWER_NEG2DBM</ref><sp/><sp/>=<sp/>RADIO_TXPOWER_TXPOWER_Neg2dBm,<sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>-2<sp/>dBm.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="423"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(RADIO_TXPOWER_TXPOWER_Neg3dBm)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__radio__hal_1ggaf10bff1d03d8156b3af56540701d6b3da4a8414b420cf55973ffddb9946447f16" kindref="member">NRF_RADIO_TXPOWER_NEG3DBM</ref><sp/><sp/>=<sp/>RADIO_TXPOWER_TXPOWER_Neg3dBm,<sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>-3<sp/>dBm.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__radio__hal_1ggaf10bff1d03d8156b3af56540701d6b3da76c1f820e37625a1846e6f7d186b0704" kindref="member">NRF_RADIO_TXPOWER_NEG4DBM</ref><sp/><sp/>=<sp/>RADIO_TXPOWER_TXPOWER_Neg4dBm,<sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>-4<sp/>dBm.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="427"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(RADIO_TXPOWER_TXPOWER_Neg5dBm)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__radio__hal_1ggaf10bff1d03d8156b3af56540701d6b3daa7a4c8322a9d97d7a2f06b72ff2b059c" kindref="member">NRF_RADIO_TXPOWER_NEG5DBM</ref><sp/><sp/>=<sp/>RADIO_TXPOWER_TXPOWER_Neg5dBm,<sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>-5<sp/>dBm.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="429"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(RADIO_TXPOWER_TXPOWER_Neg6dBm)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__radio__hal_1ggaf10bff1d03d8156b3af56540701d6b3da4e3268bbc73be755e9389ee121bd7ab3" kindref="member">NRF_RADIO_TXPOWER_NEG6DBM</ref><sp/><sp/>=<sp/>RADIO_TXPOWER_TXPOWER_Neg6dBm,<sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>-6<sp/>dBm.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="432"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="433"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(RADIO_TXPOWER_TXPOWER_Neg7dBm)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__radio__hal_1ggaf10bff1d03d8156b3af56540701d6b3da56bc1b666d8111a5ef14a12735cceb6b" kindref="member">NRF_RADIO_TXPOWER_NEG7DBM</ref><sp/><sp/>=<sp/>RADIO_TXPOWER_TXPOWER_Neg7dBm,<sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>-7<sp/>dBm.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="435"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__radio__hal_1ggaf10bff1d03d8156b3af56540701d6b3da83d1bff91cf0717a88c63b1801df3421" kindref="member">NRF_RADIO_TXPOWER_NEG8DBM</ref><sp/><sp/>=<sp/>RADIO_TXPOWER_TXPOWER_Neg8dBm,<sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>-8<sp/>dBm.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__radio__hal_1ggaf10bff1d03d8156b3af56540701d6b3da12e5c9fef4a14384cc4c48a506479645" kindref="member">NRF_RADIO_TXPOWER_NEG12DBM</ref><sp/>=<sp/>RADIO_TXPOWER_TXPOWER_Neg12dBm,<sp/></highlight><highlight class="comment">/**&lt;<sp/>-12<sp/>dBm.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__radio__hal_1ggaf10bff1d03d8156b3af56540701d6b3da53dfa5569a98c1de1e5b675d4d08f464" kindref="member">NRF_RADIO_TXPOWER_NEG16DBM</ref><sp/>=<sp/>RADIO_TXPOWER_TXPOWER_Neg16dBm,<sp/></highlight><highlight class="comment">/**&lt;<sp/>-16<sp/>dBm.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__radio__hal_1ggaf10bff1d03d8156b3af56540701d6b3da9f56473abf6cc325d044c706ace9772e" kindref="member">NRF_RADIO_TXPOWER_NEG20DBM</ref><sp/>=<sp/>RADIO_TXPOWER_TXPOWER_Neg20dBm,<sp/></highlight><highlight class="comment">/**&lt;<sp/>-20<sp/>dBm.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="440"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(RADIO_TXPOWER_TXPOWER_Neg30dBm)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__radio__hal_1ggaf10bff1d03d8156b3af56540701d6b3da7cef94ecd59d190ab3d5985e05d77046" kindref="member">NRF_RADIO_TXPOWER_NEG30DBM</ref><sp/>=<sp/>RADIO_TXPOWER_TXPOWER_Neg30dBm,<sp/></highlight><highlight class="comment">/**&lt;<sp/>-30<sp/>dBm.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="442"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="443"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(RADIO_TXPOWER_TXPOWER_Neg40dBm)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__radio__hal_1ggaf10bff1d03d8156b3af56540701d6b3da2088a0698d2f444b3937788a20e8d582" kindref="member">NRF_RADIO_TXPOWER_NEG40DBM</ref><sp/>=<sp/>RADIO_TXPOWER_TXPOWER_Neg40dBm,<sp/></highlight><highlight class="comment">/**&lt;<sp/>-40<sp/>dBm.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="445"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="446"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(RADIO_TXPOWER_TXPOWER_Neg70dBm)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__radio__hal_1ggaf10bff1d03d8156b3af56540701d6b3da93ced5a52ea0a27e0528cd555eb00760" kindref="member">NRF_RADIO_TXPOWER_NEG70DBM</ref><sp/>=<sp/>RADIO_TXPOWER_TXPOWER_Neg70dBm,<sp/></highlight><highlight class="comment">/**&lt;<sp/>-70<sp/>dBm.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="448"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="449"><highlight class="normal">}<sp/><ref refid="group__nrf__radio__hal_1gaf10bff1d03d8156b3af56540701d6b3d" kindref="member">nrf_radio_txpower_t</ref>;</highlight></codeline>
<codeline lineno="450"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="451"><highlight class="comment">/**<sp/>@brief<sp/>Types<sp/>of<sp/>RADIO<sp/>modes<sp/>(data<sp/>rate<sp/>and<sp/>modulation).<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="452"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="453"><highlight class="normal">{</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__radio__hal_1ggacf631e29d43c93acac290a18850e9c40a951d15ee1a9b4c6bf74d4637496098ce" kindref="member">NRF_RADIO_MODE_NRF_1MBIT</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>RADIO_MODE_MODE_Nrf_1Mbit,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>1Mbit/s<sp/>Nordic<sp/>proprietary<sp/>radio<sp/>mode.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__radio__hal_1ggacf631e29d43c93acac290a18850e9c40af2d5dbdc4b4afa5c86c76bfb6cc34e04" kindref="member">NRF_RADIO_MODE_NRF_2MBIT</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>RADIO_MODE_MODE_Nrf_2Mbit,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>2Mbit/s<sp/>Nordic<sp/>proprietary<sp/>radio<sp/>mode.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="456"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(RADIO_MODE_MODE_Nrf_250Kbit)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__radio__hal_1ggacf631e29d43c93acac290a18850e9c40a9cc3caa41ead16fe0d98f0df9eb9ae8e" kindref="member">NRF_RADIO_MODE_NRF_250KBIT</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>RADIO_MODE_MODE_Nrf_250Kbit,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>250Kbit/s<sp/>Nordic<sp/>proprietary<sp/>radio<sp/>mode.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="458"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="459"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(RADIO_MODE_MODE_Nrf_4Mbit0_5)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__radio__hal_1ggacf631e29d43c93acac290a18850e9c40a2f22d25fb14609deb75c9b702798aaf7" kindref="member">NRF_RADIO_MODE_NRF_4MBIT_H_0_5</ref><sp/><sp/><sp/><sp/>=<sp/>RADIO_MODE_MODE_Nrf_4Mbit0_5,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*!&lt;<sp/>4Mbit/s<sp/>Nordic<sp/>proprietary<sp/>radio<sp/>mode<sp/>(BT=0.5/h=0.5).<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="461"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="462"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(RADIO_MODE_MODE_Nrf_4Mbit0_25)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__radio__hal_1ggacf631e29d43c93acac290a18850e9c40ad00442833e44294668cfa29faa786c92" kindref="member">NRF_RADIO_MODE_NRF_4MBIT_H_0_25</ref><sp/><sp/><sp/>=<sp/>RADIO_MODE_MODE_Nrf_4Mbit0_25,<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*!&lt;<sp/>4Mbit/s<sp/>Nordic<sp/>proprietary<sp/>radio<sp/>mode<sp/>(BT=0.5/h=0.25).<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="464"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__radio__hal_1ggacf631e29d43c93acac290a18850e9c40ae4b19edc5f6a0557e47effea35b6c031" kindref="member">NRF_RADIO_MODE_BLE_1MBIT</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>RADIO_MODE_MODE_Ble_1Mbit,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>1<sp/>Mbit/s<sp/>Bluetooth<sp/>Low<sp/>Energy.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="466"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(RADIO_MODE_MODE_Ble_2Mbit)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__radio__hal_1ggacf631e29d43c93acac290a18850e9c40a8f70af7f390ab58d3555a7c9718acc1d" kindref="member">NRF_RADIO_MODE_BLE_2MBIT</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>RADIO_MODE_MODE_Ble_2Mbit,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>2<sp/>Mbit/s<sp/>Bluetooth<sp/>Low<sp/>Energy.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="468"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="469"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(RADIO_MODE_MODE_Ble_LR125Kbit)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__radio__hal_1ggacf631e29d43c93acac290a18850e9c40a6d9f039845eb5d15cf6ba11c84adae95" kindref="member">NRF_RADIO_MODE_BLE_LR125KBIT</ref><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>RADIO_MODE_MODE_Ble_LR125Kbit,<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*!&lt;<sp/>Bluetooth<sp/>Low<sp/>Energy<sp/>Long<sp/>range<sp/>125<sp/>kbit/s<sp/>TX,<sp/>125<sp/>kbit/s<sp/>and<sp/>500<sp/>kbit/s<sp/>RX<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="471"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="472"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(RADIO_MODE_MODE_Ble_LR500Kbit)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__radio__hal_1ggacf631e29d43c93acac290a18850e9c40a623c0072435f2899faf891929da43427" kindref="member">NRF_RADIO_MODE_BLE_LR500KBIT</ref><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>RADIO_MODE_MODE_Ble_LR500Kbit,<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*!&lt;<sp/>Bluetooth<sp/>Low<sp/>Energy<sp/>Long<sp/>range<sp/>500<sp/>kbit/s<sp/>TX,<sp/>125<sp/>kbit/s<sp/>and<sp/>500<sp/>kbit/s<sp/>RX<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="474"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="475"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(RADIO_MODE_MODE_Ieee802154_250Kbit)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__radio__hal_1ggacf631e29d43c93acac290a18850e9c40acdf5c38aa9008d6be5a972f8d2e4def0" kindref="member">NRF_RADIO_MODE_IEEE802154_250KBIT</ref><sp/>=<sp/>RADIO_MODE_MODE_Ieee802154_250Kbit,<sp/></highlight><highlight class="comment">/**&lt;<sp/>IEEE<sp/>802.15.4-2006<sp/>250<sp/>kbit/s.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="477"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="478"><highlight class="normal">}<sp/><ref refid="group__nrf__radio__hal_1gacf631e29d43c93acac290a18850e9c40" kindref="member">nrf_radio_mode_t</ref>;</highlight></codeline>
<codeline lineno="479"><highlight class="normal"></highlight></codeline>
<codeline lineno="480"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(RADIO_PCNF0_PLEN_Msk)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="481"><highlight class="comment">/**<sp/>@brief<sp/>Types<sp/>of<sp/>preamble<sp/>length.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="482"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="483"><highlight class="normal">{</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__radio__hal_1ggac643453ca82a7634a045b1dbf72eece0ad74e0950327f5bcd0238e0d3a5397268" kindref="member">NRF_RADIO_PREAMBLE_LENGTH_8BIT</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>RADIO_PCNF0_PLEN_8bit,<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>8-bit<sp/>preamble.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__radio__hal_1ggac643453ca82a7634a045b1dbf72eece0a2d61164ca2f71aed56c49ed312f45ced" kindref="member">NRF_RADIO_PREAMBLE_LENGTH_16BIT</ref><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>RADIO_PCNF0_PLEN_16bit,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>16-bit<sp/>preamble.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="486"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(RADIO_PCNF0_PLEN_32bitZero)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__radio__hal_1ggac643453ca82a7634a045b1dbf72eece0adbace5d8eba110d411ce42958c68a306" kindref="member">NRF_RADIO_PREAMBLE_LENGTH_32BIT_ZERO</ref><sp/>=<sp/>RADIO_PCNF0_PLEN_32bitZero,<sp/></highlight><highlight class="comment">/**&lt;<sp/>32-bit<sp/>zero<sp/>preamble<sp/>used<sp/>for<sp/>IEEE<sp/>802.15.4.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="488"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="489"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(RADIO_PCNF0_PLEN_LongRange)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__radio__hal_1ggac643453ca82a7634a045b1dbf72eece0aa1cc65e5e688dcc57e851199fa8d9e9e" kindref="member">NRF_RADIO_PREAMBLE_LENGTH_LONG_RANGE</ref><sp/>=<sp/>RADIO_PCNF0_PLEN_LongRange,<sp/></highlight><highlight class="comment">/**&lt;<sp/>Preamble<sp/>-<sp/>used<sp/>for<sp/>BTLE<sp/>Long<sp/>Range.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="491"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="492"><highlight class="normal">}<sp/><ref refid="group__nrf__radio__hal_1gac643453ca82a7634a045b1dbf72eece0" kindref="member">nrf_radio_preamble_length_t</ref>;</highlight></codeline>
<codeline lineno="493"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>defined(RADIO_PCNF0_PLEN_Msk)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="494"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="495"><highlight class="comment">/**<sp/>@brief<sp/>Types<sp/>of<sp/>CRC<sp/>calculatons<sp/>regarding<sp/>address.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="496"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="497"><highlight class="normal">{</highlight></codeline>
<codeline lineno="498"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(RADIO_CRCCNF_SKIPADDR_Include)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__radio__hal_1gga9e800ae5bddb82989b601ec2407ea229a390e9309e68ba7f9ed88ce7a9610a48f" kindref="member">NRF_RADIO_CRC_ADDR_INCLUDE</ref><sp/><sp/><sp/><sp/>=<sp/>RADIO_CRCCNF_SKIPADDR_Include,<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>CRC<sp/>calculation<sp/>includes<sp/>address<sp/>field.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="500"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__radio__hal_1gga9e800ae5bddb82989b601ec2407ea229a390e9309e68ba7f9ed88ce7a9610a48f" kindref="member">NRF_RADIO_CRC_ADDR_INCLUDE</ref><sp/><sp/><sp/><sp/>=<sp/>RADIO_CRCCNF_OFFSET_Include,<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>CRC<sp/>calculation<sp/>includes<sp/>address<sp/>field.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="502"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="503"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(RADIO_CRCCNF_SKIPADDR_Skip)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__radio__hal_1gga9e800ae5bddb82989b601ec2407ea229a83dde7be6ffd8c7d2f6194d88667c55f" kindref="member">NRF_RADIO_CRC_ADDR_SKIP</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>RADIO_CRCCNF_SKIPADDR_Skip,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>CRC<sp/>calculation<sp/>does<sp/>not<sp/>include<sp/>address<sp/>field.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="505"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__radio__hal_1gga9e800ae5bddb82989b601ec2407ea229a83dde7be6ffd8c7d2f6194d88667c55f" kindref="member">NRF_RADIO_CRC_ADDR_SKIP</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>RADIO_CRCCNF_OFFSET_Skip,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>CRC<sp/>calculation<sp/>does<sp/>not<sp/>include<sp/>address<sp/>field.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="507"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="508"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(RADIO_CRCCNF_SKIPADDR_Ieee802154)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__radio__hal_1gga9e800ae5bddb82989b601ec2407ea229a061a5d8bf5b9823265c4f828d6ba8a2a" kindref="member">NRF_RADIO_CRC_ADDR_IEEE802154</ref><sp/>=<sp/>RADIO_CRCCNF_SKIPADDR_Ieee802154,<sp/></highlight><highlight class="comment">/**&lt;<sp/>CRC<sp/>calculation<sp/>as<sp/>per<sp/>802.15.4<sp/>standard.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="510"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(RADIO_CRCCNF_OFFSET_LENGTH)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__radio__hal_1gga9e800ae5bddb82989b601ec2407ea229a061a5d8bf5b9823265c4f828d6ba8a2a" kindref="member">NRF_RADIO_CRC_ADDR_IEEE802154</ref><sp/>=<sp/>RADIO_CRCCNF_OFFSET_LENGTH,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>CRC<sp/>calculation<sp/>as<sp/>per<sp/>802.15.4<sp/>standard.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="512"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="513"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(RADIO_CRCCNF_OFFSET_SO)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__radio__hal_1gga9e800ae5bddb82989b601ec2407ea229a485840331232a3ddd56e1f7928264e25" kindref="member">NRF_RADIO_CRC_ADDR_S0</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>RADIO_CRCCNF_OFFSET_SO,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>CRC<sp/>calculation<sp/>starting<sp/>at<sp/>first<sp/>byte<sp/>after<sp/>S0<sp/>field.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="515"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="516"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(RADIO_CRCCNF_OFFSET_S1)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__radio__hal_1gga9e800ae5bddb82989b601ec2407ea229a746706569662e81eb7b7b47f5d83b9b3" kindref="member">NRF_RADIO_CRC_ADDR_S1</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>RADIO_CRCCNF_OFFSET_S1,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>CRC<sp/>calculation<sp/>starting<sp/>at<sp/>first<sp/>byte<sp/>after<sp/>S1<sp/>field.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="518"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="519"><highlight class="normal">}<sp/><ref refid="group__nrf__radio__hal_1ga9e800ae5bddb82989b601ec2407ea229" kindref="member">nrf_radio_crc_addr_t</ref>;</highlight></codeline>
<codeline lineno="520"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="521"><highlight class="comment">/**<sp/>@brief<sp/>Packet<sp/>configuration.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="522" refid="structnrf__radio__packet__conf__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="523"><highlight class="normal">{</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>lflen;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Length<sp/>on<sp/>air<sp/>of<sp/>LENGTH<sp/>field<sp/>in<sp/>number<sp/>of<sp/>bits.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>s0len;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Length<sp/>on<sp/>air<sp/>of<sp/>S0<sp/>field<sp/>in<sp/>number<sp/>of<sp/>bytes.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>s1len;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Length<sp/>on<sp/>air<sp/>of<sp/>S1<sp/>field<sp/>in<sp/>number<sp/>of<sp/>bits.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="527"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(RADIO_PCNF0_S1INCL_Msk)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>s1incl;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Include<sp/>or<sp/>exclude<sp/>S1<sp/>field<sp/>in<sp/>RAM.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="529"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="530"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(RADIO_PCNF0_CILEN_Msk)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>cilen;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Length<sp/>of<sp/>code<sp/>indicator<sp/>-<sp/>long<sp/>range.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="532"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="533"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(RADIO_PCNF0_PLEN_Msk)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__radio__hal_1gac643453ca82a7634a045b1dbf72eece0" kindref="member">nrf_radio_preamble_length_t</ref><sp/>plen;<sp/></highlight><highlight class="comment">/**&lt;<sp/>Length<sp/>of<sp/>preamble<sp/>on<sp/>air.<sp/>Decision<sp/>point:<sp/>TASKS_START<sp/>task.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="535"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="536"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(RADIO_PCNF0_CRCINC_Msk)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>crcinc;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Indicates<sp/>if<sp/>LENGTH<sp/>field<sp/>contains<sp/>CRC<sp/>or<sp/>not.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="538"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="539"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(RADIO_PCNF0_TERMLEN_Msk)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>termlen;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Length<sp/>of<sp/>TERM<sp/>field<sp/>in<sp/>Long<sp/>Range<sp/>operation.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="541"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>maxlen;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Maximum<sp/>length<sp/>of<sp/>packet<sp/>payload.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>statlen;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Static<sp/>length<sp/>in<sp/>number<sp/>of<sp/>bytes.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>balen;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Base<sp/>address<sp/>length<sp/>in<sp/>number<sp/>of<sp/>bytes.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>big_endian;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>On<sp/>air<sp/>endianness<sp/>of<sp/>packet.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>whiteen;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Enable<sp/>or<sp/>disable<sp/>packet<sp/>whitening.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="547"><highlight class="normal">}<sp/><ref refid="structnrf__radio__packet__conf__t" kindref="compound">nrf_radio_packet_conf_t</ref>;</highlight></codeline>
<codeline lineno="548"><highlight class="normal"></highlight></codeline>
<codeline lineno="549"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(RADIO_DFEMODE_DFEOPMODE_Msk)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="550"><highlight class="comment">/**<sp/>@brief<sp/>Direction<sp/>Finding<sp/>operation<sp/>modes.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="551"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="552"><highlight class="normal">{</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__radio__hal_1gga50e6ec690192526db55f277b6727117da53d3b89081b6b30d23fd83a6fe9de412" kindref="member">NRF_RADIO_DFE_OP_MODE_AOD</ref><sp/>=<sp/>RADIO_DFEMODE_DFEOPMODE_AoD,<sp/></highlight><highlight class="comment">/**&lt;<sp/>Angle-of-Departure<sp/>mode.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__radio__hal_1gga50e6ec690192526db55f277b6727117da4cfdf7b91b38b63e9d548fbf0af0bd36" kindref="member">NRF_RADIO_DFE_OP_MODE_AOA</ref><sp/>=<sp/>RADIO_DFEMODE_DFEOPMODE_AoA,<sp/></highlight><highlight class="comment">/**&lt;<sp/>Angle-of-Arrival<sp/>mode.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="555"><highlight class="normal">}<sp/><ref refid="group__nrf__radio__hal_1ga50e6ec690192526db55f277b6727117d" kindref="member">nrf_radio_dfe_op_mode_t</ref>;</highlight></codeline>
<codeline lineno="556"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="557"><highlight class="normal"></highlight></codeline>
<codeline lineno="558"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(RADIO_DFESTATUS_SWITCHINGSTATE_Msk)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="559"><highlight class="comment">/**<sp/>@brief<sp/>States<sp/>of<sp/>Direction<sp/>Finding<sp/>switching<sp/>state<sp/>machine.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="560"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="561"><highlight class="normal">{</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__radio__hal_1ggaa6632d62276bfec4138e0688d5f73018a686e18534cde4b4789614c157241ad0b" kindref="member">NRF_RADIO_DFE_SWITCH_STATE_IDLE</ref><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>RADIO_DFESTATUS_SWITCHINGSTATE_Idle,<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Switching<sp/>state<sp/>Idle.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__radio__hal_1ggaa6632d62276bfec4138e0688d5f73018a1de635b14e6f86baa59130e3b70458c0" kindref="member">NRF_RADIO_DFE_SWITCH_STATE_OFFSET</ref><sp/><sp/><sp/><sp/>=<sp/>RADIO_DFESTATUS_SWITCHINGSTATE_Offset,<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Switching<sp/>state<sp/>Offset.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__radio__hal_1ggaa6632d62276bfec4138e0688d5f73018a6c9e9256a55dffa3e222eef480c48293" kindref="member">NRF_RADIO_DFE_SWITCH_STATE_GUARD</ref><sp/><sp/><sp/><sp/><sp/>=<sp/>RADIO_DFESTATUS_SWITCHINGSTATE_Guard,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Switching<sp/>state<sp/>Guard.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__radio__hal_1ggaa6632d62276bfec4138e0688d5f73018ac43a211e085fa6f76f0fe62ead6f487f" kindref="member">NRF_RADIO_DFE_SWITCH_STATE_REF</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>RADIO_DFESTATUS_SWITCHINGSTATE_Ref,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Switching<sp/>state<sp/>Ref.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__radio__hal_1ggaa6632d62276bfec4138e0688d5f73018a3cf8caab8af53b52ceb6b17100571125" kindref="member">NRF_RADIO_DFE_SWITCH_STATE_SWITCHING</ref><sp/>=<sp/>RADIO_DFESTATUS_SWITCHINGSTATE_Switching,<sp/></highlight><highlight class="comment">/**&lt;<sp/>Switching<sp/>state<sp/>Switching.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__radio__hal_1ggaa6632d62276bfec4138e0688d5f73018abce423577ee283bfdc44cba07ca01c11" kindref="member">NRF_RADIO_DFE_SWITCH_STATE_ENDING</ref><sp/><sp/><sp/><sp/>=<sp/>RADIO_DFESTATUS_SWITCHINGSTATE_Ending,<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Switching<sp/>state<sp/>Ending.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="568"><highlight class="normal">}<sp/><ref refid="group__nrf__radio__hal_1gaa6632d62276bfec4138e0688d5f73018" kindref="member">nrf_radio_dfe_switch_state_t</ref>;</highlight></codeline>
<codeline lineno="569"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="570"><highlight class="comment">/**<sp/>@brief<sp/>States<sp/>of<sp/>Direction<sp/>Finding<sp/>sampling<sp/>state<sp/>machine.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="571"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="572"><highlight class="normal">{</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__radio__hal_1gga8b27d0e94d3c0d4589d8876018cdcc7ba0f73845b55dddade8036d73d92e25903" kindref="member">NRF_RADIO_DFE_SAMPLE_STATE_IDLE</ref><sp/><sp/><sp/><sp/><sp/>=<sp/>RADIO_DFESTATUS_SAMPLINGSTATE_Idle,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Sampling<sp/>state<sp/>Idle.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__radio__hal_1gga8b27d0e94d3c0d4589d8876018cdcc7ba7dbc11d1dd54b3ba7dcacc4e9f60e330" kindref="member">NRF_RADIO_DFE_SAMPLE_STATE_SAMPLING</ref><sp/>=<sp/>RADIO_DFESTATUS_SAMPLINGSTATE_Sampling,<sp/></highlight><highlight class="comment">/**&lt;<sp/>Sampling<sp/>state<sp/>Sampling.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="575"><highlight class="normal">}<sp/><ref refid="group__nrf__radio__hal_1ga8b27d0e94d3c0d4589d8876018cdcc7b" kindref="member">nrf_radio_dfe_sample_state_t</ref>;</highlight></codeline>
<codeline lineno="576"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="577"><highlight class="normal"></highlight></codeline>
<codeline lineno="578"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(RADIO_CTEINLINECONF_S0CONF_Msk)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="579"><highlight class="comment">/**<sp/>@brief<sp/>Valid<sp/>ranges<sp/>of<sp/>CTE<sp/>time,<sp/>expressed<sp/>in<sp/>8<sp/>us<sp/>units.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="580"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="581"><highlight class="normal">{</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__radio__hal_1gga9858b66ec9cdd8ae5fd9e378c4f9f2b9a8c204dcc985d76994f72d17443abb98c" kindref="member">NRF_RADIO_CTEINLINE_TIME_RANGE_20</ref><sp/>=<sp/>RADIO_CTEINLINECONF_CTETIMEVALIDRANGE_20,<sp/></highlight><highlight class="comment">/**&lt;<sp/>20<sp/>units<sp/>time<sp/>range.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__radio__hal_1gga9858b66ec9cdd8ae5fd9e378c4f9f2b9a9770f5e5ba1c401b97bf60117d8bef48" kindref="member">NRF_RADIO_CTEINLINE_TIME_RANGE_31</ref><sp/>=<sp/>RADIO_CTEINLINECONF_CTETIMEVALIDRANGE_31,<sp/></highlight><highlight class="comment">/**&lt;<sp/>31<sp/>units<sp/>time<sp/>range.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__radio__hal_1gga9858b66ec9cdd8ae5fd9e378c4f9f2b9a443133fb76954e913683ae5df0347c22" kindref="member">NRF_RADIO_CTEINLINE_TIME_RANGE_63</ref><sp/>=<sp/>RADIO_CTEINLINECONF_CTETIMEVALIDRANGE_63,<sp/></highlight><highlight class="comment">/**&lt;<sp/>63<sp/>units<sp/>time<sp/>range.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="585"><highlight class="normal">}<sp/><ref refid="group__nrf__radio__hal_1ga9858b66ec9cdd8ae5fd9e378c4f9f2b9" kindref="member">nrf_radio_cteinline_time_range_t</ref>;</highlight></codeline>
<codeline lineno="586"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="587"><highlight class="comment">/**<sp/>@brief<sp/>Spacing<sp/>between<sp/>samples<sp/>for<sp/>the<sp/>samples<sp/>in<sp/>the<sp/>switching<sp/>period.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="588"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="589"><highlight class="normal">{</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__radio__hal_1gga0bf3be7a962831ad119d22e7fd47ac42ad94a5905988a8da5111747cd3e37b2fc" kindref="member">NRF_RADIO_CTEINLINE_RX_MODE_125NS</ref><sp/>=<sp/>RADIO_CTEINLINECONF_CTEINLINERXMODE1US_125ns,<sp/></highlight><highlight class="comment">/**&lt;<sp/>125<sp/>ns<sp/>spacing.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__radio__hal_1gga0bf3be7a962831ad119d22e7fd47ac42a43c56c7c324c4ec43e80b01baa31eb14" kindref="member">NRF_RADIO_CTEINLINE_RX_MODE_250NS</ref><sp/>=<sp/>RADIO_CTEINLINECONF_CTEINLINERXMODE1US_250ns,<sp/></highlight><highlight class="comment">/**&lt;<sp/>250<sp/>ns<sp/>spacing.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__radio__hal_1gga0bf3be7a962831ad119d22e7fd47ac42afadc96817e3d81b053c003e5b3eb30dd" kindref="member">NRF_RADIO_CTEINLINE_RX_MODE_500NS</ref><sp/>=<sp/>RADIO_CTEINLINECONF_CTEINLINERXMODE1US_500ns,<sp/></highlight><highlight class="comment">/**&lt;<sp/>500<sp/>ns<sp/>spacing.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__radio__hal_1gga0bf3be7a962831ad119d22e7fd47ac42a1007927b146a0b2d7a158aaf0dc00594" kindref="member">NRF_RADIO_CTEINLINE_RX_MODE_1US</ref><sp/><sp/><sp/>=<sp/>RADIO_CTEINLINECONF_CTEINLINERXMODE1US_1us,<sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>1<sp/>us<sp/>spacing.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__radio__hal_1gga0bf3be7a962831ad119d22e7fd47ac42acbae89288edfb3f0f64742b4ef01654b" kindref="member">NRF_RADIO_CTEINLINE_RX_MODE_2US</ref><sp/><sp/><sp/>=<sp/>RADIO_CTEINLINECONF_CTEINLINERXMODE1US_2us,<sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>2<sp/>us<sp/>spacing.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__radio__hal_1gga0bf3be7a962831ad119d22e7fd47ac42a569b5053485c7fc8b907fa03ac361035" kindref="member">NRF_RADIO_CTEINLINE_RX_MODE_4US</ref><sp/><sp/><sp/>=<sp/>RADIO_CTEINLINECONF_CTEINLINERXMODE1US_4us,<sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>4<sp/>us<sp/>spacing.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="596"><highlight class="normal">}<sp/><ref refid="group__nrf__radio__hal_1ga0bf3be7a962831ad119d22e7fd47ac42" kindref="member">nrf_radio_cteinline_rx_mode_t</ref>;</highlight></codeline>
<codeline lineno="597"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="598"><highlight class="comment">/**<sp/>@brief<sp/>Configuration<sp/>for<sp/>CTE<sp/>inline<sp/>mode<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="599" refid="structnrf__radio__cteinline__conf__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="600"><highlight class="normal">{</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>enable;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Enable<sp/>or<sp/>disable<sp/>parsing<sp/>of<sp/>CTEInfo<sp/>from<sp/>received<sp/>packet.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>info_in_s1;<sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Indicates<sp/>whether<sp/>CTEInfo<sp/>is<sp/>in<sp/>S1<sp/>byte<sp/>or<sp/>not.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err_handling;<sp/></highlight><highlight class="comment">/**&lt;<sp/>Enable<sp/>or<sp/>disable<sp/>switching<sp/>and<sp/>sampling<sp/>when<sp/>CRC<sp/>is<sp/>not<sp/>OK.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__radio__hal_1ga9858b66ec9cdd8ae5fd9e378c4f9f2b9" kindref="member">nrf_radio_cteinline_time_range_t</ref><sp/>time_range;<sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Maximum<sp/>range<sp/>of<sp/>CTE<sp/>time.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__radio__hal_1ga0bf3be7a962831ad119d22e7fd47ac42" kindref="member">nrf_radio_cteinline_rx_mode_t</ref><sp/><sp/><sp/><sp/>rx1us;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Spacing<sp/>between<sp/>samples<sp/>during<sp/>switching<sp/>period<sp/>for<sp/>AoD<sp/>1<sp/>us.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__radio__hal_1ga0bf3be7a962831ad119d22e7fd47ac42" kindref="member">nrf_radio_cteinline_rx_mode_t</ref><sp/><sp/><sp/><sp/>rx2us;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Spacing<sp/>between<sp/>samples<sp/>during<sp/>switching<sp/>period<sp/>for<sp/>AoD<sp/>2<sp/>us<sp/>or<sp/>AoA<sp/>4<sp/>us.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s0_pattern;<sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>S0<sp/>bit<sp/>pattern<sp/>to<sp/>match.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s0_mask;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>S0<sp/>bit<sp/>mask<sp/>to<sp/>set<sp/>which<sp/>bit<sp/>to<sp/>match.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="609"><highlight class="normal">}<sp/><ref refid="structnrf__radio__cteinline__conf__t" kindref="compound">nrf_radio_cteinline_conf_t</ref>;</highlight></codeline>
<codeline lineno="610"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>defined(RADIO_CTEINLINECONF_S0CONF_Msk)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="611"><highlight class="normal"></highlight></codeline>
<codeline lineno="612"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(RADIO_DFECTRL1_NUMBEROF8US_Msk)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="613"><highlight class="comment">/**<sp/>@brief<sp/>State<sp/>when<sp/>CTE<sp/>extension<sp/>is<sp/>added<sp/>and<sp/>antenna<sp/>switching/sampling<sp/>is<sp/>done.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="614"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="615"><highlight class="normal">{</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__radio__hal_1gga56344d716160842c78b173c797debf0dacdd58d9806c60261ef641853e1cb143e" kindref="member">NRF_RADIO_DFECTRL_EXTENSION_CRC</ref><sp/><sp/><sp/><sp/><sp/>=<sp/>RADIO_DFECTRL1_DFEINEXTENSION_CRC,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>AoA/AoD<sp/>procedure<sp/>triggered<sp/>at<sp/>end<sp/>of<sp/>CRC.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__radio__hal_1gga56344d716160842c78b173c797debf0da8c673aeefc621feacc627a71d6c9ce80" kindref="member">NRF_RADIO_DFECTRL_EXTENSION_PAYLOAD</ref><sp/>=<sp/>RADIO_DFECTRL1_DFEINEXTENSION_Payload,<sp/></highlight><highlight class="comment">/**&lt;<sp/>Antenna<sp/>switching/sampling<sp/>done<sp/>in<sp/>the<sp/>packet<sp/>payload.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="618"><highlight class="normal">}<sp/><ref refid="group__nrf__radio__hal_1ga56344d716160842c78b173c797debf0d" kindref="member">nrf_radio_dfectrl_extension_t</ref>;</highlight></codeline>
<codeline lineno="619"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="620"><highlight class="comment">/**<sp/>@brief<sp/>Interval<sp/>between<sp/>antenna<sp/>changes<sp/>in<sp/>the<sp/>switching<sp/>state.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="621"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="622"><highlight class="normal">{</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__radio__hal_1gga2615b22f05fde4684ecfbd7d755fc4eea0f8a97c2db0b04e07b198a574b920825" kindref="member">NRF_RADIO_DFECTRL_SWITCH_SPACING_1US</ref><sp/>=<sp/>RADIO_DFECTRL1_TSWITCHSPACING_1us,<sp/></highlight><highlight class="comment">/**&lt;<sp/>1<sp/>us<sp/>interval<sp/>between<sp/>antenna<sp/>change.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__radio__hal_1gga2615b22f05fde4684ecfbd7d755fc4eea003a38b55e8b06dbcc8f369363aae2bb" kindref="member">NRF_RADIO_DFECTRL_SWITCH_SPACING_2US</ref><sp/>=<sp/>RADIO_DFECTRL1_TSWITCHSPACING_2us,<sp/></highlight><highlight class="comment">/**&lt;<sp/>2<sp/>us<sp/>interval<sp/>between<sp/>antenna<sp/>change.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__radio__hal_1gga2615b22f05fde4684ecfbd7d755fc4eead6e53dbf32e99850b8a72770f22a19f5" kindref="member">NRF_RADIO_DFECTRL_SWITCH_SPACING_4US</ref><sp/>=<sp/>RADIO_DFECTRL1_TSWITCHSPACING_4us,<sp/></highlight><highlight class="comment">/**&lt;<sp/>4<sp/>us<sp/>interval<sp/>between<sp/>antenna<sp/>change.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="626"><highlight class="normal">}<sp/><ref refid="group__nrf__radio__hal_1ga2615b22f05fde4684ecfbd7d755fc4ee" kindref="member">nrf_radio_dfectrl_switch_spacing_t</ref>;</highlight></codeline>
<codeline lineno="627"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="628"><highlight class="comment">/**<sp/>@brief<sp/>Interval<sp/>between<sp/>samples.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="629"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="630"><highlight class="normal">{</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__radio__hal_1ggae8d3e239eae19f02f55400a93307110faee5d03d4d5d1e523d571c3cebc22159e" kindref="member">NRF_RADIO_DFECTRL_SAMPLE_SPACING_125NS</ref><sp/>=<sp/>RADIO_DFECTRL1_TSAMPLESPACING_125ns,<sp/></highlight><highlight class="comment">/**&lt;<sp/>125<sp/>ns<sp/>interval<sp/>between<sp/>samples.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__radio__hal_1ggae8d3e239eae19f02f55400a93307110fa5bb3ffe386c74951a64cebf141d82eaa" kindref="member">NRF_RADIO_DFECTRL_SAMPLE_SPACING_250NS</ref><sp/>=<sp/>RADIO_DFECTRL1_TSAMPLESPACING_250ns,<sp/></highlight><highlight class="comment">/**&lt;<sp/>250<sp/>ns<sp/>interval<sp/>between<sp/>samples.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__radio__hal_1ggae8d3e239eae19f02f55400a93307110fac83f8674cce6a655cc4401831435b63d" kindref="member">NRF_RADIO_DFECTRL_SAMPLE_SPACING_500NS</ref><sp/>=<sp/>RADIO_DFECTRL1_TSAMPLESPACING_500ns,<sp/></highlight><highlight class="comment">/**&lt;<sp/>500<sp/>ns<sp/>interval<sp/>between<sp/>samples.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__radio__hal_1ggae8d3e239eae19f02f55400a93307110fa55579a036be7df7f65df9898ce87e810" kindref="member">NRF_RADIO_DFECTRL_SAMPLE_SPACING_1US</ref><sp/><sp/><sp/>=<sp/>RADIO_DFECTRL1_TSAMPLESPACING_1us,<sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>1<sp/>us<sp/>interval<sp/>between<sp/>samples.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__radio__hal_1ggae8d3e239eae19f02f55400a93307110fafcce57e3fcf04807c7a4fa5b492daa14" kindref="member">NRF_RADIO_DFECTRL_SAMPLE_SPACING_2US</ref><sp/><sp/><sp/>=<sp/>RADIO_DFECTRL1_TSAMPLESPACING_2us,<sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>2<sp/>us<sp/>interval<sp/>between<sp/>samples.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__radio__hal_1ggae8d3e239eae19f02f55400a93307110fa91fcf87864e1c83882ebc905a227e108" kindref="member">NRF_RADIO_DFECTRL_SAMPLE_SPACING_4US</ref><sp/><sp/><sp/>=<sp/>RADIO_DFECTRL1_TSAMPLESPACING_4us,<sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>4<sp/>us<sp/>interval<sp/>between<sp/>samples.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="637"><highlight class="normal">}<sp/><ref refid="group__nrf__radio__hal_1gae8d3e239eae19f02f55400a93307110f" kindref="member">nrf_radio_dfectrl_sample_spacing_t</ref>;</highlight></codeline>
<codeline lineno="638"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="639"><highlight class="comment">/**<sp/>@brief<sp/>Direction<sp/>finding<sp/>sample<sp/>type.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="640"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="641"><highlight class="normal">{</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__radio__hal_1ggacf147f6a78d77e1a86240f5555fd11c1a7f7fbd83552813a64a42ed85e8179824" kindref="member">NRF_RADIO_DFECTRL_SAMPLE_TYPE_IQ</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>RADIO_DFECTRL1_SAMPLETYPE_IQ,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Complex<sp/>samples<sp/>in<sp/>I<sp/>and<sp/>Q.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__radio__hal_1ggacf147f6a78d77e1a86240f5555fd11c1a7031b60b9e7e9414fdc12e881cd9b992" kindref="member">NRF_RADIO_DFECTRL_SAMPLE_TYPE_MAGPHASE</ref><sp/>=<sp/>RADIO_DFECTRL1_SAMPLETYPE_MagPhase,<sp/></highlight><highlight class="comment">/**&lt;<sp/>Complex<sp/>samples<sp/>as<sp/>magnitude<sp/>and<sp/>phase.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="644"><highlight class="normal">}<sp/><ref refid="group__nrf__radio__hal_1gacf147f6a78d77e1a86240f5555fd11c1" kindref="member">nrf_radio_dfectrl_sample_type_t</ref>;</highlight></codeline>
<codeline lineno="645"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="646"><highlight class="comment">/**<sp/>@brief<sp/>Direction<sp/>finding<sp/>configuration.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="647" refid="structnrf__radio__dfectrl__conf__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="648"><highlight class="normal">{</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dfe_len;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Length<sp/>of<sp/>the<sp/>AoA/AoD<sp/>procedure<sp/>in<sp/>number<sp/>of<sp/>8<sp/>µs<sp/>units.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__radio__hal_1ga56344d716160842c78b173c797debf0d" kindref="member">nrf_radio_dfectrl_extension_t</ref><sp/><sp/><sp/><sp/><sp/><sp/>extension;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>State<sp/>in<sp/>which<sp/>CTE<sp/>extension<sp/>is<sp/>added<sp/>and<sp/>antenna<sp/>switching/sampling<sp/>is<sp/>done.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__radio__hal_1ga2615b22f05fde4684ecfbd7d755fc4ee" kindref="member">nrf_radio_dfectrl_switch_spacing_t</ref><sp/>switch_spacing;<sp/></highlight><highlight class="comment">/**&lt;<sp/>Interval<sp/>between<sp/>antenna<sp/>changes<sp/>in<sp/>the<sp/>switching<sp/>state.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__radio__hal_1gae8d3e239eae19f02f55400a93307110f" kindref="member">nrf_radio_dfectrl_sample_spacing_t</ref><sp/>spacing_ref;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Interval<sp/>between<sp/>samples<sp/>in<sp/>the<sp/>reference<sp/>period.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__radio__hal_1gacf147f6a78d77e1a86240f5555fd11c1" kindref="member">nrf_radio_dfectrl_sample_type_t</ref><sp/><sp/><sp/><sp/>sample_type;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Indicates<sp/>whether<sp/>to<sp/>sample<sp/>I/Q<sp/>or<sp/>magnitude/phase.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__radio__hal_1gae8d3e239eae19f02f55400a93307110f" kindref="member">nrf_radio_dfectrl_sample_spacing_t</ref><sp/>sample_spacing;<sp/></highlight><highlight class="comment">/**&lt;<sp/>Interval<sp/>between<sp/>samples<sp/>in<sp/>the<sp/>switching<sp/>period.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="655"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(RADIO_DFECTRL1_REPEATPATTERN_Msk)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>repeat_pattern;<sp/></highlight><highlight class="comment">/**&lt;<sp/>Number<sp/>of<sp/>times<sp/>antenna<sp/>pattern<sp/>should<sp/>be<sp/>repeated.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="657"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gain_steps;<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Number<sp/>of<sp/>gain<sp/>steps<sp/>lowering<sp/>the<sp/>total<sp/>gain<sp/>at<sp/>the<sp/>start<sp/>of<sp/>CTE<sp/>.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/>int16_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>switch_offset;<sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Signed<sp/>value<sp/>offset<sp/>after<sp/>the<sp/>end<sp/>of<sp/>the<sp/>CRC<sp/>before<sp/>starting<sp/>switching<sp/>expressed<sp/>in<sp/>16<sp/>Mhz<sp/>cycles.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/><sp/><sp/>int16_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sample_offset;<sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Signed<sp/>value<sp/>offset<sp/>before<sp/>starting<sp/>sampling<sp/>expressed<sp/>in<sp/>16<sp/>Mhz<sp/>cycles</highlight></codeline>
<codeline lineno="661"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>relative<sp/>to<sp/>the<sp/>beginning<sp/>of<sp/>the<sp/>reference<sp/>state.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="662"><highlight class="normal">}<sp/><ref refid="structnrf__radio__dfectrl__conf__t" kindref="compound">nrf_radio_dfectrl_conf_t</ref>;</highlight></codeline>
<codeline lineno="663"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>defined(RADIO_DFECTRL1_NUMBEROF8US_Msk)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="664"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="665"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="666"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>activating<sp/>a<sp/>specific<sp/>RADIO<sp/>task.</highlight></codeline>
<codeline lineno="667"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="668"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="669"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>task<sp/><sp/>Task<sp/>to<sp/>be<sp/>activated.</highlight></codeline>
<codeline lineno="670"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="671"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__radio__hal_1ga3c9a0741030060bba9d9d5bbf7f528b8" kindref="member">nrf_radio_task_trigger</ref>(NRF_RADIO_Type<sp/>*<sp/>p_reg,<sp/><ref refid="group__nrf__radio__hal_1ga607fff2f027c323b3dc8af40ab489a2f" kindref="member">nrf_radio_task_t</ref><sp/>task);</highlight></codeline>
<codeline lineno="672"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="673"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="674"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>the<sp/>address<sp/>of<sp/>a<sp/>specific<sp/>RADIO<sp/>task<sp/>register.</highlight></codeline>
<codeline lineno="675"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="676"><highlight class="comment"><sp/>*<sp/>This<sp/>function<sp/>can<sp/>be<sp/>used<sp/>by<sp/>the<sp/>PPI<sp/>module.</highlight></codeline>
<codeline lineno="677"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="678"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="679"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>task<sp/><sp/>Requested<sp/>task.</highlight></codeline>
<codeline lineno="680"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="681"><highlight class="comment"><sp/>*<sp/>@return<sp/>Address<sp/>of<sp/>the<sp/>specified<sp/>task<sp/>register.</highlight></codeline>
<codeline lineno="682"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="683"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__radio__hal_1ga2d24a390cb7660d259f664a4dd409555" kindref="member">nrf_radio_task_address_get</ref>(NRF_RADIO_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__radio__hal_1ga607fff2f027c323b3dc8af40ab489a2f" kindref="member">nrf_radio_task_t</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>task);</highlight></codeline>
<codeline lineno="685"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="686"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="687"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>clearing<sp/>a<sp/>specific<sp/>RADIO<sp/>event.</highlight></codeline>
<codeline lineno="688"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="689"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="690"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>event<sp/>Event<sp/>to<sp/>clean.</highlight></codeline>
<codeline lineno="691"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="692"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__radio__hal_1ga4722c840c42a42823687a1a86e1261ef" kindref="member">nrf_radio_event_clear</ref>(NRF_RADIO_Type<sp/>*<sp/>p_reg,<sp/><ref refid="group__nrf__radio__hal_1ga7c4b15ec33a0704a9caa2fa0b36e98bb" kindref="member">nrf_radio_event_t</ref><sp/>event);</highlight></codeline>
<codeline lineno="693"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="694"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="695"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>retrieving<sp/>the<sp/>state<sp/>of<sp/>the<sp/>RADIO<sp/>event.</highlight></codeline>
<codeline lineno="696"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="697"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="698"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>event<sp/>Event<sp/>to<sp/>be<sp/>checked.</highlight></codeline>
<codeline lineno="699"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="700"><highlight class="comment"><sp/>*<sp/>@retval<sp/>true<sp/><sp/>The<sp/>event<sp/>has<sp/>been<sp/>generated.</highlight></codeline>
<codeline lineno="701"><highlight class="comment"><sp/>*<sp/>@retval<sp/>false<sp/>The<sp/>event<sp/>has<sp/>not<sp/>been<sp/>generated.</highlight></codeline>
<codeline lineno="702"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="703"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrf__radio__hal_1ga07513cd4f3fe44e19e6dd7f57c99aded" kindref="member">nrf_radio_event_check</ref>(NRF_RADIO_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,<sp/><ref refid="group__nrf__radio__hal_1ga7c4b15ec33a0704a9caa2fa0b36e98bb" kindref="member">nrf_radio_event_t</ref><sp/>event);</highlight></codeline>
<codeline lineno="704"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="705"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="706"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>the<sp/>address<sp/>of<sp/>a<sp/>specific<sp/>RADIO<sp/>event<sp/>register.</highlight></codeline>
<codeline lineno="707"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="708"><highlight class="comment"><sp/>*<sp/>This<sp/>function<sp/>can<sp/>be<sp/>used<sp/>by<sp/>the<sp/>PPI<sp/>module.</highlight></codeline>
<codeline lineno="709"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="710"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="711"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>event<sp/>Requested<sp/>Event.</highlight></codeline>
<codeline lineno="712"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="713"><highlight class="comment"><sp/>*<sp/>@return<sp/>Address<sp/>of<sp/>the<sp/>specified<sp/>event<sp/>register.</highlight></codeline>
<codeline lineno="714"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="715"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__radio__hal_1ga3332fde0b4673961bf8466dd323d59a4" kindref="member">nrf_radio_event_address_get</ref>(NRF_RADIO_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__radio__hal_1ga7c4b15ec33a0704a9caa2fa0b36e98bb" kindref="member">nrf_radio_event_t</ref><sp/><sp/><sp/><sp/><sp/><sp/>event);</highlight></codeline>
<codeline lineno="717"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="718"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="719"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>enabling<sp/>specified<sp/>RADIO<sp/>shortcuts.</highlight></codeline>
<codeline lineno="720"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="721"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/><sp/><sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="722"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>shorts_mask<sp/>Mask<sp/>of<sp/>shortcuts.</highlight></codeline>
<codeline lineno="723"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="724"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__radio__hal_1gac05dbdb99a5c5308818344391a778298" kindref="member">nrf_radio_shorts_enable</ref>(NRF_RADIO_Type<sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>shorts_mask);</highlight></codeline>
<codeline lineno="725"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="726"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="727"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>disabling<sp/>specified<sp/>RADIO<sp/>shortcuts.</highlight></codeline>
<codeline lineno="728"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="729"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/><sp/><sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="730"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>shorts_mask<sp/>Mask<sp/>of<sp/>shortcuts.</highlight></codeline>
<codeline lineno="731"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="732"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__radio__hal_1ga8f44040e5750c1e0b44633d362a7d36c" kindref="member">nrf_radio_shorts_disable</ref>(NRF_RADIO_Type<sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>shorts_mask);</highlight></codeline>
<codeline lineno="733"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="734"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="735"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>the<sp/>configuration<sp/>of<sp/>RADIO<sp/>shortcuts.</highlight></codeline>
<codeline lineno="736"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="737"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/><sp/><sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="738"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>shorts_mask<sp/>Shortcuts<sp/>configuration<sp/>to<sp/>set.</highlight></codeline>
<codeline lineno="739"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="740"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__radio__hal_1gad795180cbe33c306c3fb3a5d864f17d2" kindref="member">nrf_radio_shorts_set</ref>(NRF_RADIO_Type<sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>shorts_mask);</highlight></codeline>
<codeline lineno="741"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="742"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="743"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>the<sp/>configuration<sp/>of<sp/>RADIO<sp/>shortcuts.</highlight></codeline>
<codeline lineno="744"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="745"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="746"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="747"><highlight class="comment"><sp/>*<sp/>@return<sp/>Mask<sp/>of<sp/>currently<sp/>enabled<sp/>shortcuts.</highlight></codeline>
<codeline lineno="748"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="749"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__radio__hal_1gaad50cd6fcdb24e15fbaf79ac6a3c2135" kindref="member">nrf_radio_shorts_get</ref>(NRF_RADIO_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="750"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="751"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="752"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>enabling<sp/>specified<sp/>RADIO<sp/>interrupts.</highlight></codeline>
<codeline lineno="753"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="754"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="755"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>mask<sp/><sp/>Mask<sp/>of<sp/>interrupts<sp/>to<sp/>be<sp/>enabled.</highlight></codeline>
<codeline lineno="756"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Use<sp/>@ref<sp/>nrf_radio_int_mask_t<sp/>values<sp/>for<sp/>bit<sp/>masking.</highlight></codeline>
<codeline lineno="757"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="758"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__radio__hal_1ga69ff216ed79aa8b7bdee0f378bd2607b" kindref="member">nrf_radio_int_enable</ref>(NRF_RADIO_Type<sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>mask);</highlight></codeline>
<codeline lineno="759"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="760"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="761"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>disabling<sp/>specified<sp/>RADIO<sp/>interrupts.</highlight></codeline>
<codeline lineno="762"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="763"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="764"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>mask<sp/><sp/>Mask<sp/>of<sp/>interrupts<sp/>to<sp/>be<sp/>disabled.</highlight></codeline>
<codeline lineno="765"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Use<sp/>@ref<sp/>nrf_radio_int_mask_t<sp/>values<sp/>for<sp/>bit<sp/>masking.</highlight></codeline>
<codeline lineno="766"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="767"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__radio__hal_1ga9405c7546f98d1a3a4408a8ef6677094" kindref="member">nrf_radio_int_disable</ref>(NRF_RADIO_Type<sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>mask);</highlight></codeline>
<codeline lineno="768"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="769"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="770"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>checking<sp/>if<sp/>the<sp/>specified<sp/>interrupts<sp/>are<sp/>enabled.</highlight></codeline>
<codeline lineno="771"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="772"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="773"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>mask<sp/><sp/>Mask<sp/>of<sp/>interrupts<sp/>to<sp/>be<sp/>checked.</highlight></codeline>
<codeline lineno="774"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Use<sp/>@ref<sp/>nrf_radio_int_mask_t<sp/>values<sp/>for<sp/>bit<sp/>masking.</highlight></codeline>
<codeline lineno="775"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="776"><highlight class="comment"><sp/>*<sp/>@return<sp/>Mask<sp/>of<sp/>enabled<sp/>interrupts.</highlight></codeline>
<codeline lineno="777"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="778"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__radio__hal_1gaae5190782f876f0d8b69c8298259f2c7" kindref="member">nrf_radio_int_enable_check</ref>(NRF_RADIO_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>mask);</highlight></codeline>
<codeline lineno="779"><highlight class="normal"></highlight></codeline>
<codeline lineno="780"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(DPPI_PRESENT)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="781"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="782"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>the<sp/>subscribe<sp/>configuration<sp/>for<sp/>a<sp/>given</highlight></codeline>
<codeline lineno="783"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RADIO<sp/>task.</highlight></codeline>
<codeline lineno="784"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="785"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="786"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>task<sp/><sp/><sp/><sp/>Task<sp/>for<sp/>which<sp/>to<sp/>set<sp/>the<sp/>configuration.</highlight></codeline>
<codeline lineno="787"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>channel<sp/>Channel<sp/>through<sp/>which<sp/>to<sp/>subscribe<sp/>events.</highlight></codeline>
<codeline lineno="788"><highlight class="comment"><sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="789"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__radio__hal_1gaed6f1018c5d7a16a910e2af53f35fc85" kindref="member">nrf_radio_subscribe_set</ref>(NRF_RADIO_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__radio__hal_1ga607fff2f027c323b3dc8af40ab489a2f" kindref="member">nrf_radio_task_t</ref><sp/>task,</highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>channel);</highlight></codeline>
<codeline lineno="792"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="793"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="794"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>clearing<sp/>the<sp/>subscribe<sp/>configuration<sp/>for<sp/>a<sp/>given</highlight></codeline>
<codeline lineno="795"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RADIO<sp/>task.</highlight></codeline>
<codeline lineno="796"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="797"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="798"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>task<sp/><sp/>Task<sp/>for<sp/>which<sp/>to<sp/>clear<sp/>the<sp/>configuration.</highlight></codeline>
<codeline lineno="799"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="800"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__radio__hal_1gae69ee57dd4175dfc9660cf994b8a8035" kindref="member">nrf_radio_subscribe_clear</ref>(NRF_RADIO_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__radio__hal_1ga607fff2f027c323b3dc8af40ab489a2f" kindref="member">nrf_radio_task_t</ref><sp/>task);</highlight></codeline>
<codeline lineno="802"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="803"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="804"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>the<sp/>publish<sp/>configuration<sp/>for<sp/>a<sp/>given</highlight></codeline>
<codeline lineno="805"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RADIO<sp/>event.</highlight></codeline>
<codeline lineno="806"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="807"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="808"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>event<sp/><sp/><sp/>Event<sp/>for<sp/>which<sp/>to<sp/>set<sp/>the<sp/>configuration.</highlight></codeline>
<codeline lineno="809"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>channel<sp/>Channel<sp/>through<sp/>which<sp/>to<sp/>publish<sp/>the<sp/>event.</highlight></codeline>
<codeline lineno="810"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="811"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__radio__hal_1ga2746b85fd6b490195aef6b8740e8e62b" kindref="member">nrf_radio_publish_set</ref>(NRF_RADIO_Type<sp/>*<sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__radio__hal_1ga7c4b15ec33a0704a9caa2fa0b36e98bb" kindref="member">nrf_radio_event_t</ref><sp/>event,</highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>channel);</highlight></codeline>
<codeline lineno="814"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="815"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="816"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>clearing<sp/>the<sp/>publish<sp/>configuration<sp/>for<sp/>a<sp/>given</highlight></codeline>
<codeline lineno="817"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RADIO<sp/>event.</highlight></codeline>
<codeline lineno="818"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="819"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="820"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>event<sp/>Event<sp/>for<sp/>which<sp/>to<sp/>clear<sp/>the<sp/>configuration.</highlight></codeline>
<codeline lineno="821"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="822"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__radio__hal_1gaf7652e300e57600c73bb2567f728aa1e" kindref="member">nrf_radio_publish_clear</ref>(NRF_RADIO_Type<sp/>*<sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__radio__hal_1ga7c4b15ec33a0704a9caa2fa0b36e98bb" kindref="member">nrf_radio_event_t</ref><sp/>event);</highlight></codeline>
<codeline lineno="824"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>defined(DPPI_PRESENT)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="825"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="826"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="827"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>CRC<sp/>status<sp/>of<sp/>last<sp/>received<sp/>packet.</highlight></codeline>
<codeline lineno="828"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="829"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="830"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="831"><highlight class="comment"><sp/>*<sp/>@retval<sp/>true<sp/><sp/>The<sp/>packet<sp/>was<sp/>received<sp/>without<sp/>CRC<sp/>error.</highlight></codeline>
<codeline lineno="832"><highlight class="comment"><sp/>*<sp/>@retval<sp/>false<sp/>The<sp/>packet<sp/>was<sp/>received<sp/>with<sp/>CRC<sp/>error.</highlight></codeline>
<codeline lineno="833"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="834"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrf__radio__hal_1gab3f2df22572330363d9dc90de1a1b30e" kindref="member">nrf_radio_crc_status_check</ref>(NRF_RADIO_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="835"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="836"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="837"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>the<sp/>received<sp/>address.</highlight></codeline>
<codeline lineno="838"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="839"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="840"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="841"><highlight class="comment"><sp/>*<sp/>@return<sp/>Received<sp/>address.</highlight></codeline>
<codeline lineno="842"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="843"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint8_t<sp/><ref refid="group__nrf__radio__hal_1gacc37a3877b0c545ce6552760354c7460" kindref="member">nrf_radio_rxmatch_get</ref>(NRF_RADIO_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="844"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="845"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="846"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>CRC<sp/>field<sp/>of<sp/>the<sp/>last<sp/>received<sp/>packet.</highlight></codeline>
<codeline lineno="847"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="848"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="849"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="850"><highlight class="comment"><sp/>*<sp/>@return<sp/>CRC<sp/>field<sp/>of<sp/>previously<sp/>received<sp/>packet.</highlight></codeline>
<codeline lineno="851"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="852"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__radio__hal_1ga17d4cc3f5e15481ac6265a832acf896e" kindref="member">nrf_radio_rxcrc_get</ref>(NRF_RADIO_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="853"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="854"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="855"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>the<sp/>device<sp/>address<sp/>match<sp/>index.</highlight></codeline>
<codeline lineno="856"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="857"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="858"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="859"><highlight class="comment"><sp/>*<sp/>@return<sp/>Device<sp/>adress<sp/>match<sp/>index.</highlight></codeline>
<codeline lineno="860"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="861"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint8_t<sp/><ref refid="group__nrf__radio__hal_1gadc7960a01d313bab770fdbc3cda783d2" kindref="member">nrf_radio_dai_get</ref>(NRF_RADIO_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="862"><highlight class="normal"></highlight></codeline>
<codeline lineno="863"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(RADIO_PDUSTAT_PDUSTAT_Msk)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="864"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="865"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>status<sp/>on<sp/>payload<sp/>length.</highlight></codeline>
<codeline lineno="866"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="867"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="868"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="869"><highlight class="comment"><sp/>*<sp/>@retval<sp/>0<sp/>The<sp/>payload<sp/>is<sp/>lesser<sp/>than<sp/>PCNF1.MAXLEN.</highlight></codeline>
<codeline lineno="870"><highlight class="comment"><sp/>*<sp/>@retval<sp/>1<sp/>The<sp/>payload<sp/>is<sp/>greater<sp/>than<sp/>PCNF1.MAXLEN.</highlight></codeline>
<codeline lineno="871"><highlight class="comment"><sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="872"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint8_t<sp/><ref refid="group__nrf__radio__hal_1gaa0025b27a99d784ff85ccbfe2ee58f97" kindref="member">nrf_radio_pdustat_get</ref>(NRF_RADIO_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="873"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>defined(RADIO_PDUSTAT_PDUSTAT_Msk)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="874"><highlight class="normal"></highlight></codeline>
<codeline lineno="875"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(RADIO_PDUSTAT_CISTAT_Msk)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="876"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="877"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>status<sp/>on<sp/>what<sp/>rate<sp/>packet<sp/>is<sp/>received<sp/>with<sp/>in<sp/>Long<sp/>Range.</highlight></codeline>
<codeline lineno="878"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="879"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="880"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="881"><highlight class="comment"><sp/>*<sp/>@retval<sp/>0<sp/>The<sp/>frame<sp/>is<sp/>received<sp/>at<sp/>125kbps.</highlight></codeline>
<codeline lineno="882"><highlight class="comment"><sp/>*<sp/>@retval<sp/>1<sp/>The<sp/>frame<sp/>is<sp/>received<sp/>at<sp/>500kbps.</highlight></codeline>
<codeline lineno="883"><highlight class="comment"><sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="884"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint8_t<sp/><ref refid="group__nrf__radio__hal_1ga2b8c779d8e91304b2f184688fa4eada4" kindref="member">nrf_radio_cistat_get</ref>(NRF_RADIO_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="885"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>defined(RADIO_PDUSTAT_CISTAT_Msk)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="886"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="887"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="888"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>packet<sp/>pointer<sp/>to<sp/>given<sp/>location<sp/>in<sp/>memory.</highlight></codeline>
<codeline lineno="889"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="890"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="891"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_packet<sp/>Packet<sp/>pointer.</highlight></codeline>
<codeline lineno="892"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="893"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__radio__hal_1ga19e2b6c37fd522fc4cc526f58efc03c8" kindref="member">nrf_radio_packetptr_set</ref>(NRF_RADIO_Type<sp/>*<sp/>p_reg,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_packet);</highlight></codeline>
<codeline lineno="894"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="895"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="896"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>packet<sp/>pointer.</highlight></codeline>
<codeline lineno="897"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="898"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="899"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="900"><highlight class="comment"><sp/>*<sp/>@return<sp/>Pointer<sp/>to<sp/>tx<sp/>or<sp/>rx<sp/>packet<sp/>buffer.</highlight></codeline>
<codeline lineno="901"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="902"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/><ref refid="group__nrf__radio__hal_1gae2007ebe98fa8315ec15e47feba3bc2f" kindref="member">nrf_radio_packetptr_get</ref>(NRF_RADIO_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="903"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="904"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="905"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>the<sp/>radio<sp/>frequency.</highlight></codeline>
<codeline lineno="906"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="907"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="908"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>radio_frequency<sp/>Frequency<sp/>in<sp/>MHz.</highlight></codeline>
<codeline lineno="909"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="910"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__radio__hal_1ga5336279c1fd3e4ef5f6a28c2705eee13" kindref="member">nrf_radio_frequency_set</ref>(NRF_RADIO_Type<sp/>*<sp/>p_reg,<sp/>uint16_t<sp/>radio_frequency);</highlight></codeline>
<codeline lineno="911"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="912"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="913"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>the<sp/>radio<sp/>frequency.</highlight></codeline>
<codeline lineno="914"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="915"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="916"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="917"><highlight class="comment"><sp/>*<sp/>@return<sp/>Frequency<sp/>in<sp/>MHz.</highlight></codeline>
<codeline lineno="918"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="919"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint16_t<sp/><ref refid="group__nrf__radio__hal_1gae4f554230e5f845c82ac12db3615df64" kindref="member">nrf_radio_frequency_get</ref>(NRF_RADIO_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="920"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="921"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="922"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>the<sp/>radio<sp/>transmit<sp/>power.</highlight></codeline>
<codeline lineno="923"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="924"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="925"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>tx_power<sp/>Transmit<sp/>power<sp/>of<sp/>the<sp/>radio<sp/>[dBm].</highlight></codeline>
<codeline lineno="926"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="927"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__radio__hal_1gaa4a51c240d14e2135455dfb9f8d836ba" kindref="member">nrf_radio_txpower_set</ref>(NRF_RADIO_Type<sp/>*<sp/>p_reg,<sp/><ref refid="group__nrf__radio__hal_1gaf10bff1d03d8156b3af56540701d6b3d" kindref="member">nrf_radio_txpower_t</ref><sp/>tx_power);</highlight></codeline>
<codeline lineno="928"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="929"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="930"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>the<sp/>radio<sp/>transmit<sp/>power.</highlight></codeline>
<codeline lineno="931"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="932"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="933"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="934"><highlight class="comment"><sp/>*<sp/>@return<sp/>Transmit<sp/>power<sp/>of<sp/>the<sp/>radio.</highlight></codeline>
<codeline lineno="935"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="936"><highlight class="normal">NRF_STATIC_INLINE<sp/><ref refid="group__nrf__radio__hal_1gaf10bff1d03d8156b3af56540701d6b3d" kindref="member">nrf_radio_txpower_t</ref><sp/><ref refid="group__nrf__radio__hal_1ga4e474b7e5f776a61f799fe847536f3d1" kindref="member">nrf_radio_txpower_get</ref>(NRF_RADIO_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="937"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="938"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="939"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>the<sp/>radio<sp/>data<sp/>rate<sp/>and<sp/>modulation<sp/>settings.</highlight></codeline>
<codeline lineno="940"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="941"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/><sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="942"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>radio_mode<sp/>Radio<sp/>data<sp/>rate<sp/>and<sp/>modulation.</highlight></codeline>
<codeline lineno="943"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="944"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__radio__hal_1gafc8fff377c15ae2c926bf1daaf9913a5" kindref="member">nrf_radio_mode_set</ref>(NRF_RADIO_Type<sp/>*<sp/>p_reg,<sp/><ref refid="group__nrf__radio__hal_1gacf631e29d43c93acac290a18850e9c40" kindref="member">nrf_radio_mode_t</ref><sp/>radio_mode);</highlight></codeline>
<codeline lineno="945"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="946"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="947"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>Radio<sp/>data<sp/>rate<sp/>and<sp/>modulation<sp/>settings.</highlight></codeline>
<codeline lineno="948"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="949"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="950"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="951"><highlight class="comment"><sp/>*<sp/>@return<sp/>Radio<sp/>data<sp/>rate<sp/>and<sp/>modulation.</highlight></codeline>
<codeline lineno="952"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="953"><highlight class="normal">NRF_STATIC_INLINE<sp/><ref refid="group__nrf__radio__hal_1gacf631e29d43c93acac290a18850e9c40" kindref="member">nrf_radio_mode_t</ref><sp/><ref refid="group__nrf__radio__hal_1gaac5ea7fe15b9208f86fe7a5ecce15229" kindref="member">nrf_radio_mode_get</ref>(NRF_RADIO_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="954"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="955"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="956"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>the<sp/>packet<sp/>configuration.</highlight></codeline>
<codeline lineno="957"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="958"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="959"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_config<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>with<sp/>packet<sp/>configuration.</highlight></codeline>
<codeline lineno="960"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="961"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__radio__hal_1ga3ecb0f981f451b970810b457c70abcce" kindref="member">nrf_radio_packet_configure</ref>(NRF_RADIO_Type<sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="962"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structnrf__radio__packet__conf__t" kindref="compound">nrf_radio_packet_conf_t</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_config);</highlight></codeline>
<codeline lineno="963"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="964"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="965"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>the<sp/>base<sp/>address<sp/>0.</highlight></codeline>
<codeline lineno="966"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="967"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="968"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>address<sp/>Base<sp/>address<sp/>0<sp/>value.</highlight></codeline>
<codeline lineno="969"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="970"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__radio__hal_1gaebf659968f4b463db0b36350ee1fd194" kindref="member">nrf_radio_base0_set</ref>(NRF_RADIO_Type<sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>address);</highlight></codeline>
<codeline lineno="971"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="972"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="973"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>the<sp/>base<sp/>address<sp/>0.</highlight></codeline>
<codeline lineno="974"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="975"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="976"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="977"><highlight class="comment"><sp/>*<sp/>@return<sp/>Base<sp/>address<sp/>0.</highlight></codeline>
<codeline lineno="978"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="979"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__radio__hal_1ga93bf51bdcbd9fd0cb9af6c90e6127e50" kindref="member">nrf_radio_base0_get</ref>(NRF_RADIO_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="980"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="981"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="982"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>Base<sp/>address<sp/>1.</highlight></codeline>
<codeline lineno="983"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="984"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="985"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>address<sp/>Base<sp/>address<sp/>1<sp/>value.</highlight></codeline>
<codeline lineno="986"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="987"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__radio__hal_1ga3485758d1cd9c6645ccbc0b601e7bd13" kindref="member">nrf_radio_base1_set</ref>(NRF_RADIO_Type<sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>address);</highlight></codeline>
<codeline lineno="988"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="989"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="990"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>base<sp/>address<sp/>1.</highlight></codeline>
<codeline lineno="991"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="992"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="993"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="994"><highlight class="comment"><sp/>*<sp/>@return<sp/>Base<sp/>address<sp/>1.</highlight></codeline>
<codeline lineno="995"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="996"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__radio__hal_1gad3ce36538b713e9d6186af3d0ae0b29d" kindref="member">nrf_radio_base1_get</ref>(NRF_RADIO_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="997"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="998"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="999"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>prefixes<sp/>bytes<sp/>for<sp/>logical<sp/>addresses<sp/>0-3.</highlight></codeline>
<codeline lineno="1000"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1001"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="1002"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>prefixes<sp/>Prefixes<sp/>bytes<sp/>for<sp/>logical<sp/>addresses<sp/>0-3.</highlight></codeline>
<codeline lineno="1003"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1004"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__radio__hal_1ga9c75649dbb9e5b374f662dfb0787e445" kindref="member">nrf_radio_prefix0_set</ref>(NRF_RADIO_Type<sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>prefixes);</highlight></codeline>
<codeline lineno="1005"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1006"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="1007"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>prefixes<sp/>bytes<sp/>for<sp/>logical<sp/>addresses<sp/>0-3</highlight></codeline>
<codeline lineno="1008"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1009"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="1010"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1011"><highlight class="comment"><sp/>*<sp/>@return<sp/>Prefixes<sp/>bytes<sp/>for<sp/>logical<sp/>addresses<sp/>0-3</highlight></codeline>
<codeline lineno="1012"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1013"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__radio__hal_1ga2bba67daa09782376a4fb4b0432a0fed" kindref="member">nrf_radio_prefix0_get</ref>(NRF_RADIO_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="1014"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1015"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="1016"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>prefixes<sp/>bytes<sp/>for<sp/>logical<sp/>addresses<sp/>4-7.</highlight></codeline>
<codeline lineno="1017"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1018"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="1019"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>prefixes<sp/>Prefixes<sp/>bytes<sp/>for<sp/>logical<sp/>addresses<sp/>4-7.</highlight></codeline>
<codeline lineno="1020"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1021"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__radio__hal_1ga71c5eae49d69976121d9ea00904023d3" kindref="member">nrf_radio_prefix1_set</ref>(NRF_RADIO_Type<sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>prefixes);</highlight></codeline>
<codeline lineno="1022"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1023"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="1024"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>prefixes<sp/>bytes<sp/>for<sp/>logical<sp/>addresses<sp/>4-7</highlight></codeline>
<codeline lineno="1025"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1026"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="1027"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1028"><highlight class="comment"><sp/>*<sp/>@return<sp/>Prefixes<sp/>bytes<sp/>for<sp/>logical<sp/>addresses<sp/>4-7</highlight></codeline>
<codeline lineno="1029"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1030"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__radio__hal_1ga7ee51cb90e0c8f933f44998c997f447a" kindref="member">nrf_radio_prefix1_get</ref>(NRF_RADIO_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="1031"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1032"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="1033"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>the<sp/>transmit<sp/>address.</highlight></codeline>
<codeline lineno="1034"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1035"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="1036"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>txaddress<sp/>Logical<sp/>address<sp/>to<sp/>be<sp/>used<sp/>when<sp/>transmitting<sp/>a<sp/>packet.</highlight></codeline>
<codeline lineno="1037"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1038"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__radio__hal_1gae88f74d8e994e7075f26be55845c832f" kindref="member">nrf_radio_txaddress_set</ref>(NRF_RADIO_Type<sp/>*<sp/>p_reg,<sp/>uint8_t<sp/>txaddress);</highlight></codeline>
<codeline lineno="1039"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1040"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="1041"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>the<sp/>transmit<sp/>address<sp/>select.</highlight></codeline>
<codeline lineno="1042"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1043"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="1044"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1045"><highlight class="comment"><sp/>*<sp/>@return<sp/>Logical<sp/>address<sp/>to<sp/>be<sp/>used<sp/>when<sp/>transmitting<sp/>a<sp/>packet.</highlight></codeline>
<codeline lineno="1046"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1047"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint8_t<sp/><ref refid="group__nrf__radio__hal_1ga6991cd5904a1d3ca463285cc99cf6cdd" kindref="member">nrf_radio_txaddress_get</ref>(NRF_RADIO_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="1048"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1049"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="1050"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>for<sp/>selecting<sp/>the<sp/>receive<sp/>addresses.</highlight></codeline>
<codeline lineno="1051"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1052"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/><sp/><sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="1053"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>rxaddresses<sp/>Enable<sp/>or<sp/>disable<sp/>reception<sp/>on<sp/>logical<sp/>address<sp/>i.</highlight></codeline>
<codeline lineno="1054"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Read<sp/>more<sp/>in<sp/>the<sp/>Product<sp/>Specification.</highlight></codeline>
<codeline lineno="1055"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1056"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__radio__hal_1gad397ff61bf37da3082f5e80820da4826" kindref="member">nrf_radio_rxaddresses_set</ref>(NRF_RADIO_Type<sp/>*<sp/>p_reg,<sp/>uint8_t<sp/>rxaddresses);</highlight></codeline>
<codeline lineno="1057"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1058"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="1059"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>receive<sp/>address<sp/>select.</highlight></codeline>
<codeline lineno="1060"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1061"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="1062"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1063"><highlight class="comment"><sp/>*<sp/>@return<sp/>Receive<sp/>address<sp/>select.</highlight></codeline>
<codeline lineno="1064"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1065"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint8_t<sp/><ref refid="group__nrf__radio__hal_1ga40aab0d76bc5761fc2f7922059b873d0" kindref="member">nrf_radio_rxaddresses_get</ref>(NRF_RADIO_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="1066"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1067"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="1068"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>configure<sp/>CRC.</highlight></codeline>
<codeline lineno="1069"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1070"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="1071"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>crc_length<sp/><sp/><sp/><sp/><sp/><sp/>CRC<sp/>length<sp/>in<sp/>number<sp/>of<sp/>bytes<sp/>[0-3].</highlight></codeline>
<codeline lineno="1072"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>crc_address<sp/><sp/><sp/><sp/><sp/>Include<sp/>or<sp/>exclude<sp/>packet<sp/>address<sp/>field<sp/>out<sp/>of<sp/>CRC.</highlight></codeline>
<codeline lineno="1073"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>crc_polynominal<sp/>CRC<sp/>polynominal<sp/>to<sp/>set.</highlight></codeline>
<codeline lineno="1074"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1075"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__radio__hal_1ga4ca667b05c3dea42b646b8c57009e868" kindref="member">nrf_radio_crc_configure</ref>(NRF_RADIO_Type<sp/>*<sp/><sp/><sp/><sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="1076"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>crc_length,</highlight></codeline>
<codeline lineno="1077"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__radio__hal_1ga9e800ae5bddb82989b601ec2407ea229" kindref="member">nrf_radio_crc_addr_t</ref><sp/>crc_address,</highlight></codeline>
<codeline lineno="1078"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>crc_polynominal);</highlight></codeline>
<codeline lineno="1079"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1080"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="1081"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>CRC<sp/>initial<sp/>value.</highlight></codeline>
<codeline lineno="1082"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1083"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="1084"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>crc_init_value<sp/>CRC<sp/>initial<sp/>value</highlight></codeline>
<codeline lineno="1085"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1086"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__radio__hal_1ga65c98c3220300b11c3d00fd03764d1e5" kindref="member">nrf_radio_crcinit_set</ref>(NRF_RADIO_Type<sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>crc_init_value);</highlight></codeline>
<codeline lineno="1087"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1088"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="1089"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>CRC<sp/>initial<sp/>value.</highlight></codeline>
<codeline lineno="1090"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1091"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="1092"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1093"><highlight class="comment"><sp/>*<sp/>@return<sp/>CRC<sp/>initial<sp/>value.</highlight></codeline>
<codeline lineno="1094"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1095"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__radio__hal_1gadeed410584b6e4cfa4336c81260ad207" kindref="member">nrf_radio_crcinit_get</ref>(NRF_RADIO_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="1096"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1097"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="1098"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>Inter<sp/>Frame<sp/>Spacing<sp/>interval.</highlight></codeline>
<codeline lineno="1099"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1100"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="1101"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>radio_ifs<sp/>Inter<sp/>frame<sp/>spacing<sp/>interval<sp/>[us].</highlight></codeline>
<codeline lineno="1102"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1103"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__radio__hal_1ga8c63884b8ce414fcdf14a1232b9f1886" kindref="member">nrf_radio_ifs_set</ref>(NRF_RADIO_Type<sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>radio_ifs);</highlight></codeline>
<codeline lineno="1104"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1105"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="1106"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>Inter<sp/>Frame<sp/>Spacing<sp/>interval.</highlight></codeline>
<codeline lineno="1107"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1108"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="1109"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1110"><highlight class="comment"><sp/>*<sp/>@return<sp/>Inter<sp/>frame<sp/>spacing<sp/>interval<sp/>[us].</highlight></codeline>
<codeline lineno="1111"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1112"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__radio__hal_1ga4ccdcb4a2ed6074e48e33fa973b5d4ca" kindref="member">nrf_radio_ifs_get</ref>(NRF_RADIO_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="1113"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1114"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="1115"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>RSSI<sp/>sample<sp/>result.</highlight></codeline>
<codeline lineno="1116"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1117"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="1118"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1119"><highlight class="comment"><sp/>*<sp/>@note<sp/>The<sp/>read<sp/>value<sp/>is<sp/>a<sp/>positive<sp/>value<sp/>while<sp/>the<sp/>actual<sp/>received<sp/>signal</highlight></codeline>
<codeline lineno="1120"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>is<sp/>a<sp/>negative<sp/>value.<sp/>Actual<sp/>received<sp/>signal<sp/>strength<sp/>is<sp/>therefore<sp/>as<sp/>follows:</highlight></codeline>
<codeline lineno="1121"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>received<sp/>signal<sp/>strength<sp/>=<sp/>-<sp/>read_value<sp/>dBm<sp/>.</highlight></codeline>
<codeline lineno="1122"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1123"><highlight class="comment"><sp/>*<sp/>@return<sp/>RSSI<sp/>sample<sp/>result.</highlight></codeline>
<codeline lineno="1124"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1125"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint8_t<sp/><ref refid="group__nrf__radio__hal_1gafd04597ddc9b24925cccff5d53a40059" kindref="member">nrf_radio_rssi_sample_get</ref>(NRF_RADIO_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="1126"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1127"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="1128"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>the<sp/>current<sp/>state<sp/>of<sp/>the<sp/>radio<sp/>module.</highlight></codeline>
<codeline lineno="1129"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1130"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="1131"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1132"><highlight class="comment"><sp/>*<sp/>@return<sp/>Current<sp/>radio<sp/>state.</highlight></codeline>
<codeline lineno="1133"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1134"><highlight class="normal">NRF_STATIC_INLINE<sp/><ref refid="group__nrf__radio__hal_1ga4ea9b1af13c23dc9316d60ca649b71dc" kindref="member">nrf_radio_state_t</ref><sp/><ref refid="group__nrf__radio__hal_1gacfe496cdb278f3616df3e8aa187e8f28" kindref="member">nrf_radio_state_get</ref>(NRF_RADIO_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="1135"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1136"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="1137"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>the<sp/>data<sp/>whitening<sp/>initial<sp/>value.</highlight></codeline>
<codeline lineno="1138"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1139"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/><sp/><sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="1140"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>datawhiteiv<sp/>Data<sp/>whitening<sp/>initial<sp/>value.</highlight></codeline>
<codeline lineno="1141"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1142"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__radio__hal_1ga638aefc787fd5638fb94119e368f71ae" kindref="member">nrf_radio_datawhiteiv_set</ref>(NRF_RADIO_Type<sp/>*<sp/>p_reg,<sp/>uint8_t<sp/>datawhiteiv);</highlight></codeline>
<codeline lineno="1143"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1144"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="1145"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>the<sp/>data<sp/>whitening<sp/>initial<sp/>value.</highlight></codeline>
<codeline lineno="1146"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1147"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="1148"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1149"><highlight class="comment"><sp/>*<sp/>@return<sp/>Data<sp/>whitening<sp/>initial<sp/>value.</highlight></codeline>
<codeline lineno="1150"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1151"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint8_t<sp/><ref refid="group__nrf__radio__hal_1ga0aabddcd53ebbebe965f6ad38ab292bc" kindref="member">nrf_radio_datawhiteiv_get</ref>(NRF_RADIO_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="1152"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1153"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="1154"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>Bit<sp/>counter<sp/>compare.</highlight></codeline>
<codeline lineno="1155"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1156"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="1157"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>radio_bcc<sp/>Bit<sp/>counter<sp/>compare<sp/>[bits].</highlight></codeline>
<codeline lineno="1158"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1159"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__radio__hal_1ga54628c088d83bea509646485b829682d" kindref="member">nrf_radio_bcc_set</ref>(NRF_RADIO_Type<sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>radio_bcc);</highlight></codeline>
<codeline lineno="1160"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1161"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="1162"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>Bit<sp/>counter<sp/>compare.</highlight></codeline>
<codeline lineno="1163"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1164"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="1165"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1166"><highlight class="comment"><sp/>*<sp/>@return<sp/>Bit<sp/>counter<sp/>compare.</highlight></codeline>
<codeline lineno="1167"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1168"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__radio__hal_1gabde34a675642ac812c9a94d8cd7b8c69" kindref="member">nrf_radio_bcc_get</ref>(NRF_RADIO_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="1169"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1170"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="1171"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>Device<sp/>address<sp/>base<sp/>segment.</highlight></codeline>
<codeline lineno="1172"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1173"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="1174"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>dab_value<sp/>Particular<sp/>base<sp/>segment<sp/>value.</highlight></codeline>
<codeline lineno="1175"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>segment<sp/><sp/><sp/>Index<sp/>of<sp/>the<sp/>particular<sp/>Device<sp/>address<sp/>base<sp/>segment<sp/>register.</highlight></codeline>
<codeline lineno="1176"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1177"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__radio__hal_1ga4d7da491132adbd997aa6cf6f96ae61a" kindref="member">nrf_radio_dab_set</ref>(NRF_RADIO_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="1178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dab_value,</highlight></codeline>
<codeline lineno="1179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>segment);</highlight></codeline>
<codeline lineno="1180"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1181"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="1182"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>Device<sp/>address<sp/>base<sp/>segment.</highlight></codeline>
<codeline lineno="1183"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1184"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="1185"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>segment<sp/>Number<sp/>of<sp/>the<sp/>Device<sp/>address<sp/>base<sp/>segment.</highlight></codeline>
<codeline lineno="1186"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1187"><highlight class="comment"><sp/>*<sp/>@return<sp/>Particular<sp/>segment<sp/>of<sp/>the<sp/>Device<sp/>address<sp/>base.</highlight></codeline>
<codeline lineno="1188"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1189"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__radio__hal_1gac0d3c65514eab7218eb4d44a5b3e5b1d" kindref="member">nrf_radio_dab_get</ref>(NRF_RADIO_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,<sp/>uint8_t<sp/>segment);</highlight></codeline>
<codeline lineno="1190"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1191"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="1192"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>device<sp/>address<sp/>prefix.</highlight></codeline>
<codeline lineno="1193"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1194"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="1195"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>dap_value<sp/><sp/><sp/><sp/>Particular<sp/>device<sp/>address<sp/>prefix<sp/>value.</highlight></codeline>
<codeline lineno="1196"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>prefix_index<sp/>Index<sp/>of<sp/>the<sp/>particular<sp/>device<sp/>address<sp/>prefix<sp/>register.</highlight></codeline>
<codeline lineno="1197"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1198"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__radio__hal_1ga9517e6bc36dabadec2a92e069503e2fa" kindref="member">nrf_radio_dap_set</ref>(NRF_RADIO_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="1199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint16_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dap_value,</highlight></codeline>
<codeline lineno="1200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prefix_index);</highlight></codeline>
<codeline lineno="1201"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1202"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="1203"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>Device<sp/>address<sp/>prefix.</highlight></codeline>
<codeline lineno="1204"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1205"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="1206"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>prefix_index<sp/>Number<sp/>of<sp/>the<sp/>Device<sp/>address<sp/>prefix<sp/>segment.</highlight></codeline>
<codeline lineno="1207"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1208"><highlight class="comment"><sp/>*<sp/>@return<sp/>Particular<sp/>segment<sp/>of<sp/>the<sp/>Device<sp/>address<sp/>prefix.</highlight></codeline>
<codeline lineno="1209"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1210"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__radio__hal_1gac4aeecef4b8bf243b041d95a1a707b75" kindref="member">nrf_radio_dap_get</ref>(NRF_RADIO_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,<sp/>uint8_t<sp/>prefix_index);</highlight></codeline>
<codeline lineno="1211"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1212"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="1213"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>device<sp/>address<sp/>match<sp/>configuration.</highlight></codeline>
<codeline lineno="1214"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1215"><highlight class="comment"><sp/>*<sp/>@note<sp/>Read<sp/>more<sp/>about<sp/>configuring<sp/>device<sp/>address<sp/>match<sp/>in<sp/>the<sp/>Product<sp/>Specification.</highlight></codeline>
<codeline lineno="1216"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1217"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="1218"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>ena<sp/><sp/><sp/>Device<sp/>address<sp/>matching<sp/>bitmask.</highlight></codeline>
<codeline lineno="1219"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>txadd<sp/>TxAdd<sp/>bitmask.</highlight></codeline>
<codeline lineno="1220"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1221"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__radio__hal_1ga5111f4c5b1f8e556bd074212207b73fa" kindref="member">nrf_radio_dacnf_set</ref>(NRF_RADIO_Type<sp/>*<sp/>p_reg,<sp/>uint8_t<sp/>ena,<sp/>uint8_t<sp/>txadd);</highlight></codeline>
<codeline lineno="1222"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1223"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="1224"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>ENA<sp/>field<sp/>of<sp/>the<sp/>Device<sp/>address<sp/>match<sp/>configuration<sp/>register.</highlight></codeline>
<codeline lineno="1225"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1226"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="1227"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1228"><highlight class="comment"><sp/>*<sp/>@return<sp/>ENA<sp/>field<sp/>of<sp/>the<sp/>Device<sp/>address<sp/>match<sp/>configuration<sp/>register.</highlight></codeline>
<codeline lineno="1229"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1230"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint8_t<sp/><ref refid="group__nrf__radio__hal_1ga3fc6cb32144b31cd6cb23317031baa14" kindref="member">nrf_radio_dacnf_ena_get</ref>(NRF_RADIO_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="1231"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1232"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="1233"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>TXADD<sp/>field<sp/>of<sp/>the<sp/>Device<sp/>address<sp/>match<sp/>configuration<sp/>register.</highlight></codeline>
<codeline lineno="1234"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1235"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="1236"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1237"><highlight class="comment"><sp/>*<sp/>@return<sp/>TXADD<sp/>field<sp/>of<sp/>the<sp/>Device<sp/>address<sp/>match<sp/>configuration<sp/>register.</highlight></codeline>
<codeline lineno="1238"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1239"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint8_t<sp/><ref refid="group__nrf__radio__hal_1ga97152ce4b608445f2b011b6268efdf9a" kindref="member">nrf_radio_dacnf_txadd_get</ref>(NRF_RADIO_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="1240"><highlight class="normal"></highlight></codeline>
<codeline lineno="1241"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(RADIO_INTENSET_MHRMATCH_Msk)<sp/>||<sp/>defined(RADIO_INTENSET00_MHRMATCH_Msk)<sp/>||<sp/>\</highlight></codeline>
<codeline lineno="1242"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1243"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="1244"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>MAC<sp/>Header<sp/>Match<sp/>Unit<sp/>search<sp/>pattern<sp/>configuration.</highlight></codeline>
<codeline lineno="1245"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1246"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="1247"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>radio_mhmu_search_pattern<sp/>Search<sp/>Pattern<sp/>Configuration.</highlight></codeline>
<codeline lineno="1248"><highlight class="comment"><sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1249"><highlight class="normal">NRF_STATIC_INLINE</highlight></codeline>
<codeline lineno="1250"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__radio__hal_1gafe19206475193a6ae885d35aa717621d" kindref="member">nrf_radio_mhmu_search_pattern_set</ref>(NRF_RADIO_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="1251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>radio_mhmu_search_pattern);</highlight></codeline>
<codeline lineno="1252"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1253"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="1254"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>MAC<sp/>Header<sp/>Match<sp/>Unit<sp/>search<sp/>pattern<sp/>configuration.</highlight></codeline>
<codeline lineno="1255"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1256"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="1257"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1258"><highlight class="comment"><sp/>*<sp/>@return<sp/>Search<sp/>Pattern<sp/>Configuration.</highlight></codeline>
<codeline lineno="1259"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1260"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__radio__hal_1ga6c661a8c9632e1c65a54d90c2db249db" kindref="member">nrf_radio_mhmu_search_pattern_get</ref>(NRF_RADIO_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="1261"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1262"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="1263"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>MAC<sp/>Header<sp/>Match<sp/>Unit<sp/>pattern<sp/>mask<sp/>configuration.</highlight></codeline>
<codeline lineno="1264"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1265"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="1266"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>radio_mhmu_pattern_mask<sp/>Pattern<sp/>mask.</highlight></codeline>
<codeline lineno="1267"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1268"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__radio__hal_1ga9a0edc87214f5b7df9bbb5b51c23e642" kindref="member">nrf_radio_mhmu_pattern_mask_set</ref>(NRF_RADIO_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="1269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>radio_mhmu_pattern_mask);</highlight></codeline>
<codeline lineno="1270"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1271"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="1272"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>MAC<sp/>Header<sp/>Match<sp/>Unit<sp/>pattern<sp/>mask<sp/>configuration.</highlight></codeline>
<codeline lineno="1273"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1274"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="1275"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1276"><highlight class="comment"><sp/>*<sp/>@return<sp/>Pattern<sp/>mask.</highlight></codeline>
<codeline lineno="1277"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1278"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__radio__hal_1gaa41d70217e353ef904b325a74048b9ba" kindref="member">nrf_radio_mhmu_pattern_mask_get</ref>(NRF_RADIO_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="1279"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>defined(RADIO_INTENSET_MHRMATCH_Msk)<sp/>||<sp/>defined(RADIO_INTENSET00_MHRMATCH_Msk)<sp/>||</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1281"><highlight class="normal"></highlight></codeline>
<codeline lineno="1282"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(RADIO_MODECNF0_RU_Msk)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1283"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="1284"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>Radio<sp/>mode<sp/>configuration<sp/>register<sp/>0.</highlight></codeline>
<codeline lineno="1285"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1286"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="1287"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>fast_ramp_up<sp/>Use<sp/>fast<sp/>radio<sp/>ramp-up<sp/>time</highlight></codeline>
<codeline lineno="1288"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>default_tx<sp/><sp/><sp/>Default<sp/>TX<sp/>value<sp/>during<sp/>inactivity.</highlight></codeline>
<codeline lineno="1289"><highlight class="comment"><sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1290"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__radio__hal_1ga3012c9c314425548a834f0d420fff667" kindref="member">nrf_radio_modecnf0_set</ref>(NRF_RADIO_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="1291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fast_ramp_up,</highlight></codeline>
<codeline lineno="1292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>default_tx);</highlight></codeline>
<codeline lineno="1293"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1294"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="1295"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>ramp-up<sp/>time<sp/>configuration<sp/>of<sp/>the<sp/>Radio<sp/>mode<sp/>configuration<sp/>register<sp/>0.</highlight></codeline>
<codeline lineno="1296"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1297"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="1298"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1299"><highlight class="comment"><sp/>*<sp/>@retval<sp/>true<sp/><sp/>If<sp/>the<sp/>ramp-up<sp/>time<sp/>is<sp/>set<sp/>to<sp/>fast.</highlight></codeline>
<codeline lineno="1300"><highlight class="comment"><sp/>*<sp/>@retval<sp/>false<sp/>If<sp/>the<sp/>ramp-up<sp/>time<sp/>is<sp/>set<sp/>to<sp/>default.</highlight></codeline>
<codeline lineno="1301"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1302"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrf__radio__hal_1gac1b7d1e3365a889f4e5eec2301f44b23" kindref="member">nrf_radio_modecnf0_ru_get</ref>(NRF_RADIO_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="1303"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1304"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="1305"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>default<sp/>TX<sp/>value<sp/>of<sp/>the<sp/>Radio<sp/>mode<sp/>configuration<sp/>register<sp/>0.</highlight></codeline>
<codeline lineno="1306"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1307"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="1308"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1309"><highlight class="comment"><sp/>*<sp/>@return<sp/>Default<sp/>TX<sp/>value.</highlight></codeline>
<codeline lineno="1310"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1311"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint8_t<sp/><ref refid="group__nrf__radio__hal_1gad111d826a2e9d30e9e72b10410ada319" kindref="member">nrf_radio_modecnf0_dtx_get</ref>(NRF_RADIO_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="1312"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>defined(RADIO_MODECNF0_RU_Msk)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1313"><highlight class="normal"></highlight></codeline>
<codeline lineno="1314"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(RADIO_MODECNF0_RU_Msk)<sp/>||<sp/>defined(RADIO_TIMING_RU_Msk)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1315"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="1316"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>enabling<sp/>or<sp/>disabling<sp/>fast<sp/>ramp-up<sp/>setting.</highlight></codeline>
<codeline lineno="1317"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1318"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="1319"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>enable<sp/>True<sp/>if<sp/>fast<sp/>ramp-up<sp/>is<sp/>to<sp/>be<sp/>enabled,<sp/>false<sp/>otherwise.</highlight></codeline>
<codeline lineno="1320"><highlight class="comment"><sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1321"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__radio__hal_1gac3f588610775bd5e7ac12a63ef6690c6" kindref="member">nrf_radio_fast_ramp_up_enable_set</ref>(NRF_RADIO_Type<sp/>*<sp/>p_reg,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>enable);</highlight></codeline>
<codeline lineno="1322"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1323"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="1324"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>checking<sp/>fast<sp/>ramp-up<sp/>time<sp/>configuration.</highlight></codeline>
<codeline lineno="1325"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1326"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="1327"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1328"><highlight class="comment"><sp/>*<sp/>@return<sp/>true<sp/><sp/>If<sp/>the<sp/>ramp-up<sp/>time<sp/>is<sp/>set<sp/>to<sp/>fast.</highlight></codeline>
<codeline lineno="1329"><highlight class="comment"><sp/>*<sp/>@return<sp/>false<sp/>If<sp/>the<sp/>ramp-up<sp/>time<sp/>is<sp/>set<sp/>to<sp/>default<sp/>compatible<sp/>with<sp/>180nm<sp/>radio.</highlight></codeline>
<codeline lineno="1330"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1331"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrf__radio__hal_1gad270e10d0413260e0ec3cc6c99ac1d5c" kindref="member">nrf_radio_fast_ramp_up_check</ref>(NRF_RADIO_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="1332"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1333"><highlight class="normal"></highlight></codeline>
<codeline lineno="1334"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(RADIO_SFD_SFD_Msk)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1335"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="1336"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>IEEE<sp/>802.15.4<sp/>start<sp/>of<sp/>frame<sp/>delimiter.</highlight></codeline>
<codeline lineno="1337"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1338"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="1339"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>sfd<sp/><sp/><sp/>IEEE<sp/>802.15.4<sp/>start<sp/>of<sp/>frame<sp/>delimiter.</highlight></codeline>
<codeline lineno="1340"><highlight class="comment"><sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1341"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__radio__hal_1gabe40e1e0f7ef1d6d0a3266875dc9a426" kindref="member">nrf_radio_sfd_set</ref>(NRF_RADIO_Type<sp/>*<sp/>p_reg,<sp/>uint8_t<sp/>sfd);</highlight></codeline>
<codeline lineno="1342"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1343"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="1344"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>IEEE<sp/>802.15.4<sp/>start<sp/>of<sp/>frame<sp/>delimiter.</highlight></codeline>
<codeline lineno="1345"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1346"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="1347"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1348"><highlight class="comment"><sp/>*<sp/>@return<sp/>IEEE<sp/>802.15.4<sp/>start<sp/>of<sp/>frame<sp/>delimiter.</highlight></codeline>
<codeline lineno="1349"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1350"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint8_t<sp/><ref refid="group__nrf__radio__hal_1gae093ea5b904d9f957a7cc91d74232f79" kindref="member">nrf_radio_sfd_get</ref>(NRF_RADIO_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="1351"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>defined(RADIO_SFD_SFD_Msk)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1352"><highlight class="normal"></highlight></codeline>
<codeline lineno="1353"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(RADIO_EDCNT_EDCNT_Msk)<sp/>||<sp/>defined(RADIO_EDCTRL_EDCNT_Msk)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1354"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="1355"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>number<sp/>of<sp/>iterations<sp/>to<sp/>perform<sp/>ED<sp/>scan.</highlight></codeline>
<codeline lineno="1356"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1357"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="1358"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>ed_loop_count<sp/>Number<sp/>of<sp/>iterations<sp/>during<sp/>ED<sp/>procedure.</highlight></codeline>
<codeline lineno="1359"><highlight class="comment"><sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1360"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__radio__hal_1gaf5aa628960e620b1aa2fcfd30222ab4c" kindref="member">nrf_radio_ed_loop_count_set</ref>(NRF_RADIO_Type<sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>ed_loop_count);</highlight></codeline>
<codeline lineno="1361"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>defined(RADIO_EDCNT_EDCNT_Msk)<sp/>||<sp/>defined(RADIO_EDCTRL_EDCNT_Msk)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1362"><highlight class="normal"></highlight></codeline>
<codeline lineno="1363"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(RADIO_EDCTRL_EDPERIOD_Msk)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1364"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="1365"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>the<sp/>period<sp/>of<sp/>a<sp/>ED/CCA<sp/>iteration.</highlight></codeline>
<codeline lineno="1366"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1367"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="1368"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>ed_period<sp/>Duration<sp/>of<sp/>a<sp/>single<sp/>ED/CCA<sp/>iteration.</highlight></codeline>
<codeline lineno="1369"><highlight class="comment"><sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1370"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__radio__hal_1ga871ffceb643be94c3376ec357faa5a8c" kindref="member">nrf_radio_ed_cca_period_set</ref>(NRF_RADIO_Type<sp/>*<sp/>p_reg,<sp/>uint8_t<sp/>ed_period);</highlight></codeline>
<codeline lineno="1371"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>defined(RADIO_EDCTRL_EDPERIOD_Msk)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1372"><highlight class="normal"></highlight></codeline>
<codeline lineno="1373"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(RADIO_EDSAMPLE_EDLVL_Msk)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1374"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="1375"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>Energy<sp/>Detection<sp/>level.</highlight></codeline>
<codeline lineno="1376"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1377"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="1378"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1379"><highlight class="comment"><sp/>*<sp/>@return<sp/>IEEE<sp/>802.15.4<sp/>energy<sp/>detect<sp/>level.</highlight></codeline>
<codeline lineno="1380"><highlight class="comment"><sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1381"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint8_t<sp/><ref refid="group__nrf__radio__hal_1ga11647a756f741617dd218c0d9941fd0a" kindref="member">nrf_radio_ed_sample_get</ref>(NRF_RADIO_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="1382"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>defined(RADIO_EDSAMPLE_EDLVL_Msk)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1383"><highlight class="normal"></highlight></codeline>
<codeline lineno="1384"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(RADIO_CCACTRL_CCAMODE_Msk)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1385"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="1386"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>configuring<sp/>the<sp/>IEEE<sp/>802.15.4<sp/>clear<sp/>channel<sp/>assessment.</highlight></codeline>
<codeline lineno="1387"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1388"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="1389"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>cca_mode<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Mode<sp/>of<sp/>CCA.</highlight></codeline>
<codeline lineno="1390"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>cca_ed_threshold<sp/><sp/><sp/>Energy<sp/>Detection<sp/>threshold<sp/>value.</highlight></codeline>
<codeline lineno="1391"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>cca_corr_threshold<sp/>Correlator<sp/>Busy<sp/>Threshold.</highlight></codeline>
<codeline lineno="1392"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>cca_corr_cnt<sp/><sp/><sp/><sp/><sp/><sp/><sp/>Limit<sp/>of<sp/>occurances<sp/>above<sp/>Correlator<sp/>Threshold.</highlight></codeline>
<codeline lineno="1393"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>When<sp/>not<sp/>equal<sp/>to<sp/>zero<sp/>the<sp/>correlator<sp/>based</highlight></codeline>
<codeline lineno="1394"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>signal<sp/>detect<sp/>is<sp/>enabled.</highlight></codeline>
<codeline lineno="1395"><highlight class="comment"><sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1396"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__radio__hal_1gad942e9cf952a63f69d1511bfbc565050" kindref="member">nrf_radio_cca_configure</ref>(NRF_RADIO_Type<sp/>*<sp/><sp/><sp/><sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="1397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__radio__hal_1gacd20cabadc17d4eae37fff80f4e9d1e5" kindref="member">nrf_radio_cca_mode_t</ref><sp/>cca_mode,</highlight></codeline>
<codeline lineno="1398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cca_ed_threshold,</highlight></codeline>
<codeline lineno="1399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cca_corr_threshold,</highlight></codeline>
<codeline lineno="1400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cca_corr_cnt);</highlight></codeline>
<codeline lineno="1401"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>defined(RADIO_CCACTRL_CCAMODE_Msk)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1402"><highlight class="normal"></highlight></codeline>
<codeline lineno="1403"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(RADIO_POWER_POWER_Msk)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1404"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="1405"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>power<sp/>mode<sp/>of<sp/>the<sp/>radio<sp/>peripheral.</highlight></codeline>
<codeline lineno="1406"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1407"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/><sp/><sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="1408"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>radio_power<sp/>If<sp/>radio<sp/>should<sp/>be<sp/>powered<sp/>on.</highlight></codeline>
<codeline lineno="1409"><highlight class="comment"><sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1410"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__radio__hal_1ga382aeec6648cdb3fe1bc9355f076a900" kindref="member">nrf_radio_power_set</ref>(NRF_RADIO_Type<sp/>*<sp/>p_reg,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>radio_power);</highlight></codeline>
<codeline lineno="1411"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>defined(RADIO_POWER_POWER_Msk)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1412"><highlight class="normal"></highlight></codeline>
<codeline lineno="1413"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(RADIO_CTESTATUS_CTETIME_Msk)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1414"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="1415"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>the<sp/>CTE<sp/>time<sp/>parsed<sp/>from<sp/>received<sp/>packet.</highlight></codeline>
<codeline lineno="1416"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1417"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="1418"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1419"><highlight class="comment"><sp/>*<sp/>@return<sp/>CTE<sp/>time.</highlight></codeline>
<codeline lineno="1420"><highlight class="comment"><sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1421"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__radio__hal_1ga3a92fd06c78602b07c884d1c96575e69" kindref="member">nrf_radio_cte_time_get</ref>(NRF_RADIO_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="1422"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1423"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="1424"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>the<sp/>CTE<sp/>type<sp/>parsed<sp/>from<sp/>received<sp/>packet.</highlight></codeline>
<codeline lineno="1425"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1426"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="1427"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1428"><highlight class="comment"><sp/>*<sp/>@return<sp/>CTE<sp/>type.</highlight></codeline>
<codeline lineno="1429"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1430"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__radio__hal_1gac310385e2369f66495ebd5fca7e8d0b2" kindref="member">nrf_radio_cte_type_get</ref>(NRF_RADIO_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="1431"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1432"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="1433"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>the<sp/>CTE<sp/>RFU<sp/>parsed<sp/>from<sp/>received<sp/>packet.</highlight></codeline>
<codeline lineno="1434"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1435"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="1436"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1437"><highlight class="comment"><sp/>*<sp/>@return<sp/>CTE<sp/>RFU.</highlight></codeline>
<codeline lineno="1438"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1439"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__radio__hal_1ga13bcf8cdfb3176b80f158854377378d8" kindref="member">nrf_radio_cte_rfu_get</ref>(NRF_RADIO_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="1440"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>defined(RADIO_CTESTATUS_CTETIME_Msk)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1441"><highlight class="normal"></highlight></codeline>
<codeline lineno="1442"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(RADIO_DFESTATUS_SWITCHINGSTATE_Msk)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1443"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="1444"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>the<sp/>current<sp/>state<sp/>of<sp/>DFE<sp/>switching<sp/>state<sp/>machine.</highlight></codeline>
<codeline lineno="1445"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1446"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="1447"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1448"><highlight class="comment"><sp/>*<sp/>@return<sp/>State<sp/>of<sp/>switching<sp/>state<sp/>machine.</highlight></codeline>
<codeline lineno="1449"><highlight class="comment"><sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1450"><highlight class="normal">NRF_STATIC_INLINE</highlight></codeline>
<codeline lineno="1451"><highlight class="normal"><ref refid="group__nrf__radio__hal_1gaa6632d62276bfec4138e0688d5f73018" kindref="member">nrf_radio_dfe_switch_state_t</ref><sp/><ref refid="group__nrf__radio__hal_1ga35f330bc5182d63d72bb32bab2174ef8" kindref="member">nrf_radio_dfe_switch_state_get</ref>(NRF_RADIO_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="1452"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1453"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="1454"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>the<sp/>current<sp/>state<sp/>of<sp/>DFE<sp/>sampling<sp/>state<sp/>machine.</highlight></codeline>
<codeline lineno="1455"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1456"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="1457"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1458"><highlight class="comment"><sp/>*<sp/>@return<sp/>State<sp/>of<sp/>sampling<sp/>state<sp/>machine.</highlight></codeline>
<codeline lineno="1459"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1460"><highlight class="normal">NRF_STATIC_INLINE</highlight></codeline>
<codeline lineno="1461"><highlight class="normal"><ref refid="group__nrf__radio__hal_1ga8b27d0e94d3c0d4589d8876018cdcc7b" kindref="member">nrf_radio_dfe_sample_state_t</ref><sp/><ref refid="group__nrf__radio__hal_1ga92671cc220fed35d612c0f81f85fe0ff" kindref="member">nrf_radio_dfe_sample_state_get</ref>(NRF_RADIO_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="1462"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1463"><highlight class="normal"></highlight></codeline>
<codeline lineno="1464"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(RADIO_CTEINLINECONF_S0CONF_Msk)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1465"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="1466"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>the<sp/>configuration<sp/>of<sp/>CTE<sp/>inline<sp/>mode.</highlight></codeline>
<codeline lineno="1467"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1468"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="1469"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_config<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>with<sp/>CTE<sp/>inline<sp/>mode<sp/>configuration.</highlight></codeline>
<codeline lineno="1470"><highlight class="comment"><sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1471"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__radio__hal_1ga46900b20699091144a2a989feaff0a66" kindref="member">nrf_radio_cteinline_configure</ref>(NRF_RADIO_Type<sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="1472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structnrf__radio__cteinline__conf__t" kindref="compound">nrf_radio_cteinline_conf_t</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_config);</highlight></codeline>
<codeline lineno="1473"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1474"><highlight class="normal"></highlight></codeline>
<codeline lineno="1475"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(RADIO_DFECTRL1_NUMBEROF8US_Msk)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1476"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="1477"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>the<sp/>direction<sp/>finding<sp/>configuration.</highlight></codeline>
<codeline lineno="1478"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1479"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="1480"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_config<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>with<sp/>direction<sp/>finding<sp/>configuration.</highlight></codeline>
<codeline lineno="1481"><highlight class="comment"><sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1482"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__radio__hal_1gab31f9189c3a898cde71ec102792a3b67" kindref="member">nrf_radio_dfectrl_configure</ref>(NRF_RADIO_Type<sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="1483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structnrf__radio__dfectrl__conf__t" kindref="compound">nrf_radio_dfectrl_conf_t</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_config);</highlight></codeline>
<codeline lineno="1484"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1485"><highlight class="normal"></highlight></codeline>
<codeline lineno="1486"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(RADIO_SWITCHPATTERN_SWITCHPATTERN_Msk)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1487"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="1488"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>configuring<sp/>the<sp/>specified<sp/>GPIO<sp/>pin<sp/>for<sp/>antenna<sp/>control.</highlight></codeline>
<codeline lineno="1489"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1490"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="1491"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>pin<sp/><sp/><sp/>Pin<sp/>number.</highlight></codeline>
<codeline lineno="1492"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>pos<sp/><sp/><sp/>Position<sp/>of<sp/>the<sp/>pin<sp/>in<sp/>the<sp/>switching<sp/>pattern</highlight></codeline>
<codeline lineno="1493"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>configured<sp/>with<sp/>@ref<sp/>nrf_radio_dfe_pattern_add()</highlight></codeline>
<codeline lineno="1494"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>or<sp/>@ref<sp/>nrf_radio_dfe_patterns_add().</highlight></codeline>
<codeline lineno="1495"><highlight class="comment"><sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1496"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__radio__hal_1ga3d5f4a42eb4bd4399bcfb240ae71c64f" kindref="member">nrf_radio_dfe_pattern_pin_set</ref>(NRF_RADIO_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="1497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pin,</highlight></codeline>
<codeline lineno="1498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pos);</highlight></codeline>
<codeline lineno="1499"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1500"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="1501"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>adding<sp/>single<sp/>pattern<sp/>to<sp/>the<sp/>array<sp/>of<sp/>GPIO<sp/>patterns<sp/>for<sp/>antenna<sp/>control.</highlight></codeline>
<codeline lineno="1502"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1503"><highlight class="comment"><sp/>*<sp/>The<sp/>GPIO<sp/>pattern<sp/>array<sp/>size<sp/>is<sp/>40<sp/>entries.<sp/>This<sp/>function<sp/>configures<sp/>single<sp/>pattern<sp/>consisting<sp/>of<sp/>8<sp/>pins.</highlight></codeline>
<codeline lineno="1504"><highlight class="comment"><sp/>*<sp/>To<sp/>set<sp/>subsequent<sp/>pattern,<sp/>call<sp/>this<sp/>function<sp/>again.</highlight></codeline>
<codeline lineno="1505"><highlight class="comment"><sp/>*<sp/>To<sp/>get<sp/>total<sp/>number<sp/>of<sp/>currently<sp/>configured<sp/>patterns<sp/>use<sp/>@ref<sp/>nrf_radio_dfe_pattern_cnt_get().</highlight></codeline>
<codeline lineno="1506"><highlight class="comment"><sp/>*<sp/>To<sp/>clear<sp/>the<sp/>array<sp/>of<sp/>GPIO<sp/>patterns<sp/>use<sp/>@ref<sp/>nrf_radio_dfe_pattern_clear().</highlight></codeline>
<codeline lineno="1507"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1508"><highlight class="comment"><sp/>*<sp/>@warning<sp/>A<sp/>minimum<sp/>number<sp/>of<sp/>3<sp/>patterns<sp/>must<sp/>be<sp/>written.</highlight></codeline>
<codeline lineno="1509"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1510"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="1511"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>pin_mask<sp/>Bitmask<sp/>specifying<sp/>pins<sp/>to<sp/>be<sp/>used<sp/>in<sp/>this<sp/>switching<sp/>pattern.</highlight></codeline>
<codeline lineno="1512"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Each<sp/>bit<sp/>corresponds<sp/>to<sp/>the<sp/>index<sp/>of<sp/>the<sp/>pin</highlight></codeline>
<codeline lineno="1513"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>configured<sp/>with<sp/>@ref<sp/>nrf_radio_dfe_pattern_pin_set().</highlight></codeline>
<codeline lineno="1514"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1515"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__radio__hal_1gaabee02c2cd5d2757c44150b2ab376b34" kindref="member">nrf_radio_dfe_pattern_add</ref>(NRF_RADIO_Type<sp/>*<sp/>p_reg,<sp/>uint8_t<sp/>pin_mask);</highlight></codeline>
<codeline lineno="1516"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1517"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="1518"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>adding<sp/>multiple<sp/>patterns<sp/>to<sp/>the<sp/>array<sp/>of<sp/>GPIO<sp/>patterns<sp/>for<sp/>antenna<sp/>control.</highlight></codeline>
<codeline lineno="1519"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1520"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/><sp/><sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="1521"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_pin_masks<sp/>Pointer<sp/>to<sp/>the<sp/>array<sp/>of<sp/>bitmasks<sp/>specifying<sp/>pins</highlight></codeline>
<codeline lineno="1522"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>to<sp/>be<sp/>used<sp/>in<sp/>subsequent<sp/>switching<sp/>patterns.</highlight></codeline>
<codeline lineno="1523"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>length<sp/><sp/><sp/><sp/><sp/><sp/>Bitmask<sp/>array<sp/>length.</highlight></codeline>
<codeline lineno="1524"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1525"><highlight class="comment"><sp/>*<sp/>@sa<sp/>nrf_radio_dfe_pattern_add()</highlight></codeline>
<codeline lineno="1526"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1527"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__radio__hal_1ga8d1b32585d9a0275667438eafb0fe9ff" kindref="member">nrf_radio_dfe_patterns_add</ref>(NRF_RADIO_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="1528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/><sp/>p_pin_masks,</highlight></codeline>
<codeline lineno="1529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>length);</highlight></codeline>
<codeline lineno="1530"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1531"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="1532"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>number<sp/>of<sp/>currently<sp/>configured<sp/>GPIO<sp/>patterns<sp/>for<sp/>antenna<sp/>control.</highlight></codeline>
<codeline lineno="1533"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1534"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="1535"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1536"><highlight class="comment"><sp/>*<sp/>@return<sp/>Number<sp/>of<sp/>patterns.</highlight></codeline>
<codeline lineno="1537"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1538"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__radio__hal_1gaa1dd461894cce3777ef12165d93dda8a" kindref="member">nrf_radio_dfe_pattern_cnt_get</ref>(NRF_RADIO_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="1539"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1540"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="1541"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>clearing<sp/>all<sp/>of<sp/>the<sp/>currently<sp/>configured<sp/>GPIO<sp/>patterns<sp/>for<sp/>antenna<sp/>control.</highlight></codeline>
<codeline lineno="1542"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1543"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="1544"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1545"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__radio__hal_1gaa576fb22d7447eeb644fd6c699584f54" kindref="member">nrf_radio_dfe_pattern_clear</ref>(NRF_RADIO_Type<sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="1546"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>defined(RADIO_SWITCHPATTERN_SWITCHPATTERN_Msk)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1547"><highlight class="normal"></highlight></codeline>
<codeline lineno="1548"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(RADIO_DFEPACKET_PTR_PTR_Msk)<sp/>||<sp/>defined(RADIO_DFEPACKET_PTR_OFFSET_Msk)<sp/>||<sp/>\</highlight></codeline>
<codeline lineno="1549"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1550"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="1551"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>the<sp/>buffer<sp/>for<sp/>storing<sp/>IQ<sp/>samples<sp/>or<sp/>magnitude<sp/>and<sp/>phase<sp/>pairs</highlight></codeline>
<codeline lineno="1552"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>of<sp/>the<sp/>samples.</highlight></codeline>
<codeline lineno="1553"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1554"><highlight class="comment"><sp/>*<sp/>@note<sp/>Each<sp/>sample<sp/>or<sp/>pair<sp/>is<sp/>stored<sp/>on<sp/>a<sp/>32-bit<sp/>word.</highlight></codeline>
<codeline lineno="1555"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1556"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="1557"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_buffer<sp/>Pointer<sp/>to<sp/>the<sp/>buffer<sp/>for<sp/>storing<sp/>IQ<sp/>samples</highlight></codeline>
<codeline lineno="1558"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>or<sp/>magnitude<sp/>and<sp/>phase<sp/>of<sp/>the<sp/>samples.</highlight></codeline>
<codeline lineno="1559"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>length<sp/><sp/><sp/>Maximum<sp/>number<sp/>of<sp/>samples<sp/>to<sp/>receive.</highlight></codeline>
<codeline lineno="1560"><highlight class="comment"><sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1561"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__radio__hal_1gaec6ca2940b0c0da838f9d61a226109ea" kindref="member">nrf_radio_dfe_buffer_set</ref>(NRF_RADIO_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="1562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_buffer,</highlight></codeline>
<codeline lineno="1563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>length);</highlight></codeline>
<codeline lineno="1564"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1565"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="1566"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>the<sp/>number<sp/>of<sp/>stored<sp/>IQ<sp/>samples<sp/>or<sp/>magnitude<sp/>and<sp/>phase<sp/>pairs</highlight></codeline>
<codeline lineno="1567"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>of<sp/>the<sp/>samples<sp/>during<sp/>last<sp/>transaction.</highlight></codeline>
<codeline lineno="1568"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1569"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="1570"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1571"><highlight class="comment"><sp/>*<sp/>@retval<sp/>Amount<sp/>of<sp/>samples.</highlight></codeline>
<codeline lineno="1572"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1573"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__radio__hal_1gab6d271c9d8e00b647100f844081eb6ae" kindref="member">nrf_radio_dfe_amount_get</ref>(NRF_RADIO_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="1574"><highlight class="normal"></highlight></codeline>
<codeline lineno="1575"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(RADIO_DFEPACKET_CURRENTAMOUNT_AMOUNT_Msk)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1576"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="1577"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>the<sp/>number<sp/>of<sp/>bytes<sp/>transferred<sp/>in<sp/>the<sp/>current<sp/>transaction.</highlight></codeline>
<codeline lineno="1578"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1579"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="1580"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1581"><highlight class="comment"><sp/>*<sp/>@return<sp/>Number<sp/>of<sp/>bytes.</highlight></codeline>
<codeline lineno="1582"><highlight class="comment"><sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1583"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__radio__hal_1ga6ccabe7ebeab7ae29f57f5488f6fdecc" kindref="member">nrf_radio_dfe_current_amount_get</ref>(NRF_RADIO_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="1584"><highlight class="normal"></highlight></codeline>
<codeline lineno="1585"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1586"><highlight class="normal"></highlight></codeline>
<codeline lineno="1587"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1588"><highlight class="normal"></highlight></codeline>
<codeline lineno="1589"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>NRF_DECLARE_ONLY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1590"><highlight class="normal"></highlight></codeline>
<codeline lineno="1591"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__radio__hal_1ga3c9a0741030060bba9d9d5bbf7f528b8" kindref="member">nrf_radio_task_trigger</ref>(NRF_RADIO_Type<sp/>*<sp/>p_reg,<sp/><ref refid="group__nrf__radio__hal_1ga607fff2f027c323b3dc8af40ab489a2f" kindref="member">nrf_radio_task_t</ref><sp/>task)</highlight></codeline>
<codeline lineno="1592"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1593"><highlight class="normal"><sp/><sp/><sp/><sp/>*((</highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint32_t<sp/>*)((uint8_t<sp/>*)p_reg<sp/>+<sp/>(uint32_t)task))<sp/>=<sp/>0x1UL;</highlight></codeline>
<codeline lineno="1594"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1595"><highlight class="normal"></highlight></codeline>
<codeline lineno="1596"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__radio__hal_1ga2d24a390cb7660d259f664a4dd409555" kindref="member">nrf_radio_task_address_get</ref>(NRF_RADIO_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="1597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__radio__hal_1ga607fff2f027c323b3dc8af40ab489a2f" kindref="member">nrf_radio_task_t</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>task)</highlight></codeline>
<codeline lineno="1598"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1599"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((uint32_t)p_reg<sp/>+<sp/>(uint32_t)task);</highlight></codeline>
<codeline lineno="1600"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1601"><highlight class="normal"></highlight></codeline>
<codeline lineno="1602"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__radio__hal_1ga4722c840c42a42823687a1a86e1261ef" kindref="member">nrf_radio_event_clear</ref>(NRF_RADIO_Type<sp/>*<sp/>p_reg,<sp/><ref refid="group__nrf__radio__hal_1ga7c4b15ec33a0704a9caa2fa0b36e98bb" kindref="member">nrf_radio_event_t</ref><sp/>event)</highlight></codeline>
<codeline lineno="1603"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1604"><highlight class="normal"><sp/><sp/><sp/><sp/>*((</highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint32_t<sp/>*)((uint8_t<sp/>*)p_reg<sp/>+<sp/>(uint32_t)event))<sp/>=<sp/>0x0UL;</highlight></codeline>
<codeline lineno="1605"><highlight class="normal"><sp/><sp/><sp/><sp/>nrf_event_readback((uint8_t<sp/>*)p_reg<sp/>+<sp/>(uint32_t)event);</highlight></codeline>
<codeline lineno="1606"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1607"><highlight class="normal"></highlight></codeline>
<codeline lineno="1608"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrf__radio__hal_1ga07513cd4f3fe44e19e6dd7f57c99aded" kindref="member">nrf_radio_event_check</ref>(NRF_RADIO_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,<sp/><ref refid="group__nrf__radio__hal_1ga7c4b15ec33a0704a9caa2fa0b36e98bb" kindref="member">nrf_radio_event_t</ref><sp/>event)</highlight></codeline>
<codeline lineno="1609"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1610"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>nrf_event_check(p_reg,<sp/>event);</highlight></codeline>
<codeline lineno="1611"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1612"><highlight class="normal"></highlight></codeline>
<codeline lineno="1613"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__radio__hal_1ga3332fde0b4673961bf8466dd323d59a4" kindref="member">nrf_radio_event_address_get</ref>(NRF_RADIO_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="1614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__radio__hal_1ga7c4b15ec33a0704a9caa2fa0b36e98bb" kindref="member">nrf_radio_event_t</ref><sp/><sp/><sp/><sp/><sp/><sp/>event)</highlight></codeline>
<codeline lineno="1615"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1616"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((uint32_t)p_reg<sp/>+<sp/>(uint32_t)event);</highlight></codeline>
<codeline lineno="1617"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1618"><highlight class="normal"></highlight></codeline>
<codeline lineno="1619"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__radio__hal_1gac05dbdb99a5c5308818344391a778298" kindref="member">nrf_radio_shorts_enable</ref>(NRF_RADIO_Type<sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>shorts_mask)</highlight></codeline>
<codeline lineno="1620"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1621"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;SHORTS<sp/>|=<sp/>shorts_mask;</highlight></codeline>
<codeline lineno="1622"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1623"><highlight class="normal"></highlight></codeline>
<codeline lineno="1624"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__radio__hal_1ga8f44040e5750c1e0b44633d362a7d36c" kindref="member">nrf_radio_shorts_disable</ref>(NRF_RADIO_Type<sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>shorts_mask)</highlight></codeline>
<codeline lineno="1625"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1626"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;SHORTS<sp/>&amp;=<sp/>~shorts_mask;</highlight></codeline>
<codeline lineno="1627"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1628"><highlight class="normal"></highlight></codeline>
<codeline lineno="1629"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__radio__hal_1gad795180cbe33c306c3fb3a5d864f17d2" kindref="member">nrf_radio_shorts_set</ref>(NRF_RADIO_Type<sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>shorts_mask)</highlight></codeline>
<codeline lineno="1630"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1631"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;SHORTS<sp/>=<sp/>shorts_mask;</highlight></codeline>
<codeline lineno="1632"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1633"><highlight class="normal"></highlight></codeline>
<codeline lineno="1634"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__radio__hal_1gaad50cd6fcdb24e15fbaf79ac6a3c2135" kindref="member">nrf_radio_shorts_get</ref>(NRF_RADIO_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="1635"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1636"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p_reg-&gt;SHORTS;</highlight></codeline>
<codeline lineno="1637"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1638"><highlight class="normal"></highlight></codeline>
<codeline lineno="1639"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__radio__hal_1ga69ff216ed79aa8b7bdee0f378bd2607b" kindref="member">nrf_radio_int_enable</ref>(NRF_RADIO_Type<sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>mask)</highlight></codeline>
<codeline lineno="1640"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1641"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(RADIO_INTENSET_READY_Msk)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1642"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;INTENSET<sp/>=<sp/>mask;</highlight></codeline>
<codeline lineno="1643"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(RADIO_INTENSET00_READY_Msk)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1644"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;INTENSET00<sp/>=<sp/>mask;</highlight></codeline>
<codeline lineno="1645"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1646"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1647"><highlight class="normal"></highlight></codeline>
<codeline lineno="1648"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__radio__hal_1ga9405c7546f98d1a3a4408a8ef6677094" kindref="member">nrf_radio_int_disable</ref>(NRF_RADIO_Type<sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>mask)</highlight></codeline>
<codeline lineno="1649"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1650"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(RADIO_INTENCLR_READY_Msk)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1651"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;INTENCLR<sp/>=<sp/>mask;</highlight></codeline>
<codeline lineno="1652"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(RADIO_INTENCLR00_READY_Msk)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1653"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;INTENCLR00<sp/>=<sp/>mask;</highlight></codeline>
<codeline lineno="1654"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1655"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1656"><highlight class="normal"></highlight></codeline>
<codeline lineno="1657"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__radio__hal_1gaae5190782f876f0d8b69c8298259f2c7" kindref="member">nrf_radio_int_enable_check</ref>(NRF_RADIO_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>mask)</highlight></codeline>
<codeline lineno="1658"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1659"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(RADIO_INTENSET_READY_Msk)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1660"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p_reg-&gt;INTENSET<sp/>&amp;<sp/>mask;</highlight></codeline>
<codeline lineno="1661"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(RADIO_INTENSET00_READY_Msk)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1662"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p_reg-&gt;INTENSET00<sp/>&amp;<sp/>mask;</highlight></codeline>
<codeline lineno="1663"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1664"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1665"><highlight class="normal"></highlight></codeline>
<codeline lineno="1666"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(DPPI_PRESENT)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1667"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__radio__hal_1gaed6f1018c5d7a16a910e2af53f35fc85" kindref="member">nrf_radio_subscribe_set</ref>(NRF_RADIO_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="1668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__radio__hal_1ga607fff2f027c323b3dc8af40ab489a2f" kindref="member">nrf_radio_task_t</ref><sp/>task,</highlight></codeline>
<codeline lineno="1669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>channel)</highlight></codeline>
<codeline lineno="1670"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1671"><highlight class="normal"><sp/><sp/><sp/><sp/>*((</highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint32_t<sp/>*)<sp/>((uint8_t<sp/>*)<sp/>p_reg<sp/>+<sp/>(uint32_t)<sp/>task<sp/>+<sp/><ref refid="group__nrf__radio__hal_1ga3e1cd53cc3794d26a2f00b968e6f8aa9" kindref="member">NRF_RADIO_DPPI_OFFSET</ref>))<sp/>=</highlight></codeline>
<codeline lineno="1672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)channel<sp/>|<sp/>NRF_SUBSCRIBE_PUBLISH_ENABLE);</highlight></codeline>
<codeline lineno="1673"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1674"><highlight class="normal"></highlight></codeline>
<codeline lineno="1675"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__radio__hal_1gae69ee57dd4175dfc9660cf994b8a8035" kindref="member">nrf_radio_subscribe_clear</ref>(NRF_RADIO_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="1676"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__radio__hal_1ga607fff2f027c323b3dc8af40ab489a2f" kindref="member">nrf_radio_task_t</ref><sp/>task)</highlight></codeline>
<codeline lineno="1677"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1678"><highlight class="normal"><sp/><sp/><sp/><sp/>*((</highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint32_t<sp/>*)<sp/>((uint8_t<sp/>*)<sp/>p_reg<sp/>+<sp/>(uint32_t)<sp/>task<sp/>+<sp/><ref refid="group__nrf__radio__hal_1ga3e1cd53cc3794d26a2f00b968e6f8aa9" kindref="member">NRF_RADIO_DPPI_OFFSET</ref>))<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1679"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1680"><highlight class="normal"></highlight></codeline>
<codeline lineno="1681"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__radio__hal_1ga2746b85fd6b490195aef6b8740e8e62b" kindref="member">nrf_radio_publish_set</ref>(NRF_RADIO_Type<sp/>*<sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="1682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__radio__hal_1ga7c4b15ec33a0704a9caa2fa0b36e98bb" kindref="member">nrf_radio_event_t</ref><sp/>event,</highlight></codeline>
<codeline lineno="1683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>channel)</highlight></codeline>
<codeline lineno="1684"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1685"><highlight class="normal"><sp/><sp/><sp/><sp/>*((</highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint32_t<sp/>*)<sp/>((uint8_t<sp/>*)<sp/>p_reg<sp/>+<sp/>(uint32_t)<sp/>event<sp/>+<sp/><ref refid="group__nrf__radio__hal_1ga3e1cd53cc3794d26a2f00b968e6f8aa9" kindref="member">NRF_RADIO_DPPI_OFFSET</ref>))<sp/>=</highlight></codeline>
<codeline lineno="1686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)channel<sp/>|<sp/>NRF_SUBSCRIBE_PUBLISH_ENABLE);</highlight></codeline>
<codeline lineno="1687"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1688"><highlight class="normal"></highlight></codeline>
<codeline lineno="1689"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__radio__hal_1gaf7652e300e57600c73bb2567f728aa1e" kindref="member">nrf_radio_publish_clear</ref>(NRF_RADIO_Type<sp/>*<sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="1690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__radio__hal_1ga7c4b15ec33a0704a9caa2fa0b36e98bb" kindref="member">nrf_radio_event_t</ref><sp/>event)</highlight></codeline>
<codeline lineno="1691"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1692"><highlight class="normal"><sp/><sp/><sp/><sp/>*((</highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint32_t<sp/>*)<sp/>((uint8_t<sp/>*)<sp/>p_reg<sp/>+<sp/>(uint32_t)<sp/>event<sp/>+<sp/><ref refid="group__nrf__radio__hal_1ga3e1cd53cc3794d26a2f00b968e6f8aa9" kindref="member">NRF_RADIO_DPPI_OFFSET</ref>))<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1693"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1694"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>defined(DPPI_PRESENT)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1695"><highlight class="normal"></highlight></codeline>
<codeline lineno="1696"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrf__radio__hal_1gab3f2df22572330363d9dc90de1a1b30e" kindref="member">nrf_radio_crc_status_check</ref>(NRF_RADIO_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="1697"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1698"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((p_reg-&gt;CRCSTATUS<sp/>&amp;<sp/>RADIO_CRCSTATUS_CRCSTATUS_Msk)<sp/>&gt;&gt;<sp/>RADIO_CRCSTATUS_CRCSTATUS_Pos)</highlight></codeline>
<codeline lineno="1699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>==<sp/>RADIO_CRCSTATUS_CRCSTATUS_CRCOk<sp/>;</highlight></codeline>
<codeline lineno="1700"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1701"><highlight class="normal"></highlight></codeline>
<codeline lineno="1702"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint8_t<sp/><ref refid="group__nrf__radio__hal_1gacc37a3877b0c545ce6552760354c7460" kindref="member">nrf_radio_rxmatch_get</ref>(NRF_RADIO_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="1703"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1704"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(uint8_t)p_reg-&gt;RXMATCH;</highlight></codeline>
<codeline lineno="1705"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1706"><highlight class="normal"></highlight></codeline>
<codeline lineno="1707"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__radio__hal_1ga17d4cc3f5e15481ac6265a832acf896e" kindref="member">nrf_radio_rxcrc_get</ref>(NRF_RADIO_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="1708"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1709"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p_reg-&gt;RXCRC;</highlight></codeline>
<codeline lineno="1710"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1711"><highlight class="normal"></highlight></codeline>
<codeline lineno="1712"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint8_t<sp/><ref refid="group__nrf__radio__hal_1gadc7960a01d313bab770fdbc3cda783d2" kindref="member">nrf_radio_dai_get</ref>(NRF_RADIO_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="1713"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1714"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(uint8_t)p_reg-&gt;DAI;</highlight></codeline>
<codeline lineno="1715"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1716"><highlight class="normal"></highlight></codeline>
<codeline lineno="1717"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(RADIO_PDUSTAT_PDUSTAT_Msk)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1718"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint8_t<sp/><ref refid="group__nrf__radio__hal_1gaa0025b27a99d784ff85ccbfe2ee58f97" kindref="member">nrf_radio_pdustat_get</ref>(NRF_RADIO_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="1719"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1720"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(uint8_t)(p_reg-&gt;PDUSTAT<sp/>&amp;<sp/>RADIO_PDUSTAT_PDUSTAT_Msk);</highlight></codeline>
<codeline lineno="1721"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1722"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1723"><highlight class="normal"></highlight></codeline>
<codeline lineno="1724"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(RADIO_PDUSTAT_CISTAT_Msk)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1725"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint8_t<sp/><ref refid="group__nrf__radio__hal_1ga2b8c779d8e91304b2f184688fa4eada4" kindref="member">nrf_radio_cistat_get</ref>(NRF_RADIO_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="1726"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1727"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(uint8_t)((p_reg-&gt;PDUSTAT<sp/>&amp;<sp/>RADIO_PDUSTAT_CISTAT_Msk)<sp/>&gt;&gt;<sp/>RADIO_PDUSTAT_CISTAT_Pos);</highlight></codeline>
<codeline lineno="1728"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1729"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1730"><highlight class="normal"></highlight></codeline>
<codeline lineno="1731"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__radio__hal_1ga19e2b6c37fd522fc4cc526f58efc03c8" kindref="member">nrf_radio_packetptr_set</ref>(NRF_RADIO_Type<sp/>*<sp/>p_reg,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_packet)</highlight></codeline>
<codeline lineno="1732"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1733"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;PACKETPTR<sp/>=<sp/>(uint32_t)p_packet;</highlight></codeline>
<codeline lineno="1734"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1735"><highlight class="normal"></highlight></codeline>
<codeline lineno="1736"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/><ref refid="group__nrf__radio__hal_1gae2007ebe98fa8315ec15e47feba3bc2f" kindref="member">nrf_radio_packetptr_get</ref>(NRF_RADIO_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="1737"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1738"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)p_reg-&gt;PACKETPTR;</highlight></codeline>
<codeline lineno="1739"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1740"><highlight class="normal"></highlight></codeline>
<codeline lineno="1741"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__radio__hal_1ga5336279c1fd3e4ef5f6a28c2705eee13" kindref="member">nrf_radio_frequency_set</ref>(NRF_RADIO_Type<sp/>*<sp/>p_reg,<sp/>uint16_t<sp/>radio_frequency)</highlight></codeline>
<codeline lineno="1742"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1743"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__glue_1ga9698a3f6b6bea455d2b54a79e514ee36" kindref="member">NRFX_ASSERT</ref>(radio_frequency<sp/>&lt;=<sp/>2500);</highlight></codeline>
<codeline lineno="1744"><highlight class="normal"></highlight></codeline>
<codeline lineno="1745"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(RADIO_FREQUENCY_MAP_Msk)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1746"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__glue_1ga9698a3f6b6bea455d2b54a79e514ee36" kindref="member">NRFX_ASSERT</ref>(radio_frequency<sp/>&gt;=<sp/>2360);</highlight></codeline>
<codeline lineno="1747"><highlight class="normal"></highlight></codeline>
<codeline lineno="1748"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>delta;</highlight></codeline>
<codeline lineno="1749"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(radio_frequency<sp/>&lt;<sp/>2400)</highlight></codeline>
<codeline lineno="1750"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1751"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>delta<sp/>=<sp/>(uint32_t)(radio_frequency<sp/>-<sp/>2360)<sp/>|<sp/>RADIO_FREQUENCY_MAP_Msk;</highlight></codeline>
<codeline lineno="1752"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1753"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1754"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1755"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>delta<sp/>=<sp/>(uint32_t)(radio_frequency<sp/>-<sp/>2400);</highlight></codeline>
<codeline lineno="1756"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1757"><highlight class="normal"></highlight></codeline>
<codeline lineno="1758"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;FREQUENCY<sp/>=<sp/>delta;</highlight></codeline>
<codeline lineno="1759"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1760"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__glue_1ga9698a3f6b6bea455d2b54a79e514ee36" kindref="member">NRFX_ASSERT</ref>(radio_frequency<sp/>&gt;=<sp/>2400);</highlight></codeline>
<codeline lineno="1761"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;FREQUENCY<sp/>=<sp/>(uint32_t)(radio_frequency<sp/>-<sp/>2400);</highlight></codeline>
<codeline lineno="1762"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//defined(RADIO_FREQUENCY_MAP_Msk)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1763"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1764"><highlight class="normal"></highlight></codeline>
<codeline lineno="1765"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint16_t<sp/><ref refid="group__nrf__radio__hal_1gae4f554230e5f845c82ac12db3615df64" kindref="member">nrf_radio_frequency_get</ref>(NRF_RADIO_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="1766"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1767"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>freq;</highlight></codeline>
<codeline lineno="1768"><highlight class="normal"></highlight></codeline>
<codeline lineno="1769"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(RADIO_FREQUENCY_MAP_Msk)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1770"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((p_reg-&gt;FREQUENCY<sp/>&amp;<sp/>RADIO_FREQUENCY_MAP_Msk)<sp/>==<sp/>RADIO_FREQUENCY_MAP_Msk)</highlight></codeline>
<codeline lineno="1771"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1772"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>freq<sp/>=<sp/>2360;</highlight></codeline>
<codeline lineno="1773"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1774"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1775"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1776"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1777"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>freq<sp/>=<sp/>2400;</highlight></codeline>
<codeline lineno="1778"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1779"><highlight class="normal"><sp/><sp/><sp/><sp/>freq<sp/>+=<sp/>p_reg-&gt;FREQUENCY<sp/>&amp;<sp/>RADIO_FREQUENCY_FREQUENCY_Msk;</highlight></codeline>
<codeline lineno="1780"><highlight class="normal"></highlight></codeline>
<codeline lineno="1781"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(uint16_t)freq;</highlight></codeline>
<codeline lineno="1782"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1783"><highlight class="normal"></highlight></codeline>
<codeline lineno="1784"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__radio__hal_1gaa4a51c240d14e2135455dfb9f8d836ba" kindref="member">nrf_radio_txpower_set</ref>(NRF_RADIO_Type<sp/>*<sp/>p_reg,<sp/><ref refid="group__nrf__radio__hal_1gaf10bff1d03d8156b3af56540701d6b3d" kindref="member">nrf_radio_txpower_t</ref><sp/>tx_power)</highlight></codeline>
<codeline lineno="1785"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1786"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;TXPOWER<sp/>=<sp/>(((uint32_t)tx_power)<sp/>&lt;&lt;<sp/>RADIO_TXPOWER_TXPOWER_Pos);</highlight></codeline>
<codeline lineno="1787"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1788"><highlight class="normal"></highlight></codeline>
<codeline lineno="1789"><highlight class="normal">NRF_STATIC_INLINE<sp/><ref refid="group__nrf__radio__hal_1gaf10bff1d03d8156b3af56540701d6b3d" kindref="member">nrf_radio_txpower_t</ref><sp/><ref refid="group__nrf__radio__hal_1ga4e474b7e5f776a61f799fe847536f3d1" kindref="member">nrf_radio_txpower_get</ref>(NRF_RADIO_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="1790"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1791"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="group__nrf__radio__hal_1gaf10bff1d03d8156b3af56540701d6b3d" kindref="member">nrf_radio_txpower_t</ref>)(p_reg-&gt;TXPOWER<sp/>&gt;&gt;<sp/>RADIO_TXPOWER_TXPOWER_Pos);</highlight></codeline>
<codeline lineno="1792"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1793"><highlight class="normal"></highlight></codeline>
<codeline lineno="1794"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__radio__hal_1gafc8fff377c15ae2c926bf1daaf9913a5" kindref="member">nrf_radio_mode_set</ref>(NRF_RADIO_Type<sp/>*<sp/>p_reg,<sp/><ref refid="group__nrf__radio__hal_1gacf631e29d43c93acac290a18850e9c40" kindref="member">nrf_radio_mode_t</ref><sp/>radio_mode)</highlight></codeline>
<codeline lineno="1795"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1796"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;MODE<sp/>=<sp/>((uint32_t)<sp/>radio_mode<sp/>&lt;&lt;<sp/>RADIO_MODE_MODE_Pos);</highlight></codeline>
<codeline lineno="1797"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1798"><highlight class="normal"></highlight></codeline>
<codeline lineno="1799"><highlight class="normal">NRF_STATIC_INLINE<sp/><ref refid="group__nrf__radio__hal_1gacf631e29d43c93acac290a18850e9c40" kindref="member">nrf_radio_mode_t</ref><sp/><ref refid="group__nrf__radio__hal_1gaac5ea7fe15b9208f86fe7a5ecce15229" kindref="member">nrf_radio_mode_get</ref>(NRF_RADIO_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="1800"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1801"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="group__nrf__radio__hal_1gacf631e29d43c93acac290a18850e9c40" kindref="member">nrf_radio_mode_t</ref>)((p_reg-&gt;MODE<sp/>&amp;<sp/>RADIO_MODE_MODE_Msk)<sp/>&gt;&gt;<sp/>RADIO_MODE_MODE_Pos);</highlight></codeline>
<codeline lineno="1802"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1803"><highlight class="normal"></highlight></codeline>
<codeline lineno="1804"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__radio__hal_1ga3ecb0f981f451b970810b457c70abcce" kindref="member">nrf_radio_packet_configure</ref>(NRF_RADIO_Type<sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="1805"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structnrf__radio__packet__conf__t" kindref="compound">nrf_radio_packet_conf_t</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_config)</highlight></codeline>
<codeline lineno="1806"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1807"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;PCNF0<sp/>=<sp/>(((uint32_t)p_config-&gt;<ref refid="structnrf__radio__packet__conf__t_1a47219e63e0ef86af0a66e025299b6c1f" kindref="member">lflen</ref><sp/>&lt;&lt;<sp/>RADIO_PCNF0_LFLEN_Pos)<sp/>|</highlight></codeline>
<codeline lineno="1808"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)p_config-&gt;<ref refid="structnrf__radio__packet__conf__t_1a27b0287abedfad9b91ea720f6517fd56" kindref="member">s0len</ref><sp/>&lt;&lt;<sp/>RADIO_PCNF0_S0LEN_Pos)<sp/>|</highlight></codeline>
<codeline lineno="1809"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)p_config-&gt;<ref refid="structnrf__radio__packet__conf__t_1a11d77b7d870ffd96aec744e6f55ad259" kindref="member">s1len</ref><sp/>&lt;&lt;<sp/>RADIO_PCNF0_S1LEN_Pos)<sp/>|</highlight></codeline>
<codeline lineno="1810"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(RADIO_PCNF0_S1INCL_Msk)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1811"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(p_config-&gt;<ref refid="structnrf__radio__packet__conf__t_1a090144bbc3326e032772376eaada78a5" kindref="member">s1incl</ref><sp/>?</highlight></codeline>
<codeline lineno="1812"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(RADIO_PCNF0_S1INCL_Include<sp/><sp/><sp/>&lt;&lt;<sp/>RADIO_PCNF0_S1INCL_Pos)<sp/>:</highlight></codeline>
<codeline lineno="1813"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(RADIO_PCNF0_S1INCL_Automatic<sp/>&lt;&lt;<sp/>RADIO_PCNF0_S1INCL_Pos)<sp/>)<sp/>|</highlight></codeline>
<codeline lineno="1814"><highlight class="normal">#endif</highlight></codeline>
<codeline lineno="1815"><highlight class="normal">#</highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>defined(RADIO_PCNF0_CILEN_Msk)</highlight></codeline>
<codeline lineno="1816"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)p_config-&gt;<ref refid="structnrf__radio__packet__conf__t_1a6922e6fdd220f9ef05f8eb4c2f271621" kindref="member">cilen</ref><sp/>&lt;&lt;<sp/>RADIO_PCNF0_CILEN_Pos)<sp/>|</highlight></codeline>
<codeline lineno="1817"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1818"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(RADIO_PCNF0_PLEN_Msk)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1819"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)p_config-&gt;<ref refid="structnrf__radio__packet__conf__t_1ab8dddfba1094445348bee8ac80f25dc4" kindref="member">plen</ref><sp/>&lt;&lt;<sp/>RADIO_PCNF0_PLEN_Pos)<sp/>|</highlight></codeline>
<codeline lineno="1820"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1821"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(RADIO_PCNF0_CRCINC_Msk)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1822"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(p_config-&gt;<ref refid="structnrf__radio__packet__conf__t_1a4636566ee568e99a3f21c9dd7f1776a3" kindref="member">crcinc</ref><sp/>?</highlight></codeline>
<codeline lineno="1823"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(RADIO_PCNF0_CRCINC_Include<sp/>&lt;&lt;<sp/>RADIO_PCNF0_CRCINC_Pos)<sp/>:</highlight></codeline>
<codeline lineno="1824"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(RADIO_PCNF0_CRCINC_Exclude<sp/>&lt;&lt;<sp/>RADIO_PCNF0_CRCINC_Pos)<sp/>)<sp/>|</highlight></codeline>
<codeline lineno="1825"><highlight class="normal">#endif</highlight></codeline>
<codeline lineno="1826"><highlight class="normal">#</highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>defined(RADIO_PCNF0_TERMLEN_Msk)</highlight></codeline>
<codeline lineno="1827"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)p_config-&gt;<ref refid="structnrf__radio__packet__conf__t_1aaa97ad443e7c7fe615650115fa1479ef" kindref="member">termlen</ref><sp/>&lt;&lt;<sp/>RADIO_PCNF0_TERMLEN_Pos)<sp/>|</highlight></codeline>
<codeline lineno="1828"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1829"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0);</highlight></codeline>
<codeline lineno="1830"><highlight class="normal"></highlight></codeline>
<codeline lineno="1831"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;PCNF1<sp/>=<sp/>(((uint32_t)p_config-&gt;<ref refid="structnrf__radio__packet__conf__t_1afe3de69f4b015746fc2a529388ccc4eb" kindref="member">maxlen</ref><sp/><sp/>&lt;&lt;<sp/>RADIO_PCNF1_MAXLEN_Pos)<sp/>|</highlight></codeline>
<codeline lineno="1832"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)p_config-&gt;<ref refid="structnrf__radio__packet__conf__t_1a9307108339f7fd4c968aa16a5e38eb86" kindref="member">statlen</ref><sp/>&lt;&lt;<sp/>RADIO_PCNF1_STATLEN_Pos)<sp/>|</highlight></codeline>
<codeline lineno="1833"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)p_config-&gt;<ref refid="structnrf__radio__packet__conf__t_1acaa8a081d410bac445a44e78fb8aa41e" kindref="member">balen</ref><sp/><sp/><sp/>&lt;&lt;<sp/>RADIO_PCNF1_BALEN_Pos)<sp/>|</highlight></codeline>
<codeline lineno="1834"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(p_config-&gt;<ref refid="structnrf__radio__packet__conf__t_1a33f9087f24972b0fc10ba525361025f6" kindref="member">big_endian</ref><sp/>?</highlight></codeline>
<codeline lineno="1835"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(RADIO_PCNF1_ENDIAN_Big<sp/><sp/><sp/><sp/>&lt;&lt;<sp/>RADIO_PCNF1_ENDIAN_Pos)<sp/>:</highlight></codeline>
<codeline lineno="1836"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(RADIO_PCNF1_ENDIAN_Little<sp/>&lt;&lt;<sp/>RADIO_PCNF1_ENDIAN_Pos)<sp/>)<sp/>|</highlight></codeline>
<codeline lineno="1837"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(p_config-&gt;<ref refid="structnrf__radio__packet__conf__t_1a3fd25e327c1a4bca9df2d320eebb7cb7" kindref="member">whiteen</ref><sp/>?</highlight></codeline>
<codeline lineno="1838"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(RADIO_PCNF1_WHITEEN_Enabled<sp/><sp/>&lt;&lt;<sp/>RADIO_PCNF1_WHITEEN_Pos)<sp/>:</highlight></codeline>
<codeline lineno="1839"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(RADIO_PCNF1_WHITEEN_Disabled<sp/>&lt;&lt;<sp/>RADIO_PCNF1_WHITEEN_Pos)<sp/>));</highlight></codeline>
<codeline lineno="1840"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1841"><highlight class="normal"></highlight></codeline>
<codeline lineno="1842"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__radio__hal_1gaebf659968f4b463db0b36350ee1fd194" kindref="member">nrf_radio_base0_set</ref>(NRF_RADIO_Type<sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>address)</highlight></codeline>
<codeline lineno="1843"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1844"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;BASE0<sp/>=<sp/>address;</highlight></codeline>
<codeline lineno="1845"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1846"><highlight class="normal"></highlight></codeline>
<codeline lineno="1847"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__radio__hal_1ga93bf51bdcbd9fd0cb9af6c90e6127e50" kindref="member">nrf_radio_base0_get</ref>(NRF_RADIO_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="1848"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1849"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p_reg-&gt;BASE0;</highlight></codeline>
<codeline lineno="1850"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1851"><highlight class="normal"></highlight></codeline>
<codeline lineno="1852"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__radio__hal_1ga3485758d1cd9c6645ccbc0b601e7bd13" kindref="member">nrf_radio_base1_set</ref>(NRF_RADIO_Type<sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>address)</highlight></codeline>
<codeline lineno="1853"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1854"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;BASE1<sp/>=<sp/>address;</highlight></codeline>
<codeline lineno="1855"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1856"><highlight class="normal"></highlight></codeline>
<codeline lineno="1857"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__radio__hal_1gad3ce36538b713e9d6186af3d0ae0b29d" kindref="member">nrf_radio_base1_get</ref>(NRF_RADIO_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="1858"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1859"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p_reg-&gt;BASE1;</highlight></codeline>
<codeline lineno="1860"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1861"><highlight class="normal"></highlight></codeline>
<codeline lineno="1862"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__radio__hal_1ga9c75649dbb9e5b374f662dfb0787e445" kindref="member">nrf_radio_prefix0_set</ref>(NRF_RADIO_Type<sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>prefixes)</highlight></codeline>
<codeline lineno="1863"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1864"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;PREFIX0<sp/>=<sp/>prefixes;</highlight></codeline>
<codeline lineno="1865"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1866"><highlight class="normal"></highlight></codeline>
<codeline lineno="1867"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__radio__hal_1ga2bba67daa09782376a4fb4b0432a0fed" kindref="member">nrf_radio_prefix0_get</ref>(NRF_RADIO_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="1868"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1869"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p_reg-&gt;PREFIX0;</highlight></codeline>
<codeline lineno="1870"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1871"><highlight class="normal"></highlight></codeline>
<codeline lineno="1872"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__radio__hal_1ga71c5eae49d69976121d9ea00904023d3" kindref="member">nrf_radio_prefix1_set</ref>(NRF_RADIO_Type<sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>prefixes)</highlight></codeline>
<codeline lineno="1873"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1874"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;PREFIX1<sp/>=<sp/>prefixes;</highlight></codeline>
<codeline lineno="1875"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1876"><highlight class="normal"></highlight></codeline>
<codeline lineno="1877"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__radio__hal_1ga7ee51cb90e0c8f933f44998c997f447a" kindref="member">nrf_radio_prefix1_get</ref>(NRF_RADIO_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="1878"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1879"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p_reg-&gt;PREFIX1;</highlight></codeline>
<codeline lineno="1880"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1881"><highlight class="normal"></highlight></codeline>
<codeline lineno="1882"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__radio__hal_1gae88f74d8e994e7075f26be55845c832f" kindref="member">nrf_radio_txaddress_set</ref>(NRF_RADIO_Type<sp/>*<sp/>p_reg,<sp/>uint8_t<sp/>txaddress)</highlight></codeline>
<codeline lineno="1883"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1884"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;TXADDRESS<sp/>=<sp/>((uint32_t)txaddress)<sp/>&lt;&lt;<sp/>RADIO_TXADDRESS_TXADDRESS_Pos;</highlight></codeline>
<codeline lineno="1885"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1886"><highlight class="normal"></highlight></codeline>
<codeline lineno="1887"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint8_t<sp/><ref refid="group__nrf__radio__hal_1ga6991cd5904a1d3ca463285cc99cf6cdd" kindref="member">nrf_radio_txaddress_get</ref>(NRF_RADIO_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="1888"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1889"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(uint8_t)((p_reg-&gt;TXADDRESS<sp/>&amp;<sp/>RADIO_TXADDRESS_TXADDRESS_Msk)<sp/>&gt;&gt;</highlight></codeline>
<codeline lineno="1890"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RADIO_TXADDRESS_TXADDRESS_Pos);</highlight></codeline>
<codeline lineno="1891"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1892"><highlight class="normal"></highlight></codeline>
<codeline lineno="1893"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__radio__hal_1gad397ff61bf37da3082f5e80820da4826" kindref="member">nrf_radio_rxaddresses_set</ref>(NRF_RADIO_Type<sp/>*<sp/>p_reg,<sp/>uint8_t<sp/>rxaddresses)</highlight></codeline>
<codeline lineno="1894"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1895"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;RXADDRESSES<sp/>=<sp/>(uint32_t)(rxaddresses);</highlight></codeline>
<codeline lineno="1896"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1897"><highlight class="normal"></highlight></codeline>
<codeline lineno="1898"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint8_t<sp/><ref refid="group__nrf__radio__hal_1ga40aab0d76bc5761fc2f7922059b873d0" kindref="member">nrf_radio_rxaddresses_get</ref>(NRF_RADIO_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="1899"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1900"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(uint8_t)(p_reg-&gt;RXADDRESSES);</highlight></codeline>
<codeline lineno="1901"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1902"><highlight class="normal"></highlight></codeline>
<codeline lineno="1903"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__radio__hal_1ga4ca667b05c3dea42b646b8c57009e868" kindref="member">nrf_radio_crc_configure</ref>(NRF_RADIO_Type<sp/>*<sp/><sp/><sp/><sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="1904"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>crc_length,</highlight></codeline>
<codeline lineno="1905"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__radio__hal_1ga9e800ae5bddb82989b601ec2407ea229" kindref="member">nrf_radio_crc_addr_t</ref><sp/>crc_address,</highlight></codeline>
<codeline lineno="1906"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>crc_polynominal)</highlight></codeline>
<codeline lineno="1907"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1908"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;CRCCNF<sp/>=<sp/>((uint32_t)crc_length<sp/><sp/>&lt;&lt;<sp/>RADIO_CRCCNF_LEN_Pos)<sp/>|</highlight></codeline>
<codeline lineno="1909"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(RADIO_CRCCNF_SKIPADDR_Msk)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1910"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)crc_address<sp/>&lt;&lt;<sp/>RADIO_CRCCNF_SKIPADDR_Pos);</highlight></codeline>
<codeline lineno="1911"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1912"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)crc_address<sp/>&lt;&lt;<sp/>RADIO_CRCCNF_OFFSET_Pos);</highlight></codeline>
<codeline lineno="1913"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1914"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;CRCPOLY<sp/>=<sp/>(crc_polynominal<sp/>&lt;&lt;<sp/>RADIO_CRCPOLY_CRCPOLY_Pos);</highlight></codeline>
<codeline lineno="1915"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1916"><highlight class="normal"></highlight></codeline>
<codeline lineno="1917"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__radio__hal_1ga65c98c3220300b11c3d00fd03764d1e5" kindref="member">nrf_radio_crcinit_set</ref>(NRF_RADIO_Type<sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>crc_init_value)</highlight></codeline>
<codeline lineno="1918"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1919"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;CRCINIT<sp/>=<sp/>crc_init_value;</highlight></codeline>
<codeline lineno="1920"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1921"><highlight class="normal"></highlight></codeline>
<codeline lineno="1922"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__radio__hal_1gadeed410584b6e4cfa4336c81260ad207" kindref="member">nrf_radio_crcinit_get</ref>(NRF_RADIO_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="1923"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1924"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p_reg-&gt;CRCINIT;</highlight></codeline>
<codeline lineno="1925"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1926"><highlight class="normal"></highlight></codeline>
<codeline lineno="1927"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__radio__hal_1ga8c63884b8ce414fcdf14a1232b9f1886" kindref="member">nrf_radio_ifs_set</ref>(NRF_RADIO_Type<sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>radio_ifs)</highlight></codeline>
<codeline lineno="1928"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1929"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;TIFS<sp/>=<sp/>radio_ifs;</highlight></codeline>
<codeline lineno="1930"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1931"><highlight class="normal"></highlight></codeline>
<codeline lineno="1932"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__radio__hal_1ga4ccdcb4a2ed6074e48e33fa973b5d4ca" kindref="member">nrf_radio_ifs_get</ref>(NRF_RADIO_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="1933"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1934"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p_reg-&gt;TIFS;</highlight></codeline>
<codeline lineno="1935"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1936"><highlight class="normal"></highlight></codeline>
<codeline lineno="1937"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint8_t<sp/><ref refid="group__nrf__radio__hal_1gafd04597ddc9b24925cccff5d53a40059" kindref="member">nrf_radio_rssi_sample_get</ref>(NRF_RADIO_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="1938"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1939"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(uint8_t)((p_reg-&gt;RSSISAMPLE<sp/>&amp;<sp/>RADIO_RSSISAMPLE_RSSISAMPLE_Msk)<sp/>&gt;&gt;</highlight></codeline>
<codeline lineno="1940"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RADIO_RSSISAMPLE_RSSISAMPLE_Pos);</highlight></codeline>
<codeline lineno="1941"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1942"><highlight class="normal"></highlight></codeline>
<codeline lineno="1943"><highlight class="normal">NRF_STATIC_INLINE<sp/><ref refid="group__nrf__radio__hal_1ga4ea9b1af13c23dc9316d60ca649b71dc" kindref="member">nrf_radio_state_t</ref><sp/><ref refid="group__nrf__radio__hal_1gacfe496cdb278f3616df3e8aa187e8f28" kindref="member">nrf_radio_state_get</ref>(NRF_RADIO_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="1944"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1945"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="group__nrf__radio__hal_1ga4ea9b1af13c23dc9316d60ca649b71dc" kindref="member">nrf_radio_state_t</ref>)<sp/>p_reg-&gt;STATE;</highlight></codeline>
<codeline lineno="1946"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1947"><highlight class="normal"></highlight></codeline>
<codeline lineno="1948"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__radio__hal_1ga638aefc787fd5638fb94119e368f71ae" kindref="member">nrf_radio_datawhiteiv_set</ref>(NRF_RADIO_Type<sp/>*<sp/>p_reg,<sp/>uint8_t<sp/>datawhiteiv)</highlight></codeline>
<codeline lineno="1949"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1950"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(RADIO_DATAWHITEIV_DATAWHITEIV_Msk)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1951"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;DATAWHITEIV<sp/>=<sp/>(((uint32_t)datawhiteiv)<sp/>&amp;<sp/>RADIO_DATAWHITEIV_DATAWHITEIV_Msk);</highlight></codeline>
<codeline lineno="1952"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1953"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;DATAWHITE<sp/>&amp;=<sp/>~RADIO_DATAWHITE_IV_Msk<sp/>|<sp/>(((uint32_t)datawhiteiv<sp/>&lt;&lt;<sp/>RADIO_DATAWHITE_IV_Pos)</highlight></codeline>
<codeline lineno="1954"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;<sp/>RADIO_DATAWHITE_IV_Msk);</highlight></codeline>
<codeline lineno="1955"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1956"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1957"><highlight class="normal"></highlight></codeline>
<codeline lineno="1958"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint8_t<sp/><ref refid="group__nrf__radio__hal_1ga0aabddcd53ebbebe965f6ad38ab292bc" kindref="member">nrf_radio_datawhiteiv_get</ref>(NRF_RADIO_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="1959"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1960"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(RADIO_DATAWHITEIV_DATAWHITEIV_Msk)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1961"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(uint8_t)(p_reg-&gt;DATAWHITEIV<sp/>&amp;<sp/>RADIO_DATAWHITEIV_DATAWHITEIV_Msk);</highlight></codeline>
<codeline lineno="1962"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1963"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(uint8_t)((p_reg-&gt;DATAWHITE<sp/>&amp;<sp/>RADIO_DATAWHITE_IV_Msk)<sp/>&gt;&gt;<sp/>RADIO_DATAWHITE_IV_Pos);</highlight></codeline>
<codeline lineno="1964"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1965"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1966"><highlight class="normal"></highlight></codeline>
<codeline lineno="1967"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__radio__hal_1ga54628c088d83bea509646485b829682d" kindref="member">nrf_radio_bcc_set</ref>(NRF_RADIO_Type<sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>radio_bcc)</highlight></codeline>
<codeline lineno="1968"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1969"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;BCC<sp/>=<sp/>radio_bcc;</highlight></codeline>
<codeline lineno="1970"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1971"><highlight class="normal"></highlight></codeline>
<codeline lineno="1972"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__radio__hal_1gabde34a675642ac812c9a94d8cd7b8c69" kindref="member">nrf_radio_bcc_get</ref>(NRF_RADIO_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="1973"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1974"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p_reg-&gt;BCC;</highlight></codeline>
<codeline lineno="1975"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1976"><highlight class="normal"></highlight></codeline>
<codeline lineno="1977"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__radio__hal_1ga4d7da491132adbd997aa6cf6f96ae61a" kindref="member">nrf_radio_dab_set</ref>(NRF_RADIO_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="1978"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dab_value,</highlight></codeline>
<codeline lineno="1979"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>segment)</highlight></codeline>
<codeline lineno="1980"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1981"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__glue_1ga9698a3f6b6bea455d2b54a79e514ee36" kindref="member">NRFX_ASSERT</ref>(segment<sp/>&lt;<sp/>8);</highlight></codeline>
<codeline lineno="1982"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;DAB[segment]<sp/>=<sp/>dab_value;</highlight></codeline>
<codeline lineno="1983"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1984"><highlight class="normal"></highlight></codeline>
<codeline lineno="1985"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__radio__hal_1gac0d3c65514eab7218eb4d44a5b3e5b1d" kindref="member">nrf_radio_dab_get</ref>(NRF_RADIO_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,<sp/>uint8_t<sp/>segment)</highlight></codeline>
<codeline lineno="1986"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1987"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__glue_1ga9698a3f6b6bea455d2b54a79e514ee36" kindref="member">NRFX_ASSERT</ref>(segment<sp/>&lt;<sp/>8);</highlight></codeline>
<codeline lineno="1988"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p_reg-&gt;DAB[segment];</highlight></codeline>
<codeline lineno="1989"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1990"><highlight class="normal"></highlight></codeline>
<codeline lineno="1991"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__radio__hal_1ga9517e6bc36dabadec2a92e069503e2fa" kindref="member">nrf_radio_dap_set</ref>(NRF_RADIO_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="1992"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint16_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dap_value,</highlight></codeline>
<codeline lineno="1993"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prefix_index)</highlight></codeline>
<codeline lineno="1994"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1995"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__glue_1ga9698a3f6b6bea455d2b54a79e514ee36" kindref="member">NRFX_ASSERT</ref>(prefix_index<sp/>&lt;<sp/>8);</highlight></codeline>
<codeline lineno="1996"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;DAP[prefix_index]<sp/>=<sp/>(uint32_t)dap_value;</highlight></codeline>
<codeline lineno="1997"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1998"><highlight class="normal"></highlight></codeline>
<codeline lineno="1999"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__radio__hal_1gac4aeecef4b8bf243b041d95a1a707b75" kindref="member">nrf_radio_dap_get</ref>(NRF_RADIO_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,<sp/>uint8_t<sp/>prefix_index)</highlight></codeline>
<codeline lineno="2000"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2001"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__glue_1ga9698a3f6b6bea455d2b54a79e514ee36" kindref="member">NRFX_ASSERT</ref>(prefix_index<sp/>&lt;<sp/>8);</highlight></codeline>
<codeline lineno="2002"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p_reg-&gt;DAP[prefix_index];</highlight></codeline>
<codeline lineno="2003"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2004"><highlight class="normal"></highlight></codeline>
<codeline lineno="2005"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__radio__hal_1ga5111f4c5b1f8e556bd074212207b73fa" kindref="member">nrf_radio_dacnf_set</ref>(NRF_RADIO_Type<sp/>*<sp/>p_reg,<sp/>uint8_t<sp/>ena,<sp/>uint8_t<sp/>txadd)</highlight></codeline>
<codeline lineno="2006"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2007"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;DACNF<sp/>=<sp/>(((uint32_t)ena<sp/><sp/><sp/>&lt;&lt;<sp/>RADIO_DACNF_ENA0_Pos)<sp/>|</highlight></codeline>
<codeline lineno="2008"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)txadd<sp/>&lt;&lt;<sp/>RADIO_DACNF_TXADD0_Pos));</highlight></codeline>
<codeline lineno="2009"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2010"><highlight class="normal"></highlight></codeline>
<codeline lineno="2011"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint8_t<sp/><ref refid="group__nrf__radio__hal_1ga3fc6cb32144b31cd6cb23317031baa14" kindref="member">nrf_radio_dacnf_ena_get</ref>(NRF_RADIO_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="2012"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2013"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(uint8_t)((p_reg-&gt;DACNF<sp/>&amp;<sp/>(RADIO_DACNF_ENA0_Msk<sp/>|</highlight></codeline>
<codeline lineno="2014"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RADIO_DACNF_ENA1_Msk<sp/>|</highlight></codeline>
<codeline lineno="2015"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RADIO_DACNF_ENA2_Msk<sp/>|</highlight></codeline>
<codeline lineno="2016"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RADIO_DACNF_ENA3_Msk<sp/>|</highlight></codeline>
<codeline lineno="2017"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RADIO_DACNF_ENA4_Msk<sp/>|</highlight></codeline>
<codeline lineno="2018"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RADIO_DACNF_ENA5_Msk<sp/>|</highlight></codeline>
<codeline lineno="2019"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RADIO_DACNF_ENA6_Msk<sp/>|</highlight></codeline>
<codeline lineno="2020"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RADIO_DACNF_ENA7_Msk))<sp/>&gt;&gt;<sp/>RADIO_DACNF_ENA0_Pos);</highlight></codeline>
<codeline lineno="2021"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2022"><highlight class="normal"></highlight></codeline>
<codeline lineno="2023"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint8_t<sp/><ref refid="group__nrf__radio__hal_1ga97152ce4b608445f2b011b6268efdf9a" kindref="member">nrf_radio_dacnf_txadd_get</ref>(NRF_RADIO_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="2024"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2025"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(uint8_t)((p_reg-&gt;DACNF<sp/>&amp;<sp/>(RADIO_DACNF_TXADD0_Msk<sp/>|</highlight></codeline>
<codeline lineno="2026"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RADIO_DACNF_TXADD1_Msk<sp/>|</highlight></codeline>
<codeline lineno="2027"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RADIO_DACNF_TXADD2_Msk<sp/>|</highlight></codeline>
<codeline lineno="2028"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RADIO_DACNF_TXADD3_Msk<sp/>|</highlight></codeline>
<codeline lineno="2029"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RADIO_DACNF_TXADD4_Msk<sp/>|</highlight></codeline>
<codeline lineno="2030"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RADIO_DACNF_TXADD5_Msk<sp/>|</highlight></codeline>
<codeline lineno="2031"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RADIO_DACNF_TXADD6_Msk<sp/>|</highlight></codeline>
<codeline lineno="2032"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RADIO_DACNF_TXADD7_Msk))<sp/>&gt;&gt;<sp/>RADIO_DACNF_TXADD0_Pos);</highlight></codeline>
<codeline lineno="2033"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2034"><highlight class="normal"></highlight></codeline>
<codeline lineno="2035"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(RADIO_INTENSET_MHRMATCH_Msk)<sp/>||<sp/>defined(RADIO_INTENSET00_MHRMATCH_Msk)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2036"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__radio__hal_1gafe19206475193a6ae885d35aa717621d" kindref="member">nrf_radio_mhmu_search_pattern_set</ref>(NRF_RADIO_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="2037"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>radio_mhmu_search_pattern)</highlight></codeline>
<codeline lineno="2038"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2039"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;MHRMATCHCONF<sp/>=<sp/>radio_mhmu_search_pattern;</highlight></codeline>
<codeline lineno="2040"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2041"><highlight class="normal"></highlight></codeline>
<codeline lineno="2042"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__radio__hal_1ga6c661a8c9632e1c65a54d90c2db249db" kindref="member">nrf_radio_mhmu_search_pattern_get</ref>(NRF_RADIO_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="2043"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2044"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p_reg-&gt;MHRMATCHCONF;</highlight></codeline>
<codeline lineno="2045"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2046"><highlight class="normal"></highlight></codeline>
<codeline lineno="2047"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__radio__hal_1ga9a0edc87214f5b7df9bbb5b51c23e642" kindref="member">nrf_radio_mhmu_pattern_mask_set</ref>(NRF_RADIO_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="2048"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>radio_mhmu_pattern_mask)</highlight></codeline>
<codeline lineno="2049"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2050"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(RADIO_MHRMATCHMAS_MHRMATCHMAS_Msk)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2051"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;MHRMATCHMAS<sp/>=<sp/>radio_mhmu_pattern_mask;</highlight></codeline>
<codeline lineno="2052"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2053"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;MHRMATCHMASK<sp/>=<sp/>radio_mhmu_pattern_mask;</highlight></codeline>
<codeline lineno="2054"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2055"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2056"><highlight class="normal"></highlight></codeline>
<codeline lineno="2057"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__radio__hal_1gaa41d70217e353ef904b325a74048b9ba" kindref="member">nrf_radio_mhmu_pattern_mask_get</ref>(NRF_RADIO_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="2058"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2059"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(RADIO_MHRMATCHMAS_MHRMATCHMAS_Msk)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2060"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p_reg-&gt;MHRMATCHMAS;</highlight></codeline>
<codeline lineno="2061"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2062"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p_reg-&gt;MHRMATCHMASK;</highlight></codeline>
<codeline lineno="2063"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2064"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2065"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>defined(RADIO_INTENSET_MHRMATCH_Msk)<sp/>||<sp/>defined(RADIO_INTENSET00_MHRMATCH_Msk)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2066"><highlight class="normal"></highlight></codeline>
<codeline lineno="2067"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(RADIO_MODECNF0_RU_Msk)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2068"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__radio__hal_1ga3012c9c314425548a834f0d420fff667" kindref="member">nrf_radio_modecnf0_set</ref>(NRF_RADIO_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="2069"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fast_ramp_up,</highlight></codeline>
<codeline lineno="2070"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>default_tx)</highlight></codeline>
<codeline lineno="2071"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2072"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;MODECNF0<sp/>=<sp/>(fast_ramp_up<sp/>?<sp/>(RADIO_MODECNF0_RU_Fast<sp/><sp/><sp/><sp/>&lt;&lt;<sp/>RADIO_MODECNF0_RU_Pos)<sp/>:</highlight></codeline>
<codeline lineno="2073"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(RADIO_MODECNF0_RU_Default<sp/>&lt;&lt;<sp/>RADIO_MODECNF0_RU_Pos)<sp/>)<sp/>|</highlight></codeline>
<codeline lineno="2074"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(((uint32_t)default_tx)<sp/>&lt;&lt;<sp/>RADIO_MODECNF0_DTX_Pos);</highlight></codeline>
<codeline lineno="2075"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2076"><highlight class="normal"></highlight></codeline>
<codeline lineno="2077"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrf__radio__hal_1gac1b7d1e3365a889f4e5eec2301f44b23" kindref="member">nrf_radio_modecnf0_ru_get</ref>(NRF_RADIO_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="2078"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2079"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((p_reg-&gt;MODECNF0<sp/>&amp;<sp/>RADIO_MODECNF0_RU_Msk)<sp/>&gt;&gt;<sp/>RADIO_MODECNF0_RU_Pos)<sp/>==</highlight></codeline>
<codeline lineno="2080"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RADIO_MODECNF0_RU_Fast;</highlight></codeline>
<codeline lineno="2081"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2082"><highlight class="normal"></highlight></codeline>
<codeline lineno="2083"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint8_t<sp/><ref refid="group__nrf__radio__hal_1gad111d826a2e9d30e9e72b10410ada319" kindref="member">nrf_radio_modecnf0_dtx_get</ref>(NRF_RADIO_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="2084"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2085"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(uint8_t)((p_reg-&gt;MODECNF0<sp/>&amp;<sp/>RADIO_MODECNF0_DTX_Msk)<sp/>&gt;&gt;<sp/>RADIO_MODECNF0_DTX_Pos);</highlight></codeline>
<codeline lineno="2086"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2087"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>defined(RADIO_MODECNF0_RU_Msk)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2088"><highlight class="normal"></highlight></codeline>
<codeline lineno="2089"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(RADIO_MODECNF0_RU_Msk)<sp/>||<sp/>defined(RADIO_TIMING_RU_Msk)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2090"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__radio__hal_1gac3f588610775bd5e7ac12a63ef6690c6" kindref="member">nrf_radio_fast_ramp_up_enable_set</ref>(NRF_RADIO_Type<sp/>*<sp/>p_reg,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>enable)</highlight></codeline>
<codeline lineno="2091"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2092"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(RADIO_TIMING_RU_Msk)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2093"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;TIMING<sp/>=<sp/>(enable<sp/>?<sp/>RADIO_TIMING_RU_Fast<sp/>:<sp/>RADIO_TIMING_RU_Legacy)<sp/>&lt;&lt;</highlight></codeline>
<codeline lineno="2094"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RADIO_TIMING_RU_Pos;</highlight></codeline>
<codeline lineno="2095"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(RADIO_MODECNF0_RU_Msk)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2096"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;MODECNF0<sp/>=<sp/>((p_reg-&gt;MODECNF0<sp/>&amp;<sp/>(~RADIO_MODECNF0_RU_Msk))<sp/>|</highlight></codeline>
<codeline lineno="2097"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(enable<sp/>?<sp/>RADIO_MODECNF0_RU_Fast<sp/>:<sp/>RADIO_MODECNF0_RU_Default)<sp/>&lt;&lt;</highlight></codeline>
<codeline lineno="2098"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RADIO_MODECNF0_RU_Pos);</highlight></codeline>
<codeline lineno="2099"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2100"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2101"><highlight class="normal"></highlight></codeline>
<codeline lineno="2102"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrf__radio__hal_1gad270e10d0413260e0ec3cc6c99ac1d5c" kindref="member">nrf_radio_fast_ramp_up_check</ref>(NRF_RADIO_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="2103"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2104"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(RADIO_TIMING_RU_Msk)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2105"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((p_reg-&gt;TIMING<sp/>&amp;<sp/>RADIO_TIMING_RU_Msk)<sp/>&gt;&gt;<sp/>RADIO_TIMING_RU_Pos)<sp/>==<sp/>RADIO_TIMING_RU_Fast;</highlight></codeline>
<codeline lineno="2106"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(RADIO_MODECNF0_RU_Msk)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2107"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((p_reg-&gt;MODECNF0<sp/>&amp;<sp/>RADIO_MODECNF0_RU_Msk)<sp/>&gt;&gt;<sp/>RADIO_MODECNF0_RU_Pos)<sp/>==</highlight></codeline>
<codeline lineno="2108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RADIO_MODECNF0_RU_Fast;</highlight></codeline>
<codeline lineno="2109"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2110"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2111"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2112"><highlight class="normal"></highlight></codeline>
<codeline lineno="2113"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(RADIO_SFD_SFD_Msk)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2114"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__radio__hal_1gabe40e1e0f7ef1d6d0a3266875dc9a426" kindref="member">nrf_radio_sfd_set</ref>(NRF_RADIO_Type<sp/>*<sp/>p_reg,<sp/>uint8_t<sp/>sfd)</highlight></codeline>
<codeline lineno="2115"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2116"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;SFD<sp/>=<sp/>((uint32_t)sfd)<sp/>&lt;&lt;<sp/>RADIO_SFD_SFD_Pos;</highlight></codeline>
<codeline lineno="2117"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2118"><highlight class="normal"></highlight></codeline>
<codeline lineno="2119"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint8_t<sp/><ref refid="group__nrf__radio__hal_1gae093ea5b904d9f957a7cc91d74232f79" kindref="member">nrf_radio_sfd_get</ref>(NRF_RADIO_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="2120"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2121"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(uint8_t)((p_reg-&gt;SFD<sp/>&amp;<sp/>RADIO_SFD_SFD_Msk)<sp/>&gt;&gt;<sp/>RADIO_SFD_SFD_Pos);</highlight></codeline>
<codeline lineno="2122"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2123"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>defined(RADIO_SFD_SFD_Msk)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2124"><highlight class="normal"></highlight></codeline>
<codeline lineno="2125"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(RADIO_EDCNT_EDCNT_Msk)<sp/>||<sp/>defined(RADIO_EDCTRL_EDCNT_Msk)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2126"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__radio__hal_1gaf5aa628960e620b1aa2fcfd30222ab4c" kindref="member">nrf_radio_ed_loop_count_set</ref>(NRF_RADIO_Type<sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>ed_loop_count)</highlight></codeline>
<codeline lineno="2127"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2128"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(RADIO_EDCNT_EDCNT_Msk)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2129"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;EDCNT<sp/>=<sp/>(ed_loop_count<sp/>&amp;<sp/>RADIO_EDCNT_EDCNT_Msk);</highlight></codeline>
<codeline lineno="2130"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(RADIO_EDCTRL_EDCNT_Msk)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2131"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;EDCTRL<sp/>=<sp/>((p_reg-&gt;EDCTRL<sp/>&amp;<sp/>~RADIO_EDCTRL_EDCNT_Msk)<sp/>|</highlight></codeline>
<codeline lineno="2132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((ed_loop_count<sp/>&lt;&lt;<sp/>RADIO_EDCTRL_EDCNT_Pos)<sp/>&amp;<sp/>RADIO_EDCTRL_EDCNT_Msk));</highlight></codeline>
<codeline lineno="2133"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2134"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2135"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2136"><highlight class="normal"></highlight></codeline>
<codeline lineno="2137"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(RADIO_EDCTRL_EDPERIOD_Msk)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2138"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__radio__hal_1ga871ffceb643be94c3376ec357faa5a8c" kindref="member">nrf_radio_ed_cca_period_set</ref>(NRF_RADIO_Type<sp/>*<sp/>p_reg,<sp/>uint8_t<sp/>ed_period)</highlight></codeline>
<codeline lineno="2139"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2140"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;EDCTRL<sp/>=<sp/>((p_reg-&gt;EDCTRL<sp/>&amp;<sp/>~RADIO_EDCTRL_EDPERIOD_Msk)<sp/>|</highlight></codeline>
<codeline lineno="2141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((ed_period<sp/>&lt;&lt;<sp/>RADIO_EDCTRL_EDPERIOD_Pos)<sp/>&amp;<sp/>RADIO_EDCTRL_EDPERIOD_Msk));</highlight></codeline>
<codeline lineno="2142"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2143"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2144"><highlight class="normal"></highlight></codeline>
<codeline lineno="2145"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(RADIO_EDSAMPLE_EDLVL_Msk)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2146"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint8_t<sp/><ref refid="group__nrf__radio__hal_1ga11647a756f741617dd218c0d9941fd0a" kindref="member">nrf_radio_ed_sample_get</ref>(NRF_RADIO_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="2147"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2148"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(uint8_t)<sp/>p_reg-&gt;EDSAMPLE;</highlight></codeline>
<codeline lineno="2149"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2150"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2151"><highlight class="normal"></highlight></codeline>
<codeline lineno="2152"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(RADIO_CCACTRL_CCAMODE_Msk)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2153"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__radio__hal_1gad942e9cf952a63f69d1511bfbc565050" kindref="member">nrf_radio_cca_configure</ref>(NRF_RADIO_Type<sp/>*<sp/><sp/><sp/><sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="2154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__radio__hal_1gacd20cabadc17d4eae37fff80f4e9d1e5" kindref="member">nrf_radio_cca_mode_t</ref><sp/>cca_mode,</highlight></codeline>
<codeline lineno="2155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cca_ed_threshold,</highlight></codeline>
<codeline lineno="2156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cca_corr_threshold,</highlight></codeline>
<codeline lineno="2157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cca_corr_cnt)</highlight></codeline>
<codeline lineno="2158"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2159"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;CCACTRL<sp/>=<sp/>(((uint32_t)cca_mode<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>RADIO_CCACTRL_CCAMODE_Pos)<sp/>|</highlight></codeline>
<codeline lineno="2160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)cca_ed_threshold<sp/><sp/><sp/>&lt;&lt;<sp/>RADIO_CCACTRL_CCAEDTHRES_Pos)<sp/>|</highlight></codeline>
<codeline lineno="2161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)cca_corr_threshold<sp/>&lt;&lt;<sp/>RADIO_CCACTRL_CCACORRTHRES_Pos)<sp/>|</highlight></codeline>
<codeline lineno="2162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)cca_corr_cnt<sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>RADIO_CCACTRL_CCACORRCNT_Pos));</highlight></codeline>
<codeline lineno="2163"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2164"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2165"><highlight class="normal"></highlight></codeline>
<codeline lineno="2166"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(RADIO_POWER_POWER_Msk)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2167"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__radio__hal_1ga382aeec6648cdb3fe1bc9355f076a900" kindref="member">nrf_radio_power_set</ref>(NRF_RADIO_Type<sp/>*<sp/>p_reg,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>radio_power)</highlight></codeline>
<codeline lineno="2168"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2169"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;POWER<sp/>=<sp/>(radio_power<sp/>?<sp/>RADIO_POWER_POWER_Enabled<sp/>:<sp/>RADIO_POWER_POWER_Disabled)</highlight></codeline>
<codeline lineno="2170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>RADIO_POWER_POWER_Pos;</highlight></codeline>
<codeline lineno="2171"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2172"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2173"><highlight class="normal"></highlight></codeline>
<codeline lineno="2174"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(RADIO_CTESTATUS_CTETIME_Msk)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2175"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__radio__hal_1ga3a92fd06c78602b07c884d1c96575e69" kindref="member">nrf_radio_cte_time_get</ref>(NRF_RADIO_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="2176"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2177"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((p_reg-&gt;CTESTATUS<sp/>&amp;<sp/>RADIO_CTESTATUS_CTETIME_Msk)<sp/>&gt;&gt;<sp/>RADIO_CTESTATUS_CTETIME_Pos);</highlight></codeline>
<codeline lineno="2178"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2179"><highlight class="normal"></highlight></codeline>
<codeline lineno="2180"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__radio__hal_1gac310385e2369f66495ebd5fca7e8d0b2" kindref="member">nrf_radio_cte_type_get</ref>(NRF_RADIO_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="2181"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2182"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((p_reg-&gt;CTESTATUS<sp/>&amp;<sp/>RADIO_CTESTATUS_CTETYPE_Msk)<sp/>&gt;&gt;<sp/>RADIO_CTESTATUS_CTETYPE_Pos);</highlight></codeline>
<codeline lineno="2183"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2184"><highlight class="normal"></highlight></codeline>
<codeline lineno="2185"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__radio__hal_1ga13bcf8cdfb3176b80f158854377378d8" kindref="member">nrf_radio_cte_rfu_get</ref>(NRF_RADIO_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="2186"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2187"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((p_reg-&gt;CTESTATUS<sp/>&amp;<sp/>RADIO_CTESTATUS_RFU_Msk)<sp/>&gt;&gt;<sp/>RADIO_CTESTATUS_RFU_Pos);</highlight></codeline>
<codeline lineno="2188"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2189"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2190"><highlight class="normal"></highlight></codeline>
<codeline lineno="2191"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(RADIO_DFESTATUS_SWITCHINGSTATE_Msk)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2192"><highlight class="normal">NRF_STATIC_INLINE</highlight></codeline>
<codeline lineno="2193"><highlight class="normal"><ref refid="group__nrf__radio__hal_1gaa6632d62276bfec4138e0688d5f73018" kindref="member">nrf_radio_dfe_switch_state_t</ref><sp/><ref refid="group__nrf__radio__hal_1ga35f330bc5182d63d72bb32bab2174ef8" kindref="member">nrf_radio_dfe_switch_state_get</ref>(NRF_RADIO_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="2194"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2195"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="group__nrf__radio__hal_1gaa6632d62276bfec4138e0688d5f73018" kindref="member">nrf_radio_dfe_switch_state_t</ref>)((p_reg-&gt;DFESTATUS<sp/>&amp;<sp/>RADIO_DFESTATUS_SWITCHINGSTATE_Msk)<sp/>&gt;&gt;</highlight></codeline>
<codeline lineno="2196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RADIO_DFESTATUS_SWITCHINGSTATE_Pos);</highlight></codeline>
<codeline lineno="2197"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2198"><highlight class="normal"></highlight></codeline>
<codeline lineno="2199"><highlight class="normal">NRF_STATIC_INLINE</highlight></codeline>
<codeline lineno="2200"><highlight class="normal"><ref refid="group__nrf__radio__hal_1ga8b27d0e94d3c0d4589d8876018cdcc7b" kindref="member">nrf_radio_dfe_sample_state_t</ref><sp/><ref refid="group__nrf__radio__hal_1ga92671cc220fed35d612c0f81f85fe0ff" kindref="member">nrf_radio_dfe_sample_state_get</ref>(NRF_RADIO_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="2201"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2202"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="group__nrf__radio__hal_1ga8b27d0e94d3c0d4589d8876018cdcc7b" kindref="member">nrf_radio_dfe_sample_state_t</ref>)((p_reg-&gt;DFESTATUS<sp/>&amp;<sp/>RADIO_DFESTATUS_SAMPLINGSTATE_Msk)<sp/>&gt;&gt;</highlight></codeline>
<codeline lineno="2203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RADIO_DFESTATUS_SAMPLINGSTATE_Pos);</highlight></codeline>
<codeline lineno="2204"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2205"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2206"><highlight class="normal"></highlight></codeline>
<codeline lineno="2207"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(RADIO_CTEINLINECONF_S0CONF_Msk)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2208"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__radio__hal_1ga46900b20699091144a2a989feaff0a66" kindref="member">nrf_radio_cteinline_configure</ref>(NRF_RADIO_Type<sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="2209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structnrf__radio__cteinline__conf__t" kindref="compound">nrf_radio_cteinline_conf_t</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_config)</highlight></codeline>
<codeline lineno="2210"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2211"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;CTEINLINECONF<sp/>=<sp/>(((p_config-&gt;<ref refid="structnrf__radio__cteinline__conf__t_1afd4eece238b2a2aa263153f9ba228c39" kindref="member">enable</ref><sp/>?</highlight></codeline>
<codeline lineno="2212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RADIO_CTEINLINECONF_CTEINLINECTRLEN_Enabled<sp/>:</highlight></codeline>
<codeline lineno="2213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RADIO_CTEINLINECONF_CTEINLINECTRLEN_Disabled)<sp/>&lt;&lt;</highlight></codeline>
<codeline lineno="2214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RADIO_CTEINLINECONF_CTEINLINECTRLEN_Pos<sp/>)<sp/>|</highlight></codeline>
<codeline lineno="2215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((p_config-&gt;<ref refid="structnrf__radio__cteinline__conf__t_1aa543709d6243650a00df3eecc31ade3e" kindref="member">info_in_s1</ref><sp/>?</highlight></codeline>
<codeline lineno="2216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RADIO_CTEINLINECONF_CTEINFOINS1_InS1<sp/>:</highlight></codeline>
<codeline lineno="2217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RADIO_CTEINLINECONF_CTEINFOINS1_NotInS1)<sp/>&lt;&lt;</highlight></codeline>
<codeline lineno="2218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RADIO_CTEINLINECONF_CTEINFOINS1_Pos<sp/>)<sp/>|</highlight></codeline>
<codeline lineno="2219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((p_config-&gt;<ref refid="structnrf__radio__cteinline__conf__t_1a7cacd55af1dcc67b6156182d39da6794" kindref="member">err_handling</ref><sp/>?</highlight></codeline>
<codeline lineno="2220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RADIO_CTEINLINECONF_CTEERRORHANDLING_Yes<sp/>:</highlight></codeline>
<codeline lineno="2221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RADIO_CTEINLINECONF_CTEERRORHANDLING_No)<sp/>&lt;&lt;</highlight></codeline>
<codeline lineno="2222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RADIO_CTEINLINECONF_CTEERRORHANDLING_Pos<sp/>)<sp/>|</highlight></codeline>
<codeline lineno="2223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)p_config-&gt;<ref refid="structnrf__radio__cteinline__conf__t_1a35e649a13f4e5026a3ba2dba5d802ade" kindref="member">time_range</ref><sp/>&lt;&lt;</highlight></codeline>
<codeline lineno="2224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RADIO_CTEINLINECONF_CTETIMEVALIDRANGE_Pos)<sp/>|</highlight></codeline>
<codeline lineno="2225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)p_config-&gt;<ref refid="structnrf__radio__cteinline__conf__t_1a4cb5f1223d86f992b6b9b30d99251a2e" kindref="member">rx1us</ref><sp/>&lt;&lt;</highlight></codeline>
<codeline lineno="2226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RADIO_CTEINLINECONF_CTEINLINERXMODE1US_Pos)<sp/>|</highlight></codeline>
<codeline lineno="2227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)p_config-&gt;<ref refid="structnrf__radio__cteinline__conf__t_1a2af9ff48ae125f2c5aaddec4bbe08d69" kindref="member">rx2us</ref><sp/>&lt;&lt;</highlight></codeline>
<codeline lineno="2228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RADIO_CTEINLINECONF_CTEINLINERXMODE2US_Pos)<sp/>|</highlight></codeline>
<codeline lineno="2229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)p_config-&gt;<ref refid="structnrf__radio__cteinline__conf__t_1a9a2857fdd79a5d4a1b2592831795a6ca" kindref="member">s0_pattern</ref><sp/>&lt;&lt;<sp/>RADIO_CTEINLINECONF_S0CONF_Pos)<sp/>|</highlight></codeline>
<codeline lineno="2230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)p_config-&gt;<ref refid="structnrf__radio__cteinline__conf__t_1acb34a709e54573229bb5b0254155e2f0" kindref="member">s0_mask</ref><sp/>&lt;&lt;<sp/>RADIO_CTEINLINECONF_S0MASK_Pos));</highlight></codeline>
<codeline lineno="2231"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2232"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2233"><highlight class="normal"></highlight></codeline>
<codeline lineno="2234"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(RADIO_DFECTRL1_NUMBEROF8US_Msk)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2235"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__radio__hal_1gab31f9189c3a898cde71ec102792a3b67" kindref="member">nrf_radio_dfectrl_configure</ref>(NRF_RADIO_Type<sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="2236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structnrf__radio__dfectrl__conf__t" kindref="compound">nrf_radio_dfectrl_conf_t</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_config)</highlight></codeline>
<codeline lineno="2237"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2238"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;DFECTRL1<sp/>=<sp/>((((uint32_t)p_config-&gt;<ref refid="structnrf__radio__dfectrl__conf__t_1a942aa2a6a9fad81cfcd0fbdea0759516" kindref="member">dfe_len</ref><sp/>&lt;&lt;<sp/>RADIO_DFECTRL1_NUMBEROF8US_Pos)<sp/>&amp;</highlight></codeline>
<codeline lineno="2239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RADIO_DFECTRL1_NUMBEROF8US_Msk)<sp/>|</highlight></codeline>
<codeline lineno="2240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)p_config-&gt;<ref refid="structnrf__radio__dfectrl__conf__t_1a08d484cbcf91ea9595cb3ed7ff95fcea" kindref="member">extension</ref><sp/>&lt;&lt;<sp/>RADIO_DFECTRL1_DFEINEXTENSION_Pos)<sp/>|</highlight></codeline>
<codeline lineno="2241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)p_config-&gt;<ref refid="structnrf__radio__dfectrl__conf__t_1a3489c4165b04ef1aab7889b9592fc80e" kindref="member">switch_spacing</ref><sp/>&lt;&lt;<sp/>RADIO_DFECTRL1_TSWITCHSPACING_Pos)<sp/>|</highlight></codeline>
<codeline lineno="2242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)p_config-&gt;<ref refid="structnrf__radio__dfectrl__conf__t_1a7468fc15da76e1aa8a4fb0f050e9ba66" kindref="member">spacing_ref</ref><sp/>&lt;&lt;<sp/>RADIO_DFECTRL1_TSAMPLESPACINGREF_Pos)<sp/>|</highlight></codeline>
<codeline lineno="2243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)p_config-&gt;<ref refid="structnrf__radio__dfectrl__conf__t_1a56be3b1ae4227e1c7fe1d010a0c001bf" kindref="member">sample_type</ref><sp/>&lt;&lt;<sp/>RADIO_DFECTRL1_SAMPLETYPE_Pos)<sp/>|</highlight></codeline>
<codeline lineno="2244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)p_config-&gt;<ref refid="structnrf__radio__dfectrl__conf__t_1a1f2b34761c6bf05ec04025a126ccfb7c" kindref="member">sample_spacing</ref><sp/>&lt;&lt;<sp/>RADIO_DFECTRL1_TSAMPLESPACING_Pos)<sp/>|</highlight></codeline>
<codeline lineno="2245"><highlight class="normal">#</highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>defined(RADIO_DFECTRL1_REPEATPATTERN_Msk)</highlight></codeline>
<codeline lineno="2246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(((uint32_t)p_config-&gt;repeat_pattern<sp/>&lt;&lt;<sp/>RADIO_DFECTRL1_REPEATPATTERN_Pos)<sp/>&amp;</highlight></codeline>
<codeline lineno="2247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RADIO_DFECTRL1_REPEATPATTERN_Msk)<sp/>|</highlight></codeline>
<codeline lineno="2248"><highlight class="normal">#endif</highlight></codeline>
<codeline lineno="2249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(((uint32_t)p_config-&gt;<ref refid="structnrf__radio__dfectrl__conf__t_1acf34a13afd59363062280fafcbf4ee15" kindref="member">gain_steps</ref><sp/>&lt;&lt;<sp/>RADIO_DFECTRL1_AGCBACKOFFGAIN_Pos)<sp/>&amp;</highlight></codeline>
<codeline lineno="2250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RADIO_DFECTRL1_AGCBACKOFFGAIN_Msk));</highlight></codeline>
<codeline lineno="2251"><highlight class="normal"></highlight></codeline>
<codeline lineno="2252"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;DFECTRL2<sp/>=<sp/>((((uint32_t)p_config-&gt;<ref refid="structnrf__radio__dfectrl__conf__t_1a4a4a6a807a7357148ca6828e2ccd810d" kindref="member">switch_offset</ref><sp/>&lt;&lt;<sp/>RADIO_DFECTRL2_TSWITCHOFFSET_Pos)<sp/>&amp;</highlight></codeline>
<codeline lineno="2253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RADIO_DFECTRL2_TSWITCHOFFSET_Msk)<sp/>|</highlight></codeline>
<codeline lineno="2254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(((uint32_t)p_config-&gt;<ref refid="structnrf__radio__dfectrl__conf__t_1a7e01a063393c5d191cc4fd28d633825e" kindref="member">sample_offset</ref><sp/>&lt;&lt;<sp/>RADIO_DFECTRL2_TSAMPLEOFFSET_Pos)<sp/>&amp;</highlight></codeline>
<codeline lineno="2255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RADIO_DFECTRL2_TSAMPLEOFFSET_Msk));</highlight></codeline>
<codeline lineno="2256"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2257"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2258"><highlight class="normal"></highlight></codeline>
<codeline lineno="2259"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(RADIO_SWITCHPATTERN_SWITCHPATTERN_Msk)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2260"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__radio__hal_1ga3d5f4a42eb4bd4399bcfb240ae71c64f" kindref="member">nrf_radio_dfe_pattern_pin_set</ref>(NRF_RADIO_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="2261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pin,</highlight></codeline>
<codeline lineno="2262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pos)</highlight></codeline>
<codeline lineno="2263"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2264"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;PSEL.DFEGPIO[pos]<sp/>=<sp/>pin;</highlight></codeline>
<codeline lineno="2265"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2266"><highlight class="normal"></highlight></codeline>
<codeline lineno="2267"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__radio__hal_1gaabee02c2cd5d2757c44150b2ab376b34" kindref="member">nrf_radio_dfe_pattern_add</ref>(NRF_RADIO_Type<sp/>*<sp/>p_reg,<sp/>uint8_t<sp/>pin_mask)</highlight></codeline>
<codeline lineno="2268"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2269"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;SWITCHPATTERN<sp/>=<sp/>(uint32_t)pin_mask;</highlight></codeline>
<codeline lineno="2270"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2271"><highlight class="normal"></highlight></codeline>
<codeline lineno="2272"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__radio__hal_1ga8d1b32585d9a0275667438eafb0fe9ff" kindref="member">nrf_radio_dfe_patterns_add</ref>(NRF_RADIO_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="2273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/><sp/>p_pin_masks,</highlight></codeline>
<codeline lineno="2274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>length)</highlight></codeline>
<codeline lineno="2275"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2276"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>length;<sp/>i++)</highlight></codeline>
<codeline lineno="2277"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__radio__hal_1gaabee02c2cd5d2757c44150b2ab376b34" kindref="member">nrf_radio_dfe_pattern_add</ref>(p_reg,<sp/>p_pin_masks[i]);</highlight></codeline>
<codeline lineno="2279"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2280"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2281"><highlight class="normal"></highlight></codeline>
<codeline lineno="2282"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__radio__hal_1gaa1dd461894cce3777ef12165d93dda8a" kindref="member">nrf_radio_dfe_pattern_cnt_get</ref>(NRF_RADIO_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="2283"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2284"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p_reg-&gt;SWITCHPATTERN;</highlight></codeline>
<codeline lineno="2285"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2286"><highlight class="normal"></highlight></codeline>
<codeline lineno="2287"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__radio__hal_1gaa576fb22d7447eeb644fd6c699584f54" kindref="member">nrf_radio_dfe_pattern_clear</ref>(NRF_RADIO_Type<sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="2288"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2289"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;CLEARPATTERN<sp/>=<sp/>RADIO_CLEARPATTERN_CLEARPATTERN_Msk;</highlight></codeline>
<codeline lineno="2290"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2291"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2292"><highlight class="normal"></highlight></codeline>
<codeline lineno="2293"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(RADIO_DFEPACKET_PTR_PTR_Msk)<sp/>||<sp/>defined(RADIO_DFEPACKET_PTR_OFFSET_Msk)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2294"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__radio__hal_1gaec6ca2940b0c0da838f9d61a226109ea" kindref="member">nrf_radio_dfe_buffer_set</ref>(NRF_RADIO_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="2295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_buffer,</highlight></codeline>
<codeline lineno="2296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>length)</highlight></codeline>
<codeline lineno="2297"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2298"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;DFEPACKET.PTR<sp/><sp/><sp/><sp/>=<sp/>(uint32_t)p_buffer;</highlight></codeline>
<codeline lineno="2299"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(RADIO_DFEPACKET_MAX_MAX_Msk)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2300"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;DFEPACKET.MAX<sp/><sp/><sp/><sp/>=<sp/>length;</highlight></codeline>
<codeline lineno="2301"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2302"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;DFEPACKET.MAXCNT<sp/>=<sp/>length;</highlight></codeline>
<codeline lineno="2303"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2304"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2305"><highlight class="normal"></highlight></codeline>
<codeline lineno="2306"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__radio__hal_1gab6d271c9d8e00b647100f844081eb6ae" kindref="member">nrf_radio_dfe_amount_get</ref>(NRF_RADIO_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="2307"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2308"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p_reg-&gt;DFEPACKET.AMOUNT;</highlight></codeline>
<codeline lineno="2309"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2310"><highlight class="normal"></highlight></codeline>
<codeline lineno="2311"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(RADIO_DFEPACKET_CURRENTAMOUNT_AMOUNT_Msk)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2312"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__radio__hal_1ga6ccabe7ebeab7ae29f57f5488f6fdecc" kindref="member">nrf_radio_dfe_current_amount_get</ref>(NRF_RADIO_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="2313"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2314"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p_reg-&gt;DFEPACKET.CURRENTAMOUNT;</highlight></codeline>
<codeline lineno="2315"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2316"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2317"><highlight class="normal"></highlight></codeline>
<codeline lineno="2318"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2319"><highlight class="normal"></highlight></codeline>
<codeline lineno="2320"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRF_DECLARE_ONLY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2321"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2322"><highlight class="comment">/**<sp/>@}<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2323"><highlight class="normal"></highlight></codeline>
<codeline lineno="2324"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2325"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2326"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2327"><highlight class="normal"></highlight></codeline>
<codeline lineno="2328"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRF_RADIO_H__</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="hal/nrf_radio.h"/>
  </compounddef>
</doxygen>
