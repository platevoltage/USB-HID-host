<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="group__nrf__adc__hal" kind="group">
    <compoundname>nrf_adc_hal</compoundname>
    <title>ADC HAL</title>
    <innerclass refid="structnrf__adc__config__t" prot="public">nrf_adc_config_t</innerclass>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="group__nrf__adc__hal_1ga8c0d07ee2b58a745b411e5afbbb1d306" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_adc_int_mask_t</name>
        <enumvalue id="group__nrf__adc__hal_1gga8c0d07ee2b58a745b411e5afbbb1d306acea5bcc7fe27e38a3432f3e8859bc891" prot="public">
          <name>NRF_ADC_INT_END_MASK</name>
          <initializer>= ADC_INTENSET_END_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>ADC interrupt on END event. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>ADC interrupts. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_adc.h" line="52" column="1" bodyfile="hal/nrf_adc.h" bodystart="53" bodyend="55"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__adc__hal_1ga0e2d579c008431f61b5edff7fe7221a1" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_adc_config_resolution_t</name>
        <enumvalue id="group__nrf__adc__hal_1gga0e2d579c008431f61b5edff7fe7221a1ab1c5821c28eff2ea73a67e1d36636e0b" prot="public">
          <name>NRF_ADC_CONFIG_RES_8BIT</name>
          <initializer>= ADC_CONFIG_RES_8bit</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>8-bit resolution. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__adc__hal_1gga0e2d579c008431f61b5edff7fe7221a1a3c28de4a6e74c5bd731807d648d69f60" prot="public">
          <name>NRF_ADC_CONFIG_RES_9BIT</name>
          <initializer>= ADC_CONFIG_RES_9bit</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>9-bit resolution. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__adc__hal_1gga0e2d579c008431f61b5edff7fe7221a1a8bdf17e186ff6caae203defd5581ab5f" prot="public">
          <name>NRF_ADC_CONFIG_RES_10BIT</name>
          <initializer>= ADC_CONFIG_RES_10bit</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>10-bit resolution. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Resolution of the analog-to-digital converter. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_adc.h" line="58" column="1" bodyfile="hal/nrf_adc.h" bodystart="59" bodyend="63"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__adc__hal_1gad7b74a0d0016edbf83a72bb0b0aa038a" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_adc_config_scaling_t</name>
        <enumvalue id="group__nrf__adc__hal_1ggad7b74a0d0016edbf83a72bb0b0aa038aa22a8204b4afc86cf5cdcbc268b2cd7d3" prot="public">
          <name>NRF_ADC_CONFIG_SCALING_INPUT_FULL_SCALE</name>
          <initializer>= ADC_CONFIG_INPSEL_AnalogInputNoPrescaling</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Full scale input. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__adc__hal_1ggad7b74a0d0016edbf83a72bb0b0aa038aaec6a1d2ad92299bda512727003f548e6" prot="public">
          <name>NRF_ADC_CONFIG_SCALING_INPUT_TWO_THIRDS</name>
          <initializer>= ADC_CONFIG_INPSEL_AnalogInputTwoThirdsPrescaling</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>2/3 scale input. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__adc__hal_1ggad7b74a0d0016edbf83a72bb0b0aa038aa6a5c2d9f9b7e045f40382b60561aed1e" prot="public">
          <name>NRF_ADC_CONFIG_SCALING_INPUT_ONE_THIRD</name>
          <initializer>= ADC_CONFIG_INPSEL_AnalogInputOneThirdPrescaling</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>1/3 scale input. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__adc__hal_1ggad7b74a0d0016edbf83a72bb0b0aa038aa07424f67e2c58a56e440ab636b245911" prot="public">
          <name>NRF_ADC_CONFIG_SCALING_SUPPLY_TWO_THIRDS</name>
          <initializer>= ADC_CONFIG_INPSEL_SupplyTwoThirdsPrescaling</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>2/3 of supply. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__adc__hal_1ggad7b74a0d0016edbf83a72bb0b0aa038aadaf431f44f53fd84924879055e10ad24" prot="public">
          <name>NRF_ADC_CONFIG_SCALING_SUPPLY_ONE_THIRD</name>
          <initializer>= ADC_CONFIG_INPSEL_SupplyOneThirdPrescaling</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>1/3 of supply. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Scaling factor of the analog-to-digital conversion. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_adc.h" line="67" column="1" bodyfile="hal/nrf_adc.h" bodystart="68" bodyend="74"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__adc__hal_1ga6cf31b935854d716335772def0e2ca3b" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_adc_config_extref_t</name>
        <enumvalue id="group__nrf__adc__hal_1gga6cf31b935854d716335772def0e2ca3ba84b1b26b3f4382a16962ff978aee69f9" prot="public">
          <name>NRF_ADC_CONFIG_EXTREFSEL_NONE</name>
          <initializer>= ADC_CONFIG_EXTREFSEL_None</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Analog reference inputs disabled. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__adc__hal_1gga6cf31b935854d716335772def0e2ca3babc8341dddcf3984bd0acf7c6aca3729d" prot="public">
          <name>NRF_ADC_CONFIG_EXTREFSEL_AREF0</name>
          <initializer>= ADC_CONFIG_EXTREFSEL_AnalogReference0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>AREF0 as analog reference. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__adc__hal_1gga6cf31b935854d716335772def0e2ca3ba92e47f5cf953dd1d70bc5b2289c0ad8c" prot="public">
          <name>NRF_ADC_CONFIG_EXTREFSEL_AREF1</name>
          <initializer>= ADC_CONFIG_EXTREFSEL_AnalogReference1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>AREF1 as analog reference. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>External reference selection of the analog-to-digital converter. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_adc.h" line="78" column="1" bodyfile="hal/nrf_adc.h" bodystart="79" bodyend="83"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__adc__hal_1gadfd4f9444fc622b4c9222cb41e9e10ac" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_adc_config_reference_t</name>
        <enumvalue id="group__nrf__adc__hal_1ggadfd4f9444fc622b4c9222cb41e9e10aca020cf59f6939b0ff592ed74b37ae7d0a" prot="public">
          <name>NRF_ADC_CONFIG_REF_VBG</name>
          <initializer>= ADC_CONFIG_REFSEL_VBG</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>1.2 V reference. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__adc__hal_1ggadfd4f9444fc622b4c9222cb41e9e10aca33b4afe66d7e1ab2ace87cb3d6fdf3ae" prot="public">
          <name>NRF_ADC_CONFIG_REF_SUPPLY_ONE_HALF</name>
          <initializer>= ADC_CONFIG_REFSEL_SupplyOneHalfPrescaling</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>1/2 of power supply. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__adc__hal_1ggadfd4f9444fc622b4c9222cb41e9e10aca25640c8a96df57aab1a1bb005f784e1c" prot="public">
          <name>NRF_ADC_CONFIG_REF_SUPPLY_ONE_THIRD</name>
          <initializer>= ADC_CONFIG_REFSEL_SupplyOneThirdPrescaling</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>1/3 of power supply. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__adc__hal_1ggadfd4f9444fc622b4c9222cb41e9e10acabc46924c802e3f209e7f2664a42bd308" prot="public">
          <name>NRF_ADC_CONFIG_REF_EXT</name>
          <initializer>= ADC_CONFIG_REFSEL_External</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>External reference. See <ref refid="group__nrf__adc__hal_1ga6cf31b935854d716335772def0e2ca3b" kindref="member">nrf_adc_config_extref_t</ref> for further configuration. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Reference selection of the analog-to-digital converter. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_adc.h" line="86" column="1" bodyfile="hal/nrf_adc.h" bodystart="87" bodyend="92"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__adc__hal_1ga7efdf26b2463b9e15aaaaffa76ee224f" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_adc_config_input_t</name>
        <enumvalue id="group__nrf__adc__hal_1gga7efdf26b2463b9e15aaaaffa76ee224faaa23c48a8b4fb9b32151321ff598b3f2" prot="public">
          <name>NRF_ADC_CONFIG_INPUT_DISABLED</name>
          <initializer>= ADC_CONFIG_PSEL_Disabled</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>No input selected. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__adc__hal_1gga7efdf26b2463b9e15aaaaffa76ee224fa64920912300e3d6ab1b60b0c117ee8df" prot="public">
          <name>NRF_ADC_CONFIG_INPUT_0</name>
          <initializer>= ADC_CONFIG_PSEL_AnalogInput0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Input 0. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__adc__hal_1gga7efdf26b2463b9e15aaaaffa76ee224fad7bf1e82e2f6b17aeea2c0eca71eff46" prot="public">
          <name>NRF_ADC_CONFIG_INPUT_1</name>
          <initializer>= ADC_CONFIG_PSEL_AnalogInput1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Input 1. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__adc__hal_1gga7efdf26b2463b9e15aaaaffa76ee224fa0a4dde6a4dea2ed0dcd649b018bd87c0" prot="public">
          <name>NRF_ADC_CONFIG_INPUT_2</name>
          <initializer>= ADC_CONFIG_PSEL_AnalogInput2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Input 2. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__adc__hal_1gga7efdf26b2463b9e15aaaaffa76ee224fa06c34472a5fab68617fe0ce773675182" prot="public">
          <name>NRF_ADC_CONFIG_INPUT_3</name>
          <initializer>= ADC_CONFIG_PSEL_AnalogInput3</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Input 3. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__adc__hal_1gga7efdf26b2463b9e15aaaaffa76ee224faa0a50e03b234a2b622784c58ec35e7ad" prot="public">
          <name>NRF_ADC_CONFIG_INPUT_4</name>
          <initializer>= ADC_CONFIG_PSEL_AnalogInput4</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Input 4. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__adc__hal_1gga7efdf26b2463b9e15aaaaffa76ee224fa799a8b1a6bcd74ab08b06cae71bf6a31" prot="public">
          <name>NRF_ADC_CONFIG_INPUT_5</name>
          <initializer>= ADC_CONFIG_PSEL_AnalogInput5</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Input 5. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__adc__hal_1gga7efdf26b2463b9e15aaaaffa76ee224faa6874f0ae7dc758d78f9bc1e36cab438" prot="public">
          <name>NRF_ADC_CONFIG_INPUT_6</name>
          <initializer>= ADC_CONFIG_PSEL_AnalogInput6</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Input 6. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__adc__hal_1gga7efdf26b2463b9e15aaaaffa76ee224fa900625b3eed7cd3a85e37b41d97f0376" prot="public">
          <name>NRF_ADC_CONFIG_INPUT_7</name>
          <initializer>= ADC_CONFIG_PSEL_AnalogInput7</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Input 7. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Input selection of the analog-to-digital converter. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_adc.h" line="95" column="1" bodyfile="hal/nrf_adc.h" bodystart="96" bodyend="106"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__adc__hal_1ga0403cc8baa68147ae21762eb2a5df9aa" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_adc_task_t</name>
        <enumvalue id="group__nrf__adc__hal_1gga0403cc8baa68147ae21762eb2a5df9aaa5dad3f3202d9b32372f7b76d91338b87" prot="public">
          <name>NRF_ADC_TASK_START</name>
          <initializer>= offsetof(NRF_ADC_Type, TASKS_START)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>ADC start sampling task. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__adc__hal_1gga0403cc8baa68147ae21762eb2a5df9aaae85f1e0d14a73626b09b1460d0816c49" prot="public">
          <name>NRF_ADC_TASK_STOP</name>
          <initializer>= offsetof(NRF_ADC_Type, TASKS_STOP)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>ADC stop sampling task. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Analog-to-digital converter tasks. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_adc.h" line="109" column="1" bodyfile="hal/nrf_adc.h" bodystart="110" bodyend="113"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__adc__hal_1ga55695cdb071d7fe5939f4a494f251fea" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_adc_event_t</name>
        <enumvalue id="group__nrf__adc__hal_1gga55695cdb071d7fe5939f4a494f251feaaf7286395c1e23c9b25a0f3cadd31b2e1" prot="public">
          <name>NRF_ADC_EVENT_END</name>
          <initializer>= offsetof(NRF_ADC_Type, EVENTS_END)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>End of a conversion event. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Analog-to-digital converter events. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_adc.h" line="116" column="1" bodyfile="hal/nrf_adc.h" bodystart="117" bodyend="119"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group__nrf__adc__hal_1ga7d013ea47d3b3525e656484f06274acd" prot="public" static="no">
        <type>uint16_t</type>
        <definition>typedef uint16_t nrf_adc_value_t</definition>
        <argsstring></argsstring>
        <name>nrf_adc_value_t</name>
        <briefdescription>
<para>Analog-to-digital value type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_adc.h" line="132" column="18" bodyfile="hal/nrf_adc.h" bodystart="132" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__nrf__adc__hal_1ga7a789b6a23b9f1ae0ec2d8363ac8477e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_adc_task_trigger</definition>
        <argsstring>(NRF_ADC_Type *p_reg, nrf_adc_task_t task)</argsstring>
        <name>nrf_adc_task_trigger</name>
        <param>
          <type>NRF_ADC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__adc__hal_1ga0403cc8baa68147ae21762eb2a5df9aa" kindref="member">nrf_adc_task_t</ref></type>
          <declname>task</declname>
        </param>
        <briefdescription>
<para>Function for activating the specified ADC task. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">task</parametername>
</parameternamelist>
<parameterdescription>
<para>Task to be activated. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_adc.h" line="274" column="24" bodyfile="hal/nrf_adc.h" bodystart="274" bodyend="277" declfile="hal/nrf_adc.h" declline="141" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__adc__hal_1gab5c2bfd2d845732507f73ddc2b63f90a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_adc_task_address_get</definition>
        <argsstring>(NRF_ADC_Type const *p_reg, nrf_adc_task_t task)</argsstring>
        <name>nrf_adc_task_address_get</name>
        <param>
          <type>NRF_ADC_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__adc__hal_1ga0403cc8baa68147ae21762eb2a5df9aa" kindref="member">nrf_adc_task_t</ref></type>
          <declname>task</declname>
        </param>
        <briefdescription>
<para>Function for getting the address of an ADC task register. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">task</parametername>
</parameternamelist>
<parameterdescription>
<para>ADC task.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Address of the specified ADC task. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_adc.h" line="279" column="28" bodyfile="hal/nrf_adc.h" bodystart="279" bodyend="283" declfile="hal/nrf_adc.h" declline="151" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__adc__hal_1gad58f1c0ee4e198108980fe5522d63510" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE bool</type>
        <definition>NRF_STATIC_INLINE bool nrf_adc_event_check</definition>
        <argsstring>(NRF_ADC_Type const *p_reg, nrf_adc_event_t event)</argsstring>
        <name>nrf_adc_event_check</name>
        <param>
          <type>NRF_ADC_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__adc__hal_1ga55695cdb071d7fe5939f4a494f251fea" kindref="member">nrf_adc_event_t</ref></type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>Function for retrieving the state of an ADC event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event to be checked.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>The event has been generated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>The event has not been generated. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_adc.h" line="285" column="24" bodyfile="hal/nrf_adc.h" bodystart="285" bodyend="288" declfile="hal/nrf_adc.h" declline="163" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__adc__hal_1ga344087602f226ab4733b07a2421a26e6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_adc_event_clear</definition>
        <argsstring>(NRF_ADC_Type *p_reg, nrf_adc_event_t event)</argsstring>
        <name>nrf_adc_event_clear</name>
        <param>
          <type>NRF_ADC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__adc__hal_1ga55695cdb071d7fe5939f4a494f251fea" kindref="member">nrf_adc_event_t</ref></type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>Function for clearing an ADC event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event to clear. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_adc.h" line="290" column="24" bodyfile="hal/nrf_adc.h" bodystart="290" bodyend="293" declfile="hal/nrf_adc.h" declline="171" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__adc__hal_1ga5b05a6f68e9bec4243e9635246a216c4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_adc_event_address_get</definition>
        <argsstring>(NRF_ADC_Type const *p_reg, nrf_adc_event_t event)</argsstring>
        <name>nrf_adc_event_address_get</name>
        <param>
          <type>NRF_ADC_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__adc__hal_1ga55695cdb071d7fe5939f4a494f251fea" kindref="member">nrf_adc_event_t</ref></type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>Function for getting the address of the specified ADC event register. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>ADC event.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Address of the specified ADC event. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_adc.h" line="295" column="28" bodyfile="hal/nrf_adc.h" bodystart="295" bodyend="299" declfile="hal/nrf_adc.h" declline="181" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__adc__hal_1ga9b4df834f9f0b78f4b72382bbffd5b32" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_adc_int_enable</definition>
        <argsstring>(NRF_ADC_Type *p_reg, uint32_t mask)</argsstring>
        <name>nrf_adc_int_enable</name>
        <param>
          <type>NRF_ADC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Function for enabling the specified interrupts. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of interrupts to be enabled. Use <ref refid="group__nrf__adc__hal_1ga8c0d07ee2b58a745b411e5afbbb1d306" kindref="member">nrf_adc_int_mask_t</ref> values for bit masking. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_adc.h" line="301" column="24" bodyfile="hal/nrf_adc.h" bodystart="301" bodyend="304" declfile="hal/nrf_adc.h" declline="191" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__adc__hal_1ga810df10f79ca9cbb841b547862e035c4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_adc_int_disable</definition>
        <argsstring>(NRF_ADC_Type *p_reg, uint32_t mask)</argsstring>
        <name>nrf_adc_int_disable</name>
        <param>
          <type>NRF_ADC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Function for disabling the specified interrupts. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of interrupts to be disabled. Use <ref refid="group__nrf__adc__hal_1ga8c0d07ee2b58a745b411e5afbbb1d306" kindref="member">nrf_adc_int_mask_t</ref> values for bit masking. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_adc.h" line="306" column="24" bodyfile="hal/nrf_adc.h" bodystart="306" bodyend="309" declfile="hal/nrf_adc.h" declline="200" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__adc__hal_1gadfe3c24b119cc43d7fe8d95dd3040af1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_adc_int_enable_check</definition>
        <argsstring>(NRF_ADC_Type const *p_reg, uint32_t mask)</argsstring>
        <name>nrf_adc_int_enable_check</name>
        <param>
          <type>NRF_ADC_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Function for checking if the specified interrupts are enabled. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of interrupts to be checked. Use <ref refid="group__nrf__adc__hal_1ga8c0d07ee2b58a745b411e5afbbb1d306" kindref="member">nrf_adc_int_mask_t</ref> values for bit masking.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Mask of enabled interrupts. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_adc.h" line="311" column="28" bodyfile="hal/nrf_adc.h" bodystart="311" bodyend="314" declfile="hal/nrf_adc.h" declline="211" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__adc__hal_1ga69092a575a75de70c0e7d52dcf66ea7e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE bool</type>
        <definition>NRF_STATIC_INLINE bool nrf_adc_busy_check</definition>
        <argsstring>(NRF_ADC_Type const *p_reg)</argsstring>
        <name>nrf_adc_busy_check</name>
        <param>
          <type>NRF_ADC_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for checking whether the ADC is busy. </para>
        </briefdescription>
        <detaileddescription>
<para>This function checks whether the ADC converter is busy with a conversion.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>The ADC is busy. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>The ADC is not busy. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_adc.h" line="316" column="24" bodyfile="hal/nrf_adc.h" bodystart="316" bodyend="319" declfile="hal/nrf_adc.h" declline="223" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__adc__hal_1ga06df9532f0a27a83ea9beda9b2475357" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_adc_enable</definition>
        <argsstring>(NRF_ADC_Type *p_reg)</argsstring>
        <name>nrf_adc_enable</name>
        <param>
          <type>NRF_ADC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for enabling the ADC. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_adc.h" line="321" column="24" bodyfile="hal/nrf_adc.h" bodystart="321" bodyend="324" declfile="hal/nrf_adc.h" declline="230" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__adc__hal_1ga68cc9612bae4035a2cb10a679214e85e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_adc_disable</definition>
        <argsstring>(NRF_ADC_Type *p_reg)</argsstring>
        <name>nrf_adc_disable</name>
        <param>
          <type>NRF_ADC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for disabling the ADC. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_adc.h" line="326" column="24" bodyfile="hal/nrf_adc.h" bodystart="326" bodyend="329" declfile="hal/nrf_adc.h" declline="237" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__adc__hal_1ga0bc4bc2c469fd7b89b57e13f2e9e2840" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE bool</type>
        <definition>NRF_STATIC_INLINE bool nrf_adc_enable_check</definition>
        <argsstring>(NRF_ADC_Type const *p_reg)</argsstring>
        <name>nrf_adc_enable_check</name>
        <param>
          <type>NRF_ADC_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for checking if the ADC is enabled. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>The ADC is enabled. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>The ADC is not enabled. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_adc.h" line="331" column="24" bodyfile="hal/nrf_adc.h" bodystart="331" bodyend="334" declfile="hal/nrf_adc.h" declline="247" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__adc__hal_1gab838261f5d077482f9606852e4d6bbc8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE <ref refid="group__nrf__adc__hal_1ga7d013ea47d3b3525e656484f06274acd" kindref="member">nrf_adc_value_t</ref></type>
        <definition>NRF_STATIC_INLINE nrf_adc_value_t nrf_adc_result_get</definition>
        <argsstring>(NRF_ADC_Type const *p_reg)</argsstring>
        <name>nrf_adc_result_get</name>
        <param>
          <type>NRF_ADC_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for retrieving the ADC conversion result. </para>
        </briefdescription>
        <detaileddescription>
<para>This function retrieves and returns the last analog-to-digital conversion result.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Last conversion result. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_adc.h" line="336" column="35" bodyfile="hal/nrf_adc.h" bodystart="336" bodyend="339" declfile="hal/nrf_adc.h" declline="258" declcolumn="35"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__adc__hal_1ga8519b8679dccef53429be26031a3a535" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_adc_init</definition>
        <argsstring>(NRF_ADC_Type *p_reg, nrf_adc_config_t const *p_config)</argsstring>
        <name>nrf_adc_init</name>
        <param>
          <type>NRF_ADC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="structnrf__adc__config__t" kindref="compound">nrf_adc_config_t</ref> const *</type>
          <declname>p_config</declname>
        </param>
        <briefdescription>
<para>Function for initializing the ADC. </para>
        </briefdescription>
        <detaileddescription>
<para>This function writes data to ADC&apos;s CONFIG register. After the configuration, the ADC is in DISABLE state and must be enabled before using it.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">p_config</parametername>
</parameternamelist>
<parameterdescription>
<para>Configuration parameters. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_adc.h" line="341" column="24" bodyfile="hal/nrf_adc.h" bodystart="341" bodyend="349" declfile="hal/nrf_adc.h" declline="269" declcolumn="24"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Hardware access layer for managing the Analog-to-Digital Converter (ADC) peripheral. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
