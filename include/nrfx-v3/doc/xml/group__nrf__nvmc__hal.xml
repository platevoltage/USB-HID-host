<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="group__nrf__nvmc__hal" kind="group">
    <compoundname>nrf_nvmc_hal</compoundname>
    <title>NVMC HAL</title>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="group__nrf__nvmc__hal_1gadd8e7bdd401ca26af7508dcbfd4a2093" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_nvmc_mode_t</name>
        <enumvalue id="group__nrf__nvmc__hal_1ggadd8e7bdd401ca26af7508dcbfd4a2093ad9e348b8c60e57c585195adce0b6e287" prot="public">
          <name>NRF_NVMC_MODE_READONLY</name>
          <initializer>= NVMC_CONFIG_WEN_Ren</initializer>
          <briefdescription>
<para>NVMC in read-only mode. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__nvmc__hal_1ggadd8e7bdd401ca26af7508dcbfd4a2093a0c013764d189a713da5fa6cf5c774a77" prot="public">
          <name>NRF_NVMC_MODE_WRITE</name>
          <initializer>= NVMC_CONFIG_WEN_Wen</initializer>
          <briefdescription>
<para>NVMC in read and write mode. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__nvmc__hal_1ggadd8e7bdd401ca26af7508dcbfd4a2093a69c07e225b5074eddfedc98890bfe9f2" prot="public">
          <name>NRF_NVMC_MODE_ERASE</name>
          <initializer>= NVMC_CONFIG_WEN_Een</initializer>
          <briefdescription>
<para>NVMC in read and erase mode. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>NVMC modes. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_nvmc.h" line="73" column="1" bodyfile="hal/nrf_nvmc.h" bodystart="74" bodyend="81"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__nvmc__hal_1ga7f92280a47a13401338ba73ed480fffe" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_nvmc_ns_mode_t</name>
        <enumvalue id="group__nrf__nvmc__hal_1gga7f92280a47a13401338ba73ed480fffea991f2583d6b0fdc010a2bf76603f29a6" prot="public">
          <name>NRF_NVMC_NS_MODE_READONLY</name>
          <initializer>= NVMC_CONFIGNS_WEN_Ren</initializer>
          <briefdescription>
<para>Non-secure NVMC in read-only mode. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__nvmc__hal_1gga7f92280a47a13401338ba73ed480fffea6a7e8f18433f84c44b7d37f5f48b4e97" prot="public">
          <name>NRF_NVMC_NS_MODE_WRITE</name>
          <initializer>= NVMC_CONFIGNS_WEN_Wen</initializer>
          <briefdescription>
<para>Non-secure NVMC in read and write mode. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__nvmc__hal_1gga7f92280a47a13401338ba73ed480fffeafd4a277f2a174ecbd77f8976c789336d" prot="public">
          <name>NRF_NVMC_NS_MODE_ERASE</name>
          <initializer>= NVMC_CONFIGNS_WEN_Een</initializer>
          <briefdescription>
<para>Non-secure NVMC in read and erase mode. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Non-secure NVMC modes. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_nvmc.h" line="85" column="1" bodyfile="hal/nrf_nvmc.h" bodystart="86" bodyend="90"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__nrf__nvmc__hal_1ga5338a0810739ba1ff51d4c93c480bbd8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE bool</type>
        <definition>NRF_STATIC_INLINE bool nrf_nvmc_ready_check</definition>
        <argsstring>(NRF_NVMC_Type const *p_reg)</argsstring>
        <name>nrf_nvmc_ready_check</name>
        <param>
          <type>NRF_NVMC_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for checking if NVMC is ready to perform write or erase operation. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>NVMC can perform write or erase. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>NVMC is busy and cannot perform next operation yet. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_nvmc.h" line="349" column="24" bodyfile="hal/nrf_nvmc.h" bodystart="349" bodyend="352" declfile="hal/nrf_nvmc.h" declline="112" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__nvmc__hal_1gac7c938d59c2ce5bb85ef9b0c48ea8914" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE bool</type>
        <definition>NRF_STATIC_INLINE bool nrf_nvmc_write_ready_check</definition>
        <argsstring>(NRF_NVMC_Type const *p_reg)</argsstring>
        <name>nrf_nvmc_write_ready_check</name>
        <param>
          <type>NRF_NVMC_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for checking if NVMC is ready to accept the next write operation. </para>
        </briefdescription>
        <detaileddescription>
<para>NVM writing time can be reduced by using this function.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>NVMC can accept the next write. It will be buffered and will be taken into account as soon as the ongoing write operation is completed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>NVMC is busy and cannot accept the next write yet. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_nvmc.h" line="126" column="24" declfile="hal/nrf_nvmc.h" declline="126" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__nvmc__hal_1ga72962131a72ba80c5d7593c2e87084bf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_nvmc_mode_set</definition>
        <argsstring>(NRF_NVMC_Type *p_reg, nrf_nvmc_mode_t mode)</argsstring>
        <name>nrf_nvmc_mode_set</name>
        <param>
          <type>NRF_NVMC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__nvmc__hal_1gadd8e7bdd401ca26af7508dcbfd4a2093" kindref="member">nrf_nvmc_mode_t</ref></type>
          <declname>mode</declname>
        </param>
        <briefdescription>
<para>Function for setting the NVMC mode. </para>
        </briefdescription>
        <detaileddescription>
<para>Only activate erase and write modes when they are actively used. If Instruction Cache (ICache) is present, enabling write or erase will invalidate the cache and keep it invalidated.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mode</parametername>
</parameternamelist>
<parameterdescription>
<para>Desired operating mode for NVMC. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_nvmc.h" line="361" column="24" bodyfile="hal/nrf_nvmc.h" bodystart="361" bodyend="365" declfile="hal/nrf_nvmc.h" declline="139" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__nvmc__hal_1ga97f46fa7d02746b9a73a3e198278a5fa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_nvmc_nonsecure_mode_set</definition>
        <argsstring>(NRF_NVMC_Type *p_reg, nrf_nvmc_ns_mode_t mode)</argsstring>
        <name>nrf_nvmc_nonsecure_mode_set</name>
        <param>
          <type>NRF_NVMC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__nvmc__hal_1ga7f92280a47a13401338ba73ed480fffe" kindref="member">nrf_nvmc_ns_mode_t</ref></type>
          <declname>mode</declname>
        </param>
        <briefdescription>
<para>Function for setting the NVMC mode for non-secure Flash page operations. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mode</parametername>
</parameternamelist>
<parameterdescription>
<para>Desired operating mode for NVMC. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_nvmc.h" line="368" column="24" bodyfile="hal/nrf_nvmc.h" bodystart="368" bodyend="372" declfile="hal/nrf_nvmc.h" declline="149" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__nvmc__hal_1ga23eec382fbfdcf74e56bccbb4d278414" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_nvmc_word_write</definition>
        <argsstring>(uint32_t address, uint32_t value)</argsstring>
        <name>nrf_nvmc_word_write</name>
        <param>
          <type>uint32_t</type>
          <declname>address</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Function for writing a 32-bit word to flash. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Before calling this function, the caller must ensure that:<itemizedlist>
<listitem><para>the <computeroutput>address</computeroutput> is word-aligned,</para>
</listitem><listitem><para>write mode is enabled, using <ref refid="group__nrf__nvmc__hal_1ga72962131a72ba80c5d7593c2e87084bf" kindref="member">nrf_nvmc_mode_set</ref>,</para>
</listitem><listitem><para>the NVMC is ready to accept another write, using <ref refid="group__nrf__nvmc__hal_1ga5338a0810739ba1ff51d4c93c480bbd8" kindref="member">nrf_nvmc_ready_check</ref> or <ref refid="group__nrf__nvmc__hal_1gac7c938d59c2ce5bb85ef9b0c48ea8914" kindref="member">nrf_nvmc_write_ready_check</ref>,</para>
</listitem><listitem><para>read-only mode is enabled as soon as writing is no longer needed, using <ref refid="group__nrf__nvmc__hal_1ga72962131a72ba80c5d7593c2e87084bf" kindref="member">nrf_nvmc_mode_set</ref>.</para>
</listitem></itemizedlist>
</para>
</simplesect>
<simplesect kind="warning"><para>It is recommended to use <ref refid="group__nrfx__nvmc_1ga61cfb10bcc72814ebf0dc04629fc4bcf" kindref="member">nrfx_nvmc_word_write</ref> function instead.</para>
</simplesect>
Using this function when accessing the flash gives the possibility to run the code in an environment where the flash is simulated.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">address</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the word to write. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to write. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_nvmc.h" line="375" column="24" bodyfile="hal/nrf_nvmc.h" bodystart="375" bodyend="379" declfile="hal/nrf_nvmc.h" declline="172" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__nvmc__hal_1gaa30963626fd8d7c46cb88aedbff72aee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint8_t</type>
        <definition>NRF_STATIC_INLINE uint8_t nrf_nvmc_byte_read</definition>
        <argsstring>(uint32_t address)</argsstring>
        <name>nrf_nvmc_byte_read</name>
        <param>
          <type>uint32_t</type>
          <declname>address</declname>
        </param>
        <briefdescription>
<para>Function for reading a byte from the flash. </para>
        </briefdescription>
        <detaileddescription>
<para>Using this function when accessing the flash gives the possibility to run the code in an environment where the flash is simulated.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">address</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the byte to read.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Value read from flash. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_nvmc.h" line="381" column="27" bodyfile="hal/nrf_nvmc.h" bodystart="381" bodyend="384" declfile="hal/nrf_nvmc.h" declline="185" declcolumn="27"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__nvmc__hal_1ga0cf39c0c69c6239940d137fe24fa80fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint16_t</type>
        <definition>NRF_STATIC_INLINE uint16_t nrf_nvmc_halfword_read</definition>
        <argsstring>(uint32_t address)</argsstring>
        <name>nrf_nvmc_halfword_read</name>
        <param>
          <type>uint32_t</type>
          <declname>address</declname>
        </param>
        <briefdescription>
<para>Function for reading a 16-bit halfword from the flash. </para>
        </briefdescription>
        <detaileddescription>
<para>Using this function when accessing the flash gives the possibility to run the code in an environment where the flash is simulated.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">address</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the halfword to read.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Value read from flash. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_nvmc.h" line="386" column="28" bodyfile="hal/nrf_nvmc.h" bodystart="386" bodyend="389" declfile="hal/nrf_nvmc.h" declline="197" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__nvmc__hal_1ga2bd87d25a19f94631db849feaafa50b3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_nvmc_word_read</definition>
        <argsstring>(uint32_t address)</argsstring>
        <name>nrf_nvmc_word_read</name>
        <param>
          <type>uint32_t</type>
          <declname>address</declname>
        </param>
        <briefdescription>
<para>Function for reading a 32-bit word from the flash. </para>
        </briefdescription>
        <detaileddescription>
<para>Using this function when accessing the flash gives the possibility to run the code in an environment where the flash is simulated.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">address</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the word to read.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Value read from flash. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_nvmc.h" line="391" column="28" bodyfile="hal/nrf_nvmc.h" bodystart="391" bodyend="394" declfile="hal/nrf_nvmc.h" declline="209" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__nvmc__hal_1ga249d5651b5e4a80ca818bc360420812f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_nvmc_buffer_read</definition>
        <argsstring>(void *dst, uint32_t address, uint32_t num_bytes)</argsstring>
        <name>nrf_nvmc_buffer_read</name>
        <param>
          <type>void *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>address</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>num_bytes</declname>
        </param>
        <briefdescription>
<para>Function for reading a given number of bytes from the flash into the specified buffer. </para>
        </briefdescription>
        <detaileddescription>
<para>Using this function when accessing the flash gives the possibility to run the code in an environment where the flash is simulated.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">dst</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the buffer to store the data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">address</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the first byte to read. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">num_bytes</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bytes to read. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_nvmc.h" line="396" column="24" bodyfile="hal/nrf_nvmc.h" bodystart="396" bodyend="401" declfile="hal/nrf_nvmc.h" declline="222" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__nvmc__hal_1gaaf4332d291e31155374dc0279b60cb22" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_nvmc_page_erase_start</definition>
        <argsstring>(NRF_NVMC_Type *p_reg, uint32_t page_addr)</argsstring>
        <name>nrf_nvmc_page_erase_start</name>
        <param>
          <type>NRF_NVMC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>page_addr</declname>
        </param>
        <briefdescription>
<para>Function for starting a single page erase in the Flash memory. </para>
        </briefdescription>
        <detaileddescription>
<para>The NVMC mode must be correctly configured with <ref refid="group__nrf__nvmc__hal_1ga72962131a72ba80c5d7593c2e87084bf" kindref="member">nrf_nvmc_mode_set</ref> before starting the erase operation.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">page_addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the first word of the page to erase. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_nvmc.h" line="403" column="24" bodyfile="hal/nrf_nvmc.h" bodystart="403" bodyend="429" declfile="hal/nrf_nvmc.h" declline="235" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__nvmc__hal_1ga2a8ab271b7b62703cd6c8a23a2341361" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_nvmc_uicr_erase_start</definition>
        <argsstring>(NRF_NVMC_Type *p_reg)</argsstring>
        <name>nrf_nvmc_uicr_erase_start</name>
        <param>
          <type>NRF_NVMC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for starting the user information configuration registers (UICR) erase. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_nvmc.h" line="432" column="24" bodyfile="hal/nrf_nvmc.h" bodystart="432" bodyend="435" declfile="hal/nrf_nvmc.h" declline="244" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__nvmc__hal_1ga6ee7aac11f652c4bcc280569630312c9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_nvmc_erase_all_start</definition>
        <argsstring>(NRF_NVMC_Type *p_reg)</argsstring>
        <name>nrf_nvmc_erase_all_start</name>
        <param>
          <type>NRF_NVMC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for starting the erase of the whole NVM, including UICR. </para>
        </briefdescription>
        <detaileddescription>
<para>This function purges all user code.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_nvmc.h" line="438" column="24" bodyfile="hal/nrf_nvmc.h" bodystart="438" bodyend="441" declfile="hal/nrf_nvmc.h" declline="254" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__nvmc__hal_1gac09f0719d89ad320e0d9a218913fea5b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_nvmc_partial_erase_duration_set</definition>
        <argsstring>(NRF_NVMC_Type *p_reg, uint32_t duration_ms)</argsstring>
        <name>nrf_nvmc_partial_erase_duration_set</name>
        <param>
          <type>NRF_NVMC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>duration_ms</declname>
        </param>
        <briefdescription>
<para>Function for configuring the page partial erase duration in milliseconds. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">duration_ms</parametername>
</parameternamelist>
<parameterdescription>
<para>Page partial erase duration in milliseconds. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_nvmc.h" line="444" column="24" bodyfile="hal/nrf_nvmc.h" bodystart="444" bodyend="448" declfile="hal/nrf_nvmc.h" declline="263" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__nvmc__hal_1gad3feaf7f91e992008d03f17ffcfd6fc9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_nvmc_partial_erase_duration_get</definition>
        <argsstring>(NRF_NVMC_Type const *p_reg)</argsstring>
        <name>nrf_nvmc_partial_erase_duration_get</name>
        <param>
          <type>NRF_NVMC_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting the current setting for the page partial erase duration. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>Interval</parametername>
</parameternamelist>
<parameterdescription>
<para>duration setting in milliseconds. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_nvmc.h" line="450" column="28" bodyfile="hal/nrf_nvmc.h" bodystart="450" bodyend="453" declfile="hal/nrf_nvmc.h" declline="273" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__nvmc__hal_1ga62b50be6f82d09ecb013d54c83b88b1c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_nvmc_page_partial_erase_start</definition>
        <argsstring>(NRF_NVMC_Type *p_reg, uint32_t page_addr)</argsstring>
        <name>nrf_nvmc_page_partial_erase_start</name>
        <param>
          <type>NRF_NVMC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>page_addr</declname>
        </param>
        <briefdescription>
<para>Function for starting a partial erase operation. </para>
        </briefdescription>
        <detaileddescription>
<para>It must be called successively until the page erase time is reached.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">page_addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the first word of the page to erase. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_nvmc.h" line="455" column="24" bodyfile="hal/nrf_nvmc.h" bodystart="455" bodyend="465" declfile="hal/nrf_nvmc.h" declline="283" declcolumn="24"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__nrf__nvmc__hal_1ga801933a612f33b1059baa9fd679ffa87" prot="public" static="no">
        <name>NRF_NVMC_HAS_PARTIAL_ERASE</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Symbol indicating whether the option of page partial erase is present. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_nvmc.h" line="53" column="9" bodyfile="hal/nrf_nvmc.h" bodystart="53" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__nvmc__hal_1ga63cb0ce6ce24e24265ac5fa55e59bfe0" prot="public" static="no">
        <name>NRF_NVMC_HAS_NON_SECURE_OPERATIONS</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Symbol indicating whether NVMC has non-secure operations available. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_nvmc.h" line="60" column="9" bodyfile="hal/nrf_nvmc.h" bodystart="60" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__nvmc__hal_1ga569f41183f91a364679fc233d41a1a16" prot="public" static="no">
        <name>NRF_NVMC_HAS_UICR_ERASE</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Symbol indicating whether NVMC has UICR erase available. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_nvmc.h" line="67" column="9" bodyfile="hal/nrf_nvmc.h" bodystart="67" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Hardware access layer (HAL) for managing the Non-Volatile Memory Controller (NVMC) peripheral. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
