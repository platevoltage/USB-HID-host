<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="nrf__auxpll_8h" kind="file" language="C++">
    <compoundname>nrf_auxpll.h</compoundname>
    <includes local="no">nrfx.h</includes>
    <incdepgraph>
      <node id="1">
        <label>hal/nrf_auxpll.h</label>
        <link refid="nrf__auxpll_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>nrfx.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="structnrf__auxpll__config__t" prot="public">nrf_auxpll_config_t</innerclass>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="group__nrf__auxpll__hal_1ga00833a2371cfb56ad8392461a153a653" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_auxpll_task_t</name>
        <enumvalue id="group__nrf__auxpll__hal_1gga00833a2371cfb56ad8392461a153a653a3b6fe6b7b0b11c19bdc26efa5aff628b" prot="public">
          <name>NRF_AUXPLL_TASK_START</name>
          <initializer>= offsetof(NRF_AUXPLL_Type, TASKS_START)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Start the AUXPLL. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__auxpll__hal_1gga00833a2371cfb56ad8392461a153a653aa382be4b6b65e33b874833db020f96a1" prot="public">
          <name>NRF_AUXPLL_TASK_STOP</name>
          <initializer>= offsetof(NRF_AUXPLL_Type, TASKS_STOP)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Stop the AUXPLL. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__auxpll__hal_1gga00833a2371cfb56ad8392461a153a653aedc2e6778a964e9f224772ba3665a861" prot="public">
          <name>NRF_AUXPLL_TASK_FREQ_NEW_FINE</name>
          <initializer>= offsetof(NRF_AUXPLL_Type, TASKS_NEWFINEFREQ)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Change fine frequency. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__auxpll__hal_1gga00833a2371cfb56ad8392461a153a653a9a601d4cf882b804b3ce1163385015f4" prot="public">
          <name>NRF_AUXPLL_TASK_FREQ_NEW_BASE</name>
          <initializer>= offsetof(NRF_AUXPLL_Type, TASKS_NEWBASEFREQ)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Change base frequency. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__auxpll__hal_1gga00833a2371cfb56ad8392461a153a653a5f796cfaf2591a10c3905887376fe1f2" prot="public">
          <name>NRF_AUXPLL_TASK_FREQ_INC_START</name>
          <initializer>= offsetof(NRF_AUXPLL_Type, TASKS_FREQINCSTART)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Start automated frequency increment. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__auxpll__hal_1gga00833a2371cfb56ad8392461a153a653a073e29219a3c4b61574615550322b2a9" prot="public">
          <name>NRF_AUXPLL_TASK_FREQ_INC_STOP</name>
          <initializer>= offsetof(NRF_AUXPLL_Type, TASKS_FREQINCSTOP)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Stop automated frequency increment. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>AUXPLL tasks. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_auxpll.h" line="51" column="1" bodyfile="hal/nrf_auxpll.h" bodystart="52" bodyend="59"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__auxpll__hal_1ga139a93ec776aed9979a96f249af7a7eb" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_auxpll_event_t</name>
        <enumvalue id="group__nrf__auxpll__hal_1gga139a93ec776aed9979a96f249af7a7eba60727d2a8ba4ef7e24223d3d4c3c59cd" prot="public">
          <name>NRF_AUXPLL_EVENT_STARTED</name>
          <initializer>= offsetof(NRF_AUXPLL_Type, EVENTS_STARTED)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Event indicating that AUXPLL started. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__auxpll__hal_1gga139a93ec776aed9979a96f249af7a7eba4eb448c77a1249e3a7587fb531231557" prot="public">
          <name>NRF_AUXPLL_EVENT_STOPPED</name>
          <initializer>= offsetof(NRF_AUXPLL_Type, EVENTS_STOPPED)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Event indicating that AUXPLL stopped. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__auxpll__hal_1gga139a93ec776aed9979a96f249af7a7eba10b3a66f4e4b99953dc87324d893100e" prot="public">
          <name>NRF_AUXPLL_EVENT_LOCKED</name>
          <initializer>= offsetof(NRF_AUXPLL_Type, EVENTS_LOCKED)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Event indicating that AUXPLL locked. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>AUXPLL events. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_auxpll.h" line="62" column="1" bodyfile="hal/nrf_auxpll.h" bodystart="63" bodyend="67"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__auxpll__hal_1ga7326955aff7345645d8d76517932c6b4" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_auxpll_int_mask_t</name>
        <enumvalue id="group__nrf__auxpll__hal_1gga7326955aff7345645d8d76517932c6b4a41a2aad86c95d96b7ba672d38f7f8e26" prot="public">
          <name>NRF_AUXPLL_INT_STARTED_MASK</name>
          <initializer>= AUXPLL_INTEN_STARTED_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>AUXPLL interrupt for STARTED event. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__auxpll__hal_1gga7326955aff7345645d8d76517932c6b4a9ce7de1f8dce973007adc5941202535b" prot="public">
          <name>NRF_AUXPLL_INT_STOPPED_MASK</name>
          <initializer>= AUXPLL_INTEN_STOPPED_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>AUXPLL interrupt for STOPPED event. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__auxpll__hal_1gga7326955aff7345645d8d76517932c6b4aab3640b376bcbe3da83764e9e4fe6c8e" prot="public">
          <name>NRF_AUXPLL_INT_LOCKED_MASK</name>
          <initializer>= AUXPLL_INTEN_LOCKED_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>AUXPLL interrupt for LOCKED event. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>AUXPLL interrupts. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_auxpll.h" line="70" column="1" bodyfile="hal/nrf_auxpll.h" bodystart="71" bodyend="75"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__auxpll__hal_1ga89d83049d7868404bb730cb84cfe1007" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_auxpll_status_mask_t</name>
        <enumvalue id="group__nrf__auxpll__hal_1gga89d83049d7868404bb730cb84cfe1007ab41bf07aeecd2e53d3e70ba7d89409ff" prot="public">
          <name>NRF_AUXPLL_STATUS_MODE_MASK</name>
          <initializer>= AUXPLL_STATUS_MODE_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>AUXPLL mode indication. 1 - Locked mode, 0 - Freerunning mode. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__auxpll__hal_1gga89d83049d7868404bb730cb84cfe1007aa947d04dc88ec6ed6c5091d50815933e" prot="public">
          <name>NRF_AUXPLL_STATUS_PLL_RUNNING_MASK</name>
          <initializer>= AUXPLL_STATUS_PLLRUNNING_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>AUXPLL running indication. 1 - PLL running, 0 - PLL not running. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__auxpll__hal_1gga89d83049d7868404bb730cb84cfe1007a170a2eacf65dea78acca8e8f610d82ee" prot="public">
          <name>MRF_AUXPLL_STATUS_FREQUENCY_ACTUAL_MASK</name>
          <initializer>= AUXPLL_STATUS_FREQUENCYACTUAL_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Actual fractional PLL divider ratio. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>AUXPLL STATUS register bit masks. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_auxpll.h" line="78" column="1" bodyfile="hal/nrf_auxpll.h" bodystart="79" bodyend="83"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__auxpll__hal_1ga110addb039fdde0e61dca7ac7e65c8bf" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_auxpll_ctrl_outsel_t</name>
        <enumvalue id="group__nrf__auxpll__hal_1gga110addb039fdde0e61dca7ac7e65c8bfaf3d10cf09ba00de6e13198551923c1d6" prot="public">
          <name>NRF_AUXPLL_CTRL_OUTSEL_DIV_DISABLED</name>
          <initializer>= AUXPLL_AUXPLLCTRL_OUTSEL_OUTSEL_DivDisabled</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Divider disabled. Bypassed external clock still supported. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__auxpll__hal_1gga110addb039fdde0e61dca7ac7e65c8bfa787893926c3c1966a884777ae90686fc" prot="public">
          <name>NRF_AUXPLL_CTRL_OUTSEL_DIV_1</name>
          <initializer>= AUXPLL_AUXPLLCTRL_OUTSEL_OUTSEL_Div1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Divide by 1 </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__auxpll__hal_1gga110addb039fdde0e61dca7ac7e65c8bfa5ad90e060fd2c30f515995d4099bc75f" prot="public">
          <name>NRF_AUXPLL_CTRL_OUTSEL_DIV_2</name>
          <initializer>= AUXPLL_AUXPLLCTRL_OUTSEL_OUTSEL_Div2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Divide by 2 </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__auxpll__hal_1gga110addb039fdde0e61dca7ac7e65c8bfa7cf4e8eff8b232d793fb8f3cf1262655" prot="public">
          <name>NRF_AUXPLL_CTRL_OUTSEL_DIV_3</name>
          <initializer>= AUXPLL_AUXPLLCTRL_OUTSEL_OUTSEL_Div3</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Divide by 3 </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__auxpll__hal_1gga110addb039fdde0e61dca7ac7e65c8bfa7e84123fc81645b61627b4b56772e51e" prot="public">
          <name>NRF_AUXPLL_CTRL_OUTSEL_DIV_4</name>
          <initializer>= AUXPLL_AUXPLLCTRL_OUTSEL_OUTSEL_Div4</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Divide by 4 </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__auxpll__hal_1gga110addb039fdde0e61dca7ac7e65c8bfa9252a43e35dc24a55a33ca5be359266e" prot="public">
          <name>NRF_AUXPLL_CTRL_OUTSEL_DIV_6</name>
          <initializer>= AUXPLL_AUXPLLCTRL_OUTSEL_OUTSEL_Div6</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Divide by 6 </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__auxpll__hal_1gga110addb039fdde0e61dca7ac7e65c8bfaa4f6cc99f06d587a8c228ef525cf0f08" prot="public">
          <name>NRF_AUXPLL_CTRL_OUTSEL_DIV_8</name>
          <initializer>= AUXPLL_AUXPLLCTRL_OUTSEL_OUTSEL_Div8</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Divide by 8 </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__auxpll__hal_1gga110addb039fdde0e61dca7ac7e65c8bfac9ba4b25748f74b9ae4d30d22bc17a8c" prot="public">
          <name>NRF_AUXPLL_CTRL_OUTSEL_DIV_12</name>
          <initializer>= AUXPLL_AUXPLLCTRL_OUTSEL_OUTSEL_Div12</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Divide by 12 </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__auxpll__hal_1gga110addb039fdde0e61dca7ac7e65c8bfa7e41547471066b52a7009c3510e579bb" prot="public">
          <name>NRF_AUXPLL_CTRL_OUTSEL_DIV_16</name>
          <initializer>= AUXPLL_AUXPLLCTRL_OUTSEL_OUTSEL_Div16</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Divide by 16 </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>AUXPLL output prescaler ratio. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_auxpll.h" line="86" column="1" bodyfile="hal/nrf_auxpll.h" bodystart="87" bodyend="97"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__auxpll__hal_1ga4dbf54a08320cdb915cce469bb2a3833" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_auxpll_ctrl_mode_t</name>
        <enumvalue id="group__nrf__auxpll__hal_1gga4dbf54a08320cdb915cce469bb2a3833ac6acd4f21176bad110aa67d5832d5c92" prot="public">
          <name>NRF_AUXPLL_CTRL_MODE_AUTO</name>
          <initializer>= AUXPLL_AUXPLLCTRL_MODE_MODECTRL_Auto</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Automatically handled by the AUXPLL peripheral. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__auxpll__hal_1gga4dbf54a08320cdb915cce469bb2a3833ac37c4825cf045045b2f09b5dae796f7f" prot="public">
          <name>NRF_AUXPLL_CTRL_MODE_FREERUN</name>
          <initializer>= AUXPLL_AUXPLLCTRL_MODE_MODECTRL_Freerun</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Keep AUXPLL in freerunning mode. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__auxpll__hal_1gga4dbf54a08320cdb915cce469bb2a3833a1917965bad039b4dae780fb2a400e005" prot="public">
          <name>NRF_AUXPLL_CTRL_MODE_LOCKED</name>
          <initializer>= AUXPLL_AUXPLLCTRL_MODE_MODECTRL_Locked</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Keep AUXPLL in locked mode. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>AUXPLL freerunning mode control. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_auxpll.h" line="100" column="1" bodyfile="hal/nrf_auxpll.h" bodystart="101" bodyend="105"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__auxpll__hal_1ga0b0233ccc0dbd1827401be561dfa44b7" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_auxpll_divider_range_t</name>
        <enumvalue id="group__nrf__auxpll__hal_1gga0b0233ccc0dbd1827401be561dfa44b7ae1882ffed2f4f34ba549340635791786" prot="public">
          <name>NRF_AUXPLL_DIVIDER_RANGE_LOW</name>
          <initializer>= AUXPLL_CONFIG_CFGSTATIC_AUXPLLRANGE_Low</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Low range divider setting. Fractional divider in the range 3..4 </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__auxpll__hal_1gga0b0233ccc0dbd1827401be561dfa44b7a11ad56dd2b96d4a7f9527c58528e1abe" prot="public">
          <name>NRF_AUXPLL_DIVIDER_RANGE_MID</name>
          <initializer>= AUXPLL_CONFIG_CFGSTATIC_AUXPLLRANGE_Mid</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Mid range divider setting. Fractional divider in the range 4..5 </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__auxpll__hal_1gga0b0233ccc0dbd1827401be561dfa44b7a7085c6393ddbb57c08f0c6b1d054b1e7" prot="public">
          <name>NRF_AUXPLL_DIVIDER_RANGE_HIGH</name>
          <initializer>= AUXPLL_CONFIG_CFGSTATIC_AUXPLLRANGE_High</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>High range divider setting. Fractional divider in the range 5..6 </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__auxpll__hal_1gga0b0233ccc0dbd1827401be561dfa44b7a673d8bc7bf0db2b8cdade1291adb8dcc" prot="public">
          <name>NRF_AUXPLL_DIVIDER_RANGE_MAX</name>
          <initializer>= AUXPLL_CONFIG_CFGSTATIC_AUXPLLRANGE_StaticHigh</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Maximum static divider setting. Fractional division not supported. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>AUXPLL Loop divider base settings. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_auxpll.h" line="108" column="1" bodyfile="hal/nrf_auxpll.h" bodystart="109" bodyend="114"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__nrf__auxpll__hal_1gaea4ddc341e17b6f10a867a025ee50527" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_auxpll_task_trigger</definition>
        <argsstring>(NRF_AUXPLL_Type *p_reg, nrf_auxpll_task_t task)</argsstring>
        <name>nrf_auxpll_task_trigger</name>
        <param>
          <type>NRF_AUXPLL_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__auxpll__hal_1ga00833a2371cfb56ad8392461a153a653" kindref="member">nrf_auxpll_task_t</ref></type>
          <declname>task</declname>
        </param>
        <briefdescription>
<para>Function for activating the specified AUXPLL task. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">task</parametername>
</parameternamelist>
<parameterdescription>
<para>Task to be activated. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_auxpll.h" line="388" column="24" bodyfile="hal/nrf_auxpll.h" bodystart="388" bodyend="392" declfile="hal/nrf_auxpll.h" declline="132" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__auxpll__hal_1gab420ff4daeb0acd4cae06be94a0ae987" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_auxpll_task_address_get</definition>
        <argsstring>(NRF_AUXPLL_Type const *p_reg, nrf_auxpll_task_t task)</argsstring>
        <name>nrf_auxpll_task_address_get</name>
        <param>
          <type>NRF_AUXPLL_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__auxpll__hal_1ga00833a2371cfb56ad8392461a153a653" kindref="member">nrf_auxpll_task_t</ref></type>
          <declname>task</declname>
        </param>
        <briefdescription>
<para>Function for getting the address of the specified AUXPLL task register. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">task</parametername>
</parameternamelist>
<parameterdescription>
<para>The specified task.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Address of the specified task register. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_auxpll.h" line="394" column="28" bodyfile="hal/nrf_auxpll.h" bodystart="394" bodyend="398" declfile="hal/nrf_auxpll.h" declline="143" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__auxpll__hal_1ga8adf4d621c7e8c8d7b9a76c1eb1b24e8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_auxpll_event_clear</definition>
        <argsstring>(NRF_AUXPLL_Type *p_reg, nrf_auxpll_event_t event)</argsstring>
        <name>nrf_auxpll_event_clear</name>
        <param>
          <type>NRF_AUXPLL_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__auxpll__hal_1ga139a93ec776aed9979a96f249af7a7eb" kindref="member">nrf_auxpll_event_t</ref></type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>Function for clearing the specified AUXPLL event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event to clear. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_auxpll.h" line="400" column="24" bodyfile="hal/nrf_auxpll.h" bodystart="400" bodyend="405" declfile="hal/nrf_auxpll.h" declline="152" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__auxpll__hal_1ga1f950ef4f2f16dd388cd309b481d2510" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE bool</type>
        <definition>NRF_STATIC_INLINE bool nrf_auxpll_event_check</definition>
        <argsstring>(NRF_AUXPLL_Type const *p_reg, nrf_auxpll_event_t event)</argsstring>
        <name>nrf_auxpll_event_check</name>
        <param>
          <type>NRF_AUXPLL_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__auxpll__hal_1ga139a93ec776aed9979a96f249af7a7eb" kindref="member">nrf_auxpll_event_t</ref></type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>Function for retrieving the state of the AUXPLL event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event to be checked.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>The event has been generated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>The event has not been generated. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_auxpll.h" line="407" column="24" bodyfile="hal/nrf_auxpll.h" bodystart="407" bodyend="411" declfile="hal/nrf_auxpll.h" declline="164" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__auxpll__hal_1ga3b67754ec3060a32d78f10f3010760a4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_auxpll_event_address_get</definition>
        <argsstring>(NRF_AUXPLL_Type const *p_reg, nrf_auxpll_event_t event)</argsstring>
        <name>nrf_auxpll_event_address_get</name>
        <param>
          <type>NRF_AUXPLL_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__auxpll__hal_1ga139a93ec776aed9979a96f249af7a7eb" kindref="member">nrf_auxpll_event_t</ref></type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>Function for getting the address of the specified AUXPLL event register. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>The specified event.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Address of the specified event register. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_auxpll.h" line="413" column="28" bodyfile="hal/nrf_auxpll.h" bodystart="413" bodyend="417" declfile="hal/nrf_auxpll.h" declline="175" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__auxpll__hal_1ga0ae47a49f04c20a2b4dc9ccfff2cf14a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_auxpll_int_enable</definition>
        <argsstring>(NRF_AUXPLL_Type *p_reg, uint32_t mask)</argsstring>
        <name>nrf_auxpll_int_enable</name>
        <param>
          <type>NRF_AUXPLL_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Function for enabling the specified interrupts. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of interrupts to be enabled. Use <ref refid="group__nrf__auxpll__hal_1ga7326955aff7345645d8d76517932c6b4" kindref="member">nrf_auxpll_int_mask_t</ref> values for bit masking. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_auxpll.h" line="419" column="24" bodyfile="hal/nrf_auxpll.h" bodystart="419" bodyend="423" declfile="hal/nrf_auxpll.h" declline="185" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__auxpll__hal_1ga676c5fb5d7f0fe08e4fccf82bd7af6b7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_auxpll_int_disable</definition>
        <argsstring>(NRF_AUXPLL_Type *p_reg, uint32_t mask)</argsstring>
        <name>nrf_auxpll_int_disable</name>
        <param>
          <type>NRF_AUXPLL_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Function for disabling the specified interrupts. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of interrupts to be disabled. Use <ref refid="group__nrf__auxpll__hal_1ga7326955aff7345645d8d76517932c6b4" kindref="member">nrf_auxpll_int_mask_t</ref> values for bit masking. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_auxpll.h" line="425" column="24" bodyfile="hal/nrf_auxpll.h" bodystart="425" bodyend="429" declfile="hal/nrf_auxpll.h" declline="195" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__auxpll__hal_1gaa4bc60bc8694ecce051777023a3fa7cf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE bool</type>
        <definition>NRF_STATIC_INLINE bool nrf_auxpll_int_enable_check</definition>
        <argsstring>(NRF_AUXPLL_Type const *p_reg, uint32_t mask)</argsstring>
        <name>nrf_auxpll_int_enable_check</name>
        <param>
          <type>NRF_AUXPLL_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Function for checking if the specified interrupts are enabled. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of interrupts to be checked. Use <ref refid="group__nrf__auxpll__hal_1ga7326955aff7345645d8d76517932c6b4" kindref="member">nrf_auxpll_int_mask_t</ref> values for bit masking.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true requested interrupts are enabled. </para>
</simplesect>
<simplesect kind="return"><para>false requested interrupts are disabled. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_auxpll.h" line="431" column="24" bodyfile="hal/nrf_auxpll.h" bodystart="431" bodyend="435" declfile="hal/nrf_auxpll.h" declline="208" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__auxpll__hal_1gadb36e8e2a3ff5c6fa7b4b7d9746721af" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE bool</type>
        <definition>NRF_STATIC_INLINE bool nrf_auxpll_int_pending_check</definition>
        <argsstring>(NRF_AUXPLL_Type const *p_reg, uint32_t mask)</argsstring>
        <name>nrf_auxpll_int_pending_check</name>
        <param>
          <type>NRF_AUXPLL_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Function for checking if the specified interrupts are pending. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of interrupts to be checked. Use <ref refid="group__nrf__auxpll__hal_1ga7326955aff7345645d8d76517932c6b4" kindref="member">nrf_auxpll_int_mask_t</ref> values for bit masking.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true requested interrupts are pending. </para>
</simplesect>
<simplesect kind="return"><para>false requested interrupts are not pending. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_auxpll.h" line="437" column="24" bodyfile="hal/nrf_auxpll.h" bodystart="437" bodyend="441" declfile="hal/nrf_auxpll.h" declline="221" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__auxpll__hal_1gad34dab532935eaeae43cb76e61ba57a2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_auxpll_status_get</definition>
        <argsstring>(NRF_AUXPLL_Type const *p_reg)</argsstring>
        <name>nrf_auxpll_status_get</name>
        <param>
          <type>NRF_AUXPLL_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting AUXPLL status. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The AUXPLL STATUS register value. Use <ref refid="group__nrf__auxpll__hal_1ga89d83049d7868404bb730cb84cfe1007" kindref="member">nrf_auxpll_status_mask_t</ref> values for bit masking. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_auxpll.h" line="443" column="28" bodyfile="hal/nrf_auxpll.h" bodystart="443" bodyend="446" declfile="hal/nrf_auxpll.h" declline="231" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__auxpll__hal_1ga6faf0bf81ee5075ef3fa54a107389c9c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_auxpll_config_get</definition>
        <argsstring>(NRF_AUXPLL_Type const *p_reg, nrf_auxpll_config_t *p_cfg)</argsstring>
        <name>nrf_auxpll_config_get</name>
        <param>
          <type>NRF_AUXPLL_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="structnrf__auxpll__config__t" kindref="compound">nrf_auxpll_config_t</ref> *</type>
          <declname>p_cfg</declname>
        </param>
        <briefdescription>
<para>Function for getting the AUXPLL configuration. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">p_cfg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure to be filled with current AUXPLL configuration. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_auxpll.h" line="448" column="24" bodyfile="hal/nrf_auxpll.h" bodystart="448" bodyend="468" declfile="hal/nrf_auxpll.h" declline="239" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__auxpll__hal_1ga266f286ffaf6891d66a8b0acbf174dda" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_auxpll_config_set</definition>
        <argsstring>(NRF_AUXPLL_Type *p_reg, nrf_auxpll_config_t const *p_cfg)</argsstring>
        <name>nrf_auxpll_config_set</name>
        <param>
          <type>NRF_AUXPLL_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="structnrf__auxpll__config__t" kindref="compound">nrf_auxpll_config_t</ref> const *</type>
          <declname>p_cfg</declname>
        </param>
        <briefdescription>
<para>Function for setting the AUXPLL configuration. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">p_cfg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure with AUXPLL configuration. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_auxpll.h" line="470" column="24" bodyfile="hal/nrf_auxpll.h" bodystart="470" bodyend="486" declfile="hal/nrf_auxpll.h" declline="248" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__auxpll__hal_1ga90e037c94c5d79f9e99c90e6ebccce0a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_auxpll_trim_ctune_set</definition>
        <argsstring>(NRF_AUXPLL_Type *p_reg, uint8_t value)</argsstring>
        <name>nrf_auxpll_trim_ctune_set</name>
        <param>
          <type>NRF_AUXPLL_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Function for setting the AUXPLL ring oscillator core process corner tuning. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>tuning frequency value. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_auxpll.h" line="488" column="24" bodyfile="hal/nrf_auxpll.h" bodystart="488" bodyend="492" declfile="hal/nrf_auxpll.h" declline="257" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__auxpll__hal_1ga009cc5192d245990cdef0154fdd14a23" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint8_t</type>
        <definition>NRF_STATIC_INLINE uint8_t nrf_auxpll_trim_ctune_get</definition>
        <argsstring>(NRF_AUXPLL_Type const *p_reg)</argsstring>
        <name>nrf_auxpll_trim_ctune_get</name>
        <param>
          <type>NRF_AUXPLL_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting the AUXPLL ring oscillator core process corner tuning. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The AUXPLL ring oscillator core process corner tuning value. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_auxpll.h" line="494" column="27" bodyfile="hal/nrf_auxpll.h" bodystart="494" bodyend="497" declfile="hal/nrf_auxpll.h" declline="267" declcolumn="27"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__auxpll__hal_1ga3e306b9ccb57dde387d6043e5f8d5efe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_auxpll_ctrl_frequency_set</definition>
        <argsstring>(NRF_AUXPLL_Type *p_reg, uint16_t value)</argsstring>
        <name>nrf_auxpll_ctrl_frequency_set</name>
        <param>
          <type>NRF_AUXPLL_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Function for setting the AUXPLL fractional PLL divider ratio tuning. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>Fractional divider ratio. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_auxpll.h" line="499" column="24" bodyfile="hal/nrf_auxpll.h" bodystart="499" bodyend="503" declfile="hal/nrf_auxpll.h" declline="276" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__auxpll__hal_1ga66f2cba55b729699377f5f5c9df7b4d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint16_t</type>
        <definition>NRF_STATIC_INLINE uint16_t nrf_auxpll_ctrl_frequency_get</definition>
        <argsstring>(NRF_AUXPLL_Type const *p_reg)</argsstring>
        <name>nrf_auxpll_ctrl_frequency_get</name>
        <param>
          <type>NRF_AUXPLL_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting the AUXPLL fractional PLL divider ratio. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Fractional divider ratio. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_auxpll.h" line="505" column="28" bodyfile="hal/nrf_auxpll.h" bodystart="505" bodyend="508" declfile="hal/nrf_auxpll.h" declline="286" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__auxpll__hal_1ga2d9df7b43bc7ab5043970dd79f39ddc8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_auxpll_ctrl_freqinc_set</definition>
        <argsstring>(NRF_AUXPLL_Type *p_reg, int8_t value)</argsstring>
        <name>nrf_auxpll_ctrl_freqinc_set</name>
        <param>
          <type>NRF_AUXPLL_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>int8_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Function for setting the AUXPLL frequency increment value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>Signed 8-bit frequency increment, applied to current value of FREQUENCY register. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_auxpll.h" line="510" column="24" bodyfile="hal/nrf_auxpll.h" bodystart="510" bodyend="514" declfile="hal/nrf_auxpll.h" declline="294" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__auxpll__hal_1gaee7e190c03c72049db9bd190358b09fd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE int8_t</type>
        <definition>NRF_STATIC_INLINE int8_t nrf_auxpll_ctrl_freqinc_get</definition>
        <argsstring>(NRF_AUXPLL_Type const *p_reg)</argsstring>
        <name>nrf_auxpll_ctrl_freqinc_get</name>
        <param>
          <type>NRF_AUXPLL_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting the AUXPLL frequency increment value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Signed 8-bit frequency increment. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_auxpll.h" line="516" column="26" bodyfile="hal/nrf_auxpll.h" bodystart="516" bodyend="519" declfile="hal/nrf_auxpll.h" declline="304" declcolumn="26"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__auxpll__hal_1ga0714101e5b11664b5ed7d62f2cd9274a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_auxpll_ctrl_freqinc_period_set</definition>
        <argsstring>(NRF_AUXPLL_Type *p_reg, uint16_t value)</argsstring>
        <name>nrf_auxpll_ctrl_freqinc_period_set</name>
        <param>
          <type>NRF_AUXPLL_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Function for setting the AUXPLL frequency increment period. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>Frequency increment period in 1 us steps. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_auxpll.h" line="521" column="24" bodyfile="hal/nrf_auxpll.h" bodystart="521" bodyend="525" declfile="hal/nrf_auxpll.h" declline="312" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__auxpll__hal_1gad7b1219e2e02389b7f603ebcefa7b23a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint16_t</type>
        <definition>NRF_STATIC_INLINE uint16_t nrf_auxpll_ctrl_freqinc_period_get</definition>
        <argsstring>(NRF_AUXPLL_Type const *p_reg)</argsstring>
        <name>nrf_auxpll_ctrl_freqinc_period_get</name>
        <param>
          <type>NRF_AUXPLL_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting the AUXPLL frequency increment period value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Frequency increment period. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_auxpll.h" line="527" column="28" bodyfile="hal/nrf_auxpll.h" bodystart="527" bodyend="530" declfile="hal/nrf_auxpll.h" declline="322" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__auxpll__hal_1ga89a038128bbcf6d6060e44e7e2ccb001" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_auxpll_ctrl_outsel_set</definition>
        <argsstring>(NRF_AUXPLL_Type *p_reg, nrf_auxpll_ctrl_outsel_t value)</argsstring>
        <name>nrf_auxpll_ctrl_outsel_set</name>
        <param>
          <type>NRF_AUXPLL_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__auxpll__hal_1ga110addb039fdde0e61dca7ac7e65c8bf" kindref="member">nrf_auxpll_ctrl_outsel_t</ref></type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Function for setting the AUXPLL output prescaler. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>Prescaler ratio. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_auxpll.h" line="532" column="24" bodyfile="hal/nrf_auxpll.h" bodystart="532" bodyend="536" declfile="hal/nrf_auxpll.h" declline="330" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__auxpll__hal_1ga58bb555226de8e2c53d7d27359bc61e0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE <ref refid="group__nrf__auxpll__hal_1ga110addb039fdde0e61dca7ac7e65c8bf" kindref="member">nrf_auxpll_ctrl_outsel_t</ref></type>
        <definition>NRF_STATIC_INLINE nrf_auxpll_ctrl_outsel_t nrf_auxpll_ctrl_outsel_get</definition>
        <argsstring>(NRF_AUXPLL_Type const *p_reg)</argsstring>
        <name>nrf_auxpll_ctrl_outsel_get</name>
        <param>
          <type>NRF_AUXPLL_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting the AUXPLL output prescaler value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Prescaler ratio. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_auxpll.h" line="538" column="44" bodyfile="hal/nrf_auxpll.h" bodystart="538" bodyend="542" declfile="hal/nrf_auxpll.h" declline="340" declcolumn="44"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__auxpll__hal_1gadde772559f66a0c3192ccf4106344f6b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_auxpll_ctrl_mode_set</definition>
        <argsstring>(NRF_AUXPLL_Type *p_reg, nrf_auxpll_ctrl_mode_t value)</argsstring>
        <name>nrf_auxpll_ctrl_mode_set</name>
        <param>
          <type>NRF_AUXPLL_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__auxpll__hal_1ga4dbf54a08320cdb915cce469bb2a3833" kindref="member">nrf_auxpll_ctrl_mode_t</ref></type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Function for setting the AUXPLL mode. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>AUXPLL running mode. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_auxpll.h" line="544" column="24" bodyfile="hal/nrf_auxpll.h" bodystart="544" bodyend="548" declfile="hal/nrf_auxpll.h" declline="348" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__auxpll__hal_1ga25947ecad40fce8a75bea61885fdedd3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE <ref refid="group__nrf__auxpll__hal_1ga4dbf54a08320cdb915cce469bb2a3833" kindref="member">nrf_auxpll_ctrl_mode_t</ref></type>
        <definition>NRF_STATIC_INLINE nrf_auxpll_ctrl_mode_t nrf_auxpll_ctrl_mode_get</definition>
        <argsstring>(NRF_AUXPLL_Type const *p_reg)</argsstring>
        <name>nrf_auxpll_ctrl_mode_get</name>
        <param>
          <type>NRF_AUXPLL_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting the AUXPLL mode. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>AUXPLL running mode. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_auxpll.h" line="550" column="42" bodyfile="hal/nrf_auxpll.h" bodystart="550" bodyend="556" declfile="hal/nrf_auxpll.h" declline="358" declcolumn="42"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__auxpll__hal_1gaa6ce2278918e16a0d77638b28cff1f2f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_auxpll_lock</definition>
        <argsstring>(NRF_AUXPLL_Type *p_reg)</argsstring>
        <name>nrf_auxpll_lock</name>
        <param>
          <type>NRF_AUXPLL_Type *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Enable LOCK for mirrored AUXPLL registers. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_auxpll.h" line="558" column="24" bodyfile="hal/nrf_auxpll.h" bodystart="558" bodyend="561" declfile="hal/nrf_auxpll.h" declline="365" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__auxpll__hal_1ga022f5a242f3a44e3c2e611c274587372" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_auxpll_unlock</definition>
        <argsstring>(NRF_AUXPLL_Type *p_reg)</argsstring>
        <name>nrf_auxpll_unlock</name>
        <param>
          <type>NRF_AUXPLL_Type *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Disable the lock after configuring all AUXPLL mirrored registers. </para>
        </briefdescription>
        <detaileddescription>
<para>The individual mirrored registers can be updated any time when the lock is disabled.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_auxpll.h" line="563" column="24" bodyfile="hal/nrf_auxpll.h" bodystart="563" bodyend="566" declfile="hal/nrf_auxpll.h" declline="374" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__auxpll__hal_1ga2c5776fa7f4b3698a537e97ed2643b2a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE bool</type>
        <definition>NRF_STATIC_INLINE bool nrf_auxpll_lock_check</definition>
        <argsstring>(NRF_AUXPLL_Type const *p_reg)</argsstring>
        <name>nrf_auxpll_lock_check</name>
        <param>
          <type>NRF_AUXPLL_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Check if mirrored AUXPLL registers are locked. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>The AUXPLL mirrored register lock enabled. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>The AUXPLL mirrored register lock disabled. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_auxpll.h" line="568" column="24" bodyfile="hal/nrf_auxpll.h" bodystart="568" bodyend="571" declfile="hal/nrf_auxpll.h" declline="384" declcolumn="24"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2022<sp/>-<sp/>2024,<sp/>Nordic<sp/>Semiconductor<sp/>ASA</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>All<sp/>rights<sp/>reserved.</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>SPDX-License-Identifier:<sp/>BSD-3-Clause</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions<sp/>are<sp/>met:</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>1.<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright<sp/>notice,<sp/>this</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>2.<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the<sp/>distribution.</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/>3.<sp/>Neither<sp/>the<sp/>name<sp/>of<sp/>the<sp/>copyright<sp/>holder<sp/>nor<sp/>the<sp/>names<sp/>of<sp/>its</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>contributors<sp/>may<sp/>be<sp/>used<sp/>to<sp/>endorse<sp/>or<sp/>promote<sp/>products<sp/>derived<sp/>from<sp/>this</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>software<sp/>without<sp/>specific<sp/>prior<sp/>written<sp/>permission.</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>COPYRIGHT<sp/>HOLDERS<sp/>AND<sp/>CONTRIBUTORS<sp/>&quot;AS<sp/>IS&quot;</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/>AND<sp/>ANY<sp/>EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>THE</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*<sp/>ARE<sp/>DISCLAIMED.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>COPYRIGHT<sp/>HOLDER<sp/>OR<sp/>CONTRIBUTORS<sp/>BE</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,<sp/>SPECIAL,<sp/>EXEMPLARY,<sp/>OR</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>PROCUREMENT<sp/>OF</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>*<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,<sp/>DATA,<sp/>OR<sp/>PROFITS;<sp/>OR<sp/>BUSINESS</highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/>*<sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY<sp/>THEORY<sp/>OF<sp/>LIABILITY,<sp/>WHETHER<sp/>IN</highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/>*<sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR<sp/>OTHERWISE)</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/>*<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE<sp/>OF<sp/>THIS<sp/>SOFTWARE,<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/>*<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight></codeline>
<codeline lineno="32"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>NRF_AUXPLL_H__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_AUXPLL_H__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;nrfx.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="43"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="44"><highlight class="comment"><sp/>*<sp/>@defgroup<sp/>nrf_auxpll_hal<sp/>Auxiliary<sp/>PLL<sp/>HAL</highlight></codeline>
<codeline lineno="45"><highlight class="comment"><sp/>*<sp/>@{</highlight></codeline>
<codeline lineno="46"><highlight class="comment"><sp/>*<sp/>@ingroup<sp/>nrf_clock</highlight></codeline>
<codeline lineno="47"><highlight class="comment"><sp/>*<sp/>@brief<sp/><sp/><sp/>Hardware<sp/>access<sp/>layer<sp/>for<sp/>managing<sp/>the<sp/>Auxiliary<sp/>Phase<sp/>Locked<sp/>Loop<sp/>(AUXPLL)<sp/>peripheral.</highlight></codeline>
<codeline lineno="48"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="50"><highlight class="comment">/**<sp/>@brief<sp/>AUXPLL<sp/>tasks.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal">{</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__auxpll__hal_1gga00833a2371cfb56ad8392461a153a653a3b6fe6b7b0b11c19bdc26efa5aff628b" kindref="member">NRF_AUXPLL_TASK_START</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_AUXPLL_Type,<sp/>TASKS_START),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Start<sp/>the<sp/>AUXPLL.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__auxpll__hal_1gga00833a2371cfb56ad8392461a153a653aa382be4b6b65e33b874833db020f96a1" kindref="member">NRF_AUXPLL_TASK_STOP</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_AUXPLL_Type,<sp/>TASKS_STOP),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Stop<sp/>the<sp/>AUXPLL.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__auxpll__hal_1gga00833a2371cfb56ad8392461a153a653aedc2e6778a964e9f224772ba3665a861" kindref="member">NRF_AUXPLL_TASK_FREQ_NEW_FINE</ref><sp/><sp/>=<sp/>offsetof(NRF_AUXPLL_Type,<sp/>TASKS_NEWFINEFREQ),<sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Change<sp/>fine<sp/>frequency.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__auxpll__hal_1gga00833a2371cfb56ad8392461a153a653a9a601d4cf882b804b3ce1163385015f4" kindref="member">NRF_AUXPLL_TASK_FREQ_NEW_BASE</ref><sp/><sp/>=<sp/>offsetof(NRF_AUXPLL_Type,<sp/>TASKS_NEWBASEFREQ),<sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Change<sp/>base<sp/>frequency.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__auxpll__hal_1gga00833a2371cfb56ad8392461a153a653a5f796cfaf2591a10c3905887376fe1f2" kindref="member">NRF_AUXPLL_TASK_FREQ_INC_START</ref><sp/>=<sp/>offsetof(NRF_AUXPLL_Type,<sp/>TASKS_FREQINCSTART),<sp/></highlight><highlight class="comment">/**&lt;<sp/>Start<sp/>automated<sp/>frequency<sp/>increment.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__auxpll__hal_1gga00833a2371cfb56ad8392461a153a653a073e29219a3c4b61574615550322b2a9" kindref="member">NRF_AUXPLL_TASK_FREQ_INC_STOP</ref><sp/><sp/>=<sp/>offsetof(NRF_AUXPLL_Type,<sp/>TASKS_FREQINCSTOP),<sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Stop<sp/>automated<sp/>frequency<sp/>increment.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal">}<sp/><ref refid="group__nrf__auxpll__hal_1ga00833a2371cfb56ad8392461a153a653" kindref="member">nrf_auxpll_task_t</ref>;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="61"><highlight class="comment">/**<sp/>@brief<sp/>AUXPLL<sp/>events.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal">{</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__auxpll__hal_1gga139a93ec776aed9979a96f249af7a7eba60727d2a8ba4ef7e24223d3d4c3c59cd" kindref="member">NRF_AUXPLL_EVENT_STARTED</ref><sp/>=<sp/>offsetof(NRF_AUXPLL_Type,<sp/>EVENTS_STARTED),<sp/></highlight><highlight class="comment">/**&lt;<sp/>Event<sp/>indicating<sp/>that<sp/>AUXPLL<sp/>started.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__auxpll__hal_1gga139a93ec776aed9979a96f249af7a7eba4eb448c77a1249e3a7587fb531231557" kindref="member">NRF_AUXPLL_EVENT_STOPPED</ref><sp/>=<sp/>offsetof(NRF_AUXPLL_Type,<sp/>EVENTS_STOPPED),<sp/></highlight><highlight class="comment">/**&lt;<sp/>Event<sp/>indicating<sp/>that<sp/>AUXPLL<sp/>stopped.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__auxpll__hal_1gga139a93ec776aed9979a96f249af7a7eba10b3a66f4e4b99953dc87324d893100e" kindref="member">NRF_AUXPLL_EVENT_LOCKED</ref><sp/><sp/>=<sp/>offsetof(NRF_AUXPLL_Type,<sp/>EVENTS_LOCKED),<sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Event<sp/>indicating<sp/>that<sp/>AUXPLL<sp/>locked.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal">}<sp/><ref refid="group__nrf__auxpll__hal_1ga139a93ec776aed9979a96f249af7a7eb" kindref="member">nrf_auxpll_event_t</ref>;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="69"><highlight class="comment">/**<sp/>@brief<sp/>AUXPLL<sp/>interrupts.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal">{</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__auxpll__hal_1gga7326955aff7345645d8d76517932c6b4a41a2aad86c95d96b7ba672d38f7f8e26" kindref="member">NRF_AUXPLL_INT_STARTED_MASK</ref><sp/>=<sp/>AUXPLL_INTEN_STARTED_Msk,<sp/></highlight><highlight class="comment">/**&lt;<sp/>AUXPLL<sp/>interrupt<sp/>for<sp/>STARTED<sp/>event.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__auxpll__hal_1gga7326955aff7345645d8d76517932c6b4a9ce7de1f8dce973007adc5941202535b" kindref="member">NRF_AUXPLL_INT_STOPPED_MASK</ref><sp/>=<sp/>AUXPLL_INTEN_STOPPED_Msk,<sp/></highlight><highlight class="comment">/**&lt;<sp/>AUXPLL<sp/>interrupt<sp/>for<sp/>STOPPED<sp/>event.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__auxpll__hal_1gga7326955aff7345645d8d76517932c6b4aab3640b376bcbe3da83764e9e4fe6c8e" kindref="member">NRF_AUXPLL_INT_LOCKED_MASK</ref><sp/><sp/>=<sp/>AUXPLL_INTEN_LOCKED_Msk<sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>AUXPLL<sp/>interrupt<sp/>for<sp/>LOCKED<sp/>event.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal">}<sp/><ref refid="group__nrf__auxpll__hal_1ga7326955aff7345645d8d76517932c6b4" kindref="member">nrf_auxpll_int_mask_t</ref>;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="77"><highlight class="comment">/**<sp/>@brief<sp/>AUXPLL<sp/>STATUS<sp/>register<sp/>bit<sp/>masks.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal">{</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__auxpll__hal_1gga89d83049d7868404bb730cb84cfe1007ab41bf07aeecd2e53d3e70ba7d89409ff" kindref="member">NRF_AUXPLL_STATUS_MODE_MASK</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>AUXPLL_STATUS_MODE_Msk,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>AUXPLL<sp/>mode<sp/>indication.<sp/>1<sp/>-<sp/>Locked<sp/>mode,<sp/>0<sp/>-<sp/>Freerunning<sp/>mode.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__auxpll__hal_1gga89d83049d7868404bb730cb84cfe1007aa947d04dc88ec6ed6c5091d50815933e" kindref="member">NRF_AUXPLL_STATUS_PLL_RUNNING_MASK</ref><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>AUXPLL_STATUS_PLLRUNNING_Msk,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>AUXPLL<sp/>running<sp/>indication.<sp/>1<sp/>-<sp/>PLL<sp/>running,<sp/>0<sp/>-<sp/>PLL<sp/>not<sp/>running.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__auxpll__hal_1gga89d83049d7868404bb730cb84cfe1007a170a2eacf65dea78acca8e8f610d82ee" kindref="member">MRF_AUXPLL_STATUS_FREQUENCY_ACTUAL_MASK</ref><sp/>=<sp/>AUXPLL_STATUS_FREQUENCYACTUAL_Msk<sp/></highlight><highlight class="comment">/**&lt;<sp/>Actual<sp/>fractional<sp/>PLL<sp/>divider<sp/>ratio.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal">}<sp/><ref refid="group__nrf__auxpll__hal_1ga89d83049d7868404bb730cb84cfe1007" kindref="member">nrf_auxpll_status_mask_t</ref>;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="85"><highlight class="comment">/**<sp/>@brief<sp/>AUXPLL<sp/>output<sp/>prescaler<sp/>ratio.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal">{</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__auxpll__hal_1gga110addb039fdde0e61dca7ac7e65c8bfaf3d10cf09ba00de6e13198551923c1d6" kindref="member">NRF_AUXPLL_CTRL_OUTSEL_DIV_DISABLED</ref><sp/>=<sp/>AUXPLL_AUXPLLCTRL_OUTSEL_OUTSEL_DivDisabled,<sp/></highlight><highlight class="comment">/**&lt;<sp/>Divider<sp/>disabled.<sp/>Bypassed<sp/>external<sp/>clock<sp/>still<sp/>supported.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__auxpll__hal_1gga110addb039fdde0e61dca7ac7e65c8bfa787893926c3c1966a884777ae90686fc" kindref="member">NRF_AUXPLL_CTRL_OUTSEL_DIV_1</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>AUXPLL_AUXPLLCTRL_OUTSEL_OUTSEL_Div1,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Divide<sp/>by<sp/>1<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__auxpll__hal_1gga110addb039fdde0e61dca7ac7e65c8bfa5ad90e060fd2c30f515995d4099bc75f" kindref="member">NRF_AUXPLL_CTRL_OUTSEL_DIV_2</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>AUXPLL_AUXPLLCTRL_OUTSEL_OUTSEL_Div2,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Divide<sp/>by<sp/>2<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__auxpll__hal_1gga110addb039fdde0e61dca7ac7e65c8bfa7cf4e8eff8b232d793fb8f3cf1262655" kindref="member">NRF_AUXPLL_CTRL_OUTSEL_DIV_3</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>AUXPLL_AUXPLLCTRL_OUTSEL_OUTSEL_Div3,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Divide<sp/>by<sp/>3<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__auxpll__hal_1gga110addb039fdde0e61dca7ac7e65c8bfa7e84123fc81645b61627b4b56772e51e" kindref="member">NRF_AUXPLL_CTRL_OUTSEL_DIV_4</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>AUXPLL_AUXPLLCTRL_OUTSEL_OUTSEL_Div4,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Divide<sp/>by<sp/>4<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__auxpll__hal_1gga110addb039fdde0e61dca7ac7e65c8bfa9252a43e35dc24a55a33ca5be359266e" kindref="member">NRF_AUXPLL_CTRL_OUTSEL_DIV_6</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>AUXPLL_AUXPLLCTRL_OUTSEL_OUTSEL_Div6,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Divide<sp/>by<sp/>6<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__auxpll__hal_1gga110addb039fdde0e61dca7ac7e65c8bfaa4f6cc99f06d587a8c228ef525cf0f08" kindref="member">NRF_AUXPLL_CTRL_OUTSEL_DIV_8</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>AUXPLL_AUXPLLCTRL_OUTSEL_OUTSEL_Div8,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Divide<sp/>by<sp/>8<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__auxpll__hal_1gga110addb039fdde0e61dca7ac7e65c8bfac9ba4b25748f74b9ae4d30d22bc17a8c" kindref="member">NRF_AUXPLL_CTRL_OUTSEL_DIV_12</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>AUXPLL_AUXPLLCTRL_OUTSEL_OUTSEL_Div12,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Divide<sp/>by<sp/>12<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__auxpll__hal_1gga110addb039fdde0e61dca7ac7e65c8bfa7e41547471066b52a7009c3510e579bb" kindref="member">NRF_AUXPLL_CTRL_OUTSEL_DIV_16</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>AUXPLL_AUXPLLCTRL_OUTSEL_OUTSEL_Div16,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Divide<sp/>by<sp/>16<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal">}<sp/><ref refid="group__nrf__auxpll__hal_1ga110addb039fdde0e61dca7ac7e65c8bf" kindref="member">nrf_auxpll_ctrl_outsel_t</ref>;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="99"><highlight class="comment">/**<sp/>@brief<sp/>AUXPLL<sp/>freerunning<sp/>mode<sp/>control.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal">{</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__auxpll__hal_1gga4dbf54a08320cdb915cce469bb2a3833ac6acd4f21176bad110aa67d5832d5c92" kindref="member">NRF_AUXPLL_CTRL_MODE_AUTO</ref><sp/><sp/><sp/><sp/>=<sp/>AUXPLL_AUXPLLCTRL_MODE_MODECTRL_Auto,<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Automatically<sp/>handled<sp/>by<sp/>the<sp/>AUXPLL<sp/>peripheral.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__auxpll__hal_1gga4dbf54a08320cdb915cce469bb2a3833ac37c4825cf045045b2f09b5dae796f7f" kindref="member">NRF_AUXPLL_CTRL_MODE_FREERUN</ref><sp/>=<sp/>AUXPLL_AUXPLLCTRL_MODE_MODECTRL_Freerun,<sp/></highlight><highlight class="comment">/**&lt;<sp/>Keep<sp/>AUXPLL<sp/>in<sp/>freerunning<sp/>mode.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__auxpll__hal_1gga4dbf54a08320cdb915cce469bb2a3833a1917965bad039b4dae780fb2a400e005" kindref="member">NRF_AUXPLL_CTRL_MODE_LOCKED</ref><sp/><sp/>=<sp/>AUXPLL_AUXPLLCTRL_MODE_MODECTRL_Locked<sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Keep<sp/>AUXPLL<sp/>in<sp/>locked<sp/>mode.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal">}<sp/><ref refid="group__nrf__auxpll__hal_1ga4dbf54a08320cdb915cce469bb2a3833" kindref="member">nrf_auxpll_ctrl_mode_t</ref>;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="107"><highlight class="comment">/**<sp/>@brief<sp/>AUXPLL<sp/>Loop<sp/>divider<sp/>base<sp/>settings.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal">{</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__auxpll__hal_1gga0b0233ccc0dbd1827401be561dfa44b7ae1882ffed2f4f34ba549340635791786" kindref="member">NRF_AUXPLL_DIVIDER_RANGE_LOW</ref><sp/><sp/>=<sp/>AUXPLL_CONFIG_CFGSTATIC_AUXPLLRANGE_Low,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Low<sp/>range<sp/>divider<sp/>setting.<sp/>Fractional<sp/>divider<sp/>in<sp/>the<sp/>range<sp/>3..4<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__auxpll__hal_1gga0b0233ccc0dbd1827401be561dfa44b7a11ad56dd2b96d4a7f9527c58528e1abe" kindref="member">NRF_AUXPLL_DIVIDER_RANGE_MID</ref><sp/><sp/>=<sp/>AUXPLL_CONFIG_CFGSTATIC_AUXPLLRANGE_Mid,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Mid<sp/>range<sp/>divider<sp/>setting.<sp/>Fractional<sp/>divider<sp/>in<sp/>the<sp/>range<sp/>4..5<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__auxpll__hal_1gga0b0233ccc0dbd1827401be561dfa44b7a7085c6393ddbb57c08f0c6b1d054b1e7" kindref="member">NRF_AUXPLL_DIVIDER_RANGE_HIGH</ref><sp/>=<sp/>AUXPLL_CONFIG_CFGSTATIC_AUXPLLRANGE_High,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>High<sp/>range<sp/>divider<sp/>setting.<sp/>Fractional<sp/>divider<sp/>in<sp/>the<sp/>range<sp/>5..6<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__auxpll__hal_1gga0b0233ccc0dbd1827401be561dfa44b7a673d8bc7bf0db2b8cdade1291adb8dcc" kindref="member">NRF_AUXPLL_DIVIDER_RANGE_MAX</ref><sp/><sp/>=<sp/>AUXPLL_CONFIG_CFGSTATIC_AUXPLLRANGE_StaticHigh,<sp/></highlight><highlight class="comment">/**&lt;<sp/>Maximum<sp/>static<sp/>divider<sp/>setting.<sp/>Fractional<sp/>division<sp/>not<sp/>supported.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal">}<sp/><ref refid="group__nrf__auxpll__hal_1ga0b0233ccc0dbd1827401be561dfa44b7" kindref="member">nrf_auxpll_divider_range_t</ref><sp/>;</highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="116"><highlight class="comment">/**<sp/>@brief<sp/>AUXPLL<sp/>configuration.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117" refid="structnrf__auxpll__config__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal">{</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>outdrive;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Output<sp/>buffer<sp/>drive<sp/>strength<sp/>selection.<sp/>Range<sp/>0..3<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>current_tune;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Constant<sp/>current<sp/>tune<sp/>for<sp/>ring<sp/>oscillator.<sp/>Range<sp/>0..15<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>sdm_off;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Turn<sp/>off<sp/>sigma<sp/>delta<sp/>modulation<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>dither_off;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Turn<sp/>off<sp/>dither<sp/>in<sp/>sigma<sp/>delta<sp/>modulator<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__auxpll__hal_1ga0b0233ccc0dbd1827401be561dfa44b7" kindref="member">nrf_auxpll_divider_range_t</ref><sp/>range;<sp/></highlight><highlight class="comment">/**&lt;<sp/>Loop<sp/>divider<sp/>base<sp/>settings<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal">}<sp/><ref refid="structnrf__auxpll__config__t" kindref="compound">nrf_auxpll_config_t</ref>;</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="126"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="127"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>activating<sp/>the<sp/>specified<sp/>AUXPLL<sp/>task.</highlight></codeline>
<codeline lineno="128"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="129"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="130"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>task<sp/><sp/>Task<sp/>to<sp/>be<sp/>activated.</highlight></codeline>
<codeline lineno="131"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__auxpll__hal_1gaea4ddc341e17b6f10a867a025ee50527" kindref="member">nrf_auxpll_task_trigger</ref>(NRF_AUXPLL_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__auxpll__hal_1ga00833a2371cfb56ad8392461a153a653" kindref="member">nrf_auxpll_task_t</ref><sp/>task);</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="135"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="136"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>the<sp/>address<sp/>of<sp/>the<sp/>specified<sp/>AUXPLL<sp/>task<sp/>register.</highlight></codeline>
<codeline lineno="137"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="138"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="139"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>task<sp/><sp/>The<sp/>specified<sp/>task.</highlight></codeline>
<codeline lineno="140"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="141"><highlight class="comment"><sp/>*<sp/>@return<sp/>Address<sp/>of<sp/>the<sp/>specified<sp/>task<sp/>register.</highlight></codeline>
<codeline lineno="142"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__auxpll__hal_1gab420ff4daeb0acd4cae06be94a0ae987" kindref="member">nrf_auxpll_task_address_get</ref>(NRF_AUXPLL_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__auxpll__hal_1ga00833a2371cfb56ad8392461a153a653" kindref="member">nrf_auxpll_task_t</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>task);</highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="146"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="147"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>clearing<sp/>the<sp/>specified<sp/>AUXPLL<sp/>event.</highlight></codeline>
<codeline lineno="148"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="149"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="150"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>event<sp/>Event<sp/>to<sp/>clear.</highlight></codeline>
<codeline lineno="151"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__auxpll__hal_1ga8adf4d621c7e8c8d7b9a76c1eb1b24e8" kindref="member">nrf_auxpll_event_clear</ref>(NRF_AUXPLL_Type<sp/>*<sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__auxpll__hal_1ga139a93ec776aed9979a96f249af7a7eb" kindref="member">nrf_auxpll_event_t</ref><sp/>event);</highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="155"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="156"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>retrieving<sp/>the<sp/>state<sp/>of<sp/>the<sp/>AUXPLL<sp/>event.</highlight></codeline>
<codeline lineno="157"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="158"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="159"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>event<sp/>Event<sp/>to<sp/>be<sp/>checked.</highlight></codeline>
<codeline lineno="160"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="161"><highlight class="comment"><sp/>*<sp/>@retval<sp/>true<sp/><sp/>The<sp/>event<sp/>has<sp/>been<sp/>generated.</highlight></codeline>
<codeline lineno="162"><highlight class="comment"><sp/>*<sp/>@retval<sp/>false<sp/>The<sp/>event<sp/>has<sp/>not<sp/>been<sp/>generated.</highlight></codeline>
<codeline lineno="163"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrf__auxpll__hal_1ga1f950ef4f2f16dd388cd309b481d2510" kindref="member">nrf_auxpll_event_check</ref>(NRF_AUXPLL_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__auxpll__hal_1ga139a93ec776aed9979a96f249af7a7eb" kindref="member">nrf_auxpll_event_t</ref><sp/><sp/><sp/><sp/><sp/><sp/>event);</highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="167"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="168"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>the<sp/>address<sp/>of<sp/>the<sp/>specified<sp/>AUXPLL<sp/>event<sp/>register.</highlight></codeline>
<codeline lineno="169"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="170"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="171"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>event<sp/>The<sp/>specified<sp/>event.</highlight></codeline>
<codeline lineno="172"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="173"><highlight class="comment"><sp/>*<sp/>@return<sp/>Address<sp/>of<sp/>the<sp/>specified<sp/>event<sp/>register.</highlight></codeline>
<codeline lineno="174"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__auxpll__hal_1ga3b67754ec3060a32d78f10f3010760a4" kindref="member">nrf_auxpll_event_address_get</ref>(NRF_AUXPLL_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__auxpll__hal_1ga139a93ec776aed9979a96f249af7a7eb" kindref="member">nrf_auxpll_event_t</ref><sp/><sp/><sp/><sp/><sp/><sp/>event);</highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="178"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="179"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>enabling<sp/>the<sp/>specified<sp/>interrupts.</highlight></codeline>
<codeline lineno="180"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="181"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="182"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>mask<sp/><sp/>Mask<sp/>of<sp/>interrupts<sp/>to<sp/>be<sp/>enabled.</highlight></codeline>
<codeline lineno="183"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Use<sp/>@ref<sp/>nrf_auxpll_int_mask_t<sp/>values<sp/>for<sp/>bit<sp/>masking.</highlight></codeline>
<codeline lineno="184"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__auxpll__hal_1ga0ae47a49f04c20a2b4dc9ccfff2cf14a" kindref="member">nrf_auxpll_int_enable</ref>(NRF_AUXPLL_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mask);</highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="188"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="189"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>disabling<sp/>the<sp/>specified<sp/>interrupts.</highlight></codeline>
<codeline lineno="190"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="191"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="192"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>mask<sp/><sp/>Mask<sp/>of<sp/>interrupts<sp/>to<sp/>be<sp/>disabled.</highlight></codeline>
<codeline lineno="193"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Use<sp/>@ref<sp/>nrf_auxpll_int_mask_t<sp/>values<sp/>for<sp/>bit<sp/>masking.</highlight></codeline>
<codeline lineno="194"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__auxpll__hal_1ga676c5fb5d7f0fe08e4fccf82bd7af6b7" kindref="member">nrf_auxpll_int_disable</ref>(NRF_AUXPLL_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mask);</highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="198"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="199"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>checking<sp/>if<sp/>the<sp/>specified<sp/>interrupts<sp/>are<sp/>enabled.</highlight></codeline>
<codeline lineno="200"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="201"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="202"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>mask<sp/><sp/>Mask<sp/>of<sp/>interrupts<sp/>to<sp/>be<sp/>checked.</highlight></codeline>
<codeline lineno="203"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Use<sp/>@ref<sp/>nrf_auxpll_int_mask_t<sp/>values<sp/>for<sp/>bit<sp/>masking.</highlight></codeline>
<codeline lineno="204"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="205"><highlight class="comment"><sp/>*<sp/>@return<sp/>true<sp/><sp/>requested<sp/>interrupts<sp/>are<sp/>enabled.</highlight></codeline>
<codeline lineno="206"><highlight class="comment"><sp/>*<sp/>@return<sp/>false<sp/>requested<sp/>interrupts<sp/>are<sp/>disabled.</highlight></codeline>
<codeline lineno="207"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrf__auxpll__hal_1gaa4bc60bc8694ecce051777023a3fa7cf" kindref="member">nrf_auxpll_int_enable_check</ref>(NRF_AUXPLL_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mask);</highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="211"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="212"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>checking<sp/>if<sp/>the<sp/>specified<sp/>interrupts<sp/>are<sp/>pending.</highlight></codeline>
<codeline lineno="213"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="214"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="215"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>mask<sp/><sp/>Mask<sp/>of<sp/>interrupts<sp/>to<sp/>be<sp/>checked.</highlight></codeline>
<codeline lineno="216"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Use<sp/>@ref<sp/>nrf_auxpll_int_mask_t<sp/>values<sp/>for<sp/>bit<sp/>masking.</highlight></codeline>
<codeline lineno="217"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="218"><highlight class="comment"><sp/>*<sp/>@return<sp/>true<sp/><sp/>requested<sp/>interrupts<sp/>are<sp/>pending.</highlight></codeline>
<codeline lineno="219"><highlight class="comment"><sp/>*<sp/>@return<sp/>false<sp/>requested<sp/>interrupts<sp/>are<sp/>not<sp/>pending.</highlight></codeline>
<codeline lineno="220"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrf__auxpll__hal_1gadb36e8e2a3ff5c6fa7b4b7d9746721af" kindref="member">nrf_auxpll_int_pending_check</ref>(NRF_AUXPLL_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mask);</highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="224"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="225"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>AUXPLL<sp/>status.</highlight></codeline>
<codeline lineno="226"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="227"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="228"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="229"><highlight class="comment"><sp/>*<sp/>@return<sp/>The<sp/>AUXPLL<sp/>STATUS<sp/>register<sp/>value.<sp/>Use<sp/>@ref<sp/>nrf_auxpll_status_mask_t<sp/>values<sp/>for<sp/>bit<sp/>masking.</highlight></codeline>
<codeline lineno="230"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__auxpll__hal_1gad34dab532935eaeae43cb76e61ba57a2" kindref="member">nrf_auxpll_status_get</ref>(NRF_AUXPLL_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="233"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="234"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>the<sp/>AUXPLL<sp/>configuration.</highlight></codeline>
<codeline lineno="235"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="236"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/><sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="237"><highlight class="comment"><sp/>*<sp/>@param[out]<sp/>p_cfg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>to<sp/>be<sp/>filled<sp/>with<sp/>current<sp/>AUXPLL<sp/>configuration.</highlight></codeline>
<codeline lineno="238"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__auxpll__hal_1ga6faf0bf81ee5075ef3fa54a107389c9c" kindref="member">nrf_auxpll_config_get</ref>(NRF_AUXPLL_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structnrf__auxpll__config__t" kindref="compound">nrf_auxpll_config_t</ref><sp/><sp/><sp/>*<sp/>p_cfg);</highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="242"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="243"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>the<sp/>AUXPLL<sp/>configuration.</highlight></codeline>
<codeline lineno="244"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="245"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="246"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_cfg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>with<sp/>AUXPLL<sp/>configuration.</highlight></codeline>
<codeline lineno="247"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__auxpll__hal_1ga266f286ffaf6891d66a8b0acbf174dda" kindref="member">nrf_auxpll_config_set</ref>(NRF_AUXPLL_Type<sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structnrf__auxpll__config__t" kindref="compound">nrf_auxpll_config_t</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_cfg);</highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="251"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="252"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>the<sp/>AUXPLL<sp/>ring<sp/>oscillator<sp/>core<sp/>process<sp/>corner<sp/>tuning.</highlight></codeline>
<codeline lineno="253"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="254"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="255"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>value<sp/>tuning<sp/>frequency<sp/>value.</highlight></codeline>
<codeline lineno="256"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__auxpll__hal_1ga90e037c94c5d79f9e99c90e6ebccce0a" kindref="member">nrf_auxpll_trim_ctune_set</ref>(NRF_AUXPLL_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value);</highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="260"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="261"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>the<sp/>AUXPLL<sp/>ring<sp/>oscillator<sp/>core<sp/>process<sp/>corner<sp/>tuning.</highlight></codeline>
<codeline lineno="262"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="263"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="264"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="265"><highlight class="comment"><sp/>*<sp/>@return<sp/>The<sp/>AUXPLL<sp/>ring<sp/>oscillator<sp/>core<sp/>process<sp/>corner<sp/>tuning<sp/>value.</highlight></codeline>
<codeline lineno="266"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint8_t<sp/><ref refid="group__nrf__auxpll__hal_1ga009cc5192d245990cdef0154fdd14a23" kindref="member">nrf_auxpll_trim_ctune_get</ref>(NRF_AUXPLL_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="270"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="271"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>the<sp/>AUXPLL<sp/>fractional<sp/>PLL<sp/>divider<sp/>ratio<sp/>tuning.</highlight></codeline>
<codeline lineno="272"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="273"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="274"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>value<sp/>Fractional<sp/>divider<sp/>ratio.</highlight></codeline>
<codeline lineno="275"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__auxpll__hal_1ga3e306b9ccb57dde387d6043e5f8d5efe" kindref="member">nrf_auxpll_ctrl_frequency_set</ref>(NRF_AUXPLL_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint16_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value);</highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="279"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="280"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>the<sp/>AUXPLL<sp/>fractional<sp/>PLL<sp/>divider<sp/>ratio.</highlight></codeline>
<codeline lineno="281"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="282"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="283"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="284"><highlight class="comment"><sp/>*<sp/>@return<sp/>Fractional<sp/>divider<sp/>ratio.</highlight></codeline>
<codeline lineno="285"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint16_t<sp/><ref refid="group__nrf__auxpll__hal_1ga66f2cba55b729699377f5f5c9df7b4d5" kindref="member">nrf_auxpll_ctrl_frequency_get</ref>(NRF_AUXPLL_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="288"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="289"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>the<sp/>AUXPLL<sp/>frequency<sp/>increment<sp/>value.</highlight></codeline>
<codeline lineno="290"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="291"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="292"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>value<sp/>Signed<sp/>8-bit<sp/>frequency<sp/>increment,<sp/>applied<sp/>to<sp/>current<sp/>value<sp/>of<sp/>FREQUENCY<sp/>register.</highlight></codeline>
<codeline lineno="293"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__auxpll__hal_1ga2d9df7b43bc7ab5043970dd79f39ddc8" kindref="member">nrf_auxpll_ctrl_freqinc_set</ref>(NRF_AUXPLL_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value);</highlight></codeline>
<codeline lineno="296"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="297"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="298"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>the<sp/>AUXPLL<sp/>frequency<sp/>increment<sp/>value.</highlight></codeline>
<codeline lineno="299"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="300"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="301"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="302"><highlight class="comment"><sp/>*<sp/>@return<sp/>Signed<sp/>8-bit<sp/>frequency<sp/>increment.</highlight></codeline>
<codeline lineno="303"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal">NRF_STATIC_INLINE<sp/>int8_t<sp/><ref refid="group__nrf__auxpll__hal_1gaee7e190c03c72049db9bd190358b09fd" kindref="member">nrf_auxpll_ctrl_freqinc_get</ref>(NRF_AUXPLL_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="306"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="307"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>the<sp/>AUXPLL<sp/>frequency<sp/>increment<sp/>period.</highlight></codeline>
<codeline lineno="308"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="309"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="310"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>value<sp/>Frequency<sp/>increment<sp/>period<sp/>in<sp/>1<sp/>us<sp/>steps.</highlight></codeline>
<codeline lineno="311"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__auxpll__hal_1ga0714101e5b11664b5ed7d62f2cd9274a" kindref="member">nrf_auxpll_ctrl_freqinc_period_set</ref>(NRF_AUXPLL_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint16_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value);</highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="315"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="316"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>the<sp/>AUXPLL<sp/>frequency<sp/>increment<sp/>period<sp/>value.</highlight></codeline>
<codeline lineno="317"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="318"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="319"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="320"><highlight class="comment"><sp/>*<sp/>@return<sp/>Frequency<sp/>increment<sp/>period.</highlight></codeline>
<codeline lineno="321"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint16_t<sp/><ref refid="group__nrf__auxpll__hal_1gad7b1219e2e02389b7f603ebcefa7b23a" kindref="member">nrf_auxpll_ctrl_freqinc_period_get</ref>(NRF_AUXPLL_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="323"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="324"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="325"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>the<sp/>AUXPLL<sp/>output<sp/>prescaler.</highlight></codeline>
<codeline lineno="326"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="327"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="328"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>value<sp/>Prescaler<sp/>ratio.</highlight></codeline>
<codeline lineno="329"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__auxpll__hal_1ga89a038128bbcf6d6060e44e7e2ccb001" kindref="member">nrf_auxpll_ctrl_outsel_set</ref>(NRF_AUXPLL_Type<sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__auxpll__hal_1ga110addb039fdde0e61dca7ac7e65c8bf" kindref="member">nrf_auxpll_ctrl_outsel_t</ref><sp/>value);</highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="333"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="334"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>the<sp/>AUXPLL<sp/>output<sp/>prescaler<sp/>value.</highlight></codeline>
<codeline lineno="335"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="336"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="337"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="338"><highlight class="comment"><sp/>*<sp/>@return<sp/>Prescaler<sp/>ratio.</highlight></codeline>
<codeline lineno="339"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal">NRF_STATIC_INLINE<sp/><ref refid="group__nrf__auxpll__hal_1ga110addb039fdde0e61dca7ac7e65c8bf" kindref="member">nrf_auxpll_ctrl_outsel_t</ref><sp/><ref refid="group__nrf__auxpll__hal_1ga58bb555226de8e2c53d7d27359bc61e0" kindref="member">nrf_auxpll_ctrl_outsel_get</ref>(NRF_AUXPLL_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="341"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="342"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="343"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>the<sp/>AUXPLL<sp/>mode.</highlight></codeline>
<codeline lineno="344"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="345"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="346"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>value<sp/>AUXPLL<sp/>running<sp/>mode.</highlight></codeline>
<codeline lineno="347"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__auxpll__hal_1gadde772559f66a0c3192ccf4106344f6b" kindref="member">nrf_auxpll_ctrl_mode_set</ref>(NRF_AUXPLL_Type<sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__auxpll__hal_1ga4dbf54a08320cdb915cce469bb2a3833" kindref="member">nrf_auxpll_ctrl_mode_t</ref><sp/>value);</highlight></codeline>
<codeline lineno="350"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="351"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="352"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>the<sp/>AUXPLL<sp/>mode.</highlight></codeline>
<codeline lineno="353"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="354"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="355"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="356"><highlight class="comment"><sp/>*<sp/>@return<sp/>AUXPLL<sp/>running<sp/>mode.</highlight></codeline>
<codeline lineno="357"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal">NRF_STATIC_INLINE<sp/><ref refid="group__nrf__auxpll__hal_1ga4dbf54a08320cdb915cce469bb2a3833" kindref="member">nrf_auxpll_ctrl_mode_t</ref><sp/><ref refid="group__nrf__auxpll__hal_1ga25947ecad40fce8a75bea61885fdedd3" kindref="member">nrf_auxpll_ctrl_mode_get</ref>(NRF_AUXPLL_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="359"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="360"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="361"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Enable<sp/>LOCK<sp/>for<sp/>mirrored<sp/>AUXPLL<sp/>registers.</highlight></codeline>
<codeline lineno="362"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="363"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="364"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__auxpll__hal_1gaa6ce2278918e16a0d77638b28cff1f2f" kindref="member">nrf_auxpll_lock</ref>(NRF_AUXPLL_Type<sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="366"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="367"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="368"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Disable<sp/>the<sp/>lock<sp/>after<sp/>configuring<sp/>all<sp/>AUXPLL<sp/>mirrored<sp/>registers.</highlight></codeline>
<codeline lineno="369"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="370"><highlight class="comment"><sp/>*<sp/>@details<sp/>The<sp/>individual<sp/>mirrored<sp/>registers<sp/>can<sp/>be<sp/>updated<sp/>any<sp/>time<sp/>when<sp/>the<sp/>lock<sp/>is<sp/>disabled.</highlight></codeline>
<codeline lineno="371"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="372"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="373"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__auxpll__hal_1ga022f5a242f3a44e3c2e611c274587372" kindref="member">nrf_auxpll_unlock</ref>(NRF_AUXPLL_Type<sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="375"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="376"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="377"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Check<sp/>if<sp/>mirrored<sp/>AUXPLL<sp/>registers<sp/>are<sp/>locked.</highlight></codeline>
<codeline lineno="378"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="379"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="380"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="381"><highlight class="comment"><sp/>*<sp/>@retval<sp/>true<sp/><sp/>The<sp/>AUXPLL<sp/>mirrored<sp/>register<sp/>lock<sp/>enabled.</highlight></codeline>
<codeline lineno="382"><highlight class="comment"><sp/>*<sp/>@retval<sp/>false<sp/>The<sp/>AUXPLL<sp/>mirrored<sp/>register<sp/>lock<sp/>disabled.</highlight></codeline>
<codeline lineno="383"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrf__auxpll__hal_1ga2c5776fa7f4b3698a537e97ed2643b2a" kindref="member">nrf_auxpll_lock_check</ref>(NRF_AUXPLL_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="385"><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>NRF_DECLARE_ONLY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__auxpll__hal_1gaea4ddc341e17b6f10a867a025ee50527" kindref="member">nrf_auxpll_task_trigger</ref>(NRF_AUXPLL_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__auxpll__hal_1ga00833a2371cfb56ad8392461a153a653" kindref="member">nrf_auxpll_task_t</ref><sp/>task)</highlight></codeline>
<codeline lineno="390"><highlight class="normal">{</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/>*((</highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint32_t<sp/>*)((uint8_t<sp/>*)p_reg<sp/>+<sp/>(uint32_t)task))<sp/>=<sp/>0x1UL;</highlight></codeline>
<codeline lineno="392"><highlight class="normal">}</highlight></codeline>
<codeline lineno="393"><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__auxpll__hal_1gab420ff4daeb0acd4cae06be94a0ae987" kindref="member">nrf_auxpll_task_address_get</ref>(NRF_AUXPLL_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__auxpll__hal_1ga00833a2371cfb56ad8392461a153a653" kindref="member">nrf_auxpll_task_t</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>task)</highlight></codeline>
<codeline lineno="396"><highlight class="normal">{</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>nrf_task_event_address_get(p_reg,<sp/>task);</highlight></codeline>
<codeline lineno="398"><highlight class="normal">}</highlight></codeline>
<codeline lineno="399"><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__auxpll__hal_1ga8adf4d621c7e8c8d7b9a76c1eb1b24e8" kindref="member">nrf_auxpll_event_clear</ref>(NRF_AUXPLL_Type<sp/>*<sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__auxpll__hal_1ga139a93ec776aed9979a96f249af7a7eb" kindref="member">nrf_auxpll_event_t</ref><sp/>event)</highlight></codeline>
<codeline lineno="402"><highlight class="normal">{</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/>*((</highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint32_t<sp/>*)((uint8_t<sp/>*)p_reg<sp/>+<sp/>(uint32_t)event))<sp/>=<sp/>0x0UL;</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/>nrf_event_readback((uint8_t<sp/>*)p_reg<sp/>+<sp/>(uint32_t)event);</highlight></codeline>
<codeline lineno="405"><highlight class="normal">}</highlight></codeline>
<codeline lineno="406"><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrf__auxpll__hal_1ga1f950ef4f2f16dd388cd309b481d2510" kindref="member">nrf_auxpll_event_check</ref>(NRF_AUXPLL_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__auxpll__hal_1ga139a93ec776aed9979a96f249af7a7eb" kindref="member">nrf_auxpll_event_t</ref><sp/><sp/><sp/><sp/><sp/><sp/>event)</highlight></codeline>
<codeline lineno="409"><highlight class="normal">{</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>nrf_event_check(p_reg,<sp/>event);</highlight></codeline>
<codeline lineno="411"><highlight class="normal">}</highlight></codeline>
<codeline lineno="412"><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__auxpll__hal_1ga3b67754ec3060a32d78f10f3010760a4" kindref="member">nrf_auxpll_event_address_get</ref>(NRF_AUXPLL_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__auxpll__hal_1ga139a93ec776aed9979a96f249af7a7eb" kindref="member">nrf_auxpll_event_t</ref><sp/><sp/><sp/><sp/><sp/><sp/>event)</highlight></codeline>
<codeline lineno="415"><highlight class="normal">{</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>nrf_task_event_address_get(p_reg,<sp/>event);</highlight></codeline>
<codeline lineno="417"><highlight class="normal">}</highlight></codeline>
<codeline lineno="418"><highlight class="normal"></highlight></codeline>
<codeline lineno="419"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__auxpll__hal_1ga0ae47a49f04c20a2b4dc9ccfff2cf14a" kindref="member">nrf_auxpll_int_enable</ref>(NRF_AUXPLL_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mask)</highlight></codeline>
<codeline lineno="421"><highlight class="normal">{</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;INTENSET<sp/>=<sp/>mask;</highlight></codeline>
<codeline lineno="423"><highlight class="normal">}</highlight></codeline>
<codeline lineno="424"><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__auxpll__hal_1ga676c5fb5d7f0fe08e4fccf82bd7af6b7" kindref="member">nrf_auxpll_int_disable</ref>(NRF_AUXPLL_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mask)</highlight></codeline>
<codeline lineno="427"><highlight class="normal">{</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;INTENCLR<sp/>=<sp/>mask;</highlight></codeline>
<codeline lineno="429"><highlight class="normal">}</highlight></codeline>
<codeline lineno="430"><highlight class="normal"></highlight></codeline>
<codeline lineno="431"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrf__auxpll__hal_1gaa4bc60bc8694ecce051777023a3fa7cf" kindref="member">nrf_auxpll_int_enable_check</ref>(NRF_AUXPLL_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mask)</highlight></codeline>
<codeline lineno="433"><highlight class="normal">{</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p_reg-&gt;INTEN<sp/>&amp;<sp/>mask;</highlight></codeline>
<codeline lineno="435"><highlight class="normal">}</highlight></codeline>
<codeline lineno="436"><highlight class="normal"></highlight></codeline>
<codeline lineno="437"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrf__auxpll__hal_1gadb36e8e2a3ff5c6fa7b4b7d9746721af" kindref="member">nrf_auxpll_int_pending_check</ref>(NRF_AUXPLL_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mask)</highlight></codeline>
<codeline lineno="439"><highlight class="normal">{</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p_reg-&gt;INTPEND<sp/>&amp;<sp/>mask;</highlight></codeline>
<codeline lineno="441"><highlight class="normal">}</highlight></codeline>
<codeline lineno="442"><highlight class="normal"></highlight></codeline>
<codeline lineno="443"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__auxpll__hal_1gad34dab532935eaeae43cb76e61ba57a2" kindref="member">nrf_auxpll_status_get</ref>(NRF_AUXPLL_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="444"><highlight class="normal">{</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p_reg-&gt;STATUS;</highlight></codeline>
<codeline lineno="446"><highlight class="normal">}</highlight></codeline>
<codeline lineno="447"><highlight class="normal"></highlight></codeline>
<codeline lineno="448"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__auxpll__hal_1ga6faf0bf81ee5075ef3fa54a107389c9c" kindref="member">nrf_auxpll_config_get</ref>(NRF_AUXPLL_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structnrf__auxpll__config__t" kindref="compound">nrf_auxpll_config_t</ref><sp/><sp/><sp/>*<sp/>p_cfg)</highlight></codeline>
<codeline lineno="450"><highlight class="normal">{</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__glue_1ga9698a3f6b6bea455d2b54a79e514ee36" kindref="member">NRFX_ASSERT</ref>(p_cfg);</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>reg<sp/>=<sp/>p_reg-&gt;CONFIG.CFGSTATIC;</highlight></codeline>
<codeline lineno="453"><highlight class="normal"></highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/>p_cfg-&gt;<ref refid="structnrf__auxpll__config__t_1a6dc2786c9084dde3b23b82430a9ba727" kindref="member">outdrive</ref><sp/>=</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(reg<sp/>&amp;<sp/>AUXPLL_CONFIG_CFGSTATIC_OUTDRIVE_Msk)<sp/>&gt;&gt;<sp/>AUXPLL_CONFIG_CFGSTATIC_OUTDRIVE_Pos;</highlight></codeline>
<codeline lineno="456"><highlight class="normal"></highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/>p_cfg-&gt;<ref refid="structnrf__auxpll__config__t_1a398ee24eeb3da8b3852045c0296601e3" kindref="member">current_tune</ref><sp/>=</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(reg<sp/>&amp;<sp/>AUXPLL_CONFIG_CFGSTATIC_SELCONSTANTI_Msk)<sp/>&gt;&gt;<sp/>AUXPLL_CONFIG_CFGSTATIC_SELCONSTANTI_Pos;</highlight></codeline>
<codeline lineno="459"><highlight class="normal"></highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/>p_cfg-&gt;<ref refid="structnrf__auxpll__config__t_1a884c993c4797508f7873a25582317d17" kindref="member">sdm_off</ref><sp/>=</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(reg<sp/>&amp;<sp/>AUXPLL_CONFIG_CFGSTATIC_SDMOFF_Msk)<sp/>&gt;&gt;<sp/>AUXPLL_CONFIG_CFGSTATIC_SDMOFF_Pos;</highlight></codeline>
<codeline lineno="462"><highlight class="normal"></highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/>p_cfg-&gt;<ref refid="structnrf__auxpll__config__t_1ad8b3d4f51f19175ffc0b305ca3487399" kindref="member">dither_off</ref><sp/>=</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(reg<sp/>&amp;<sp/>AUXPLL_CONFIG_CFGSTATIC_SDMDITHEROFF_Msk)<sp/>&gt;&gt;<sp/>AUXPLL_CONFIG_CFGSTATIC_SDMDITHEROFF_Pos;</highlight></codeline>
<codeline lineno="465"><highlight class="normal"></highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/>p_cfg-&gt;<ref refid="structnrf__auxpll__config__t_1a92632e5218bcfc9d846315369283e76f" kindref="member">range</ref><sp/>=<sp/>(<ref refid="group__nrf__auxpll__hal_1ga0b0233ccc0dbd1827401be561dfa44b7" kindref="member">nrf_auxpll_divider_range_t</ref>)((reg<sp/>&amp;<sp/>AUXPLL_CONFIG_CFGSTATIC_AUXPLLRANGE_Msk)</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;<sp/>AUXPLL_CONFIG_CFGSTATIC_AUXPLLRANGE_Pos);</highlight></codeline>
<codeline lineno="468"><highlight class="normal">}</highlight></codeline>
<codeline lineno="469"><highlight class="normal"></highlight></codeline>
<codeline lineno="470"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__auxpll__hal_1ga266f286ffaf6891d66a8b0acbf174dda" kindref="member">nrf_auxpll_config_set</ref>(NRF_AUXPLL_Type<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structnrf__auxpll__config__t" kindref="compound">nrf_auxpll_config_t</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_cfg)</highlight></codeline>
<codeline lineno="472"><highlight class="normal">{</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__glue_1ga9698a3f6b6bea455d2b54a79e514ee36" kindref="member">NRFX_ASSERT</ref>(p_cfg);</highlight></codeline>
<codeline lineno="474"><highlight class="normal"></highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;CONFIG.CFGSTATIC<sp/>=</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((p_cfg-&gt;<ref refid="structnrf__auxpll__config__t_1a6dc2786c9084dde3b23b82430a9ba727" kindref="member">outdrive</ref><sp/>&lt;&lt;<sp/>AUXPLL_CONFIG_CFGSTATIC_OUTDRIVE_Pos)</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;<sp/>AUXPLL_CONFIG_CFGSTATIC_OUTDRIVE_Msk)</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>((p_cfg-&gt;<ref refid="structnrf__auxpll__config__t_1a398ee24eeb3da8b3852045c0296601e3" kindref="member">current_tune</ref><sp/>&lt;&lt;<sp/>AUXPLL_CONFIG_CFGSTATIC_SELCONSTANTI_Pos)</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;<sp/>AUXPLL_CONFIG_CFGSTATIC_SELCONSTANTI_Msk)</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>((p_cfg-&gt;<ref refid="structnrf__auxpll__config__t_1a884c993c4797508f7873a25582317d17" kindref="member">sdm_off</ref><sp/>&lt;&lt;<sp/>AUXPLL_CONFIG_CFGSTATIC_SDMOFF_Pos)</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;<sp/>AUXPLL_CONFIG_CFGSTATIC_SDMOFF_Msk)</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>((p_cfg-&gt;<ref refid="structnrf__auxpll__config__t_1ad8b3d4f51f19175ffc0b305ca3487399" kindref="member">dither_off</ref><sp/>&lt;&lt;<sp/>AUXPLL_CONFIG_CFGSTATIC_SDMDITHEROFF_Pos)</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;<sp/>AUXPLL_CONFIG_CFGSTATIC_SDMDITHEROFF_Msk)</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>((p_cfg-&gt;<ref refid="structnrf__auxpll__config__t_1a92632e5218bcfc9d846315369283e76f" kindref="member">range</ref><sp/>&lt;&lt;<sp/>AUXPLL_CONFIG_CFGSTATIC_AUXPLLRANGE_Pos)</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;<sp/>AUXPLL_CONFIG_CFGSTATIC_AUXPLLRANGE_Msk);</highlight></codeline>
<codeline lineno="486"><highlight class="normal">}</highlight></codeline>
<codeline lineno="487"><highlight class="normal"></highlight></codeline>
<codeline lineno="488"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__auxpll__hal_1ga90e037c94c5d79f9e99c90e6ebccce0a" kindref="member">nrf_auxpll_trim_ctune_set</ref>(NRF_AUXPLL_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value)</highlight></codeline>
<codeline lineno="490"><highlight class="normal">{</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;TRIM.CTUNE<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="492"><highlight class="normal">}</highlight></codeline>
<codeline lineno="493"><highlight class="normal"></highlight></codeline>
<codeline lineno="494"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint8_t<sp/><ref refid="group__nrf__auxpll__hal_1ga009cc5192d245990cdef0154fdd14a23" kindref="member">nrf_auxpll_trim_ctune_get</ref>(NRF_AUXPLL_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="495"><highlight class="normal">{</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(uint8_t)p_reg-&gt;TRIM.CTUNE;</highlight></codeline>
<codeline lineno="497"><highlight class="normal">}</highlight></codeline>
<codeline lineno="498"><highlight class="normal"></highlight></codeline>
<codeline lineno="499"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__auxpll__hal_1ga3e306b9ccb57dde387d6043e5f8d5efe" kindref="member">nrf_auxpll_ctrl_frequency_set</ref>(NRF_AUXPLL_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint16_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value)</highlight></codeline>
<codeline lineno="501"><highlight class="normal">{</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;AUXPLLCTRL.FREQUENCY<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="503"><highlight class="normal">}</highlight></codeline>
<codeline lineno="504"><highlight class="normal"></highlight></codeline>
<codeline lineno="505"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint16_t<sp/><ref refid="group__nrf__auxpll__hal_1ga66f2cba55b729699377f5f5c9df7b4d5" kindref="member">nrf_auxpll_ctrl_frequency_get</ref>(NRF_AUXPLL_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="506"><highlight class="normal">{</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(uint16_t)p_reg-&gt;AUXPLLCTRL.FREQUENCY;</highlight></codeline>
<codeline lineno="508"><highlight class="normal">}</highlight></codeline>
<codeline lineno="509"><highlight class="normal"></highlight></codeline>
<codeline lineno="510"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__auxpll__hal_1ga2d9df7b43bc7ab5043970dd79f39ddc8" kindref="member">nrf_auxpll_ctrl_freqinc_set</ref>(NRF_AUXPLL_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value)</highlight></codeline>
<codeline lineno="512"><highlight class="normal">{</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;AUXPLLCTRL.FREQINC<sp/>=<sp/>(uint8_t)value;</highlight></codeline>
<codeline lineno="514"><highlight class="normal">}</highlight></codeline>
<codeline lineno="515"><highlight class="normal"></highlight></codeline>
<codeline lineno="516"><highlight class="normal">NRF_STATIC_INLINE<sp/>int8_t<sp/><ref refid="group__nrf__auxpll__hal_1gaee7e190c03c72049db9bd190358b09fd" kindref="member">nrf_auxpll_ctrl_freqinc_get</ref>(NRF_AUXPLL_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="517"><highlight class="normal">{</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(int8_t)p_reg-&gt;AUXPLLCTRL.FREQINC;</highlight></codeline>
<codeline lineno="519"><highlight class="normal">}</highlight></codeline>
<codeline lineno="520"><highlight class="normal"></highlight></codeline>
<codeline lineno="521"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__auxpll__hal_1ga0714101e5b11664b5ed7d62f2cd9274a" kindref="member">nrf_auxpll_ctrl_freqinc_period_set</ref>(NRF_AUXPLL_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint16_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value)</highlight></codeline>
<codeline lineno="523"><highlight class="normal">{</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;AUXPLLCTRL.FREQINCPERIOD<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="525"><highlight class="normal">}</highlight></codeline>
<codeline lineno="526"><highlight class="normal"></highlight></codeline>
<codeline lineno="527"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint16_t<sp/><ref refid="group__nrf__auxpll__hal_1gad7b1219e2e02389b7f603ebcefa7b23a" kindref="member">nrf_auxpll_ctrl_freqinc_period_get</ref>(NRF_AUXPLL_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="528"><highlight class="normal">{</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(uint16_t)p_reg-&gt;AUXPLLCTRL.FREQINCPERIOD;</highlight></codeline>
<codeline lineno="530"><highlight class="normal">}</highlight></codeline>
<codeline lineno="531"><highlight class="normal"></highlight></codeline>
<codeline lineno="532"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__auxpll__hal_1ga89a038128bbcf6d6060e44e7e2ccb001" kindref="member">nrf_auxpll_ctrl_outsel_set</ref>(NRF_AUXPLL_Type<sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__auxpll__hal_1ga110addb039fdde0e61dca7ac7e65c8bf" kindref="member">nrf_auxpll_ctrl_outsel_t</ref><sp/>value)</highlight></codeline>
<codeline lineno="534"><highlight class="normal">{</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;AUXPLLCTRL.OUTSEL<sp/>=<sp/>(value<sp/>&lt;&lt;<sp/>AUXPLL_AUXPLLCTRL_OUTSEL_OUTSEL_Pos);</highlight></codeline>
<codeline lineno="536"><highlight class="normal">}</highlight></codeline>
<codeline lineno="537"><highlight class="normal"></highlight></codeline>
<codeline lineno="538"><highlight class="normal">NRF_STATIC_INLINE<sp/><ref refid="group__nrf__auxpll__hal_1ga110addb039fdde0e61dca7ac7e65c8bf" kindref="member">nrf_auxpll_ctrl_outsel_t</ref><sp/><ref refid="group__nrf__auxpll__hal_1ga58bb555226de8e2c53d7d27359bc61e0" kindref="member">nrf_auxpll_ctrl_outsel_get</ref>(NRF_AUXPLL_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="539"><highlight class="normal">{</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="group__nrf__auxpll__hal_1ga110addb039fdde0e61dca7ac7e65c8bf" kindref="member">nrf_auxpll_ctrl_outsel_t</ref>)((p_reg-&gt;AUXPLLCTRL.OUTSEL<sp/>&amp;<sp/>AUXPLL_AUXPLLCTRL_OUTSEL_OUTSEL_Msk)<sp/>&gt;&gt;</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AUXPLL_AUXPLLCTRL_OUTSEL_OUTSEL_Pos);</highlight></codeline>
<codeline lineno="542"><highlight class="normal">}</highlight></codeline>
<codeline lineno="543"><highlight class="normal"></highlight></codeline>
<codeline lineno="544"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__auxpll__hal_1gadde772559f66a0c3192ccf4106344f6b" kindref="member">nrf_auxpll_ctrl_mode_set</ref>(NRF_AUXPLL_Type<sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__auxpll__hal_1ga4dbf54a08320cdb915cce469bb2a3833" kindref="member">nrf_auxpll_ctrl_mode_t</ref><sp/>value)</highlight></codeline>
<codeline lineno="546"><highlight class="normal">{</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;AUXPLLCTRL.MODE<sp/>=<sp/>value<sp/>&lt;&lt;<sp/>AUXPLL_AUXPLLCTRL_MODE_MODECTRL_Pos;</highlight></codeline>
<codeline lineno="548"><highlight class="normal">}</highlight></codeline>
<codeline lineno="549"><highlight class="normal"></highlight></codeline>
<codeline lineno="550"><highlight class="normal">NRF_STATIC_INLINE<sp/><ref refid="group__nrf__auxpll__hal_1ga4dbf54a08320cdb915cce469bb2a3833" kindref="member">nrf_auxpll_ctrl_mode_t</ref><sp/><ref refid="group__nrf__auxpll__hal_1ga25947ecad40fce8a75bea61885fdedd3" kindref="member">nrf_auxpll_ctrl_mode_get</ref>(NRF_AUXPLL_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="551"><highlight class="normal">{</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>val<sp/>=<sp/>(p_reg-&gt;AUXPLLCTRL.MODE<sp/>&amp;<sp/>AUXPLL_AUXPLLCTRL_MODE_MODECTRL_Msk)<sp/>&gt;&gt;</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AUXPLL_AUXPLLCTRL_MODE_MODECTRL_Pos;</highlight></codeline>
<codeline lineno="554"><highlight class="normal"></highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="group__nrf__auxpll__hal_1ga4dbf54a08320cdb915cce469bb2a3833" kindref="member">nrf_auxpll_ctrl_mode_t</ref>)val;</highlight></codeline>
<codeline lineno="556"><highlight class="normal">}</highlight></codeline>
<codeline lineno="557"><highlight class="normal"></highlight></codeline>
<codeline lineno="558"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__auxpll__hal_1gaa6ce2278918e16a0d77638b28cff1f2f" kindref="member">nrf_auxpll_lock</ref>(NRF_AUXPLL_Type<sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="559"><highlight class="normal">{</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;MIRROR<sp/>=<sp/>AUXPLL_MIRROR_LOCK_Enabled;</highlight></codeline>
<codeline lineno="561"><highlight class="normal">}</highlight></codeline>
<codeline lineno="562"><highlight class="normal"></highlight></codeline>
<codeline lineno="563"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__auxpll__hal_1ga022f5a242f3a44e3c2e611c274587372" kindref="member">nrf_auxpll_unlock</ref>(NRF_AUXPLL_Type<sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="564"><highlight class="normal">{</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;MIRROR<sp/>=<sp/>AUXPLL_MIRROR_LOCK_Disabled;</highlight></codeline>
<codeline lineno="566"><highlight class="normal">}</highlight></codeline>
<codeline lineno="567"><highlight class="normal"></highlight></codeline>
<codeline lineno="568"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrf__auxpll__hal_1ga2c5776fa7f4b3698a537e97ed2643b2a" kindref="member">nrf_auxpll_lock_check</ref>(NRF_AUXPLL_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="569"><highlight class="normal">{</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((p_reg-&gt;MIRROR)<sp/>&amp;<sp/>AUXPLL_MIRROR_LOCK_Enabled);</highlight></codeline>
<codeline lineno="571"><highlight class="normal">}</highlight></codeline>
<codeline lineno="572"><highlight class="normal"></highlight></codeline>
<codeline lineno="573"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRF_DECLARE_ONLY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="574"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="575"><highlight class="comment">/**<sp/>@}<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="576"><highlight class="normal"></highlight></codeline>
<codeline lineno="577"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="578"><highlight class="normal">}</highlight></codeline>
<codeline lineno="579"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="580"><highlight class="normal"></highlight></codeline>
<codeline lineno="581"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>NRF_AUXPLL_H__</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="hal/nrf_auxpll.h"/>
  </compounddef>
</doxygen>
