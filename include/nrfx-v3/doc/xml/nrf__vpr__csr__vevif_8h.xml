<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="nrf__vpr__csr__vevif_8h" kind="file" language="C++">
    <compoundname>nrf_vpr_csr_vevif.h</compoundname>
    <includes local="no">nrfx.h</includes>
    <incdepgraph>
      <node id="1">
        <label>hal/nrf_vpr_csr_vevif.h</label>
        <link refid="nrf__vpr__csr__vevif_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>nrfx.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__nrf__vpr__csr__vevif__hal_1gaa4833bf38124cfeed8e1daaea1ae2112" prot="public" static="no">
        <name>NRF_VPR_CSR_VEVIF_EVENT_TASK_COUNT</name>
        <initializer>VPR_VEVIF_EVENT_MaxCount</initializer>
        <briefdescription>
<para>Number of VEVIF events/tasks. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_vpr_csr_vevif.h" line="52" column="9" bodyfile="hal/nrf_vpr_csr_vevif.h" bodystart="52" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__nrf__vpr__csr__vevif__hal_1gabafca7258929aa36346bdf49c39ea179" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_vpr_csr_vevif_tasks_get</definition>
        <argsstring>(void)</argsstring>
        <name>nrf_vpr_csr_vevif_tasks_get</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Function for getting mask of pending VEVIF tasks. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Mask of pending VEVIF tasks. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_vpr_csr_vevif.h" line="163" column="28" bodyfile="hal/nrf_vpr_csr_vevif.h" bodystart="163" bodyend="166" declfile="hal/nrf_vpr_csr_vevif.h" declline="59" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__vpr__csr__vevif__hal_1ga98487f5eda5c139e6f4c89ad2a86bfd0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_vpr_csr_vevif_tasks_clear</definition>
        <argsstring>(uint32_t mask)</argsstring>
        <name>nrf_vpr_csr_vevif_tasks_clear</name>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Function for clearing mask of pending VEVIF tasks. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of VEVIF tasks to be cleared. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_vpr_csr_vevif.h" line="168" column="24" bodyfile="hal/nrf_vpr_csr_vevif.h" bodystart="168" bodyend="171" declfile="hal/nrf_vpr_csr_vevif.h" declline="66" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__vpr__csr__vevif__hal_1gada18d7ea39d48ae1f32da2478782beb3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_vpr_csr_vevif_tasks_set</definition>
        <argsstring>(uint32_t value)</argsstring>
        <name>nrf_vpr_csr_vevif_tasks_set</name>
        <param>
          <type>uint32_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Function for setting pending VEVIF tasks. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>VEVIF tasks value to be set. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_vpr_csr_vevif.h" line="173" column="24" bodyfile="hal/nrf_vpr_csr_vevif.h" bodystart="173" bodyend="176" declfile="hal/nrf_vpr_csr_vevif.h" declline="73" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__vpr__csr__vevif__hal_1gafb0611a7f92354b2749509f193cb380b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_vpr_csr_vevif_events_get</definition>
        <argsstring>(void)</argsstring>
        <name>nrf_vpr_csr_vevif_events_get</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Function for getting mask of triggered VEVIF events. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Mask of triggered VEVIF events. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_vpr_csr_vevif.h" line="178" column="28" bodyfile="hal/nrf_vpr_csr_vevif.h" bodystart="178" bodyend="181" declfile="hal/nrf_vpr_csr_vevif.h" declline="80" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__vpr__csr__vevif__hal_1gad9c0fda674757f1a3aa50a6fbd8b0a7e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_vpr_csr_vevif_events_set</definition>
        <argsstring>(uint32_t value)</argsstring>
        <name>nrf_vpr_csr_vevif_events_set</name>
        <param>
          <type>uint32_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Function for setting triggered VEVIF events. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>VEVIF events value to be set. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_vpr_csr_vevif.h" line="183" column="24" bodyfile="hal/nrf_vpr_csr_vevif.h" bodystart="183" bodyend="186" declfile="hal/nrf_vpr_csr_vevif.h" declline="87" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__vpr__csr__vevif__hal_1ga3fd367271a421b34d836f8aa6a726287" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_vpr_csr_vevif_events_trigger</definition>
        <argsstring>(uint32_t mask)</argsstring>
        <name>nrf_vpr_csr_vevif_events_trigger</name>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Function for triggering VEVIF events. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of VEVIF events to be triggered. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_vpr_csr_vevif.h" line="188" column="24" bodyfile="hal/nrf_vpr_csr_vevif.h" bodystart="188" bodyend="191" declfile="hal/nrf_vpr_csr_vevif.h" declline="94" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__vpr__csr__vevif__hal_1gaa0f9a9df172ccbf1b78614a0c80c9fb7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_vpr_csr_vevif_events_buffered_set</definition>
        <argsstring>(uint32_t value)</argsstring>
        <name>nrf_vpr_csr_vevif_events_buffered_set</name>
        <param>
          <type>uint32_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Function for setting buffered triggered VEVIF events. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffered VEVIF events value to be set. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_vpr_csr_vevif.h" line="193" column="24" bodyfile="hal/nrf_vpr_csr_vevif.h" bodystart="193" bodyend="196" declfile="hal/nrf_vpr_csr_vevif.h" declline="101" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__vpr__csr__vevif__hal_1ga782ae49b5eb059d7811d4ea22587ea74" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE bool</type>
        <definition>NRF_STATIC_INLINE bool nrf_vpr_csr_vevif_events_buffered_dirty_check</definition>
        <argsstring>(void)</argsstring>
        <name>nrf_vpr_csr_vevif_events_buffered_dirty_check</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Function for retrieving the dirty status of buffered VEVIF events. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer is dirty. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer is clean. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_vpr_csr_vevif.h" line="198" column="24" bodyfile="hal/nrf_vpr_csr_vevif.h" bodystart="198" bodyend="202" declfile="hal/nrf_vpr_csr_vevif.h" declline="109" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__vpr__csr__vevif__hal_1gab2da4e020c74d5ac705ee88912682510" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_vpr_csr_vevif_subscribe_get</definition>
        <argsstring>(void)</argsstring>
        <name>nrf_vpr_csr_vevif_subscribe_get</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Function for getting the subscribe configuration for VEVIF. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Mask of tasks with enabled subscription. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_vpr_csr_vevif.h" line="204" column="28" bodyfile="hal/nrf_vpr_csr_vevif.h" bodystart="204" bodyend="207" declfile="hal/nrf_vpr_csr_vevif.h" declline="116" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__vpr__csr__vevif__hal_1gae2d7c671468f10e1d9f097712d49f395" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_vpr_csr_vevif_subscribe_set</definition>
        <argsstring>(uint32_t value)</argsstring>
        <name>nrf_vpr_csr_vevif_subscribe_set</name>
        <param>
          <type>uint32_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Function for setting the subscribe configuration for VEVIF. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>VEVIF subscription configuration mask to be set. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_vpr_csr_vevif.h" line="209" column="24" bodyfile="hal/nrf_vpr_csr_vevif.h" bodystart="209" bodyend="212" declfile="hal/nrf_vpr_csr_vevif.h" declline="123" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__vpr__csr__vevif__hal_1gacda1c343802537d97990017ab2f4b989" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_vpr_csr_vevif_publish_get</definition>
        <argsstring>(void)</argsstring>
        <name>nrf_vpr_csr_vevif_publish_get</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Function for getting the publish configuration for VEVIF. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Mask of events with enabled publication. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_vpr_csr_vevif.h" line="214" column="28" bodyfile="hal/nrf_vpr_csr_vevif.h" bodystart="214" bodyend="217" declfile="hal/nrf_vpr_csr_vevif.h" declline="130" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__vpr__csr__vevif__hal_1ga91039a46b752dbce13cb7d899c6217b4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_vpr_csr_vevif_publish_set</definition>
        <argsstring>(uint32_t value)</argsstring>
        <name>nrf_vpr_csr_vevif_publish_set</name>
        <param>
          <type>uint32_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Function for setting the publish configuration for VEVIF. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>VEVIF publication configuration mask to be set. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_vpr_csr_vevif.h" line="219" column="24" bodyfile="hal/nrf_vpr_csr_vevif.h" bodystart="219" bodyend="222" declfile="hal/nrf_vpr_csr_vevif.h" declline="137" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__vpr__csr__vevif__hal_1ga99621cabec0ac8b9cddaa4d9d68ddd0d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_vpr_csr_vevif_int_enable</definition>
        <argsstring>(uint32_t mask)</argsstring>
        <name>nrf_vpr_csr_vevif_int_enable</name>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Function for enabling the specified interrupts. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of interrupts to be enabled. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_vpr_csr_vevif.h" line="224" column="24" bodyfile="hal/nrf_vpr_csr_vevif.h" bodystart="224" bodyend="227" declfile="hal/nrf_vpr_csr_vevif.h" declline="144" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__vpr__csr__vevif__hal_1gad4320805c283507ef07092ad90fc71b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_vpr_csr_vevif_int_disable</definition>
        <argsstring>(uint32_t mask)</argsstring>
        <name>nrf_vpr_csr_vevif_int_disable</name>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Function for disabling the specified interrupts. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of interrupts to be disabled. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_vpr_csr_vevif.h" line="229" column="24" bodyfile="hal/nrf_vpr_csr_vevif.h" bodystart="229" bodyend="232" declfile="hal/nrf_vpr_csr_vevif.h" declline="151" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__vpr__csr__vevif__hal_1gaf22b15a2f52fe17e6a1a2ff78806fe76" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_vpr_csr_vevif_int_enable_check</definition>
        <argsstring>(uint32_t mask)</argsstring>
        <name>nrf_vpr_csr_vevif_int_enable_check</name>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Function for checking it the specified interrupts are enabled. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of interrupts to be checked.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Mask of enabled interrupts. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_vpr_csr_vevif.h" line="234" column="28" bodyfile="hal/nrf_vpr_csr_vevif.h" bodystart="234" bodyend="237" declfile="hal/nrf_vpr_csr_vevif.h" declline="160" declcolumn="28"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2023<sp/>-<sp/>2024,<sp/>Nordic<sp/>Semiconductor<sp/>ASA</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>All<sp/>rights<sp/>reserved.</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>SPDX-License-Identifier:<sp/>BSD-3-Clause</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions<sp/>are<sp/>met:</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>1.<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright<sp/>notice,<sp/>this</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>2.<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the<sp/>distribution.</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/>3.<sp/>Neither<sp/>the<sp/>name<sp/>of<sp/>the<sp/>copyright<sp/>holder<sp/>nor<sp/>the<sp/>names<sp/>of<sp/>its</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>contributors<sp/>may<sp/>be<sp/>used<sp/>to<sp/>endorse<sp/>or<sp/>promote<sp/>products<sp/>derived<sp/>from<sp/>this</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>software<sp/>without<sp/>specific<sp/>prior<sp/>written<sp/>permission.</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>COPYRIGHT<sp/>HOLDERS<sp/>AND<sp/>CONTRIBUTORS<sp/>&quot;AS<sp/>IS&quot;</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/>AND<sp/>ANY<sp/>EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>THE</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*<sp/>ARE<sp/>DISCLAIMED.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>COPYRIGHT<sp/>HOLDER<sp/>OR<sp/>CONTRIBUTORS<sp/>BE</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,<sp/>SPECIAL,<sp/>EXEMPLARY,<sp/>OR</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>PROCUREMENT<sp/>OF</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>*<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,<sp/>DATA,<sp/>OR<sp/>PROFITS;<sp/>OR<sp/>BUSINESS</highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/>*<sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY<sp/>THEORY<sp/>OF<sp/>LIABILITY,<sp/>WHETHER<sp/>IN</highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/>*<sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR<sp/>OTHERWISE)</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/>*<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE<sp/>OF<sp/>THIS<sp/>SOFTWARE,<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/>*<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight></codeline>
<codeline lineno="32"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>NRF_VPR_CSR_VEVIF_H__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_VPR_CSR_VEVIF_H__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;nrfx.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="43"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="44"><highlight class="comment"><sp/>*<sp/>@defgroup<sp/>nrf_vpr_csr_vevif_hal<sp/>VPR<sp/>CSR<sp/>VEVIF<sp/>HAL</highlight></codeline>
<codeline lineno="45"><highlight class="comment"><sp/>*<sp/>@{</highlight></codeline>
<codeline lineno="46"><highlight class="comment"><sp/>*<sp/>@ingroup<sp/>nrf_vpr</highlight></codeline>
<codeline lineno="47"><highlight class="comment"><sp/>*<sp/>@brief<sp/><sp/><sp/>Hardware<sp/>access<sp/>layer<sp/>for<sp/>managing<sp/>the<sp/>VPR<sp/>RISC-V<sp/>CPU<sp/>Control</highlight></codeline>
<codeline lineno="48"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>and<sp/>Status<sp/>Registers<sp/>for<sp/>VPR<sp/>Event<sp/>Interface<sp/>(VPR<sp/>CSR<sp/>VEVIF).</highlight></codeline>
<codeline lineno="49"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="51"><highlight class="comment">/**<sp/>@brief<sp/>Number<sp/>of<sp/>VEVIF<sp/>events/tasks.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_VPR_CSR_VEVIF_EVENT_TASK_COUNT<sp/>VPR_VEVIF_EVENT_MaxCount</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="54"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="55"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>mask<sp/>of<sp/>pending<sp/>VEVIF<sp/>tasks.</highlight></codeline>
<codeline lineno="56"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="57"><highlight class="comment"><sp/>*<sp/>@return<sp/>Mask<sp/>of<sp/>pending<sp/>VEVIF<sp/>tasks.</highlight></codeline>
<codeline lineno="58"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__vpr__csr__vevif__hal_1gabafca7258929aa36346bdf49c39ea179" kindref="member">nrf_vpr_csr_vevif_tasks_get</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="61"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="62"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>clearing<sp/>mask<sp/>of<sp/>pending<sp/>VEVIF<sp/>tasks.</highlight></codeline>
<codeline lineno="63"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="64"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>mask<sp/>Mask<sp/>of<sp/>VEVIF<sp/>tasks<sp/>to<sp/>be<sp/>cleared.</highlight></codeline>
<codeline lineno="65"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__vpr__csr__vevif__hal_1ga98487f5eda5c139e6f4c89ad2a86bfd0" kindref="member">nrf_vpr_csr_vevif_tasks_clear</ref>(uint32_t<sp/>mask);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="68"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="69"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>pending<sp/>VEVIF<sp/>tasks.</highlight></codeline>
<codeline lineno="70"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="71"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>value<sp/>VEVIF<sp/>tasks<sp/>value<sp/>to<sp/>be<sp/>set.</highlight></codeline>
<codeline lineno="72"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__vpr__csr__vevif__hal_1gada18d7ea39d48ae1f32da2478782beb3" kindref="member">nrf_vpr_csr_vevif_tasks_set</ref>(uint32_t<sp/>value);</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="75"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="76"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>mask<sp/>of<sp/>triggered<sp/>VEVIF<sp/>events.</highlight></codeline>
<codeline lineno="77"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="78"><highlight class="comment"><sp/>*<sp/>@return<sp/>Mask<sp/>of<sp/>triggered<sp/>VEVIF<sp/>events.</highlight></codeline>
<codeline lineno="79"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__vpr__csr__vevif__hal_1gafb0611a7f92354b2749509f193cb380b" kindref="member">nrf_vpr_csr_vevif_events_get</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="82"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="83"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>triggered<sp/>VEVIF<sp/>events.</highlight></codeline>
<codeline lineno="84"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="85"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>value<sp/>VEVIF<sp/>events<sp/>value<sp/>to<sp/>be<sp/>set.</highlight></codeline>
<codeline lineno="86"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__vpr__csr__vevif__hal_1gad9c0fda674757f1a3aa50a6fbd8b0a7e" kindref="member">nrf_vpr_csr_vevif_events_set</ref>(uint32_t<sp/>value);</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="89"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="90"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>triggering<sp/>VEVIF<sp/>events.</highlight></codeline>
<codeline lineno="91"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="92"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>mask<sp/>Mask<sp/>of<sp/>VEVIF<sp/>events<sp/>to<sp/>be<sp/>triggered.</highlight></codeline>
<codeline lineno="93"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__vpr__csr__vevif__hal_1ga3fd367271a421b34d836f8aa6a726287" kindref="member">nrf_vpr_csr_vevif_events_trigger</ref>(uint32_t<sp/>mask);</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="96"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="97"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>buffered<sp/>triggered<sp/>VEVIF<sp/>events.</highlight></codeline>
<codeline lineno="98"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="99"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>value<sp/>Buffered<sp/>VEVIF<sp/>events<sp/>value<sp/>to<sp/>be<sp/>set.</highlight></codeline>
<codeline lineno="100"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__vpr__csr__vevif__hal_1gaa0f9a9df172ccbf1b78614a0c80c9fb7" kindref="member">nrf_vpr_csr_vevif_events_buffered_set</ref>(uint32_t<sp/>value);</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="103"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="104"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>retrieving<sp/>the<sp/>dirty<sp/>status<sp/>of<sp/>buffered<sp/>VEVIF<sp/>events.</highlight></codeline>
<codeline lineno="105"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="106"><highlight class="comment"><sp/>*<sp/>@retval<sp/>true<sp/><sp/>Buffer<sp/>is<sp/>dirty.</highlight></codeline>
<codeline lineno="107"><highlight class="comment"><sp/>*<sp/>@retval<sp/>false<sp/>Buffer<sp/>is<sp/>clean.</highlight></codeline>
<codeline lineno="108"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrf__vpr__csr__vevif__hal_1ga782ae49b5eb059d7811d4ea22587ea74" kindref="member">nrf_vpr_csr_vevif_events_buffered_dirty_check</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="111"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="112"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>the<sp/>subscribe<sp/>configuration<sp/>for<sp/>VEVIF.</highlight></codeline>
<codeline lineno="113"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="114"><highlight class="comment"><sp/>*<sp/>@return<sp/>Mask<sp/>of<sp/>tasks<sp/>with<sp/>enabled<sp/>subscription.</highlight></codeline>
<codeline lineno="115"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__vpr__csr__vevif__hal_1gab2da4e020c74d5ac705ee88912682510" kindref="member">nrf_vpr_csr_vevif_subscribe_get</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="118"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="119"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>the<sp/>subscribe<sp/>configuration<sp/>for<sp/>VEVIF.</highlight></codeline>
<codeline lineno="120"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="121"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>value<sp/>VEVIF<sp/>subscription<sp/>configuration<sp/>mask<sp/>to<sp/>be<sp/>set.</highlight></codeline>
<codeline lineno="122"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__vpr__csr__vevif__hal_1gae2d7c671468f10e1d9f097712d49f395" kindref="member">nrf_vpr_csr_vevif_subscribe_set</ref>(uint32_t<sp/>value);</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="125"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="126"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>the<sp/>publish<sp/>configuration<sp/>for<sp/>VEVIF.</highlight></codeline>
<codeline lineno="127"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="128"><highlight class="comment"><sp/>*<sp/>@return<sp/>Mask<sp/>of<sp/>events<sp/>with<sp/>enabled<sp/>publication.</highlight></codeline>
<codeline lineno="129"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__vpr__csr__vevif__hal_1gacda1c343802537d97990017ab2f4b989" kindref="member">nrf_vpr_csr_vevif_publish_get</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="132"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="133"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>the<sp/>publish<sp/>configuration<sp/>for<sp/>VEVIF.</highlight></codeline>
<codeline lineno="134"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="135"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>value<sp/>VEVIF<sp/>publication<sp/>configuration<sp/>mask<sp/>to<sp/>be<sp/>set.</highlight></codeline>
<codeline lineno="136"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__vpr__csr__vevif__hal_1ga91039a46b752dbce13cb7d899c6217b4" kindref="member">nrf_vpr_csr_vevif_publish_set</ref>(uint32_t<sp/>value);</highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="139"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="140"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>enabling<sp/>the<sp/>specified<sp/>interrupts.</highlight></codeline>
<codeline lineno="141"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="142"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>mask<sp/>Mask<sp/>of<sp/>interrupts<sp/>to<sp/>be<sp/>enabled.</highlight></codeline>
<codeline lineno="143"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__vpr__csr__vevif__hal_1ga99621cabec0ac8b9cddaa4d9d68ddd0d" kindref="member">nrf_vpr_csr_vevif_int_enable</ref>(uint32_t<sp/>mask);</highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="146"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="147"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>disabling<sp/>the<sp/>specified<sp/>interrupts.</highlight></codeline>
<codeline lineno="148"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="149"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>mask<sp/>Mask<sp/>of<sp/>interrupts<sp/>to<sp/>be<sp/>disabled.</highlight></codeline>
<codeline lineno="150"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__vpr__csr__vevif__hal_1gad4320805c283507ef07092ad90fc71b5" kindref="member">nrf_vpr_csr_vevif_int_disable</ref>(uint32_t<sp/>mask);</highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="153"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="154"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>checking<sp/>it<sp/>the<sp/>specified<sp/>interrupts<sp/>are<sp/>enabled.</highlight></codeline>
<codeline lineno="155"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="156"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>mask<sp/>Mask<sp/>of<sp/>interrupts<sp/>to<sp/>be<sp/>checked.</highlight></codeline>
<codeline lineno="157"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="158"><highlight class="comment"><sp/>*<sp/>@return<sp/>Mask<sp/>of<sp/>enabled<sp/>interrupts.</highlight></codeline>
<codeline lineno="159"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__vpr__csr__vevif__hal_1gaf22b15a2f52fe17e6a1a2ff78806fe76" kindref="member">nrf_vpr_csr_vevif_int_enable_check</ref>(uint32_t<sp/>mask);</highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>NRF_DECLARE_ONLY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__vpr__csr__vevif__hal_1gabafca7258929aa36346bdf49c39ea179" kindref="member">nrf_vpr_csr_vevif_tasks_get</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="164"><highlight class="normal">{</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>nrf_csr_read(VPRCSR_NORDIC_TASKS);</highlight></codeline>
<codeline lineno="166"><highlight class="normal">}</highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__vpr__csr__vevif__hal_1ga98487f5eda5c139e6f4c89ad2a86bfd0" kindref="member">nrf_vpr_csr_vevif_tasks_clear</ref>(uint32_t<sp/>mask)</highlight></codeline>
<codeline lineno="169"><highlight class="normal">{</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/>nrf_csr_clear_bits(VPRCSR_NORDIC_TASKS,<sp/>mask);</highlight></codeline>
<codeline lineno="171"><highlight class="normal">}</highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__vpr__csr__vevif__hal_1gada18d7ea39d48ae1f32da2478782beb3" kindref="member">nrf_vpr_csr_vevif_tasks_set</ref>(uint32_t<sp/>value)</highlight></codeline>
<codeline lineno="174"><highlight class="normal">{</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/>nrf_csr_write(VPRCSR_NORDIC_TASKS,<sp/>value);</highlight></codeline>
<codeline lineno="176"><highlight class="normal">}</highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__vpr__csr__vevif__hal_1gafb0611a7f92354b2749509f193cb380b" kindref="member">nrf_vpr_csr_vevif_events_get</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="179"><highlight class="normal">{</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>nrf_csr_read(VPRCSR_NORDIC_EVENTS);</highlight></codeline>
<codeline lineno="181"><highlight class="normal">}</highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__vpr__csr__vevif__hal_1gad9c0fda674757f1a3aa50a6fbd8b0a7e" kindref="member">nrf_vpr_csr_vevif_events_set</ref>(uint32_t<sp/>value)</highlight></codeline>
<codeline lineno="184"><highlight class="normal">{</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/>nrf_csr_write(VPRCSR_NORDIC_EVENTS,<sp/>value);</highlight></codeline>
<codeline lineno="186"><highlight class="normal">}</highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__vpr__csr__vevif__hal_1ga3fd367271a421b34d836f8aa6a726287" kindref="member">nrf_vpr_csr_vevif_events_trigger</ref>(uint32_t<sp/>mask)</highlight></codeline>
<codeline lineno="189"><highlight class="normal">{</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/>nrf_csr_set_bits(VPRCSR_NORDIC_EVENTS,<sp/>mask);</highlight></codeline>
<codeline lineno="191"><highlight class="normal">}</highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__vpr__csr__vevif__hal_1gaa0f9a9df172ccbf1b78614a0c80c9fb7" kindref="member">nrf_vpr_csr_vevif_events_buffered_set</ref>(uint32_t<sp/>value)</highlight></codeline>
<codeline lineno="194"><highlight class="normal">{</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/>nrf_csr_write(VPRCSR_NORDIC_EVENTSB,<sp/>value);</highlight></codeline>
<codeline lineno="196"><highlight class="normal">}</highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrf__vpr__csr__vevif__hal_1ga782ae49b5eb059d7811d4ea22587ea74" kindref="member">nrf_vpr_csr_vevif_events_buffered_dirty_check</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="199"><highlight class="normal">{</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((nrf_csr_read(VPRCSR_NORDIC_EVENTSBS)<sp/>&amp;<sp/>VPRCSR_NORDIC_EVENTSBS_DIRTYBIT_Msk)</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;<sp/>VPRCSR_NORDIC_EVENTSBS_DIRTYBIT_Pos)<sp/>==<sp/>VPRCSR_NORDIC_EVENTSBS_DIRTYBIT_DIRTY;</highlight></codeline>
<codeline lineno="202"><highlight class="normal">}</highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__vpr__csr__vevif__hal_1gab2da4e020c74d5ac705ee88912682510" kindref="member">nrf_vpr_csr_vevif_subscribe_get</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="205"><highlight class="normal">{</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>nrf_csr_read(VPRCSR_NORDIC_SUBSCRIBE);</highlight></codeline>
<codeline lineno="207"><highlight class="normal">}</highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__vpr__csr__vevif__hal_1gae2d7c671468f10e1d9f097712d49f395" kindref="member">nrf_vpr_csr_vevif_subscribe_set</ref>(uint32_t<sp/>value)</highlight></codeline>
<codeline lineno="210"><highlight class="normal">{</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/>nrf_csr_write(VPRCSR_NORDIC_SUBSCRIBE,<sp/>value);</highlight></codeline>
<codeline lineno="212"><highlight class="normal">}</highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__vpr__csr__vevif__hal_1gacda1c343802537d97990017ab2f4b989" kindref="member">nrf_vpr_csr_vevif_publish_get</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="215"><highlight class="normal">{</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>nrf_csr_read(VPRCSR_NORDIC_PUBLISH);</highlight></codeline>
<codeline lineno="217"><highlight class="normal">}</highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__vpr__csr__vevif__hal_1ga91039a46b752dbce13cb7d899c6217b4" kindref="member">nrf_vpr_csr_vevif_publish_set</ref>(uint32_t<sp/>value)</highlight></codeline>
<codeline lineno="220"><highlight class="normal">{</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/>nrf_csr_write(VPRCSR_NORDIC_PUBLISH,<sp/>value);</highlight></codeline>
<codeline lineno="222"><highlight class="normal">}</highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__vpr__csr__vevif__hal_1ga99621cabec0ac8b9cddaa4d9d68ddd0d" kindref="member">nrf_vpr_csr_vevif_int_enable</ref>(uint32_t<sp/>mask)</highlight></codeline>
<codeline lineno="225"><highlight class="normal">{</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/>nrf_csr_set_bits(VPRCSR_NORDIC_INTEN,<sp/>mask);</highlight></codeline>
<codeline lineno="227"><highlight class="normal">}</highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__vpr__csr__vevif__hal_1gad4320805c283507ef07092ad90fc71b5" kindref="member">nrf_vpr_csr_vevif_int_disable</ref>(uint32_t<sp/>mask)</highlight></codeline>
<codeline lineno="230"><highlight class="normal">{</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/>nrf_csr_clear_bits(VPRCSR_NORDIC_INTEN,<sp/>mask);</highlight></codeline>
<codeline lineno="232"><highlight class="normal">}</highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__vpr__csr__vevif__hal_1gaf22b15a2f52fe17e6a1a2ff78806fe76" kindref="member">nrf_vpr_csr_vevif_int_enable_check</ref>(uint32_t<sp/>mask)</highlight></codeline>
<codeline lineno="235"><highlight class="normal">{</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>nrf_csr_read(VPRCSR_NORDIC_INTEN)<sp/>&amp;<sp/>mask;</highlight></codeline>
<codeline lineno="237"><highlight class="normal">}</highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRF_DECLARE_ONLY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="241"><highlight class="comment">/**<sp/>@}<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal">}</highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRF_VPR_CSR_VEVIF_H__</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="hal/nrf_vpr_csr_vevif.h"/>
  </compounddef>
</doxygen>
