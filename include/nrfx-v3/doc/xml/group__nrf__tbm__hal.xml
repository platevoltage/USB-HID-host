<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="group__nrf__tbm__hal" kind="group">
    <compoundname>nrf_tbm_hal</compoundname>
    <title>TBM HAL</title>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="group__nrf__tbm__hal_1gaed5aab570626d078f8a0c9c486e5a5dc" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_tbm_task_t</name>
        <enumvalue id="group__nrf__tbm__hal_1ggaed5aab570626d078f8a0c9c486e5a5dca0df298ff1e15a15516fa12671abf4e00" prot="public">
          <name>NRF_TBM_TASK_START</name>
          <initializer>= offsetof(NRF_TBM_Type, TASKS_START)</initializer>
          <briefdescription>
<para>Start counter. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__tbm__hal_1ggaed5aab570626d078f8a0c9c486e5a5dca16fa6e4cb2a84718dd65766d40352f04" prot="public">
          <name>NRF_TBM_TASK_STOP</name>
          <initializer>= offsetof(NRF_TBM_Type, TASKS_STOP)</initializer>
          <briefdescription>
<para>Stop counter. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__tbm__hal_1ggaed5aab570626d078f8a0c9c486e5a5dcae0cb44fd3d61d19e0354a7af091d2e01" prot="public">
          <name>NRF_TBM_TASK_FLUSH</name>
          <initializer>= offsetof(NRF_TBM_Type, TASKS_FLUSH)</initializer>
          <briefdescription>
<para>Stop counter, keep counter value. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>TBM tasks. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_tbm.h" line="51" column="1" bodyfile="hal/nrf_tbm.h" bodystart="52" bodyend="56"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__tbm__hal_1ga20d7d308e8e05c928a95074a81ca400c" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_tbm_event_t</name>
        <enumvalue id="group__nrf__tbm__hal_1gga20d7d308e8e05c928a95074a81ca400ca1dca734f505f53c7d39745ca0771f015" prot="public">
          <name>NRF_TBM_EVENT_HALFFULL</name>
          <initializer>= offsetof(NRF_TBM_Type, EVENTS_HALFFULL)</initializer>
          <briefdescription>
<para>Buffer half-full. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__tbm__hal_1gga20d7d308e8e05c928a95074a81ca400ca0b01d386f181876900692d744016fe23" prot="public">
          <name>NRF_TBM_EVENT_FULL</name>
          <initializer>= offsetof(NRF_TBM_Type, EVENTS_FULL)</initializer>
          <briefdescription>
<para>Buffer full. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__tbm__hal_1gga20d7d308e8e05c928a95074a81ca400caeccd4d9d31ed88d5927566f1bdcb5698" prot="public">
          <name>NRF_TBM_EVENT_FLUSH</name>
          <initializer>= offsetof(NRF_TBM_Type, EVENTS_FLUSH)</initializer>
          <briefdescription>
<para>Stopped due to flush. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>TBM events. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_tbm.h" line="59" column="1" bodyfile="hal/nrf_tbm.h" bodystart="60" bodyend="64"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__tbm__hal_1ga272ecf7135a3ea2cdac92c3d0ac0e880" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_tbm_int_mask_t</name>
        <enumvalue id="group__nrf__tbm__hal_1gga272ecf7135a3ea2cdac92c3d0ac0e880ab81e77a3a39f0a1064b4488d2ad36793" prot="public">
          <name>NRF_TBM_INT_HALFFULL_MASK</name>
          <initializer>= TBM_INTENSET_HALFFULL_Msk</initializer>
          <briefdescription>
<para>Interrupt on HALFFULL event. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__tbm__hal_1gga272ecf7135a3ea2cdac92c3d0ac0e880a89033668f159a7e3eaec425d501181d8" prot="public">
          <name>NRF_TBM_INT_FULL_MASK</name>
          <initializer>= TBM_INTENSET_FULL_Msk</initializer>
          <briefdescription>
<para>Interrupt on FULL event. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__tbm__hal_1gga272ecf7135a3ea2cdac92c3d0ac0e880a145ee83579ba0594d88d7dff4795a678" prot="public">
          <name>NRF_TBM_INT_FLUSH_MASK</name>
          <initializer>= TBM_INTENSET_FLUSH_Msk</initializer>
          <briefdescription>
<para>Interrupt on FLUSH event. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>TBM interrupts. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_tbm.h" line="67" column="1" bodyfile="hal/nrf_tbm.h" bodystart="68" bodyend="72"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__nrf__tbm__hal_1ga0dd0fea91492d7ed2084f09f9aa01fec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_tbm_task_trigger</definition>
        <argsstring>(NRF_TBM_Type *p_reg, nrf_tbm_task_t task)</argsstring>
        <name>nrf_tbm_task_trigger</name>
        <param>
          <type>NRF_TBM_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__tbm__hal_1gaed5aab570626d078f8a0c9c486e5a5dc" kindref="member">nrf_tbm_task_t</ref></type>
          <declname>task</declname>
        </param>
        <briefdescription>
<para>Function for activating the specified TBM task. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">task</parametername>
</parameternamelist>
<parameterdescription>
<para>Task to be activated. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_tbm.h" line="171" column="24" bodyfile="hal/nrf_tbm.h" bodystart="171" bodyend="174" declfile="hal/nrf_tbm.h" declline="80" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__tbm__hal_1gaf1fd36e881b08bd0728b562fe27ca60d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_tbm_event_clear</definition>
        <argsstring>(NRF_TBM_Type *p_reg, nrf_tbm_event_t event)</argsstring>
        <name>nrf_tbm_event_clear</name>
        <param>
          <type>NRF_TBM_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__tbm__hal_1ga20d7d308e8e05c928a95074a81ca400c" kindref="member">nrf_tbm_event_t</ref></type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>Function for clearing the specified TBM event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event to be cleared. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_tbm.h" line="176" column="24" bodyfile="hal/nrf_tbm.h" bodystart="176" bodyend="180" declfile="hal/nrf_tbm.h" declline="88" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__tbm__hal_1ga513570c6101922c0f31a9e5872baa8b8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE bool</type>
        <definition>NRF_STATIC_INLINE bool nrf_tbm_event_check</definition>
        <argsstring>(NRF_TBM_Type const *p_reg, nrf_tbm_event_t event)</argsstring>
        <name>nrf_tbm_event_check</name>
        <param>
          <type>NRF_TBM_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__tbm__hal_1ga20d7d308e8e05c928a95074a81ca400c" kindref="member">nrf_tbm_event_t</ref></type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>Function for retrieving the state of the TBM event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event to be checked.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>The event has been generated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>The event has not been generated. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_tbm.h" line="182" column="24" bodyfile="hal/nrf_tbm.h" bodystart="182" bodyend="186" declfile="hal/nrf_tbm.h" declline="99" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__tbm__hal_1gaeb5f8c8ff9f1101149a881fcac6d2748" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_tbm_int_enable</definition>
        <argsstring>(NRF_TBM_Type *p_reg, uint32_t mask)</argsstring>
        <name>nrf_tbm_int_enable</name>
        <param>
          <type>NRF_TBM_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Function for enabling the specified interrupts. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of interrupts to be enabled. Use <ref refid="group__nrf__tbm__hal_1ga272ecf7135a3ea2cdac92c3d0ac0e880" kindref="member">nrf_tbm_int_mask_t</ref> values for bit masking. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_tbm.h" line="188" column="24" bodyfile="hal/nrf_tbm.h" bodystart="188" bodyend="191" declfile="hal/nrf_tbm.h" declline="109" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__tbm__hal_1gad4e812479a1c362bd43c7f84cacf4815" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_tbm_int_set</definition>
        <argsstring>(NRF_TBM_Type *p_reg, uint32_t mask)</argsstring>
        <name>nrf_tbm_int_set</name>
        <param>
          <type>NRF_TBM_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Function for setting the configuration of interrupts. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of interrupts to be set. Use <ref refid="group__nrf__tbm__hal_1ga272ecf7135a3ea2cdac92c3d0ac0e880" kindref="member">nrf_tbm_int_mask_t</ref> values for bit masking. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_tbm.h" line="193" column="24" bodyfile="hal/nrf_tbm.h" bodystart="193" bodyend="196" declfile="hal/nrf_tbm.h" declline="118" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__tbm__hal_1ga12dfed2f9dad4cc343e43cbbbc2ae4c0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_tbm_int_disable</definition>
        <argsstring>(NRF_TBM_Type *p_reg, uint32_t mask)</argsstring>
        <name>nrf_tbm_int_disable</name>
        <param>
          <type>NRF_TBM_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Function for disabling the specified interrupts. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of interrupts to be disabled. Use <ref refid="group__nrf__tbm__hal_1ga272ecf7135a3ea2cdac92c3d0ac0e880" kindref="member">nrf_tbm_int_mask_t</ref> values for bit masking. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_tbm.h" line="198" column="24" bodyfile="hal/nrf_tbm.h" bodystart="198" bodyend="201" declfile="hal/nrf_tbm.h" declline="127" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__tbm__hal_1ga6669bb1415325f9be59e91cbf5750c43" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_tbm_int_enable_check</definition>
        <argsstring>(NRF_TBM_Type const *p_reg, uint32_t mask)</argsstring>
        <name>nrf_tbm_int_enable_check</name>
        <param>
          <type>NRF_TBM_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Function for checking if the specified interrupts are enabled. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of interrupts to be checked. Use <ref refid="group__nrf__tbm__hal_1ga272ecf7135a3ea2cdac92c3d0ac0e880" kindref="member">nrf_tbm_int_mask_t</ref> values for bit masking.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Mask of enabled interrupts. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_tbm.h" line="203" column="28" bodyfile="hal/nrf_tbm.h" bodystart="203" bodyend="206" declfile="hal/nrf_tbm.h" declline="138" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__tbm__hal_1ga8bdc27d85478d357dcf737bbb57397fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_tbm_int_pending_get</definition>
        <argsstring>(NRF_TBM_Type const *p_reg)</argsstring>
        <name>nrf_tbm_int_pending_get</name>
        <param>
          <type>NRF_TBM_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for retrieving the state of pending interrupts. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>States of pending interrupt are saved as a bitmask. One set at particular position means that interrupt for event is pending.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Bitmask with information about pending interrupts. Use <ref refid="group__nrf__tbm__hal_1ga272ecf7135a3ea2cdac92c3d0ac0e880" kindref="member">nrf_tbm_int_mask_t</ref> values for bit masking. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_tbm.h" line="208" column="28" bodyfile="hal/nrf_tbm.h" bodystart="208" bodyend="211" declfile="hal/nrf_tbm.h" declline="151" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__tbm__hal_1ga7de9bd863d59b3b87601be61ac70ffec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_tbm_buffersize_set</definition>
        <argsstring>(NRF_TBM_Type *p_reg, uint32_t size)</argsstring>
        <name>nrf_tbm_buffersize_set</name>
        <param>
          <type>NRF_TBM_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Function for setting the buffer size. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">size</parametername>
</parameternamelist>
<parameterdescription>
<para>Size in 32 bit words. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_tbm.h" line="213" column="24" bodyfile="hal/nrf_tbm.h" bodystart="213" bodyend="216" declfile="hal/nrf_tbm.h" declline="159" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__tbm__hal_1gac1760b3dd6dd24969216df0d0378dad9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_tbm_count_get</definition>
        <argsstring>(NRF_TBM_Type *p_reg)</argsstring>
        <name>nrf_tbm_count_get</name>
        <param>
          <type>NRF_TBM_Type *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting current count value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Current count value. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_tbm.h" line="218" column="28" bodyfile="hal/nrf_tbm.h" bodystart="218" bodyend="221" declfile="hal/nrf_tbm.h" declline="168" declcolumn="28"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Hardware access layer for managing the Trace Buffer Monitor (TBM) peripheral. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
