<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="nrfx__power_8h" kind="file" language="C++">
    <compoundname>nrfx_power.h</compoundname>
    <includes local="no">nrfx.h</includes>
    <includes refid="nrf__power_8h" local="no">hal/nrf_power.h</includes>
    <includes refid="nrfx__power__clock_8h" local="no">nrfx_power_clock.h</includes>
    <includes refid="nrfx__power__compat_8h" local="yes">nrfx_power_compat.h</includes>
    <incdepgraph>
      <node id="1">
        <label>drivers/include/nrfx_power.h</label>
        <link refid="nrfx__power_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>nrfx.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="structnrfx__power__config__t" prot="public">nrfx_power_config_t</innerclass>
    <innerclass refid="structnrfx__power__pofwarn__config__t" prot="public">nrfx_power_pofwarn_config_t</innerclass>
    <innerclass refid="structnrfx__power__sleepevt__config__t" prot="public">nrfx_power_sleepevt_config_t</innerclass>
    <innerclass refid="structnrfx__power__usbevt__config__t" prot="public">nrfx_power_usbevt_config_t</innerclass>
      <sectiondef kind="user-defined">
      <header>Callback types</header>
      <description><para>Defined types of callback functions. </para>
</description>
      <memberdef kind="typedef" id="group__nrfx__power_1gacc06e3cd7cda7129d7f2b91b91612429" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* nrfx_power_pofwarn_event_handler_t) (void)</definition>
        <argsstring>)(void)</argsstring>
        <name>nrfx_power_pofwarn_event_handler_t</name>
        <briefdescription>
<para>Event handler for power failure warning. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/include/nrfx_power.h" line="145" column="9" bodyfile="drivers/include/nrfx_power.h" bodystart="145" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__nrfx__power_1gac10947f96f220031b3ec62a4e6d1b1df" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* nrfx_power_sleep_event_handler_t) (nrfx_power_sleep_evt_t event)</definition>
        <argsstring>)(nrfx_power_sleep_evt_t event)</argsstring>
        <name>nrfx_power_sleep_event_handler_t</name>
        <briefdescription>
<para>Event handler for the sleep events. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event type </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/include/nrfx_power.h" line="153" column="9" bodyfile="drivers/include/nrfx_power.h" bodystart="153" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__nrfx__power_1ga69bf52289b405109af0446afc637b3dc" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* nrfx_power_usb_event_handler_t) (nrfx_power_usb_evt_t event)</definition>
        <argsstring>)(nrfx_power_usb_evt_t event)</argsstring>
        <name>nrfx_power_usb_event_handler_t</name>
        <briefdescription>
<para>Event handler for the USB-related power events. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event type </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/include/nrfx_power.h" line="162" column="9" bodyfile="drivers/include/nrfx_power.h" bodystart="162" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__nrfx__power_1ga2acf2fafd265aac2d99de206cb07439f" prot="public" static="no">
        <name>NRFX_POWER_SUPPORTS_POFCON</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Symbol indicating whether the power failure comparator is supported. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/include/nrfx_power.h" line="60" column="9" bodyfile="drivers/include/nrfx_power.h" bodystart="60" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrfx__power_1gac832596ee735ad30608b0a850969a3b3" prot="public" static="no">
        <name>NRFX_POWER_SUPPORTS_POFCON_VDDH</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Symbol indicating whether the power failure comparator for VDDH is supported. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/include/nrfx_power.h" line="68" column="9" bodyfile="drivers/include/nrfx_power.h" bodystart="68" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrfx__power_1gab8ac55092dbce6b0a4c2ee995c72281d" prot="public" static="no">
        <name>NRFX_POWER_SUPPORTS_DCDCEN_VDDH</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Symbol indicating whether the VDDH regulator is supported. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/include/nrfx_power.h" line="76" column="9" bodyfile="drivers/include/nrfx_power.h" bodystart="76" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="group__nrfx__power_1gadfb32284ef08fd29988dfcbb9346d685" prot="public" static="no" strong="no">
        <type></type>
        <name>nrfx_power_mode_t</name>
        <enumvalue id="group__nrfx__power_1ggadfb32284ef08fd29988dfcbb9346d685a3ff1c797592ef7a364c7b70ceb8114b3" prot="public">
          <name>NRFX_POWER_MODE_CONSTLAT</name>
          <briefdescription>
<para>Constant Latency mode. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrfx__power_1ggadfb32284ef08fd29988dfcbb9346d685a15889ea478a58ea264712a340d21e7f2" prot="public">
          <name>NRFX_POWER_MODE_LOWPWR</name>
          <briefdescription>
<para>Low Power mode. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Sub-power mode possible configurations. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/include/nrfx_power.h" line="84" column="1" bodyfile="drivers/include/nrfx_power.h" bodystart="85" bodyend="92"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrfx__power_1gaed02770d03b96ab4faec66d284a891c0" prot="public" static="no" strong="no">
        <type></type>
        <name>nrfx_power_sleep_evt_t</name>
        <enumvalue id="group__nrfx__power_1ggaed02770d03b96ab4faec66d284a891c0a659991783a41491bef4e8a8888a5bf97" prot="public">
          <name>NRFX_POWER_SLEEP_EVT_ENTER</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>CPU entered WFI/WFE sleep <verbatim>                        Keep in mind that if this interrupt is enabled,
                        it means that CPU was waken up just after WFI by this interrupt.
</verbatim> </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrfx__power_1ggaed02770d03b96ab4faec66d284a891c0ae8e94573af23499237eee4556e178243" prot="public">
          <name>NRFX_POWER_SLEEP_EVT_EXIT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>CPU exited WFI/WFE sleep </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Events from power system. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/include/nrfx_power.h" line="98" column="1" bodyfile="drivers/include/nrfx_power.h" bodystart="99" bodyend="106"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrfx__power_1gacba1e11720cb05342ac8b0f255db6c8a" prot="public" static="no" strong="no">
        <type></type>
        <name>nrfx_power_usb_evt_t</name>
        <enumvalue id="group__nrfx__power_1ggacba1e11720cb05342ac8b0f255db6c8aa51365fb5b09f757a2a8e3b0e6c2cff33" prot="public">
          <name>NRFX_POWER_USB_EVT_DETECTED</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>USB power detected on the connector (plugged in). </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrfx__power_1ggacba1e11720cb05342ac8b0f255db6c8aa137dd2b72e6b94d2586f3f0b246ea260" prot="public">
          <name>NRFX_POWER_USB_EVT_REMOVED</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>USB power removed from the connector. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrfx__power_1ggacba1e11720cb05342ac8b0f255db6c8aa1849049525874a39a6da918560fb0b93" prot="public">
          <name>NRFX_POWER_USB_EVT_READY</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>USB power regulator ready. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Events from USB power system. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/include/nrfx_power.h" line="113" column="1" bodyfile="drivers/include/nrfx_power.h" bodystart="114" bodyend="118"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrfx__power_1ga234637366f2b21ad80468fa0eea8e266" prot="public" static="no" strong="no">
        <type></type>
        <name>nrfx_power_usb_state_t</name>
        <enumvalue id="group__nrfx__power_1gga234637366f2b21ad80468fa0eea8e266a33459a0632fef535e23edb7750a3cefe" prot="public">
          <name>NRFX_POWER_USB_STATE_DISCONNECTED</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>No power on USB lines detected. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrfx__power_1gga234637366f2b21ad80468fa0eea8e266a7944a6357aa64856a14cffba68ccd7c9" prot="public">
          <name>NRFX_POWER_USB_STATE_CONNECTED</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>The USB power is detected, but USB power regulator is not ready. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrfx__power_1gga234637366f2b21ad80468fa0eea8e266a8cd03c27f125aafede399cfb0434142c" prot="public">
          <name>NRFX_POWER_USB_STATE_READY</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>From the power viewpoint, USB is ready for working. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>USB power state. </para>
        </briefdescription>
        <detaileddescription>
<para>The single enumerator that holds all data about current state of USB related POWER.</para>
<para>Organized this way that higher power state has higher numeric value </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/include/nrfx_power.h" line="128" column="1" bodyfile="drivers/include/nrfx_power.h" bodystart="129" bodyend="133"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__nrfx__power_1ga952633fb74ff48a15b316ef8740a3887" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__nrfx__power_1gacc06e3cd7cda7129d7f2b91b91612429" kindref="member">nrfx_power_pofwarn_event_handler_t</ref></type>
        <definition>nrfx_power_pofwarn_event_handler_t nrfx_power_pof_handler_get</definition>
        <argsstring>(void)</argsstring>
        <name>nrfx_power_pof_handler_get</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Function for getting the handler of the power failure comparator. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Handler of the power failure comparator. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/include/nrfx_power.h" line="242" column="36" declfile="drivers/include/nrfx_power.h" declline="242" declcolumn="36"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfx__power_1ga5c9153a39a12433c4f3e88b6f85c66be" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__nrfx__power_1ga69bf52289b405109af0446afc637b3dc" kindref="member">nrfx_power_usb_event_handler_t</ref></type>
        <definition>nrfx_power_usb_event_handler_t nrfx_power_usb_handler_get</definition>
        <argsstring>(void)</argsstring>
        <name>nrfx_power_usb_handler_get</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Function for getting the handler of the USB power. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Handler of the USB power. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/include/nrfx_power.h" line="249" column="32" declfile="drivers/include/nrfx_power.h" declline="249" declcolumn="32"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfx__power_1ga0a9e682db2de0159d0baab1123d2caa9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__nrfx__error__codes_1ga2449720f8fa17b22243218068459a24b" kindref="member">nrfx_err_t</ref></type>
        <definition>nrfx_err_t nrfx_power_init</definition>
        <argsstring>(nrfx_power_config_t const *p_config)</argsstring>
        <name>nrfx_power_init</name>
        <param>
          <type><ref refid="structnrfx__power__config__t" kindref="compound">nrfx_power_config_t</ref> const *</type>
          <declname>p_config</declname>
        </param>
        <briefdescription>
<para>Function for initializing the power module driver. </para>
        </briefdescription>
        <detaileddescription>
<para>Enabled power module driver processes all the interrupts from the power system.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_config</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure with the initial configuration.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>NRFX_SUCCESS</parametername>
</parameternamelist>
<parameterdescription>
<para>Successfully initialized. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NRFX_ERROR_ALREADY</parametername>
</parameternamelist>
<parameterdescription>
<para>Module was already initialized. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/include/nrfx_power.h" line="262" column="12" declfile="drivers/include/nrfx_power.h" declline="262" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfx__power_1gaaec95ffd3ac4b9922c4a8ffbb77b56da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nrfx_power_uninit</definition>
        <argsstring>(void)</argsstring>
        <name>nrfx_power_uninit</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Function for unintializing the power module driver. </para>
        </briefdescription>
        <detaileddescription>
<para>Disables all the interrupt handling in the module.</para>
<para><simplesect kind="see"><para><ref refid="group__nrfx__power_1ga0a9e682db2de0159d0baab1123d2caa9" kindref="member">nrfx_power_init</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/include/nrfx_power.h" line="271" column="6" declfile="drivers/include/nrfx_power.h" declline="271" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfx__power_1ga2154052a0e88a71e4da4b5882cfd7735" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool nrfx_power_init_check</definition>
        <argsstring>(void)</argsstring>
        <name>nrfx_power_init_check</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Function for checking if the power module driver is initialized. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>Driver is already initialized. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>Driver is not initialized. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/include/nrfx_power.h" line="279" column="6" declfile="drivers/include/nrfx_power.h" declline="279" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfx__power_1ga1e534bf1bef879d811e25d197b33e32d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nrfx_power_pof_init</definition>
        <argsstring>(nrfx_power_pofwarn_config_t const *p_config)</argsstring>
        <name>nrfx_power_pof_init</name>
        <param>
          <type><ref refid="structnrfx__power__pofwarn__config__t" kindref="compound">nrfx_power_pofwarn_config_t</ref> const *</type>
          <declname>p_config</declname>
        </param>
        <briefdescription>
<para>Function for initializing the power failure comparator. </para>
        </briefdescription>
        <detaileddescription>
<para>Configures the power failure comparator. This function does not set it up and enable it. These steps can be done with functions <ref refid="group__nrfx__power_1ga8f7fa0add340035f5c873b77ae4aea3e" kindref="member">nrfx_power_pof_enable</ref> and <ref refid="group__nrfx__power_1ga7673168386b8832d6ac633b163118844" kindref="member">nrfx_power_pof_disable</ref> or with the SoftDevice API (when in use).</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_config</parametername>
</parameternamelist>
<parameterdescription>
<para>Configuration with values and event handler. If event handler is set to NULL, the interrupt will be disabled. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/include/nrfx_power.h" line="292" column="6" declfile="drivers/include/nrfx_power.h" declline="292" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfx__power_1ga8f7fa0add340035f5c873b77ae4aea3e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nrfx_power_pof_enable</definition>
        <argsstring>(nrfx_power_pofwarn_config_t const *p_config)</argsstring>
        <name>nrfx_power_pof_enable</name>
        <param>
          <type><ref refid="structnrfx__power__pofwarn__config__t" kindref="compound">nrfx_power_pofwarn_config_t</ref> const *</type>
          <declname>p_config</declname>
        </param>
        <briefdescription>
<para>Function for enabling the power failure comparator. Sets and enables the interrupt of the power failure comparator. This function cannot be in use when SoftDevice is enabled. If the event handler set in the init function is set to NULL, the interrupt will be disabled. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_config</parametername>
</parameternamelist>
<parameterdescription>
<para>Configuration with values and event handler. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/include/nrfx_power.h" line="302" column="6" declfile="drivers/include/nrfx_power.h" declline="302" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfx__power_1ga7673168386b8832d6ac633b163118844" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nrfx_power_pof_disable</definition>
        <argsstring>(void)</argsstring>
        <name>nrfx_power_pof_disable</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Function for disabling the power failure comparator. </para>
        </briefdescription>
        <detaileddescription>
<para>Disables the power failure comparator interrupt. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/include/nrfx_power.h" line="309" column="6" declfile="drivers/include/nrfx_power.h" declline="309" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfx__power_1ga583aa2c1149d0775b51a020e5bc4f837" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nrfx_power_pof_uninit</definition>
        <argsstring>(void)</argsstring>
        <name>nrfx_power_pof_uninit</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Function for clearing the power failure comparator settings. </para>
        </briefdescription>
        <detaileddescription>
<para>Clears the settings of the power failure comparator. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/include/nrfx_power.h" line="316" column="6" declfile="drivers/include/nrfx_power.h" declline="316" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfx__power_1ga19ebe294c60c77f74bfd2a7c3e82bf1e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nrfx_power_sleepevt_init</definition>
        <argsstring>(nrfx_power_sleepevt_config_t const *p_config)</argsstring>
        <name>nrfx_power_sleepevt_init</name>
        <param>
          <type><ref refid="structnrfx__power__sleepevt__config__t" kindref="compound">nrfx_power_sleepevt_config_t</ref> const *</type>
          <declname>p_config</declname>
        </param>
        <briefdescription>
<para>Function for initializing the processing of the sleep events. </para>
        </briefdescription>
        <detaileddescription>
<para>Configures and sets up the sleep event processing.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_config</parametername>
</parameternamelist>
<parameterdescription>
<para>Configuration with values and event handler.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="group__nrfx__power_1gafe18a94d6a63545f3000b3a8da936e68" kindref="member">nrfx_power_sleepevt_uninit</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/include/nrfx_power.h" line="330" column="6" declfile="drivers/include/nrfx_power.h" declline="330" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfx__power_1ga17c1cd923bfdaa4fc6eec96b510dd60c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nrfx_power_sleepevt_enable</definition>
        <argsstring>(nrfx_power_sleepevt_config_t const *p_config)</argsstring>
        <name>nrfx_power_sleepevt_enable</name>
        <param>
          <type><ref refid="structnrfx__power__sleepevt__config__t" kindref="compound">nrfx_power_sleepevt_config_t</ref> const *</type>
          <declname>p_config</declname>
        </param>
        <briefdescription>
<para>Function for enabling the processing of the sleep events. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_config</parametername>
</parameternamelist>
<parameterdescription>
<para>Configuration with values and event handler. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/include/nrfx_power.h" line="337" column="6" declfile="drivers/include/nrfx_power.h" declline="337" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfx__power_1gab21e1f7dee9e84f18b1c59d734670e02" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nrfx_power_sleepevt_disable</definition>
        <argsstring>(void)</argsstring>
        <name>nrfx_power_sleepevt_disable</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Function for disabling the processing of the sleep events. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/include/nrfx_power.h" line="340" column="6" declfile="drivers/include/nrfx_power.h" declline="340" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfx__power_1gafe18a94d6a63545f3000b3a8da936e68" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nrfx_power_sleepevt_uninit</definition>
        <argsstring>(void)</argsstring>
        <name>nrfx_power_sleepevt_uninit</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Function for uninitializing the processing of the sleep events. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__nrfx__power_1ga19ebe294c60c77f74bfd2a7c3e82bf1e" kindref="member">nrfx_power_sleepevt_init</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/include/nrfx_power.h" line="347" column="6" declfile="drivers/include/nrfx_power.h" declline="347" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfx__power_1ga5027051a6d0ab4d3282083f885769792" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__nrfx__error__codes_1ga2449720f8fa17b22243218068459a24b" kindref="member">nrfx_err_t</ref></type>
        <definition>nrfx_err_t nrfx_power_constlat_mode_request</definition>
        <argsstring>(void)</argsstring>
        <name>nrfx_power_constlat_mode_request</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Function for requesting Constant Latency sub-power mode. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This function uses a reference counter. As a result, if it is called more than once, the function <ref refid="group__nrfx__power_1gaed65bb150865bc128192ece574ad71ce" kindref="member">nrfx_power_constlat_mode_free()</ref> needs to be called the same number of times to change the mode to Low Power.</para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>NRFX_SUCCESS</parametername>
</parameternamelist>
<parameterdescription>
<para>The sub-power mode was successfully changed to Constant Latency. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NRFX_ERROR_ALREADY</parametername>
</parameternamelist>
<parameterdescription>
<para>Constant Latency mode was already requested and it is the current sub-power mode. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/include/nrfx_power.h" line="361" column="12" declfile="drivers/include/nrfx_power.h" declline="361" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfx__power_1gaed65bb150865bc128192ece574ad71ce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__nrfx__error__codes_1ga2449720f8fa17b22243218068459a24b" kindref="member">nrfx_err_t</ref></type>
        <definition>nrfx_err_t nrfx_power_constlat_mode_free</definition>
        <argsstring>(void)</argsstring>
        <name>nrfx_power_constlat_mode_free</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Function for freeing Constant Latency sub-power mode. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This function uses a reference counter. As a result, it needs to be called the same number of times as the <ref refid="group__nrfx__power_1ga5027051a6d0ab4d3282083f885769792" kindref="member">nrfx_power_constlat_mode_request()</ref> function to change the mode back to Low Power.</para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>NRFX_SUCCESS</parametername>
</parameternamelist>
<parameterdescription>
<para>The sub-power mode was successfully changed to Low Power. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NRFX_ERROR_BUSY</parametername>
</parameternamelist>
<parameterdescription>
<para>The sub-power mode was not changed due to multiple calls to <ref refid="group__nrfx__power_1ga5027051a6d0ab4d3282083f885769792" kindref="member">nrfx_power_constlat_mode_request</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/include/nrfx_power.h" line="373" column="12" declfile="drivers/include/nrfx_power.h" declline="373" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfx__power_1ga539bbdbe63988f685670e3b368d7461e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__nrfx__power_1gadfb32284ef08fd29988dfcbb9346d685" kindref="member">nrfx_power_mode_t</ref></type>
        <definition>nrfx_power_mode_t nrfx_power_mode_get</definition>
        <argsstring>(void)</argsstring>
        <name>nrfx_power_mode_get</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Function for getting the current sub-power mode. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Current sub-power mode. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/include/nrfx_power.h" line="380" column="19" declfile="drivers/include/nrfx_power.h" declline="380" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfx__power_1ga7f8ca5e0d2df45b5a23da922579e7227" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nrfx_power_usbevt_init</definition>
        <argsstring>(nrfx_power_usbevt_config_t const *p_config)</argsstring>
        <name>nrfx_power_usbevt_init</name>
        <param>
          <type><ref refid="structnrfx__power__usbevt__config__t" kindref="compound">nrfx_power_usbevt_config_t</ref> const *</type>
          <declname>p_config</declname>
        </param>
        <briefdescription>
<para>Function for initializing the processing of USB power event. </para>
        </briefdescription>
        <detaileddescription>
<para>Configures and sets up the USB power event processing.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_config</parametername>
</parameternamelist>
<parameterdescription>
<para>Configuration with values and event handler.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="group__nrfx__power_1ga2f7d74353199bb4416495d16c49d9d0b" kindref="member">nrfx_power_usbevt_uninit</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/include/nrfx_power.h" line="393" column="6" declfile="drivers/include/nrfx_power.h" declline="393" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfx__power_1ga493692ebc3299ad68b99ce30576e7f24" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nrfx_power_usbevt_enable</definition>
        <argsstring>(void)</argsstring>
        <name>nrfx_power_usbevt_enable</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Function for enabling the processing of USB power event. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/include/nrfx_power.h" line="396" column="6" declfile="drivers/include/nrfx_power.h" declline="396" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfx__power_1gacd73c1fe8d8173131871f53124952657" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nrfx_power_usbevt_disable</definition>
        <argsstring>(void)</argsstring>
        <name>nrfx_power_usbevt_disable</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Function for disabling the processing of USB power event. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/include/nrfx_power.h" line="399" column="6" declfile="drivers/include/nrfx_power.h" declline="399" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfx__power_1ga2f7d74353199bb4416495d16c49d9d0b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nrfx_power_usbevt_uninit</definition>
        <argsstring>(void)</argsstring>
        <name>nrfx_power_usbevt_uninit</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Function for uninitalizing the processing of USB power event. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__nrfx__power_1ga7f8ca5e0d2df45b5a23da922579e7227" kindref="member">nrfx_power_usbevt_init</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/include/nrfx_power.h" line="406" column="6" declfile="drivers/include/nrfx_power.h" declline="406" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfx__power_1gaead4605524f3db0915f607d2ee0a949a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRFX_STATIC_INLINE <ref refid="group__nrfx__power_1ga234637366f2b21ad80468fa0eea8e266" kindref="member">nrfx_power_usb_state_t</ref></type>
        <definition>NRFX_STATIC_INLINE nrfx_power_usb_state_t nrfx_power_usbstatus_get</definition>
        <argsstring>(void)</argsstring>
        <name>nrfx_power_usbstatus_get</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Function for getting the status of USB power. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Current USB power status. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/include/nrfx_power.h" line="413" column="43" declfile="drivers/include/nrfx_power.h" declline="413" declcolumn="43"/>
      </memberdef>
      <memberdef kind="function" id="nrfx__power_8h_1a2e62518ff7b7b0beb4b069950c445836" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nrfx_power_irq_handler</definition>
        <argsstring>(void)</argsstring>
        <name>nrfx_power_irq_handler</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/include/nrfx_power.h" line="438" column="6" declfile="drivers/include/nrfx_power.h" declline="438" declcolumn="6"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2017<sp/>-<sp/>2024,<sp/>Nordic<sp/>Semiconductor<sp/>ASA</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>All<sp/>rights<sp/>reserved.</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>SPDX-License-Identifier:<sp/>BSD-3-Clause</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions<sp/>are<sp/>met:</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>1.<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright<sp/>notice,<sp/>this</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>2.<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the<sp/>distribution.</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/>3.<sp/>Neither<sp/>the<sp/>name<sp/>of<sp/>the<sp/>copyright<sp/>holder<sp/>nor<sp/>the<sp/>names<sp/>of<sp/>its</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>contributors<sp/>may<sp/>be<sp/>used<sp/>to<sp/>endorse<sp/>or<sp/>promote<sp/>products<sp/>derived<sp/>from<sp/>this</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>software<sp/>without<sp/>specific<sp/>prior<sp/>written<sp/>permission.</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>COPYRIGHT<sp/>HOLDERS<sp/>AND<sp/>CONTRIBUTORS<sp/>&quot;AS<sp/>IS&quot;</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/>AND<sp/>ANY<sp/>EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>THE</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*<sp/>ARE<sp/>DISCLAIMED.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>COPYRIGHT<sp/>HOLDER<sp/>OR<sp/>CONTRIBUTORS<sp/>BE</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,<sp/>SPECIAL,<sp/>EXEMPLARY,<sp/>OR</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>PROCUREMENT<sp/>OF</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>*<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,<sp/>DATA,<sp/>OR<sp/>PROFITS;<sp/>OR<sp/>BUSINESS</highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/>*<sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY<sp/>THEORY<sp/>OF<sp/>LIABILITY,<sp/>WHETHER<sp/>IN</highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/>*<sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR<sp/>OTHERWISE)</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/>*<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE<sp/>OF<sp/>THIS<sp/>SOFTWARE,<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/>*<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight></codeline>
<codeline lineno="32"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>NRFX_POWER_H__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRFX_POWER_H__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;nrfx.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;hal/nrf_power.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;nrfx_power_clock.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;nrfx_power_compat.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(REGULATORS_PRESENT)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;hal/nrf_regulators.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="50"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="51"><highlight class="comment"><sp/>*<sp/>@defgroup<sp/>nrfx_power<sp/>POWER<sp/>driver</highlight></codeline>
<codeline lineno="52"><highlight class="comment"><sp/>*<sp/>@{</highlight></codeline>
<codeline lineno="53"><highlight class="comment"><sp/>*<sp/>@ingroup<sp/>nrf_power</highlight></codeline>
<codeline lineno="54"><highlight class="comment"><sp/>*<sp/>@brief<sp/><sp/><sp/>POWER<sp/>peripheral<sp/>driver.</highlight></codeline>
<codeline lineno="55"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_POWER_HAS_POFCON<sp/>||<sp/>(defined(REGULATORS_PRESENT)<sp/>&amp;&amp;<sp/>NRF_REGULATORS_HAS_POF)<sp/>\</highlight></codeline>
<codeline lineno="58"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="59"><highlight class="comment">/**<sp/>@brief<sp/>Symbol<sp/>indicating<sp/>whether<sp/>the<sp/>power<sp/>failure<sp/>comparator<sp/>is<sp/>supported.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRFX_POWER_SUPPORTS_POFCON<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRFX_POWER_SUPPORTS_POFCON<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_POWER_HAS_POFCON_VDDH<sp/>||<sp/>(defined(REGULATORS_PRESENT)<sp/>&amp;&amp;<sp/>NRF_REGULATORS_HAS_POF_VDDH)<sp/>\</highlight></codeline>
<codeline lineno="66"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="67"><highlight class="comment">/**<sp/>@brief<sp/>Symbol<sp/>indicating<sp/>whether<sp/>the<sp/>power<sp/>failure<sp/>comparator<sp/>for<sp/>VDDH<sp/>is<sp/>supported.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRFX_POWER_SUPPORTS_POFCON_VDDH<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRFX_POWER_SUPPORTS_POFCON_VDDH<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_POWER_HAS_DCDCEN_VDDH<sp/>||<sp/>(defined(REGULATORS_PRESENT)<sp/>&amp;&amp;<sp/>NRF_REGULATORS_HAS_VREG_HIGH)<sp/>\</highlight></codeline>
<codeline lineno="74"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="75"><highlight class="comment">/**<sp/>@brief<sp/>Symbol<sp/>indicating<sp/>whether<sp/>the<sp/>VDDH<sp/>regulator<sp/>is<sp/>supported.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRFX_POWER_SUPPORTS_DCDCEN_VDDH<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRFX_POWER_SUPPORTS_DCDCEN_VDDH<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="81"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="82"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Sub-power<sp/>mode<sp/>possible<sp/>configurations</highlight></codeline>
<codeline lineno="83"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal">{</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_POWER_HAS_CONST_LATENCY<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__power_1ggadfb32284ef08fd29988dfcbb9346d685a3ff1c797592ef7a364c7b70ceb8114b3" kindref="member">NRFX_POWER_MODE_CONSTLAT</ref>,<sp/></highlight><highlight class="comment">///&lt;<sp/>Constant<sp/>Latency<sp/>mode.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_POWER_HAS_LOW_POWER<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__power_1ggadfb32284ef08fd29988dfcbb9346d685a15889ea478a58ea264712a340d21e7f2" kindref="member">NRFX_POWER_MODE_LOWPWR</ref><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Low<sp/>Power<sp/>mode.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal">}<sp/><ref refid="group__nrfx__power_1gadfb32284ef08fd29988dfcbb9346d685" kindref="member">nrfx_power_mode_t</ref>;</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_POWER_HAS_SLEEPEVT<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="95"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="96"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Events<sp/>from<sp/>power<sp/>system</highlight></codeline>
<codeline lineno="97"><highlight class="comment"><sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal">{</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__power_1ggaed02770d03b96ab4faec66d284a891c0a659991783a41491bef4e8a8888a5bf97" kindref="member">NRFX_POWER_SLEEP_EVT_ENTER</ref>,<sp/></highlight><highlight class="comment">/**&lt;<sp/>CPU<sp/>entered<sp/>WFI/WFE<sp/>sleep</highlight></codeline>
<codeline lineno="101"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="102"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>Keep<sp/>in<sp/>mind<sp/>that<sp/>if<sp/>this<sp/>interrupt<sp/>is<sp/>enabled,</highlight></codeline>
<codeline lineno="103"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>it<sp/>means<sp/>that<sp/>CPU<sp/>was<sp/>waken<sp/>up<sp/>just<sp/>after<sp/>WFI<sp/>by<sp/>this<sp/>interrupt.</highlight></codeline>
<codeline lineno="104"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__power_1ggaed02770d03b96ab4faec66d284a891c0ae8e94573af23499237eee4556e178243" kindref="member">NRFX_POWER_SLEEP_EVT_EXIT</ref><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>CPU<sp/>exited<sp/>WFI/WFE<sp/>sleep<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal">}<ref refid="group__nrfx__power_1gaed02770d03b96ab4faec66d284a891c0" kindref="member">nrfx_power_sleep_evt_t</ref>;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>NRF_POWER_HAS_SLEEPEVT<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_POWER_HAS_USBREG<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="110"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="111"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Events<sp/>from<sp/>USB<sp/>power<sp/>system</highlight></codeline>
<codeline lineno="112"><highlight class="comment"><sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal">{</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__power_1ggacba1e11720cb05342ac8b0f255db6c8aa51365fb5b09f757a2a8e3b0e6c2cff33" kindref="member">NRFX_POWER_USB_EVT_DETECTED</ref>,<sp/></highlight><highlight class="comment">/**&lt;<sp/>USB<sp/>power<sp/>detected<sp/>on<sp/>the<sp/>connector<sp/>(plugged<sp/>in).<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__power_1ggacba1e11720cb05342ac8b0f255db6c8aa137dd2b72e6b94d2586f3f0b246ea260" kindref="member">NRFX_POWER_USB_EVT_REMOVED</ref>,<sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>USB<sp/>power<sp/>removed<sp/>from<sp/>the<sp/>connector.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__power_1ggacba1e11720cb05342ac8b0f255db6c8aa1849049525874a39a6da918560fb0b93" kindref="member">NRFX_POWER_USB_EVT_READY</ref><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>USB<sp/>power<sp/>regulator<sp/>ready.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal">}<ref refid="group__nrfx__power_1gacba1e11720cb05342ac8b0f255db6c8a" kindref="member">nrfx_power_usb_evt_t</ref>;</highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="120"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="121"><highlight class="comment"><sp/>*<sp/>@brief<sp/>USB<sp/>power<sp/>state</highlight></codeline>
<codeline lineno="122"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="123"><highlight class="comment"><sp/>*<sp/>The<sp/>single<sp/>enumerator<sp/>that<sp/>holds<sp/>all<sp/>data<sp/>about<sp/>current<sp/>state<sp/>of<sp/>USB</highlight></codeline>
<codeline lineno="124"><highlight class="comment"><sp/>*<sp/>related<sp/>POWER.</highlight></codeline>
<codeline lineno="125"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="126"><highlight class="comment"><sp/>*<sp/>Organized<sp/>this<sp/>way<sp/>that<sp/>higher<sp/>power<sp/>state<sp/>has<sp/>higher<sp/>numeric<sp/>value</highlight></codeline>
<codeline lineno="127"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal">{</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__power_1gga234637366f2b21ad80468fa0eea8e266a33459a0632fef535e23edb7750a3cefe" kindref="member">NRFX_POWER_USB_STATE_DISCONNECTED</ref>,<sp/></highlight><highlight class="comment">/**&lt;<sp/>No<sp/>power<sp/>on<sp/>USB<sp/>lines<sp/>detected.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__power_1gga234637366f2b21ad80468fa0eea8e266a7944a6357aa64856a14cffba68ccd7c9" kindref="member">NRFX_POWER_USB_STATE_CONNECTED</ref>,<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>The<sp/>USB<sp/>power<sp/>is<sp/>detected,<sp/>but<sp/>USB<sp/>power<sp/>regulator<sp/>is<sp/>not<sp/>ready.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__power_1gga234637366f2b21ad80468fa0eea8e266a8cd03c27f125aafede399cfb0434142c" kindref="member">NRFX_POWER_USB_STATE_READY</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>From<sp/>the<sp/>power<sp/>viewpoint,<sp/>USB<sp/>is<sp/>ready<sp/>for<sp/>working.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal">}<ref refid="group__nrfx__power_1ga234637366f2b21ad80468fa0eea8e266" kindref="member">nrfx_power_usb_state_t</ref>;</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRF_POWER_HAS_USBREG<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="136"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="137"><highlight class="comment"><sp/>*<sp/>@name<sp/>Callback<sp/>types</highlight></codeline>
<codeline lineno="138"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="139"><highlight class="comment"><sp/>*<sp/>Defined<sp/>types<sp/>of<sp/>callback<sp/>functions.</highlight></codeline>
<codeline lineno="140"><highlight class="comment"><sp/>*<sp/>@{</highlight></codeline>
<codeline lineno="141"><highlight class="comment"><sp/>*/</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="142"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="143"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Event<sp/>handler<sp/>for<sp/>power<sp/>failure<sp/>warning.</highlight></codeline>
<codeline lineno="144"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(*<ref refid="group__nrfx__power_1gacc06e3cd7cda7129d7f2b91b91612429" kindref="member">nrfx_power_pofwarn_event_handler_t</ref>)(void);</highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_POWER_HAS_SLEEPEVT<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="148"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="149"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Event<sp/>handler<sp/>for<sp/>the<sp/>sleep<sp/>events.</highlight></codeline>
<codeline lineno="150"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="151"><highlight class="comment"><sp/>*<sp/>@param<sp/>event<sp/>Event<sp/>type</highlight></codeline>
<codeline lineno="152"><highlight class="comment"><sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(*<ref refid="group__nrfx__power_1gac10947f96f220031b3ec62a4e6d1b1df" kindref="member">nrfx_power_sleep_event_handler_t</ref>)(<ref refid="group__nrfx__power_1gaed02770d03b96ab4faec66d284a891c0" kindref="member">nrfx_power_sleep_evt_t</ref><sp/>event);</highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_POWER_HAS_USBREG<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="157"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="158"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Event<sp/>handler<sp/>for<sp/>the<sp/>USB-related<sp/>power<sp/>events.</highlight></codeline>
<codeline lineno="159"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="160"><highlight class="comment"><sp/>*<sp/>@param<sp/>event<sp/>Event<sp/>type</highlight></codeline>
<codeline lineno="161"><highlight class="comment"><sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(*<ref refid="group__nrfx__power_1ga69bf52289b405109af0446afc637b3dc" kindref="member">nrfx_power_usb_event_handler_t</ref>)(<ref refid="group__nrfx__power_1gacba1e11720cb05342ac8b0f255db6c8a" kindref="member">nrfx_power_usb_evt_t</ref><sp/>event);</highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="164"><highlight class="comment">/**<sp/>@}<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="166"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="167"><highlight class="comment"><sp/>*<sp/>@brief<sp/>General<sp/>power<sp/>configuration</highlight></codeline>
<codeline lineno="168"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="169"><highlight class="comment"><sp/>*<sp/>Parameters<sp/>required<sp/>to<sp/>initialize<sp/>power<sp/>driver.</highlight></codeline>
<codeline lineno="170"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="171" refid="structnrfx__power__config__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal">{</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="173"><highlight class="comment"><sp/><sp/><sp/><sp/>/**</highlight></codeline>
<codeline lineno="174"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>@brief<sp/>Enable<sp/>main<sp/>DCDC<sp/>regulator.</highlight></codeline>
<codeline lineno="175"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="176"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>This<sp/>bit<sp/>only<sp/>informs<sp/>the<sp/>driver<sp/>that<sp/>elements<sp/>for<sp/>DCDC<sp/>regulator</highlight></codeline>
<codeline lineno="177"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>are<sp/>installed<sp/>and<sp/>the<sp/>regulator<sp/>can<sp/>be<sp/>used.</highlight></codeline>
<codeline lineno="178"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>The<sp/>regulator<sp/>will<sp/>be<sp/>enabled<sp/>or<sp/>disabled<sp/>automatically</highlight></codeline>
<codeline lineno="179"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>by<sp/>the<sp/>hardware,<sp/>basing<sp/>on<sp/>current<sp/>power<sp/>requirement.</highlight></codeline>
<codeline lineno="180"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>dcdcen:1;</highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRFX_POWER_SUPPORTS_DCDCEN_VDDH</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="184"><highlight class="comment"><sp/><sp/><sp/><sp/>/**</highlight></codeline>
<codeline lineno="185"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>@brief<sp/>Enable<sp/>HV<sp/>DCDC<sp/>regulator.</highlight></codeline>
<codeline lineno="186"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="187"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>This<sp/>bit<sp/>only<sp/>informs<sp/>the<sp/>driver<sp/>that<sp/>elements<sp/>for<sp/>DCDC<sp/>regulator</highlight></codeline>
<codeline lineno="188"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>are<sp/>installed<sp/>and<sp/>the<sp/>regulator<sp/>can<sp/>be<sp/>used.</highlight></codeline>
<codeline lineno="189"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>The<sp/>regulator<sp/>will<sp/>be<sp/>enabled<sp/>or<sp/>disabled<sp/>automatically</highlight></codeline>
<codeline lineno="190"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>by<sp/>the<sp/>hardware,<sp/>basing<sp/>on<sp/>current<sp/>power<sp/>requirement.</highlight></codeline>
<codeline lineno="191"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>dcdcenhv:<sp/>1;</highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal">}<ref refid="structnrfx__power__config__t" kindref="compound">nrfx_power_config_t</ref>;</highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="196"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="197"><highlight class="comment"><sp/>*<sp/>@brief<sp/>The<sp/>configuration<sp/>for<sp/>power<sp/>failure<sp/>comparator.</highlight></codeline>
<codeline lineno="198"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="199"><highlight class="comment"><sp/>*<sp/>Configuration<sp/>used<sp/>to<sp/>enable<sp/>and<sp/>configure<sp/>the<sp/>power<sp/>failure<sp/>comparator.</highlight></codeline>
<codeline lineno="200"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="201" refid="structnrfx__power__pofwarn__config__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal">{</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__power_1gacc06e3cd7cda7129d7f2b91b91612429" kindref="member">nrfx_power_pofwarn_event_handler_t</ref><sp/>handler;<sp/></highlight><highlight class="comment">//!&lt;<sp/>Event<sp/>handler.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRFX_POWER_SUPPORTS_POFCON</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__power__hal_1gacc0f863f34d48f5975564a11975dda2e" kindref="member">nrf_power_pof_thr_t</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>thr;<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//!&lt;<sp/>Threshold<sp/>for<sp/>power<sp/>failure<sp/>detection</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRFX_POWER_SUPPORTS_POFCON_VDDH</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__power__hal_1ga3dfa1a1f6a6daaab25b7a47bbf42969b" kindref="member">nrf_power_pof_thrvddh_t</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>thrvddh;<sp/></highlight><highlight class="comment">//!&lt;<sp/>Threshold<sp/>for<sp/>power<sp/>failure<sp/>detection<sp/>on<sp/>the<sp/>VDDH<sp/>pin.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal">}<ref refid="structnrfx__power__pofwarn__config__t" kindref="compound">nrfx_power_pofwarn_config_t</ref>;</highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_POWER_HAS_SLEEPEVT<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="213"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="214"><highlight class="comment"><sp/>*<sp/>@brief<sp/>The<sp/>configuration<sp/>of<sp/>sleep<sp/>event<sp/>processing.</highlight></codeline>
<codeline lineno="215"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="216"><highlight class="comment"><sp/>*<sp/>Configuration<sp/>used<sp/>to<sp/>enable<sp/>and<sp/>configure<sp/>sleep<sp/>event<sp/>handling.</highlight></codeline>
<codeline lineno="217"><highlight class="comment"><sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="218" refid="structnrfx__power__sleepevt__config__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal">{</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__power_1gac10947f96f220031b3ec62a4e6d1b1df" kindref="member">nrfx_power_sleep_event_handler_t</ref><sp/>handler;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//!&lt;<sp/>Event<sp/>handler.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>en_enter:1;<sp/></highlight><highlight class="comment">//!&lt;<sp/>Enable<sp/>event<sp/>on<sp/>sleep<sp/>entering.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>en_exit<sp/>:1;<sp/></highlight><highlight class="comment">//!&lt;<sp/>Enable<sp/>event<sp/>on<sp/>sleep<sp/>exiting.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal">}<ref refid="structnrfx__power__sleepevt__config__t" kindref="compound">nrfx_power_sleepevt_config_t</ref>;</highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_POWER_HAS_USBREG<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="227"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="228"><highlight class="comment"><sp/>*<sp/>@brief<sp/>The<sp/>configuration<sp/>of<sp/>the<sp/>USB-related<sp/>power<sp/>events.</highlight></codeline>
<codeline lineno="229"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="230"><highlight class="comment"><sp/>*<sp/>Configuration<sp/>used<sp/>to<sp/>enable<sp/>and<sp/>configure<sp/>USB<sp/>power<sp/>event<sp/>handling.</highlight></codeline>
<codeline lineno="231"><highlight class="comment"><sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="232" refid="structnrfx__power__usbevt__config__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal">{</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__power_1ga69bf52289b405109af0446afc637b3dc" kindref="member">nrfx_power_usb_event_handler_t</ref><sp/>handler;<sp/></highlight><highlight class="comment">//!&lt;<sp/>Event<sp/>processing.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal">}<ref refid="structnrfx__power__usbevt__config__t" kindref="compound">nrfx_power_usbevt_config_t</ref>;</highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRF_POWER_HAS_USBREG<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="238"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="239"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>the<sp/>handler<sp/>of<sp/>the<sp/>power<sp/>failure<sp/>comparator.</highlight></codeline>
<codeline lineno="240"><highlight class="comment"><sp/>*<sp/>@return<sp/>Handler<sp/>of<sp/>the<sp/>power<sp/>failure<sp/>comparator.</highlight></codeline>
<codeline lineno="241"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"><ref refid="group__nrfx__power_1gacc06e3cd7cda7129d7f2b91b91612429" kindref="member">nrfx_power_pofwarn_event_handler_t</ref><sp/><ref refid="group__nrfx__power_1ga952633fb74ff48a15b316ef8740a3887" kindref="member">nrfx_power_pof_handler_get</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_POWER_HAS_USBREG<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="245"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="246"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>the<sp/>handler<sp/>of<sp/>the<sp/>USB<sp/>power.</highlight></codeline>
<codeline lineno="247"><highlight class="comment"><sp/>*<sp/>@return<sp/>Handler<sp/>of<sp/>the<sp/>USB<sp/>power.</highlight></codeline>
<codeline lineno="248"><highlight class="comment"><sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"><ref refid="group__nrfx__power_1ga69bf52289b405109af0446afc637b3dc" kindref="member">nrfx_power_usb_event_handler_t</ref><sp/><ref refid="group__nrfx__power_1ga5c9153a39a12433c4f3e88b6f85c66be" kindref="member">nrfx_power_usb_handler_get</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRF_POWER_HAS_USBREG<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="252"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="253"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>initializing<sp/>the<sp/>power<sp/>module<sp/>driver.</highlight></codeline>
<codeline lineno="254"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="255"><highlight class="comment"><sp/>*<sp/>Enabled<sp/>power<sp/>module<sp/>driver<sp/>processes<sp/>all<sp/>the<sp/>interrupts<sp/>from<sp/>the<sp/>power<sp/>system.</highlight></codeline>
<codeline lineno="256"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="257"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_config<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>with<sp/>the<sp/>initial<sp/>configuration.</highlight></codeline>
<codeline lineno="258"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="259"><highlight class="comment"><sp/>*<sp/>@retval<sp/>NRFX_SUCCESS<sp/><sp/><sp/><sp/><sp/><sp/><sp/>Successfully<sp/>initialized.</highlight></codeline>
<codeline lineno="260"><highlight class="comment"><sp/>*<sp/>@retval<sp/>NRFX_ERROR_ALREADY<sp/>Module<sp/>was<sp/>already<sp/>initialized.</highlight></codeline>
<codeline lineno="261"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"><ref refid="group__nrfx__error__codes_1ga2449720f8fa17b22243218068459a24b" kindref="member">nrfx_err_t</ref><sp/><ref refid="group__nrfx__power_1ga0a9e682db2de0159d0baab1123d2caa9" kindref="member">nrfx_power_init</ref>(<ref refid="structnrfx__power__config__t" kindref="compound">nrfx_power_config_t</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_config);</highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="264"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="265"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>unintializing<sp/>the<sp/>power<sp/>module<sp/>driver.</highlight></codeline>
<codeline lineno="266"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="267"><highlight class="comment"><sp/>*<sp/>Disables<sp/>all<sp/>the<sp/>interrupt<sp/>handling<sp/>in<sp/>the<sp/>module.</highlight></codeline>
<codeline lineno="268"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="269"><highlight class="comment"><sp/>*<sp/>@sa<sp/>nrfx_power_init</highlight></codeline>
<codeline lineno="270"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrfx__power_1gaaec95ffd3ac4b9922c4a8ffbb77b56da" kindref="member">nrfx_power_uninit</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="273"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="274"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>checking<sp/>if<sp/>the<sp/>power<sp/>module<sp/>driver<sp/>is<sp/>initialized.</highlight></codeline>
<codeline lineno="275"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="276"><highlight class="comment"><sp/>*<sp/>@retval<sp/>true<sp/><sp/>Driver<sp/>is<sp/>already<sp/>initialized.</highlight></codeline>
<codeline lineno="277"><highlight class="comment"><sp/>*<sp/>@retval<sp/>false<sp/>Driver<sp/>is<sp/>not<sp/>initialized.</highlight></codeline>
<codeline lineno="278"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrfx__power_1ga2154052a0e88a71e4da4b5882cfd7735" kindref="member">nrfx_power_init_check</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRFX_POWER_SUPPORTS_POFCON</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="282"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="283"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>initializing<sp/>the<sp/>power<sp/>failure<sp/>comparator.</highlight></codeline>
<codeline lineno="284"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="285"><highlight class="comment"><sp/>*<sp/>Configures<sp/>the<sp/>power<sp/>failure<sp/>comparator.<sp/>This<sp/>function<sp/>does<sp/>not<sp/>set<sp/>it<sp/>up<sp/>and<sp/>enable<sp/>it.</highlight></codeline>
<codeline lineno="286"><highlight class="comment"><sp/>*<sp/>These<sp/>steps<sp/>can<sp/>be<sp/>done<sp/>with<sp/>functions<sp/>@ref<sp/>nrfx_power_pof_enable<sp/>and<sp/>@ref<sp/>nrfx_power_pof_disable</highlight></codeline>
<codeline lineno="287"><highlight class="comment"><sp/>*<sp/>or<sp/>with<sp/>the<sp/>SoftDevice<sp/>API<sp/>(when<sp/>in<sp/>use).</highlight></codeline>
<codeline lineno="288"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="289"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_config<sp/>Configuration<sp/>with<sp/>values<sp/>and<sp/>event<sp/>handler.</highlight></codeline>
<codeline lineno="290"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>If<sp/>event<sp/>handler<sp/>is<sp/>set<sp/>to<sp/>NULL,<sp/>the<sp/>interrupt<sp/>will<sp/>be<sp/>disabled.</highlight></codeline>
<codeline lineno="291"><highlight class="comment"><sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrfx__power_1ga1e534bf1bef879d811e25d197b33e32d" kindref="member">nrfx_power_pof_init</ref>(<ref refid="structnrfx__power__pofwarn__config__t" kindref="compound">nrfx_power_pofwarn_config_t</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_config);</highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="294"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="295"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>enabling<sp/>the<sp/>power<sp/>failure<sp/>comparator.</highlight></codeline>
<codeline lineno="296"><highlight class="comment"><sp/>*<sp/>Sets<sp/>and<sp/>enables<sp/>the<sp/>interrupt<sp/>of<sp/>the<sp/>power<sp/>failure<sp/>comparator.<sp/>This<sp/>function<sp/>cannot<sp/>be<sp/>in<sp/>use</highlight></codeline>
<codeline lineno="297"><highlight class="comment"><sp/>*<sp/>when<sp/>SoftDevice<sp/>is<sp/>enabled.<sp/>If<sp/>the<sp/>event<sp/>handler<sp/>set<sp/>in<sp/>the<sp/>init<sp/>function<sp/>is<sp/>set<sp/>to<sp/>NULL,<sp/>the<sp/>interrupt</highlight></codeline>
<codeline lineno="298"><highlight class="comment"><sp/>*<sp/>will<sp/>be<sp/>disabled.</highlight></codeline>
<codeline lineno="299"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="300"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_config<sp/>Configuration<sp/>with<sp/>values<sp/>and<sp/>event<sp/>handler.</highlight></codeline>
<codeline lineno="301"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrfx__power_1ga8f7fa0add340035f5c873b77ae4aea3e" kindref="member">nrfx_power_pof_enable</ref>(<ref refid="structnrfx__power__pofwarn__config__t" kindref="compound">nrfx_power_pofwarn_config_t</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_config);</highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="304"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="305"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>disabling<sp/>the<sp/>power<sp/>failure<sp/>comparator.</highlight></codeline>
<codeline lineno="306"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="307"><highlight class="comment"><sp/>*<sp/>Disables<sp/>the<sp/>power<sp/>failure<sp/>comparator<sp/>interrupt.</highlight></codeline>
<codeline lineno="308"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrfx__power_1ga7673168386b8832d6ac633b163118844" kindref="member">nrfx_power_pof_disable</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="311"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="312"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>clearing<sp/>the<sp/>power<sp/>failure<sp/>comparator<sp/>settings.</highlight></codeline>
<codeline lineno="313"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="314"><highlight class="comment"><sp/>*<sp/>Clears<sp/>the<sp/>settings<sp/>of<sp/>the<sp/>power<sp/>failure<sp/>comparator.</highlight></codeline>
<codeline lineno="315"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrfx__power_1ga583aa2c1149d0775b51a020e5bc4f837" kindref="member">nrfx_power_pof_uninit</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRFX_POWER_SUPPORTS_POFCON</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_POWER_HAS_SLEEPEVT<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="320"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="321"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>initializing<sp/>the<sp/>processing<sp/>of<sp/>the<sp/>sleep<sp/>events.</highlight></codeline>
<codeline lineno="322"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="323"><highlight class="comment"><sp/>*<sp/>Configures<sp/>and<sp/>sets<sp/>up<sp/>the<sp/>sleep<sp/>event<sp/>processing.</highlight></codeline>
<codeline lineno="324"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="325"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_config<sp/>Configuration<sp/>with<sp/>values<sp/>and<sp/>event<sp/>handler.</highlight></codeline>
<codeline lineno="326"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="327"><highlight class="comment"><sp/>*<sp/>@sa<sp/>nrfx_power_sleepevt_uninit</highlight></codeline>
<codeline lineno="328"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="329"><highlight class="comment"><sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrfx__power_1ga19ebe294c60c77f74bfd2a7c3e82bf1e" kindref="member">nrfx_power_sleepevt_init</ref>(<ref refid="structnrfx__power__sleepevt__config__t" kindref="compound">nrfx_power_sleepevt_config_t</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_config);</highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="332"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="333"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>enabling<sp/>the<sp/>processing<sp/>of<sp/>the<sp/>sleep<sp/>events.</highlight></codeline>
<codeline lineno="334"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="335"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_config<sp/>Configuration<sp/>with<sp/>values<sp/>and<sp/>event<sp/>handler.</highlight></codeline>
<codeline lineno="336"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrfx__power_1ga17c1cd923bfdaa4fc6eec96b510dd60c" kindref="member">nrfx_power_sleepevt_enable</ref>(<ref refid="structnrfx__power__sleepevt__config__t" kindref="compound">nrfx_power_sleepevt_config_t</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_config);</highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="339"><highlight class="comment">/**<sp/>@brief<sp/>Function<sp/>for<sp/>disabling<sp/>the<sp/>processing<sp/>of<sp/>the<sp/>sleep<sp/>events.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrfx__power_1gab21e1f7dee9e84f18b1c59d734670e02" kindref="member">nrfx_power_sleepevt_disable</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="341"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="342"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="343"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>uninitializing<sp/>the<sp/>processing<sp/>of<sp/>the<sp/>sleep<sp/>events.</highlight></codeline>
<codeline lineno="344"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="345"><highlight class="comment"><sp/>*<sp/>@sa<sp/>nrfx_power_sleepevt_init</highlight></codeline>
<codeline lineno="346"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrfx__power_1gafe18a94d6a63545f3000b3a8da936e68" kindref="member">nrfx_power_sleepevt_uninit</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>NRF_POWER_HAS_SLEEPEVT<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(NRF_POWER_HAS_CONST_LATENCY<sp/>&amp;&amp;<sp/>NRF_POWER_HAS_LOW_POWER)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="351"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="352"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>requesting<sp/>Constant<sp/>Latency<sp/>sub-power<sp/>mode.</highlight></codeline>
<codeline lineno="353"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="354"><highlight class="comment"><sp/>*<sp/>@note<sp/>This<sp/>function<sp/>uses<sp/>a<sp/>reference<sp/>counter.<sp/>As<sp/>a<sp/>result,<sp/>if<sp/>it<sp/>is<sp/>called<sp/>more<sp/>than<sp/>once,</highlight></codeline>
<codeline lineno="355"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>function<sp/>@ref<sp/>nrfx_power_constlat_mode_free()<sp/>needs<sp/>to<sp/>be<sp/>called<sp/>the<sp/>same<sp/>number<sp/>of</highlight></codeline>
<codeline lineno="356"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>times<sp/>to<sp/>change<sp/>the<sp/>mode<sp/>to<sp/>Low<sp/>Power.</highlight></codeline>
<codeline lineno="357"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="358"><highlight class="comment"><sp/>*<sp/>@retval<sp/>NRFX_SUCCESS<sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>sub-power<sp/>mode<sp/>was<sp/>successfully<sp/>changed<sp/>to<sp/>Constant<sp/>Latency.</highlight></codeline>
<codeline lineno="359"><highlight class="comment"><sp/>*<sp/>@retval<sp/>NRFX_ERROR_ALREADY<sp/>Constant<sp/>Latency<sp/>mode<sp/>was<sp/>already<sp/>requested<sp/>and<sp/>it<sp/>is<sp/>the<sp/>current<sp/>sub-power<sp/>mode.</highlight></codeline>
<codeline lineno="360"><highlight class="comment"><sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal"><ref refid="group__nrfx__error__codes_1ga2449720f8fa17b22243218068459a24b" kindref="member">nrfx_err_t</ref><sp/><ref refid="group__nrfx__power_1ga5027051a6d0ab4d3282083f885769792" kindref="member">nrfx_power_constlat_mode_request</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="362"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="363"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="364"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>freeing<sp/>Constant<sp/>Latency<sp/>sub-power<sp/>mode.</highlight></codeline>
<codeline lineno="365"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="366"><highlight class="comment"><sp/>*<sp/>@note<sp/>This<sp/>function<sp/>uses<sp/>a<sp/>reference<sp/>counter.<sp/>As<sp/>a<sp/>result,<sp/>it<sp/>needs<sp/>to<sp/>be<sp/>called<sp/>the<sp/>same<sp/>number</highlight></codeline>
<codeline lineno="367"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>of<sp/>times<sp/>as<sp/>the<sp/>@ref<sp/>nrfx_power_constlat_mode_request()<sp/>function<sp/>to<sp/>change<sp/>the<sp/>mode<sp/>back</highlight></codeline>
<codeline lineno="368"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>to<sp/>Low<sp/>Power.</highlight></codeline>
<codeline lineno="369"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="370"><highlight class="comment"><sp/>*<sp/>@retval<sp/>NRFX_SUCCESS<sp/><sp/><sp/><sp/>The<sp/>sub-power<sp/>mode<sp/>was<sp/>successfully<sp/>changed<sp/>to<sp/>Low<sp/>Power.</highlight></codeline>
<codeline lineno="371"><highlight class="comment"><sp/>*<sp/>@retval<sp/>NRFX_ERROR_BUSY<sp/>The<sp/>sub-power<sp/>mode<sp/>was<sp/>not<sp/>changed<sp/>due<sp/>to<sp/>multiple<sp/>calls<sp/>to<sp/>@ref<sp/>nrfx_power_constlat_mode_request.</highlight></codeline>
<codeline lineno="372"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal"><ref refid="group__nrfx__error__codes_1ga2449720f8fa17b22243218068459a24b" kindref="member">nrfx_err_t</ref><sp/><ref refid="group__nrfx__power_1gaed65bb150865bc128192ece574ad71ce" kindref="member">nrfx_power_constlat_mode_free</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="374"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="375"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="376"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>the<sp/>current<sp/>sub-power<sp/>mode.</highlight></codeline>
<codeline lineno="377"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="378"><highlight class="comment"><sp/>*<sp/>@return<sp/>Current<sp/>sub-power<sp/>mode.</highlight></codeline>
<codeline lineno="379"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="380"><highlight class="normal"><ref refid="group__nrfx__power_1gadfb32284ef08fd29988dfcbb9346d685" kindref="member">nrfx_power_mode_t</ref><sp/><ref refid="group__nrfx__power_1ga539bbdbe63988f685670e3b368d7461e" kindref="member">nrfx_power_mode_get</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="381"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_POWER_HAS_USBREG<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="384"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="385"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>initializing<sp/>the<sp/>processing<sp/>of<sp/>USB<sp/>power<sp/>event.</highlight></codeline>
<codeline lineno="386"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="387"><highlight class="comment"><sp/>*<sp/>Configures<sp/>and<sp/>sets<sp/>up<sp/>the<sp/>USB<sp/>power<sp/>event<sp/>processing.</highlight></codeline>
<codeline lineno="388"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="389"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_config<sp/>Configuration<sp/>with<sp/>values<sp/>and<sp/>event<sp/>handler.</highlight></codeline>
<codeline lineno="390"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="391"><highlight class="comment"><sp/>*<sp/>@sa<sp/>nrfx_power_usbevt_uninit</highlight></codeline>
<codeline lineno="392"><highlight class="comment"><sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="393"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrfx__power_1ga7f8ca5e0d2df45b5a23da922579e7227" kindref="member">nrfx_power_usbevt_init</ref>(<ref refid="structnrfx__power__usbevt__config__t" kindref="compound">nrfx_power_usbevt_config_t</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_config);</highlight></codeline>
<codeline lineno="394"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="395"><highlight class="comment">/**<sp/>@brief<sp/>Function<sp/>for<sp/>enabling<sp/>the<sp/>processing<sp/>of<sp/>USB<sp/>power<sp/>event.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="396"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrfx__power_1ga493692ebc3299ad68b99ce30576e7f24" kindref="member">nrfx_power_usbevt_enable</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="397"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="398"><highlight class="comment">/**<sp/>@brief<sp/>Function<sp/>for<sp/>disabling<sp/>the<sp/>processing<sp/>of<sp/>USB<sp/>power<sp/>event.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrfx__power_1gacd73c1fe8d8173131871f53124952657" kindref="member">nrfx_power_usbevt_disable</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="400"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="401"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="402"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>uninitalizing<sp/>the<sp/>processing<sp/>of<sp/>USB<sp/>power<sp/>event.</highlight></codeline>
<codeline lineno="403"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="404"><highlight class="comment"><sp/>*<sp/>@sa<sp/>nrfx_power_usbevt_init</highlight></codeline>
<codeline lineno="405"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrfx__power_1ga2f7d74353199bb4416495d16c49d9d0b" kindref="member">nrfx_power_usbevt_uninit</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="407"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="408"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="409"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>the<sp/>status<sp/>of<sp/>USB<sp/>power.</highlight></codeline>
<codeline lineno="410"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="411"><highlight class="comment"><sp/>*<sp/>@return<sp/>Current<sp/>USB<sp/>power<sp/>status.</highlight></codeline>
<codeline lineno="412"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="normal">NRFX_STATIC_INLINE<sp/><ref refid="group__nrfx__power_1ga234637366f2b21ad80468fa0eea8e266" kindref="member">nrfx_power_usb_state_t</ref><sp/><ref refid="group__nrfx__power_1gaead4605524f3db0915f607d2ee0a949a" kindref="member">nrfx_power_usbstatus_get</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="414"><highlight class="normal"></highlight></codeline>
<codeline lineno="415"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRF_POWER_HAS_USBREG<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="416"><highlight class="normal"></highlight></codeline>
<codeline lineno="417"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>NRFX_DECLARE_ONLY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_POWER_HAS_USBREG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="419"><highlight class="normal">NRFX_STATIC_INLINE<sp/><ref refid="group__nrfx__power_1ga234637366f2b21ad80468fa0eea8e266" kindref="member">nrfx_power_usb_state_t</ref><sp/><ref refid="group__nrfx__power_1gaead4605524f3db0915f607d2ee0a949a" kindref="member">nrfx_power_usbstatus_get</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="420"><highlight class="normal">{</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>status<sp/>=<sp/><ref refid="group__nrf__power__hal_1ga7e5fad60a4dce6da9602068fd5fd9c28" kindref="member">nrf_power_usbregstatus_get</ref>(NRF_POWER);</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(0<sp/>==<sp/>(status<sp/>&amp;<sp/><ref refid="group__nrf__power__hal_1gga85664e3b3bd3a99f8c8ef1fdbb1e2496afd9eddec83b650949f6e68e9419cf244" kindref="member">NRF_POWER_USBREGSTATUS_VBUSDETECT_MASK</ref>))</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__nrfx__power_1gga234637366f2b21ad80468fa0eea8e266a33459a0632fef535e23edb7750a3cefe" kindref="member">NRFX_POWER_USB_STATE_DISCONNECTED</ref>;</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(0<sp/>==<sp/>(status<sp/>&amp;<sp/><ref refid="group__nrf__power__hal_1gga85664e3b3bd3a99f8c8ef1fdbb1e2496a876fbf69774a0135f3b9a79897f7b7fd" kindref="member">NRF_POWER_USBREGSTATUS_OUTPUTRDY_MASK</ref>))</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__nrfx__power_1gga234637366f2b21ad80468fa0eea8e266a7944a6357aa64856a14cffba68ccd7c9" kindref="member">NRFX_POWER_USB_STATE_CONNECTED</ref>;</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__nrfx__power_1gga234637366f2b21ad80468fa0eea8e266a8cd03c27f125aafede399cfb0434142c" kindref="member">NRFX_POWER_USB_STATE_READY</ref>;</highlight></codeline>
<codeline lineno="431"><highlight class="normal">}</highlight></codeline>
<codeline lineno="432"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRF_POWER_HAS_USBREG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="433"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRFX_DECLARE_ONLY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="434"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="435"><highlight class="comment">/**<sp/>@}<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="436"><highlight class="normal"></highlight></codeline>
<codeline lineno="437"><highlight class="normal"></highlight></codeline>
<codeline lineno="438"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>nrfx_power_irq_handler(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="439"><highlight class="normal"></highlight></codeline>
<codeline lineno="440"><highlight class="normal"></highlight></codeline>
<codeline lineno="441"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="442"><highlight class="normal">}</highlight></codeline>
<codeline lineno="443"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="444"><highlight class="normal"></highlight></codeline>
<codeline lineno="445"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>NRFX_POWER_H__<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="drivers/include/nrfx_power.h"/>
  </compounddef>
</doxygen>
