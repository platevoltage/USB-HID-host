<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="nrf__spim_8h" kind="file" language="C++">
    <compoundname>nrf_spim.h</compoundname>
    <includes local="no">nrfx.h</includes>
    <includedby refid="nrfy__spim_8h" local="no">haly/nrfy_spim.h</includedby>
    <incdepgraph>
      <node id="1">
        <label>hal/nrf_spim.h</label>
        <link refid="nrf__spim_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>nrfx.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="nrf__spim_8h_1a6b7dfe38b857863427ca3ac26dfffefe" prot="public" static="no">
        <name>_NRF_SPIM_PRESCALER_MAX_GET</name>
        <param><defname>periph_name</defname></param>
        <param><defname>prefix</defname></param>
        <param><defname>idx</defname></param>
        <param><defname>p_reg</defname></param>
        <initializer>    (p_reg == <ref refid="group__nrfx__utils_1ga5ea61d0994f6fb1ab5ed59d44f6a7ce9" kindref="member">NRFX_CONCAT</ref>(NRF_, periph_name, prefix, idx)) ?                   \
        (<ref refid="group__nrfx__utils_1ga5ea61d0994f6fb1ab5ed59d44f6a7ce9" kindref="member">NRFX_CONCAT</ref>(periph_name, prefix, idx, _PRESCALER_DIVISOR_RANGE_MAX)) :</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_spim.h" line="55" column="9" bodyfile="hal/nrf_spim.h" bodystart="55" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="nrf__spim_8h_1a92b31ad51dbb6aa1525e90bdba077500" prot="public" static="no">
        <name>_NRF_SPIM_PRESCALER_MIN_GET</name>
        <param><defname>periph_name</defname></param>
        <param><defname>prefix</defname></param>
        <param><defname>idx</defname></param>
        <param><defname>p_reg</defname></param>
        <initializer>    (p_reg == <ref refid="group__nrfx__utils_1ga5ea61d0994f6fb1ab5ed59d44f6a7ce9" kindref="member">NRFX_CONCAT</ref>(NRF_, periph_name, prefix, idx)) ?                   \
        (<ref refid="group__nrfx__utils_1ga5ea61d0994f6fb1ab5ed59d44f6a7ce9" kindref="member">NRFX_CONCAT</ref>(periph_name, prefix, idx, _PRESCALER_DIVISOR_RANGE_MIN)) :</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_spim.h" line="63" column="9" bodyfile="hal/nrf_spim.h" bodystart="63" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__spim__hal_1gaf4e8372d6c5a7a48e5dcb1e4181f271e" prot="public" static="no">
        <name>NRF_SPIM_INST_GET</name>
        <param><defname>idx</defname></param>
        <initializer><ref refid="group__nrfx__utils_1ga5ea61d0994f6fb1ab5ed59d44f6a7ce9" kindref="member">NRFX_CONCAT</ref>(NRF_, SPIM, idx)</initializer>
        <briefdescription>
<para>Macro getting pointer to the structure of registers of the SPIM peripheral. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">idx</parametername>
</parameternamelist>
<parameterdescription>
<para>SPIM instance index.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to the structure of registers of the SPIM peripheral. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_spim.h" line="81" column="9" bodyfile="hal/nrf_spim.h" bodystart="81" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__spim__hal_1gadd69c3afe654abbb5f230287df2d309b" prot="public" static="no">
        <name>NRF_SPIM_HAS_16_MHZ_FREQ</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Symbol indicating whether 16 MHz clock frequency is available. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_spim.h" line="85" column="9" bodyfile="hal/nrf_spim.h" bodystart="85" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__spim__hal_1ga50a27799325f678f260e224e54fed0fa" prot="public" static="no">
        <name>NRF_SPIM_HAS_32_MHZ_FREQ</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Symbol indicating whether 32 MHz clock frequency is available. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_spim.h" line="92" column="9" bodyfile="hal/nrf_spim.h" bodystart="92" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__spim__hal_1ga8a6ebb40d934749cc238e5e60cb2830d" prot="public" static="no">
        <name>NRF_SPIM_HAS_FREQUENCY</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Symbol indicating whether frequency is used. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_spim.h" line="99" column="9" bodyfile="hal/nrf_spim.h" bodystart="99" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__spim__hal_1ga651e480b9fd1175e371dd34fd72dbba8" prot="public" static="no">
        <name>NRF_SPIM_HAS_PRESCALER</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Symbol indicating whether prescaler is used. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_spim.h" line="106" column="9" bodyfile="hal/nrf_spim.h" bodystart="106" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__spim__hal_1ga88c383efc01f44147ed35b7af4864191" prot="public" static="no">
        <name>NRF_SPIM_HAS_ARRAY_LIST</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Symbol indicating whether EasyDMA array list feature is present. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_spim.h" line="113" column="9" bodyfile="hal/nrf_spim.h" bodystart="113" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__spim__hal_1ga62efeee04ff2489e15f23c4c7648e4f8" prot="public" static="no">
        <name>NRF_SPIM_HAS_DMA_REG</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Symbol indicating whether dedicated DMA register is present. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_spim.h" line="120" column="9" bodyfile="hal/nrf_spim.h" bodystart="120" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__spim__hal_1ga6c8ed7aa989de2a324dc33e9619ff04d" prot="public" static="no">
        <name>NRF_SPIM_HAS_DMA_TASKS_EVENTS</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Symbol indicating whether SPIM DMA tasks and events are present. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_spim.h" line="129" column="9" bodyfile="hal/nrf_spim.h" bodystart="129" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__spim__hal_1gab5a624869149f7b68b6fe32d5e444a2b" prot="public" static="no">
        <name>NRF_SPIM_HAS_HW_CSN</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Macro for checking if the hardware chip select function is available. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_spim.h" line="136" column="9" bodyfile="hal/nrf_spim.h" bodystart="136" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__spim__hal_1ga049b3c81d0630a45eedcd285eab5990c" prot="public" static="no">
        <name>NRF_SPIM_HAS_DCX</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Macro for checking if the DCX pin control is available. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_spim.h" line="145" column="9" bodyfile="hal/nrf_spim.h" bodystart="145" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__spim__hal_1ga85bcdb0401e83ebeff629c4c2aa4000c" prot="public" static="no">
        <name>NRF_SPIM_HAS_RXDELAY</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Macro for checking if the RXDELAY function is available. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_spim.h" line="152" column="9" bodyfile="hal/nrf_spim.h" bodystart="152" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__spim__hal_1ga11298007c9b6ca4509d27fb9061e3180" prot="public" static="no">
        <name>NRF_SPIM_HAS_STALLSTAT</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Macro for checking if the STALLSTAT feature is available. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_spim.h" line="159" column="9" bodyfile="hal/nrf_spim.h" bodystart="159" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__spim__hal_1gac8a0d0d0e287b7ca762dbe459a4f62a7" prot="public" static="no">
        <name>NRF_SPIM_HAS_EXTENDED</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Symbol indicating whether any of the SPIM extended features is available. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_spim.h" line="166" column="9" bodyfile="hal/nrf_spim.h" bodystart="166" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__spim__hal_1ga71e07fdf41d8a5b31573f20807ede06e" prot="public" static="no">
        <name>NRF_SPIM_DCX_CNT_ALL_CMD</name>
        <initializer>0xF</initializer>
        <briefdescription>
<para>This value specified in the DCX line configuration causes this line to be set low during whole transmission (all transmitted bytes are marked as command bytes). Any lower value causes the DCX line to be switched from low to high after this number of bytes is transmitted (all remaining bytes are marked as data bytes). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_spim.h" line="179" column="9" bodyfile="hal/nrf_spim.h" bodystart="179" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__spim__hal_1ga818eb2c4164cd8f9422c3a8a0a626e2a" prot="public" static="no">
        <name>NRF_SPIM_PIN_NOT_CONNECTED</name>
        <initializer>0xFFFFFFFF</initializer>
        <briefdescription>
<para>This value can be used as a parameter for the <ref refid="group__nrf__spim__hal_1ga7a84520c7baba19ea26a494bd4c4ea16" kindref="member">nrf_spim_pins_set</ref> function to specify that a given SPI signal (SCK, MOSI, or MISO) shall not be connected to a physical pin. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_spim.h" line="187" column="9" bodyfile="hal/nrf_spim.h" bodystart="187" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__spim__hal_1gaa9f3c255b1f00e6734f3dbfc6983b710" prot="public" static="no">
        <name>NRF_SPIM_DMA_RX_PATTERN_MAX_COUNT</name>
        <initializer>SPIM_DMA_RX_MATCH_CANDIDATE_MaxCount</initializer>
        <briefdescription>
<para>Max number of RX patterns. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_spim.h" line="191" column="9" bodyfile="hal/nrf_spim.h" bodystart="191" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__spim__hal_1gafc87efad6fcd4de8307cf0393146a077" prot="public" static="no">
        <name>NRF_SPIM_DCX_DEFAULT</name>
        <initializer>SPIM_PSEL_DCX_ResetValue</initializer>
        <briefdescription>
<para>Symbol specifying default value of DCX pin setting. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_spim.h" line="197" column="9" bodyfile="hal/nrf_spim.h" bodystart="197" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__spim__hal_1ga533cf0925c869d67298cfbade6d1fd90" prot="public" static="no">
        <name>NRF_SPIM_CSN_DEFAULT</name>
        <initializer>SPIM_PSEL_CSN_ResetValue</initializer>
        <briefdescription>
<para>Symbol specifying default value of CSN pin setting. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_spim.h" line="206" column="9" bodyfile="hal/nrf_spim.h" bodystart="206" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__spim__hal_1ga49153da0c7f2220819862eb8638e9872" prot="public" static="no">
        <name>NRF_SPIM_CSNDUR_DEFAULT</name>
        <initializer>SPIM_CSNDUR_ResetValue</initializer>
        <briefdescription>
<para>Symbol specifying default value of CSN duration setting. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_spim.h" line="213" column="9" bodyfile="hal/nrf_spim.h" bodystart="213" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__spim__hal_1gad0f872cd3ac34665d495839e56a2f42c" prot="public" static="no">
        <name>NRF_SPIM_CSNPOL_DEFAULT</name>
        <initializer>SPIM_CSNPOL_ResetValue</initializer>
        <briefdescription>
<para>Symbol specifying default value of CSN polarity setting. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_spim.h" line="220" column="9" bodyfile="hal/nrf_spim.h" bodystart="220" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__spim__hal_1ga474c64f11f2b61d6eb555b0783d14826" prot="public" static="no">
        <name>NRF_SPIM_RXDELAY_DEFAULT</name>
        <initializer>SPIM_IFTIMING_RXDELAY_ResetValue</initializer>
        <briefdescription>
<para>Symbol specifying default value of RX delay setting. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_spim.h" line="229" column="9" bodyfile="hal/nrf_spim.h" bodystart="229" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__spim__hal_1ga9d40c7ce9ae8d1e09d291c53f1d47d9b" prot="public" static="no">
        <name>NRF_SPIM_MIN_FREQUENCY</name>
        <initializer>(<ref refid="group__nrfx__common_1ga3528e3108745eba098ef97d545b454cc" kindref="member">NRFX_KHZ_TO_HZ</ref>(125UL))</initializer>
        <briefdescription>
<para>Minimal SPIM frequency in Hz. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_spim.h" line="236" column="9" bodyfile="hal/nrf_spim.h" bodystart="236" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__spim__hal_1ga7e3b31e0aa1f14c4f825a7d15b196832" prot="public" static="no">
        <name>NRF_SPIM_BASE_FREQUENCY_320MHZ</name>
        <initializer>(<ref refid="group__nrfx__common_1ga30e3c68cc0831c3bd64574a0a64439cc" kindref="member">NRFX_MHZ_TO_HZ</ref>(320UL))</initializer>
        <briefdescription>
<para>Base frequency value 320 MHz for SPIM. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_spim.h" line="239" column="9" bodyfile="hal/nrf_spim.h" bodystart="239" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__spim__hal_1ga473acc3148a9b0d08909fc3229a6883d" prot="public" static="no">
        <name>NRF_SPIM_BASE_FREQUENCY_192MHZ</name>
        <initializer>(<ref refid="group__nrfx__common_1ga30e3c68cc0831c3bd64574a0a64439cc" kindref="member">NRFX_MHZ_TO_HZ</ref>(192UL))</initializer>
        <briefdescription>
<para>Base frequency value 192 MHz for SPIM. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_spim.h" line="242" column="9" bodyfile="hal/nrf_spim.h" bodystart="242" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__spim__hal_1ga6537c9d5a70d18da839b1425fc743bfb" prot="public" static="no">
        <name>NRF_SPIM_BASE_FREQUENCY_128MHZ</name>
        <initializer>(<ref refid="group__nrfx__common_1ga30e3c68cc0831c3bd64574a0a64439cc" kindref="member">NRFX_MHZ_TO_HZ</ref>(128UL))</initializer>
        <briefdescription>
<para>Base frequency value 128 MHz for SPIM. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_spim.h" line="245" column="9" bodyfile="hal/nrf_spim.h" bodystart="245" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__spim__hal_1ga9419731abc37a0be81f79d8e288c3458" prot="public" static="no">
        <name>NRF_SPIM_BASE_FREQUENCY_64MHZ</name>
        <initializer>(<ref refid="group__nrfx__common_1ga30e3c68cc0831c3bd64574a0a64439cc" kindref="member">NRFX_MHZ_TO_HZ</ref>(64UL))</initializer>
        <briefdescription>
<para>Base frequency value 64 MHz for SPIM. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_spim.h" line="248" column="9" bodyfile="hal/nrf_spim.h" bodystart="248" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__spim__hal_1ga23b0a8b0b5ce2acfd3b1011a9c60af4f" prot="public" static="no">
        <name>NRF_SPIM_BASE_FREQUENCY_32MHZ</name>
        <initializer>(<ref refid="group__nrfx__common_1ga30e3c68cc0831c3bd64574a0a64439cc" kindref="member">NRFX_MHZ_TO_HZ</ref>(32UL))</initializer>
        <briefdescription>
<para>Base frequency value 32 MHz for SPIM. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_spim.h" line="251" column="9" bodyfile="hal/nrf_spim.h" bodystart="251" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__spim__hal_1gac3688a22f06a5ea5a3129041296edc9c" prot="public" static="no">
        <name>NRF_SPIM_BASE_FREQUENCY_16MHZ</name>
        <initializer>(<ref refid="group__nrfx__common_1ga30e3c68cc0831c3bd64574a0a64439cc" kindref="member">NRFX_MHZ_TO_HZ</ref>(16UL))</initializer>
        <briefdescription>
<para>Base frequency value 16 MHz for SPIM. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_spim.h" line="254" column="9" bodyfile="hal/nrf_spim.h" bodystart="254" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__spim__hal_1gae0d1ac3d6264580f59e9a68ccb42effd" prot="public" static="no">
        <name>NRF_SPIM_IS_320MHZ_SPIM</name>
        <param><defname>p_reg</defname></param>
        <initializer>    (<ref refid="group__nrfx__utils_1ga3759226de0d998545425ded334168058" kindref="member">NRFX_COND_CODE_1</ref>(<ref refid="group__nrfx__common_1ga9cc7f9da377228c1f0b191bd660577af" kindref="member">NRFX_INSTANCE_PRESENT</ref>(SPIM120), (p_reg == NRF_SPIM120), (false)) || \
     <ref refid="group__nrfx__utils_1ga3759226de0d998545425ded334168058" kindref="member">NRFX_COND_CODE_1</ref>(<ref refid="group__nrfx__common_1ga9cc7f9da377228c1f0b191bd660577af" kindref="member">NRFX_INSTANCE_PRESENT</ref>(SPIM121), (p_reg == NRF_SPIM121), (false)))</initializer>
        <briefdescription>
<para>Macro for checking whether the base frequency for the specified SPIM instance is 320 MHz. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_spim.h" line="258" column="9" bodyfile="hal/nrf_spim.h" bodystart="258" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__spim__hal_1gac4ded32fcdd2f8338e334fc6017ab226" prot="public" static="no">
        <name>NRF_SPIM_IS_192MHZ_SPIM</name>
        <param><defname>p_reg</defname></param>
        <initializer>false</initializer>
        <briefdescription>
<para>Macro for checking whether the base frequency for the specified SPIM instance is 192 MHz. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_spim.h" line="265" column="9" bodyfile="hal/nrf_spim.h" bodystart="265" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__spim__hal_1ga609ee7781d77d54652da2c09e195632f" prot="public" static="no">
        <name>NRF_SPIM_IS_128MHZ_SPIM</name>
        <param><defname>p_reg</defname></param>
        <initializer>    (<ref refid="group__nrfx__utils_1ga3759226de0d998545425ded334168058" kindref="member">NRFX_COND_CODE_1</ref>(<ref refid="group__nrfx__utils_1ga238278032464c932dc46946bedd44473" kindref="member">NRFX_IS_ENABLED</ref>(NRF_CPU_FREQ_IS_128MHZ),                             \
        (<ref refid="group__nrfx__utils_1ga3759226de0d998545425ded334168058" kindref="member">NRFX_COND_CODE_1</ref>(<ref refid="group__nrfx__common_1ga9cc7f9da377228c1f0b191bd660577af" kindref="member">NRFX_INSTANCE_PRESENT</ref>(SPIM00), (p_reg == NRF_SPIM00), (false))), \
        (false)))</initializer>
        <briefdescription>
<para>Macro for checking whether the base frequency for the specified SPIM instance is 128 MHz. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_spim.h" line="270" column="9" bodyfile="hal/nrf_spim.h" bodystart="270" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__spim__hal_1ga4ed73425698ce76efef422a2530b1874" prot="public" static="no">
        <name>NRF_SPIM_IS_64MHZ_SPIM</name>
        <param><defname>p_reg</defname></param>
        <initializer>    (<ref refid="group__nrfx__utils_1ga3759226de0d998545425ded334168058" kindref="member">NRFX_COND_CODE_1</ref>(<ref refid="group__nrfx__utils_1ga238278032464c932dc46946bedd44473" kindref="member">NRFX_IS_ENABLED</ref>(NRF_CPU_FREQ_IS_64MHZ),                              \
        (<ref refid="group__nrfx__utils_1ga3759226de0d998545425ded334168058" kindref="member">NRFX_COND_CODE_1</ref>(<ref refid="group__nrfx__common_1ga9cc7f9da377228c1f0b191bd660577af" kindref="member">NRFX_INSTANCE_PRESENT</ref>(SPIM00), (p_reg == NRF_SPIM00), (false))), \
        (false)))</initializer>
        <briefdescription>
<para>Macro for checking whether the base frequency for the specified SPIM instance is 64 MHz. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_spim.h" line="278" column="9" bodyfile="hal/nrf_spim.h" bodystart="278" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__spim__hal_1ga34497fc51ca708ad7dd83db96f6125a9" prot="public" static="no">
        <name>NRF_SPIM_IS_32MHZ_SPIM</name>
        <param><defname>p_reg</defname></param>
        <initializer>false</initializer>
        <briefdescription>
<para>Macro for checking whether the base frequency for the specified SPIM instance is 32 MHz. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_spim.h" line="286" column="9" bodyfile="hal/nrf_spim.h" bodystart="286" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__spim__hal_1ga12099b84c235e36086a62c120246d2f9" prot="public" static="no">
        <name>NRF_SPIM_BASE_FREQUENCY_GET</name>
        <param><defname>p_reg</defname></param>
        <initializer>    ((<ref refid="group__nrf__spim__hal_1gae0d1ac3d6264580f59e9a68ccb42effd" kindref="member">NRF_SPIM_IS_320MHZ_SPIM</ref>(p_reg)) ? (<ref refid="group__nrf__spim__hal_1ga7e3b31e0aa1f14c4f825a7d15b196832" kindref="member">NRF_SPIM_BASE_FREQUENCY_320MHZ</ref>) : \
    ((<ref refid="group__nrf__spim__hal_1gac4ded32fcdd2f8338e334fc6017ab226" kindref="member">NRF_SPIM_IS_192MHZ_SPIM</ref>(p_reg)) ? (<ref refid="group__nrf__spim__hal_1ga473acc3148a9b0d08909fc3229a6883d" kindref="member">NRF_SPIM_BASE_FREQUENCY_192MHZ</ref>) : \
    ((<ref refid="group__nrf__spim__hal_1ga609ee7781d77d54652da2c09e195632f" kindref="member">NRF_SPIM_IS_128MHZ_SPIM</ref>(p_reg)) ? (<ref refid="group__nrf__spim__hal_1ga6537c9d5a70d18da839b1425fc743bfb" kindref="member">NRF_SPIM_BASE_FREQUENCY_128MHZ</ref>) : \
    ((<ref refid="group__nrf__spim__hal_1ga4ed73425698ce76efef422a2530b1874" kindref="member">NRF_SPIM_IS_64MHZ_SPIM</ref>(p_reg))  ? (<ref refid="group__nrf__spim__hal_1ga9419731abc37a0be81f79d8e288c3458" kindref="member">NRF_SPIM_BASE_FREQUENCY_64MHZ</ref>) :  \
    ((<ref refid="group__nrf__spim__hal_1ga34497fc51ca708ad7dd83db96f6125a9" kindref="member">NRF_SPIM_IS_32MHZ_SPIM</ref>(p_reg))  ? (<ref refid="group__nrf__spim__hal_1ga23b0a8b0b5ce2acfd3b1011a9c60af4f" kindref="member">NRF_SPIM_BASE_FREQUENCY_32MHZ</ref>) :  \
    (<ref refid="group__nrf__spim__hal_1gac3688a22f06a5ea5a3129041296edc9c" kindref="member">NRF_SPIM_BASE_FREQUENCY_16MHZ</ref>))))))</initializer>
        <briefdescription>
<para>Macro for getting base frequency value in Hz for the specified SPIM instance. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_spim.h" line="290" column="9" bodyfile="hal/nrf_spim.h" bodystart="290" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__spim__hal_1gaafb34961cb61b6fb92c7a1ccc6133684" prot="public" static="no">
        <name>NRF_SPIM_PRESCALER_MAX_GET</name>
        <param><defname>p_reg</defname></param>
        <initializer>    (<ref refid="group__nrfx__common_1ga67de60e8d50b057ffcc75c9479fd0d1d" kindref="member">NRFX_FOREACH_ENABLED</ref>(SPIM, _NRF_SPIM_PRESCALER_MAX_GET, (), (), p_reg) \
     SPIM_PRESCALER_DIVISOR_Max)</initializer>
        <briefdescription>
<para>Macro for getting the maximum value of PRESCALER register. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_spim.h" line="304" column="9" bodyfile="hal/nrf_spim.h" bodystart="304" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__spim__hal_1gab1095ea70725e12cf869d8e04d5f75dd" prot="public" static="no">
        <name>NRF_SPIM_PRESCALER_MIN_GET</name>
        <param><defname>p_reg</defname></param>
        <initializer>    (<ref refid="group__nrfx__common_1ga67de60e8d50b057ffcc75c9479fd0d1d" kindref="member">NRFX_FOREACH_ENABLED</ref>(SPIM, _NRF_SPIM_PRESCALER_MIN_GET, (), (), p_reg) \
     SPIM_PRESCALER_DIVISOR_Min)</initializer>
        <briefdescription>
<para>Macro for getting the minimum value of PRESCALER register. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_spim.h" line="313" column="9" bodyfile="hal/nrf_spim.h" bodystart="313" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__spim__hal_1ga1cb57648ccc0c91d78e76e6b3314f738" prot="public" static="no">
        <name>NRF_SPIM_PRESCALER_CALCULATE</name>
        <param><defname>p_reg</defname></param>
        <param><defname>frequency</defname></param>
        <initializer>        ((uint32_t)(<ref refid="group__nrf__spim__hal_1ga12099b84c235e36086a62c120246d2f9" kindref="member">NRF_SPIM_BASE_FREQUENCY_GET</ref>(p_reg)) / (uint32_t)(frequency))</initializer>
        <briefdescription>
<para>Macro for computing prescaler value for a given SPIM instance and desired frequency. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>Not every combination of base and desired frequency is supported. The <ref refid="group__nrf__spim__hal_1gaec072f07fdb0e485dcafdbbf6805dfe8" kindref="member">NRF_SPIM_FREQUENCY_STATIC_CHECK</ref> macro can be used to check if the desired frequency is supported.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">frequency</parametername>
</parameternamelist>
<parameterdescription>
<para>Desired frequency value in Hz. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_spim.h" line="326" column="9" bodyfile="hal/nrf_spim.h" bodystart="326" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__spim__hal_1gaec072f07fdb0e485dcafdbbf6805dfe8" prot="public" static="no">
        <name>NRF_SPIM_FREQUENCY_STATIC_CHECK</name>
        <param><defname>p_reg</defname></param>
        <param><defname>frequency</defname></param>
        <initializer>    <ref refid="group__nrfx__glue_1gab3edd9fe23f460c77b83defb81fc4983" kindref="member">NRFX_STATIC_ASSERT</ref>(                                                                                      \
    <ref refid="group__nrfx__utils_1ga3759226de0d998545425ded334168058" kindref="member">NRFX_COND_CODE_1</ref>(<ref refid="group__nrf__spim__hal_1ga651e480b9fd1175e371dd34fd72dbba8" kindref="member">NRF_SPIM_HAS_PRESCALER</ref>,                                                                 \
        ((<ref refid="group__nrf__spim__hal_1ga12099b84c235e36086a62c120246d2f9" kindref="member">NRF_SPIM_BASE_FREQUENCY_GET</ref>(p_reg) % (uint32_t)frequency == 0) &amp;&amp;                                  \
        (<ref refid="group__nrfx__common_1ga8442c06f3943789856920c4bbec6b586" kindref="member">NRFX_IS_EVEN</ref>(<ref refid="group__nrf__spim__hal_1ga1cb57648ccc0c91d78e76e6b3314f738" kindref="member">NRF_SPIM_PRESCALER_CALCULATE</ref>(p_reg, (uint32_t)frequency))) &amp;&amp;                          \
        (<ref refid="group__nrf__spim__hal_1ga1cb57648ccc0c91d78e76e6b3314f738" kindref="member">NRF_SPIM_PRESCALER_CALCULATE</ref>(p_reg, (uint32_t)frequency) &gt;= (<ref refid="group__nrf__spim__hal_1gab1095ea70725e12cf869d8e04d5f75dd" kindref="member">NRF_SPIM_PRESCALER_MIN_GET</ref>(p_reg))) &amp;&amp; \
        (<ref refid="group__nrf__spim__hal_1ga1cb57648ccc0c91d78e76e6b3314f738" kindref="member">NRF_SPIM_PRESCALER_CALCULATE</ref>(p_reg, (uint32_t)frequency) &lt;= (<ref refid="group__nrf__spim__hal_1gaafb34961cb61b6fb92c7a1ccc6133684" kindref="member">NRF_SPIM_PRESCALER_MAX_GET</ref>(p_reg))))   \
        ,                                                                                                    \
        (((uint32_t)frequency == (uint32_t)<ref refid="group__nrfx__common_1ga3528e3108745eba098ef97d545b454cc" kindref="member">NRFX_KHZ_TO_HZ</ref>(125)) ||                                           \
         ((uint32_t)frequency == (uint32_t)<ref refid="group__nrfx__common_1ga3528e3108745eba098ef97d545b454cc" kindref="member">NRFX_KHZ_TO_HZ</ref>(250)) ||                                           \
         ((uint32_t)frequency == (uint32_t)<ref refid="group__nrfx__common_1ga3528e3108745eba098ef97d545b454cc" kindref="member">NRFX_KHZ_TO_HZ</ref>(500)) ||                                           \
         ((uint32_t)frequency == (uint32_t)<ref refid="group__nrfx__common_1ga30e3c68cc0831c3bd64574a0a64439cc" kindref="member">NRFX_MHZ_TO_HZ</ref>(1))   ||                                           \
         ((uint32_t)frequency == (uint32_t)<ref refid="group__nrfx__common_1ga30e3c68cc0831c3bd64574a0a64439cc" kindref="member">NRFX_MHZ_TO_HZ</ref>(2))   ||                                           \
         ((uint32_t)frequency == (uint32_t)<ref refid="group__nrfx__common_1ga30e3c68cc0831c3bd64574a0a64439cc" kindref="member">NRFX_MHZ_TO_HZ</ref>(4))   ||                                           \
         ((uint32_t)frequency == (uint32_t)<ref refid="group__nrfx__common_1ga30e3c68cc0831c3bd64574a0a64439cc" kindref="member">NRFX_MHZ_TO_HZ</ref>(8))   ||                                           \
         (((uint32_t)frequency == (uint32_t)<ref refid="group__nrfx__common_1ga30e3c68cc0831c3bd64574a0a64439cc" kindref="member">NRFX_MHZ_TO_HZ</ref>(16)) &amp;&amp; (<ref refid="group__nrf__spim__hal_1gadd69c3afe654abbb5f230287df2d309b" kindref="member">NRF_SPIM_HAS_16_MHZ_FREQ</ref>)) ||            \
         (((uint32_t)frequency == (uint32_t)<ref refid="group__nrfx__common_1ga30e3c68cc0831c3bd64574a0a64439cc" kindref="member">NRFX_MHZ_TO_HZ</ref>(32)) &amp;&amp; (<ref refid="group__nrf__spim__hal_1ga50a27799325f678f260e224e54fed0fa" kindref="member">NRF_SPIM_HAS_32_MHZ_FREQ</ref>)))))</initializer>
        <briefdescription>
<para>Macro for checking whether specified frequency can be achieved for a given SPIM instance. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This macro uses a compile-time assertion.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">frequency</parametername>
</parameternamelist>
<parameterdescription>
<para>Desired frequency value in Hz. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_spim.h" line="338" column="9" bodyfile="hal/nrf_spim.h" bodystart="338" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="group__nrf__spim__hal_1ga2982879a943ea49b37cebd5abbe7fe84" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_spim_task_t</name>
        <enumvalue id="group__nrf__spim__hal_1gga2982879a943ea49b37cebd5abbe7fe84a5188b4263186c81d7f8ffbb44fc21d8e" prot="public">
          <name>NRF_SPIM_TASK_START</name>
          <initializer>= offsetof(NRF_SPIM_Type, TASKS_START)</initializer>
          <briefdescription>
<para>Start SPI transaction. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__spim__hal_1gga2982879a943ea49b37cebd5abbe7fe84a305c8391fb7ef9cf6f420ecfb6d03fcc" prot="public">
          <name>NRF_SPIM_TASK_STOP</name>
          <initializer>= offsetof(NRF_SPIM_Type, TASKS_STOP)</initializer>
          <briefdescription>
<para>Stop SPI transaction. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__spim__hal_1gga2982879a943ea49b37cebd5abbe7fe84a98235d4f5ba14053bc167f7f51ed7a8a" prot="public">
          <name>NRF_SPIM_TASK_SUSPEND</name>
          <initializer>= offsetof(NRF_SPIM_Type, TASKS_SUSPEND)</initializer>
          <briefdescription>
<para>Suspend SPI transaction. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__spim__hal_1gga2982879a943ea49b37cebd5abbe7fe84a01746ab12b281296c36826337d665ad1" prot="public">
          <name>NRF_SPIM_TASK_RESUME</name>
          <initializer>= offsetof(NRF_SPIM_Type, TASKS_RESUME)</initializer>
          <briefdescription>
<para>Resume SPI transaction. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__spim__hal_1gga2982879a943ea49b37cebd5abbe7fe84a2703f383e69e2ea2397dd592614d89f8" prot="public">
          <name>NRF_SPIM_TASK_ENABLERXMATCH0</name>
          <initializer>= offsetof(NRF_SPIM_Type, TASKS_DMA.RX.ENABLEMATCH[0])</initializer>
          <briefdescription>
<para>Enable SPI pattern matching functionality for pattern 0. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__spim__hal_1gga2982879a943ea49b37cebd5abbe7fe84ababdfbc754dc5bc6338adc9339e2279d" prot="public">
          <name>NRF_SPIM_TASK_ENABLERXMATCH1</name>
          <initializer>= offsetof(NRF_SPIM_Type, TASKS_DMA.RX.ENABLEMATCH[1])</initializer>
          <briefdescription>
<para>Enable SPI pattern matching functionality for pattern 1. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__spim__hal_1gga2982879a943ea49b37cebd5abbe7fe84af8ec343fc9b2382e12975a55eccdd401" prot="public">
          <name>NRF_SPIM_TASK_ENABLERXMATCH2</name>
          <initializer>= offsetof(NRF_SPIM_Type, TASKS_DMA.RX.ENABLEMATCH[2])</initializer>
          <briefdescription>
<para>Enable SPI pattern matching functionality for pattern 2. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__spim__hal_1gga2982879a943ea49b37cebd5abbe7fe84a004b96e0df35a1f60cd003d0df62ec84" prot="public">
          <name>NRF_SPIM_TASK_ENABLERXMATCH3</name>
          <initializer>= offsetof(NRF_SPIM_Type, TASKS_DMA.RX.ENABLEMATCH[3])</initializer>
          <briefdescription>
<para>Enable SPI pattern matching functionality for pattern 3. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__spim__hal_1gga2982879a943ea49b37cebd5abbe7fe84ab8d84055b65b2e30d245ff72abd7a73e" prot="public">
          <name>NRF_SPIM_TASK_DISABLERXMATCH0</name>
          <initializer>= offsetof(NRF_SPIM_Type, TASKS_DMA.RX.DISABLEMATCH[0])</initializer>
          <briefdescription>
<para>Disable SPI pattern matching functionality for pattern 0. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__spim__hal_1gga2982879a943ea49b37cebd5abbe7fe84a08332e887ff141a82a66dbfaad3f4dd0" prot="public">
          <name>NRF_SPIM_TASK_DISABLERXMATCH1</name>
          <initializer>= offsetof(NRF_SPIM_Type, TASKS_DMA.RX.DISABLEMATCH[1])</initializer>
          <briefdescription>
<para>Disable SPI pattern matching functionality for pattern 1. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__spim__hal_1gga2982879a943ea49b37cebd5abbe7fe84a7c2ddb9282ab965abf221d428c6f4c18" prot="public">
          <name>NRF_SPIM_TASK_DISABLERXMATCH2</name>
          <initializer>= offsetof(NRF_SPIM_Type, TASKS_DMA.RX.DISABLEMATCH[2])</initializer>
          <briefdescription>
<para>Disable SPI pattern matching functionality for pattern 2. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__spim__hal_1gga2982879a943ea49b37cebd5abbe7fe84a8d3bbdf2ed934ba0cf019a0f2f7cc2ab" prot="public">
          <name>NRF_SPIM_TASK_DISABLERXMATCH3</name>
          <initializer>= offsetof(NRF_SPIM_Type, TASKS_DMA.RX.DISABLEMATCH[3])</initializer>
          <briefdescription>
<para>Disable SPI pattern matching functionality for pattern 3. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>SPIM tasks. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_spim.h" line="357" column="1" bodyfile="hal/nrf_spim.h" bodystart="358" bodyend="373"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__spim__hal_1gad3a00dacc9f2c0ebeedddd88a2a03f6e" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_spim_event_t</name>
        <enumvalue id="group__nrf__spim__hal_1ggad3a00dacc9f2c0ebeedddd88a2a03f6ea8c7b3599214eab130a5661a049bf0622" prot="public">
          <name>NRF_SPIM_EVENT_STARTED</name>
          <initializer>= offsetof(NRF_SPIM_Type, EVENTS_STARTED)</initializer>
          <briefdescription>
<para>SPI transaction has started. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__spim__hal_1ggad3a00dacc9f2c0ebeedddd88a2a03f6ea6de9fdf692c7a973adf9dd42a24013e7" prot="public">
          <name>NRF_SPIM_EVENT_STOPPED</name>
          <initializer>= offsetof(NRF_SPIM_Type, EVENTS_STOPPED)</initializer>
          <briefdescription>
<para>SPI transaction has stopped. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__spim__hal_1ggad3a00dacc9f2c0ebeedddd88a2a03f6ea68de147ef75dcc8a67816030ebb8b996" prot="public">
          <name>NRF_SPIM_EVENT_RXSTARTED</name>
          <initializer>= offsetof(NRF_SPIM_Type, EVENTS_DMA.RX.READY)</initializer>
          <briefdescription>
<para>Receive sequence started. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__spim__hal_1ggad3a00dacc9f2c0ebeedddd88a2a03f6ea46a4305a3be71099cc9b978e21a5c741" prot="public">
          <name>NRF_SPIM_EVENT_RXBUSERROR</name>
          <initializer>= offsetof(NRF_SPIM_Type, EVENTS_DMA.RX.BUSERROR)</initializer>
          <briefdescription>
<para>Memory bus error occurred during the RX transfer. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__spim__hal_1ggad3a00dacc9f2c0ebeedddd88a2a03f6ea7c32f82002fda2747eacd39b874de819" prot="public">
          <name>NRF_SPIM_EVENT_RXMATCH0</name>
          <initializer>= offsetof(NRF_SPIM_Type, EVENTS_DMA.RX.MATCH[0])</initializer>
          <briefdescription>
<para>Pattern match for pattern 0 detected. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__spim__hal_1ggad3a00dacc9f2c0ebeedddd88a2a03f6eae4a26aaffeaa77dd59f3d1139a1d2890" prot="public">
          <name>NRF_SPIM_EVENT_RXMATCH1</name>
          <initializer>= offsetof(NRF_SPIM_Type, EVENTS_DMA.RX.MATCH[1])</initializer>
          <briefdescription>
<para>Pattern match for pattern 1 detected. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__spim__hal_1ggad3a00dacc9f2c0ebeedddd88a2a03f6ea6b83045faf4a13d49280345e7f800ac3" prot="public">
          <name>NRF_SPIM_EVENT_RXMATCH2</name>
          <initializer>= offsetof(NRF_SPIM_Type, EVENTS_DMA.RX.MATCH[2])</initializer>
          <briefdescription>
<para>Pattern match for pattern 2 detected. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__spim__hal_1ggad3a00dacc9f2c0ebeedddd88a2a03f6ead053f92b1bf56d00238bfbb80075a63e" prot="public">
          <name>NRF_SPIM_EVENT_RXMATCH3</name>
          <initializer>= offsetof(NRF_SPIM_Type, EVENTS_DMA.RX.MATCH[3])</initializer>
          <briefdescription>
<para>Pattern match for pattern 3 detected. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__spim__hal_1ggad3a00dacc9f2c0ebeedddd88a2a03f6ea4cfbaeffe2dcdc3d7ecd32f784a744e0" prot="public">
          <name>NRF_SPIM_EVENT_TXSTARTED</name>
          <initializer>= offsetof(NRF_SPIM_Type, EVENTS_DMA.TX.READY)</initializer>
          <briefdescription>
<para>Transmit sequence started. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__spim__hal_1ggad3a00dacc9f2c0ebeedddd88a2a03f6ea7037eb18cb5c237e532f4c4f11d5e4c8" prot="public">
          <name>NRF_SPIM_EVENT_TXBUSERROR</name>
          <initializer>= offsetof(NRF_SPIM_Type, EVENTS_DMA.TX.BUSERROR)</initializer>
          <briefdescription>
<para>Memory bus error occurred during the TX transfer. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__spim__hal_1ggad3a00dacc9f2c0ebeedddd88a2a03f6eaa83e64148f6cbfc56d19f809fd03081e" prot="public">
          <name>NRF_SPIM_EVENT_ENDRX</name>
          <initializer>= offsetof(NRF_SPIM_Type, EVENTS_DMA.RX.END)</initializer>
          <briefdescription>
<para>End of RXD buffer reached. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__spim__hal_1ggad3a00dacc9f2c0ebeedddd88a2a03f6ea73d9f975cb5a43340c9907f9e1b25939" prot="public">
          <name>NRF_SPIM_EVENT_ENDTX</name>
          <initializer>= offsetof(NRF_SPIM_Type, EVENTS_DMA.TX.END)</initializer>
          <briefdescription>
<para>End of TXD buffer reached. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__spim__hal_1ggad3a00dacc9f2c0ebeedddd88a2a03f6ea1e4f7c0bbf075459d38eb74a7c5e8664" prot="public">
          <name>NRF_SPIM_EVENT_END</name>
          <initializer>= offsetof(NRF_SPIM_Type, EVENTS_END)</initializer>
          <briefdescription>
<para>End of RXD buffer and TXD buffer reached. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>SPIM events. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_spim.h" line="376" column="1" bodyfile="hal/nrf_spim.h" bodystart="377" bodyend="396"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__spim__hal_1gaf562449d8589bf1199765beeff9b78d4" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_spim_short_mask_t</name>
        <enumvalue id="group__nrf__spim__hal_1ggaf562449d8589bf1199765beeff9b78d4a2eb1a5496a1913e20a742814a4dbf678" prot="public">
          <name>NRF_SPIM_SHORT_END_START_MASK</name>
          <initializer>= SPIM_SHORTS_END_START_Msk</initializer>
          <briefdescription>
<para>Shortcut between END event and START task. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__spim__hal_1ggaf562449d8589bf1199765beeff9b78d4afae75e2f1ff2412ff13635724719d296" prot="public">
          <name>NRF_SPIM_SHORT_RXMATCH0_ENABLERXMATCH1_MASK</name>
          <initializer>= SPIM_SHORTS_DMA_RX_MATCH0_DMA_RX_ENABLEMATCH1_Msk</initializer>
          <briefdescription>
<para>Shortcut between DMA.RX.MATCH0 event and DMA.RX.ENABLEMATCH1 task. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__spim__hal_1ggaf562449d8589bf1199765beeff9b78d4a54de5a6d2fca5d9ec7c314bcca821e46" prot="public">
          <name>NRF_SPIM_SHORT_RXMATCH1_ENABLERXMATCH2_MASK</name>
          <initializer>= SPIM_SHORTS_DMA_RX_MATCH1_DMA_RX_ENABLEMATCH2_Msk</initializer>
          <briefdescription>
<para>Shortcut between DMA.RX.MATCH1 event and DMA.RX.ENABLEMATCH2 task. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__spim__hal_1ggaf562449d8589bf1199765beeff9b78d4a8f5a8cb9b1a082234a5241393b8ee86b" prot="public">
          <name>NRF_SPIM_SHORT_RXMATCH2_ENABLERXMATCH3_MASK</name>
          <initializer>= SPIM_SHORTS_DMA_RX_MATCH2_DMA_RX_ENABLEMATCH3_Msk</initializer>
          <briefdescription>
<para>Shortcut between DMA.RX.MATCH2 event and DMA.RX.ENABLEMATCH3 task. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__spim__hal_1ggaf562449d8589bf1199765beeff9b78d4a2561dac38f7f7482bbb2c92b9dd4368d" prot="public">
          <name>NRF_SPIM_SHORT_RXMATCH3_ENABLERXMATCH0_MASK</name>
          <initializer>= SPIM_SHORTS_DMA_RX_MATCH3_DMA_RX_ENABLEMATCH0_Msk</initializer>
          <briefdescription>
<para>Shortcut between DMA.RX.MATCH3 event and DMA.RX.ENABLEMATCH4 task. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__spim__hal_1ggaf562449d8589bf1199765beeff9b78d4a97505d2f871b78f8574701fc6c2c66e8" prot="public">
          <name>NRF_SPIM_SHORT_RXMATCH0_DISABLERXMATCH0_MASK</name>
          <initializer>= SPIM_SHORTS_DMA_RX_MATCH0_DMA_RX_DISABLEMATCH0_Msk</initializer>
          <briefdescription>
<para>Shortcut between DMA.RX.MATCH0 event and DMA.RX.DISABLEMATCH0 task. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__spim__hal_1ggaf562449d8589bf1199765beeff9b78d4a23dc25d06a52318e876f6933d3ab73cc" prot="public">
          <name>NRF_SPIM_SHORT_RXMATCH1_DISABLERXMATCH1_MASK</name>
          <initializer>= SPIM_SHORTS_DMA_RX_MATCH1_DMA_RX_DISABLEMATCH1_Msk</initializer>
          <briefdescription>
<para>Shortcut between DMA.RX.MATCH1 event and DMA.RX.DISABLEMATCH1 task. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__spim__hal_1ggaf562449d8589bf1199765beeff9b78d4a11aa1f1e5475403aed2ba6dc320b7b29" prot="public">
          <name>NRF_SPIM_SHORT_RXMATCH2_DISABLERXMATCH2_MASK</name>
          <initializer>= SPIM_SHORTS_DMA_RX_MATCH2_DMA_RX_DISABLEMATCH2_Msk</initializer>
          <briefdescription>
<para>Shortcut between DMA.RX.MATCH2 event and DMA.RX.DISABLEMATCH2 task. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__spim__hal_1ggaf562449d8589bf1199765beeff9b78d4a4651a49762262a36522ae3b43af93b91" prot="public">
          <name>NRF_SPIM_SHORT_RXMATCH3_DISABLERXMATCH3_MASK</name>
          <initializer>= SPIM_SHORTS_DMA_RX_MATCH3_DMA_RX_DISABLEMATCH3_Msk</initializer>
          <briefdescription>
<para>Shortcut between DMA.RX.MATCH3 event and DMA.RX.DISABLEMATCH3 task. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__spim__hal_1ggaf562449d8589bf1199765beeff9b78d4add45427651ba464c57c033207677a577" prot="public">
          <name>NRF_SPIM_ALL_SHORTS_MASK</name>
          <initializer>= SPIM_SHORTS_END_START_Msk

                                  | SPIM_SHORTS_DMA_RX_MATCH0_DMA_RX_ENABLEMATCH1_Msk
                                  | SPIM_SHORTS_DMA_RX_MATCH1_DMA_RX_ENABLEMATCH2_Msk
                                  | SPIM_SHORTS_DMA_RX_MATCH2_DMA_RX_ENABLEMATCH3_Msk
                                  | SPIM_SHORTS_DMA_RX_MATCH3_DMA_RX_ENABLEMATCH0_Msk
                                  | SPIM_SHORTS_DMA_RX_MATCH0_DMA_RX_DISABLEMATCH0_Msk
                                  | SPIM_SHORTS_DMA_RX_MATCH1_DMA_RX_DISABLEMATCH1_Msk
                                  | SPIM_SHORTS_DMA_RX_MATCH2_DMA_RX_DISABLEMATCH2_Msk
                                  | SPIM_SHORTS_DMA_RX_MATCH3_DMA_RX_DISABLEMATCH3_Msk</initializer>
          <briefdescription>
<para>All SPIM shortcuts. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>SPIM shortcuts. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_spim.h" line="399" column="1" bodyfile="hal/nrf_spim.h" bodystart="400" bodyend="423"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__spim__hal_1ga4a5f83e02f7d7ad04f8ab305804cabfd" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_spim_int_mask_t</name>
        <enumvalue id="group__nrf__spim__hal_1gga4a5f83e02f7d7ad04f8ab305804cabfda762dd9775fa3e6c00bd1fba886af2a51" prot="public">
          <name>NRF_SPIM_INT_STARTED_MASK</name>
          <initializer>= SPIM_INTENSET_STARTED_Msk</initializer>
          <briefdescription>
<para>Interrupt on STARTED event. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__spim__hal_1gga4a5f83e02f7d7ad04f8ab305804cabfda8bf63f95e7291da7d3fa47cdf994daa4" prot="public">
          <name>NRF_SPIM_INT_STOPPED_MASK</name>
          <initializer>= SPIM_INTENSET_STOPPED_Msk</initializer>
          <briefdescription>
<para>Interrupt on STOPPED event. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__spim__hal_1gga4a5f83e02f7d7ad04f8ab305804cabfda44366f5c57251b0c7e5b749f2e9b9046" prot="public">
          <name>NRF_SPIM_INT_RXREADY_MASK</name>
          <initializer>= SPIM_INTENSET_DMARXREADY_Msk</initializer>
          <briefdescription>
<para>Interrupt on DMA.RX.READY event. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__spim__hal_1gga4a5f83e02f7d7ad04f8ab305804cabfdac2a1622c5f0aa4d7d50afc21ae100e2a" prot="public">
          <name>NRF_SPIM_INT_RXBUSERROR_MASK</name>
          <initializer>= SPIM_INTENSET_DMARXBUSERROR_Msk</initializer>
          <briefdescription>
<para>Interrupt on DMA.RX.BUSERROR event. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__spim__hal_1gga4a5f83e02f7d7ad04f8ab305804cabfda80f85eadbd875546fa4f48e4d92943cd" prot="public">
          <name>NRF_SPIM_INT_RXMATCH0_MASK</name>
          <initializer>= SPIM_INTENSET_DMARXMATCH0_Msk</initializer>
          <briefdescription>
<para>Interrupt on DMA.RX.MATCH0 event. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__spim__hal_1gga4a5f83e02f7d7ad04f8ab305804cabfdac6a5a13da48feb018588aae6b2f3541c" prot="public">
          <name>NRF_SPIM_INT_RXMATCH1_MASK</name>
          <initializer>= SPIM_INTENSET_DMARXMATCH1_Msk</initializer>
          <briefdescription>
<para>Interrupt on DMA.RX.MATCH1 event. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__spim__hal_1gga4a5f83e02f7d7ad04f8ab305804cabfda766f9da35bd8136f736374b9e47d1b4e" prot="public">
          <name>NRF_SPIM_INT_RXMATCH2_MASK</name>
          <initializer>= SPIM_INTENSET_DMARXMATCH2_Msk</initializer>
          <briefdescription>
<para>Interrupt on DMA.RX.MATCH2 event. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__spim__hal_1gga4a5f83e02f7d7ad04f8ab305804cabfdabec69e8d2e607ec49cff6a9b6beee6a1" prot="public">
          <name>NRF_SPIM_INT_RXMATCH3_MASK</name>
          <initializer>= SPIM_INTENSET_DMARXMATCH3_Msk</initializer>
          <briefdescription>
<para>Interrupt on DMA.RX.MATCH3 event. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__spim__hal_1gga4a5f83e02f7d7ad04f8ab305804cabfda70a0907623c3701dc36318084cdd2e8a" prot="public">
          <name>NRF_SPIM_INT_TXREADY_MASK</name>
          <initializer>= SPIM_INTENSET_DMATXREADY_Msk</initializer>
          <briefdescription>
<para>Interrupt on DMA.TX.READY event. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__spim__hal_1gga4a5f83e02f7d7ad04f8ab305804cabfda363329ba6646f58e54b583d63231e8e5" prot="public">
          <name>NRF_SPIM_INT_TXBUSERROR_MASK</name>
          <initializer>= SPIM_INTENSET_DMATXBUSERROR_Msk</initializer>
          <briefdescription>
<para>Interrupt on DMA.TX.BUSERROR event. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__spim__hal_1gga4a5f83e02f7d7ad04f8ab305804cabfda4a684fe1ac27f80b4830995e8c06946c" prot="public">
          <name>NRF_SPIM_INT_ENDRX_MASK</name>
          <initializer>= SPIM_INTENSET_DMARXEND_Msk</initializer>
          <briefdescription>
<para>Interrupt on ENDRX event. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__spim__hal_1gga4a5f83e02f7d7ad04f8ab305804cabfda4dfbb2ab2800953c075c4066e83d53d6" prot="public">
          <name>NRF_SPIM_INT_ENDTX_MASK</name>
          <initializer>= SPIM_INTENSET_DMATXEND_Msk</initializer>
          <briefdescription>
<para>Interrupt on ENDTX event. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__spim__hal_1gga4a5f83e02f7d7ad04f8ab305804cabfda3e91596e7f323cb23dc0b356ff4294e4" prot="public">
          <name>NRF_SPIM_INT_END_MASK</name>
          <initializer>= SPIM_INTENSET_END_Msk</initializer>
          <briefdescription>
<para>Interrupt on END event. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__spim__hal_1gga4a5f83e02f7d7ad04f8ab305804cabfda5932e4a80b3dc9c19768e60e72e31af4" prot="public">
          <name>NRF_SPIM_ALL_INTS_MASK</name>
          <initializer>= NRF_SPIM_INT_STARTED_MASK
                                 | NRF_SPIM_INT_STOPPED_MASK

                                 | NRF_SPIM_INT_RXREADY_MASK
                                 | NRF_SPIM_INT_RXBUSERROR_MASK
                                 | NRF_SPIM_INT_RXMATCH0_MASK
                                 | NRF_SPIM_INT_RXMATCH1_MASK
                                 | NRF_SPIM_INT_RXMATCH2_MASK
                                 | NRF_SPIM_INT_RXMATCH3_MASK
                                 | NRF_SPIM_INT_TXREADY_MASK
                                 | NRF_SPIM_INT_TXBUSERROR_MASK

                                 | NRF_SPIM_INT_ENDRX_MASK
                                 | NRF_SPIM_INT_ENDTX_MASK
                                 | NRF_SPIM_INT_END_MASK</initializer>
          <briefdescription>
<para>All SPIM interrupts. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>SPIM interrupts. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_spim.h" line="426" column="1" bodyfile="hal/nrf_spim.h" bodystart="427" bodyend="461"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__spim__hal_1ga5e37c3150ccd77887556edd6afbe3f65" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_spim_frequency_t</name>
        <enumvalue id="group__nrf__spim__hal_1gga5e37c3150ccd77887556edd6afbe3f65aef136194470630f0cb2c2c2072ff89b9" prot="public">
          <name>NRF_SPIM_FREQ_125K</name>
          <initializer>= SPIM_FREQUENCY_FREQUENCY_K125</initializer>
          <briefdescription>
<para>125 kbps. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__spim__hal_1gga5e37c3150ccd77887556edd6afbe3f65aee27fca7c870915a46aeb5f423bd7eed" prot="public">
          <name>NRF_SPIM_FREQ_250K</name>
          <initializer>= SPIM_FREQUENCY_FREQUENCY_K250</initializer>
          <briefdescription>
<para>250 kbps. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__spim__hal_1gga5e37c3150ccd77887556edd6afbe3f65a4af6087bed6df45564585bb543bdaef7" prot="public">
          <name>NRF_SPIM_FREQ_500K</name>
          <initializer>= SPIM_FREQUENCY_FREQUENCY_K500</initializer>
          <briefdescription>
<para>500 kbps. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__spim__hal_1gga5e37c3150ccd77887556edd6afbe3f65ab3e71da73de998653326af888acfdc17" prot="public">
          <name>NRF_SPIM_FREQ_1M</name>
          <initializer>= SPIM_FREQUENCY_FREQUENCY_M1</initializer>
          <briefdescription>
<para>1 Mbps. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__spim__hal_1gga5e37c3150ccd77887556edd6afbe3f65a0ac54797d254372986e1c8e85fc64a2c" prot="public">
          <name>NRF_SPIM_FREQ_2M</name>
          <initializer>= SPIM_FREQUENCY_FREQUENCY_M2</initializer>
          <briefdescription>
<para>2 Mbps. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__spim__hal_1gga5e37c3150ccd77887556edd6afbe3f65ab35bb5d880b658d451fc268f6aaec3c3" prot="public">
          <name>NRF_SPIM_FREQ_4M</name>
          <initializer>= SPIM_FREQUENCY_FREQUENCY_M4</initializer>
          <briefdescription>
<para>4 Mbps. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__spim__hal_1gga5e37c3150ccd77887556edd6afbe3f65a772e5e88c7b7db33e49408ae405af3f1" prot="public">
          <name>NRF_SPIM_FREQ_8M</name>
          <initializer>= (int)SPIM_FREQUENCY_FREQUENCY_M8</initializer>
          <briefdescription>
<para>8 Mbps. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__spim__hal_1gga5e37c3150ccd77887556edd6afbe3f65ab0f903ec64739799dbc4e6b7c11442d0" prot="public">
          <name>NRF_SPIM_FREQ_16M</name>
          <initializer>= SPIM_FREQUENCY_FREQUENCY_M16</initializer>
          <briefdescription>
<para>16 Mbps. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__spim__hal_1gga5e37c3150ccd77887556edd6afbe3f65ac25c20d88dc026387d40f7743948880f" prot="public">
          <name>NRF_SPIM_FREQ_32M</name>
          <initializer>= SPIM_FREQUENCY_FREQUENCY_M32</initializer>
          <briefdescription>
<para>32 Mbps. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>SPI master data rates. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_spim.h" line="465" column="1" bodyfile="hal/nrf_spim.h" bodystart="466" bodyend="482"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__spim__hal_1gaf6ad2321f2fd4a896c097b5d4040ff94" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_spim_mode_t</name>
        <enumvalue id="group__nrf__spim__hal_1ggaf6ad2321f2fd4a896c097b5d4040ff94a6107c880e9b97cfc936071cc1d4ba27f" prot="public">
          <name>NRF_SPIM_MODE_0</name>
          <briefdescription>
<para>SCK active high, sample on leading edge of clock. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__spim__hal_1ggaf6ad2321f2fd4a896c097b5d4040ff94a2515ae701d523ee8c950c05e1075c53c" prot="public">
          <name>NRF_SPIM_MODE_1</name>
          <briefdescription>
<para>SCK active high, sample on trailing edge of clock. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__spim__hal_1ggaf6ad2321f2fd4a896c097b5d4040ff94a1a1a93d748a15af61bffbb1d4fe099dd" prot="public">
          <name>NRF_SPIM_MODE_2</name>
          <briefdescription>
<para>SCK active low, sample on leading edge of clock. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__spim__hal_1ggaf6ad2321f2fd4a896c097b5d4040ff94a2368e8c2513b90b07310cbfa2efbfc38" prot="public">
          <name>NRF_SPIM_MODE_3</name>
          <briefdescription>
<para>SCK active low, sample on trailing edge of clock. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>SPI modes. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_spim.h" line="486" column="1" bodyfile="hal/nrf_spim.h" bodystart="487" bodyend="492"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__spim__hal_1ga37c6bc10f199291b31990254df1b7e21" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_spim_bit_order_t</name>
        <enumvalue id="group__nrf__spim__hal_1gga37c6bc10f199291b31990254df1b7e21a4e6b4f768edb02728f27c0dd8f7f749b" prot="public">
          <name>NRF_SPIM_BIT_ORDER_MSB_FIRST</name>
          <initializer>= SPIM_CONFIG_ORDER_MsbFirst</initializer>
          <briefdescription>
<para>Most significant bit shifted out first. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__spim__hal_1gga37c6bc10f199291b31990254df1b7e21a8731e5300238a3db9896225f49e4e7bf" prot="public">
          <name>NRF_SPIM_BIT_ORDER_LSB_FIRST</name>
          <initializer>= SPIM_CONFIG_ORDER_LsbFirst</initializer>
          <briefdescription>
<para>Least significant bit shifted out first. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>SPI bit orders. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_spim.h" line="495" column="1" bodyfile="hal/nrf_spim.h" bodystart="496" bodyend="499"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__spim__hal_1ga69909d4302a3e9c65806dc7c7be9c9c7" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_spim_csn_pol_t</name>
        <enumvalue id="group__nrf__spim__hal_1gga69909d4302a3e9c65806dc7c7be9c9c7a937f08a10247864b0ee36d2a4f6f4dcb" prot="public">
          <name>NRF_SPIM_CSN_POL_LOW</name>
          <initializer>= SPIM_CSNPOL_CSNPOL_LOW</initializer>
          <briefdescription>
<para>Active low (idle state high). </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__spim__hal_1gga69909d4302a3e9c65806dc7c7be9c9c7a4183e29df7afc1b879f5e3b9583fa6b8" prot="public">
          <name>NRF_SPIM_CSN_POL_HIGH</name>
          <initializer>= SPIM_CSNPOL_CSNPOL_HIGH</initializer>
          <briefdescription>
<para>Active high (idle state low). </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>SPI CSN pin polarity. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_spim.h" line="503" column="1" bodyfile="hal/nrf_spim.h" bodystart="504" bodyend="512"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__nrf__spim__hal_1ga9e52a7c6afa466c4c2d494e87206898f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_spim_task_trigger</definition>
        <argsstring>(NRF_SPIM_Type *p_reg, nrf_spim_task_t task)</argsstring>
        <name>nrf_spim_task_trigger</name>
        <param>
          <type>NRF_SPIM_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__spim__hal_1ga2982879a943ea49b37cebd5abbe7fe84" kindref="member">nrf_spim_task_t</ref></type>
          <declname>task</declname>
        </param>
        <briefdescription>
<para>Function for activating the specified SPIM task. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">task</parametername>
</parameternamelist>
<parameterdescription>
<para>Task to be activated. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_spim.h" line="1129" column="24" bodyfile="hal/nrf_spim.h" bodystart="1129" bodyend="1133" declfile="hal/nrf_spim.h" declline="521" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__spim__hal_1ga4a9e3819ecafa986a3e7af05ca46b40a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_spim_task_address_get</definition>
        <argsstring>(NRF_SPIM_Type const *p_reg, nrf_spim_task_t task)</argsstring>
        <name>nrf_spim_task_address_get</name>
        <param>
          <type>NRF_SPIM_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__spim__hal_1ga2982879a943ea49b37cebd5abbe7fe84" kindref="member">nrf_spim_task_t</ref></type>
          <declname>task</declname>
        </param>
        <briefdescription>
<para>Function for getting the address of the specified SPIM task register. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">task</parametername>
</parameternamelist>
<parameterdescription>
<para>The specified task.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Address of the specified task register. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_spim.h" line="1135" column="28" bodyfile="hal/nrf_spim.h" bodystart="1135" bodyend="1139" declfile="hal/nrf_spim.h" declline="532" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__spim__hal_1gacdfadb80c0d980545acb217c57abc88a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_spim_event_clear</definition>
        <argsstring>(NRF_SPIM_Type *p_reg, nrf_spim_event_t event)</argsstring>
        <name>nrf_spim_event_clear</name>
        <param>
          <type>NRF_SPIM_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__spim__hal_1gad3a00dacc9f2c0ebeedddd88a2a03f6e" kindref="member">nrf_spim_event_t</ref></type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>Function for clearing the specified SPIM event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event to be cleared. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_spim.h" line="1141" column="24" bodyfile="hal/nrf_spim.h" bodystart="1141" bodyend="1146" declfile="hal/nrf_spim.h" declline="541" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__spim__hal_1gaebe158267c1fe407bd2f84919b2a337b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE bool</type>
        <definition>NRF_STATIC_INLINE bool nrf_spim_event_check</definition>
        <argsstring>(NRF_SPIM_Type const *p_reg, nrf_spim_event_t event)</argsstring>
        <name>nrf_spim_event_check</name>
        <param>
          <type>NRF_SPIM_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__spim__hal_1gad3a00dacc9f2c0ebeedddd88a2a03f6e" kindref="member">nrf_spim_event_t</ref></type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>Function for retrieving the state of the SPIM event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event to be checked.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>The event has been generated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>The event has not been generated. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_spim.h" line="1148" column="24" bodyfile="hal/nrf_spim.h" bodystart="1148" bodyend="1152" declfile="hal/nrf_spim.h" declline="553" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__spim__hal_1ga24e020ebb846d4a8f9cbbb2e94234ba3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_spim_event_address_get</definition>
        <argsstring>(NRF_SPIM_Type const *p_reg, nrf_spim_event_t event)</argsstring>
        <name>nrf_spim_event_address_get</name>
        <param>
          <type>NRF_SPIM_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__spim__hal_1gad3a00dacc9f2c0ebeedddd88a2a03f6e" kindref="member">nrf_spim_event_t</ref></type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>Function for getting the address of the specified SPIM event register. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>The specified event.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Address of the specified event register. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_spim.h" line="1154" column="28" bodyfile="hal/nrf_spim.h" bodystart="1154" bodyend="1158" declfile="hal/nrf_spim.h" declline="564" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__spim__hal_1ga707662c0db21ffac917ff9c6506d07f8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_spim_shorts_enable</definition>
        <argsstring>(NRF_SPIM_Type *p_reg, uint32_t mask)</argsstring>
        <name>nrf_spim_shorts_enable</name>
        <param>
          <type>NRF_SPIM_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Function for enabling the specified shortcuts. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Shortcuts to be enabled. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_spim.h" line="1160" column="24" bodyfile="hal/nrf_spim.h" bodystart="1160" bodyend="1164" declfile="hal/nrf_spim.h" declline="573" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__spim__hal_1gaca728bc9c609f43da7ec0877a9a9c6b2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_spim_shorts_disable</definition>
        <argsstring>(NRF_SPIM_Type *p_reg, uint32_t mask)</argsstring>
        <name>nrf_spim_shorts_disable</name>
        <param>
          <type>NRF_SPIM_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Function for disabling the specified shortcuts. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Shortcuts to be disabled. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_spim.h" line="1166" column="24" bodyfile="hal/nrf_spim.h" bodystart="1166" bodyend="1170" declfile="hal/nrf_spim.h" declline="582" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__spim__hal_1ga230f345fcbb0a4cb4ed2ad7ae49da86b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_spim_shorts_get</definition>
        <argsstring>(NRF_SPIM_Type const *p_reg)</argsstring>
        <name>nrf_spim_shorts_get</name>
        <param>
          <type>NRF_SPIM_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting the shortcut setting. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Current shortcut configuration. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_spim.h" line="1172" column="28" bodyfile="hal/nrf_spim.h" bodystart="1172" bodyend="1175" declfile="hal/nrf_spim.h" declline="592" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__spim__hal_1ga2d1f16e4bd513c2e6a0f4b502f2cfe1c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_spim_int_enable</definition>
        <argsstring>(NRF_SPIM_Type *p_reg, uint32_t mask)</argsstring>
        <name>nrf_spim_int_enable</name>
        <param>
          <type>NRF_SPIM_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Function for enabling the specified interrupts. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of interrupts to be enabled. Use <ref refid="group__nrf__spim__hal_1ga4a5f83e02f7d7ad04f8ab305804cabfd" kindref="member">nrf_spim_int_mask_t</ref> values for bit masking. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_spim.h" line="1177" column="24" bodyfile="hal/nrf_spim.h" bodystart="1177" bodyend="1181" declfile="hal/nrf_spim.h" declline="601" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__spim__hal_1ga26449809b37227511a1faf6233eeb71f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_spim_int_disable</definition>
        <argsstring>(NRF_SPIM_Type *p_reg, uint32_t mask)</argsstring>
        <name>nrf_spim_int_disable</name>
        <param>
          <type>NRF_SPIM_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Function for disabling the specified interrupts. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of interrupts to be disabled. Use <ref refid="group__nrf__spim__hal_1ga4a5f83e02f7d7ad04f8ab305804cabfd" kindref="member">nrf_spim_int_mask_t</ref> values for bit masking. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_spim.h" line="1183" column="24" bodyfile="hal/nrf_spim.h" bodystart="1183" bodyend="1187" declfile="hal/nrf_spim.h" declline="611" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__spim__hal_1gafe12634c5609d63fbc3820c44c29b430" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_spim_int_enable_check</definition>
        <argsstring>(NRF_SPIM_Type const *p_reg, uint32_t mask)</argsstring>
        <name>nrf_spim_int_enable_check</name>
        <param>
          <type>NRF_SPIM_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Function for checking if the specified interrupts are enabled. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of interrupts to be checked. Use <ref refid="group__nrf__spim__hal_1ga4a5f83e02f7d7ad04f8ab305804cabfd" kindref="member">nrf_spim_int_mask_t</ref> values for bit masking.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Mask of enabled interrupts. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_spim.h" line="1189" column="28" bodyfile="hal/nrf_spim.h" bodystart="1189" bodyend="1192" declfile="hal/nrf_spim.h" declline="623" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__spim__hal_1ga79eecd772cb0b0c4faedcddf87e7e72e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_spim_prescaler_set</definition>
        <argsstring>(NRF_SPIM_Type *p_reg, uint32_t prescaler)</argsstring>
        <name>nrf_spim_prescaler_set</name>
        <param>
          <type>NRF_SPIM_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>prescaler</declname>
        </param>
        <briefdescription>
<para>Function for setting the prescaler value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">prescaler</parametername>
</parameternamelist>
<parameterdescription>
<para>Prescaler value. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_spim.h" line="1195" column="24" bodyfile="hal/nrf_spim.h" bodystart="1195" bodyend="1202" declfile="hal/nrf_spim.h" declline="632" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__spim__hal_1ga4ce7dbafe298b763cb978a9d0cc21e18" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_spim_prescaler_get</definition>
        <argsstring>(NRF_SPIM_Type const *p_reg)</argsstring>
        <name>nrf_spim_prescaler_get</name>
        <param>
          <type>NRF_SPIM_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting the prescaler value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Prescaler value. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_spim.h" line="1204" column="28" bodyfile="hal/nrf_spim.h" bodystart="1204" bodyend="1207" declfile="hal/nrf_spim.h" declline="642" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__spim__hal_1gad6fb6e25713c9c18f91c07a5c4a39425" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_spim_subscribe_set</definition>
        <argsstring>(NRF_SPIM_Type *p_reg, nrf_spim_task_t task, uint8_t channel)</argsstring>
        <name>nrf_spim_subscribe_set</name>
        <param>
          <type>NRF_SPIM_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__spim__hal_1ga2982879a943ea49b37cebd5abbe7fe84" kindref="member">nrf_spim_task_t</ref></type>
          <declname>task</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>channel</declname>
        </param>
        <briefdescription>
<para>Function for setting the subscribe configuration for a given SPIM task. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">task</parametername>
</parameternamelist>
<parameterdescription>
<para>Task for which to set the configuration. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">channel</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel through which to subscribe events. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_spim.h" line="654" column="24" declfile="hal/nrf_spim.h" declline="654" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__spim__hal_1gadaa800f166325ce4b749fdb8d6e276eb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_spim_subscribe_clear</definition>
        <argsstring>(NRF_SPIM_Type *p_reg, nrf_spim_task_t task)</argsstring>
        <name>nrf_spim_subscribe_clear</name>
        <param>
          <type>NRF_SPIM_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__spim__hal_1ga2982879a943ea49b37cebd5abbe7fe84" kindref="member">nrf_spim_task_t</ref></type>
          <declname>task</declname>
        </param>
        <briefdescription>
<para>Function for clearing the subscribe configuration for a given SPIM task. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">task</parametername>
</parameternamelist>
<parameterdescription>
<para>Task for which to clear the configuration. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_spim.h" line="665" column="24" declfile="hal/nrf_spim.h" declline="665" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__spim__hal_1ga85022dc74e20435979e08102e5bdf163" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_spim_publish_set</definition>
        <argsstring>(NRF_SPIM_Type *p_reg, nrf_spim_event_t event, uint8_t channel)</argsstring>
        <name>nrf_spim_publish_set</name>
        <param>
          <type>NRF_SPIM_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__spim__hal_1gad3a00dacc9f2c0ebeedddd88a2a03f6e" kindref="member">nrf_spim_event_t</ref></type>
          <declname>event</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>channel</declname>
        </param>
        <briefdescription>
<para>Function for setting the publish configuration for a given SPIM event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event for which to set the configuration. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">channel</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel through which to publish the event. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_spim.h" line="676" column="24" declfile="hal/nrf_spim.h" declline="676" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__spim__hal_1gaba6fb6223b0a3d87820c65fafd6a386b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_spim_publish_clear</definition>
        <argsstring>(NRF_SPIM_Type *p_reg, nrf_spim_event_t event)</argsstring>
        <name>nrf_spim_publish_clear</name>
        <param>
          <type>NRF_SPIM_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__spim__hal_1gad3a00dacc9f2c0ebeedddd88a2a03f6e" kindref="member">nrf_spim_event_t</ref></type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>Function for clearing the publish configuration for a given SPIM event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event for which to clear the configuration. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_spim.h" line="687" column="24" declfile="hal/nrf_spim.h" declline="687" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__spim__hal_1gaeeb8736598b8d189faa547b1656d482e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_spim_enable</definition>
        <argsstring>(NRF_SPIM_Type *p_reg)</argsstring>
        <name>nrf_spim_enable</name>
        <param>
          <type>NRF_SPIM_Type *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for enabling the SPIM peripheral. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_spim.h" line="1240" column="24" bodyfile="hal/nrf_spim.h" bodystart="1240" bodyend="1243" declfile="hal/nrf_spim.h" declline="696" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__spim__hal_1gab0911efd55fdbc077c37d4622c7dc3dc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_spim_disable</definition>
        <argsstring>(NRF_SPIM_Type *p_reg)</argsstring>
        <name>nrf_spim_disable</name>
        <param>
          <type>NRF_SPIM_Type *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for disabling the SPIM peripheral. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_spim.h" line="1245" column="24" bodyfile="hal/nrf_spim.h" bodystart="1245" bodyend="1248" declfile="hal/nrf_spim.h" declline="703" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__spim__hal_1ga1384aadf6e3556812e664a88824adb60" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE bool</type>
        <definition>NRF_STATIC_INLINE bool nrf_spim_enable_check</definition>
        <argsstring>(NRF_SPIM_Type const *p_reg)</argsstring>
        <name>nrf_spim_enable_check</name>
        <param>
          <type>NRF_SPIM_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for checking if the SPIM peripheral is enabled. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>The SPIM is enabled. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>The SPIM is not enabled. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_spim.h" line="1250" column="24" bodyfile="hal/nrf_spim.h" bodystart="1250" bodyend="1253" declfile="hal/nrf_spim.h" declline="713" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__spim__hal_1ga7a84520c7baba19ea26a494bd4c4ea16" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_spim_pins_set</definition>
        <argsstring>(NRF_SPIM_Type *p_reg, uint32_t sck_pin, uint32_t mosi_pin, uint32_t miso_pin)</argsstring>
        <name>nrf_spim_pins_set</name>
        <param>
          <type>NRF_SPIM_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>sck_pin</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mosi_pin</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>miso_pin</declname>
        </param>
        <briefdescription>
<para>Function for configuring SPIM pins. </para>
        </briefdescription>
        <detaileddescription>
<para>If a given signal is not needed, pass the <ref refid="group__nrf__spim__hal_1ga818eb2c4164cd8f9422c3a8a0a626e2a" kindref="member">NRF_SPIM_PIN_NOT_CONNECTED</ref> value instead of its pin number.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">sck_pin</parametername>
</parameternamelist>
<parameterdescription>
<para>SCK pin number. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mosi_pin</parametername>
</parameternamelist>
<parameterdescription>
<para>MOSI pin number. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">miso_pin</parametername>
</parameternamelist>
<parameterdescription>
<para>MISO pin number. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_spim.h" line="1255" column="24" bodyfile="hal/nrf_spim.h" bodystart="1255" bodyend="1263" declfile="hal/nrf_spim.h" declline="726" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__spim__hal_1gaa0b911843ae1a2dc62f894580cf3756b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_spim_sck_pin_get</definition>
        <argsstring>(NRF_SPIM_Type const *p_reg)</argsstring>
        <name>nrf_spim_sck_pin_get</name>
        <param>
          <type>NRF_SPIM_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting the SCK pin selection. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>SCK pin selection. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_spim.h" line="1265" column="28" bodyfile="hal/nrf_spim.h" bodystart="1265" bodyend="1268" declfile="hal/nrf_spim.h" declline="738" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__spim__hal_1ga9deca8a6a43c5f53c6f0e6c3fe0cf6b7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_spim_mosi_pin_get</definition>
        <argsstring>(NRF_SPIM_Type const *p_reg)</argsstring>
        <name>nrf_spim_mosi_pin_get</name>
        <param>
          <type>NRF_SPIM_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting the MOSI pin selection. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>MOSI pin selection. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_spim.h" line="1270" column="28" bodyfile="hal/nrf_spim.h" bodystart="1270" bodyend="1273" declfile="hal/nrf_spim.h" declline="747" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__spim__hal_1ga1551251bf0c13f179b343e1f9b624459" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_spim_miso_pin_get</definition>
        <argsstring>(NRF_SPIM_Type const *p_reg)</argsstring>
        <name>nrf_spim_miso_pin_get</name>
        <param>
          <type>NRF_SPIM_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting the MISO pin selection. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>MISO pin selection. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_spim.h" line="1275" column="28" bodyfile="hal/nrf_spim.h" bodystart="1275" bodyend="1278" declfile="hal/nrf_spim.h" declline="756" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__spim__hal_1ga39c17d197d4e59c45c02620352167fd4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_spim_csn_configure</definition>
        <argsstring>(NRF_SPIM_Type *p_reg, uint32_t pin, nrf_spim_csn_pol_t polarity, uint32_t duration)</argsstring>
        <name>nrf_spim_csn_configure</name>
        <param>
          <type>NRF_SPIM_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>pin</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__spim__hal_1ga69909d4302a3e9c65806dc7c7be9c9c7" kindref="member">nrf_spim_csn_pol_t</ref></type>
          <declname>polarity</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>duration</declname>
        </param>
        <briefdescription>
<para>Function for configuring the SPIM hardware CSN pin. </para>
        </briefdescription>
        <detaileddescription>
<para>If this signal is not needed, pass the <ref refid="group__nrf__spim__hal_1ga818eb2c4164cd8f9422c3a8a0a626e2a" kindref="member">NRF_SPIM_PIN_NOT_CONNECTED</ref> value instead of its pin number.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pin</parametername>
</parameternamelist>
<parameterdescription>
<para>CSN pin number. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">polarity</parametername>
</parameternamelist>
<parameterdescription>
<para>CSN pin polarity. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">duration</parametername>
</parameternamelist>
<parameterdescription>
<para>Minimum duration between the edge of CSN and the edge of SCK and minimum duration of CSN must stay unselected between transactions. The value is specified in number of 64 MHz clock cycles (15.625 ns). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_spim.h" line="1281" column="24" bodyfile="hal/nrf_spim.h" bodystart="1281" bodyend="1293" declfile="hal/nrf_spim.h" declline="772" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__spim__hal_1ga0fa864eb77c4299cb0eb444401674121" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_spim_csn_pin_get</definition>
        <argsstring>(NRF_SPIM_Type const *p_reg)</argsstring>
        <name>nrf_spim_csn_pin_get</name>
        <param>
          <type>NRF_SPIM_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting the CSN pin selection. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>CSN pin selection. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_spim.h" line="1295" column="28" bodyfile="hal/nrf_spim.h" bodystart="1295" bodyend="1302" declfile="hal/nrf_spim.h" declline="784" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__spim__hal_1ga75f2491ddcbd092b71ebac239d9929a3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_spim_dcx_pin_set</definition>
        <argsstring>(NRF_SPIM_Type *p_reg, uint32_t dcx_pin)</argsstring>
        <name>nrf_spim_dcx_pin_set</name>
        <param>
          <type>NRF_SPIM_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>dcx_pin</declname>
        </param>
        <briefdescription>
<para>Function for configuring the SPIM DCX pin. </para>
        </briefdescription>
        <detaileddescription>
<para>If this signal is not needed, pass the <ref refid="group__nrf__spim__hal_1ga818eb2c4164cd8f9422c3a8a0a626e2a" kindref="member">NRF_SPIM_PIN_NOT_CONNECTED</ref> value instead of its pin number.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">dcx_pin</parametername>
</parameternamelist>
<parameterdescription>
<para>DCX pin number. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_spim.h" line="1306" column="24" bodyfile="hal/nrf_spim.h" bodystart="1306" bodyend="1313" declfile="hal/nrf_spim.h" declline="797" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__spim__hal_1ga2ee73ba7b9a8109edb841923c356aca2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_spim_dcx_pin_get</definition>
        <argsstring>(NRF_SPIM_Type const *p_reg)</argsstring>
        <name>nrf_spim_dcx_pin_get</name>
        <param>
          <type>NRF_SPIM_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting the DCX pin selection. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>DCX pin selection. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_spim.h" line="1315" column="28" bodyfile="hal/nrf_spim.h" bodystart="1315" bodyend="1322" declfile="hal/nrf_spim.h" declline="807" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__spim__hal_1ga9d7991c2826771ef33daab7f19e4d95d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_spim_dcx_cnt_set</definition>
        <argsstring>(NRF_SPIM_Type *p_reg, uint32_t count)</argsstring>
        <name>nrf_spim_dcx_cnt_set</name>
        <param>
          <type>NRF_SPIM_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>count</declname>
        </param>
        <briefdescription>
<para>Function for configuring the number of command bytes. </para>
        </briefdescription>
        <detaileddescription>
<para>Maximum value available for dividing the transmitted bytes into command bytes and data bytes is <ref refid="group__nrf__spim__hal_1ga71e07fdf41d8a5b31573f20807ede06e" kindref="member">NRF_SPIM_DCX_CNT_ALL_CMD</ref> - 1. The <ref refid="group__nrf__spim__hal_1ga71e07fdf41d8a5b31573f20807ede06e" kindref="member">NRF_SPIM_DCX_CNT_ALL_CMD</ref> value passed as the <computeroutput>count</computeroutput> parameter causes all transmitted bytes to be marked as command bytes.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">count</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of command bytes preceding the data bytes. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_spim.h" line="1324" column="24" bodyfile="hal/nrf_spim.h" bodystart="1324" bodyend="1327" declfile="hal/nrf_spim.h" declline="820" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__spim__hal_1ga3004d57ece479bf8ff51719706b4d1f9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_spim_iftiming_set</definition>
        <argsstring>(NRF_SPIM_Type *p_reg, uint32_t rxdelay)</argsstring>
        <name>nrf_spim_iftiming_set</name>
        <param>
          <type>NRF_SPIM_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>rxdelay</declname>
        </param>
        <briefdescription>
<para>Function for configuring the extended SPIM interface. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">rxdelay</parametername>
</parameternamelist>
<parameterdescription>
<para>Sample delay for input serial data on MISO, specified in 64 MHz clock cycles (15.625 ns) from the sampling edge of SCK. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_spim.h" line="1331" column="24" bodyfile="hal/nrf_spim.h" bodystart="1331" bodyend="1335" declfile="hal/nrf_spim.h" declline="832" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__spim__hal_1gaba056a74bc686de26adda489f78cf171" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_spim_stallstat_rx_clear</definition>
        <argsstring>(NRF_SPIM_Type *p_reg)</argsstring>
        <name>nrf_spim_stallstat_rx_clear</name>
        <param>
          <type>NRF_SPIM_Type *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for clearing stall status for RX EasyDMA RAM accesses. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_spim.h" line="1339" column="24" bodyfile="hal/nrf_spim.h" bodystart="1339" bodyend="1342" declfile="hal/nrf_spim.h" declline="842" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__spim__hal_1ga35d75ec23eefdb2ab6dcb7e8514d1df8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE bool</type>
        <definition>NRF_STATIC_INLINE bool nrf_spim_stallstat_rx_get</definition>
        <argsstring>(NRF_SPIM_Type const *p_reg)</argsstring>
        <name>nrf_spim_stallstat_rx_get</name>
        <param>
          <type>NRF_SPIM_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting stall status for RX EasyDMA RAM accesses. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Stall status of RX EasyDMA RAM accesses. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_spim.h" line="1344" column="24" bodyfile="hal/nrf_spim.h" bodystart="1344" bodyend="1347" declfile="hal/nrf_spim.h" declline="851" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__spim__hal_1gaa3b5d792be98180e79c35b68c623e817" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_spim_stallstat_tx_clear</definition>
        <argsstring>(NRF_SPIM_Type *p_reg)</argsstring>
        <name>nrf_spim_stallstat_tx_clear</name>
        <param>
          <type>NRF_SPIM_Type *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for clearing stall status for TX EasyDMA RAM accesses. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_spim.h" line="1349" column="24" bodyfile="hal/nrf_spim.h" bodystart="1349" bodyend="1352" declfile="hal/nrf_spim.h" declline="858" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__spim__hal_1gac63ada40f97be3c9e76ba794561f6ab4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE bool</type>
        <definition>NRF_STATIC_INLINE bool nrf_spim_stallstat_tx_get</definition>
        <argsstring>(NRF_SPIM_Type const *p_reg)</argsstring>
        <name>nrf_spim_stallstat_tx_get</name>
        <param>
          <type>NRF_SPIM_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting stall status for TX EasyDMA RAM accesses. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Stall status of TX EasyDMA RAM accesses. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_spim.h" line="1354" column="24" bodyfile="hal/nrf_spim.h" bodystart="1354" bodyend="1357" declfile="hal/nrf_spim.h" declline="867" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__spim__hal_1ga9207d0b744b7aa398141b2004d1aa381" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_spim_frequency_set</definition>
        <argsstring>(NRF_SPIM_Type *p_reg, nrf_spim_frequency_t frequency)</argsstring>
        <name>nrf_spim_frequency_set</name>
        <param>
          <type>NRF_SPIM_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__spim__hal_1ga5e37c3150ccd77887556edd6afbe3f65" kindref="member">nrf_spim_frequency_t</ref></type>
          <declname>frequency</declname>
        </param>
        <briefdescription>
<para>Function for setting the SPI master data rate. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">frequency</parametername>
</parameternamelist>
<parameterdescription>
<para>SPI frequency. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_spim.h" line="1361" column="24" bodyfile="hal/nrf_spim.h" bodystart="1361" bodyend="1365" declfile="hal/nrf_spim.h" declline="877" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__spim__hal_1ga66092a33fb96049aafcd9cd7bc6a3fbc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE <ref refid="group__nrf__spim__hal_1ga5e37c3150ccd77887556edd6afbe3f65" kindref="member">nrf_spim_frequency_t</ref></type>
        <definition>NRF_STATIC_INLINE nrf_spim_frequency_t nrf_spim_frequency_get</definition>
        <argsstring>(NRF_SPIM_Type *p_reg)</argsstring>
        <name>nrf_spim_frequency_get</name>
        <param>
          <type>NRF_SPIM_Type *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting the SPI master data rate. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>SPI</parametername>
</parameternamelist>
<parameterdescription>
<para>master frequency. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_spim.h" line="1367" column="40" bodyfile="hal/nrf_spim.h" bodystart="1367" bodyend="1370" declfile="hal/nrf_spim.h" declline="887" declcolumn="40"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__spim__hal_1gaf6294e8b452baa88e8533e8a1e3041ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_spim_tx_buffer_set</definition>
        <argsstring>(NRF_SPIM_Type *p_reg, uint8_t const *p_buffer, size_t length)</argsstring>
        <name>nrf_spim_tx_buffer_set</name>
        <param>
          <type>NRF_SPIM_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint8_t const *</type>
          <declname>p_buffer</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>length</declname>
        </param>
        <briefdescription>
<para>Function for setting the transmit buffer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">p_buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the buffer with data to send. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">length</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum number of data bytes to transmit. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_spim.h" line="1373" column="24" bodyfile="hal/nrf_spim.h" bodystart="1373" bodyend="1384" declfile="hal/nrf_spim.h" declline="897" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__spim__hal_1ga924ca917786ef51dcf07cd0f0ccce1c6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_spim_tx_amount_get</definition>
        <argsstring>(NRF_SPIM_Type const *p_reg)</argsstring>
        <name>nrf_spim_tx_amount_get</name>
        <param>
          <type>NRF_SPIM_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting number of bytes transmitted in the last transaction. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>Amount</parametername>
</parameternamelist>
<parameterdescription>
<para>of bytes transmitted. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_spim.h" line="1386" column="28" bodyfile="hal/nrf_spim.h" bodystart="1386" bodyend="1393" declfile="hal/nrf_spim.h" declline="908" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__spim__hal_1gac76e46f7b09bb8fda5c351d41972d9fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_spim_tx_maxcnt_get</definition>
        <argsstring>(NRF_SPIM_Type const *p_reg)</argsstring>
        <name>nrf_spim_tx_maxcnt_get</name>
        <param>
          <type>NRF_SPIM_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting number of bytes to be transmitted in the next transaction. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>Amount</parametername>
</parameternamelist>
<parameterdescription>
<para>of bytes to be transmitted. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_spim.h" line="1395" column="28" bodyfile="hal/nrf_spim.h" bodystart="1395" bodyend="1402" declfile="hal/nrf_spim.h" declline="917" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__spim__hal_1ga8e5557a6f5b0294fdd49ca950b1b3e15" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_spim_rx_buffer_set</definition>
        <argsstring>(NRF_SPIM_Type *p_reg, uint8_t *p_buffer, size_t length)</argsstring>
        <name>nrf_spim_rx_buffer_set</name>
        <param>
          <type>NRF_SPIM_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>p_buffer</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>length</declname>
        </param>
        <briefdescription>
<para>Function for setting the receive buffer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">p_buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the buffer for received data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">length</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum number of data bytes to receive. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_spim.h" line="1404" column="24" bodyfile="hal/nrf_spim.h" bodystart="1404" bodyend="1415" declfile="hal/nrf_spim.h" declline="926" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__spim__hal_1gabb5f4696a9964dd9d0785368bd90d125" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_spim_rx_amount_get</definition>
        <argsstring>(NRF_SPIM_Type const *p_reg)</argsstring>
        <name>nrf_spim_rx_amount_get</name>
        <param>
          <type>NRF_SPIM_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting number of bytes received in the last transaction. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>Amount</parametername>
</parameternamelist>
<parameterdescription>
<para>of bytes received. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_spim.h" line="1417" column="28" bodyfile="hal/nrf_spim.h" bodystart="1417" bodyend="1424" declfile="hal/nrf_spim.h" declline="937" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__spim__hal_1ga7eceeed170a987436f97714573ebebfe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_spim_rx_maxcnt_get</definition>
        <argsstring>(NRF_SPIM_Type const *p_reg)</argsstring>
        <name>nrf_spim_rx_maxcnt_get</name>
        <param>
          <type>NRF_SPIM_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting number of bytes to be received in the next transaction. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>Amount</parametername>
</parameternamelist>
<parameterdescription>
<para>of bytes to be received. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_spim.h" line="1426" column="28" bodyfile="hal/nrf_spim.h" bodystart="1426" bodyend="1433" declfile="hal/nrf_spim.h" declline="946" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__spim__hal_1ga04cb0f3fce5a0c8eaf3993dbc348818a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_spim_configure</definition>
        <argsstring>(NRF_SPIM_Type *p_reg, nrf_spim_mode_t spi_mode, nrf_spim_bit_order_t spi_bit_order)</argsstring>
        <name>nrf_spim_configure</name>
        <param>
          <type>NRF_SPIM_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__spim__hal_1gaf6ad2321f2fd4a896c097b5d4040ff94" kindref="member">nrf_spim_mode_t</ref></type>
          <declname>spi_mode</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__spim__hal_1ga37c6bc10f199291b31990254df1b7e21" kindref="member">nrf_spim_bit_order_t</ref></type>
          <declname>spi_bit_order</declname>
        </param>
        <briefdescription>
<para>Function for setting the SPI configuration. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">spi_mode</parametername>
</parameternamelist>
<parameterdescription>
<para>SPI mode. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">spi_bit_order</parametername>
</parameternamelist>
<parameterdescription>
<para>SPI bit order. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_spim.h" line="1435" column="24" bodyfile="hal/nrf_spim.h" bodystart="1435" bodyend="1465" declfile="hal/nrf_spim.h" declline="955" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__spim__hal_1gafeac3b0a862ff72358ceeb02edd22704" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_spim_orc_set</definition>
        <argsstring>(NRF_SPIM_Type *p_reg, uint8_t orc)</argsstring>
        <name>nrf_spim_orc_set</name>
        <param>
          <type>NRF_SPIM_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>orc</declname>
        </param>
        <briefdescription>
<para>Function for setting the over-read character. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">orc</parametername>
</parameternamelist>
<parameterdescription>
<para>Over-read character that is clocked out in case of an over-read of the TXD buffer. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_spim.h" line="1467" column="24" bodyfile="hal/nrf_spim.h" bodystart="1467" bodyend="1471" declfile="hal/nrf_spim.h" declline="966" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__spim__hal_1ga7357a796a2fdf9d2c4ae16a0350852c7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_spim_tx_list_enable</definition>
        <argsstring>(NRF_SPIM_Type *p_reg)</argsstring>
        <name>nrf_spim_tx_list_enable</name>
        <param>
          <type>NRF_SPIM_Type *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for enabling the TX list feature. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_spim.h" line="1474" column="24" bodyfile="hal/nrf_spim.h" bodystart="1474" bodyend="1477" declfile="hal/nrf_spim.h" declline="975" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__spim__hal_1ga72c0c83e5b18565861b24cc2f9b7b405" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_spim_tx_list_disable</definition>
        <argsstring>(NRF_SPIM_Type *p_reg)</argsstring>
        <name>nrf_spim_tx_list_disable</name>
        <param>
          <type>NRF_SPIM_Type *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for disabling the TX list feature. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_spim.h" line="1479" column="24" bodyfile="hal/nrf_spim.h" bodystart="1479" bodyend="1482" declfile="hal/nrf_spim.h" declline="982" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__spim__hal_1ga1352d05967bc99ec35c6a35653263caa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_spim_rx_list_enable</definition>
        <argsstring>(NRF_SPIM_Type *p_reg)</argsstring>
        <name>nrf_spim_rx_list_enable</name>
        <param>
          <type>NRF_SPIM_Type *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for enabling the RX list feature. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_spim.h" line="1484" column="24" bodyfile="hal/nrf_spim.h" bodystart="1484" bodyend="1487" declfile="hal/nrf_spim.h" declline="989" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__spim__hal_1ga2a825732a31c91886fc4915c73fe437f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_spim_rx_list_disable</definition>
        <argsstring>(NRF_SPIM_Type *p_reg)</argsstring>
        <name>nrf_spim_rx_list_disable</name>
        <param>
          <type>NRF_SPIM_Type *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for disabling the RX list feature. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_spim.h" line="1489" column="24" bodyfile="hal/nrf_spim.h" bodystart="1489" bodyend="1492" declfile="hal/nrf_spim.h" declline="996" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__spim__hal_1ga3743c8659fc70ce914c2cb8fab44bfa9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_spim_rx_pattern_match_enable_set</definition>
        <argsstring>(NRF_SPIM_Type *p_reg, uint8_t index, bool enable)</argsstring>
        <name>nrf_spim_rx_pattern_match_enable_set</name>
        <param>
          <type>NRF_SPIM_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>index</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>enable</declname>
        </param>
        <briefdescription>
<para>Function for enabling individual pattern match filters. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">index</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of pattern match filter. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">enable</parametername>
</parameternamelist>
<parameterdescription>
<para>True if pattern match filter is to be enabled, false otherwise. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_spim.h" line="1496" column="24" bodyfile="hal/nrf_spim.h" bodystart="1496" bodyend="1539" declfile="hal/nrf_spim.h" declline="1007" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__spim__hal_1gae1bd8ded6444d29f9ccf5f5bec319c9e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE bool</type>
        <definition>NRF_STATIC_INLINE bool nrf_spim_rx_pattern_match_enable_check</definition>
        <argsstring>(NRF_SPIM_Type const *p_reg, uint8_t index)</argsstring>
        <name>nrf_spim_rx_pattern_match_enable_check</name>
        <param>
          <type>NRF_SPIM_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Function for checking if the specified pattern match filter is enabled. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">index</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of pattern match filter.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>Pattern match filter is enabled. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>Pattern match filter is disabled. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_spim.h" line="1541" column="24" bodyfile="hal/nrf_spim.h" bodystart="1541" bodyend="1567" declfile="hal/nrf_spim.h" declline="1020" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__spim__hal_1gadd5cfcbb5e4b523ea0419a099eb1524e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_spim_rx_pattern_match_one_shot_enable</definition>
        <argsstring>(NRF_SPIM_Type *p_reg, uint8_t index)</argsstring>
        <name>nrf_spim_rx_pattern_match_one_shot_enable</name>
        <param>
          <type>NRF_SPIM_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Function for enabling one-shot operation for the specified match filter. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">index</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of pattern match filter. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_spim.h" line="1569" column="24" bodyfile="hal/nrf_spim.h" bodystart="1569" bodyend="1591" declfile="hal/nrf_spim.h" declline="1029" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__spim__hal_1ga26cc50e322ee0cbb77f1fa983b094b07" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_spim_rx_pattern_match_one_shot_disable</definition>
        <argsstring>(NRF_SPIM_Type *p_reg, uint8_t index)</argsstring>
        <name>nrf_spim_rx_pattern_match_one_shot_disable</name>
        <param>
          <type>NRF_SPIM_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Function for disabling one-shot operation for the specified match filter. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">index</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of pattern match filter. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_spim.h" line="1593" column="24" bodyfile="hal/nrf_spim.h" bodystart="1593" bodyend="1615" declfile="hal/nrf_spim.h" declline="1038" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__spim__hal_1gaac8746783116cce64872b1d25f4d9a5d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE bool</type>
        <definition>NRF_STATIC_INLINE bool nrf_spim_rx_pattern_match_one_shot_check</definition>
        <argsstring>(NRF_SPIM_Type const *p_reg, uint8_t index)</argsstring>
        <name>nrf_spim_rx_pattern_match_one_shot_check</name>
        <param>
          <type>NRF_SPIM_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Function for checking if specified pattern match filter is configured as one-shot. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">index</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of pattern match filter.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>Pattern match filter is configured as one-shot. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>Pattern match filter is configured as continuous. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_spim.h" line="1617" column="24" bodyfile="hal/nrf_spim.h" bodystart="1617" bodyend="1643" declfile="hal/nrf_spim.h" declline="1050" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__spim__hal_1ga2f644bca032ebb67882ba3c2daf70395" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_spim_rx_pattern_match_candidate_set</definition>
        <argsstring>(NRF_SPIM_Type *p_reg, uint8_t index, uint32_t pattern)</argsstring>
        <name>nrf_spim_rx_pattern_match_candidate_set</name>
        <param>
          <type>NRF_SPIM_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>index</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>pattern</declname>
        </param>
        <briefdescription>
<para>Function for setting the pattern to be looked for by the specified match filter. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">index</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of pattern match filter. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pattern</parametername>
</parameternamelist>
<parameterdescription>
<para>Pattern to be looked for. Match will trigger the corresponding event, if enabled. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_spim.h" line="1645" column="24" bodyfile="hal/nrf_spim.h" bodystart="1645" bodyend="1651" declfile="hal/nrf_spim.h" declline="1061" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__spim__hal_1gabea2f074d7418877d22b1887f2e1da93" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_spim_rx_pattern_match_candidate_get</definition>
        <argsstring>(NRF_SPIM_Type const *p_reg, uint8_t index)</argsstring>
        <name>nrf_spim_rx_pattern_match_candidate_get</name>
        <param>
          <type>NRF_SPIM_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Function for getting the pattern that the specified match filter is looking for. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">index</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of pattern match filter.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pattern that the specified match filter is looking for. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_spim.h" line="1653" column="28" bodyfile="hal/nrf_spim.h" bodystart="1653" bodyend="1658" declfile="hal/nrf_spim.h" declline="1073" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__spim__hal_1gab3c907595d436e304d426d46e8bd6257" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_spim_rx_terminate_on_bus_error_enable</definition>
        <argsstring>(NRF_SPIM_Type *p_reg)</argsstring>
        <name>nrf_spim_rx_terminate_on_bus_error_enable</name>
        <param>
          <type>NRF_SPIM_Type *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for enabling the termination of the RX transaction after detecting the BUSERROR event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_spim.h" line="1662" column="24" bodyfile="hal/nrf_spim.h" bodystart="1662" bodyend="1665" declfile="hal/nrf_spim.h" declline="1083" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__spim__hal_1ga0d87335b0601f1a32dbdc90d81b3af5a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_spim_rx_terminate_on_bus_error_disable</definition>
        <argsstring>(NRF_SPIM_Type *p_reg)</argsstring>
        <name>nrf_spim_rx_terminate_on_bus_error_disable</name>
        <param>
          <type>NRF_SPIM_Type *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for disabling the termination of the RX transaction after detecting the BUSERROR event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_spim.h" line="1667" column="24" bodyfile="hal/nrf_spim.h" bodystart="1667" bodyend="1670" declfile="hal/nrf_spim.h" declline="1090" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__spim__hal_1gae056088d0fa548f6fd158ad0f99c672f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE bool</type>
        <definition>NRF_STATIC_INLINE bool nrf_spim_rx_terminate_on_bus_error_check</definition>
        <argsstring>(NRF_SPIM_Type const *p_reg)</argsstring>
        <name>nrf_spim_rx_terminate_on_bus_error_check</name>
        <param>
          <type>NRF_SPIM_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for checking if RX transaction termination after detecting the BUSERROR event is enabled. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>RX transaction termination after detecting a BUSERROR event is enabled. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>RX transaction termination after detecting a BUSERROR event is disabled. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_spim.h" line="1672" column="24" bodyfile="hal/nrf_spim.h" bodystart="1672" bodyend="1677" declfile="hal/nrf_spim.h" declline="1100" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__spim__hal_1ga0c13534b0ba4b532f3cbaff8835bc018" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_spim_tx_terminate_on_bus_error_enable</definition>
        <argsstring>(NRF_SPIM_Type *p_reg)</argsstring>
        <name>nrf_spim_tx_terminate_on_bus_error_enable</name>
        <param>
          <type>NRF_SPIM_Type *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for enabling the termination of the TX transaction after detecting the BUSERROR event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_spim.h" line="1679" column="24" bodyfile="hal/nrf_spim.h" bodystart="1679" bodyend="1682" declfile="hal/nrf_spim.h" declline="1107" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__spim__hal_1ga4f87df8e8d9db46678947bfa714dfba0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_spim_tx_terminate_on_bus_error_disable</definition>
        <argsstring>(NRF_SPIM_Type *p_reg)</argsstring>
        <name>nrf_spim_tx_terminate_on_bus_error_disable</name>
        <param>
          <type>NRF_SPIM_Type *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for disabling the termination of the TX transaction after detecting the BUSERROR event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_spim.h" line="1684" column="24" bodyfile="hal/nrf_spim.h" bodystart="1684" bodyend="1687" declfile="hal/nrf_spim.h" declline="1114" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__spim__hal_1ga5a0b4df867b8cdf9c3217568be4f672f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE bool</type>
        <definition>NRF_STATIC_INLINE bool nrf_spim_tx_terminate_on_bus_error_check</definition>
        <argsstring>(NRF_SPIM_Type const *p_reg)</argsstring>
        <name>nrf_spim_tx_terminate_on_bus_error_check</name>
        <param>
          <type>NRF_SPIM_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for checking if TX transaction termination after detecting the BUSERROR event is enabled. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>TX transaction termination after detecting a BUSERROR event is enabled. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>TX transaction termination after detecting a BUSERROR event is disabled. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_spim.h" line="1689" column="24" bodyfile="hal/nrf_spim.h" bodystart="1689" bodyend="1694" declfile="hal/nrf_spim.h" declline="1124" declcolumn="24"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2015<sp/>-<sp/>2024,<sp/>Nordic<sp/>Semiconductor<sp/>ASA</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>All<sp/>rights<sp/>reserved.</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>SPDX-License-Identifier:<sp/>BSD-3-Clause</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions<sp/>are<sp/>met:</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>1.<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright<sp/>notice,<sp/>this</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>2.<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the<sp/>distribution.</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/>3.<sp/>Neither<sp/>the<sp/>name<sp/>of<sp/>the<sp/>copyright<sp/>holder<sp/>nor<sp/>the<sp/>names<sp/>of<sp/>its</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>contributors<sp/>may<sp/>be<sp/>used<sp/>to<sp/>endorse<sp/>or<sp/>promote<sp/>products<sp/>derived<sp/>from<sp/>this</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>software<sp/>without<sp/>specific<sp/>prior<sp/>written<sp/>permission.</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>COPYRIGHT<sp/>HOLDERS<sp/>AND<sp/>CONTRIBUTORS<sp/>&quot;AS<sp/>IS&quot;</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/>AND<sp/>ANY<sp/>EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>THE</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*<sp/>ARE<sp/>DISCLAIMED.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>COPYRIGHT<sp/>HOLDER<sp/>OR<sp/>CONTRIBUTORS<sp/>BE</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,<sp/>SPECIAL,<sp/>EXEMPLARY,<sp/>OR</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>PROCUREMENT<sp/>OF</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>*<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,<sp/>DATA,<sp/>OR<sp/>PROFITS;<sp/>OR<sp/>BUSINESS</highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/>*<sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY<sp/>THEORY<sp/>OF<sp/>LIABILITY,<sp/>WHETHER<sp/>IN</highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/>*<sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR<sp/>OTHERWISE)</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/>*<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE<sp/>OF<sp/>THIS<sp/>SOFTWARE,<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/>*<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight></codeline>
<codeline lineno="32"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>NRF_SPIM_H__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_SPIM_H__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;nrfx.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(NRF54H20_XXAA)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_SPIM_CLOCKPIN_MOSI_NEEDED<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(HALTIUM_XXAA)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_SPIM_CLOCKPIN_SCK_NEEDED<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="52"><highlight class="comment"><sp/>*<sp/>Macro<sp/>for<sp/>generating<sp/>code<sp/>blocks<sp/>that<sp/>allow<sp/>extracting</highlight></codeline>
<codeline lineno="53"><highlight class="comment"><sp/>*<sp/>the<sp/>maximum<sp/>prescaler<sp/>value<sp/>allowed<sp/>for<sp/>the<sp/>specified<sp/>SPIM<sp/>instance.</highlight></codeline>
<codeline lineno="54"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_NRF_SPIM_PRESCALER_MAX_GET(periph_name,<sp/>prefix,<sp/>idx,<sp/>p_reg)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="56"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>(p_reg<sp/>==<sp/>NRFX_CONCAT(NRF_,<sp/>periph_name,<sp/>prefix,<sp/>idx))<sp/>?<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="57"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(NRFX_CONCAT(periph_name,<sp/>prefix,<sp/>idx,<sp/>_PRESCALER_DIVISOR_RANGE_MAX))<sp/>:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="60"><highlight class="comment"><sp/>*<sp/>Macro<sp/>for<sp/>generating<sp/>code<sp/>blocks<sp/>that<sp/>allow<sp/>extracting</highlight></codeline>
<codeline lineno="61"><highlight class="comment"><sp/>*<sp/>the<sp/>minimum<sp/>prescaler<sp/>value<sp/>allowed<sp/>for<sp/>the<sp/>specified<sp/>SPIM<sp/>instance.</highlight></codeline>
<codeline lineno="62"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_NRF_SPIM_PRESCALER_MIN_GET(periph_name,<sp/>prefix,<sp/>idx,<sp/>p_reg)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="64"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>(p_reg<sp/>==<sp/>NRFX_CONCAT(NRF_,<sp/>periph_name,<sp/>prefix,<sp/>idx))<sp/>?<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="65"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(NRFX_CONCAT(periph_name,<sp/>prefix,<sp/>idx,<sp/>_PRESCALER_DIVISOR_RANGE_MIN))<sp/>:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="67"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="68"><highlight class="comment"><sp/>*<sp/>@defgroup<sp/>nrf_spim_hal<sp/>SPIM<sp/>HAL</highlight></codeline>
<codeline lineno="69"><highlight class="comment"><sp/>*<sp/>@{</highlight></codeline>
<codeline lineno="70"><highlight class="comment"><sp/>*<sp/>@ingroup<sp/>nrf_spim</highlight></codeline>
<codeline lineno="71"><highlight class="comment"><sp/>*<sp/>@brief<sp/><sp/><sp/>Hardware<sp/>access<sp/>layer<sp/>for<sp/>managing<sp/>the<sp/>SPIM<sp/>peripheral.</highlight></codeline>
<codeline lineno="72"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="74"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="75"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Macro<sp/>getting<sp/>pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>SPIM<sp/>peripheral.</highlight></codeline>
<codeline lineno="76"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="77"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>idx<sp/>SPIM<sp/>instance<sp/>index.</highlight></codeline>
<codeline lineno="78"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="79"><highlight class="comment"><sp/>*<sp/>@return<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>SPIM<sp/>peripheral.</highlight></codeline>
<codeline lineno="80"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_SPIM_INST_GET(idx)<sp/>NRFX_CONCAT(NRF_,<sp/>SPIM,<sp/>idx)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(SPIM_FREQUENCY_FREQUENCY_M16)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="84"><highlight class="comment">/**<sp/>@brief<sp/>Symbol<sp/>indicating<sp/>whether<sp/>16<sp/>MHz<sp/>clock<sp/>frequency<sp/>is<sp/>available.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_SPIM_HAS_16_MHZ_FREQ<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_SPIM_HAS_16_MHZ_FREQ<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(SPIM_FREQUENCY_FREQUENCY_M32)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="91"><highlight class="comment">/**<sp/>@brief<sp/>Symbol<sp/>indicating<sp/>whether<sp/>32<sp/>MHz<sp/>clock<sp/>frequency<sp/>is<sp/>available.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_SPIM_HAS_32_MHZ_FREQ<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_SPIM_HAS_32_MHZ_FREQ<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(SPIM_FREQUENCY_FREQUENCY_Msk)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="98"><highlight class="comment">/**<sp/>@brief<sp/>Symbol<sp/>indicating<sp/>whether<sp/>frequency<sp/>is<sp/>used.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_SPIM_HAS_FREQUENCY<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_SPIM_HAS_FREQUENCY<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(SPIM_PRESCALER_DIVISOR_Msk)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="105"><highlight class="comment">/**<sp/>@brief<sp/>Symbol<sp/>indicating<sp/>whether<sp/>prescaler<sp/>is<sp/>used.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_SPIM_HAS_PRESCALER<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_SPIM_HAS_PRESCALER<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(SPIM_TXD_LIST_LIST_ArrayList)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="112"><highlight class="comment">/**<sp/>@brief<sp/>Symbol<sp/>indicating<sp/>whether<sp/>EasyDMA<sp/>array<sp/>list<sp/>feature<sp/>is<sp/>present.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_SPIM_HAS_ARRAY_LIST<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_SPIM_HAS_ARRAY_LIST<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(SPIM_DMA_RX_PTR_PTR_Msk)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="119"><highlight class="comment">/**<sp/>@brief<sp/>Symbol<sp/>indicating<sp/>whether<sp/>dedicated<sp/>DMA<sp/>register<sp/>is<sp/>present.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_SPIM_HAS_DMA_REG<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_SPIM_HAS_DMA_REG<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(defined(SPIM_TASKS_DMA_RX_ENABLEMATCH_ENABLEMATCH_Msk)<sp/>&amp;&amp;<sp/>\</highlight></codeline>
<codeline lineno="126"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>defined(SPIM_EVENTS_DMA_RX_END_END_Msk))<sp/>||<sp/>\</highlight></codeline>
<codeline lineno="127"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="128"><highlight class="comment">/**<sp/>@brief<sp/>Symbol<sp/>indicating<sp/>whether<sp/>SPIM<sp/>DMA<sp/>tasks<sp/>and<sp/>events<sp/>are<sp/>present.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_SPIM_HAS_DMA_TASKS_EVENTS<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_SPIM_HAS_DMA_TASKS_EVENTS<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="134"><highlight class="comment">/**<sp/>@brief<sp/>Macro<sp/>for<sp/>checking<sp/>if<sp/>the<sp/>hardware<sp/>chip<sp/>select<sp/>function<sp/>is<sp/>available.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRFX_FEATURE_PRESENT(SPIM,<sp/>_FEATURE_HARDWARE_CSN_PRESENT)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_SPIM_HAS_HW_CSN<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_SPIM_HAS_HW_CSN<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="141"><highlight class="comment">/**<sp/>@brief<sp/>Macro<sp/>for<sp/>checking<sp/>if<sp/>the<sp/>DCX<sp/>pin<sp/>control<sp/>is<sp/>available.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRFX_FEATURE_PRESENT(SPIM,<sp/>_FEATURE_HARDWARE_DCX_PRESENT)<sp/>||<sp/>\</highlight></codeline>
<codeline lineno="143"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>NRFX_FEATURE_PRESENT(SPIM,<sp/>_FEATURE_DCX_PRESENT)<sp/>||<sp/>\</highlight></codeline>
<codeline lineno="144"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_SPIM_HAS_DCX<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_SPIM_HAS_DCX<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="150"><highlight class="comment">/**<sp/>@brief<sp/>Macro<sp/>for<sp/>checking<sp/>if<sp/>the<sp/>RXDELAY<sp/>function<sp/>is<sp/>available.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRFX_FEATURE_PRESENT(SPIM,<sp/>_FEATURE_RXDELAY_PRESENT)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_SPIM_HAS_RXDELAY<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_SPIM_HAS_RXDELAY<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(SPIM_STALLSTAT_RX_Msk)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="158"><highlight class="comment">/**<sp/>@brief<sp/>Macro<sp/>for<sp/>checking<sp/>if<sp/>the<sp/>STALLSTAT<sp/>feature<sp/>is<sp/>available.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_SPIM_HAS_STALLSTAT<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_SPIM_HAS_STALLSTAT<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_SPIM_HAS_HW_CSN<sp/>||<sp/>NRF_SPIM_HAS_DCX<sp/>||<sp/>NRF_SPIM_HAS_RXDELAY</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="165"><highlight class="comment">/**<sp/>@brief<sp/>Symbol<sp/>indicating<sp/>whether<sp/>any<sp/>of<sp/>the<sp/>SPIM<sp/>extended<sp/>features<sp/>is<sp/>available.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_SPIM_HAS_EXTENDED<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_SPIM_HAS_EXTENDED<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_SPIM_HAS_DCX</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="172"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="173"><highlight class="comment"><sp/>*<sp/>@brief<sp/>This<sp/>value<sp/>specified<sp/>in<sp/>the<sp/>DCX<sp/>line<sp/>configuration<sp/>causes<sp/>this<sp/>line</highlight></codeline>
<codeline lineno="174"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>to<sp/>be<sp/>set<sp/>low<sp/>during<sp/>whole<sp/>transmission<sp/>(all<sp/>transmitted<sp/>bytes<sp/>are</highlight></codeline>
<codeline lineno="175"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>marked<sp/>as<sp/>command<sp/>bytes).<sp/>Any<sp/>lower<sp/>value<sp/>causes<sp/>the<sp/>DCX<sp/>line<sp/>to<sp/>be</highlight></codeline>
<codeline lineno="176"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>switched<sp/>from<sp/>low<sp/>to<sp/>high<sp/>after<sp/>this<sp/>number<sp/>of<sp/>bytes<sp/>is<sp/>transmitted</highlight></codeline>
<codeline lineno="177"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(all<sp/>remaining<sp/>bytes<sp/>are<sp/>marked<sp/>as<sp/>data<sp/>bytes).</highlight></codeline>
<codeline lineno="178"><highlight class="comment"><sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_SPIM_DCX_CNT_ALL_CMD<sp/>0xF</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="182"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="183"><highlight class="comment"><sp/>*<sp/>@brief<sp/>This<sp/>value<sp/>can<sp/>be<sp/>used<sp/>as<sp/>a<sp/>parameter<sp/>for<sp/>the<sp/>@ref<sp/>nrf_spim_pins_set</highlight></codeline>
<codeline lineno="184"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>function<sp/>to<sp/>specify<sp/>that<sp/>a<sp/>given<sp/>SPI<sp/>signal<sp/>(SCK,<sp/>MOSI,<sp/>or<sp/>MISO)</highlight></codeline>
<codeline lineno="185"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shall<sp/>not<sp/>be<sp/>connected<sp/>to<sp/>a<sp/>physical<sp/>pin.</highlight></codeline>
<codeline lineno="186"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_SPIM_PIN_NOT_CONNECTED<sp/><sp/>0xFFFFFFFF</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_SPIM_HAS_DMA_TASKS_EVENTS</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="190"><highlight class="comment">/**<sp/>@brief<sp/>Max<sp/>number<sp/>of<sp/>RX<sp/>patterns.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_SPIM_DMA_RX_PATTERN_MAX_COUNT<sp/>SPIM_DMA_RX_MATCH_CANDIDATE_MaxCount</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_SPIM_HAS_DCX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(SPIM_PSEL_DCX_ResetValue)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="196"><highlight class="comment">/**<sp/>@brief<sp/>Symbol<sp/>specifying<sp/>default<sp/>value<sp/>of<sp/>DCX<sp/>pin<sp/>setting.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_SPIM_DCX_DEFAULT<sp/>SPIM_PSEL_DCX_ResetValue</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_SPIM_DCX_DEFAULT<sp/>0xFFFFFFFFUL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRF_SPIM_HAS_DCX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_SPIM_HAS_HW_CSN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(SPIM_PSEL_CSN_ResetValue)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="205"><highlight class="comment">/**<sp/>@brief<sp/>Symbol<sp/>specifying<sp/>default<sp/>value<sp/>of<sp/>CSN<sp/>pin<sp/>setting.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_SPIM_CSN_DEFAULT<sp/>SPIM_PSEL_CSN_ResetValue</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_SPIM_CSN_DEFAULT<sp/>0xFFFFFFFFUL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(SPIM_CSNDUR_ResetValue)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="212"><highlight class="comment">/**<sp/>@brief<sp/>Symbol<sp/>specifying<sp/>default<sp/>value<sp/>of<sp/>CSN<sp/>duration<sp/>setting.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_SPIM_CSNDUR_DEFAULT<sp/>SPIM_CSNDUR_ResetValue</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_SPIM_CSNDUR_DEFAULT<sp/>0x2UL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(SPIM_CSNPOL_ResetValue)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="219"><highlight class="comment">/**<sp/>@brief<sp/>Symbol<sp/>specifying<sp/>default<sp/>value<sp/>of<sp/>CSN<sp/>polarity<sp/>setting.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_SPIM_CSNPOL_DEFAULT<sp/>SPIM_CSNPOL_ResetValue</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_SPIM_CSNPOL_DEFAULT<sp/>0x0UL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRF_SPIM_HAS_HW_CSN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_SPIM_HAS_RXDELAY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(SPIM_IFTIMING_RXDELAY_ResetValue)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="228"><highlight class="comment">/**<sp/>@brief<sp/>Symbol<sp/>specifying<sp/>default<sp/>value<sp/>of<sp/>RX<sp/>delay<sp/>setting.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_SPIM_RXDELAY_DEFAULT<sp/>SPIM_IFTIMING_RXDELAY_ResetValue</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_SPIM_RXDELAY_DEFAULT<sp/>0x2UL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRF_SPIM_HAS_RXDELAY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="235"><highlight class="comment">/**<sp/>@brief<sp/>Minimal<sp/>SPIM<sp/>frequency<sp/>in<sp/>Hz.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_SPIM_MIN_FREQUENCY<sp/>(NRFX_KHZ_TO_HZ(125UL))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="238"><highlight class="comment">/**<sp/>@brief<sp/>Base<sp/>frequency<sp/>value<sp/>320<sp/>MHz<sp/>for<sp/>SPIM.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_SPIM_BASE_FREQUENCY_320MHZ<sp/>(NRFX_MHZ_TO_HZ(320UL))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="241"><highlight class="comment">/**<sp/>@brief<sp/>Base<sp/>frequency<sp/>value<sp/>192<sp/>MHz<sp/>for<sp/>SPIM.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_SPIM_BASE_FREQUENCY_192MHZ<sp/>(NRFX_MHZ_TO_HZ(192UL))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="244"><highlight class="comment">/**<sp/>@brief<sp/>Base<sp/>frequency<sp/>value<sp/>128<sp/>MHz<sp/>for<sp/>SPIM.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_SPIM_BASE_FREQUENCY_128MHZ<sp/>(NRFX_MHZ_TO_HZ(128UL))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="247"><highlight class="comment">/**<sp/>@brief<sp/>Base<sp/>frequency<sp/>value<sp/>64<sp/>MHz<sp/>for<sp/>SPIM.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_SPIM_BASE_FREQUENCY_64MHZ<sp/><sp/>(NRFX_MHZ_TO_HZ(64UL))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="250"><highlight class="comment">/**<sp/>@brief<sp/>Base<sp/>frequency<sp/>value<sp/>32<sp/>MHz<sp/>for<sp/>SPIM.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_SPIM_BASE_FREQUENCY_32MHZ<sp/><sp/>(NRFX_MHZ_TO_HZ(32UL))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="253"><highlight class="comment">/**<sp/>@brief<sp/>Base<sp/>frequency<sp/>value<sp/>16<sp/>MHz<sp/>for<sp/>SPIM.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_SPIM_BASE_FREQUENCY_16MHZ<sp/><sp/>(NRFX_MHZ_TO_HZ(16UL))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(NRF_SPIM_IS_320MHZ_SPIM)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="257"><highlight class="comment">/**<sp/>@brief<sp/>Macro<sp/>for<sp/>checking<sp/>whether<sp/>the<sp/>base<sp/>frequency<sp/>for<sp/>the<sp/>specified<sp/>SPIM<sp/>instance<sp/>is<sp/>320<sp/>MHz.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_SPIM_IS_320MHZ_SPIM(p_reg)<sp/>\</highlight></codeline>
<codeline lineno="259"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>(NRFX_COND_CODE_1(NRFX_INSTANCE_PRESENT(SPIM120),<sp/>(p_reg<sp/>==<sp/>NRF_SPIM120),<sp/>(false))<sp/>||<sp/>\</highlight></codeline>
<codeline lineno="260"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>NRFX_COND_CODE_1(NRFX_INSTANCE_PRESENT(SPIM121),<sp/>(p_reg<sp/>==<sp/>NRF_SPIM121),<sp/>(false)))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(NRF_SPIM_IS_192MHZ_SPIM)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="264"><highlight class="comment">/**<sp/>@brief<sp/>Macro<sp/>for<sp/>checking<sp/>whether<sp/>the<sp/>base<sp/>frequency<sp/>for<sp/>the<sp/>specified<sp/>SPIM<sp/>instance<sp/>is<sp/>192<sp/>MHz.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_SPIM_IS_192MHZ_SPIM(p_reg)<sp/>false</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(NRF_SPIM_IS_128MHZ_SPIM)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="269"><highlight class="comment">/**<sp/>@brief<sp/>Macro<sp/>for<sp/>checking<sp/>whether<sp/>the<sp/>base<sp/>frequency<sp/>for<sp/>the<sp/>specified<sp/>SPIM<sp/>instance<sp/>is<sp/>128<sp/>MHz.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_SPIM_IS_128MHZ_SPIM(p_reg)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="271"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>(NRFX_COND_CODE_1(NRFX_IS_ENABLED(NRF_CPU_FREQ_IS_128MHZ),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="272"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(NRFX_COND_CODE_1(NRFX_INSTANCE_PRESENT(SPIM00),<sp/>(p_reg<sp/>==<sp/>NRF_SPIM00),<sp/>(false))),<sp/>\</highlight></codeline>
<codeline lineno="273"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(false)))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(NRF_SPIM_IS_64MHZ_SPIM)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="277"><highlight class="comment">/**<sp/>@brief<sp/>Macro<sp/>for<sp/>checking<sp/>whether<sp/>the<sp/>base<sp/>frequency<sp/>for<sp/>the<sp/>specified<sp/>SPIM<sp/>instance<sp/>is<sp/>64<sp/>MHz.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_SPIM_IS_64MHZ_SPIM(p_reg)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="279"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>(NRFX_COND_CODE_1(NRFX_IS_ENABLED(NRF_CPU_FREQ_IS_64MHZ),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="280"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(NRFX_COND_CODE_1(NRFX_INSTANCE_PRESENT(SPIM00),<sp/>(p_reg<sp/>==<sp/>NRF_SPIM00),<sp/>(false))),<sp/>\</highlight></codeline>
<codeline lineno="281"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(false)))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(NRF_SPIM_IS_32MHZ_SPIM)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="285"><highlight class="comment">/**<sp/>@brief<sp/>Macro<sp/>for<sp/>checking<sp/>whether<sp/>the<sp/>base<sp/>frequency<sp/>for<sp/>the<sp/>specified<sp/>SPIM<sp/>instance<sp/>is<sp/>32<sp/>MHz.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_SPIM_IS_32MHZ_SPIM(p_reg)<sp/>false</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="289"><highlight class="comment">/**<sp/>@brief<sp/>Macro<sp/>for<sp/>getting<sp/>base<sp/>frequency<sp/>value<sp/>in<sp/>Hz<sp/>for<sp/>the<sp/>specified<sp/>SPIM<sp/>instance.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_SPIM_BASE_FREQUENCY_GET(p_reg)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="291"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>((NRF_SPIM_IS_320MHZ_SPIM(p_reg))<sp/>?<sp/>(NRF_SPIM_BASE_FREQUENCY_320MHZ)<sp/>:<sp/>\</highlight></codeline>
<codeline lineno="292"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>((NRF_SPIM_IS_192MHZ_SPIM(p_reg))<sp/>?<sp/>(NRF_SPIM_BASE_FREQUENCY_192MHZ)<sp/>:<sp/>\</highlight></codeline>
<codeline lineno="293"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>((NRF_SPIM_IS_128MHZ_SPIM(p_reg))<sp/>?<sp/>(NRF_SPIM_BASE_FREQUENCY_128MHZ)<sp/>:<sp/>\</highlight></codeline>
<codeline lineno="294"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>((NRF_SPIM_IS_64MHZ_SPIM(p_reg))<sp/><sp/>?<sp/>(NRF_SPIM_BASE_FREQUENCY_64MHZ)<sp/>:<sp/><sp/>\</highlight></codeline>
<codeline lineno="295"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>((NRF_SPIM_IS_32MHZ_SPIM(p_reg))<sp/><sp/>?<sp/>(NRF_SPIM_BASE_FREQUENCY_32MHZ)<sp/>:<sp/><sp/>\</highlight></codeline>
<codeline lineno="296"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>(NRF_SPIM_BASE_FREQUENCY_16MHZ))))))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_SPIM_HAS_PRESCALER</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="299"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="300"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Macro<sp/>for<sp/>getting<sp/>the<sp/>maximum<sp/>value<sp/>of<sp/>PRESCALER<sp/>register.</highlight></codeline>
<codeline lineno="301"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="302"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="303"><highlight class="comment"><sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_SPIM_PRESCALER_MAX_GET(p_reg)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="305"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>(NRFX_FOREACH_ENABLED(SPIM,<sp/>_NRF_SPIM_PRESCALER_MAX_GET,<sp/>(),<sp/>(),<sp/>p_reg)<sp/>\</highlight></codeline>
<codeline lineno="306"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>SPIM_PRESCALER_DIVISOR_Max)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="308"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="309"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Macro<sp/>for<sp/>getting<sp/>the<sp/>minimum<sp/>value<sp/>of<sp/>PRESCALER<sp/>register.</highlight></codeline>
<codeline lineno="310"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="311"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="312"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_SPIM_PRESCALER_MIN_GET(p_reg)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="314"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>(NRFX_FOREACH_ENABLED(SPIM,<sp/>_NRF_SPIM_PRESCALER_MIN_GET,<sp/>(),<sp/>(),<sp/>p_reg)<sp/>\</highlight></codeline>
<codeline lineno="315"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>SPIM_PRESCALER_DIVISOR_Min)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="317"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="318"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Macro<sp/>for<sp/>computing<sp/>prescaler<sp/>value<sp/>for<sp/>a<sp/>given<sp/>SPIM<sp/>instance<sp/>and<sp/>desired<sp/>frequency.</highlight></codeline>
<codeline lineno="319"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="320"><highlight class="comment"><sp/>*<sp/>@warning<sp/>Not<sp/>every<sp/>combination<sp/>of<sp/>base<sp/>and<sp/>desired<sp/>frequency<sp/>is<sp/>supported.</highlight></codeline>
<codeline lineno="321"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>@ref<sp/>NRF_SPIM_FREQUENCY_STATIC_CHECK<sp/>macro<sp/>can<sp/>be<sp/>used<sp/>to<sp/>check<sp/>if<sp/>the<sp/>desired<sp/>frequency<sp/>is<sp/>supported.</highlight></codeline>
<codeline lineno="322"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="323"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="324"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>frequency<sp/>Desired<sp/>frequency<sp/>value<sp/>in<sp/>Hz.</highlight></codeline>
<codeline lineno="325"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_SPIM_PRESCALER_CALCULATE(p_reg,<sp/>frequency)<sp/>\</highlight></codeline>
<codeline lineno="327"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)(NRF_SPIM_BASE_FREQUENCY_GET(p_reg))<sp/>/<sp/>(uint32_t)(frequency))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="330"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="331"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Macro<sp/>for<sp/>checking<sp/>whether<sp/>specified<sp/>frequency<sp/>can<sp/>be<sp/>achieved<sp/>for<sp/>a<sp/>given<sp/>SPIM<sp/>instance.</highlight></codeline>
<codeline lineno="332"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="333"><highlight class="comment"><sp/>*<sp/>@note<sp/>This<sp/>macro<sp/>uses<sp/>a<sp/>compile-time<sp/>assertion.</highlight></codeline>
<codeline lineno="334"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="335"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="336"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>frequency<sp/>Desired<sp/>frequency<sp/>value<sp/>in<sp/>Hz.</highlight></codeline>
<codeline lineno="337"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_SPIM_FREQUENCY_STATIC_CHECK(p_reg,<sp/>frequency)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="339"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>NRFX_STATIC_ASSERT(<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="340"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>NRFX_COND_CODE_1(NRF_SPIM_HAS_PRESCALER,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="341"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((NRF_SPIM_BASE_FREQUENCY_GET(p_reg)<sp/>%<sp/>(uint32_t)frequency<sp/>==<sp/>0)<sp/>&amp;&amp;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="342"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(NRFX_IS_EVEN(NRF_SPIM_PRESCALER_CALCULATE(p_reg,<sp/>(uint32_t)frequency)))<sp/>&amp;&amp;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="343"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(NRF_SPIM_PRESCALER_CALCULATE(p_reg,<sp/>(uint32_t)frequency)<sp/>&gt;=<sp/>(NRF_SPIM_PRESCALER_MIN_GET(p_reg)))<sp/>&amp;&amp;<sp/>\</highlight></codeline>
<codeline lineno="344"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(NRF_SPIM_PRESCALER_CALCULATE(p_reg,<sp/>(uint32_t)frequency)<sp/>&lt;=<sp/>(NRF_SPIM_PRESCALER_MAX_GET(p_reg))))<sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="345"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="346"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(((uint32_t)frequency<sp/>==<sp/>(uint32_t)NRFX_KHZ_TO_HZ(125))<sp/>||<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="347"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)frequency<sp/>==<sp/>(uint32_t)NRFX_KHZ_TO_HZ(250))<sp/>||<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="348"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)frequency<sp/>==<sp/>(uint32_t)NRFX_KHZ_TO_HZ(500))<sp/>||<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="349"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)frequency<sp/>==<sp/>(uint32_t)NRFX_MHZ_TO_HZ(1))<sp/><sp/><sp/>||<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="350"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)frequency<sp/>==<sp/>(uint32_t)NRFX_MHZ_TO_HZ(2))<sp/><sp/><sp/>||<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="351"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)frequency<sp/>==<sp/>(uint32_t)NRFX_MHZ_TO_HZ(4))<sp/><sp/><sp/>||<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="352"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)frequency<sp/>==<sp/>(uint32_t)NRFX_MHZ_TO_HZ(8))<sp/><sp/><sp/>||<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="353"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(((uint32_t)frequency<sp/>==<sp/>(uint32_t)NRFX_MHZ_TO_HZ(16))<sp/>&amp;&amp;<sp/>(NRF_SPIM_HAS_16_MHZ_FREQ))<sp/>||<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="354"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(((uint32_t)frequency<sp/>==<sp/>(uint32_t)NRFX_MHZ_TO_HZ(32))<sp/>&amp;&amp;<sp/>(NRF_SPIM_HAS_32_MHZ_FREQ)))))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="356"><highlight class="comment">/**<sp/>@brief<sp/>SPIM<sp/>tasks.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal">{</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__spim__hal_1gga2982879a943ea49b37cebd5abbe7fe84a5188b4263186c81d7f8ffbb44fc21d8e" kindref="member">NRF_SPIM_TASK_START</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_SPIM_Type,<sp/>TASKS_START),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Start<sp/>SPI<sp/>transaction.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__spim__hal_1gga2982879a943ea49b37cebd5abbe7fe84a305c8391fb7ef9cf6f420ecfb6d03fcc" kindref="member">NRF_SPIM_TASK_STOP</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_SPIM_Type,<sp/>TASKS_STOP),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Stop<sp/>SPI<sp/>transaction.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__spim__hal_1gga2982879a943ea49b37cebd5abbe7fe84a98235d4f5ba14053bc167f7f51ed7a8a" kindref="member">NRF_SPIM_TASK_SUSPEND</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_SPIM_Type,<sp/>TASKS_SUSPEND),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Suspend<sp/>SPI<sp/>transaction.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__spim__hal_1gga2982879a943ea49b37cebd5abbe7fe84a01746ab12b281296c36826337d665ad1" kindref="member">NRF_SPIM_TASK_RESUME</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_SPIM_Type,<sp/>TASKS_RESUME),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Resume<sp/>SPI<sp/>transaction.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_SPIM_HAS_DMA_TASKS_EVENTS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__spim__hal_1gga2982879a943ea49b37cebd5abbe7fe84a2703f383e69e2ea2397dd592614d89f8" kindref="member">NRF_SPIM_TASK_ENABLERXMATCH0</ref><sp/><sp/>=<sp/>offsetof(NRF_SPIM_Type,<sp/>TASKS_DMA.RX.ENABLEMATCH[0]),<sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Enable<sp/>SPI<sp/>pattern<sp/>matching<sp/>functionality<sp/>for<sp/>pattern<sp/>0.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__spim__hal_1gga2982879a943ea49b37cebd5abbe7fe84ababdfbc754dc5bc6338adc9339e2279d" kindref="member">NRF_SPIM_TASK_ENABLERXMATCH1</ref><sp/><sp/>=<sp/>offsetof(NRF_SPIM_Type,<sp/>TASKS_DMA.RX.ENABLEMATCH[1]),<sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Enable<sp/>SPI<sp/>pattern<sp/>matching<sp/>functionality<sp/>for<sp/>pattern<sp/>1.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__spim__hal_1gga2982879a943ea49b37cebd5abbe7fe84af8ec343fc9b2382e12975a55eccdd401" kindref="member">NRF_SPIM_TASK_ENABLERXMATCH2</ref><sp/><sp/>=<sp/>offsetof(NRF_SPIM_Type,<sp/>TASKS_DMA.RX.ENABLEMATCH[2]),<sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Enable<sp/>SPI<sp/>pattern<sp/>matching<sp/>functionality<sp/>for<sp/>pattern<sp/>2.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__spim__hal_1gga2982879a943ea49b37cebd5abbe7fe84a004b96e0df35a1f60cd003d0df62ec84" kindref="member">NRF_SPIM_TASK_ENABLERXMATCH3</ref><sp/><sp/>=<sp/>offsetof(NRF_SPIM_Type,<sp/>TASKS_DMA.RX.ENABLEMATCH[3]),<sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Enable<sp/>SPI<sp/>pattern<sp/>matching<sp/>functionality<sp/>for<sp/>pattern<sp/>3.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__spim__hal_1gga2982879a943ea49b37cebd5abbe7fe84ab8d84055b65b2e30d245ff72abd7a73e" kindref="member">NRF_SPIM_TASK_DISABLERXMATCH0</ref><sp/>=<sp/>offsetof(NRF_SPIM_Type,<sp/>TASKS_DMA.RX.DISABLEMATCH[0]),<sp/></highlight><highlight class="comment">///&lt;<sp/>Disable<sp/>SPI<sp/>pattern<sp/>matching<sp/>functionality<sp/>for<sp/>pattern<sp/>0.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__spim__hal_1gga2982879a943ea49b37cebd5abbe7fe84a08332e887ff141a82a66dbfaad3f4dd0" kindref="member">NRF_SPIM_TASK_DISABLERXMATCH1</ref><sp/>=<sp/>offsetof(NRF_SPIM_Type,<sp/>TASKS_DMA.RX.DISABLEMATCH[1]),<sp/></highlight><highlight class="comment">///&lt;<sp/>Disable<sp/>SPI<sp/>pattern<sp/>matching<sp/>functionality<sp/>for<sp/>pattern<sp/>1.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__spim__hal_1gga2982879a943ea49b37cebd5abbe7fe84a7c2ddb9282ab965abf221d428c6f4c18" kindref="member">NRF_SPIM_TASK_DISABLERXMATCH2</ref><sp/>=<sp/>offsetof(NRF_SPIM_Type,<sp/>TASKS_DMA.RX.DISABLEMATCH[2]),<sp/></highlight><highlight class="comment">///&lt;<sp/>Disable<sp/>SPI<sp/>pattern<sp/>matching<sp/>functionality<sp/>for<sp/>pattern<sp/>2.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__spim__hal_1gga2982879a943ea49b37cebd5abbe7fe84a8d3bbdf2ed934ba0cf019a0f2f7cc2ab" kindref="member">NRF_SPIM_TASK_DISABLERXMATCH3</ref><sp/>=<sp/>offsetof(NRF_SPIM_Type,<sp/>TASKS_DMA.RX.DISABLEMATCH[3])<sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Disable<sp/>SPI<sp/>pattern<sp/>matching<sp/>functionality<sp/>for<sp/>pattern<sp/>3.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal">}<sp/><ref refid="group__nrf__spim__hal_1ga2982879a943ea49b37cebd5abbe7fe84" kindref="member">nrf_spim_task_t</ref>;</highlight></codeline>
<codeline lineno="374"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="375"><highlight class="comment">/**<sp/>@brief<sp/>SPIM<sp/>events.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal">{</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__spim__hal_1ggad3a00dacc9f2c0ebeedddd88a2a03f6ea8c7b3599214eab130a5661a049bf0622" kindref="member">NRF_SPIM_EVENT_STARTED</ref><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_SPIM_Type,<sp/>EVENTS_STARTED),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>SPI<sp/>transaction<sp/>has<sp/>started.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__spim__hal_1ggad3a00dacc9f2c0ebeedddd88a2a03f6ea6de9fdf692c7a973adf9dd42a24013e7" kindref="member">NRF_SPIM_EVENT_STOPPED</ref><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_SPIM_Type,<sp/>EVENTS_STOPPED),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>SPI<sp/>transaction<sp/>has<sp/>stopped.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="380"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_SPIM_HAS_DMA_TASKS_EVENTS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__spim__hal_1ggad3a00dacc9f2c0ebeedddd88a2a03f6ea68de147ef75dcc8a67816030ebb8b996" kindref="member">NRF_SPIM_EVENT_RXSTARTED</ref><sp/><sp/>=<sp/>offsetof(NRF_SPIM_Type,<sp/>EVENTS_DMA.RX.READY),<sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Receive<sp/>sequence<sp/>started.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__spim__hal_1ggad3a00dacc9f2c0ebeedddd88a2a03f6ea46a4305a3be71099cc9b978e21a5c741" kindref="member">NRF_SPIM_EVENT_RXBUSERROR</ref><sp/>=<sp/>offsetof(NRF_SPIM_Type,<sp/>EVENTS_DMA.RX.BUSERROR),<sp/></highlight><highlight class="comment">///&lt;<sp/>Memory<sp/>bus<sp/>error<sp/>occurred<sp/>during<sp/>the<sp/>RX<sp/>transfer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__spim__hal_1ggad3a00dacc9f2c0ebeedddd88a2a03f6ea7c32f82002fda2747eacd39b874de819" kindref="member">NRF_SPIM_EVENT_RXMATCH0</ref><sp/><sp/><sp/>=<sp/>offsetof(NRF_SPIM_Type,<sp/>EVENTS_DMA.RX.MATCH[0]),<sp/></highlight><highlight class="comment">///&lt;<sp/>Pattern<sp/>match<sp/>for<sp/>pattern<sp/>0<sp/>detected.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__spim__hal_1ggad3a00dacc9f2c0ebeedddd88a2a03f6eae4a26aaffeaa77dd59f3d1139a1d2890" kindref="member">NRF_SPIM_EVENT_RXMATCH1</ref><sp/><sp/><sp/>=<sp/>offsetof(NRF_SPIM_Type,<sp/>EVENTS_DMA.RX.MATCH[1]),<sp/></highlight><highlight class="comment">///&lt;<sp/>Pattern<sp/>match<sp/>for<sp/>pattern<sp/>1<sp/>detected.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__spim__hal_1ggad3a00dacc9f2c0ebeedddd88a2a03f6ea6b83045faf4a13d49280345e7f800ac3" kindref="member">NRF_SPIM_EVENT_RXMATCH2</ref><sp/><sp/><sp/>=<sp/>offsetof(NRF_SPIM_Type,<sp/>EVENTS_DMA.RX.MATCH[2]),<sp/></highlight><highlight class="comment">///&lt;<sp/>Pattern<sp/>match<sp/>for<sp/>pattern<sp/>2<sp/>detected.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__spim__hal_1ggad3a00dacc9f2c0ebeedddd88a2a03f6ead053f92b1bf56d00238bfbb80075a63e" kindref="member">NRF_SPIM_EVENT_RXMATCH3</ref><sp/><sp/><sp/>=<sp/>offsetof(NRF_SPIM_Type,<sp/>EVENTS_DMA.RX.MATCH[3]),<sp/></highlight><highlight class="comment">///&lt;<sp/>Pattern<sp/>match<sp/>for<sp/>pattern<sp/>3<sp/>detected.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__spim__hal_1ggad3a00dacc9f2c0ebeedddd88a2a03f6ea4cfbaeffe2dcdc3d7ecd32f784a744e0" kindref="member">NRF_SPIM_EVENT_TXSTARTED</ref><sp/><sp/>=<sp/>offsetof(NRF_SPIM_Type,<sp/>EVENTS_DMA.TX.READY),<sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Transmit<sp/>sequence<sp/>started.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__spim__hal_1ggad3a00dacc9f2c0ebeedddd88a2a03f6ea7037eb18cb5c237e532f4c4f11d5e4c8" kindref="member">NRF_SPIM_EVENT_TXBUSERROR</ref><sp/>=<sp/>offsetof(NRF_SPIM_Type,<sp/>EVENTS_DMA.TX.BUSERROR),<sp/></highlight><highlight class="comment">///&lt;<sp/>Memory<sp/>bus<sp/>error<sp/>occurred<sp/>during<sp/>the<sp/>TX<sp/>transfer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__spim__hal_1ggad3a00dacc9f2c0ebeedddd88a2a03f6eaa83e64148f6cbfc56d19f809fd03081e" kindref="member">NRF_SPIM_EVENT_ENDRX</ref><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_SPIM_Type,<sp/>EVENTS_DMA.RX.END),<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>End<sp/>of<sp/>RXD<sp/>buffer<sp/>reached.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__spim__hal_1ggad3a00dacc9f2c0ebeedddd88a2a03f6ea73d9f975cb5a43340c9907f9e1b25939" kindref="member">NRF_SPIM_EVENT_ENDTX</ref><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_SPIM_Type,<sp/>EVENTS_DMA.TX.END),<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>End<sp/>of<sp/>TXD<sp/>buffer<sp/>reached.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__spim__hal_1ggad3a00dacc9f2c0ebeedddd88a2a03f6eaa83e64148f6cbfc56d19f809fd03081e" kindref="member">NRF_SPIM_EVENT_ENDRX</ref><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_SPIM_Type,<sp/>EVENTS_ENDRX),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>End<sp/>of<sp/>RXD<sp/>buffer<sp/>reached.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__spim__hal_1ggad3a00dacc9f2c0ebeedddd88a2a03f6ea73d9f975cb5a43340c9907f9e1b25939" kindref="member">NRF_SPIM_EVENT_ENDTX</ref><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_SPIM_Type,<sp/>EVENTS_ENDTX),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>End<sp/>of<sp/>TXD<sp/>buffer<sp/>reached.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__spim__hal_1ggad3a00dacc9f2c0ebeedddd88a2a03f6ea1e4f7c0bbf075459d38eb74a7c5e8664" kindref="member">NRF_SPIM_EVENT_END</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_SPIM_Type,<sp/>EVENTS_END)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>End<sp/>of<sp/>RXD<sp/>buffer<sp/>and<sp/>TXD<sp/>buffer<sp/>reached.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="396"><highlight class="normal">}<sp/><ref refid="group__nrf__spim__hal_1gad3a00dacc9f2c0ebeedddd88a2a03f6e" kindref="member">nrf_spim_event_t</ref>;</highlight></codeline>
<codeline lineno="397"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="398"><highlight class="comment">/**<sp/>@brief<sp/>SPIM<sp/>shortcuts.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal">{</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__spim__hal_1ggaf562449d8589bf1199765beeff9b78d4a2eb1a5496a1913e20a742814a4dbf678" kindref="member">NRF_SPIM_SHORT_END_START_MASK</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>SPIM_SHORTS_END_START_Msk,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Shortcut<sp/>between<sp/>END<sp/>event<sp/>and<sp/>START<sp/>task.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_SPIM_HAS_DMA_TASKS_EVENTS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__spim__hal_1ggaf562449d8589bf1199765beeff9b78d4afae75e2f1ff2412ff13635724719d296" kindref="member">NRF_SPIM_SHORT_RXMATCH0_ENABLERXMATCH1_MASK</ref><sp/><sp/>=<sp/>SPIM_SHORTS_DMA_RX_MATCH0_DMA_RX_ENABLEMATCH1_Msk,<sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Shortcut<sp/>between<sp/>DMA.RX.MATCH0<sp/>event<sp/>and<sp/>DMA.RX.ENABLEMATCH1<sp/>task.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__spim__hal_1ggaf562449d8589bf1199765beeff9b78d4a54de5a6d2fca5d9ec7c314bcca821e46" kindref="member">NRF_SPIM_SHORT_RXMATCH1_ENABLERXMATCH2_MASK</ref><sp/><sp/>=<sp/>SPIM_SHORTS_DMA_RX_MATCH1_DMA_RX_ENABLEMATCH2_Msk,<sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Shortcut<sp/>between<sp/>DMA.RX.MATCH1<sp/>event<sp/>and<sp/>DMA.RX.ENABLEMATCH2<sp/>task.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__spim__hal_1ggaf562449d8589bf1199765beeff9b78d4a8f5a8cb9b1a082234a5241393b8ee86b" kindref="member">NRF_SPIM_SHORT_RXMATCH2_ENABLERXMATCH3_MASK</ref><sp/><sp/>=<sp/>SPIM_SHORTS_DMA_RX_MATCH2_DMA_RX_ENABLEMATCH3_Msk,<sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Shortcut<sp/>between<sp/>DMA.RX.MATCH2<sp/>event<sp/>and<sp/>DMA.RX.ENABLEMATCH3<sp/>task.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__spim__hal_1ggaf562449d8589bf1199765beeff9b78d4a2561dac38f7f7482bbb2c92b9dd4368d" kindref="member">NRF_SPIM_SHORT_RXMATCH3_ENABLERXMATCH0_MASK</ref><sp/><sp/>=<sp/>SPIM_SHORTS_DMA_RX_MATCH3_DMA_RX_ENABLEMATCH0_Msk,<sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Shortcut<sp/>between<sp/>DMA.RX.MATCH3<sp/>event<sp/>and<sp/>DMA.RX.ENABLEMATCH4<sp/>task.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__spim__hal_1ggaf562449d8589bf1199765beeff9b78d4a97505d2f871b78f8574701fc6c2c66e8" kindref="member">NRF_SPIM_SHORT_RXMATCH0_DISABLERXMATCH0_MASK</ref><sp/>=<sp/>SPIM_SHORTS_DMA_RX_MATCH0_DMA_RX_DISABLEMATCH0_Msk,<sp/></highlight><highlight class="comment">///&lt;<sp/>Shortcut<sp/>between<sp/>DMA.RX.MATCH0<sp/>event<sp/>and<sp/>DMA.RX.DISABLEMATCH0<sp/>task.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__spim__hal_1ggaf562449d8589bf1199765beeff9b78d4a23dc25d06a52318e876f6933d3ab73cc" kindref="member">NRF_SPIM_SHORT_RXMATCH1_DISABLERXMATCH1_MASK</ref><sp/>=<sp/>SPIM_SHORTS_DMA_RX_MATCH1_DMA_RX_DISABLEMATCH1_Msk,<sp/></highlight><highlight class="comment">///&lt;<sp/>Shortcut<sp/>between<sp/>DMA.RX.MATCH1<sp/>event<sp/>and<sp/>DMA.RX.DISABLEMATCH1<sp/>task.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__spim__hal_1ggaf562449d8589bf1199765beeff9b78d4a11aa1f1e5475403aed2ba6dc320b7b29" kindref="member">NRF_SPIM_SHORT_RXMATCH2_DISABLERXMATCH2_MASK</ref><sp/>=<sp/>SPIM_SHORTS_DMA_RX_MATCH2_DMA_RX_DISABLEMATCH2_Msk,<sp/></highlight><highlight class="comment">///&lt;<sp/>Shortcut<sp/>between<sp/>DMA.RX.MATCH2<sp/>event<sp/>and<sp/>DMA.RX.DISABLEMATCH2<sp/>task.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__spim__hal_1ggaf562449d8589bf1199765beeff9b78d4a4651a49762262a36522ae3b43af93b91" kindref="member">NRF_SPIM_SHORT_RXMATCH3_DISABLERXMATCH3_MASK</ref><sp/>=<sp/>SPIM_SHORTS_DMA_RX_MATCH3_DMA_RX_DISABLEMATCH3_Msk,<sp/></highlight><highlight class="comment">///&lt;<sp/>Shortcut<sp/>between<sp/>DMA.RX.MATCH3<sp/>event<sp/>and<sp/>DMA.RX.DISABLEMATCH3<sp/>task.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="411"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__spim__hal_1ggaf562449d8589bf1199765beeff9b78d4add45427651ba464c57c033207677a577" kindref="member">NRF_SPIM_ALL_SHORTS_MASK</ref><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>SPIM_SHORTS_END_START_Msk</highlight></codeline>
<codeline lineno="413"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_SPIM_HAS_DMA_TASKS_EVENTS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>SPIM_SHORTS_DMA_RX_MATCH0_DMA_RX_ENABLEMATCH1_Msk</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>SPIM_SHORTS_DMA_RX_MATCH1_DMA_RX_ENABLEMATCH2_Msk</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>SPIM_SHORTS_DMA_RX_MATCH2_DMA_RX_ENABLEMATCH3_Msk</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>SPIM_SHORTS_DMA_RX_MATCH3_DMA_RX_ENABLEMATCH0_Msk</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>SPIM_SHORTS_DMA_RX_MATCH0_DMA_RX_DISABLEMATCH0_Msk</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>SPIM_SHORTS_DMA_RX_MATCH1_DMA_RX_DISABLEMATCH1_Msk</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>SPIM_SHORTS_DMA_RX_MATCH2_DMA_RX_DISABLEMATCH2_Msk</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>SPIM_SHORTS_DMA_RX_MATCH3_DMA_RX_DISABLEMATCH3_Msk<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>All<sp/>SPIM<sp/>shortcuts.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="423"><highlight class="normal">}<sp/><ref refid="group__nrf__spim__hal_1gaf562449d8589bf1199765beeff9b78d4" kindref="member">nrf_spim_short_mask_t</ref>;</highlight></codeline>
<codeline lineno="424"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="425"><highlight class="comment">/**<sp/>@brief<sp/>SPIM<sp/>interrupts.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="426"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="427"><highlight class="normal">{</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__spim__hal_1gga4a5f83e02f7d7ad04f8ab305804cabfda762dd9775fa3e6c00bd1fba886af2a51" kindref="member">NRF_SPIM_INT_STARTED_MASK</ref><sp/><sp/><sp/><sp/>=<sp/>SPIM_INTENSET_STARTED_Msk,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Interrupt<sp/>on<sp/>STARTED<sp/>event.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__spim__hal_1gga4a5f83e02f7d7ad04f8ab305804cabfda8bf63f95e7291da7d3fa47cdf994daa4" kindref="member">NRF_SPIM_INT_STOPPED_MASK</ref><sp/><sp/><sp/><sp/>=<sp/>SPIM_INTENSET_STOPPED_Msk,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Interrupt<sp/>on<sp/>STOPPED<sp/>event.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_SPIM_HAS_DMA_TASKS_EVENTS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__spim__hal_1gga4a5f83e02f7d7ad04f8ab305804cabfda44366f5c57251b0c7e5b749f2e9b9046" kindref="member">NRF_SPIM_INT_RXREADY_MASK</ref><sp/><sp/><sp/><sp/>=<sp/>SPIM_INTENSET_DMARXREADY_Msk,<sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Interrupt<sp/>on<sp/>DMA.RX.READY<sp/>event.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__spim__hal_1gga4a5f83e02f7d7ad04f8ab305804cabfdac2a1622c5f0aa4d7d50afc21ae100e2a" kindref="member">NRF_SPIM_INT_RXBUSERROR_MASK</ref><sp/>=<sp/>SPIM_INTENSET_DMARXBUSERROR_Msk,<sp/></highlight><highlight class="comment">///&lt;<sp/>Interrupt<sp/>on<sp/>DMA.RX.BUSERROR<sp/>event.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__spim__hal_1gga4a5f83e02f7d7ad04f8ab305804cabfda80f85eadbd875546fa4f48e4d92943cd" kindref="member">NRF_SPIM_INT_RXMATCH0_MASK</ref><sp/><sp/><sp/>=<sp/>SPIM_INTENSET_DMARXMATCH0_Msk,<sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Interrupt<sp/>on<sp/>DMA.RX.MATCH0<sp/>event.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__spim__hal_1gga4a5f83e02f7d7ad04f8ab305804cabfdac6a5a13da48feb018588aae6b2f3541c" kindref="member">NRF_SPIM_INT_RXMATCH1_MASK</ref><sp/><sp/><sp/>=<sp/>SPIM_INTENSET_DMARXMATCH1_Msk,<sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Interrupt<sp/>on<sp/>DMA.RX.MATCH1<sp/>event.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__spim__hal_1gga4a5f83e02f7d7ad04f8ab305804cabfda766f9da35bd8136f736374b9e47d1b4e" kindref="member">NRF_SPIM_INT_RXMATCH2_MASK</ref><sp/><sp/><sp/>=<sp/>SPIM_INTENSET_DMARXMATCH2_Msk,<sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Interrupt<sp/>on<sp/>DMA.RX.MATCH2<sp/>event.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__spim__hal_1gga4a5f83e02f7d7ad04f8ab305804cabfdabec69e8d2e607ec49cff6a9b6beee6a1" kindref="member">NRF_SPIM_INT_RXMATCH3_MASK</ref><sp/><sp/><sp/>=<sp/>SPIM_INTENSET_DMARXMATCH3_Msk,<sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Interrupt<sp/>on<sp/>DMA.RX.MATCH3<sp/>event.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__spim__hal_1gga4a5f83e02f7d7ad04f8ab305804cabfda70a0907623c3701dc36318084cdd2e8a" kindref="member">NRF_SPIM_INT_TXREADY_MASK</ref><sp/><sp/><sp/><sp/>=<sp/>SPIM_INTENSET_DMATXREADY_Msk,<sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Interrupt<sp/>on<sp/>DMA.TX.READY<sp/>event.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__spim__hal_1gga4a5f83e02f7d7ad04f8ab305804cabfda363329ba6646f58e54b583d63231e8e5" kindref="member">NRF_SPIM_INT_TXBUSERROR_MASK</ref><sp/>=<sp/>SPIM_INTENSET_DMATXBUSERROR_Msk,<sp/></highlight><highlight class="comment">///&lt;<sp/>Interrupt<sp/>on<sp/>DMA.TX.BUSERROR<sp/>event.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__spim__hal_1gga4a5f83e02f7d7ad04f8ab305804cabfda4a684fe1ac27f80b4830995e8c06946c" kindref="member">NRF_SPIM_INT_ENDRX_MASK</ref><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>SPIM_INTENSET_DMARXEND_Msk,<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Interrupt<sp/>on<sp/>ENDRX<sp/>event.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__spim__hal_1gga4a5f83e02f7d7ad04f8ab305804cabfda4dfbb2ab2800953c075c4066e83d53d6" kindref="member">NRF_SPIM_INT_ENDTX_MASK</ref><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>SPIM_INTENSET_DMATXEND_Msk,<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Interrupt<sp/>on<sp/>ENDTX<sp/>event.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="441"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__spim__hal_1gga4a5f83e02f7d7ad04f8ab305804cabfda4a684fe1ac27f80b4830995e8c06946c" kindref="member">NRF_SPIM_INT_ENDRX_MASK</ref><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>SPIM_INTENSET_ENDRX_Msk,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Interrupt<sp/>on<sp/>ENDRX<sp/>event.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__spim__hal_1gga4a5f83e02f7d7ad04f8ab305804cabfda4dfbb2ab2800953c075c4066e83d53d6" kindref="member">NRF_SPIM_INT_ENDTX_MASK</ref><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>SPIM_INTENSET_ENDTX_Msk,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Interrupt<sp/>on<sp/>ENDTX<sp/>event.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="444"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__spim__hal_1gga4a5f83e02f7d7ad04f8ab305804cabfda3e91596e7f323cb23dc0b356ff4294e4" kindref="member">NRF_SPIM_INT_END_MASK</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>SPIM_INTENSET_END_Msk,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Interrupt<sp/>on<sp/>END<sp/>event.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__spim__hal_1gga4a5f83e02f7d7ad04f8ab305804cabfda5932e4a80b3dc9c19768e60e72e31af4" kindref="member">NRF_SPIM_ALL_INTS_MASK</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><ref refid="group__nrf__spim__hal_1gga4a5f83e02f7d7ad04f8ab305804cabfda762dd9775fa3e6c00bd1fba886af2a51" kindref="member">NRF_SPIM_INT_STARTED_MASK</ref></highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><ref refid="group__nrf__spim__hal_1gga4a5f83e02f7d7ad04f8ab305804cabfda8bf63f95e7291da7d3fa47cdf994daa4" kindref="member">NRF_SPIM_INT_STOPPED_MASK</ref></highlight></codeline>
<codeline lineno="448"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_SPIM_HAS_DMA_TASKS_EVENTS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><ref refid="group__nrf__spim__hal_1gga4a5f83e02f7d7ad04f8ab305804cabfda44366f5c57251b0c7e5b749f2e9b9046" kindref="member">NRF_SPIM_INT_RXREADY_MASK</ref></highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><ref refid="group__nrf__spim__hal_1gga4a5f83e02f7d7ad04f8ab305804cabfdac2a1622c5f0aa4d7d50afc21ae100e2a" kindref="member">NRF_SPIM_INT_RXBUSERROR_MASK</ref></highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><ref refid="group__nrf__spim__hal_1gga4a5f83e02f7d7ad04f8ab305804cabfda80f85eadbd875546fa4f48e4d92943cd" kindref="member">NRF_SPIM_INT_RXMATCH0_MASK</ref></highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><ref refid="group__nrf__spim__hal_1gga4a5f83e02f7d7ad04f8ab305804cabfdac6a5a13da48feb018588aae6b2f3541c" kindref="member">NRF_SPIM_INT_RXMATCH1_MASK</ref></highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><ref refid="group__nrf__spim__hal_1gga4a5f83e02f7d7ad04f8ab305804cabfda766f9da35bd8136f736374b9e47d1b4e" kindref="member">NRF_SPIM_INT_RXMATCH2_MASK</ref></highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><ref refid="group__nrf__spim__hal_1gga4a5f83e02f7d7ad04f8ab305804cabfdabec69e8d2e607ec49cff6a9b6beee6a1" kindref="member">NRF_SPIM_INT_RXMATCH3_MASK</ref></highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><ref refid="group__nrf__spim__hal_1gga4a5f83e02f7d7ad04f8ab305804cabfda70a0907623c3701dc36318084cdd2e8a" kindref="member">NRF_SPIM_INT_TXREADY_MASK</ref></highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><ref refid="group__nrf__spim__hal_1gga4a5f83e02f7d7ad04f8ab305804cabfda363329ba6646f58e54b583d63231e8e5" kindref="member">NRF_SPIM_INT_TXBUSERROR_MASK</ref></highlight></codeline>
<codeline lineno="457"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><ref refid="group__nrf__spim__hal_1gga4a5f83e02f7d7ad04f8ab305804cabfda4a684fe1ac27f80b4830995e8c06946c" kindref="member">NRF_SPIM_INT_ENDRX_MASK</ref></highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><ref refid="group__nrf__spim__hal_1gga4a5f83e02f7d7ad04f8ab305804cabfda4dfbb2ab2800953c075c4066e83d53d6" kindref="member">NRF_SPIM_INT_ENDTX_MASK</ref></highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><ref refid="group__nrf__spim__hal_1gga4a5f83e02f7d7ad04f8ab305804cabfda3e91596e7f323cb23dc0b356ff4294e4" kindref="member">NRF_SPIM_INT_END_MASK</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>All<sp/>SPIM<sp/>interrupts.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="461"><highlight class="normal">}<sp/><ref refid="group__nrf__spim__hal_1ga4a5f83e02f7d7ad04f8ab305804cabfd" kindref="member">nrf_spim_int_mask_t</ref>;</highlight></codeline>
<codeline lineno="462"><highlight class="normal"></highlight></codeline>
<codeline lineno="463"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_SPIM_HAS_FREQUENCY</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="464"><highlight class="comment">/**<sp/>@brief<sp/>SPI<sp/>master<sp/>data<sp/>rates.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="465"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="466"><highlight class="normal">{</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__spim__hal_1gga5e37c3150ccd77887556edd6afbe3f65aef136194470630f0cb2c2c2072ff89b9" kindref="member">NRF_SPIM_FREQ_125K</ref><sp/>=<sp/>SPIM_FREQUENCY_FREQUENCY_K125,<sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>125<sp/>kbps.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__spim__hal_1gga5e37c3150ccd77887556edd6afbe3f65aee27fca7c870915a46aeb5f423bd7eed" kindref="member">NRF_SPIM_FREQ_250K</ref><sp/>=<sp/>SPIM_FREQUENCY_FREQUENCY_K250,<sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>250<sp/>kbps.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__spim__hal_1gga5e37c3150ccd77887556edd6afbe3f65a4af6087bed6df45564585bb543bdaef7" kindref="member">NRF_SPIM_FREQ_500K</ref><sp/>=<sp/>SPIM_FREQUENCY_FREQUENCY_K500,<sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>500<sp/>kbps.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__spim__hal_1gga5e37c3150ccd77887556edd6afbe3f65ab3e71da73de998653326af888acfdc17" kindref="member">NRF_SPIM_FREQ_1M</ref><sp/><sp/><sp/>=<sp/>SPIM_FREQUENCY_FREQUENCY_M1,<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>1<sp/>Mbps.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__spim__hal_1gga5e37c3150ccd77887556edd6afbe3f65a0ac54797d254372986e1c8e85fc64a2c" kindref="member">NRF_SPIM_FREQ_2M</ref><sp/><sp/><sp/>=<sp/>SPIM_FREQUENCY_FREQUENCY_M2,<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>2<sp/>Mbps.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__spim__hal_1gga5e37c3150ccd77887556edd6afbe3f65ab35bb5d880b658d451fc268f6aaec3c3" kindref="member">NRF_SPIM_FREQ_4M</ref><sp/><sp/><sp/>=<sp/>SPIM_FREQUENCY_FREQUENCY_M4,<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>4<sp/>Mbps.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Conversion<sp/>to<sp/>int<sp/>is<sp/>needed<sp/>to<sp/>prevent<sp/>compilers<sp/>from<sp/>getting<sp/>an<sp/>error<sp/>message</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>that<sp/>the<sp/>provided<sp/>value<sp/>(0x80000000UL)<sp/>is<sp/>out<sp/>of<sp/>range<sp/>for<sp/>int.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__spim__hal_1gga5e37c3150ccd77887556edd6afbe3f65a772e5e88c7b7db33e49408ae405af3f1" kindref="member">NRF_SPIM_FREQ_8M</ref><sp/><sp/><sp/>=<sp/>(int)SPIM_FREQUENCY_FREQUENCY_M8,<sp/></highlight><highlight class="comment">///&lt;<sp/>8<sp/>Mbps.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="476"><highlight class="normal">#</highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/><ref refid="group__nrf__spim__hal_1gadd69c3afe654abbb5f230287df2d309b" kindref="member">NRF_SPIM_HAS_16_MHZ_FREQ</ref></highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__spim__hal_1gga5e37c3150ccd77887556edd6afbe3f65ab0f903ec64739799dbc4e6b7c11442d0" kindref="member">NRF_SPIM_FREQ_16M</ref><sp/><sp/>=<sp/>SPIM_FREQUENCY_FREQUENCY_M16,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>16<sp/>Mbps.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="478"><highlight class="normal">#endif</highlight></codeline>
<codeline lineno="479"><highlight class="normal">#</highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/><ref refid="group__nrf__spim__hal_1ga50a27799325f678f260e224e54fed0fa" kindref="member">NRF_SPIM_HAS_32_MHZ_FREQ</ref></highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__spim__hal_1gga5e37c3150ccd77887556edd6afbe3f65ac25c20d88dc026387d40f7743948880f" kindref="member">NRF_SPIM_FREQ_32M</ref><sp/><sp/>=<sp/>SPIM_FREQUENCY_FREQUENCY_M32<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>32<sp/>Mbps.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="481"><highlight class="normal">#endif</highlight></codeline>
<codeline lineno="482"><highlight class="normal">}<sp/><ref refid="group__nrf__spim__hal_1ga5e37c3150ccd77887556edd6afbe3f65" kindref="member">nrf_spim_frequency_t</ref>;</highlight></codeline>
<codeline lineno="483"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRF_SPIM_HAS_FREQUENCY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="484"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="485"><highlight class="comment">/**<sp/>@brief<sp/>SPI<sp/>modes.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="486"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="487"><highlight class="normal">{</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__spim__hal_1ggaf6ad2321f2fd4a896c097b5d4040ff94a6107c880e9b97cfc936071cc1d4ba27f" kindref="member">NRF_SPIM_MODE_0</ref>,<sp/></highlight><highlight class="comment">///&lt;<sp/>SCK<sp/>active<sp/>high,<sp/>sample<sp/>on<sp/>leading<sp/>edge<sp/>of<sp/>clock.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__spim__hal_1ggaf6ad2321f2fd4a896c097b5d4040ff94a2515ae701d523ee8c950c05e1075c53c" kindref="member">NRF_SPIM_MODE_1</ref>,<sp/></highlight><highlight class="comment">///&lt;<sp/>SCK<sp/>active<sp/>high,<sp/>sample<sp/>on<sp/>trailing<sp/>edge<sp/>of<sp/>clock.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__spim__hal_1ggaf6ad2321f2fd4a896c097b5d4040ff94a1a1a93d748a15af61bffbb1d4fe099dd" kindref="member">NRF_SPIM_MODE_2</ref>,<sp/></highlight><highlight class="comment">///&lt;<sp/>SCK<sp/>active<sp/>low,<sp/>sample<sp/>on<sp/>leading<sp/>edge<sp/>of<sp/>clock.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__spim__hal_1ggaf6ad2321f2fd4a896c097b5d4040ff94a2368e8c2513b90b07310cbfa2efbfc38" kindref="member">NRF_SPIM_MODE_3</ref><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>SCK<sp/>active<sp/>low,<sp/>sample<sp/>on<sp/>trailing<sp/>edge<sp/>of<sp/>clock.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="492"><highlight class="normal">}<sp/><ref refid="group__nrf__spim__hal_1gaf6ad2321f2fd4a896c097b5d4040ff94" kindref="member">nrf_spim_mode_t</ref>;</highlight></codeline>
<codeline lineno="493"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="494"><highlight class="comment">/**<sp/>@brief<sp/>SPI<sp/>bit<sp/>orders.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="495"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="496"><highlight class="normal">{</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__spim__hal_1gga37c6bc10f199291b31990254df1b7e21a4e6b4f768edb02728f27c0dd8f7f749b" kindref="member">NRF_SPIM_BIT_ORDER_MSB_FIRST</ref><sp/>=<sp/>SPIM_CONFIG_ORDER_MsbFirst,<sp/></highlight><highlight class="comment">///&lt;<sp/>Most<sp/>significant<sp/>bit<sp/>shifted<sp/>out<sp/>first.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__spim__hal_1gga37c6bc10f199291b31990254df1b7e21a8731e5300238a3db9896225f49e4e7bf" kindref="member">NRF_SPIM_BIT_ORDER_LSB_FIRST</ref><sp/>=<sp/>SPIM_CONFIG_ORDER_LsbFirst<sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Least<sp/>significant<sp/>bit<sp/>shifted<sp/>out<sp/>first.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="499"><highlight class="normal">}<sp/><ref refid="group__nrf__spim__hal_1ga37c6bc10f199291b31990254df1b7e21" kindref="member">nrf_spim_bit_order_t</ref>;</highlight></codeline>
<codeline lineno="500"><highlight class="normal"></highlight></codeline>
<codeline lineno="501"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_SPIM_HAS_HW_CSN</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="502"><highlight class="comment">/**<sp/>@brief<sp/>SPI<sp/>CSN<sp/>pin<sp/>polarity.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="503"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="504"><highlight class="normal">{</highlight></codeline>
<codeline lineno="505"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(SPIM_CSNPOL_CSNPOL0_LOW)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__spim__hal_1gga69909d4302a3e9c65806dc7c7be9c9c7a937f08a10247864b0ee36d2a4f6f4dcb" kindref="member">NRF_SPIM_CSN_POL_LOW</ref><sp/><sp/>=<sp/>SPIM_CSNPOL_CSNPOL0_LOW,<sp/></highlight><highlight class="comment">///&lt;<sp/>Active<sp/>low<sp/>(idle<sp/>state<sp/>high).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__spim__hal_1gga69909d4302a3e9c65806dc7c7be9c9c7a4183e29df7afc1b879f5e3b9583fa6b8" kindref="member">NRF_SPIM_CSN_POL_HIGH</ref><sp/>=<sp/>SPIM_CSNPOL_CSNPOL0_HIGH<sp/></highlight><highlight class="comment">///&lt;<sp/>Active<sp/>high<sp/>(idle<sp/>state<sp/>low).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="508"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__spim__hal_1gga69909d4302a3e9c65806dc7c7be9c9c7a937f08a10247864b0ee36d2a4f6f4dcb" kindref="member">NRF_SPIM_CSN_POL_LOW</ref><sp/><sp/>=<sp/>SPIM_CSNPOL_CSNPOL_LOW,<sp/></highlight><highlight class="comment">///&lt;<sp/>Active<sp/>low<sp/>(idle<sp/>state<sp/>high).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__spim__hal_1gga69909d4302a3e9c65806dc7c7be9c9c7a4183e29df7afc1b879f5e3b9583fa6b8" kindref="member">NRF_SPIM_CSN_POL_HIGH</ref><sp/>=<sp/>SPIM_CSNPOL_CSNPOL_HIGH<sp/></highlight><highlight class="comment">///&lt;<sp/>Active<sp/>high<sp/>(idle<sp/>state<sp/>low).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="511"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="512"><highlight class="normal">}<sp/><ref refid="group__nrf__spim__hal_1ga69909d4302a3e9c65806dc7c7be9c9c7" kindref="member">nrf_spim_csn_pol_t</ref>;</highlight></codeline>
<codeline lineno="513"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="514"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="515"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="516"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>activating<sp/>the<sp/>specified<sp/>SPIM<sp/>task.</highlight></codeline>
<codeline lineno="517"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="518"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="519"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>task<sp/><sp/>Task<sp/>to<sp/>be<sp/>activated.</highlight></codeline>
<codeline lineno="520"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="521"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__spim__hal_1ga9e52a7c6afa466c4c2d494e87206898f" kindref="member">nrf_spim_task_trigger</ref>(NRF_SPIM_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__spim__hal_1ga2982879a943ea49b37cebd5abbe7fe84" kindref="member">nrf_spim_task_t</ref><sp/>task);</highlight></codeline>
<codeline lineno="523"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="524"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="525"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>the<sp/>address<sp/>of<sp/>the<sp/>specified<sp/>SPIM<sp/>task<sp/>register.</highlight></codeline>
<codeline lineno="526"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="527"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="528"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>task<sp/><sp/>The<sp/>specified<sp/>task.</highlight></codeline>
<codeline lineno="529"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="530"><highlight class="comment"><sp/>*<sp/>@return<sp/>Address<sp/>of<sp/>the<sp/>specified<sp/>task<sp/>register.</highlight></codeline>
<codeline lineno="531"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="532"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__spim__hal_1ga4a9e3819ecafa986a3e7af05ca46b40a" kindref="member">nrf_spim_task_address_get</ref>(NRF_SPIM_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__spim__hal_1ga2982879a943ea49b37cebd5abbe7fe84" kindref="member">nrf_spim_task_t</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>task);</highlight></codeline>
<codeline lineno="534"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="535"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="536"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>clearing<sp/>the<sp/>specified<sp/>SPIM<sp/>event.</highlight></codeline>
<codeline lineno="537"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="538"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="539"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>event<sp/>Event<sp/>to<sp/>be<sp/>cleared.</highlight></codeline>
<codeline lineno="540"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="541"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__spim__hal_1gacdfadb80c0d980545acb217c57abc88a" kindref="member">nrf_spim_event_clear</ref>(NRF_SPIM_Type<sp/>*<sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__spim__hal_1gad3a00dacc9f2c0ebeedddd88a2a03f6e" kindref="member">nrf_spim_event_t</ref><sp/>event);</highlight></codeline>
<codeline lineno="543"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="544"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="545"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>retrieving<sp/>the<sp/>state<sp/>of<sp/>the<sp/>SPIM<sp/>event.</highlight></codeline>
<codeline lineno="546"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="547"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="548"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>event<sp/>Event<sp/>to<sp/>be<sp/>checked.</highlight></codeline>
<codeline lineno="549"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="550"><highlight class="comment"><sp/>*<sp/>@retval<sp/>true<sp/><sp/>The<sp/>event<sp/>has<sp/>been<sp/>generated.</highlight></codeline>
<codeline lineno="551"><highlight class="comment"><sp/>*<sp/>@retval<sp/>false<sp/>The<sp/>event<sp/>has<sp/>not<sp/>been<sp/>generated.</highlight></codeline>
<codeline lineno="552"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="553"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrf__spim__hal_1gaebe158267c1fe407bd2f84919b2a337b" kindref="member">nrf_spim_event_check</ref>(NRF_SPIM_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__spim__hal_1gad3a00dacc9f2c0ebeedddd88a2a03f6e" kindref="member">nrf_spim_event_t</ref><sp/><sp/><sp/><sp/><sp/><sp/>event);</highlight></codeline>
<codeline lineno="555"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="556"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="557"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>the<sp/>address<sp/>of<sp/>the<sp/>specified<sp/>SPIM<sp/>event<sp/>register.</highlight></codeline>
<codeline lineno="558"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="559"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="560"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>event<sp/>The<sp/>specified<sp/>event.</highlight></codeline>
<codeline lineno="561"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="562"><highlight class="comment"><sp/>*<sp/>@return<sp/>Address<sp/>of<sp/>the<sp/>specified<sp/>event<sp/>register.</highlight></codeline>
<codeline lineno="563"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="564"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__spim__hal_1ga24e020ebb846d4a8f9cbbb2e94234ba3" kindref="member">nrf_spim_event_address_get</ref>(NRF_SPIM_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__spim__hal_1gad3a00dacc9f2c0ebeedddd88a2a03f6e" kindref="member">nrf_spim_event_t</ref><sp/><sp/><sp/><sp/><sp/><sp/>event);</highlight></codeline>
<codeline lineno="566"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="567"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="568"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>enabling<sp/>the<sp/>specified<sp/>shortcuts.</highlight></codeline>
<codeline lineno="569"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="570"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="571"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>mask<sp/><sp/>Shortcuts<sp/>to<sp/>be<sp/>enabled.</highlight></codeline>
<codeline lineno="572"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="573"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__spim__hal_1ga707662c0db21ffac917ff9c6506d07f8" kindref="member">nrf_spim_shorts_enable</ref>(NRF_SPIM_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mask);</highlight></codeline>
<codeline lineno="575"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="576"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="577"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>disabling<sp/>the<sp/>specified<sp/>shortcuts.</highlight></codeline>
<codeline lineno="578"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="579"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="580"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>mask<sp/><sp/>Shortcuts<sp/>to<sp/>be<sp/>disabled.</highlight></codeline>
<codeline lineno="581"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="582"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__spim__hal_1gaca728bc9c609f43da7ec0877a9a9c6b2" kindref="member">nrf_spim_shorts_disable</ref>(NRF_SPIM_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mask);</highlight></codeline>
<codeline lineno="584"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="585"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="586"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>the<sp/>shortcut<sp/>setting.</highlight></codeline>
<codeline lineno="587"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="588"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="589"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="590"><highlight class="comment"><sp/>*<sp/>@return<sp/>Current<sp/>shortcut<sp/>configuration.</highlight></codeline>
<codeline lineno="591"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="592"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__spim__hal_1ga230f345fcbb0a4cb4ed2ad7ae49da86b" kindref="member">nrf_spim_shorts_get</ref>(NRF_SPIM_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="593"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="594"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="595"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>enabling<sp/>the<sp/>specified<sp/>interrupts.</highlight></codeline>
<codeline lineno="596"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="597"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="598"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>mask<sp/><sp/>Mask<sp/>of<sp/>interrupts<sp/>to<sp/>be<sp/>enabled.</highlight></codeline>
<codeline lineno="599"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Use<sp/>@ref<sp/>nrf_spim_int_mask_t<sp/>values<sp/>for<sp/>bit<sp/>masking.</highlight></codeline>
<codeline lineno="600"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="601"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__spim__hal_1ga2d1f16e4bd513c2e6a0f4b502f2cfe1c" kindref="member">nrf_spim_int_enable</ref>(NRF_SPIM_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mask);</highlight></codeline>
<codeline lineno="603"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="604"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="605"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>disabling<sp/>the<sp/>specified<sp/>interrupts.</highlight></codeline>
<codeline lineno="606"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="607"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="608"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>mask<sp/><sp/>Mask<sp/>of<sp/>interrupts<sp/>to<sp/>be<sp/>disabled.</highlight></codeline>
<codeline lineno="609"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Use<sp/>@ref<sp/>nrf_spim_int_mask_t<sp/>values<sp/>for<sp/>bit<sp/>masking.</highlight></codeline>
<codeline lineno="610"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="611"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__spim__hal_1ga26449809b37227511a1faf6233eeb71f" kindref="member">nrf_spim_int_disable</ref>(NRF_SPIM_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mask);</highlight></codeline>
<codeline lineno="613"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="614"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="615"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>checking<sp/>if<sp/>the<sp/>specified<sp/>interrupts<sp/>are<sp/>enabled.</highlight></codeline>
<codeline lineno="616"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="617"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="618"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>mask<sp/><sp/>Mask<sp/>of<sp/>interrupts<sp/>to<sp/>be<sp/>checked.</highlight></codeline>
<codeline lineno="619"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Use<sp/>@ref<sp/>nrf_spim_int_mask_t<sp/>values<sp/>for<sp/>bit<sp/>masking.</highlight></codeline>
<codeline lineno="620"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="621"><highlight class="comment"><sp/>*<sp/>@return<sp/>Mask<sp/>of<sp/>enabled<sp/>interrupts.</highlight></codeline>
<codeline lineno="622"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="623"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__spim__hal_1gafe12634c5609d63fbc3820c44c29b430" kindref="member">nrf_spim_int_enable_check</ref>(NRF_SPIM_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>mask);</highlight></codeline>
<codeline lineno="624"><highlight class="normal"></highlight></codeline>
<codeline lineno="625"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_SPIM_HAS_PRESCALER</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="626"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="627"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>the<sp/>prescaler<sp/>value.</highlight></codeline>
<codeline lineno="628"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="629"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="630"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>prescaler<sp/>Prescaler<sp/>value.</highlight></codeline>
<codeline lineno="631"><highlight class="comment"><sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="632"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__spim__hal_1ga79eecd772cb0b0c4faedcddf87e7e72e" kindref="member">nrf_spim_prescaler_set</ref>(NRF_SPIM_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prescaler);</highlight></codeline>
<codeline lineno="634"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="635"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="636"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>the<sp/>prescaler<sp/>value.</highlight></codeline>
<codeline lineno="637"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="638"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="639"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="640"><highlight class="comment"><sp/>*<sp/>@return<sp/>Prescaler<sp/>value.</highlight></codeline>
<codeline lineno="641"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="642"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__spim__hal_1ga4ce7dbafe298b763cb978a9d0cc21e18" kindref="member">nrf_spim_prescaler_get</ref>(NRF_SPIM_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="643"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="644"><highlight class="normal"></highlight></codeline>
<codeline lineno="645"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(DPPI_PRESENT)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="646"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="647"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>the<sp/>subscribe<sp/>configuration<sp/>for<sp/>a<sp/>given</highlight></codeline>
<codeline lineno="648"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SPIM<sp/>task.</highlight></codeline>
<codeline lineno="649"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="650"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="651"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>task<sp/><sp/><sp/><sp/>Task<sp/>for<sp/>which<sp/>to<sp/>set<sp/>the<sp/>configuration.</highlight></codeline>
<codeline lineno="652"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>channel<sp/>Channel<sp/>through<sp/>which<sp/>to<sp/>subscribe<sp/>events.</highlight></codeline>
<codeline lineno="653"><highlight class="comment"><sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="654"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__spim__hal_1gad6fb6e25713c9c18f91c07a5c4a39425" kindref="member">nrf_spim_subscribe_set</ref>(NRF_SPIM_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__spim__hal_1ga2982879a943ea49b37cebd5abbe7fe84" kindref="member">nrf_spim_task_t</ref><sp/>task,</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>channel);</highlight></codeline>
<codeline lineno="657"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="658"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="659"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>clearing<sp/>the<sp/>subscribe<sp/>configuration<sp/>for<sp/>a<sp/>given</highlight></codeline>
<codeline lineno="660"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SPIM<sp/>task.</highlight></codeline>
<codeline lineno="661"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="662"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="663"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>task<sp/><sp/>Task<sp/>for<sp/>which<sp/>to<sp/>clear<sp/>the<sp/>configuration.</highlight></codeline>
<codeline lineno="664"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="665"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__spim__hal_1gadaa800f166325ce4b749fdb8d6e276eb" kindref="member">nrf_spim_subscribe_clear</ref>(NRF_SPIM_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__spim__hal_1ga2982879a943ea49b37cebd5abbe7fe84" kindref="member">nrf_spim_task_t</ref><sp/>task);</highlight></codeline>
<codeline lineno="667"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="668"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="669"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>the<sp/>publish<sp/>configuration<sp/>for<sp/>a<sp/>given</highlight></codeline>
<codeline lineno="670"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SPIM<sp/>event.</highlight></codeline>
<codeline lineno="671"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="672"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="673"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>event<sp/><sp/><sp/>Event<sp/>for<sp/>which<sp/>to<sp/>set<sp/>the<sp/>configuration.</highlight></codeline>
<codeline lineno="674"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>channel<sp/>Channel<sp/>through<sp/>which<sp/>to<sp/>publish<sp/>the<sp/>event.</highlight></codeline>
<codeline lineno="675"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="676"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__spim__hal_1ga85022dc74e20435979e08102e5bdf163" kindref="member">nrf_spim_publish_set</ref>(NRF_SPIM_Type<sp/>*<sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__spim__hal_1gad3a00dacc9f2c0ebeedddd88a2a03f6e" kindref="member">nrf_spim_event_t</ref><sp/>event,</highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>channel);</highlight></codeline>
<codeline lineno="679"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="680"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="681"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>clearing<sp/>the<sp/>publish<sp/>configuration<sp/>for<sp/>a<sp/>given</highlight></codeline>
<codeline lineno="682"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SPIM<sp/>event.</highlight></codeline>
<codeline lineno="683"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="684"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="685"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>event<sp/>Event<sp/>for<sp/>which<sp/>to<sp/>clear<sp/>the<sp/>configuration.</highlight></codeline>
<codeline lineno="686"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="687"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__spim__hal_1gaba6fb6223b0a3d87820c65fafd6a386b" kindref="member">nrf_spim_publish_clear</ref>(NRF_SPIM_Type<sp/>*<sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__spim__hal_1gad3a00dacc9f2c0ebeedddd88a2a03f6e" kindref="member">nrf_spim_event_t</ref><sp/>event);</highlight></codeline>
<codeline lineno="689"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>defined(DPPI_PRESENT)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="690"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="691"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="692"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>enabling<sp/>the<sp/>SPIM<sp/>peripheral.</highlight></codeline>
<codeline lineno="693"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="694"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="695"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="696"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__spim__hal_1gaeeb8736598b8d189faa547b1656d482e" kindref="member">nrf_spim_enable</ref>(NRF_SPIM_Type<sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="697"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="698"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="699"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>disabling<sp/>the<sp/>SPIM<sp/>peripheral.</highlight></codeline>
<codeline lineno="700"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="701"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="702"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="703"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__spim__hal_1gab0911efd55fdbc077c37d4622c7dc3dc" kindref="member">nrf_spim_disable</ref>(NRF_SPIM_Type<sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="704"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="705"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="706"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>checking<sp/>if<sp/>the<sp/>SPIM<sp/>peripheral<sp/>is<sp/>enabled.</highlight></codeline>
<codeline lineno="707"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="708"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="709"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="710"><highlight class="comment"><sp/>*<sp/>@retval<sp/>true<sp/><sp/>The<sp/>SPIM<sp/>is<sp/>enabled.</highlight></codeline>
<codeline lineno="711"><highlight class="comment"><sp/>*<sp/>@retval<sp/>false<sp/>The<sp/>SPIM<sp/>is<sp/>not<sp/>enabled.</highlight></codeline>
<codeline lineno="712"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="713"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrf__spim__hal_1ga1384aadf6e3556812e664a88824adb60" kindref="member">nrf_spim_enable_check</ref>(NRF_SPIM_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="714"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="715"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="716"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>configuring<sp/>SPIM<sp/>pins.</highlight></codeline>
<codeline lineno="717"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="718"><highlight class="comment"><sp/>*<sp/>If<sp/>a<sp/>given<sp/>signal<sp/>is<sp/>not<sp/>needed,<sp/>pass<sp/>the<sp/>@ref<sp/>NRF_SPIM_PIN_NOT_CONNECTED</highlight></codeline>
<codeline lineno="719"><highlight class="comment"><sp/>*<sp/>value<sp/>instead<sp/>of<sp/>its<sp/>pin<sp/>number.</highlight></codeline>
<codeline lineno="720"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="721"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="722"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>sck_pin<sp/><sp/>SCK<sp/>pin<sp/>number.</highlight></codeline>
<codeline lineno="723"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>mosi_pin<sp/>MOSI<sp/>pin<sp/>number.</highlight></codeline>
<codeline lineno="724"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>miso_pin<sp/>MISO<sp/>pin<sp/>number.</highlight></codeline>
<codeline lineno="725"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="726"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__spim__hal_1ga7a84520c7baba19ea26a494bd4c4ea16" kindref="member">nrf_spim_pins_set</ref>(NRF_SPIM_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sck_pin,</highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mosi_pin,</highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>miso_pin);</highlight></codeline>
<codeline lineno="730"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="731"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="732"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>the<sp/>SCK<sp/>pin<sp/>selection.</highlight></codeline>
<codeline lineno="733"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="734"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="735"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="736"><highlight class="comment"><sp/>*<sp/>@return<sp/>SCK<sp/>pin<sp/>selection.</highlight></codeline>
<codeline lineno="737"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="738"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__spim__hal_1gaa0b911843ae1a2dc62f894580cf3756b" kindref="member">nrf_spim_sck_pin_get</ref>(NRF_SPIM_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="739"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="740"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="741"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>the<sp/>MOSI<sp/>pin<sp/>selection.</highlight></codeline>
<codeline lineno="742"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="743"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="744"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="745"><highlight class="comment"><sp/>*<sp/>@return<sp/>MOSI<sp/>pin<sp/>selection.</highlight></codeline>
<codeline lineno="746"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="747"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__spim__hal_1ga9deca8a6a43c5f53c6f0e6c3fe0cf6b7" kindref="member">nrf_spim_mosi_pin_get</ref>(NRF_SPIM_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="748"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="749"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="750"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>the<sp/>MISO<sp/>pin<sp/>selection.</highlight></codeline>
<codeline lineno="751"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="752"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="753"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="754"><highlight class="comment"><sp/>*<sp/>@return<sp/>MISO<sp/>pin<sp/>selection.</highlight></codeline>
<codeline lineno="755"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="756"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__spim__hal_1ga1551251bf0c13f179b343e1f9b624459" kindref="member">nrf_spim_miso_pin_get</ref>(NRF_SPIM_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="757"><highlight class="normal"></highlight></codeline>
<codeline lineno="758"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_SPIM_HAS_HW_CSN</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="759"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="760"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>configuring<sp/>the<sp/>SPIM<sp/>hardware<sp/>CSN<sp/>pin.</highlight></codeline>
<codeline lineno="761"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="762"><highlight class="comment"><sp/>*<sp/>If<sp/>this<sp/>signal<sp/>is<sp/>not<sp/>needed,<sp/>pass<sp/>the<sp/>@ref<sp/>NRF_SPIM_PIN_NOT_CONNECTED</highlight></codeline>
<codeline lineno="763"><highlight class="comment"><sp/>*<sp/>value<sp/>instead<sp/>of<sp/>its<sp/>pin<sp/>number.</highlight></codeline>
<codeline lineno="764"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="765"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="766"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>pin<sp/><sp/><sp/><sp/><sp/><sp/>CSN<sp/>pin<sp/>number.</highlight></codeline>
<codeline lineno="767"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>polarity<sp/>CSN<sp/>pin<sp/>polarity.</highlight></codeline>
<codeline lineno="768"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>duration<sp/>Minimum<sp/>duration<sp/>between<sp/>the<sp/>edge<sp/>of<sp/>CSN<sp/>and<sp/>the<sp/>edge<sp/>of<sp/>SCK</highlight></codeline>
<codeline lineno="769"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>and<sp/>minimum<sp/>duration<sp/>of<sp/>CSN<sp/>must<sp/>stay<sp/>unselected<sp/>between<sp/>transactions.</highlight></codeline>
<codeline lineno="770"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>value<sp/>is<sp/>specified<sp/>in<sp/>number<sp/>of<sp/>64<sp/>MHz<sp/>clock<sp/>cycles<sp/>(15.625<sp/>ns).</highlight></codeline>
<codeline lineno="771"><highlight class="comment"><sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="772"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__spim__hal_1ga39c17d197d4e59c45c02620352167fd4" kindref="member">nrf_spim_csn_configure</ref>(NRF_SPIM_Type<sp/>*<sp/><sp/><sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pin,</highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__spim__hal_1ga69909d4302a3e9c65806dc7c7be9c9c7" kindref="member">nrf_spim_csn_pol_t</ref><sp/>polarity,</highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>duration);</highlight></codeline>
<codeline lineno="776"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="777"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="778"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>the<sp/>CSN<sp/>pin<sp/>selection.</highlight></codeline>
<codeline lineno="779"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="780"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="781"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="782"><highlight class="comment"><sp/>*<sp/>@return<sp/>CSN<sp/>pin<sp/>selection.</highlight></codeline>
<codeline lineno="783"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="784"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__spim__hal_1ga0fa864eb77c4299cb0eb444401674121" kindref="member">nrf_spim_csn_pin_get</ref>(NRF_SPIM_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="785"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="786"><highlight class="normal"></highlight></codeline>
<codeline lineno="787"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_SPIM_HAS_DCX</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="788"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="789"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>configuring<sp/>the<sp/>SPIM<sp/>DCX<sp/>pin.</highlight></codeline>
<codeline lineno="790"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="791"><highlight class="comment"><sp/>*<sp/>If<sp/>this<sp/>signal<sp/>is<sp/>not<sp/>needed,<sp/>pass<sp/>the<sp/>@ref<sp/>NRF_SPIM_PIN_NOT_CONNECTED</highlight></codeline>
<codeline lineno="792"><highlight class="comment"><sp/>*<sp/>value<sp/>instead<sp/>of<sp/>its<sp/>pin<sp/>number.</highlight></codeline>
<codeline lineno="793"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="794"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="795"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>dcx_pin<sp/>DCX<sp/>pin<sp/>number.</highlight></codeline>
<codeline lineno="796"><highlight class="comment"><sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="797"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__spim__hal_1ga75f2491ddcbd092b71ebac239d9929a3" kindref="member">nrf_spim_dcx_pin_set</ref>(NRF_SPIM_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dcx_pin);</highlight></codeline>
<codeline lineno="799"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="800"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="801"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>the<sp/>DCX<sp/>pin<sp/>selection.</highlight></codeline>
<codeline lineno="802"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="803"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="804"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="805"><highlight class="comment"><sp/>*<sp/>@return<sp/>DCX<sp/>pin<sp/>selection.</highlight></codeline>
<codeline lineno="806"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="807"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__spim__hal_1ga2ee73ba7b9a8109edb841923c356aca2" kindref="member">nrf_spim_dcx_pin_get</ref>(NRF_SPIM_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="808"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="809"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="810"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>configuring<sp/>the<sp/>number<sp/>of<sp/>command<sp/>bytes.</highlight></codeline>
<codeline lineno="811"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="812"><highlight class="comment"><sp/>*<sp/>Maximum<sp/>value<sp/>available<sp/>for<sp/>dividing<sp/>the<sp/>transmitted<sp/>bytes<sp/>into<sp/>command</highlight></codeline>
<codeline lineno="813"><highlight class="comment"><sp/>*<sp/>bytes<sp/>and<sp/>data<sp/>bytes<sp/>is<sp/>@ref<sp/>NRF_SPIM_DCX_CNT_ALL_CMD<sp/>-<sp/>1.</highlight></codeline>
<codeline lineno="814"><highlight class="comment"><sp/>*<sp/>The<sp/>@ref<sp/>NRF_SPIM_DCX_CNT_ALL_CMD<sp/>value<sp/>passed<sp/>as<sp/>the<sp/>@c<sp/>count<sp/>parameter</highlight></codeline>
<codeline lineno="815"><highlight class="comment"><sp/>*<sp/>causes<sp/>all<sp/>transmitted<sp/>bytes<sp/>to<sp/>be<sp/>marked<sp/>as<sp/>command<sp/>bytes.</highlight></codeline>
<codeline lineno="816"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="817"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="818"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>count<sp/>Number<sp/>of<sp/>command<sp/>bytes<sp/>preceding<sp/>the<sp/>data<sp/>bytes.</highlight></codeline>
<codeline lineno="819"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="820"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__spim__hal_1ga9d7991c2826771ef33daab7f19e4d95d" kindref="member">nrf_spim_dcx_cnt_set</ref>(NRF_SPIM_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>count);</highlight></codeline>
<codeline lineno="822"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRF_SPIM_HAS_DCX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="823"><highlight class="normal"></highlight></codeline>
<codeline lineno="824"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_SPIM_HAS_RXDELAY</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="825"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="826"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>configuring<sp/>the<sp/>extended<sp/>SPIM<sp/>interface.</highlight></codeline>
<codeline lineno="827"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="828"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="829"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>rxdelay<sp/>Sample<sp/>delay<sp/>for<sp/>input<sp/>serial<sp/>data<sp/>on<sp/>MISO,</highlight></codeline>
<codeline lineno="830"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>specified<sp/>in<sp/>64<sp/>MHz<sp/>clock<sp/>cycles<sp/>(15.625<sp/>ns)<sp/>from<sp/>the<sp/>sampling<sp/>edge<sp/>of<sp/>SCK.</highlight></codeline>
<codeline lineno="831"><highlight class="comment"><sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="832"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__spim__hal_1ga3004d57ece479bf8ff51719706b4d1f9" kindref="member">nrf_spim_iftiming_set</ref>(NRF_SPIM_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rxdelay);</highlight></codeline>
<codeline lineno="834"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="835"><highlight class="normal"></highlight></codeline>
<codeline lineno="836"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_SPIM_HAS_STALLSTAT</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="837"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="838"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>clearing<sp/>stall<sp/>status<sp/>for<sp/>RX<sp/>EasyDMA<sp/>RAM<sp/>accesses.</highlight></codeline>
<codeline lineno="839"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="840"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="841"><highlight class="comment"><sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="842"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__spim__hal_1gaba056a74bc686de26adda489f78cf171" kindref="member">nrf_spim_stallstat_rx_clear</ref>(NRF_SPIM_Type<sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="843"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="844"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="845"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>stall<sp/>status<sp/>for<sp/>RX<sp/>EasyDMA<sp/>RAM<sp/>accesses.</highlight></codeline>
<codeline lineno="846"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="847"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="848"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="849"><highlight class="comment"><sp/>*<sp/>@return<sp/>Stall<sp/>status<sp/>of<sp/>RX<sp/>EasyDMA<sp/>RAM<sp/>accesses.</highlight></codeline>
<codeline lineno="850"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="851"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrf__spim__hal_1ga35d75ec23eefdb2ab6dcb7e8514d1df8" kindref="member">nrf_spim_stallstat_rx_get</ref>(NRF_SPIM_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="852"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="853"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="854"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>clearing<sp/>stall<sp/>status<sp/>for<sp/>TX<sp/>EasyDMA<sp/>RAM<sp/>accesses.</highlight></codeline>
<codeline lineno="855"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="856"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="857"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="858"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__spim__hal_1gaa3b5d792be98180e79c35b68c623e817" kindref="member">nrf_spim_stallstat_tx_clear</ref>(NRF_SPIM_Type<sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="859"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="860"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="861"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>stall<sp/>status<sp/>for<sp/>TX<sp/>EasyDMA<sp/>RAM<sp/>accesses.</highlight></codeline>
<codeline lineno="862"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="863"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="864"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="865"><highlight class="comment"><sp/>*<sp/>@return<sp/>Stall<sp/>status<sp/>of<sp/>TX<sp/>EasyDMA<sp/>RAM<sp/>accesses.</highlight></codeline>
<codeline lineno="866"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="867"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrf__spim__hal_1gac63ada40f97be3c9e76ba794561f6ab4" kindref="member">nrf_spim_stallstat_tx_get</ref>(NRF_SPIM_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="868"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRF_SPIM_HAS_STALLSTAT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="869"><highlight class="normal"></highlight></codeline>
<codeline lineno="870"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_SPIM_HAS_FREQUENCY</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="871"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="872"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>the<sp/>SPI<sp/>master<sp/>data<sp/>rate.</highlight></codeline>
<codeline lineno="873"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="874"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="875"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>frequency<sp/>SPI<sp/>frequency.</highlight></codeline>
<codeline lineno="876"><highlight class="comment"><sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="877"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__spim__hal_1ga9207d0b744b7aa398141b2004d1aa381" kindref="member">nrf_spim_frequency_set</ref>(NRF_SPIM_Type<sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="878"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__spim__hal_1ga5e37c3150ccd77887556edd6afbe3f65" kindref="member">nrf_spim_frequency_t</ref><sp/>frequency);</highlight></codeline>
<codeline lineno="879"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="880"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="881"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>the<sp/>SPI<sp/>master<sp/>data<sp/>rate.</highlight></codeline>
<codeline lineno="882"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="883"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="884"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="885"><highlight class="comment"><sp/>*<sp/>@retval<sp/>SPI<sp/>master<sp/>frequency.</highlight></codeline>
<codeline lineno="886"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="887"><highlight class="normal">NRF_STATIC_INLINE<sp/><ref refid="group__nrf__spim__hal_1ga5e37c3150ccd77887556edd6afbe3f65" kindref="member">nrf_spim_frequency_t</ref><sp/><ref refid="group__nrf__spim__hal_1ga66092a33fb96049aafcd9cd7bc6a3fbc" kindref="member">nrf_spim_frequency_get</ref>(NRF_SPIM_Type<sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="888"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="889"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="890"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="891"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>the<sp/>transmit<sp/>buffer.</highlight></codeline>
<codeline lineno="892"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="893"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="894"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_buffer<sp/>Pointer<sp/>to<sp/>the<sp/>buffer<sp/>with<sp/>data<sp/>to<sp/>send.</highlight></codeline>
<codeline lineno="895"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>length<sp/><sp/><sp/>Maximum<sp/>number<sp/>of<sp/>data<sp/>bytes<sp/>to<sp/>transmit.</highlight></codeline>
<codeline lineno="896"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="897"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__spim__hal_1gaf6294e8b452baa88e8533e8a1e3041ea" kindref="member">nrf_spim_tx_buffer_set</ref>(NRF_SPIM_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="898"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_buffer,</highlight></codeline>
<codeline lineno="899"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>length);</highlight></codeline>
<codeline lineno="900"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="901"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="902"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>number<sp/>of<sp/>bytes<sp/>transmitted<sp/>in<sp/>the<sp/>last<sp/>transaction.</highlight></codeline>
<codeline lineno="903"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="904"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="905"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="906"><highlight class="comment"><sp/>*<sp/>@retval<sp/>Amount<sp/>of<sp/>bytes<sp/>transmitted.</highlight></codeline>
<codeline lineno="907"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="908"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__spim__hal_1ga924ca917786ef51dcf07cd0f0ccce1c6" kindref="member">nrf_spim_tx_amount_get</ref>(NRF_SPIM_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="909"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="910"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="911"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>number<sp/>of<sp/>bytes<sp/>to<sp/>be<sp/>transmitted<sp/>in<sp/>the<sp/>next<sp/>transaction.</highlight></codeline>
<codeline lineno="912"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="913"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="914"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="915"><highlight class="comment"><sp/>*<sp/>@retval<sp/>Amount<sp/>of<sp/>bytes<sp/>to<sp/>be<sp/>transmitted.</highlight></codeline>
<codeline lineno="916"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="917"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__spim__hal_1gac76e46f7b09bb8fda5c351d41972d9fc" kindref="member">nrf_spim_tx_maxcnt_get</ref>(NRF_SPIM_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="918"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="919"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="920"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>the<sp/>receive<sp/>buffer.</highlight></codeline>
<codeline lineno="921"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="922"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="923"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_buffer<sp/>Pointer<sp/>to<sp/>the<sp/>buffer<sp/>for<sp/>received<sp/>data.</highlight></codeline>
<codeline lineno="924"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>length<sp/><sp/><sp/>Maximum<sp/>number<sp/>of<sp/>data<sp/>bytes<sp/>to<sp/>receive.</highlight></codeline>
<codeline lineno="925"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="926"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__spim__hal_1ga8e5557a6f5b0294fdd49ca950b1b3e15" kindref="member">nrf_spim_rx_buffer_set</ref>(NRF_SPIM_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="927"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_buffer,</highlight></codeline>
<codeline lineno="928"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>length);</highlight></codeline>
<codeline lineno="929"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="930"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="931"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>number<sp/>of<sp/>bytes<sp/>received<sp/>in<sp/>the<sp/>last<sp/>transaction.</highlight></codeline>
<codeline lineno="932"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="933"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="934"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="935"><highlight class="comment"><sp/>*<sp/>@retval<sp/>Amount<sp/>of<sp/>bytes<sp/>received.</highlight></codeline>
<codeline lineno="936"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="937"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__spim__hal_1gabb5f4696a9964dd9d0785368bd90d125" kindref="member">nrf_spim_rx_amount_get</ref>(NRF_SPIM_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="938"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="939"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="940"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>number<sp/>of<sp/>bytes<sp/>to<sp/>be<sp/>received<sp/>in<sp/>the<sp/>next<sp/>transaction.</highlight></codeline>
<codeline lineno="941"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="942"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="943"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="944"><highlight class="comment"><sp/>*<sp/>@retval<sp/>Amount<sp/>of<sp/>bytes<sp/>to<sp/>be<sp/>received.</highlight></codeline>
<codeline lineno="945"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="946"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__spim__hal_1ga7eceeed170a987436f97714573ebebfe" kindref="member">nrf_spim_rx_maxcnt_get</ref>(NRF_SPIM_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="947"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="948"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="949"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>the<sp/>SPI<sp/>configuration.</highlight></codeline>
<codeline lineno="950"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="951"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="952"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>spi_mode<sp/><sp/><sp/><sp/><sp/><sp/>SPI<sp/>mode.</highlight></codeline>
<codeline lineno="953"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>spi_bit_order<sp/>SPI<sp/>bit<sp/>order.</highlight></codeline>
<codeline lineno="954"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="955"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__spim__hal_1ga04cb0f3fce5a0c8eaf3993dbc348818a" kindref="member">nrf_spim_configure</ref>(NRF_SPIM_Type<sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="956"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__spim__hal_1gaf6ad2321f2fd4a896c097b5d4040ff94" kindref="member">nrf_spim_mode_t</ref><sp/><sp/><sp/><sp/><sp/><sp/>spi_mode,</highlight></codeline>
<codeline lineno="957"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__spim__hal_1ga37c6bc10f199291b31990254df1b7e21" kindref="member">nrf_spim_bit_order_t</ref><sp/>spi_bit_order);</highlight></codeline>
<codeline lineno="958"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="959"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="960"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>the<sp/>over-read<sp/>character.</highlight></codeline>
<codeline lineno="961"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="962"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="963"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>orc<sp/><sp/><sp/>Over-read<sp/>character<sp/>that<sp/>is<sp/>clocked<sp/>out<sp/>in<sp/>case<sp/>of</highlight></codeline>
<codeline lineno="964"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>an<sp/>over-read<sp/>of<sp/>the<sp/>TXD<sp/>buffer.</highlight></codeline>
<codeline lineno="965"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="966"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__spim__hal_1gafeac3b0a862ff72358ceeb02edd22704" kindref="member">nrf_spim_orc_set</ref>(NRF_SPIM_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="967"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>orc);</highlight></codeline>
<codeline lineno="968"><highlight class="normal"></highlight></codeline>
<codeline lineno="969"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_SPIM_HAS_ARRAY_LIST</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="970"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="971"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>enabling<sp/>the<sp/>TX<sp/>list<sp/>feature.</highlight></codeline>
<codeline lineno="972"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="973"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="974"><highlight class="comment"><sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="975"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__spim__hal_1ga7357a796a2fdf9d2c4ae16a0350852c7" kindref="member">nrf_spim_tx_list_enable</ref>(NRF_SPIM_Type<sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="976"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="977"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="978"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>disabling<sp/>the<sp/>TX<sp/>list<sp/>feature.</highlight></codeline>
<codeline lineno="979"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="980"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="981"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="982"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__spim__hal_1ga72c0c83e5b18565861b24cc2f9b7b405" kindref="member">nrf_spim_tx_list_disable</ref>(NRF_SPIM_Type<sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="983"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="984"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="985"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>enabling<sp/>the<sp/>RX<sp/>list<sp/>feature.</highlight></codeline>
<codeline lineno="986"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="987"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="988"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="989"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__spim__hal_1ga1352d05967bc99ec35c6a35653263caa" kindref="member">nrf_spim_rx_list_enable</ref>(NRF_SPIM_Type<sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="990"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="991"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="992"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>disabling<sp/>the<sp/>RX<sp/>list<sp/>feature.</highlight></codeline>
<codeline lineno="993"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="994"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="995"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="996"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__spim__hal_1ga2a825732a31c91886fc4915c73fe437f" kindref="member">nrf_spim_rx_list_disable</ref>(NRF_SPIM_Type<sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="997"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="998"><highlight class="normal"></highlight></codeline>
<codeline lineno="999"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_SPIM_HAS_DMA_TASKS_EVENTS</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1000"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="1001"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>enabling<sp/>individual<sp/>pattern<sp/>match<sp/>filters.</highlight></codeline>
<codeline lineno="1002"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1003"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="1004"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>index<sp/><sp/>Index<sp/>of<sp/>pattern<sp/>match<sp/>filter.</highlight></codeline>
<codeline lineno="1005"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>enable<sp/>True<sp/>if<sp/>pattern<sp/>match<sp/>filter<sp/>is<sp/>to<sp/>be<sp/>enabled,<sp/>false<sp/>otherwise.</highlight></codeline>
<codeline lineno="1006"><highlight class="comment"><sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1007"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__spim__hal_1ga3743c8659fc70ce914c2cb8fab44bfa9" kindref="member">nrf_spim_rx_pattern_match_enable_set</ref>(NRF_SPIM_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="1008"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index,</highlight></codeline>
<codeline lineno="1009"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>enable);</highlight></codeline>
<codeline lineno="1010"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1011"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="1012"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>checking<sp/>if<sp/>the<sp/>specified<sp/>pattern<sp/>match<sp/>filter<sp/>is<sp/>enabled.</highlight></codeline>
<codeline lineno="1013"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1014"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="1015"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>index<sp/>Index<sp/>of<sp/>pattern<sp/>match<sp/>filter.</highlight></codeline>
<codeline lineno="1016"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1017"><highlight class="comment"><sp/>*<sp/>@retval<sp/>true<sp/><sp/>Pattern<sp/>match<sp/>filter<sp/>is<sp/>enabled.</highlight></codeline>
<codeline lineno="1018"><highlight class="comment"><sp/>*<sp/>@retval<sp/>false<sp/>Pattern<sp/>match<sp/>filter<sp/>is<sp/>disabled.</highlight></codeline>
<codeline lineno="1019"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1020"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrf__spim__hal_1gae1bd8ded6444d29f9ccf5f5bec319c9e" kindref="member">nrf_spim_rx_pattern_match_enable_check</ref>(NRF_SPIM_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="1021"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index);</highlight></codeline>
<codeline lineno="1022"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1023"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="1024"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>enabling<sp/>one-shot<sp/>operation<sp/>for<sp/>the<sp/>specified<sp/>match<sp/>filter.</highlight></codeline>
<codeline lineno="1025"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1026"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="1027"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>index<sp/>Index<sp/>of<sp/>pattern<sp/>match<sp/>filter.</highlight></codeline>
<codeline lineno="1028"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1029"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__spim__hal_1gadd5cfcbb5e4b523ea0419a099eb1524e" kindref="member">nrf_spim_rx_pattern_match_one_shot_enable</ref>(NRF_SPIM_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="1030"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index);</highlight></codeline>
<codeline lineno="1031"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1032"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="1033"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>disabling<sp/>one-shot<sp/>operation<sp/>for<sp/>the<sp/>specified<sp/>match<sp/>filter.</highlight></codeline>
<codeline lineno="1034"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1035"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="1036"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>index<sp/>Index<sp/>of<sp/>pattern<sp/>match<sp/>filter.</highlight></codeline>
<codeline lineno="1037"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1038"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__spim__hal_1ga26cc50e322ee0cbb77f1fa983b094b07" kindref="member">nrf_spim_rx_pattern_match_one_shot_disable</ref>(NRF_SPIM_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="1039"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index);</highlight></codeline>
<codeline lineno="1040"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1041"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="1042"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>checking<sp/>if<sp/>specified<sp/>pattern<sp/>match<sp/>filter<sp/>is<sp/>configured<sp/>as<sp/>one-shot.</highlight></codeline>
<codeline lineno="1043"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1044"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="1045"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>index<sp/>Index<sp/>of<sp/>pattern<sp/>match<sp/>filter.</highlight></codeline>
<codeline lineno="1046"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1047"><highlight class="comment"><sp/>*<sp/>@retval<sp/>true<sp/><sp/>Pattern<sp/>match<sp/>filter<sp/>is<sp/>configured<sp/>as<sp/>one-shot.</highlight></codeline>
<codeline lineno="1048"><highlight class="comment"><sp/>*<sp/>@retval<sp/>false<sp/>Pattern<sp/>match<sp/>filter<sp/>is<sp/>configured<sp/>as<sp/>continuous.</highlight></codeline>
<codeline lineno="1049"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1050"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrf__spim__hal_1gaac8746783116cce64872b1d25f4d9a5d" kindref="member">nrf_spim_rx_pattern_match_one_shot_check</ref>(NRF_SPIM_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="1051"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index);</highlight></codeline>
<codeline lineno="1052"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1053"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="1054"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>the<sp/>pattern<sp/>to<sp/>be<sp/>looked<sp/>for<sp/>by<sp/>the<sp/>specified<sp/>match<sp/>filter.</highlight></codeline>
<codeline lineno="1055"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1056"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="1057"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>index<sp/><sp/><sp/>Index<sp/>of<sp/>pattern<sp/>match<sp/>filter.</highlight></codeline>
<codeline lineno="1058"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>pattern<sp/>Pattern<sp/>to<sp/>be<sp/>looked<sp/>for.</highlight></codeline>
<codeline lineno="1059"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Match<sp/>will<sp/>trigger<sp/>the<sp/>corresponding<sp/>event,<sp/>if<sp/>enabled.</highlight></codeline>
<codeline lineno="1060"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1061"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__spim__hal_1ga2f644bca032ebb67882ba3c2daf70395" kindref="member">nrf_spim_rx_pattern_match_candidate_set</ref>(NRF_SPIM_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="1062"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index,</highlight></codeline>
<codeline lineno="1063"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pattern);</highlight></codeline>
<codeline lineno="1064"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1065"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="1066"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>the<sp/>pattern<sp/>that<sp/>the<sp/>specified<sp/>match<sp/>filter<sp/>is<sp/>looking<sp/>for.</highlight></codeline>
<codeline lineno="1067"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1068"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="1069"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>index<sp/>Index<sp/>of<sp/>pattern<sp/>match<sp/>filter.</highlight></codeline>
<codeline lineno="1070"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1071"><highlight class="comment"><sp/>*<sp/>@return<sp/>Pattern<sp/>that<sp/>the<sp/>specified<sp/>match<sp/>filter<sp/>is<sp/>looking<sp/>for.</highlight></codeline>
<codeline lineno="1072"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1073"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__spim__hal_1gabea2f074d7418877d22b1887f2e1da93" kindref="member">nrf_spim_rx_pattern_match_candidate_get</ref>(NRF_SPIM_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="1074"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index);</highlight></codeline>
<codeline lineno="1075"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRF_SPIM_HAS_DMA_TASKS_EVENTS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1076"><highlight class="normal"></highlight></codeline>
<codeline lineno="1077"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_SPIM_HAS_DMA_REG</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1078"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="1079"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>enabling<sp/>the<sp/>termination<sp/>of<sp/>the<sp/>RX<sp/>transaction<sp/>after<sp/>detecting<sp/>the<sp/>BUSERROR<sp/>event.</highlight></codeline>
<codeline lineno="1080"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1081"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="1082"><highlight class="comment"><sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1083"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__spim__hal_1gab3c907595d436e304d426d46e8bd6257" kindref="member">nrf_spim_rx_terminate_on_bus_error_enable</ref>(NRF_SPIM_Type<sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="1084"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1085"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="1086"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>disabling<sp/>the<sp/>termination<sp/>of<sp/>the<sp/>RX<sp/>transaction<sp/>after<sp/>detecting<sp/>the<sp/>BUSERROR<sp/>event.</highlight></codeline>
<codeline lineno="1087"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1088"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="1089"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1090"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__spim__hal_1ga0d87335b0601f1a32dbdc90d81b3af5a" kindref="member">nrf_spim_rx_terminate_on_bus_error_disable</ref>(NRF_SPIM_Type<sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="1091"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1092"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="1093"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>checking<sp/>if<sp/>RX<sp/>transaction<sp/>termination<sp/>after<sp/>detecting<sp/>the<sp/>BUSERROR<sp/>event<sp/>is<sp/>enabled.</highlight></codeline>
<codeline lineno="1094"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1095"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="1096"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1097"><highlight class="comment"><sp/>*<sp/>@retval<sp/>true<sp/><sp/>RX<sp/>transaction<sp/>termination<sp/>after<sp/>detecting<sp/>a<sp/>BUSERROR<sp/>event<sp/>is<sp/>enabled.</highlight></codeline>
<codeline lineno="1098"><highlight class="comment"><sp/>*<sp/>@retval<sp/>false<sp/>RX<sp/>transaction<sp/>termination<sp/>after<sp/>detecting<sp/>a<sp/>BUSERROR<sp/>event<sp/>is<sp/>disabled.</highlight></codeline>
<codeline lineno="1099"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1100"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrf__spim__hal_1gae056088d0fa548f6fd158ad0f99c672f" kindref="member">nrf_spim_rx_terminate_on_bus_error_check</ref>(NRF_SPIM_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="1101"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1102"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="1103"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>enabling<sp/>the<sp/>termination<sp/>of<sp/>the<sp/>TX<sp/>transaction<sp/>after<sp/>detecting<sp/>the<sp/>BUSERROR<sp/>event.</highlight></codeline>
<codeline lineno="1104"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1105"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="1106"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1107"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__spim__hal_1ga0c13534b0ba4b532f3cbaff8835bc018" kindref="member">nrf_spim_tx_terminate_on_bus_error_enable</ref>(NRF_SPIM_Type<sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="1108"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1109"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="1110"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>disabling<sp/>the<sp/>termination<sp/>of<sp/>the<sp/>TX<sp/>transaction<sp/>after<sp/>detecting<sp/>the<sp/>BUSERROR<sp/>event.</highlight></codeline>
<codeline lineno="1111"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1112"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="1113"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1114"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__spim__hal_1ga4f87df8e8d9db46678947bfa714dfba0" kindref="member">nrf_spim_tx_terminate_on_bus_error_disable</ref>(NRF_SPIM_Type<sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="1115"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1116"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="1117"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>checking<sp/>if<sp/>TX<sp/>transaction<sp/>termination<sp/>after<sp/>detecting<sp/>the<sp/>BUSERROR<sp/>event<sp/>is<sp/>enabled.</highlight></codeline>
<codeline lineno="1118"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1119"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="1120"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1121"><highlight class="comment"><sp/>*<sp/>@retval<sp/>true<sp/><sp/>TX<sp/>transaction<sp/>termination<sp/>after<sp/>detecting<sp/>a<sp/>BUSERROR<sp/>event<sp/>is<sp/>enabled.</highlight></codeline>
<codeline lineno="1122"><highlight class="comment"><sp/>*<sp/>@retval<sp/>false<sp/>TX<sp/>transaction<sp/>termination<sp/>after<sp/>detecting<sp/>a<sp/>BUSERROR<sp/>event<sp/>is<sp/>disabled.</highlight></codeline>
<codeline lineno="1123"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1124"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrf__spim__hal_1ga5a0b4df867b8cdf9c3217568be4f672f" kindref="member">nrf_spim_tx_terminate_on_bus_error_check</ref>(NRF_SPIM_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="1125"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRF_SPIM_HAS_DMA_REG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1126"><highlight class="normal"></highlight></codeline>
<codeline lineno="1127"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>NRF_DECLARE_ONLY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1128"><highlight class="normal"></highlight></codeline>
<codeline lineno="1129"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__spim__hal_1ga9e52a7c6afa466c4c2d494e87206898f" kindref="member">nrf_spim_task_trigger</ref>(NRF_SPIM_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="1130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__spim__hal_1ga2982879a943ea49b37cebd5abbe7fe84" kindref="member">nrf_spim_task_t</ref><sp/>task)</highlight></codeline>
<codeline lineno="1131"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1132"><highlight class="normal"><sp/><sp/><sp/><sp/>*((</highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint32_t<sp/>*)((uint8_t<sp/>*)p_reg<sp/>+<sp/>(uint32_t)task))<sp/>=<sp/>0x1UL;</highlight></codeline>
<codeline lineno="1133"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1134"><highlight class="normal"></highlight></codeline>
<codeline lineno="1135"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__spim__hal_1ga4a9e3819ecafa986a3e7af05ca46b40a" kindref="member">nrf_spim_task_address_get</ref>(NRF_SPIM_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="1136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__spim__hal_1ga2982879a943ea49b37cebd5abbe7fe84" kindref="member">nrf_spim_task_t</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>task)</highlight></codeline>
<codeline lineno="1137"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1138"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>nrf_task_event_address_get(p_reg,<sp/>task);</highlight></codeline>
<codeline lineno="1139"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1140"><highlight class="normal"></highlight></codeline>
<codeline lineno="1141"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__spim__hal_1gacdfadb80c0d980545acb217c57abc88a" kindref="member">nrf_spim_event_clear</ref>(NRF_SPIM_Type<sp/>*<sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="1142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__spim__hal_1gad3a00dacc9f2c0ebeedddd88a2a03f6e" kindref="member">nrf_spim_event_t</ref><sp/>event)</highlight></codeline>
<codeline lineno="1143"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1144"><highlight class="normal"><sp/><sp/><sp/><sp/>*((</highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint32_t<sp/>*)((uint8_t<sp/>*)p_reg<sp/>+<sp/>(uint32_t)event))<sp/>=<sp/>0x0UL;</highlight></codeline>
<codeline lineno="1145"><highlight class="normal"><sp/><sp/><sp/><sp/>nrf_event_readback((uint8_t<sp/>*)p_reg<sp/>+<sp/>(uint32_t)event);</highlight></codeline>
<codeline lineno="1146"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1147"><highlight class="normal"></highlight></codeline>
<codeline lineno="1148"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrf__spim__hal_1gaebe158267c1fe407bd2f84919b2a337b" kindref="member">nrf_spim_event_check</ref>(NRF_SPIM_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="1149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__spim__hal_1gad3a00dacc9f2c0ebeedddd88a2a03f6e" kindref="member">nrf_spim_event_t</ref><sp/><sp/><sp/><sp/><sp/><sp/>event)</highlight></codeline>
<codeline lineno="1150"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1151"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>nrf_event_check(p_reg,<sp/>event);</highlight></codeline>
<codeline lineno="1152"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1153"><highlight class="normal"></highlight></codeline>
<codeline lineno="1154"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__spim__hal_1ga24e020ebb846d4a8f9cbbb2e94234ba3" kindref="member">nrf_spim_event_address_get</ref>(NRF_SPIM_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="1155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__spim__hal_1gad3a00dacc9f2c0ebeedddd88a2a03f6e" kindref="member">nrf_spim_event_t</ref><sp/><sp/><sp/><sp/><sp/><sp/>event)</highlight></codeline>
<codeline lineno="1156"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1157"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>nrf_task_event_address_get(p_reg,<sp/>event);</highlight></codeline>
<codeline lineno="1158"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1159"><highlight class="normal"></highlight></codeline>
<codeline lineno="1160"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__spim__hal_1ga707662c0db21ffac917ff9c6506d07f8" kindref="member">nrf_spim_shorts_enable</ref>(NRF_SPIM_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="1161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mask)</highlight></codeline>
<codeline lineno="1162"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1163"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;SHORTS<sp/>|=<sp/>mask;</highlight></codeline>
<codeline lineno="1164"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1165"><highlight class="normal"></highlight></codeline>
<codeline lineno="1166"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__spim__hal_1gaca728bc9c609f43da7ec0877a9a9c6b2" kindref="member">nrf_spim_shorts_disable</ref>(NRF_SPIM_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="1167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mask)</highlight></codeline>
<codeline lineno="1168"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1169"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;SHORTS<sp/>&amp;=<sp/>~(mask);</highlight></codeline>
<codeline lineno="1170"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1171"><highlight class="normal"></highlight></codeline>
<codeline lineno="1172"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__spim__hal_1ga230f345fcbb0a4cb4ed2ad7ae49da86b" kindref="member">nrf_spim_shorts_get</ref>(NRF_SPIM_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="1173"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1174"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p_reg-&gt;SHORTS;</highlight></codeline>
<codeline lineno="1175"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1176"><highlight class="normal"></highlight></codeline>
<codeline lineno="1177"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__spim__hal_1ga2d1f16e4bd513c2e6a0f4b502f2cfe1c" kindref="member">nrf_spim_int_enable</ref>(NRF_SPIM_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="1178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mask)</highlight></codeline>
<codeline lineno="1179"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1180"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;INTENSET<sp/>=<sp/>mask;</highlight></codeline>
<codeline lineno="1181"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1182"><highlight class="normal"></highlight></codeline>
<codeline lineno="1183"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__spim__hal_1ga26449809b37227511a1faf6233eeb71f" kindref="member">nrf_spim_int_disable</ref>(NRF_SPIM_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="1184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mask)</highlight></codeline>
<codeline lineno="1185"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1186"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;INTENCLR<sp/>=<sp/>mask;</highlight></codeline>
<codeline lineno="1187"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1188"><highlight class="normal"></highlight></codeline>
<codeline lineno="1189"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__spim__hal_1gafe12634c5609d63fbc3820c44c29b430" kindref="member">nrf_spim_int_enable_check</ref>(NRF_SPIM_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>mask)</highlight></codeline>
<codeline lineno="1190"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1191"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p_reg-&gt;INTENSET<sp/>&amp;<sp/>mask;</highlight></codeline>
<codeline lineno="1192"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1193"><highlight class="normal"></highlight></codeline>
<codeline lineno="1194"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_SPIM_HAS_PRESCALER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1195"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__spim__hal_1ga79eecd772cb0b0c4faedcddf87e7e72e" kindref="member">nrf_spim_prescaler_set</ref>(NRF_SPIM_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="1196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prescaler)</highlight></codeline>
<codeline lineno="1197"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1198"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__glue_1ga9698a3f6b6bea455d2b54a79e514ee36" kindref="member">NRFX_ASSERT</ref>(prescaler<sp/>&gt;=<sp/><ref refid="group__nrf__spim__hal_1gab1095ea70725e12cf869d8e04d5f75dd" kindref="member">NRF_SPIM_PRESCALER_MIN_GET</ref>(p_reg));</highlight></codeline>
<codeline lineno="1199"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__glue_1ga9698a3f6b6bea455d2b54a79e514ee36" kindref="member">NRFX_ASSERT</ref>(prescaler<sp/>&lt;=<sp/><ref refid="group__nrf__spim__hal_1gaafb34961cb61b6fb92c7a1ccc6133684" kindref="member">NRF_SPIM_PRESCALER_MAX_GET</ref>(p_reg));</highlight></codeline>
<codeline lineno="1200"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__glue_1ga9698a3f6b6bea455d2b54a79e514ee36" kindref="member">NRFX_ASSERT</ref>(<ref refid="group__nrfx__common_1ga8442c06f3943789856920c4bbec6b586" kindref="member">NRFX_IS_EVEN</ref>(prescaler));</highlight></codeline>
<codeline lineno="1201"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;PRESCALER<sp/>=<sp/>prescaler;</highlight></codeline>
<codeline lineno="1202"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1203"><highlight class="normal"></highlight></codeline>
<codeline lineno="1204"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__spim__hal_1ga4ce7dbafe298b763cb978a9d0cc21e18" kindref="member">nrf_spim_prescaler_get</ref>(NRF_SPIM_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="1205"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1206"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p_reg-&gt;PRESCALER;</highlight></codeline>
<codeline lineno="1207"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1208"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1209"><highlight class="normal"></highlight></codeline>
<codeline lineno="1210"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(DPPI_PRESENT)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1211"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__spim__hal_1gad6fb6e25713c9c18f91c07a5c4a39425" kindref="member">nrf_spim_subscribe_set</ref>(NRF_SPIM_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="1212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__spim__hal_1ga2982879a943ea49b37cebd5abbe7fe84" kindref="member">nrf_spim_task_t</ref><sp/>task,</highlight></codeline>
<codeline lineno="1213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>channel)</highlight></codeline>
<codeline lineno="1214"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1215"><highlight class="normal"><sp/><sp/><sp/><sp/>*((</highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint32_t<sp/>*)<sp/>((uint8_t<sp/>*)<sp/>p_reg<sp/>+<sp/>(uint32_t)<sp/>task<sp/>+<sp/>0x80uL))<sp/>=</highlight></codeline>
<codeline lineno="1216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)channel<sp/>|<sp/>NRF_SUBSCRIBE_PUBLISH_ENABLE);</highlight></codeline>
<codeline lineno="1217"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1218"><highlight class="normal"></highlight></codeline>
<codeline lineno="1219"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__spim__hal_1gadaa800f166325ce4b749fdb8d6e276eb" kindref="member">nrf_spim_subscribe_clear</ref>(NRF_SPIM_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="1220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__spim__hal_1ga2982879a943ea49b37cebd5abbe7fe84" kindref="member">nrf_spim_task_t</ref><sp/>task)</highlight></codeline>
<codeline lineno="1221"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1222"><highlight class="normal"><sp/><sp/><sp/><sp/>*((</highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint32_t<sp/>*)<sp/>((uint8_t<sp/>*)<sp/>p_reg<sp/>+<sp/>(uint32_t)<sp/>task<sp/>+<sp/>0x80uL))<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1223"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1224"><highlight class="normal"></highlight></codeline>
<codeline lineno="1225"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__spim__hal_1ga85022dc74e20435979e08102e5bdf163" kindref="member">nrf_spim_publish_set</ref>(NRF_SPIM_Type<sp/>*<sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="1226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__spim__hal_1gad3a00dacc9f2c0ebeedddd88a2a03f6e" kindref="member">nrf_spim_event_t</ref><sp/>event,</highlight></codeline>
<codeline lineno="1227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>channel)</highlight></codeline>
<codeline lineno="1228"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1229"><highlight class="normal"><sp/><sp/><sp/><sp/>*((</highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint32_t<sp/>*)<sp/>((uint8_t<sp/>*)<sp/>p_reg<sp/>+<sp/>(uint32_t)<sp/>event<sp/>+<sp/>0x80uL))<sp/>=</highlight></codeline>
<codeline lineno="1230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)channel<sp/>|<sp/>NRF_SUBSCRIBE_PUBLISH_ENABLE);</highlight></codeline>
<codeline lineno="1231"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1232"><highlight class="normal"></highlight></codeline>
<codeline lineno="1233"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__spim__hal_1gaba6fb6223b0a3d87820c65fafd6a386b" kindref="member">nrf_spim_publish_clear</ref>(NRF_SPIM_Type<sp/>*<sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="1234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__spim__hal_1gad3a00dacc9f2c0ebeedddd88a2a03f6e" kindref="member">nrf_spim_event_t</ref><sp/>event)</highlight></codeline>
<codeline lineno="1235"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1236"><highlight class="normal"><sp/><sp/><sp/><sp/>*((</highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint32_t<sp/>*)<sp/>((uint8_t<sp/>*)<sp/>p_reg<sp/>+<sp/>(uint32_t)<sp/>event<sp/>+<sp/>0x80uL))<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1237"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1238"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1239"><highlight class="normal"></highlight></codeline>
<codeline lineno="1240"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__spim__hal_1gaeeb8736598b8d189faa547b1656d482e" kindref="member">nrf_spim_enable</ref>(NRF_SPIM_Type<sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="1241"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1242"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;ENABLE<sp/>=<sp/>(SPIM_ENABLE_ENABLE_Enabled<sp/>&lt;&lt;<sp/>SPIM_ENABLE_ENABLE_Pos);</highlight></codeline>
<codeline lineno="1243"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1244"><highlight class="normal"></highlight></codeline>
<codeline lineno="1245"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__spim__hal_1gab0911efd55fdbc077c37d4622c7dc3dc" kindref="member">nrf_spim_disable</ref>(NRF_SPIM_Type<sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="1246"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1247"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;ENABLE<sp/>=<sp/>(SPIM_ENABLE_ENABLE_Disabled<sp/>&lt;&lt;<sp/>SPIM_ENABLE_ENABLE_Pos);</highlight></codeline>
<codeline lineno="1248"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1249"><highlight class="normal"></highlight></codeline>
<codeline lineno="1250"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrf__spim__hal_1ga1384aadf6e3556812e664a88824adb60" kindref="member">nrf_spim_enable_check</ref>(NRF_SPIM_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="1251"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1252"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p_reg-&gt;ENABLE<sp/>==<sp/>SPIM_ENABLE_ENABLE_Enabled;</highlight></codeline>
<codeline lineno="1253"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1254"><highlight class="normal"></highlight></codeline>
<codeline lineno="1255"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__spim__hal_1ga7a84520c7baba19ea26a494bd4c4ea16" kindref="member">nrf_spim_pins_set</ref>(NRF_SPIM_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="1256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sck_pin,</highlight></codeline>
<codeline lineno="1257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mosi_pin,</highlight></codeline>
<codeline lineno="1258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>miso_pin)</highlight></codeline>
<codeline lineno="1259"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1260"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;PSEL.SCK<sp/><sp/>=<sp/>sck_pin;</highlight></codeline>
<codeline lineno="1261"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;PSEL.MOSI<sp/>=<sp/>mosi_pin;</highlight></codeline>
<codeline lineno="1262"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;PSEL.MISO<sp/>=<sp/>miso_pin;</highlight></codeline>
<codeline lineno="1263"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1264"><highlight class="normal"></highlight></codeline>
<codeline lineno="1265"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__spim__hal_1gaa0b911843ae1a2dc62f894580cf3756b" kindref="member">nrf_spim_sck_pin_get</ref>(NRF_SPIM_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="1266"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1267"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p_reg-&gt;PSEL.SCK;</highlight></codeline>
<codeline lineno="1268"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1269"><highlight class="normal"></highlight></codeline>
<codeline lineno="1270"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__spim__hal_1ga9deca8a6a43c5f53c6f0e6c3fe0cf6b7" kindref="member">nrf_spim_mosi_pin_get</ref>(NRF_SPIM_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="1271"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1272"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p_reg-&gt;PSEL.MOSI;</highlight></codeline>
<codeline lineno="1273"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1274"><highlight class="normal"></highlight></codeline>
<codeline lineno="1275"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__spim__hal_1ga1551251bf0c13f179b343e1f9b624459" kindref="member">nrf_spim_miso_pin_get</ref>(NRF_SPIM_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="1276"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1277"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p_reg-&gt;PSEL.MISO;</highlight></codeline>
<codeline lineno="1278"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1279"><highlight class="normal"></highlight></codeline>
<codeline lineno="1280"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_SPIM_HAS_HW_CSN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1281"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__spim__hal_1ga39c17d197d4e59c45c02620352167fd4" kindref="member">nrf_spim_csn_configure</ref>(NRF_SPIM_Type<sp/>*<sp/><sp/><sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="1282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pin,</highlight></codeline>
<codeline lineno="1283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__spim__hal_1ga69909d4302a3e9c65806dc7c7be9c9c7" kindref="member">nrf_spim_csn_pol_t</ref><sp/>polarity,</highlight></codeline>
<codeline lineno="1284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>duration)</highlight></codeline>
<codeline lineno="1285"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1286"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(SPIM_CSNPOL_CSNPOL0_LOW)<sp/>&amp;&amp;<sp/>defined(SPIM_PSEL_CSN_MaxCount)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1287"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;PSEL.CSN[0]<sp/>=<sp/>pin;</highlight></codeline>
<codeline lineno="1288"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1289"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;PSEL.CSN<sp/>=<sp/>pin;</highlight></codeline>
<codeline lineno="1290"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1291"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;CSNPOL<sp/>=<sp/>polarity;</highlight></codeline>
<codeline lineno="1292"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;IFTIMING.CSNDUR<sp/>=<sp/>duration;</highlight></codeline>
<codeline lineno="1293"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1294"><highlight class="normal"></highlight></codeline>
<codeline lineno="1295"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__spim__hal_1ga0fa864eb77c4299cb0eb444401674121" kindref="member">nrf_spim_csn_pin_get</ref>(NRF_SPIM_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="1296"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1297"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(SPIM_CSNPOL_CSNPOL0_LOW)<sp/>&amp;&amp;<sp/>defined(SPIM_PSEL_CSN_MaxCount)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1298"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p_reg-&gt;PSEL.CSN[0];</highlight></codeline>
<codeline lineno="1299"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1300"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p_reg-&gt;PSEL.CSN;</highlight></codeline>
<codeline lineno="1301"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1302"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1303"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRF_SPIM_HAS_HW_CSN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1304"><highlight class="normal"></highlight></codeline>
<codeline lineno="1305"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_SPIM_HAS_DCX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1306"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__spim__hal_1ga75f2491ddcbd092b71ebac239d9929a3" kindref="member">nrf_spim_dcx_pin_set</ref>(NRF_SPIM_Type<sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>dcx_pin)</highlight></codeline>
<codeline lineno="1307"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1308"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(SPIM_PSEL_DCX_PIN_Msk)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1309"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;PSEL.DCX<sp/>=<sp/>dcx_pin;</highlight></codeline>
<codeline lineno="1310"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1311"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;PSELDCX<sp/>=<sp/>dcx_pin;</highlight></codeline>
<codeline lineno="1312"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1313"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1314"><highlight class="normal"></highlight></codeline>
<codeline lineno="1315"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__spim__hal_1ga2ee73ba7b9a8109edb841923c356aca2" kindref="member">nrf_spim_dcx_pin_get</ref>(NRF_SPIM_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="1316"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1317"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(SPIM_PSEL_DCX_PIN_Msk)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1318"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p_reg-&gt;PSEL.DCX;</highlight></codeline>
<codeline lineno="1319"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1320"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p_reg-&gt;PSELDCX;</highlight></codeline>
<codeline lineno="1321"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1322"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1323"><highlight class="normal"></highlight></codeline>
<codeline lineno="1324"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__spim__hal_1ga9d7991c2826771ef33daab7f19e4d95d" kindref="member">nrf_spim_dcx_cnt_set</ref>(NRF_SPIM_Type<sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>dcx_cnt)</highlight></codeline>
<codeline lineno="1325"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1326"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;DCXCNT<sp/>=<sp/>dcx_cnt;</highlight></codeline>
<codeline lineno="1327"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1328"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRF_SPIM_HAS_DCX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1329"><highlight class="normal"></highlight></codeline>
<codeline lineno="1330"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_SPIM_HAS_RXDELAY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1331"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__spim__hal_1ga3004d57ece479bf8ff51719706b4d1f9" kindref="member">nrf_spim_iftiming_set</ref>(NRF_SPIM_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="1332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rxdelay)</highlight></codeline>
<codeline lineno="1333"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1334"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;IFTIMING.RXDELAY<sp/>=<sp/>rxdelay;</highlight></codeline>
<codeline lineno="1335"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1336"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1337"><highlight class="normal"></highlight></codeline>
<codeline lineno="1338"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_SPIM_HAS_STALLSTAT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1339"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__spim__hal_1gaba056a74bc686de26adda489f78cf171" kindref="member">nrf_spim_stallstat_rx_clear</ref>(NRF_SPIM_Type<sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="1340"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1341"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;STALLSTAT<sp/>&amp;=<sp/>~(SPIM_STALLSTAT_RX_Msk);</highlight></codeline>
<codeline lineno="1342"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1343"><highlight class="normal"></highlight></codeline>
<codeline lineno="1344"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrf__spim__hal_1ga35d75ec23eefdb2ab6dcb7e8514d1df8" kindref="member">nrf_spim_stallstat_rx_get</ref>(NRF_SPIM_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="1345"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1346"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(p_reg-&gt;STALLSTAT<sp/>&amp;<sp/>SPIM_STALLSTAT_RX_Msk)<sp/>!=<sp/>0;</highlight></codeline>
<codeline lineno="1347"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1348"><highlight class="normal"></highlight></codeline>
<codeline lineno="1349"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__spim__hal_1gaa3b5d792be98180e79c35b68c623e817" kindref="member">nrf_spim_stallstat_tx_clear</ref>(NRF_SPIM_Type<sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="1350"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1351"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;STALLSTAT<sp/>&amp;=<sp/>~(SPIM_STALLSTAT_TX_Msk);</highlight></codeline>
<codeline lineno="1352"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1353"><highlight class="normal"></highlight></codeline>
<codeline lineno="1354"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrf__spim__hal_1gac63ada40f97be3c9e76ba794561f6ab4" kindref="member">nrf_spim_stallstat_tx_get</ref>(NRF_SPIM_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="1355"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1356"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(p_reg-&gt;STALLSTAT<sp/>&amp;<sp/>SPIM_STALLSTAT_TX_Msk)<sp/>!=<sp/>0;</highlight></codeline>
<codeline lineno="1357"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1358"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1359"><highlight class="normal"></highlight></codeline>
<codeline lineno="1360"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_SPIM_HAS_FREQUENCY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1361"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__spim__hal_1ga9207d0b744b7aa398141b2004d1aa381" kindref="member">nrf_spim_frequency_set</ref>(NRF_SPIM_Type<sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="1362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__spim__hal_1ga5e37c3150ccd77887556edd6afbe3f65" kindref="member">nrf_spim_frequency_t</ref><sp/>frequency)</highlight></codeline>
<codeline lineno="1363"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1364"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;FREQUENCY<sp/>=<sp/>(uint32_t)frequency;</highlight></codeline>
<codeline lineno="1365"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1366"><highlight class="normal"></highlight></codeline>
<codeline lineno="1367"><highlight class="normal">NRF_STATIC_INLINE<sp/><ref refid="group__nrf__spim__hal_1ga5e37c3150ccd77887556edd6afbe3f65" kindref="member">nrf_spim_frequency_t</ref><sp/><ref refid="group__nrf__spim__hal_1ga66092a33fb96049aafcd9cd7bc6a3fbc" kindref="member">nrf_spim_frequency_get</ref>(NRF_SPIM_Type<sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="1368"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1369"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="group__nrf__spim__hal_1ga5e37c3150ccd77887556edd6afbe3f65" kindref="member">nrf_spim_frequency_t</ref>)(p_reg-&gt;FREQUENCY);</highlight></codeline>
<codeline lineno="1370"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1371"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1372"><highlight class="normal"></highlight></codeline>
<codeline lineno="1373"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__spim__hal_1gaf6294e8b452baa88e8533e8a1e3041ea" kindref="member">nrf_spim_tx_buffer_set</ref>(NRF_SPIM_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="1374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_buffer,</highlight></codeline>
<codeline lineno="1375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>length)</highlight></codeline>
<codeline lineno="1376"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1377"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_SPIM_HAS_DMA_REG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1378"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;DMA.TX.PTR<sp/><sp/><sp/><sp/>=<sp/>(uint32_t)p_buffer;</highlight></codeline>
<codeline lineno="1379"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;DMA.TX.MAXCNT<sp/>=<sp/>length;</highlight></codeline>
<codeline lineno="1380"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1381"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;TXD.PTR<sp/><sp/><sp/><sp/>=<sp/>(uint32_t)p_buffer;</highlight></codeline>
<codeline lineno="1382"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;TXD.MAXCNT<sp/>=<sp/>length;</highlight></codeline>
<codeline lineno="1383"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1384"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1385"><highlight class="normal"></highlight></codeline>
<codeline lineno="1386"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__spim__hal_1ga924ca917786ef51dcf07cd0f0ccce1c6" kindref="member">nrf_spim_tx_amount_get</ref>(NRF_SPIM_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="1387"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1388"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_SPIM_HAS_DMA_REG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1389"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p_reg-&gt;DMA.TX.AMOUNT;</highlight></codeline>
<codeline lineno="1390"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1391"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p_reg-&gt;TXD.AMOUNT;</highlight></codeline>
<codeline lineno="1392"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1393"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1394"><highlight class="normal"></highlight></codeline>
<codeline lineno="1395"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__spim__hal_1gac76e46f7b09bb8fda5c351d41972d9fc" kindref="member">nrf_spim_tx_maxcnt_get</ref>(NRF_SPIM_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="1396"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1397"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_SPIM_HAS_DMA_REG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1398"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p_reg-&gt;DMA.TX.MAXCNT;</highlight></codeline>
<codeline lineno="1399"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1400"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p_reg-&gt;TXD.MAXCNT;</highlight></codeline>
<codeline lineno="1401"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1402"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1403"><highlight class="normal"></highlight></codeline>
<codeline lineno="1404"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__spim__hal_1ga8e5557a6f5b0294fdd49ca950b1b3e15" kindref="member">nrf_spim_rx_buffer_set</ref>(NRF_SPIM_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="1405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_buffer,</highlight></codeline>
<codeline lineno="1406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>length)</highlight></codeline>
<codeline lineno="1407"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1408"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_SPIM_HAS_DMA_REG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1409"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;DMA.RX.PTR<sp/><sp/><sp/><sp/>=<sp/>(uint32_t)p_buffer;</highlight></codeline>
<codeline lineno="1410"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;DMA.RX.MAXCNT<sp/>=<sp/>length;</highlight></codeline>
<codeline lineno="1411"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1412"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;RXD.PTR<sp/><sp/><sp/><sp/>=<sp/>(uint32_t)p_buffer;</highlight></codeline>
<codeline lineno="1413"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;RXD.MAXCNT<sp/>=<sp/>length;</highlight></codeline>
<codeline lineno="1414"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1415"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1416"><highlight class="normal"></highlight></codeline>
<codeline lineno="1417"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__spim__hal_1gabb5f4696a9964dd9d0785368bd90d125" kindref="member">nrf_spim_rx_amount_get</ref>(NRF_SPIM_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="1418"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1419"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_SPIM_HAS_DMA_REG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1420"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p_reg-&gt;DMA.RX.AMOUNT;</highlight></codeline>
<codeline lineno="1421"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1422"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p_reg-&gt;RXD.AMOUNT;</highlight></codeline>
<codeline lineno="1423"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1424"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1425"><highlight class="normal"></highlight></codeline>
<codeline lineno="1426"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__spim__hal_1ga7eceeed170a987436f97714573ebebfe" kindref="member">nrf_spim_rx_maxcnt_get</ref>(NRF_SPIM_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="1427"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1428"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_SPIM_HAS_DMA_REG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1429"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p_reg-&gt;DMA.RX.MAXCNT;</highlight></codeline>
<codeline lineno="1430"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1431"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p_reg-&gt;RXD.MAXCNT;</highlight></codeline>
<codeline lineno="1432"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1433"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1434"><highlight class="normal"></highlight></codeline>
<codeline lineno="1435"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__spim__hal_1ga04cb0f3fce5a0c8eaf3993dbc348818a" kindref="member">nrf_spim_configure</ref>(NRF_SPIM_Type<sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="1436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__spim__hal_1gaf6ad2321f2fd4a896c097b5d4040ff94" kindref="member">nrf_spim_mode_t</ref><sp/><sp/><sp/><sp/><sp/><sp/>spi_mode,</highlight></codeline>
<codeline lineno="1437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__spim__hal_1ga37c6bc10f199291b31990254df1b7e21" kindref="member">nrf_spim_bit_order_t</ref><sp/>spi_bit_order)</highlight></codeline>
<codeline lineno="1438"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1439"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>config<sp/>=<sp/>(spi_bit_order<sp/>==<sp/><ref refid="group__nrf__spim__hal_1gga37c6bc10f199291b31990254df1b7e21a4e6b4f768edb02728f27c0dd8f7f749b" kindref="member">NRF_SPIM_BIT_ORDER_MSB_FIRST</ref><sp/>?</highlight></codeline>
<codeline lineno="1440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SPIM_CONFIG_ORDER_MsbFirst<sp/>:<sp/>SPIM_CONFIG_ORDER_LsbFirst);</highlight></codeline>
<codeline lineno="1441"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(spi_mode)</highlight></codeline>
<codeline lineno="1442"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1443"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1444"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__nrf__spim__hal_1ggaf6ad2321f2fd4a896c097b5d4040ff94a6107c880e9b97cfc936071cc1d4ba27f" kindref="member">NRF_SPIM_MODE_0</ref>:</highlight></codeline>
<codeline lineno="1445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>config<sp/>|=<sp/>(SPIM_CONFIG_CPOL_ActiveHigh<sp/>&lt;&lt;<sp/>SPIM_CONFIG_CPOL_Pos)<sp/>|</highlight></codeline>
<codeline lineno="1446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(SPIM_CONFIG_CPHA_Leading<sp/><sp/><sp/><sp/>&lt;&lt;<sp/>SPIM_CONFIG_CPHA_Pos);</highlight></codeline>
<codeline lineno="1447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1448"><highlight class="normal"></highlight></codeline>
<codeline lineno="1449"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__nrf__spim__hal_1ggaf6ad2321f2fd4a896c097b5d4040ff94a2515ae701d523ee8c950c05e1075c53c" kindref="member">NRF_SPIM_MODE_1</ref>:</highlight></codeline>
<codeline lineno="1450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>config<sp/>|=<sp/>(SPIM_CONFIG_CPOL_ActiveHigh<sp/>&lt;&lt;<sp/>SPIM_CONFIG_CPOL_Pos)<sp/>|</highlight></codeline>
<codeline lineno="1451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(SPIM_CONFIG_CPHA_Trailing<sp/><sp/><sp/>&lt;&lt;<sp/>SPIM_CONFIG_CPHA_Pos);</highlight></codeline>
<codeline lineno="1452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1453"><highlight class="normal"></highlight></codeline>
<codeline lineno="1454"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__nrf__spim__hal_1ggaf6ad2321f2fd4a896c097b5d4040ff94a1a1a93d748a15af61bffbb1d4fe099dd" kindref="member">NRF_SPIM_MODE_2</ref>:</highlight></codeline>
<codeline lineno="1455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>config<sp/>|=<sp/>(SPIM_CONFIG_CPOL_ActiveLow<sp/><sp/>&lt;&lt;<sp/>SPIM_CONFIG_CPOL_Pos)<sp/>|</highlight></codeline>
<codeline lineno="1456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(SPIM_CONFIG_CPHA_Leading<sp/><sp/><sp/><sp/>&lt;&lt;<sp/>SPIM_CONFIG_CPHA_Pos);</highlight></codeline>
<codeline lineno="1457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1458"><highlight class="normal"></highlight></codeline>
<codeline lineno="1459"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__nrf__spim__hal_1ggaf6ad2321f2fd4a896c097b5d4040ff94a2368e8c2513b90b07310cbfa2efbfc38" kindref="member">NRF_SPIM_MODE_3</ref>:</highlight></codeline>
<codeline lineno="1460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>config<sp/>|=<sp/>(SPIM_CONFIG_CPOL_ActiveLow<sp/><sp/>&lt;&lt;<sp/>SPIM_CONFIG_CPOL_Pos)<sp/>|</highlight></codeline>
<codeline lineno="1461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(SPIM_CONFIG_CPHA_Trailing<sp/><sp/><sp/>&lt;&lt;<sp/>SPIM_CONFIG_CPHA_Pos);</highlight></codeline>
<codeline lineno="1462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1463"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1464"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;CONFIG<sp/>=<sp/>config;</highlight></codeline>
<codeline lineno="1465"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1466"><highlight class="normal"></highlight></codeline>
<codeline lineno="1467"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__spim__hal_1gafeac3b0a862ff72358ceeb02edd22704" kindref="member">nrf_spim_orc_set</ref>(NRF_SPIM_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="1468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>orc)</highlight></codeline>
<codeline lineno="1469"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1470"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;ORC<sp/>=<sp/>orc;</highlight></codeline>
<codeline lineno="1471"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1472"><highlight class="normal"></highlight></codeline>
<codeline lineno="1473"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_SPIM_HAS_ARRAY_LIST</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1474"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__spim__hal_1ga7357a796a2fdf9d2c4ae16a0350852c7" kindref="member">nrf_spim_tx_list_enable</ref>(NRF_SPIM_Type<sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="1475"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1476"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;TXD.LIST<sp/>=<sp/>SPIM_TXD_LIST_LIST_ArrayList<sp/>&lt;&lt;<sp/>SPIM_TXD_LIST_LIST_Pos;</highlight></codeline>
<codeline lineno="1477"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1478"><highlight class="normal"></highlight></codeline>
<codeline lineno="1479"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__spim__hal_1ga72c0c83e5b18565861b24cc2f9b7b405" kindref="member">nrf_spim_tx_list_disable</ref>(NRF_SPIM_Type<sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="1480"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1481"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;TXD.LIST<sp/>=<sp/>SPIM_TXD_LIST_LIST_Disabled<sp/>&lt;&lt;<sp/>SPIM_TXD_LIST_LIST_Pos;</highlight></codeline>
<codeline lineno="1482"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1483"><highlight class="normal"></highlight></codeline>
<codeline lineno="1484"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__spim__hal_1ga1352d05967bc99ec35c6a35653263caa" kindref="member">nrf_spim_rx_list_enable</ref>(NRF_SPIM_Type<sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="1485"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1486"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;RXD.LIST<sp/>=<sp/>SPIM_RXD_LIST_LIST_ArrayList<sp/>&lt;&lt;<sp/>SPIM_RXD_LIST_LIST_Pos;</highlight></codeline>
<codeline lineno="1487"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1488"><highlight class="normal"></highlight></codeline>
<codeline lineno="1489"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__spim__hal_1ga2a825732a31c91886fc4915c73fe437f" kindref="member">nrf_spim_rx_list_disable</ref>(NRF_SPIM_Type<sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="1490"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1491"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;RXD.LIST<sp/>=<sp/>SPIM_RXD_LIST_LIST_Disabled<sp/>&lt;&lt;<sp/>SPIM_RXD_LIST_LIST_Pos;</highlight></codeline>
<codeline lineno="1492"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1493"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1494"><highlight class="normal"></highlight></codeline>
<codeline lineno="1495"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_SPIM_HAS_DMA_TASKS_EVENTS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1496"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__spim__hal_1ga3743c8659fc70ce914c2cb8fab44bfa9" kindref="member">nrf_spim_rx_pattern_match_enable_set</ref>(NRF_SPIM_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="1497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index,</highlight></codeline>
<codeline lineno="1498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>enable)</highlight></codeline>
<codeline lineno="1499"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1500"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__glue_1ga9698a3f6b6bea455d2b54a79e514ee36" kindref="member">NRFX_ASSERT</ref>(index<sp/>&lt;<sp/><ref refid="group__nrf__spim__hal_1gaa9f3c255b1f00e6734f3dbfc6983b710" kindref="member">NRF_SPIM_DMA_RX_PATTERN_MAX_COUNT</ref>);</highlight></codeline>
<codeline lineno="1501"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(index)</highlight></codeline>
<codeline lineno="1502"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0:</highlight></codeline>
<codeline lineno="1504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_reg-&gt;DMA.RX.MATCH.CONFIG<sp/>=<sp/>((p_reg-&gt;DMA.RX.MATCH.CONFIG<sp/>&amp;</highlight></codeline>
<codeline lineno="1505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>~SPIM_DMA_RX_MATCH_CONFIG_ENABLE0_Msk)<sp/>|</highlight></codeline>
<codeline lineno="1506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((enable<sp/>?</highlight></codeline>
<codeline lineno="1507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SPIM_DMA_RX_MATCH_CONFIG_ENABLE0_Enabled<sp/>:</highlight></codeline>
<codeline lineno="1508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SPIM_DMA_RX_MATCH_CONFIG_ENABLE0_Disabled)</highlight></codeline>
<codeline lineno="1509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>SPIM_DMA_RX_MATCH_CONFIG_ENABLE0_Pos));</highlight></codeline>
<codeline lineno="1510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>1:</highlight></codeline>
<codeline lineno="1512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_reg-&gt;DMA.RX.MATCH.CONFIG<sp/>=<sp/>((p_reg-&gt;DMA.RX.MATCH.CONFIG<sp/>&amp;</highlight></codeline>
<codeline lineno="1513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>~SPIM_DMA_RX_MATCH_CONFIG_ENABLE1_Msk)<sp/>|</highlight></codeline>
<codeline lineno="1514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((enable<sp/>?</highlight></codeline>
<codeline lineno="1515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SPIM_DMA_RX_MATCH_CONFIG_ENABLE1_Enabled<sp/>:</highlight></codeline>
<codeline lineno="1516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SPIM_DMA_RX_MATCH_CONFIG_ENABLE1_Disabled)</highlight></codeline>
<codeline lineno="1517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>SPIM_DMA_RX_MATCH_CONFIG_ENABLE1_Pos));</highlight></codeline>
<codeline lineno="1518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>2:</highlight></codeline>
<codeline lineno="1520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_reg-&gt;DMA.RX.MATCH.CONFIG<sp/>=<sp/>((p_reg-&gt;DMA.RX.MATCH.CONFIG<sp/>&amp;</highlight></codeline>
<codeline lineno="1521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>~SPIM_DMA_RX_MATCH_CONFIG_ENABLE2_Msk)<sp/>|</highlight></codeline>
<codeline lineno="1522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((enable<sp/>?</highlight></codeline>
<codeline lineno="1523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SPIM_DMA_RX_MATCH_CONFIG_ENABLE2_Enabled<sp/>:</highlight></codeline>
<codeline lineno="1524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SPIM_DMA_RX_MATCH_CONFIG_ENABLE2_Disabled)</highlight></codeline>
<codeline lineno="1525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>SPIM_DMA_RX_MATCH_CONFIG_ENABLE2_Pos));</highlight></codeline>
<codeline lineno="1526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>3:</highlight></codeline>
<codeline lineno="1528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_reg-&gt;DMA.RX.MATCH.CONFIG<sp/>=<sp/>((p_reg-&gt;DMA.RX.MATCH.CONFIG<sp/>&amp;</highlight></codeline>
<codeline lineno="1529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>~SPIM_DMA_RX_MATCH_CONFIG_ENABLE3_Msk)<sp/>|</highlight></codeline>
<codeline lineno="1530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((enable<sp/>?</highlight></codeline>
<codeline lineno="1531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SPIM_DMA_RX_MATCH_CONFIG_ENABLE3_Enabled<sp/>:</highlight></codeline>
<codeline lineno="1532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SPIM_DMA_RX_MATCH_CONFIG_ENABLE3_Disabled)</highlight></codeline>
<codeline lineno="1533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>SPIM_DMA_RX_MATCH_CONFIG_ENABLE3_Pos));</highlight></codeline>
<codeline lineno="1534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrfx__glue_1ga9698a3f6b6bea455d2b54a79e514ee36" kindref="member">NRFX_ASSERT</ref>(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1538"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1539"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1540"><highlight class="normal"></highlight></codeline>
<codeline lineno="1541"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrf__spim__hal_1gae1bd8ded6444d29f9ccf5f5bec319c9e" kindref="member">nrf_spim_rx_pattern_match_enable_check</ref>(NRF_SPIM_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="1542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index)</highlight></codeline>
<codeline lineno="1543"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1544"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__glue_1ga9698a3f6b6bea455d2b54a79e514ee36" kindref="member">NRFX_ASSERT</ref>(index<sp/>&lt;<sp/><ref refid="group__nrf__spim__hal_1gaa9f3c255b1f00e6734f3dbfc6983b710" kindref="member">NRF_SPIM_DMA_RX_PATTERN_MAX_COUNT</ref>);</highlight></codeline>
<codeline lineno="1545"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(index)</highlight></codeline>
<codeline lineno="1546"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0:</highlight></codeline>
<codeline lineno="1548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((p_reg-&gt;DMA.RX.MATCH.CONFIG<sp/>&amp;<sp/>SPIM_DMA_RX_MATCH_CONFIG_ENABLE0_Msk)</highlight></codeline>
<codeline lineno="1549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;<sp/>SPIM_DMA_RX_MATCH_CONFIG_ENABLE0_Pos)<sp/>==</highlight></codeline>
<codeline lineno="1550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SPIM_DMA_RX_MATCH_CONFIG_ENABLE0_Enabled;</highlight></codeline>
<codeline lineno="1551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>1:</highlight></codeline>
<codeline lineno="1552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((p_reg-&gt;DMA.RX.MATCH.CONFIG<sp/>&amp;<sp/>SPIM_DMA_RX_MATCH_CONFIG_ENABLE1_Msk)</highlight></codeline>
<codeline lineno="1553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;<sp/>SPIM_DMA_RX_MATCH_CONFIG_ENABLE1_Pos)<sp/>==</highlight></codeline>
<codeline lineno="1554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SPIM_DMA_RX_MATCH_CONFIG_ENABLE1_Enabled;</highlight></codeline>
<codeline lineno="1555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>2:</highlight></codeline>
<codeline lineno="1556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((p_reg-&gt;DMA.RX.MATCH.CONFIG<sp/>&amp;<sp/>SPIM_DMA_RX_MATCH_CONFIG_ENABLE2_Msk)</highlight></codeline>
<codeline lineno="1557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;<sp/>SPIM_DMA_RX_MATCH_CONFIG_ENABLE2_Pos)<sp/>==</highlight></codeline>
<codeline lineno="1558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SPIM_DMA_RX_MATCH_CONFIG_ENABLE2_Enabled;</highlight></codeline>
<codeline lineno="1559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>3:</highlight></codeline>
<codeline lineno="1560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((p_reg-&gt;DMA.RX.MATCH.CONFIG<sp/>&amp;<sp/>SPIM_DMA_RX_MATCH_CONFIG_ENABLE3_Msk)</highlight></codeline>
<codeline lineno="1561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;<sp/>SPIM_DMA_RX_MATCH_CONFIG_ENABLE3_Pos)<sp/>==</highlight></codeline>
<codeline lineno="1562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SPIM_DMA_RX_MATCH_CONFIG_ENABLE3_Enabled;</highlight></codeline>
<codeline lineno="1563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrfx__glue_1ga9698a3f6b6bea455d2b54a79e514ee36" kindref="member">NRFX_ASSERT</ref>(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1566"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1567"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1568"><highlight class="normal"></highlight></codeline>
<codeline lineno="1569"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__spim__hal_1gadd5cfcbb5e4b523ea0419a099eb1524e" kindref="member">nrf_spim_rx_pattern_match_one_shot_enable</ref>(NRF_SPIM_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="1570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index)</highlight></codeline>
<codeline lineno="1571"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1572"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__glue_1ga9698a3f6b6bea455d2b54a79e514ee36" kindref="member">NRFX_ASSERT</ref>(index<sp/>&lt;<sp/><ref refid="group__nrf__spim__hal_1gaa9f3c255b1f00e6734f3dbfc6983b710" kindref="member">NRF_SPIM_DMA_RX_PATTERN_MAX_COUNT</ref>);</highlight></codeline>
<codeline lineno="1573"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(index)</highlight></codeline>
<codeline lineno="1574"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0:</highlight></codeline>
<codeline lineno="1576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_reg-&gt;DMA.RX.MATCH.CONFIG<sp/>|=<sp/>SPIM_DMA_RX_MATCH_CONFIG_ONESHOT0_Msk;</highlight></codeline>
<codeline lineno="1577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>1:</highlight></codeline>
<codeline lineno="1579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_reg-&gt;DMA.RX.MATCH.CONFIG<sp/>|=<sp/>SPIM_DMA_RX_MATCH_CONFIG_ONESHOT1_Msk;</highlight></codeline>
<codeline lineno="1580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>2:</highlight></codeline>
<codeline lineno="1582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_reg-&gt;DMA.RX.MATCH.CONFIG<sp/>|=<sp/>SPIM_DMA_RX_MATCH_CONFIG_ONESHOT2_Msk;</highlight></codeline>
<codeline lineno="1583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>3:</highlight></codeline>
<codeline lineno="1585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_reg-&gt;DMA.RX.MATCH.CONFIG<sp/>|=<sp/>SPIM_DMA_RX_MATCH_CONFIG_ONESHOT3_Msk;</highlight></codeline>
<codeline lineno="1586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrfx__glue_1ga9698a3f6b6bea455d2b54a79e514ee36" kindref="member">NRFX_ASSERT</ref>(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1590"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1591"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1592"><highlight class="normal"></highlight></codeline>
<codeline lineno="1593"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__spim__hal_1ga26cc50e322ee0cbb77f1fa983b094b07" kindref="member">nrf_spim_rx_pattern_match_one_shot_disable</ref>(NRF_SPIM_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="1594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index)</highlight></codeline>
<codeline lineno="1595"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1596"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__glue_1ga9698a3f6b6bea455d2b54a79e514ee36" kindref="member">NRFX_ASSERT</ref>(index<sp/>&lt;<sp/><ref refid="group__nrf__spim__hal_1gaa9f3c255b1f00e6734f3dbfc6983b710" kindref="member">NRF_SPIM_DMA_RX_PATTERN_MAX_COUNT</ref>);</highlight></codeline>
<codeline lineno="1597"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(index)</highlight></codeline>
<codeline lineno="1598"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0:</highlight></codeline>
<codeline lineno="1600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_reg-&gt;DMA.RX.MATCH.CONFIG<sp/>&amp;=<sp/>~(SPIM_DMA_RX_MATCH_CONFIG_ONESHOT0_Msk);</highlight></codeline>
<codeline lineno="1601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>1:</highlight></codeline>
<codeline lineno="1603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_reg-&gt;DMA.RX.MATCH.CONFIG<sp/>&amp;=<sp/>~(SPIM_DMA_RX_MATCH_CONFIG_ONESHOT1_Msk);</highlight></codeline>
<codeline lineno="1604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>2:</highlight></codeline>
<codeline lineno="1606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_reg-&gt;DMA.RX.MATCH.CONFIG<sp/>&amp;=<sp/>~(SPIM_DMA_RX_MATCH_CONFIG_ONESHOT2_Msk);</highlight></codeline>
<codeline lineno="1607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>3:</highlight></codeline>
<codeline lineno="1609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_reg-&gt;DMA.RX.MATCH.CONFIG<sp/>&amp;=<sp/>~(SPIM_DMA_RX_MATCH_CONFIG_ONESHOT3_Msk);</highlight></codeline>
<codeline lineno="1610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrfx__glue_1ga9698a3f6b6bea455d2b54a79e514ee36" kindref="member">NRFX_ASSERT</ref>(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1614"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1615"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1616"><highlight class="normal"></highlight></codeline>
<codeline lineno="1617"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrf__spim__hal_1gaac8746783116cce64872b1d25f4d9a5d" kindref="member">nrf_spim_rx_pattern_match_one_shot_check</ref>(NRF_SPIM_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="1618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index)</highlight></codeline>
<codeline lineno="1619"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1620"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__glue_1ga9698a3f6b6bea455d2b54a79e514ee36" kindref="member">NRFX_ASSERT</ref>(index<sp/>&lt;<sp/><ref refid="group__nrf__spim__hal_1gaa9f3c255b1f00e6734f3dbfc6983b710" kindref="member">NRF_SPIM_DMA_RX_PATTERN_MAX_COUNT</ref>);</highlight></codeline>
<codeline lineno="1621"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(index)</highlight></codeline>
<codeline lineno="1622"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0:</highlight></codeline>
<codeline lineno="1624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((p_reg-&gt;DMA.RX.MATCH.CONFIG<sp/>&amp;<sp/>SPIM_DMA_RX_MATCH_CONFIG_ONESHOT0_Msk)</highlight></codeline>
<codeline lineno="1625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;<sp/>SPIM_DMA_RX_MATCH_CONFIG_ONESHOT0_Pos)<sp/>==</highlight></codeline>
<codeline lineno="1626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SPIM_DMA_RX_MATCH_CONFIG_ONESHOT0_Oneshot;</highlight></codeline>
<codeline lineno="1627"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>1:</highlight></codeline>
<codeline lineno="1628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((p_reg-&gt;DMA.RX.MATCH.CONFIG<sp/>&amp;<sp/>SPIM_DMA_RX_MATCH_CONFIG_ONESHOT1_Msk)</highlight></codeline>
<codeline lineno="1629"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;<sp/>SPIM_DMA_RX_MATCH_CONFIG_ONESHOT1_Pos)<sp/>==</highlight></codeline>
<codeline lineno="1630"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SPIM_DMA_RX_MATCH_CONFIG_ONESHOT1_Oneshot;</highlight></codeline>
<codeline lineno="1631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>2:</highlight></codeline>
<codeline lineno="1632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((p_reg-&gt;DMA.RX.MATCH.CONFIG<sp/>&amp;<sp/>SPIM_DMA_RX_MATCH_CONFIG_ONESHOT2_Msk)</highlight></codeline>
<codeline lineno="1633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;<sp/>SPIM_DMA_RX_MATCH_CONFIG_ONESHOT2_Pos)<sp/>==</highlight></codeline>
<codeline lineno="1634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SPIM_DMA_RX_MATCH_CONFIG_ONESHOT2_Oneshot;</highlight></codeline>
<codeline lineno="1635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>3:</highlight></codeline>
<codeline lineno="1636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((p_reg-&gt;DMA.RX.MATCH.CONFIG<sp/>&amp;<sp/>SPIM_DMA_RX_MATCH_CONFIG_ONESHOT3_Msk)</highlight></codeline>
<codeline lineno="1637"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;<sp/>SPIM_DMA_RX_MATCH_CONFIG_ONESHOT3_Pos)<sp/>==</highlight></codeline>
<codeline lineno="1638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SPIM_DMA_RX_MATCH_CONFIG_ONESHOT3_Oneshot;</highlight></codeline>
<codeline lineno="1639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrfx__glue_1ga9698a3f6b6bea455d2b54a79e514ee36" kindref="member">NRFX_ASSERT</ref>(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1642"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1643"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1644"><highlight class="normal"></highlight></codeline>
<codeline lineno="1645"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__spim__hal_1ga2f644bca032ebb67882ba3c2daf70395" kindref="member">nrf_spim_rx_pattern_match_candidate_set</ref>(NRF_SPIM_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="1646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index,</highlight></codeline>
<codeline lineno="1647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pattern)</highlight></codeline>
<codeline lineno="1648"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1649"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__glue_1ga9698a3f6b6bea455d2b54a79e514ee36" kindref="member">NRFX_ASSERT</ref>(index<sp/>&lt;<sp/><ref refid="group__nrf__spim__hal_1gaa9f3c255b1f00e6734f3dbfc6983b710" kindref="member">NRF_SPIM_DMA_RX_PATTERN_MAX_COUNT</ref>);</highlight></codeline>
<codeline lineno="1650"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;DMA.RX.MATCH.CANDIDATE[index]<sp/>=<sp/>pattern;</highlight></codeline>
<codeline lineno="1651"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1652"><highlight class="normal"></highlight></codeline>
<codeline lineno="1653"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__spim__hal_1gabea2f074d7418877d22b1887f2e1da93" kindref="member">nrf_spim_rx_pattern_match_candidate_get</ref>(NRF_SPIM_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="1654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index)</highlight></codeline>
<codeline lineno="1655"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1656"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__glue_1ga9698a3f6b6bea455d2b54a79e514ee36" kindref="member">NRFX_ASSERT</ref>(index<sp/>&lt;<sp/><ref refid="group__nrf__spim__hal_1gaa9f3c255b1f00e6734f3dbfc6983b710" kindref="member">NRF_SPIM_DMA_RX_PATTERN_MAX_COUNT</ref>);</highlight></codeline>
<codeline lineno="1657"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p_reg-&gt;DMA.RX.MATCH.CANDIDATE[index];</highlight></codeline>
<codeline lineno="1658"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1659"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRF_SPIM_HAS_DMA_TASKS_EVENTS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1660"><highlight class="normal"></highlight></codeline>
<codeline lineno="1661"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_SPIM_HAS_DMA_REG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1662"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__spim__hal_1gab3c907595d436e304d426d46e8bd6257" kindref="member">nrf_spim_rx_terminate_on_bus_error_enable</ref>(NRF_SPIM_Type<sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="1663"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1664"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;DMA.RX.TERMINATEONBUSERROR<sp/>|=<sp/>SPIM_DMA_RX_TERMINATEONBUSERROR_ENABLE_Msk;</highlight></codeline>
<codeline lineno="1665"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1666"><highlight class="normal"></highlight></codeline>
<codeline lineno="1667"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__spim__hal_1ga0d87335b0601f1a32dbdc90d81b3af5a" kindref="member">nrf_spim_rx_terminate_on_bus_error_disable</ref>(NRF_SPIM_Type<sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="1668"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1669"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;DMA.RX.TERMINATEONBUSERROR<sp/>&amp;=<sp/>~(SPIM_DMA_RX_TERMINATEONBUSERROR_ENABLE_Msk);</highlight></codeline>
<codeline lineno="1670"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1671"><highlight class="normal"></highlight></codeline>
<codeline lineno="1672"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrf__spim__hal_1gae056088d0fa548f6fd158ad0f99c672f" kindref="member">nrf_spim_rx_terminate_on_bus_error_check</ref>(NRF_SPIM_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="1673"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1674"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((p_reg-&gt;DMA.RX.TERMINATEONBUSERROR<sp/>&amp;<sp/>SPIM_DMA_RX_TERMINATEONBUSERROR_ENABLE_Msk)</highlight></codeline>
<codeline lineno="1675"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;<sp/>SPIM_DMA_RX_TERMINATEONBUSERROR_ENABLE_Pos)<sp/>==</highlight></codeline>
<codeline lineno="1676"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SPIM_DMA_RX_TERMINATEONBUSERROR_ENABLE_Enabled;</highlight></codeline>
<codeline lineno="1677"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1678"><highlight class="normal"></highlight></codeline>
<codeline lineno="1679"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__spim__hal_1ga0c13534b0ba4b532f3cbaff8835bc018" kindref="member">nrf_spim_tx_terminate_on_bus_error_enable</ref>(NRF_SPIM_Type<sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="1680"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1681"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;DMA.TX.TERMINATEONBUSERROR<sp/>|=<sp/>SPIM_DMA_TX_TERMINATEONBUSERROR_ENABLE_Msk;</highlight></codeline>
<codeline lineno="1682"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1683"><highlight class="normal"></highlight></codeline>
<codeline lineno="1684"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__spim__hal_1ga4f87df8e8d9db46678947bfa714dfba0" kindref="member">nrf_spim_tx_terminate_on_bus_error_disable</ref>(NRF_SPIM_Type<sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="1685"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1686"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;DMA.TX.TERMINATEONBUSERROR<sp/>&amp;=<sp/>~(SPIM_DMA_TX_TERMINATEONBUSERROR_ENABLE_Msk);</highlight></codeline>
<codeline lineno="1687"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1688"><highlight class="normal"></highlight></codeline>
<codeline lineno="1689"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrf__spim__hal_1ga5a0b4df867b8cdf9c3217568be4f672f" kindref="member">nrf_spim_tx_terminate_on_bus_error_check</ref>(NRF_SPIM_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="1690"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1691"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((p_reg-&gt;DMA.TX.TERMINATEONBUSERROR<sp/>&amp;<sp/>SPIM_DMA_TX_TERMINATEONBUSERROR_ENABLE_Msk)</highlight></codeline>
<codeline lineno="1692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;<sp/>SPIM_DMA_TX_TERMINATEONBUSERROR_ENABLE_Pos)<sp/>==</highlight></codeline>
<codeline lineno="1693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SPIM_DMA_TX_TERMINATEONBUSERROR_ENABLE_Enabled;</highlight></codeline>
<codeline lineno="1694"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1695"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRF_SPIM_HAS_DMA_REG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1696"><highlight class="normal"></highlight></codeline>
<codeline lineno="1697"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRF_DECLARE_ONLY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1698"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1699"><highlight class="comment">/**<sp/>@}<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1700"><highlight class="normal"></highlight></codeline>
<codeline lineno="1701"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1702"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1703"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1704"><highlight class="normal"></highlight></codeline>
<codeline lineno="1705"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRF_SPIM_H__</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="hal/nrf_spim.h"/>
  </compounddef>
</doxygen>
