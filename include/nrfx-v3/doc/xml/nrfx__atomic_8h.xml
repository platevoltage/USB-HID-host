<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="nrfx__atomic_8h" kind="file" language="C++">
    <compoundname>nrfx_atomic.h</compoundname>
    <includes local="no">nrfx.h</includes>
    <incdepgraph>
      <node id="1">
        <label>soc/nrfx_atomic.h</label>
        <link refid="nrfx__atomic_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>nrfx.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group__nrfx__atomic_1gac45ed9440064af19b8e0ccf789021792" prot="public" static="no">
        <type>volatile uint32_t</type>
        <definition>typedef volatile uint32_t nrfx_atomic_u32_t</definition>
        <argsstring></argsstring>
        <name>nrfx_atomic_u32_t</name>
        <briefdescription>
<para>Atomic 32-bit unsigned type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="soc/nrfx_atomic.h" line="56" column="27" bodyfile="soc/nrfx_atomic.h" bodystart="56" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__nrfx__atomic_1ga0bc7eaf97533ed806a2d0582cab64f57" prot="public" static="no">
        <type>volatile uint32_t</type>
        <definition>typedef volatile uint32_t nrfx_atomic_flag_t</definition>
        <argsstring></argsstring>
        <name>nrfx_atomic_flag_t</name>
        <briefdescription>
<para>Atomic 1-bit flag type (technically 32-bit). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="soc/nrfx_atomic.h" line="59" column="27" bodyfile="soc/nrfx_atomic.h" bodystart="59" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__nrfx__atomic_1ga53791107404cfc7160197f72a26de36e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t nrfx_atomic_u32_fetch_store</definition>
        <argsstring>(nrfx_atomic_u32_t *p_data, uint32_t value)</argsstring>
        <name>nrfx_atomic_u32_fetch_store</name>
        <param>
          <type><ref refid="group__nrfx__atomic_1gac45ed9440064af19b8e0ccf789021792" kindref="member">nrfx_atomic_u32_t</ref> *</type>
          <declname>p_data</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Function for storing a value to an atomic object and returning its previous value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_data</parametername>
</parameternamelist>
<parameterdescription>
<para>Atomic memory pointer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to store.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Previous value stored in the atomic object. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="soc/nrfx_atomic.h" line="69" column="10" declfile="soc/nrfx_atomic.h" declline="69" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfx__atomic_1gaa145d22f65910e4292c3ee76285aa91e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t nrfx_atomic_u32_store</definition>
        <argsstring>(nrfx_atomic_u32_t *p_data, uint32_t value)</argsstring>
        <name>nrfx_atomic_u32_store</name>
        <param>
          <type><ref refid="group__nrfx__atomic_1gac45ed9440064af19b8e0ccf789021792" kindref="member">nrfx_atomic_u32_t</ref> *</type>
          <declname>p_data</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Function for storing a value to an atomic object and returning its new value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_data</parametername>
</parameternamelist>
<parameterdescription>
<para>Atomic memory pointer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to store.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>New value stored in the atomic object. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="soc/nrfx_atomic.h" line="79" column="10" declfile="soc/nrfx_atomic.h" declline="79" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfx__atomic_1ga9a3082c76a9ab5fc1f2a4ac06b4cc57f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t nrfx_atomic_u32_fetch_or</definition>
        <argsstring>(nrfx_atomic_u32_t *p_data, uint32_t value)</argsstring>
        <name>nrfx_atomic_u32_fetch_or</name>
        <param>
          <type><ref refid="group__nrfx__atomic_1gac45ed9440064af19b8e0ccf789021792" kindref="member">nrfx_atomic_u32_t</ref> *</type>
          <declname>p_data</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Function for running a logical OR operation on an atomic object and returning its previous value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_data</parametername>
</parameternamelist>
<parameterdescription>
<para>Atomic memory pointer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>Value of the second operand in the OR operation.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Previous value stored in the atomic object. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="soc/nrfx_atomic.h" line="90" column="10" declfile="soc/nrfx_atomic.h" declline="90" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfx__atomic_1ga1e662c020a5f354af3d6fbe77b29ab92" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t nrfx_atomic_u32_or</definition>
        <argsstring>(nrfx_atomic_u32_t *p_data, uint32_t value)</argsstring>
        <name>nrfx_atomic_u32_or</name>
        <param>
          <type><ref refid="group__nrfx__atomic_1gac45ed9440064af19b8e0ccf789021792" kindref="member">nrfx_atomic_u32_t</ref> *</type>
          <declname>p_data</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Function for running a logical OR operation on an atomic object and returning its new value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_data</parametername>
</parameternamelist>
<parameterdescription>
<para>Atomic memory pointer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>Value of the second operand in the OR operation.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>New value stored in the atomic object. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="soc/nrfx_atomic.h" line="101" column="10" declfile="soc/nrfx_atomic.h" declline="101" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfx__atomic_1ga5e5d76cbcdeaece98d93a934661e36a8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t nrfx_atomic_u32_fetch_and</definition>
        <argsstring>(nrfx_atomic_u32_t *p_data, uint32_t value)</argsstring>
        <name>nrfx_atomic_u32_fetch_and</name>
        <param>
          <type><ref refid="group__nrfx__atomic_1gac45ed9440064af19b8e0ccf789021792" kindref="member">nrfx_atomic_u32_t</ref> *</type>
          <declname>p_data</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Function for running a logical AND operation on an atomic object and returning its previous value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_data</parametername>
</parameternamelist>
<parameterdescription>
<para>Atomic memory pointer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>Value of the second operand in the AND operation.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Previous value stored in the atomic object. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="soc/nrfx_atomic.h" line="112" column="10" declfile="soc/nrfx_atomic.h" declline="112" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfx__atomic_1ga2f21b9d719eb9e3a6466abe598da71e9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t nrfx_atomic_u32_and</definition>
        <argsstring>(nrfx_atomic_u32_t *p_data, uint32_t value)</argsstring>
        <name>nrfx_atomic_u32_and</name>
        <param>
          <type><ref refid="group__nrfx__atomic_1gac45ed9440064af19b8e0ccf789021792" kindref="member">nrfx_atomic_u32_t</ref> *</type>
          <declname>p_data</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Function for running a logical AND operation on an atomic object and returning its new value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_data</parametername>
</parameternamelist>
<parameterdescription>
<para>Atomic memory pointer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>Value of the second operand in the AND operation.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>New value stored in the atomic object. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="soc/nrfx_atomic.h" line="123" column="10" declfile="soc/nrfx_atomic.h" declline="123" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfx__atomic_1ga83ba4d8a9f5be3c3c143bb98948b121c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t nrfx_atomic_u32_fetch_xor</definition>
        <argsstring>(nrfx_atomic_u32_t *p_data, uint32_t value)</argsstring>
        <name>nrfx_atomic_u32_fetch_xor</name>
        <param>
          <type><ref refid="group__nrfx__atomic_1gac45ed9440064af19b8e0ccf789021792" kindref="member">nrfx_atomic_u32_t</ref> *</type>
          <declname>p_data</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Function for running a logical XOR operation on an atomic object and returning its previous value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_data</parametername>
</parameternamelist>
<parameterdescription>
<para>Atomic memory pointer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>Value of the second operand in the XOR operation.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Previous value stored in the atomic object. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="soc/nrfx_atomic.h" line="134" column="10" declfile="soc/nrfx_atomic.h" declline="134" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfx__atomic_1ga9bb15e4972e0e4d4553cfaef6df53df9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t nrfx_atomic_u32_xor</definition>
        <argsstring>(nrfx_atomic_u32_t *p_data, uint32_t value)</argsstring>
        <name>nrfx_atomic_u32_xor</name>
        <param>
          <type><ref refid="group__nrfx__atomic_1gac45ed9440064af19b8e0ccf789021792" kindref="member">nrfx_atomic_u32_t</ref> *</type>
          <declname>p_data</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Function for running a logical XOR operation on an atomic object and returning its new value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_data</parametername>
</parameternamelist>
<parameterdescription>
<para>Atomic memory pointer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>Value of the second operand in the XOR operation.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>New value stored in the atomic object. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="soc/nrfx_atomic.h" line="145" column="10" declfile="soc/nrfx_atomic.h" declline="145" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfx__atomic_1gaf00c47c08d170d50ab5a30397c9f6c30" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t nrfx_atomic_u32_fetch_add</definition>
        <argsstring>(nrfx_atomic_u32_t *p_data, uint32_t value)</argsstring>
        <name>nrfx_atomic_u32_fetch_add</name>
        <param>
          <type><ref refid="group__nrfx__atomic_1gac45ed9440064af19b8e0ccf789021792" kindref="member">nrfx_atomic_u32_t</ref> *</type>
          <declname>p_data</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Function for running an arithmetic ADD operation on an atomic object and returning its previous value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_data</parametername>
</parameternamelist>
<parameterdescription>
<para>Atomic memory pointer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>Value of the second operand in the ADD operation.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Previous value stored in the atomic object. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="soc/nrfx_atomic.h" line="156" column="10" declfile="soc/nrfx_atomic.h" declline="156" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfx__atomic_1ga5ba28362c51866798e453633ea84a2c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t nrfx_atomic_u32_add</definition>
        <argsstring>(nrfx_atomic_u32_t *p_data, uint32_t value)</argsstring>
        <name>nrfx_atomic_u32_add</name>
        <param>
          <type><ref refid="group__nrfx__atomic_1gac45ed9440064af19b8e0ccf789021792" kindref="member">nrfx_atomic_u32_t</ref> *</type>
          <declname>p_data</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Function for running an arithmetic ADD operation on an atomic object and returning its new value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_data</parametername>
</parameternamelist>
<parameterdescription>
<para>Atomic memory pointer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>Value of the second operand in the ADD operation.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>New value stored in the atomic object. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="soc/nrfx_atomic.h" line="167" column="10" declfile="soc/nrfx_atomic.h" declline="167" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfx__atomic_1gacb784f3ac44ce24b577f8a1d234efa21" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t nrfx_atomic_u32_fetch_sub</definition>
        <argsstring>(nrfx_atomic_u32_t *p_data, uint32_t value)</argsstring>
        <name>nrfx_atomic_u32_fetch_sub</name>
        <param>
          <type><ref refid="group__nrfx__atomic_1gac45ed9440064af19b8e0ccf789021792" kindref="member">nrfx_atomic_u32_t</ref> *</type>
          <declname>p_data</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Function for running an arithmetic SUB operation on an atomic object and returning its previous value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_data</parametername>
</parameternamelist>
<parameterdescription>
<para>Atomic memory pointer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>Value of the second operand in the SUB operation.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Old value stored in the atomic object. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="soc/nrfx_atomic.h" line="178" column="10" declfile="soc/nrfx_atomic.h" declline="178" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfx__atomic_1ga0186d5113ae95dce0fab20cf466358a3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t nrfx_atomic_u32_sub</definition>
        <argsstring>(nrfx_atomic_u32_t *p_data, uint32_t value)</argsstring>
        <name>nrfx_atomic_u32_sub</name>
        <param>
          <type><ref refid="group__nrfx__atomic_1gac45ed9440064af19b8e0ccf789021792" kindref="member">nrfx_atomic_u32_t</ref> *</type>
          <declname>p_data</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Function for running an arithmetic SUB operation on an atomic object and returning its new value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_data</parametername>
</parameternamelist>
<parameterdescription>
<para>Atomic memory pointer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>Value of the second operand in the SUB operation.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>New value stored in the atomic object. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="soc/nrfx_atomic.h" line="189" column="10" declfile="soc/nrfx_atomic.h" declline="189" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfx__atomic_1ga6ad1c0c728f72ff0e23e7dfc4f6a1f44" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool nrfx_atomic_u32_cmp_exch</definition>
        <argsstring>(nrfx_atomic_u32_t *p_data, uint32_t *p_expected, uint32_t desired)</argsstring>
        <name>nrfx_atomic_u32_cmp_exch</name>
        <param>
          <type><ref refid="group__nrfx__atomic_1gac45ed9440064af19b8e0ccf789021792" kindref="member">nrfx_atomic_u32_t</ref> *</type>
          <declname>p_data</declname>
        </param>
        <param>
          <type>uint32_t *</type>
          <declname>p_expected</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>desired</declname>
        </param>
        <briefdescription>
<para>Function for atomic conditional value replacement. </para>
        </briefdescription>
        <detaileddescription>
<para>Atomically compares the value pointed to by <computeroutput>p_data</computeroutput> with the value pointed to by <computeroutput>p_expected</computeroutput>. If those are equal, replaces the former with desired. Otherwise, loads the actual value pointed to by <computeroutput>p_data</computeroutput> into <computeroutput>*p_expected</computeroutput>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p_data</parametername>
</parameternamelist>
<parameterdescription>
<para>Atomic memory pointer to test and modify. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_expected</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the test value. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>desired</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to be stored to atomic memory.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>*p_data</computeroutput> was equal to <computeroutput>*p_expected</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>*p_data</computeroutput> was not equal to <computeroutput>*p_expected</computeroutput>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="soc/nrfx_atomic.h" line="205" column="6" declfile="soc/nrfx_atomic.h" declline="205" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfx__atomic_1gafbbaeb4c56475a44d273790feeff9217" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t nrfx_atomic_u32_fetch_sub_hs</definition>
        <argsstring>(nrfx_atomic_u32_t *p_data, uint32_t value)</argsstring>
        <name>nrfx_atomic_u32_fetch_sub_hs</name>
        <param>
          <type><ref refid="group__nrfx__atomic_1gac45ed9440064af19b8e0ccf789021792" kindref="member">nrfx_atomic_u32_t</ref> *</type>
          <declname>p_data</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Function for running an arithmetic SUB operation on an atomic object if object &gt;= value, and returning its previous value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_data</parametername>
</parameternamelist>
<parameterdescription>
<para>Atomic memory pointer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>Value of the second operand in the SUB operation.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Previous value stored in the atomic object. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="soc/nrfx_atomic.h" line="218" column="10" declfile="soc/nrfx_atomic.h" declline="218" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfx__atomic_1ga7b93d59e728cc847155d1146ac29671a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t nrfx_atomic_u32_sub_hs</definition>
        <argsstring>(nrfx_atomic_u32_t *p_data, uint32_t value)</argsstring>
        <name>nrfx_atomic_u32_sub_hs</name>
        <param>
          <type><ref refid="group__nrfx__atomic_1gac45ed9440064af19b8e0ccf789021792" kindref="member">nrfx_atomic_u32_t</ref> *</type>
          <declname>p_data</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Function for running an arithmetic SUB operation on an atomic object if object &gt;= value, and returning its new value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_data</parametername>
</parameternamelist>
<parameterdescription>
<para>Atomic memory pointer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>Value of the second operand in the SUB operation.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>New value stored in the atomic object. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="soc/nrfx_atomic.h" line="229" column="10" declfile="soc/nrfx_atomic.h" declline="229" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfx__atomic_1gaf1592cd86a50f08aff8a8d42fbf32b8e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t nrfx_atomic_flag_set_fetch</definition>
        <argsstring>(nrfx_atomic_flag_t *p_data)</argsstring>
        <name>nrfx_atomic_flag_set_fetch</name>
        <param>
          <type><ref refid="group__nrfx__atomic_1ga0bc7eaf97533ed806a2d0582cab64f57" kindref="member">nrfx_atomic_flag_t</ref> *</type>
          <declname>p_data</declname>
        </param>
        <briefdescription>
<para>Function for running a logical one bit flag set operation on an atomic object and returning its previous value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_data</parametername>
</parameternamelist>
<parameterdescription>
<para>Atomic flag memory pointer.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Previous flag value. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="soc/nrfx_atomic.h" line="239" column="10" declfile="soc/nrfx_atomic.h" declline="239" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfx__atomic_1gad6273e79a6ffcb76b76f3eaf46d0677e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t nrfx_atomic_flag_set</definition>
        <argsstring>(nrfx_atomic_flag_t *p_data)</argsstring>
        <name>nrfx_atomic_flag_set</name>
        <param>
          <type><ref refid="group__nrfx__atomic_1ga0bc7eaf97533ed806a2d0582cab64f57" kindref="member">nrfx_atomic_flag_t</ref> *</type>
          <declname>p_data</declname>
        </param>
        <briefdescription>
<para>Function for running a logical one bit flag set operation on an atomic object and returning its new value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_data</parametername>
</parameternamelist>
<parameterdescription>
<para>Atomic flag memory pointer.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>New flag value. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="soc/nrfx_atomic.h" line="249" column="10" declfile="soc/nrfx_atomic.h" declline="249" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfx__atomic_1ga0a8e5d11ccaa93a8f896c849c2b28e90" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t nrfx_atomic_flag_clear_fetch</definition>
        <argsstring>(nrfx_atomic_flag_t *p_data)</argsstring>
        <name>nrfx_atomic_flag_clear_fetch</name>
        <param>
          <type><ref refid="group__nrfx__atomic_1ga0bc7eaf97533ed806a2d0582cab64f57" kindref="member">nrfx_atomic_flag_t</ref> *</type>
          <declname>p_data</declname>
        </param>
        <briefdescription>
<para>Function for running a logical one bit flag clear operation on an atomic object and returning its previous value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_data</parametername>
</parameternamelist>
<parameterdescription>
<para>Atomic flag memory pointer.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Previous flag value. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="soc/nrfx_atomic.h" line="259" column="10" declfile="soc/nrfx_atomic.h" declline="259" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfx__atomic_1ga143b956a4b7aa27482cc045a76940ed7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t nrfx_atomic_flag_clear</definition>
        <argsstring>(nrfx_atomic_flag_t *p_data)</argsstring>
        <name>nrfx_atomic_flag_clear</name>
        <param>
          <type><ref refid="group__nrfx__atomic_1ga0bc7eaf97533ed806a2d0582cab64f57" kindref="member">nrfx_atomic_flag_t</ref> *</type>
          <declname>p_data</declname>
        </param>
        <briefdescription>
<para>Function for running a logical one bit flag clear operation on an atomic object and returning its new value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_data</parametername>
</parameternamelist>
<parameterdescription>
<para>Atomic flag memory pointer.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>New flag value. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="soc/nrfx_atomic.h" line="269" column="10" declfile="soc/nrfx_atomic.h" declline="269" declcolumn="10"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2016<sp/>-<sp/>2024,<sp/>Nordic<sp/>Semiconductor<sp/>ASA</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>All<sp/>rights<sp/>reserved.</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>SPDX-License-Identifier:<sp/>BSD-3-Clause</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions<sp/>are<sp/>met:</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>1.<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright<sp/>notice,<sp/>this</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>2.<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the<sp/>distribution.</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/>3.<sp/>Neither<sp/>the<sp/>name<sp/>of<sp/>the<sp/>copyright<sp/>holder<sp/>nor<sp/>the<sp/>names<sp/>of<sp/>its</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>contributors<sp/>may<sp/>be<sp/>used<sp/>to<sp/>endorse<sp/>or<sp/>promote<sp/>products<sp/>derived<sp/>from<sp/>this</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>software<sp/>without<sp/>specific<sp/>prior<sp/>written<sp/>permission.</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>COPYRIGHT<sp/>HOLDERS<sp/>AND<sp/>CONTRIBUTORS<sp/>&quot;AS<sp/>IS&quot;</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/>AND<sp/>ANY<sp/>EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>THE</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*<sp/>ARE<sp/>DISCLAIMED.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>COPYRIGHT<sp/>HOLDER<sp/>OR<sp/>CONTRIBUTORS<sp/>BE</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,<sp/>SPECIAL,<sp/>EXEMPLARY,<sp/>OR</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>PROCUREMENT<sp/>OF</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>*<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,<sp/>DATA,<sp/>OR<sp/>PROFITS;<sp/>OR<sp/>BUSINESS</highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/>*<sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY<sp/>THEORY<sp/>OF<sp/>LIABILITY,<sp/>WHETHER<sp/>IN</highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/>*<sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR<sp/>OTHERWISE)</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/>*<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE<sp/>OF<sp/>THIS<sp/>SOFTWARE,<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/>*<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight></codeline>
<codeline lineno="32"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>NRFX_ATOMIC_H__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRFX_ATOMIC_H__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;nrfx.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="43"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="44"><highlight class="comment"><sp/>*<sp/>@defgroup<sp/>nrfx_atomic<sp/>Atomic<sp/>operations<sp/>API</highlight></codeline>
<codeline lineno="45"><highlight class="comment"><sp/>*<sp/>@ingroup<sp/>nrfx</highlight></codeline>
<codeline lineno="46"><highlight class="comment"><sp/>*<sp/>@{</highlight></codeline>
<codeline lineno="47"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="48"><highlight class="comment"><sp/>*<sp/>@brief<sp/>This<sp/>module<sp/>implements<sp/>C11<sp/>stdatomic.h<sp/>simplified<sp/>API.</highlight></codeline>
<codeline lineno="49"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="50"><highlight class="comment"><sp/>*<sp/>At<sp/>this<sp/>point,<sp/>only<sp/>Cortex-M3<sp/>and<sp/>M4<sp/>cores<sp/>are<sp/>supported<sp/>(LDREX/STREX<sp/>instructions).</highlight></codeline>
<codeline lineno="51"><highlight class="comment"><sp/>*<sp/>Atomic<sp/>types<sp/>are<sp/>limited<sp/>to<sp/>@ref<sp/>nrfx_atomic_u32_t<sp/>and<sp/>@ref<sp/>nrfx_atomic_flag_t.</highlight></codeline>
<codeline lineno="52"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="55"><highlight class="comment">/**<sp/>@brief<sp/>Atomic<sp/>32-bit<sp/>unsigned<sp/>type.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint32_t<sp/><ref refid="group__nrfx__atomic_1gac45ed9440064af19b8e0ccf789021792" kindref="member">nrfx_atomic_u32_t</ref>;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="58"><highlight class="comment">/**<sp/>@brief<sp/>Atomic<sp/>1-bit<sp/>flag<sp/>type<sp/>(technically<sp/>32-bit).<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint32_t<sp/><ref refid="group__nrfx__atomic_1ga0bc7eaf97533ed806a2d0582cab64f57" kindref="member">nrfx_atomic_flag_t</ref>;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="61"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="62"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>storing<sp/>a<sp/>value<sp/>to<sp/>an<sp/>atomic<sp/>object<sp/>and<sp/>returning<sp/>its<sp/>previous<sp/>value.</highlight></codeline>
<codeline lineno="63"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="64"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_data<sp/>Atomic<sp/>memory<sp/>pointer.</highlight></codeline>
<codeline lineno="65"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>value<sp/><sp/>Value<sp/>to<sp/>store.</highlight></codeline>
<codeline lineno="66"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="67"><highlight class="comment"><sp/>*<sp/>@return<sp/>Previous<sp/>value<sp/>stored<sp/>in<sp/>the<sp/>atomic<sp/>object.</highlight></codeline>
<codeline lineno="68"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal">uint32_t<sp/><ref refid="group__nrfx__atomic_1ga53791107404cfc7160197f72a26de36e" kindref="member">nrfx_atomic_u32_fetch_store</ref>(<ref refid="group__nrfx__atomic_1gac45ed9440064af19b8e0ccf789021792" kindref="member">nrfx_atomic_u32_t</ref><sp/>*<sp/>p_data,<sp/>uint32_t<sp/>value);</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="71"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="72"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>storing<sp/>a<sp/>value<sp/>to<sp/>an<sp/>atomic<sp/>object<sp/>and<sp/>returning<sp/>its<sp/>new<sp/>value.</highlight></codeline>
<codeline lineno="73"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="74"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_data<sp/>Atomic<sp/>memory<sp/>pointer.</highlight></codeline>
<codeline lineno="75"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>value<sp/><sp/>Value<sp/>to<sp/>store.</highlight></codeline>
<codeline lineno="76"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="77"><highlight class="comment"><sp/>*<sp/>@return<sp/>New<sp/>value<sp/>stored<sp/>in<sp/>the<sp/>atomic<sp/>object.</highlight></codeline>
<codeline lineno="78"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal">uint32_t<sp/><ref refid="group__nrfx__atomic_1gaa145d22f65910e4292c3ee76285aa91e" kindref="member">nrfx_atomic_u32_store</ref>(<ref refid="group__nrfx__atomic_1gac45ed9440064af19b8e0ccf789021792" kindref="member">nrfx_atomic_u32_t</ref><sp/>*<sp/>p_data,<sp/>uint32_t<sp/>value);</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="81"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="82"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>running<sp/>a<sp/>logical<sp/>OR<sp/>operation<sp/>on<sp/>an<sp/>atomic<sp/>object</highlight></codeline>
<codeline lineno="83"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>and<sp/>returning<sp/>its<sp/>previous<sp/>value.</highlight></codeline>
<codeline lineno="84"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="85"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_data<sp/>Atomic<sp/>memory<sp/>pointer.</highlight></codeline>
<codeline lineno="86"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>value<sp/><sp/>Value<sp/>of<sp/>the<sp/>second<sp/>operand<sp/>in<sp/>the<sp/>OR<sp/>operation.</highlight></codeline>
<codeline lineno="87"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="88"><highlight class="comment"><sp/>*<sp/>@return<sp/>Previous<sp/>value<sp/>stored<sp/>in<sp/>the<sp/>atomic<sp/>object.</highlight></codeline>
<codeline lineno="89"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal">uint32_t<sp/><ref refid="group__nrfx__atomic_1ga9a3082c76a9ab5fc1f2a4ac06b4cc57f" kindref="member">nrfx_atomic_u32_fetch_or</ref>(<ref refid="group__nrfx__atomic_1gac45ed9440064af19b8e0ccf789021792" kindref="member">nrfx_atomic_u32_t</ref><sp/>*<sp/>p_data,<sp/>uint32_t<sp/>value);</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="92"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="93"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>running<sp/>a<sp/>logical<sp/>OR<sp/>operation<sp/>on<sp/>an<sp/>atomic<sp/>object</highlight></codeline>
<codeline lineno="94"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>and<sp/>returning<sp/>its<sp/>new<sp/>value.</highlight></codeline>
<codeline lineno="95"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="96"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_data<sp/>Atomic<sp/>memory<sp/>pointer.</highlight></codeline>
<codeline lineno="97"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>value<sp/><sp/>Value<sp/>of<sp/>the<sp/>second<sp/>operand<sp/>in<sp/>the<sp/>OR<sp/>operation.</highlight></codeline>
<codeline lineno="98"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="99"><highlight class="comment"><sp/>*<sp/>@return<sp/>New<sp/>value<sp/>stored<sp/>in<sp/>the<sp/>atomic<sp/>object.</highlight></codeline>
<codeline lineno="100"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal">uint32_t<sp/><ref refid="group__nrfx__atomic_1ga1e662c020a5f354af3d6fbe77b29ab92" kindref="member">nrfx_atomic_u32_or</ref>(<ref refid="group__nrfx__atomic_1gac45ed9440064af19b8e0ccf789021792" kindref="member">nrfx_atomic_u32_t</ref><sp/>*<sp/>p_data,<sp/>uint32_t<sp/>value);</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="103"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="104"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>running<sp/>a<sp/>logical<sp/>AND<sp/>operation<sp/>on<sp/>an<sp/>atomic<sp/>object</highlight></codeline>
<codeline lineno="105"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>and<sp/>returning<sp/>its<sp/>previous<sp/>value.</highlight></codeline>
<codeline lineno="106"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="107"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_data<sp/>Atomic<sp/>memory<sp/>pointer.</highlight></codeline>
<codeline lineno="108"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>value<sp/><sp/>Value<sp/>of<sp/>the<sp/>second<sp/>operand<sp/>in<sp/>the<sp/>AND<sp/>operation.</highlight></codeline>
<codeline lineno="109"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="110"><highlight class="comment"><sp/>*<sp/>@return<sp/>Previous<sp/>value<sp/>stored<sp/>in<sp/>the<sp/>atomic<sp/>object.</highlight></codeline>
<codeline lineno="111"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal">uint32_t<sp/><ref refid="group__nrfx__atomic_1ga5e5d76cbcdeaece98d93a934661e36a8" kindref="member">nrfx_atomic_u32_fetch_and</ref>(<ref refid="group__nrfx__atomic_1gac45ed9440064af19b8e0ccf789021792" kindref="member">nrfx_atomic_u32_t</ref><sp/>*<sp/>p_data,<sp/>uint32_t<sp/>value);</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="114"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="115"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>running<sp/>a<sp/>logical<sp/>AND<sp/>operation<sp/>on<sp/>an<sp/>atomic<sp/>object</highlight></codeline>
<codeline lineno="116"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>and<sp/>returning<sp/>its<sp/>new<sp/>value.</highlight></codeline>
<codeline lineno="117"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="118"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_data<sp/>Atomic<sp/>memory<sp/>pointer.</highlight></codeline>
<codeline lineno="119"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>value<sp/><sp/>Value<sp/>of<sp/>the<sp/>second<sp/>operand<sp/>in<sp/>the<sp/>AND<sp/>operation.</highlight></codeline>
<codeline lineno="120"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="121"><highlight class="comment"><sp/>*<sp/>@return<sp/>New<sp/>value<sp/>stored<sp/>in<sp/>the<sp/>atomic<sp/>object.</highlight></codeline>
<codeline lineno="122"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal">uint32_t<sp/><ref refid="group__nrfx__atomic_1ga2f21b9d719eb9e3a6466abe598da71e9" kindref="member">nrfx_atomic_u32_and</ref>(<ref refid="group__nrfx__atomic_1gac45ed9440064af19b8e0ccf789021792" kindref="member">nrfx_atomic_u32_t</ref><sp/>*<sp/>p_data,<sp/>uint32_t<sp/>value);</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="125"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="126"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>running<sp/>a<sp/>logical<sp/>XOR<sp/>operation<sp/>on<sp/>an<sp/>atomic<sp/>object</highlight></codeline>
<codeline lineno="127"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>and<sp/>returning<sp/>its<sp/>previous<sp/>value.</highlight></codeline>
<codeline lineno="128"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="129"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_data<sp/>Atomic<sp/>memory<sp/>pointer.</highlight></codeline>
<codeline lineno="130"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>value<sp/><sp/>Value<sp/>of<sp/>the<sp/>second<sp/>operand<sp/>in<sp/>the<sp/>XOR<sp/>operation.</highlight></codeline>
<codeline lineno="131"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="132"><highlight class="comment"><sp/>*<sp/>@return<sp/>Previous<sp/>value<sp/>stored<sp/>in<sp/>the<sp/>atomic<sp/>object.</highlight></codeline>
<codeline lineno="133"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal">uint32_t<sp/><ref refid="group__nrfx__atomic_1ga83ba4d8a9f5be3c3c143bb98948b121c" kindref="member">nrfx_atomic_u32_fetch_xor</ref>(<ref refid="group__nrfx__atomic_1gac45ed9440064af19b8e0ccf789021792" kindref="member">nrfx_atomic_u32_t</ref><sp/>*<sp/>p_data,<sp/>uint32_t<sp/>value);</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="136"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="137"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>running<sp/>a<sp/>logical<sp/>XOR<sp/>operation<sp/>on<sp/>an<sp/>atomic<sp/>object</highlight></codeline>
<codeline lineno="138"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>and<sp/>returning<sp/>its<sp/>new<sp/>value.</highlight></codeline>
<codeline lineno="139"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="140"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_data<sp/>Atomic<sp/>memory<sp/>pointer.</highlight></codeline>
<codeline lineno="141"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>value<sp/><sp/>Value<sp/>of<sp/>the<sp/>second<sp/>operand<sp/>in<sp/>the<sp/>XOR<sp/>operation.</highlight></codeline>
<codeline lineno="142"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="143"><highlight class="comment"><sp/>*<sp/>@return<sp/>New<sp/>value<sp/>stored<sp/>in<sp/>the<sp/>atomic<sp/>object.</highlight></codeline>
<codeline lineno="144"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal">uint32_t<sp/><ref refid="group__nrfx__atomic_1ga9bb15e4972e0e4d4553cfaef6df53df9" kindref="member">nrfx_atomic_u32_xor</ref>(<ref refid="group__nrfx__atomic_1gac45ed9440064af19b8e0ccf789021792" kindref="member">nrfx_atomic_u32_t</ref><sp/>*<sp/>p_data,<sp/>uint32_t<sp/>value);</highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="147"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="148"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>running<sp/>an<sp/>arithmetic<sp/>ADD<sp/>operation<sp/>on<sp/>an<sp/>atomic<sp/>object</highlight></codeline>
<codeline lineno="149"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>and<sp/>returning<sp/>its<sp/>previous<sp/>value.</highlight></codeline>
<codeline lineno="150"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="151"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_data<sp/>Atomic<sp/>memory<sp/>pointer.</highlight></codeline>
<codeline lineno="152"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>value<sp/><sp/>Value<sp/>of<sp/>the<sp/>second<sp/>operand<sp/>in<sp/>the<sp/>ADD<sp/>operation.</highlight></codeline>
<codeline lineno="153"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="154"><highlight class="comment"><sp/>*<sp/>@return<sp/>Previous<sp/>value<sp/>stored<sp/>in<sp/>the<sp/>atomic<sp/>object.</highlight></codeline>
<codeline lineno="155"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal">uint32_t<sp/><ref refid="group__nrfx__atomic_1gaf00c47c08d170d50ab5a30397c9f6c30" kindref="member">nrfx_atomic_u32_fetch_add</ref>(<ref refid="group__nrfx__atomic_1gac45ed9440064af19b8e0ccf789021792" kindref="member">nrfx_atomic_u32_t</ref><sp/>*<sp/>p_data,<sp/>uint32_t<sp/>value);</highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="158"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="159"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>running<sp/>an<sp/>arithmetic<sp/>ADD<sp/>operation<sp/>on<sp/>an<sp/>atomic<sp/>object</highlight></codeline>
<codeline lineno="160"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>and<sp/>returning<sp/>its<sp/>new<sp/>value.</highlight></codeline>
<codeline lineno="161"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="162"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_data<sp/>Atomic<sp/>memory<sp/>pointer.</highlight></codeline>
<codeline lineno="163"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>value<sp/><sp/>Value<sp/>of<sp/>the<sp/>second<sp/>operand<sp/>in<sp/>the<sp/>ADD<sp/>operation.</highlight></codeline>
<codeline lineno="164"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="165"><highlight class="comment"><sp/>*<sp/>@return<sp/>New<sp/>value<sp/>stored<sp/>in<sp/>the<sp/>atomic<sp/>object.</highlight></codeline>
<codeline lineno="166"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal">uint32_t<sp/><ref refid="group__nrfx__atomic_1ga5ba28362c51866798e453633ea84a2c2" kindref="member">nrfx_atomic_u32_add</ref>(<ref refid="group__nrfx__atomic_1gac45ed9440064af19b8e0ccf789021792" kindref="member">nrfx_atomic_u32_t</ref><sp/>*<sp/>p_data,<sp/>uint32_t<sp/>value);</highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="169"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="170"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>running<sp/>an<sp/>arithmetic<sp/>SUB<sp/>operation<sp/>on<sp/>an<sp/>atomic<sp/>object</highlight></codeline>
<codeline lineno="171"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>and<sp/>returning<sp/>its<sp/>previous<sp/>value.</highlight></codeline>
<codeline lineno="172"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="173"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_data<sp/>Atomic<sp/>memory<sp/>pointer.</highlight></codeline>
<codeline lineno="174"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>value<sp/><sp/>Value<sp/>of<sp/>the<sp/>second<sp/>operand<sp/>in<sp/>the<sp/>SUB<sp/>operation.</highlight></codeline>
<codeline lineno="175"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="176"><highlight class="comment"><sp/>*<sp/>@return<sp/>Old<sp/>value<sp/>stored<sp/>in<sp/>the<sp/>atomic<sp/>object.</highlight></codeline>
<codeline lineno="177"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal">uint32_t<sp/><ref refid="group__nrfx__atomic_1gacb784f3ac44ce24b577f8a1d234efa21" kindref="member">nrfx_atomic_u32_fetch_sub</ref>(<ref refid="group__nrfx__atomic_1gac45ed9440064af19b8e0ccf789021792" kindref="member">nrfx_atomic_u32_t</ref><sp/>*<sp/>p_data,<sp/>uint32_t<sp/>value);</highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="180"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="181"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>running<sp/>an<sp/>arithmetic<sp/>SUB<sp/>operation<sp/>on<sp/>an<sp/>atomic<sp/>object</highlight></codeline>
<codeline lineno="182"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>and<sp/>returning<sp/>its<sp/>new<sp/>value.</highlight></codeline>
<codeline lineno="183"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="184"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_data<sp/>Atomic<sp/>memory<sp/>pointer.</highlight></codeline>
<codeline lineno="185"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>value<sp/><sp/>Value<sp/>of<sp/>the<sp/>second<sp/>operand<sp/>in<sp/>the<sp/>SUB<sp/>operation.</highlight></codeline>
<codeline lineno="186"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="187"><highlight class="comment"><sp/>*<sp/>@return<sp/>New<sp/>value<sp/>stored<sp/>in<sp/>the<sp/>atomic<sp/>object.</highlight></codeline>
<codeline lineno="188"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal">uint32_t<sp/><ref refid="group__nrfx__atomic_1ga0186d5113ae95dce0fab20cf466358a3" kindref="member">nrfx_atomic_u32_sub</ref>(<ref refid="group__nrfx__atomic_1gac45ed9440064af19b8e0ccf789021792" kindref="member">nrfx_atomic_u32_t</ref><sp/>*<sp/>p_data,<sp/>uint32_t<sp/>value);</highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="191"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="192"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>atomic<sp/>conditional<sp/>value<sp/>replacement.</highlight></codeline>
<codeline lineno="193"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="194"><highlight class="comment"><sp/>*<sp/>Atomically<sp/>compares<sp/>the<sp/>value<sp/>pointed<sp/>to<sp/>by<sp/>@p<sp/>p_data<sp/>with<sp/>the<sp/>value<sp/>pointed<sp/>to<sp/>by<sp/>@p<sp/>p_expected.</highlight></codeline>
<codeline lineno="195"><highlight class="comment"><sp/>*<sp/>If<sp/>those<sp/>are<sp/>equal,<sp/>replaces<sp/>the<sp/>former<sp/>with<sp/>desired.<sp/>Otherwise,<sp/>loads<sp/>the<sp/>actual<sp/>value</highlight></codeline>
<codeline lineno="196"><highlight class="comment"><sp/>*<sp/>pointed<sp/>to<sp/>by<sp/>@p<sp/>p_data<sp/>into<sp/>@p<sp/>*p_expected.</highlight></codeline>
<codeline lineno="197"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="198"><highlight class="comment"><sp/>*<sp/>@param<sp/>p_data<sp/><sp/><sp/><sp/><sp/>Atomic<sp/>memory<sp/>pointer<sp/>to<sp/>test<sp/>and<sp/>modify.</highlight></codeline>
<codeline lineno="199"><highlight class="comment"><sp/>*<sp/>@param<sp/>p_expected<sp/>Pointer<sp/>to<sp/>the<sp/>test<sp/>value.</highlight></codeline>
<codeline lineno="200"><highlight class="comment"><sp/>*<sp/>@param<sp/>desired<sp/><sp/><sp/><sp/>Value<sp/>to<sp/>be<sp/>stored<sp/>to<sp/>atomic<sp/>memory.</highlight></codeline>
<codeline lineno="201"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="202"><highlight class="comment"><sp/>*<sp/>@retval<sp/>true<sp/><sp/>@p<sp/>*p_data<sp/>was<sp/>equal<sp/>to<sp/>@p<sp/>*p_expected.</highlight></codeline>
<codeline lineno="203"><highlight class="comment"><sp/>*<sp/>@retval<sp/>false<sp/>@p<sp/>*p_data<sp/>was<sp/>not<sp/>equal<sp/>to<sp/>@p<sp/>*p_expected.</highlight></codeline>
<codeline lineno="204"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrfx__atomic_1ga6ad1c0c728f72ff0e23e7dfc4f6a1f44" kindref="member">nrfx_atomic_u32_cmp_exch</ref>(<ref refid="group__nrfx__atomic_1gac45ed9440064af19b8e0ccf789021792" kindref="member">nrfx_atomic_u32_t</ref><sp/>*<sp/>p_data,</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_expected,</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>desired);</highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="209"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="210"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>running<sp/>an<sp/>arithmetic<sp/>SUB<sp/>operation<sp/>on<sp/>an<sp/>atomic<sp/>object</highlight></codeline>
<codeline lineno="211"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>object<sp/>&gt;=<sp/>value,<sp/>and<sp/>returning<sp/>its<sp/>previous<sp/>value.</highlight></codeline>
<codeline lineno="212"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="213"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_data<sp/>Atomic<sp/>memory<sp/>pointer.</highlight></codeline>
<codeline lineno="214"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>value<sp/><sp/>Value<sp/>of<sp/>the<sp/>second<sp/>operand<sp/>in<sp/>the<sp/>SUB<sp/>operation.</highlight></codeline>
<codeline lineno="215"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="216"><highlight class="comment"><sp/>*<sp/>@return<sp/>Previous<sp/>value<sp/>stored<sp/>in<sp/>the<sp/>atomic<sp/>object.</highlight></codeline>
<codeline lineno="217"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal">uint32_t<sp/><ref refid="group__nrfx__atomic_1gafbbaeb4c56475a44d273790feeff9217" kindref="member">nrfx_atomic_u32_fetch_sub_hs</ref>(<ref refid="group__nrfx__atomic_1gac45ed9440064af19b8e0ccf789021792" kindref="member">nrfx_atomic_u32_t</ref><sp/>*<sp/>p_data,<sp/>uint32_t<sp/>value);</highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="220"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="221"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>running<sp/>an<sp/>arithmetic<sp/>SUB<sp/>operation<sp/>on<sp/>an<sp/>atomic<sp/>object</highlight></codeline>
<codeline lineno="222"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>object<sp/>&gt;=<sp/>value,<sp/>and<sp/>returning<sp/>its<sp/>new<sp/>value.</highlight></codeline>
<codeline lineno="223"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="224"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_data<sp/>Atomic<sp/>memory<sp/>pointer.</highlight></codeline>
<codeline lineno="225"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>value<sp/><sp/>Value<sp/>of<sp/>the<sp/>second<sp/>operand<sp/>in<sp/>the<sp/>SUB<sp/>operation.</highlight></codeline>
<codeline lineno="226"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="227"><highlight class="comment"><sp/>*<sp/>@return<sp/>New<sp/>value<sp/>stored<sp/>in<sp/>the<sp/>atomic<sp/>object.</highlight></codeline>
<codeline lineno="228"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal">uint32_t<sp/><ref refid="group__nrfx__atomic_1ga7b93d59e728cc847155d1146ac29671a" kindref="member">nrfx_atomic_u32_sub_hs</ref>(<ref refid="group__nrfx__atomic_1gac45ed9440064af19b8e0ccf789021792" kindref="member">nrfx_atomic_u32_t</ref><sp/>*<sp/>p_data,<sp/>uint32_t<sp/>value);</highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="231"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="232"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>running<sp/>a<sp/>logical<sp/>one<sp/>bit<sp/>flag<sp/>set<sp/>operation</highlight></codeline>
<codeline lineno="233"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>on<sp/>an<sp/>atomic<sp/>object<sp/>and<sp/>returning<sp/>its<sp/>previous<sp/>value.</highlight></codeline>
<codeline lineno="234"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="235"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_data<sp/>Atomic<sp/>flag<sp/>memory<sp/>pointer.</highlight></codeline>
<codeline lineno="236"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="237"><highlight class="comment"><sp/>*<sp/>@return<sp/>Previous<sp/>flag<sp/>value.</highlight></codeline>
<codeline lineno="238"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal">uint32_t<sp/><ref refid="group__nrfx__atomic_1gaf1592cd86a50f08aff8a8d42fbf32b8e" kindref="member">nrfx_atomic_flag_set_fetch</ref>(<ref refid="group__nrfx__atomic_1ga0bc7eaf97533ed806a2d0582cab64f57" kindref="member">nrfx_atomic_flag_t</ref><sp/>*<sp/>p_data);</highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="241"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="242"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>running<sp/>a<sp/>logical<sp/>one<sp/>bit<sp/>flag<sp/>set<sp/>operation</highlight></codeline>
<codeline lineno="243"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>on<sp/>an<sp/>atomic<sp/>object<sp/>and<sp/>returning<sp/>its<sp/>new<sp/>value.</highlight></codeline>
<codeline lineno="244"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="245"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_data<sp/>Atomic<sp/>flag<sp/>memory<sp/>pointer.</highlight></codeline>
<codeline lineno="246"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="247"><highlight class="comment"><sp/>*<sp/>@return<sp/>New<sp/>flag<sp/>value.</highlight></codeline>
<codeline lineno="248"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal">uint32_t<sp/><ref refid="group__nrfx__atomic_1gad6273e79a6ffcb76b76f3eaf46d0677e" kindref="member">nrfx_atomic_flag_set</ref>(<ref refid="group__nrfx__atomic_1ga0bc7eaf97533ed806a2d0582cab64f57" kindref="member">nrfx_atomic_flag_t</ref><sp/>*<sp/>p_data);</highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="251"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="252"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>running<sp/>a<sp/>logical<sp/>one<sp/>bit<sp/>flag<sp/>clear<sp/>operation</highlight></codeline>
<codeline lineno="253"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>on<sp/>an<sp/>atomic<sp/>object<sp/>and<sp/>returning<sp/>its<sp/>previous<sp/>value.</highlight></codeline>
<codeline lineno="254"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="255"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_data<sp/>Atomic<sp/>flag<sp/>memory<sp/>pointer.</highlight></codeline>
<codeline lineno="256"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="257"><highlight class="comment"><sp/>*<sp/>@return<sp/>Previous<sp/>flag<sp/>value.</highlight></codeline>
<codeline lineno="258"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal">uint32_t<sp/><ref refid="group__nrfx__atomic_1ga0a8e5d11ccaa93a8f896c849c2b28e90" kindref="member">nrfx_atomic_flag_clear_fetch</ref>(<ref refid="group__nrfx__atomic_1ga0bc7eaf97533ed806a2d0582cab64f57" kindref="member">nrfx_atomic_flag_t</ref><sp/>*<sp/>p_data);</highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="261"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="262"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>running<sp/>a<sp/>logical<sp/>one<sp/>bit<sp/>flag<sp/>clear<sp/>operation</highlight></codeline>
<codeline lineno="263"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>on<sp/>an<sp/>atomic<sp/>object<sp/>and<sp/>returning<sp/>its<sp/>new<sp/>value.</highlight></codeline>
<codeline lineno="264"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="265"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_data<sp/>Atomic<sp/>flag<sp/>memory<sp/>pointer.</highlight></codeline>
<codeline lineno="266"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="267"><highlight class="comment"><sp/>*<sp/>@return<sp/>New<sp/>flag<sp/>value.</highlight></codeline>
<codeline lineno="268"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal">uint32_t<sp/><ref refid="group__nrfx__atomic_1ga143b956a4b7aa27482cc045a76940ed7" kindref="member">nrfx_atomic_flag_clear</ref>(<ref refid="group__nrfx__atomic_1ga0bc7eaf97533ed806a2d0582cab64f57" kindref="member">nrfx_atomic_flag_t</ref><sp/>*<sp/>p_data);</highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="271"><highlight class="comment">/**<sp/>@}<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal">}</highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRFX_ATOMIC_H__</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="soc/nrfx_atomic.h"/>
  </compounddef>
</doxygen>
