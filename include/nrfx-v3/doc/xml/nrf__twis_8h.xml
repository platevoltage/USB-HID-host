<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="nrf__twis_8h" kind="file" language="C++">
    <compoundname>nrf_twis.h</compoundname>
    <includes local="no">nrfx.h</includes>
    <includedby refid="nrfx__twis_8h" local="no">drivers/include/nrfx_twis.h</includedby>
    <incdepgraph>
      <node id="1">
        <label>hal/nrf_twis.h</label>
        <link refid="nrf__twis_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>nrfx.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__nrf__twis__hal_1ga520afb8a5e2c91d381325db7147b7482" prot="public" static="no">
        <name>NRF_TWIS_HAS_DMA_REG</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Symbol indicating whether dedicated DMA register is present. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_twis.h" line="61" column="9" bodyfile="hal/nrf_twis.h" bodystart="61" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__twis__hal_1ga9eaff6ad9f15c4b6acce47b40696181b" prot="public" static="no">
        <name>NRF_TWIS_HAS_DMA_TASKS_EVENTS</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Symbol indicating whether TWIS DMA tasks and events are present. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_twis.h" line="70" column="9" bodyfile="hal/nrf_twis.h" bodystart="70" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__twis__hal_1ga166fe4f1e5f72674224b67aa38d5627d" prot="public" static="no">
        <name>NRF_TWIS_HAS_LIST_REG</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Symbol indicating whether TX or RX LIST is present. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_twis.h" line="77" column="9" bodyfile="hal/nrf_twis.h" bodystart="77" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__twis__hal_1ga365a3ad8153c5678ae91aa7247dbeddc" prot="public" static="no">
        <name>NRF_TWIS_TX_MAX_COUNT_SIZE</name>
        <initializer>TWIS_DMA_TX_MAXCNT_MAXCNT_Max</initializer>
        <briefdescription>
<para>Symbol specifying maximum possible size of the TX channel buffer. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_twis.h" line="84" column="9" bodyfile="hal/nrf_twis.h" bodystart="84" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__twis__hal_1gaf806829f02bef016ff107f290c832ff2" prot="public" static="no">
        <name>NRF_TWIS_RX_MAX_COUNT_SIZE</name>
        <initializer>TWIS_DMA_RX_MAXCNT_MAXCNT_Max</initializer>
        <briefdescription>
<para>Symbol specifying maximum possible size of the RX channel buffer. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_twis.h" line="86" column="9" bodyfile="hal/nrf_twis.h" bodystart="86" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__twis__hal_1gacdbe13a5e6552848d0e4fddd3b310b4c" prot="public" static="no">
        <name>NRF_TWIS_INST_GET</name>
        <param><defname>idx</defname></param>
        <initializer><ref refid="group__nrfx__utils_1ga5ea61d0994f6fb1ab5ed59d44f6a7ce9" kindref="member">NRFX_CONCAT</ref>(NRF_, TWIS, idx)</initializer>
        <briefdescription>
<para>Macro getting pointer to the structure of registers of the TWIS peripheral. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">idx</parametername>
</parameternamelist>
<parameterdescription>
<para>TWIS instance index.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to the structure of registers of the TWIS peripheral. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_twis.h" line="99" column="9" bodyfile="hal/nrf_twis.h" bodystart="99" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="group__nrf__twis__hal_1ga0f9a066f20fa56a413dc549242f56360" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_twis_task_t</name>
        <enumvalue id="group__nrf__twis__hal_1gga0f9a066f20fa56a413dc549242f56360ad8226f2f3aabcc2dd3b115b58b9e6893" prot="public">
          <name>NRF_TWIS_TASK_STOP</name>
          <initializer>= offsetof(NRF_TWIS_Type, TASKS_STOP)</initializer>
          <briefdescription>
<para>Stop TWIS transaction. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__twis__hal_1gga0f9a066f20fa56a413dc549242f56360a40ead6ea32c105084090aad204c180d3" prot="public">
          <name>NRF_TWIS_TASK_SUSPEND</name>
          <initializer>= offsetof(NRF_TWIS_Type, TASKS_SUSPEND)</initializer>
          <briefdescription>
<para>Suspend TWIS transaction. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__twis__hal_1gga0f9a066f20fa56a413dc549242f56360a1d1d07bc8f5bed82b967bd525f8500b6" prot="public">
          <name>NRF_TWIS_TASK_RESUME</name>
          <initializer>= offsetof(NRF_TWIS_Type, TASKS_RESUME)</initializer>
          <briefdescription>
<para>Resume TWIS transaction. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__twis__hal_1gga0f9a066f20fa56a413dc549242f56360aeb0d738dfe3ce8e4b5381ded3175eebd" prot="public">
          <name>NRF_TWIS_TASK_PREPARERX</name>
          <initializer>= offsetof(NRF_TWIS_Type, TASKS_PREPARERX)</initializer>
          <briefdescription>
<para>Prepare the TWIS slave to respond to a write command. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__twis__hal_1gga0f9a066f20fa56a413dc549242f56360a6af25e21181c33b78253d061d110d59c" prot="public">
          <name>NRF_TWIS_TASK_PREPARETX</name>
          <initializer>= offsetof(NRF_TWIS_Type, TASKS_PREPARETX)</initializer>
          <briefdescription>
<para>Prepare the TWIS slave to respond to a read command. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>TWIS tasks. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_twis.h" line="102" column="1" bodyfile="hal/nrf_twis.h" bodystart="103" bodyend="109"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__twis__hal_1gaa095872e374917692717a6088e5b6345" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_twis_event_t</name>
        <enumvalue id="group__nrf__twis__hal_1ggaa095872e374917692717a6088e5b6345afc19278c27f421341e0b95010bbe945e" prot="public">
          <name>NRF_TWIS_EVENT_STOPPED</name>
          <initializer>= offsetof(NRF_TWIS_Type, EVENTS_STOPPED)</initializer>
          <briefdescription>
<para>TWIS stopped. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__twis__hal_1ggaa095872e374917692717a6088e5b6345a3ec6c73558c76372ed1b9fa60d4b9422" prot="public">
          <name>NRF_TWIS_EVENT_ERROR</name>
          <initializer>= offsetof(NRF_TWIS_Type, EVENTS_ERROR)</initializer>
          <briefdescription>
<para>TWIS error. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__twis__hal_1ggaa095872e374917692717a6088e5b6345a69c227318aadc97d9cd70a291d62514d" prot="public">
          <name>NRF_TWIS_EVENT_RXSTARTED</name>
          <initializer>= offsetof(NRF_TWIS_Type, EVENTS_DMA.RX.READY)</initializer>
          <briefdescription>
<para>Receive sequence started. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__twis__hal_1ggaa095872e374917692717a6088e5b6345a47aadecc4e1015f96d75158d5baf4947" prot="public">
          <name>NRF_TWIS_EVENT_TXSTARTED</name>
          <initializer>= offsetof(NRF_TWIS_Type, EVENTS_DMA.TX.READY)</initializer>
          <briefdescription>
<para>Transmit sequence started. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__twis__hal_1ggaa095872e374917692717a6088e5b6345ab742a449e915ccbefac6111bdc4d81b2" prot="public">
          <name>NRF_TWIS_EVENT_WRITE</name>
          <initializer>= offsetof(NRF_TWIS_Type, EVENTS_WRITE)</initializer>
          <briefdescription>
<para>Write command received. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__twis__hal_1ggaa095872e374917692717a6088e5b6345a99914aa6f41e99dde790fd0e43562f38" prot="public">
          <name>NRF_TWIS_EVENT_READ</name>
          <initializer>= offsetof(NRF_TWIS_Type, EVENTS_READ)</initializer>
          <briefdescription>
<para>Read command received. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>TWIS events. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_twis.h" line="112" column="1" bodyfile="hal/nrf_twis.h" bodystart="113" bodyend="125"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__twis__hal_1gacfde7f6e58a79a94f6c6d82d6b04009e" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_twis_short_mask_t</name>
        <enumvalue id="group__nrf__twis__hal_1ggacfde7f6e58a79a94f6c6d82d6b04009eacaa3c31e85541513eb8d0aac5bf7e7f9" prot="public">
          <name>NRF_TWIS_SHORT_WRITE_SUSPEND_MASK</name>
          <initializer>= TWIS_SHORTS_WRITE_SUSPEND_Msk</initializer>
          <briefdescription>
<para>Shortcut between WRITE event and SUSPEND task. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__twis__hal_1ggacfde7f6e58a79a94f6c6d82d6b04009eaf6a887d8f0180ed20473026f952083c9" prot="public">
          <name>NRF_TWIS_SHORT_READ_SUSPEND_MASK</name>
          <initializer>= TWIS_SHORTS_READ_SUSPEND_Msk</initializer>
          <briefdescription>
<para>Shortcut between READ event and SUSPEND task. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>TWIS shortcuts. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_twis.h" line="128" column="1" bodyfile="hal/nrf_twis.h" bodystart="129" bodyend="132"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__twis__hal_1gaa212f1487a7c97c857a3f7a5e735fe66" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_twis_int_mask_t</name>
        <enumvalue id="group__nrf__twis__hal_1ggaa212f1487a7c97c857a3f7a5e735fe66a16079e93d11db458ba6b9fcb7b206836" prot="public">
          <name>NRF_TWIS_INT_STOPPED_MASK</name>
          <initializer>= TWIS_INTEN_STOPPED_Msk</initializer>
          <briefdescription>
<para>Interrupt on STOPPED event. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__twis__hal_1ggaa212f1487a7c97c857a3f7a5e735fe66afef4a53ae8e1c0264f187398b6be8182" prot="public">
          <name>NRF_TWIS_INT_ERROR_MASK</name>
          <initializer>= TWIS_INTEN_ERROR_Msk</initializer>
          <briefdescription>
<para>Interrupt on ERROR event. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__twis__hal_1ggaa212f1487a7c97c857a3f7a5e735fe66acd420d5a6766e11feca20958f6d164d8" prot="public">
          <name>NRF_TWIS_INT_RXSTARTED_MASK</name>
          <initializer>= TWIS_INTEN_DMARXREADY_Msk</initializer>
          <briefdescription>
<para>Interrupt on RXSTARTED event. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__twis__hal_1ggaa212f1487a7c97c857a3f7a5e735fe66ae96612387979bb74863fb9aab93d4b82" prot="public">
          <name>NRF_TWIS_INT_TXSTARTED_MASK</name>
          <initializer>= TWIS_INTEN_DMATXREADY_Msk</initializer>
          <briefdescription>
<para>Interrupt on TXSTARTED event. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__twis__hal_1ggaa212f1487a7c97c857a3f7a5e735fe66a51532ee1b18f64514c27c4806a35b1eb" prot="public">
          <name>NRF_TWIS_INT_WRITE_MASK</name>
          <initializer>= TWIS_INTEN_WRITE_Msk</initializer>
          <briefdescription>
<para>Interrupt on WRITE event. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__twis__hal_1ggaa212f1487a7c97c857a3f7a5e735fe66aedd94bc12333fc2af428721e4a87b1cb" prot="public">
          <name>NRF_TWIS_INT_READ_MASK</name>
          <initializer>= TWIS_INTEN_READ_Msk</initializer>
          <briefdescription>
<para>Interrupt on READ event. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>TWIS interrupts. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_twis.h" line="135" column="1" bodyfile="hal/nrf_twis.h" bodystart="136" bodyend="148"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__twis__hal_1gabc33e3d9a58851106ef1654c2aefa72d" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_twis_error_t</name>
        <enumvalue id="group__nrf__twis__hal_1ggabc33e3d9a58851106ef1654c2aefa72da0b6341d2c4508eede27dd0f644732845" prot="public">
          <name>NRF_TWIS_ERROR_OVERFLOW</name>
          <initializer>= TWIS_ERRORSRC_OVERFLOW_Msk</initializer>
          <briefdescription>
<para>RX buffer overflow detected, and prevented. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__twis__hal_1ggabc33e3d9a58851106ef1654c2aefa72da90bf770179754d7e71301f262e22d279" prot="public">
          <name>NRF_TWIS_ERROR_DATA_NACK</name>
          <initializer>= TWIS_ERRORSRC_DNACK_Msk</initializer>
          <briefdescription>
<para>NACK sent after receiving a data byte. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__twis__hal_1ggabc33e3d9a58851106ef1654c2aefa72dafbc85d896157a7c1819cf94150237775" prot="public">
          <name>NRF_TWIS_ERROR_OVERREAD</name>
          <initializer>= TWIS_ERRORSRC_OVERREAD_Msk</initializer>
          <briefdescription>
<para>TX buffer over-read detected, and prevented. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>TWIS error source. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_twis.h" line="151" column="1" bodyfile="hal/nrf_twis.h" bodystart="152" bodyend="156"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__twis__hal_1gae8b5a6d6e1ae57daec594f73b19092b1" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_twis_config_addr_mask_t</name>
        <enumvalue id="group__nrf__twis__hal_1ggae8b5a6d6e1ae57daec594f73b19092b1ab5e00ae6e5692af5f642d3a3168334c2" prot="public">
          <name>NRF_TWIS_CONFIG_ADDRESS0_MASK</name>
          <initializer>= TWIS_CONFIG_ADDRESS0_Msk</initializer>
          <briefdescription>
<para>Enable or disable address matching on ADDRESS[0]. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__twis__hal_1ggae8b5a6d6e1ae57daec594f73b19092b1aa6b26ebdb8233f171baf7ef0e0df0088" prot="public">
          <name>NRF_TWIS_CONFIG_ADDRESS1_MASK</name>
          <initializer>= TWIS_CONFIG_ADDRESS1_Msk</initializer>
          <briefdescription>
<para>Enable or disable address matching on ADDRESS[1]. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__twis__hal_1ggae8b5a6d6e1ae57daec594f73b19092b1affbb86eb76e4d96a629fc47931933e4f" prot="public">
          <name>NRF_TWIS_CONFIG_ADDRESS01_MASK</name>
          <initializer>= TWIS_CONFIG_ADDRESS0_Msk |
                                     TWIS_CONFIG_ADDRESS1_Msk</initializer>
          <briefdescription>
<para>Enable both address matching. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>TWIS address matching configuration. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_twis.h" line="159" column="1" bodyfile="hal/nrf_twis.h" bodystart="160" bodyend="165"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group__nrf__twis__hal_1gab3ec17f227b682bb63a6ca3b8bf78d8f" prot="public" static="no">
        <type>uint8_t</type>
        <definition>typedef uint8_t nrf_twis_address_t</definition>
        <argsstring></argsstring>
        <name>nrf_twis_address_t</name>
        <briefdescription>
<para>Smallest variable type to hold the TWI address. </para>
        </briefdescription>
        <detaileddescription>
<para>Variable of the minimum size that can hold a single TWI address.</para>
<para><simplesect kind="note"><para>Defined to make it simple to change if the new TWI supports for example 10 bit addressing mode. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_twis.h" line="175" column="17" bodyfile="hal/nrf_twis.h" bodystart="175" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__nrf__twis__hal_1gac6a70173d85ce7823437ba9f1c8164a9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_twis_task_trigger</definition>
        <argsstring>(NRF_TWIS_Type *p_reg, nrf_twis_task_t task)</argsstring>
        <name>nrf_twis_task_trigger</name>
        <param>
          <type>NRF_TWIS_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__twis__hal_1ga0f9a066f20fa56a413dc549242f56360" kindref="member">nrf_twis_task_t</ref></type>
          <declname>task</declname>
        </param>
        <briefdescription>
<para>Function for activating the specified TWIS task. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">task</parametername>
</parameternamelist>
<parameterdescription>
<para>Task to be activated. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_twis.h" line="635" column="24" bodyfile="hal/nrf_twis.h" bodystart="635" bodyend="638" declfile="hal/nrf_twis.h" declline="183" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__twis__hal_1gaa7cb188303fca30b566bcc33128fac21" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_twis_task_address_get</definition>
        <argsstring>(NRF_TWIS_Type const *p_reg, nrf_twis_task_t task)</argsstring>
        <name>nrf_twis_task_address_get</name>
        <param>
          <type>NRF_TWIS_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__twis__hal_1ga0f9a066f20fa56a413dc549242f56360" kindref="member">nrf_twis_task_t</ref></type>
          <declname>task</declname>
        </param>
        <briefdescription>
<para>Function for returning the address of the specified TWIS task register. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">task</parametername>
</parameternamelist>
<parameterdescription>
<para>The specified task.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Task address. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_twis.h" line="640" column="28" bodyfile="hal/nrf_twis.h" bodystart="640" bodyend="644" declfile="hal/nrf_twis.h" declline="193" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__twis__hal_1ga9b3471028011828ee2df2ff6f053eee2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_twis_event_clear</definition>
        <argsstring>(NRF_TWIS_Type *p_reg, nrf_twis_event_t event)</argsstring>
        <name>nrf_twis_event_clear</name>
        <param>
          <type>NRF_TWIS_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__twis__hal_1gaa095872e374917692717a6088e5b6345" kindref="member">nrf_twis_event_t</ref></type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>Function for clearing the specified event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>The specified event. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_twis.h" line="646" column="24" bodyfile="hal/nrf_twis.h" bodystart="646" bodyend="650" declfile="hal/nrf_twis.h" declline="202" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__twis__hal_1ga37232c7135fbe0f4681f6578ea3f5d55" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE bool</type>
        <definition>NRF_STATIC_INLINE bool nrf_twis_event_check</definition>
        <argsstring>(NRF_TWIS_Type const *p_reg, nrf_twis_event_t event)</argsstring>
        <name>nrf_twis_event_check</name>
        <param>
          <type>NRF_TWIS_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__twis__hal_1gaa095872e374917692717a6088e5b6345" kindref="member">nrf_twis_event_t</ref></type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>Function for retrieving the state of the TWIS event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event to be checked.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>The event has been generated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>The event has not been generated. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_twis.h" line="652" column="24" bodyfile="hal/nrf_twis.h" bodystart="652" bodyend="655" declfile="hal/nrf_twis.h" declline="213" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__twis__hal_1ga4f849f84aa26c795773c12b40db861ac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE bool</type>
        <definition>NRF_STATIC_INLINE bool nrf_twis_event_get_and_clear</definition>
        <argsstring>(NRF_TWIS_Type *p_reg, nrf_twis_event_t event)</argsstring>
        <name>nrf_twis_event_get_and_clear</name>
        <param>
          <type>NRF_TWIS_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__twis__hal_1gaa095872e374917692717a6088e5b6345" kindref="member">nrf_twis_event_t</ref></type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>Function for getting and clearing the state of the specified event. </para>
        </briefdescription>
        <detaileddescription>
<para>This function checks the state of the event and clears it.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>The event was set. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>The event was not set. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_twis.h" line="657" column="24" bodyfile="hal/nrf_twis.h" bodystart="657" bodyend="665" declfile="hal/nrf_twis.h" declline="226" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__twis__hal_1gaa361feaa2f23dd4b9fe417ff095ae490" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_twis_event_address_get</definition>
        <argsstring>(NRF_TWIS_Type const *p_reg, nrf_twis_event_t event)</argsstring>
        <name>nrf_twis_event_address_get</name>
        <param>
          <type>NRF_TWIS_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__twis__hal_1gaa095872e374917692717a6088e5b6345" kindref="member">nrf_twis_event_t</ref></type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>Function for returning the address of the specified TWIS event register. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Address. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_twis.h" line="667" column="28" bodyfile="hal/nrf_twis.h" bodystart="667" bodyend="671" declfile="hal/nrf_twis.h" declline="236" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__twis__hal_1ga3c6ff3552ca042c8593bef12db83caac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_twis_shorts_enable</definition>
        <argsstring>(NRF_TWIS_Type *p_reg, uint32_t mask)</argsstring>
        <name>nrf_twis_shorts_enable</name>
        <param>
          <type>NRF_TWIS_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Function for setting a shortcut. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of shortcuts to be enabled. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_twis.h" line="673" column="24" bodyfile="hal/nrf_twis.h" bodystart="673" bodyend="676" declfile="hal/nrf_twis.h" declline="245" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__twis__hal_1gac8764a8233f598003357fef2cf098e93" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_twis_shorts_disable</definition>
        <argsstring>(NRF_TWIS_Type *p_reg, uint32_t mask)</argsstring>
        <name>nrf_twis_shorts_disable</name>
        <param>
          <type>NRF_TWIS_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Function for clearing shortcuts. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of shortcuts to be disabled. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_twis.h" line="678" column="24" bodyfile="hal/nrf_twis.h" bodystart="678" bodyend="689" declfile="hal/nrf_twis.h" declline="253" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__twis__hal_1ga5a5229e9bff44a29450e7d5672665959" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_twis_shorts_get</definition>
        <argsstring>(NRF_TWIS_Type const *p_reg)</argsstring>
        <name>nrf_twis_shorts_get</name>
        <param>
          <type>NRF_TWIS_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting the shorts mask. </para>
        </briefdescription>
        <detaileddescription>
<para>Function returns shorts register.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Flags of currently enabled shortcuts </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_twis.h" line="691" column="28" bodyfile="hal/nrf_twis.h" bodystart="691" bodyend="694" declfile="hal/nrf_twis.h" declline="264" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__twis__hal_1ga70d9f76988e880d6052d128bd095dcd2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_twis_int_enable</definition>
        <argsstring>(NRF_TWIS_Type *p_reg, uint32_t mask)</argsstring>
        <name>nrf_twis_int_enable</name>
        <param>
          <type>NRF_TWIS_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Function for enabling the specified interrupts. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of interrupts to be enabled. Use <ref refid="group__nrf__twis__hal_1gaa212f1487a7c97c857a3f7a5e735fe66" kindref="member">nrf_twis_int_mask_t</ref> values for bit masking. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_twis.h" line="696" column="24" bodyfile="hal/nrf_twis.h" bodystart="696" bodyend="699" declfile="hal/nrf_twis.h" declline="273" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__twis__hal_1ga20806c89a383c02c930a1e287448fad8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_twis_int_enable_check</definition>
        <argsstring>(NRF_TWIS_Type const *p_reg, uint32_t mask)</argsstring>
        <name>nrf_twis_int_enable_check</name>
        <param>
          <type>NRF_TWIS_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Function for checking if the specified interrupts are enabled. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of interrupts to be checked. Use <ref refid="group__nrf__twis__hal_1gaa212f1487a7c97c857a3f7a5e735fe66" kindref="member">nrf_twis_int_mask_t</ref> values for bit masking.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Mask of enabled interrupts. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_twis.h" line="701" column="28" bodyfile="hal/nrf_twis.h" bodystart="701" bodyend="704" declfile="hal/nrf_twis.h" declline="284" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__twis__hal_1gae0c61580bd4494d3362271d8f8221251" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_twis_int_disable</definition>
        <argsstring>(NRF_TWIS_Type *p_reg, uint32_t mask)</argsstring>
        <name>nrf_twis_int_disable</name>
        <param>
          <type>NRF_TWIS_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Function for disabling the specified interrupts. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of interrupts to be disabled. Use <ref refid="group__nrf__twis__hal_1gaa212f1487a7c97c857a3f7a5e735fe66" kindref="member">nrf_twis_int_mask_t</ref> values for bit masking. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_twis.h" line="706" column="24" bodyfile="hal/nrf_twis.h" bodystart="706" bodyend="709" declfile="hal/nrf_twis.h" declline="293" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__twis__hal_1ga5f21afcd20b58e1c21fd40bee3cabb29" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_twis_subscribe_set</definition>
        <argsstring>(NRF_TWIS_Type *p_reg, nrf_twis_task_t task, uint8_t channel)</argsstring>
        <name>nrf_twis_subscribe_set</name>
        <param>
          <type>NRF_TWIS_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__twis__hal_1ga0f9a066f20fa56a413dc549242f56360" kindref="member">nrf_twis_task_t</ref></type>
          <declname>task</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>channel</declname>
        </param>
        <briefdescription>
<para>Function for setting the subscribe configuration for a given TWIS task. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">task</parametername>
</parameternamelist>
<parameterdescription>
<para>Task for which to set the configuration. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">channel</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel through which to subscribe events. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_twis.h" line="303" column="24" declfile="hal/nrf_twis.h" declline="303" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__twis__hal_1ga552aad914921d00de2b8cf8f620f76c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_twis_subscribe_clear</definition>
        <argsstring>(NRF_TWIS_Type *p_reg, nrf_twis_task_t task)</argsstring>
        <name>nrf_twis_subscribe_clear</name>
        <param>
          <type>NRF_TWIS_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__twis__hal_1ga0f9a066f20fa56a413dc549242f56360" kindref="member">nrf_twis_task_t</ref></type>
          <declname>task</declname>
        </param>
        <briefdescription>
<para>Function for clearing the subscribe configuration for a given TWIS task. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">task</parametername>
</parameternamelist>
<parameterdescription>
<para>Task for which to clear the configuration. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_twis.h" line="314" column="24" declfile="hal/nrf_twis.h" declline="314" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__twis__hal_1gacc5d93169ccb759bdbe5c8bd59f0535a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_twis_publish_set</definition>
        <argsstring>(NRF_TWIS_Type *p_reg, nrf_twis_event_t event, uint8_t channel)</argsstring>
        <name>nrf_twis_publish_set</name>
        <param>
          <type>NRF_TWIS_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__twis__hal_1gaa095872e374917692717a6088e5b6345" kindref="member">nrf_twis_event_t</ref></type>
          <declname>event</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>channel</declname>
        </param>
        <briefdescription>
<para>Function for setting the publish configuration for a given TWIS event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event for which to set the configuration. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">channel</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel through which to publish the event. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_twis.h" line="323" column="24" declfile="hal/nrf_twis.h" declline="323" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__twis__hal_1ga4dee0d30ccd6eaf35e1697d377412faa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_twis_publish_clear</definition>
        <argsstring>(NRF_TWIS_Type *p_reg, nrf_twis_event_t event)</argsstring>
        <name>nrf_twis_publish_clear</name>
        <param>
          <type>NRF_TWIS_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__twis__hal_1gaa095872e374917692717a6088e5b6345" kindref="member">nrf_twis_event_t</ref></type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>Function for clearing the publish configuration for a given TWIS event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event for which to clear the configuration. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_twis.h" line="333" column="24" declfile="hal/nrf_twis.h" declline="333" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__twis__hal_1ga68fb9a7b57216e06b539fc005680b7a4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_twis_error_source_get_and_clear</definition>
        <argsstring>(NRF_TWIS_Type *p_reg)</argsstring>
        <name>nrf_twis_error_source_get_and_clear</name>
        <param>
          <type>NRF_TWIS_Type *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for retrieving and clearing the TWIS error source. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="attention"><para>Error sources are cleared after read.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Error source mask with values from <ref refid="group__nrf__twis__hal_1gabc33e3d9a58851106ef1654c2aefa72d" kindref="member">nrf_twis_error_t</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_twis.h" line="739" column="28" bodyfile="hal/nrf_twis.h" bodystart="739" bodyend="744" declfile="hal/nrf_twis.h" declline="345" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__twis__hal_1ga88e0ff8d10b77aecba37cfebea94c53e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint_fast8_t</type>
        <definition>NRF_STATIC_INLINE uint_fast8_t nrf_twis_match_get</definition>
        <argsstring>(NRF_TWIS_Type const *p_reg)</argsstring>
        <name>nrf_twis_match_get</name>
        <param>
          <type>NRF_TWIS_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting information about which of the addresses matched. </para>
        </briefdescription>
        <detaileddescription>
<para>Function returns index in the address table that points to the address that already matched.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Index of matched address. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_twis.h" line="746" column="32" bodyfile="hal/nrf_twis.h" bodystart="746" bodyend="749" declfile="hal/nrf_twis.h" declline="357" declcolumn="32"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__twis__hal_1ga2b0bbdafe4f64c476912e3bd0f881bce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_twis_enable</definition>
        <argsstring>(NRF_TWIS_Type *p_reg)</argsstring>
        <name>nrf_twis_enable</name>
        <param>
          <type>NRF_TWIS_Type *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for enabling TWIS. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_twis.h" line="751" column="24" bodyfile="hal/nrf_twis.h" bodystart="751" bodyend="754" declfile="hal/nrf_twis.h" declline="364" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__twis__hal_1ga6afc41963c1635025887963df5686b7d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_twis_disable</definition>
        <argsstring>(NRF_TWIS_Type *p_reg)</argsstring>
        <name>nrf_twis_disable</name>
        <param>
          <type>NRF_TWIS_Type *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for disabling TWIS. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_twis.h" line="756" column="24" bodyfile="hal/nrf_twis.h" bodystart="756" bodyend="759" declfile="hal/nrf_twis.h" declline="371" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__twis__hal_1ga406ef3faf583d755d93d8f4e3107afaa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE bool</type>
        <definition>NRF_STATIC_INLINE bool nrf_twis_enable_check</definition>
        <argsstring>(NRF_TWIS_Type const *p_reg)</argsstring>
        <name>nrf_twis_enable_check</name>
        <param>
          <type>NRF_TWIS_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for checking if the TWIS is enabled. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>The TWIS is enabled. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>The TWIS is not enabled. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_twis.h" line="761" column="24" bodyfile="hal/nrf_twis.h" bodystart="761" bodyend="764" declfile="hal/nrf_twis.h" declline="381" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__twis__hal_1ga58f400b99e68a50ea3470c092f756cb4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_twis_pins_set</definition>
        <argsstring>(NRF_TWIS_Type *p_reg, uint32_t scl, uint32_t sda)</argsstring>
        <name>nrf_twis_pins_set</name>
        <param>
          <type>NRF_TWIS_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>scl</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>sda</declname>
        </param>
        <briefdescription>
<para>Function for configuring TWIS pins. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">scl</parametername>
</parameternamelist>
<parameterdescription>
<para>SCL pin number. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">sda</parametername>
</parameternamelist>
<parameterdescription>
<para>SDA pin number. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_twis.h" line="766" column="24" bodyfile="hal/nrf_twis.h" bodystart="766" bodyend="770" declfile="hal/nrf_twis.h" declline="390" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__twis__hal_1ga2f6521bb50827c7c4336e407ae5c8dfc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_twis_scl_pin_get</definition>
        <argsstring>(NRF_TWIS_Type const *p_reg)</argsstring>
        <name>nrf_twis_scl_pin_get</name>
        <param>
          <type>NRF_TWIS_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for retrieving the SCL pin selection. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>SCL pin selection. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_twis.h" line="772" column="28" bodyfile="hal/nrf_twis.h" bodystart="772" bodyend="775" declfile="hal/nrf_twis.h" declline="399" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__twis__hal_1ga4cd0fdd60688f23dfc339fcd85fadeeb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_twis_sda_pin_get</definition>
        <argsstring>(NRF_TWIS_Type const *p_reg)</argsstring>
        <name>nrf_twis_sda_pin_get</name>
        <param>
          <type>NRF_TWIS_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for retrieving the SDA pin selection. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>SDA pin selection. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_twis.h" line="777" column="28" bodyfile="hal/nrf_twis.h" bodystart="777" bodyend="780" declfile="hal/nrf_twis.h" declline="408" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__twis__hal_1ga2e2fdc81514fe8291222f092a636ec83" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_twis_rx_buffer_set</definition>
        <argsstring>(NRF_TWIS_Type *p_reg, uint8_t *p_buf, size_t length)</argsstring>
        <name>nrf_twis_rx_buffer_set</name>
        <param>
          <type>NRF_TWIS_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>p_buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>length</declname>
        </param>
        <briefdescription>
<para>Function for setting the receive buffer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">p_buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the buffer for received data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">length</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum number of data bytes to receive. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_twis.h" line="782" column="24" bodyfile="hal/nrf_twis.h" bodystart="782" bodyend="791" declfile="hal/nrf_twis.h" declline="417" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__twis__hal_1gaf0bf02ca4afb34709ddcc926a11bf4c1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint8_t *</type>
        <definition>NRF_STATIC_INLINE uint8_t * nrf_twis_rx_buffer_get</definition>
        <argsstring>(NRF_TWIS_Type const *p_reg)</argsstring>
        <name>nrf_twis_rx_buffer_get</name>
        <param>
          <type>NRF_TWIS_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting the receive buffer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to the receive buffer. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_twis.h" line="793" column="28" bodyfile="hal/nrf_twis.h" bodystart="793" bodyend="800" declfile="hal/nrf_twis.h" declline="428" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__twis__hal_1ga72e9082fa44f6fc4d063c344d95c54b4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_twis_rx_prepare</definition>
        <argsstring>(NRF_TWIS_Type *p_reg, uint8_t *p_buf, size_t length)</argsstring>
        <name>nrf_twis_rx_prepare</name>
        <param>
          <type>NRF_TWIS_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>p_buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>length</declname>
        </param>
        <briefdescription>
<para>Function that prepares TWIS for receiving. </para>
        </briefdescription>
        <detaileddescription>
<para>This function sets receive buffer and then sets NRF_TWIS_TASK_PREPARERX task.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">p_buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the buffer for received data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">length</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum number of data bytes to receive. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_twis.h" line="802" column="24" bodyfile="hal/nrf_twis.h" bodystart="802" bodyend="806" declfile="hal/nrf_twis.h" declline="439" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__twis__hal_1ga5c9844a79451f11104fafd5dd8159317" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE size_t</type>
        <definition>NRF_STATIC_INLINE size_t nrf_twis_rx_amount_get</definition>
        <argsstring>(NRF_TWIS_Type const *p_reg)</argsstring>
        <name>nrf_twis_rx_amount_get</name>
        <param>
          <type>NRF_TWIS_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting number of bytes received in the last transaction. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>TWIS instance.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Amount of received bytes. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_twis.h" line="808" column="26" bodyfile="hal/nrf_twis.h" bodystart="808" bodyend="815" declfile="hal/nrf_twis.h" declline="448" declcolumn="26"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__twis__hal_1ga9f1c52a92ce23ad9653bb0476c859630" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_twis_tx_buffer_set</definition>
        <argsstring>(NRF_TWIS_Type *p_reg, uint8_t const *p_buf, size_t length)</argsstring>
        <name>nrf_twis_tx_buffer_set</name>
        <param>
          <type>NRF_TWIS_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint8_t const *</type>
          <declname>p_buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>length</declname>
        </param>
        <briefdescription>
<para>Function for setting the transmit buffer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">p_buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the buffer with data to send. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">length</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum number of data bytes to transmit. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_twis.h" line="817" column="24" bodyfile="hal/nrf_twis.h" bodystart="817" bodyend="828" declfile="hal/nrf_twis.h" declline="457" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__twis__hal_1gaeca28e06a53158a07262f5c83fb1eb61" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint8_t *</type>
        <definition>NRF_STATIC_INLINE uint8_t * nrf_twis_tx_buffer_get</definition>
        <argsstring>(NRF_TWIS_Type const *p_reg)</argsstring>
        <name>nrf_twis_tx_buffer_get</name>
        <param>
          <type>NRF_TWIS_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting the transmit buffer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to the transmit buffer. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_twis.h" line="830" column="28" bodyfile="hal/nrf_twis.h" bodystart="830" bodyend="837" declfile="hal/nrf_twis.h" declline="468" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__twis__hal_1gadd3057b0a9b02a00e0c6fa15697bbf26" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_twis_tx_prepare</definition>
        <argsstring>(NRF_TWIS_Type *p_reg, uint8_t const *p_buf, size_t length)</argsstring>
        <name>nrf_twis_tx_prepare</name>
        <param>
          <type>NRF_TWIS_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint8_t const *</type>
          <declname>p_buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>length</declname>
        </param>
        <briefdescription>
<para>Function for preparing TWIS for transmitting. </para>
        </briefdescription>
        <detaileddescription>
<para>This function sets transmit buffer and then sets NRF_TWIS_TASK_PREPARETX task.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">p_buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the buffer with data to send. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">length</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum number of data bytes to transmit. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_twis.h" line="839" column="24" bodyfile="hal/nrf_twis.h" bodystart="839" bodyend="845" declfile="hal/nrf_twis.h" declline="479" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__twis__hal_1ga686637d3b10e2df8cbeda813ff649c13" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE size_t</type>
        <definition>NRF_STATIC_INLINE size_t nrf_twis_tx_amount_get</definition>
        <argsstring>(NRF_TWIS_Type const *p_reg)</argsstring>
        <name>nrf_twis_tx_amount_get</name>
        <param>
          <type>NRF_TWIS_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting the number of bytes transmitted in the last transaction. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Amount of bytes transmitted. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_twis.h" line="847" column="26" bodyfile="hal/nrf_twis.h" bodystart="847" bodyend="854" declfile="hal/nrf_twis.h" declline="490" declcolumn="26"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__twis__hal_1ga197d0cf5d35cd5ecaf8303fd979278d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_twis_address_set</definition>
        <argsstring>(NRF_TWIS_Type *p_reg, uint_fast8_t n, nrf_twis_address_t addr)</argsstring>
        <name>nrf_twis_address_set</name>
        <param>
          <type>NRF_TWIS_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint_fast8_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__twis__hal_1gab3ec17f227b682bb63a6ca3b8bf78d8f" kindref="member">nrf_twis_address_t</ref></type>
          <declname>addr</declname>
        </param>
        <briefdescription>
<para>Function for setting the slave address. </para>
        </briefdescription>
        <detaileddescription>
<para>Function sets the selected address for this TWI interface.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">n</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of address to be set. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Addres to be set.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="group__nrf__twis__hal_1ga6651956e1198c3efc3fe692f4e242e3e" kindref="member">nrf_twis_config_address_set</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__nrf__twis__hal_1ga097263f9bee26541a91ea928d39f3fc7" kindref="member">nrf_twis_config_address_get</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_twis.h" line="856" column="24" bodyfile="hal/nrf_twis.h" bodystart="856" bodyend="862" declfile="hal/nrf_twis.h" declline="504" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__twis__hal_1gabe997aa5bae79862961e60fc49a9ffa7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE <ref refid="group__nrf__twis__hal_1gab3ec17f227b682bb63a6ca3b8bf78d8f" kindref="member">nrf_twis_address_t</ref></type>
        <definition>NRF_STATIC_INLINE nrf_twis_address_t nrf_twis_address_get</definition>
        <argsstring>(NRF_TWIS_Type const *p_reg, uint_fast8_t n)</argsstring>
        <name>nrf_twis_address_get</name>
        <param>
          <type>NRF_TWIS_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint_fast8_t</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Function for retrieving configured slave address. </para>
        </briefdescription>
        <detaileddescription>
<para>Function gets the selected address for this TWI interface.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">n</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of address to get.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Configured slave address. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_twis.h" line="864" column="38" bodyfile="hal/nrf_twis.h" bodystart="864" bodyend="868" declfile="hal/nrf_twis.h" declline="518" declcolumn="38"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__twis__hal_1ga6651956e1198c3efc3fe692f4e242e3e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_twis_config_address_set</definition>
        <argsstring>(NRF_TWIS_Type *p_reg, nrf_twis_config_addr_mask_t addr_mask)</argsstring>
        <name>nrf_twis_config_address_set</name>
        <param>
          <type>NRF_TWIS_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__twis__hal_1gae8b5a6d6e1ae57daec594f73b19092b1" kindref="member">nrf_twis_config_addr_mask_t</ref></type>
          <declname>addr_mask</declname>
        </param>
        <briefdescription>
<para>Function for setting the device address configuration. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">addr_mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of address indexes of what device should answer to.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="group__nrf__twis__hal_1ga197d0cf5d35cd5ecaf8303fd979278d1" kindref="member">nrf_twis_address_set</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_twis.h" line="870" column="24" bodyfile="hal/nrf_twis.h" bodystart="870" bodyend="875" declfile="hal/nrf_twis.h" declline="529" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__twis__hal_1ga097263f9bee26541a91ea928d39f3fc7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE <ref refid="group__nrf__twis__hal_1gae8b5a6d6e1ae57daec594f73b19092b1" kindref="member">nrf_twis_config_addr_mask_t</ref></type>
        <definition>NRF_STATIC_INLINE nrf_twis_config_addr_mask_t nrf_twis_config_address_get</definition>
        <argsstring>(NRF_TWIS_Type const *p_reg)</argsstring>
        <name>nrf_twis_config_address_get</name>
        <param>
          <type>NRF_TWIS_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for retrieving the device address configuration. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Mask of address indexes of what device should answer to. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_twis.h" line="878" column="29" bodyfile="hal/nrf_twis.h" bodystart="878" bodyend="881" declfile="hal/nrf_twis.h" declline="540" declcolumn="29"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__twis__hal_1ga61982ea97228eadbd76475eb8ee3817d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_twis_orc_set</definition>
        <argsstring>(NRF_TWIS_Type *p_reg, uint8_t orc)</argsstring>
        <name>nrf_twis_orc_set</name>
        <param>
          <type>NRF_TWIS_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>orc</declname>
        </param>
        <briefdescription>
<para>Function for setting the over-read character. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">orc</parametername>
</parameternamelist>
<parameterdescription>
<para>Over-read character. Character clocked out in case of over-read of the TXD buffer. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_twis.h" line="883" column="24" bodyfile="hal/nrf_twis.h" bodystart="883" bodyend="886" declfile="hal/nrf_twis.h" declline="549" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__twis__hal_1ga2641893e0f099994aa21c8c6591087e5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint8_t</type>
        <definition>NRF_STATIC_INLINE uint8_t nrf_twis_orc_get</definition>
        <argsstring>(NRF_TWIS_Type const *p_reg)</argsstring>
        <name>nrf_twis_orc_get</name>
        <param>
          <type>NRF_TWIS_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for setting the over-read character. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Over-read character configured for selected instance. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_twis.h" line="888" column="27" bodyfile="hal/nrf_twis.h" bodystart="888" bodyend="891" declfile="hal/nrf_twis.h" declline="558" declcolumn="27"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__twis__hal_1ga97194ea3b9da36122bb7b4c49916ab53" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_twis_tx_list_enable</definition>
        <argsstring>(NRF_TWIS_Type *p_reg)</argsstring>
        <name>nrf_twis_tx_list_enable</name>
        <param>
          <type>NRF_TWIS_Type *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for enabling the TX list feature. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_twis.h" line="894" column="24" bodyfile="hal/nrf_twis.h" bodystart="894" bodyend="897" declfile="hal/nrf_twis.h" declline="566" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__twis__hal_1gaa1f3a75c8c3ba7c65dc6407b8e462328" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_twis_tx_list_disable</definition>
        <argsstring>(NRF_TWIS_Type *p_reg)</argsstring>
        <name>nrf_twis_tx_list_disable</name>
        <param>
          <type>NRF_TWIS_Type *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for disabling the TX list feature. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_twis.h" line="899" column="24" bodyfile="hal/nrf_twis.h" bodystart="899" bodyend="902" declfile="hal/nrf_twis.h" declline="573" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__twis__hal_1ga04b21362f997c16d1f636b219d8dad3a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_twis_rx_list_enable</definition>
        <argsstring>(NRF_TWIS_Type *p_reg)</argsstring>
        <name>nrf_twis_rx_list_enable</name>
        <param>
          <type>NRF_TWIS_Type *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for enabling the RX list feature. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_twis.h" line="904" column="24" bodyfile="hal/nrf_twis.h" bodystart="904" bodyend="907" declfile="hal/nrf_twis.h" declline="580" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__twis__hal_1gaae7e48f099010a8c6e6f3c234f157bc7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_twis_rx_list_disable</definition>
        <argsstring>(NRF_TWIS_Type *p_reg)</argsstring>
        <name>nrf_twis_rx_list_disable</name>
        <param>
          <type>NRF_TWIS_Type *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for disabling the RX list feature. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_twis.h" line="909" column="24" bodyfile="hal/nrf_twis.h" bodystart="909" bodyend="912" declfile="hal/nrf_twis.h" declline="587" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="nrf__twis_8h_1ac05a77b5474f20d37108781ee8676618" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE volatile uint32_t *</type>
        <definition>NRF_STATIC_INLINE volatile uint32_t * nrf_twis_getRegPtr</definition>
        <argsstring>(NRF_TWIS_Type *p_reg, uint32_t offset)</argsstring>
        <name>nrf_twis_getRegPtr</name>
        <param>
          <type>NRF_TWIS_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>offset</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_twis.h" line="608" column="37" bodyfile="hal/nrf_twis.h" bodystart="608" bodyend="611"/>
      </memberdef>
      <memberdef kind="function" id="nrf__twis_8h_1a77feb07c85a5c747648cebde0d31f474" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE volatile const uint32_t *</type>
        <definition>NRF_STATIC_INLINE volatile const uint32_t * nrf_twis_getRegPtr_c</definition>
        <argsstring>(NRF_TWIS_Type const *p_reg, uint32_t offset)</argsstring>
        <name>nrf_twis_getRegPtr_c</name>
        <param>
          <type>NRF_TWIS_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>offset</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_twis.h" line="623" column="43" bodyfile="hal/nrf_twis.h" bodystart="623" bodyend="627"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2015<sp/>-<sp/>2024,<sp/>Nordic<sp/>Semiconductor<sp/>ASA</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>All<sp/>rights<sp/>reserved.</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>SPDX-License-Identifier:<sp/>BSD-3-Clause</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions<sp/>are<sp/>met:</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>1.<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright<sp/>notice,<sp/>this</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>2.<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the<sp/>distribution.</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/>3.<sp/>Neither<sp/>the<sp/>name<sp/>of<sp/>the<sp/>copyright<sp/>holder<sp/>nor<sp/>the<sp/>names<sp/>of<sp/>its</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>contributors<sp/>may<sp/>be<sp/>used<sp/>to<sp/>endorse<sp/>or<sp/>promote<sp/>products<sp/>derived<sp/>from<sp/>this</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>software<sp/>without<sp/>specific<sp/>prior<sp/>written<sp/>permission.</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>COPYRIGHT<sp/>HOLDERS<sp/>AND<sp/>CONTRIBUTORS<sp/>&quot;AS<sp/>IS&quot;</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/>AND<sp/>ANY<sp/>EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>THE</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*<sp/>ARE<sp/>DISCLAIMED.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>COPYRIGHT<sp/>HOLDER<sp/>OR<sp/>CONTRIBUTORS<sp/>BE</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,<sp/>SPECIAL,<sp/>EXEMPLARY,<sp/>OR</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>PROCUREMENT<sp/>OF</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>*<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,<sp/>DATA,<sp/>OR<sp/>PROFITS;<sp/>OR<sp/>BUSINESS</highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/>*<sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY<sp/>THEORY<sp/>OF<sp/>LIABILITY,<sp/>WHETHER<sp/>IN</highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/>*<sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR<sp/>OTHERWISE)</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/>*<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE<sp/>OF<sp/>THIS<sp/>SOFTWARE,<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/>*<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight></codeline>
<codeline lineno="32"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>NRF_TWIS_H__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_TWIS_H__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;nrfx.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(NRF54H20_XXAA)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_TWIS_CLOCKPIN_SDA_NEEDED<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(HALTIUM_XXAA)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_TWIS_CLOCKPIN_SCL_NEEDED<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="51"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="52"><highlight class="comment"><sp/>*<sp/>@defgroup<sp/>nrf_twis_hal<sp/>TWIS<sp/>HAL</highlight></codeline>
<codeline lineno="53"><highlight class="comment"><sp/>*<sp/>@{</highlight></codeline>
<codeline lineno="54"><highlight class="comment"><sp/>*<sp/>@ingroup<sp/>nrf_twis</highlight></codeline>
<codeline lineno="55"><highlight class="comment"><sp/>*<sp/>@brief<sp/><sp/><sp/>Hardware<sp/>access<sp/>layer<sp/>for<sp/>managing<sp/>the<sp/>Two<sp/>Wire<sp/>Interface<sp/>Slave<sp/>with<sp/>EasyDMA</highlight></codeline>
<codeline lineno="56"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(TWIS)<sp/>peripheral.</highlight></codeline>
<codeline lineno="57"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(TWIS_DMA_RX_PTR_PTR_Msk)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="60"><highlight class="comment">/**<sp/>@brief<sp/>Symbol<sp/>indicating<sp/>whether<sp/>dedicated<sp/>DMA<sp/>register<sp/>is<sp/>present.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_TWIS_HAS_DMA_REG<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_TWIS_HAS_DMA_REG<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(defined(TWIS_TASKS_DMA_RX_ENABLEMATCH_ENABLEMATCH_Msk)<sp/>&amp;&amp;<sp/>\</highlight></codeline>
<codeline lineno="67"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>defined(TWIS_EVENTS_DMA_RX_END_END_Msk))<sp/>||<sp/>\</highlight></codeline>
<codeline lineno="68"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="69"><highlight class="comment">/**<sp/>@brief<sp/>Symbol<sp/>indicating<sp/>whether<sp/>TWIS<sp/>DMA<sp/>tasks<sp/>and<sp/>events<sp/>are<sp/>present.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_TWIS_HAS_DMA_TASKS_EVENTS<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_TWIS_HAS_DMA_TASKS_EVENTS<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(TWIS_TXD_LIST_LIST_Msk)<sp/>||<sp/>defined(TWIS_RXD_LIST_LIST_Msk)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="76"><highlight class="comment">/**<sp/>@brief<sp/>Symbol<sp/>indicating<sp/>whether<sp/>TX<sp/>or<sp/>RX<sp/>LIST<sp/>is<sp/>present.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_TWIS_HAS_LIST_REG<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_TWIS_HAS_LIST_REG<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_TWIS_HAS_DMA_REG</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="83"><highlight class="comment">/**<sp/>@brief<sp/>Symbol<sp/>specifying<sp/>maximum<sp/>possible<sp/>size<sp/>of<sp/>the<sp/>TX<sp/>channel<sp/>buffer.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_TWIS_TX_MAX_COUNT_SIZE<sp/>TWIS_DMA_TX_MAXCNT_MAXCNT_Max</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="85"><highlight class="comment">/**<sp/>@brief<sp/>Symbol<sp/>specifying<sp/>maximum<sp/>possible<sp/>size<sp/>of<sp/>the<sp/>RX<sp/>channel<sp/>buffer.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_TWIS_RX_MAX_COUNT_SIZE<sp/>TWIS_DMA_RX_MAXCNT_MAXCNT_Max</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_TWIS_TX_MAX_COUNT_SIZE<sp/>TWIS_TXD_MAXCNT_MAXCNT_Msk</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_TWIS_RX_MAX_COUNT_SIZE<sp/>TWIS_RXD_MAXCNT_MAXCNT_Msk</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="92"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="93"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Macro<sp/>getting<sp/>pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>TWIS<sp/>peripheral.</highlight></codeline>
<codeline lineno="94"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="95"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>idx<sp/>TWIS<sp/>instance<sp/>index.</highlight></codeline>
<codeline lineno="96"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="97"><highlight class="comment"><sp/>*<sp/>@return<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>TWIS<sp/>peripheral.</highlight></codeline>
<codeline lineno="98"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_TWIS_INST_GET(idx)<sp/>NRFX_CONCAT(NRF_,<sp/>TWIS,<sp/>idx)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="101"><highlight class="comment">/**<sp/>@brief<sp/>TWIS<sp/>tasks.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal">{</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__twis__hal_1gga0f9a066f20fa56a413dc549242f56360ad8226f2f3aabcc2dd3b115b58b9e6893" kindref="member">NRF_TWIS_TASK_STOP</ref><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_TWIS_Type,<sp/>TASKS_STOP),<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Stop<sp/>TWIS<sp/>transaction.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__twis__hal_1gga0f9a066f20fa56a413dc549242f56360a40ead6ea32c105084090aad204c180d3" kindref="member">NRF_TWIS_TASK_SUSPEND</ref><sp/><sp/><sp/>=<sp/>offsetof(NRF_TWIS_Type,<sp/>TASKS_SUSPEND),<sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Suspend<sp/>TWIS<sp/>transaction.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__twis__hal_1gga0f9a066f20fa56a413dc549242f56360a1d1d07bc8f5bed82b967bd525f8500b6" kindref="member">NRF_TWIS_TASK_RESUME</ref><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_TWIS_Type,<sp/>TASKS_RESUME),<sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Resume<sp/>TWIS<sp/>transaction.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__twis__hal_1gga0f9a066f20fa56a413dc549242f56360aeb0d738dfe3ce8e4b5381ded3175eebd" kindref="member">NRF_TWIS_TASK_PREPARERX</ref><sp/>=<sp/>offsetof(NRF_TWIS_Type,<sp/>TASKS_PREPARERX),<sp/></highlight><highlight class="comment">///&lt;<sp/>Prepare<sp/>the<sp/>TWIS<sp/>slave<sp/>to<sp/>respond<sp/>to<sp/>a<sp/>write<sp/>command.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__twis__hal_1gga0f9a066f20fa56a413dc549242f56360a6af25e21181c33b78253d061d110d59c" kindref="member">NRF_TWIS_TASK_PREPARETX</ref><sp/>=<sp/>offsetof(NRF_TWIS_Type,<sp/>TASKS_PREPARETX)<sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Prepare<sp/>the<sp/>TWIS<sp/>slave<sp/>to<sp/>respond<sp/>to<sp/>a<sp/>read<sp/>command.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal">}<sp/><ref refid="group__nrf__twis__hal_1ga0f9a066f20fa56a413dc549242f56360" kindref="member">nrf_twis_task_t</ref>;</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="111"><highlight class="comment">/**<sp/>@brief<sp/>TWIS<sp/>events.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal">{</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__twis__hal_1ggaa095872e374917692717a6088e5b6345afc19278c27f421341e0b95010bbe945e" kindref="member">NRF_TWIS_EVENT_STOPPED</ref><sp/><sp/><sp/>=<sp/>offsetof(NRF_TWIS_Type,<sp/>EVENTS_STOPPED),<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>TWIS<sp/>stopped.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__twis__hal_1ggaa095872e374917692717a6088e5b6345a3ec6c73558c76372ed1b9fa60d4b9422" kindref="member">NRF_TWIS_EVENT_ERROR</ref><sp/><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_TWIS_Type,<sp/>EVENTS_ERROR),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>TWIS<sp/>error.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_TWIS_HAS_DMA_TASKS_EVENTS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__twis__hal_1ggaa095872e374917692717a6088e5b6345a69c227318aadc97d9cd70a291d62514d" kindref="member">NRF_TWIS_EVENT_RXSTARTED</ref><sp/>=<sp/>offsetof(NRF_TWIS_Type,<sp/>EVENTS_DMA.RX.READY),<sp/></highlight><highlight class="comment">///&lt;<sp/>Receive<sp/>sequence<sp/>started.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__twis__hal_1ggaa095872e374917692717a6088e5b6345a47aadecc4e1015f96d75158d5baf4947" kindref="member">NRF_TWIS_EVENT_TXSTARTED</ref><sp/>=<sp/>offsetof(NRF_TWIS_Type,<sp/>EVENTS_DMA.TX.READY),<sp/></highlight><highlight class="comment">///&lt;<sp/>Transmit<sp/>sequence<sp/>started.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__twis__hal_1ggaa095872e374917692717a6088e5b6345a69c227318aadc97d9cd70a291d62514d" kindref="member">NRF_TWIS_EVENT_RXSTARTED</ref><sp/>=<sp/>offsetof(NRF_TWIS_Type,<sp/>EVENTS_RXSTARTED),<sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Receive<sp/>sequence<sp/>started.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__twis__hal_1ggaa095872e374917692717a6088e5b6345a47aadecc4e1015f96d75158d5baf4947" kindref="member">NRF_TWIS_EVENT_TXSTARTED</ref><sp/>=<sp/>offsetof(NRF_TWIS_Type,<sp/>EVENTS_TXSTARTED),<sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Transmit<sp/>sequence<sp/>started.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__twis__hal_1ggaa095872e374917692717a6088e5b6345ab742a449e915ccbefac6111bdc4d81b2" kindref="member">NRF_TWIS_EVENT_WRITE</ref><sp/><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_TWIS_Type,<sp/>EVENTS_WRITE),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Write<sp/>command<sp/>received.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__twis__hal_1ggaa095872e374917692717a6088e5b6345a99914aa6f41e99dde790fd0e43562f38" kindref="member">NRF_TWIS_EVENT_READ</ref><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_TWIS_Type,<sp/>EVENTS_READ)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Read<sp/>command<sp/>received.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal">}<sp/><ref refid="group__nrf__twis__hal_1gaa095872e374917692717a6088e5b6345" kindref="member">nrf_twis_event_t</ref>;</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="127"><highlight class="comment">/**<sp/>@brief<sp/>TWIS<sp/>shortcuts.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal">{</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__twis__hal_1ggacfde7f6e58a79a94f6c6d82d6b04009eacaa3c31e85541513eb8d0aac5bf7e7f9" kindref="member">NRF_TWIS_SHORT_WRITE_SUSPEND_MASK</ref><sp/><sp/><sp/>=<sp/>TWIS_SHORTS_WRITE_SUSPEND_Msk,<sp/></highlight><highlight class="comment">///&lt;<sp/>Shortcut<sp/>between<sp/>WRITE<sp/>event<sp/>and<sp/>SUSPEND<sp/>task.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__twis__hal_1ggacfde7f6e58a79a94f6c6d82d6b04009eaf6a887d8f0180ed20473026f952083c9" kindref="member">NRF_TWIS_SHORT_READ_SUSPEND_MASK</ref><sp/><sp/><sp/><sp/>=<sp/>TWIS_SHORTS_READ_SUSPEND_Msk,<sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Shortcut<sp/>between<sp/>READ<sp/>event<sp/>and<sp/>SUSPEND<sp/>task.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal">}<sp/><ref refid="group__nrf__twis__hal_1gacfde7f6e58a79a94f6c6d82d6b04009e" kindref="member">nrf_twis_short_mask_t</ref>;</highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="134"><highlight class="comment">/**<sp/>@brief<sp/>TWIS<sp/>interrupts.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal">{</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__twis__hal_1ggaa212f1487a7c97c857a3f7a5e735fe66a16079e93d11db458ba6b9fcb7b206836" kindref="member">NRF_TWIS_INT_STOPPED_MASK</ref><sp/><sp/><sp/>=<sp/>TWIS_INTEN_STOPPED_Msk,<sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Interrupt<sp/>on<sp/>STOPPED<sp/>event.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__twis__hal_1ggaa212f1487a7c97c857a3f7a5e735fe66afef4a53ae8e1c0264f187398b6be8182" kindref="member">NRF_TWIS_INT_ERROR_MASK</ref><sp/><sp/><sp/><sp/><sp/>=<sp/>TWIS_INTEN_ERROR_Msk,<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Interrupt<sp/>on<sp/>ERROR<sp/>event.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_TWIS_HAS_DMA_TASKS_EVENTS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__twis__hal_1ggaa212f1487a7c97c857a3f7a5e735fe66acd420d5a6766e11feca20958f6d164d8" kindref="member">NRF_TWIS_INT_RXSTARTED_MASK</ref><sp/>=<sp/>TWIS_INTEN_DMARXREADY_Msk,<sp/></highlight><highlight class="comment">///&lt;<sp/>Interrupt<sp/>on<sp/>RXSTARTED<sp/>event.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__twis__hal_1ggaa212f1487a7c97c857a3f7a5e735fe66ae96612387979bb74863fb9aab93d4b82" kindref="member">NRF_TWIS_INT_TXSTARTED_MASK</ref><sp/>=<sp/>TWIS_INTEN_DMATXREADY_Msk,<sp/></highlight><highlight class="comment">///&lt;<sp/>Interrupt<sp/>on<sp/>TXSTARTED<sp/>event.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__twis__hal_1ggaa212f1487a7c97c857a3f7a5e735fe66acd420d5a6766e11feca20958f6d164d8" kindref="member">NRF_TWIS_INT_RXSTARTED_MASK</ref><sp/>=<sp/>TWIS_INTEN_RXSTARTED_Msk,<sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Interrupt<sp/>on<sp/>RXSTARTED<sp/>event.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__twis__hal_1ggaa212f1487a7c97c857a3f7a5e735fe66ae96612387979bb74863fb9aab93d4b82" kindref="member">NRF_TWIS_INT_TXSTARTED_MASK</ref><sp/>=<sp/>TWIS_INTEN_TXSTARTED_Msk,<sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Interrupt<sp/>on<sp/>TXSTARTED<sp/>event.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__twis__hal_1ggaa212f1487a7c97c857a3f7a5e735fe66a51532ee1b18f64514c27c4806a35b1eb" kindref="member">NRF_TWIS_INT_WRITE_MASK</ref><sp/><sp/><sp/><sp/><sp/>=<sp/>TWIS_INTEN_WRITE_Msk,<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Interrupt<sp/>on<sp/>WRITE<sp/>event.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__twis__hal_1ggaa212f1487a7c97c857a3f7a5e735fe66aedd94bc12333fc2af428721e4a87b1cb" kindref="member">NRF_TWIS_INT_READ_MASK</ref><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>TWIS_INTEN_READ_Msk,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Interrupt<sp/>on<sp/>READ<sp/>event.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal">}<sp/><ref refid="group__nrf__twis__hal_1gaa212f1487a7c97c857a3f7a5e735fe66" kindref="member">nrf_twis_int_mask_t</ref>;</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="150"><highlight class="comment">/**<sp/>@brief<sp/>TWIS<sp/>error<sp/>source.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal">{</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__twis__hal_1ggabc33e3d9a58851106ef1654c2aefa72da0b6341d2c4508eede27dd0f644732845" kindref="member">NRF_TWIS_ERROR_OVERFLOW</ref><sp/><sp/>=<sp/>TWIS_ERRORSRC_OVERFLOW_Msk,<sp/></highlight><highlight class="comment">///&lt;<sp/>RX<sp/>buffer<sp/>overflow<sp/>detected,<sp/>and<sp/>prevented.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__twis__hal_1ggabc33e3d9a58851106ef1654c2aefa72da90bf770179754d7e71301f262e22d279" kindref="member">NRF_TWIS_ERROR_DATA_NACK</ref><sp/>=<sp/>TWIS_ERRORSRC_DNACK_Msk,<sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>NACK<sp/>sent<sp/>after<sp/>receiving<sp/>a<sp/>data<sp/>byte.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__twis__hal_1ggabc33e3d9a58851106ef1654c2aefa72dafbc85d896157a7c1819cf94150237775" kindref="member">NRF_TWIS_ERROR_OVERREAD</ref><sp/><sp/>=<sp/>TWIS_ERRORSRC_OVERREAD_Msk<sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>TX<sp/>buffer<sp/>over-read<sp/>detected,<sp/>and<sp/>prevented.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal">}<sp/><ref refid="group__nrf__twis__hal_1gabc33e3d9a58851106ef1654c2aefa72d" kindref="member">nrf_twis_error_t</ref>;</highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="158"><highlight class="comment">/**<sp/>@brief<sp/>TWIS<sp/>address<sp/>matching<sp/>configuration.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal">{</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__twis__hal_1ggae8b5a6d6e1ae57daec594f73b19092b1ab5e00ae6e5692af5f642d3a3168334c2" kindref="member">NRF_TWIS_CONFIG_ADDRESS0_MASK</ref><sp/><sp/>=<sp/>TWIS_CONFIG_ADDRESS0_Msk,<sp/></highlight><highlight class="comment">///&lt;<sp/>Enable<sp/>or<sp/>disable<sp/>address<sp/>matching<sp/>on<sp/>ADDRESS[0].</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__twis__hal_1ggae8b5a6d6e1ae57daec594f73b19092b1aa6b26ebdb8233f171baf7ef0e0df0088" kindref="member">NRF_TWIS_CONFIG_ADDRESS1_MASK</ref><sp/><sp/>=<sp/>TWIS_CONFIG_ADDRESS1_Msk,<sp/></highlight><highlight class="comment">///&lt;<sp/>Enable<sp/>or<sp/>disable<sp/>address<sp/>matching<sp/>on<sp/>ADDRESS[1].</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__twis__hal_1ggae8b5a6d6e1ae57daec594f73b19092b1affbb86eb76e4d96a629fc47931933e4f" kindref="member">NRF_TWIS_CONFIG_ADDRESS01_MASK</ref><sp/>=<sp/>TWIS_CONFIG_ADDRESS0_Msk<sp/>|</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TWIS_CONFIG_ADDRESS1_Msk<sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Enable<sp/>both<sp/>address<sp/>matching.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal">}<sp/><ref refid="group__nrf__twis__hal_1gae8b5a6d6e1ae57daec594f73b19092b1" kindref="member">nrf_twis_config_addr_mask_t</ref>;</highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="167"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="168"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Smallest<sp/>variable<sp/>type<sp/>to<sp/>hold<sp/>the<sp/>TWI<sp/>address.</highlight></codeline>
<codeline lineno="169"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="170"><highlight class="comment"><sp/>*<sp/>Variable<sp/>of<sp/>the<sp/>minimum<sp/>size<sp/>that<sp/>can<sp/>hold<sp/>a<sp/>single<sp/>TWI<sp/>address.</highlight></codeline>
<codeline lineno="171"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="172"><highlight class="comment"><sp/>*<sp/>@note<sp/>Defined<sp/>to<sp/>make<sp/>it<sp/>simple<sp/>to<sp/>change<sp/>if<sp/>the<sp/>new<sp/>TWI<sp/>supports<sp/>for<sp/>example</highlight></codeline>
<codeline lineno="173"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>10<sp/>bit<sp/>addressing<sp/>mode.</highlight></codeline>
<codeline lineno="174"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>uint8_t<sp/><ref refid="group__nrf__twis__hal_1gab3ec17f227b682bb63a6ca3b8bf78d8f" kindref="member">nrf_twis_address_t</ref>;</highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="177"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="178"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>activating<sp/>the<sp/>specified<sp/>TWIS<sp/>task.</highlight></codeline>
<codeline lineno="179"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="180"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="181"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>task<sp/><sp/>Task<sp/>to<sp/>be<sp/>activated.</highlight></codeline>
<codeline lineno="182"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__twis__hal_1gac6a70173d85ce7823437ba9f1c8164a9" kindref="member">nrf_twis_task_trigger</ref>(NRF_TWIS_Type<sp/>*<sp/>p_reg,<sp/><ref refid="group__nrf__twis__hal_1ga0f9a066f20fa56a413dc549242f56360" kindref="member">nrf_twis_task_t</ref><sp/>task);</highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="185"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="186"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>returning<sp/>the<sp/>address<sp/>of<sp/>the<sp/>specified<sp/>TWIS<sp/>task<sp/>register.</highlight></codeline>
<codeline lineno="187"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="188"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="189"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>task<sp/><sp/>The<sp/>specified<sp/>task.</highlight></codeline>
<codeline lineno="190"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="191"><highlight class="comment"><sp/>*<sp/>@return<sp/>Task<sp/>address.</highlight></codeline>
<codeline lineno="192"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__twis__hal_1gaa7cb188303fca30b566bcc33128fac21" kindref="member">nrf_twis_task_address_get</ref>(NRF_TWIS_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__twis__hal_1ga0f9a066f20fa56a413dc549242f56360" kindref="member">nrf_twis_task_t</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>task);</highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="196"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="197"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>clearing<sp/>the<sp/>specified<sp/>event.</highlight></codeline>
<codeline lineno="198"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="199"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="200"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>event<sp/>The<sp/>specified<sp/>event.</highlight></codeline>
<codeline lineno="201"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__twis__hal_1ga9b3471028011828ee2df2ff6f053eee2" kindref="member">nrf_twis_event_clear</ref>(NRF_TWIS_Type<sp/>*<sp/>p_reg,<sp/><ref refid="group__nrf__twis__hal_1gaa095872e374917692717a6088e5b6345" kindref="member">nrf_twis_event_t</ref><sp/>event);</highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="204"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="205"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>retrieving<sp/>the<sp/>state<sp/>of<sp/>the<sp/>TWIS<sp/>event.</highlight></codeline>
<codeline lineno="206"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="207"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="208"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>event<sp/>Event<sp/>to<sp/>be<sp/>checked.</highlight></codeline>
<codeline lineno="209"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="210"><highlight class="comment"><sp/>*<sp/>@retval<sp/>true<sp/><sp/>The<sp/>event<sp/>has<sp/>been<sp/>generated.</highlight></codeline>
<codeline lineno="211"><highlight class="comment"><sp/>*<sp/>@retval<sp/>false<sp/>The<sp/>event<sp/>has<sp/>not<sp/>been<sp/>generated.</highlight></codeline>
<codeline lineno="212"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrf__twis__hal_1ga37232c7135fbe0f4681f6578ea3f5d55" kindref="member">nrf_twis_event_check</ref>(NRF_TWIS_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,<sp/><ref refid="group__nrf__twis__hal_1gaa095872e374917692717a6088e5b6345" kindref="member">nrf_twis_event_t</ref><sp/>event);</highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="215"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="216"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>and<sp/>clearing<sp/>the<sp/>state<sp/>of<sp/>the<sp/>specified<sp/>event.</highlight></codeline>
<codeline lineno="217"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="218"><highlight class="comment"><sp/>*<sp/>This<sp/>function<sp/>checks<sp/>the<sp/>state<sp/>of<sp/>the<sp/>event<sp/>and<sp/>clears<sp/>it.</highlight></codeline>
<codeline lineno="219"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="220"><highlight class="comment"><sp/>*<sp/>@param[in,out]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="221"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/><sp/><sp/><sp/><sp/>event<sp/>Event.</highlight></codeline>
<codeline lineno="222"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="223"><highlight class="comment"><sp/>*<sp/>@retval<sp/>true<sp/><sp/>The<sp/>event<sp/>was<sp/>set.</highlight></codeline>
<codeline lineno="224"><highlight class="comment"><sp/>*<sp/>@retval<sp/>false<sp/>The<sp/>event<sp/>was<sp/>not<sp/>set.</highlight></codeline>
<codeline lineno="225"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrf__twis__hal_1ga4f849f84aa26c795773c12b40db861ac" kindref="member">nrf_twis_event_get_and_clear</ref>(NRF_TWIS_Type<sp/>*<sp/>p_reg,<sp/><ref refid="group__nrf__twis__hal_1gaa095872e374917692717a6088e5b6345" kindref="member">nrf_twis_event_t</ref><sp/>event);</highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="228"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="229"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>returning<sp/>the<sp/>address<sp/>of<sp/>the<sp/>specified<sp/>TWIS<sp/>event<sp/>register.</highlight></codeline>
<codeline lineno="230"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="231"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="232"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>event<sp/>Event.</highlight></codeline>
<codeline lineno="233"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="234"><highlight class="comment"><sp/>*<sp/>@return<sp/>Address.</highlight></codeline>
<codeline lineno="235"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__twis__hal_1gaa361feaa2f23dd4b9fe417ff095ae490" kindref="member">nrf_twis_event_address_get</ref>(NRF_TWIS_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__twis__hal_1gaa095872e374917692717a6088e5b6345" kindref="member">nrf_twis_event_t</ref><sp/><sp/><sp/><sp/><sp/><sp/>event);</highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="239"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="240"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>a<sp/>shortcut.</highlight></codeline>
<codeline lineno="241"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="242"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="243"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>mask<sp/><sp/>Mask<sp/>of<sp/>shortcuts<sp/>to<sp/>be<sp/>enabled.</highlight></codeline>
<codeline lineno="244"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__twis__hal_1ga3c6ff3552ca042c8593bef12db83caac" kindref="member">nrf_twis_shorts_enable</ref>(NRF_TWIS_Type<sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>mask);</highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="247"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="248"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>clearing<sp/>shortcuts.</highlight></codeline>
<codeline lineno="249"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="250"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="251"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>mask<sp/><sp/>Mask<sp/>of<sp/>shortcuts<sp/>to<sp/>be<sp/>disabled.</highlight></codeline>
<codeline lineno="252"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__twis__hal_1gac8764a8233f598003357fef2cf098e93" kindref="member">nrf_twis_shorts_disable</ref>(NRF_TWIS_Type<sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>mask);</highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="255"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="256"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>the<sp/>shorts<sp/>mask.</highlight></codeline>
<codeline lineno="257"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="258"><highlight class="comment"><sp/>*<sp/>Function<sp/>returns<sp/>shorts<sp/>register.</highlight></codeline>
<codeline lineno="259"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="260"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="261"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="262"><highlight class="comment"><sp/>*<sp/>@return<sp/>Flags<sp/>of<sp/>currently<sp/>enabled<sp/>shortcuts</highlight></codeline>
<codeline lineno="263"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__twis__hal_1ga5a5229e9bff44a29450e7d5672665959" kindref="member">nrf_twis_shorts_get</ref>(NRF_TWIS_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="266"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="267"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>enabling<sp/>the<sp/>specified<sp/>interrupts.</highlight></codeline>
<codeline lineno="268"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="269"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="270"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>mask<sp/><sp/>Mask<sp/>of<sp/>interrupts<sp/>to<sp/>be<sp/>enabled.</highlight></codeline>
<codeline lineno="271"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Use<sp/>@ref<sp/>nrf_twis_int_mask_t<sp/>values<sp/>for<sp/>bit<sp/>masking.</highlight></codeline>
<codeline lineno="272"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__twis__hal_1ga70d9f76988e880d6052d128bd095dcd2" kindref="member">nrf_twis_int_enable</ref>(NRF_TWIS_Type<sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>mask);</highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="275"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="276"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>checking<sp/>if<sp/>the<sp/>specified<sp/>interrupts<sp/>are<sp/>enabled.</highlight></codeline>
<codeline lineno="277"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="278"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="279"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>mask<sp/><sp/>Mask<sp/>of<sp/>interrupts<sp/>to<sp/>be<sp/>checked.</highlight></codeline>
<codeline lineno="280"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Use<sp/>@ref<sp/>nrf_twis_int_mask_t<sp/>values<sp/>for<sp/>bit<sp/>masking.</highlight></codeline>
<codeline lineno="281"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="282"><highlight class="comment"><sp/>*<sp/>@return<sp/>Mask<sp/>of<sp/>enabled<sp/>interrupts.</highlight></codeline>
<codeline lineno="283"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__twis__hal_1ga20806c89a383c02c930a1e287448fad8" kindref="member">nrf_twis_int_enable_check</ref>(NRF_TWIS_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>mask);</highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="286"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="287"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>disabling<sp/>the<sp/>specified<sp/>interrupts.</highlight></codeline>
<codeline lineno="288"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="289"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="290"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>mask<sp/><sp/>Mask<sp/>of<sp/>interrupts<sp/>to<sp/>be<sp/>disabled.</highlight></codeline>
<codeline lineno="291"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Use<sp/>@ref<sp/>nrf_twis_int_mask_t<sp/>values<sp/>for<sp/>bit<sp/>masking.</highlight></codeline>
<codeline lineno="292"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__twis__hal_1gae0c61580bd4494d3362271d8f8221251" kindref="member">nrf_twis_int_disable</ref>(NRF_TWIS_Type<sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>mask);</highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(DPPI_PRESENT)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="296"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="297"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>the<sp/>subscribe<sp/>configuration<sp/>for<sp/>a<sp/>given<sp/>TWIS<sp/>task.</highlight></codeline>
<codeline lineno="298"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="299"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="300"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>task<sp/><sp/><sp/><sp/>Task<sp/>for<sp/>which<sp/>to<sp/>set<sp/>the<sp/>configuration.</highlight></codeline>
<codeline lineno="301"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>channel<sp/>Channel<sp/>through<sp/>which<sp/>to<sp/>subscribe<sp/>events.</highlight></codeline>
<codeline lineno="302"><highlight class="comment"><sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__twis__hal_1ga5f21afcd20b58e1c21fd40bee3cabb29" kindref="member">nrf_twis_subscribe_set</ref>(NRF_TWIS_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__twis__hal_1ga0f9a066f20fa56a413dc549242f56360" kindref="member">nrf_twis_task_t</ref><sp/>task,</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>channel);</highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="307"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="308"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>clearing<sp/>the<sp/>subscribe<sp/>configuration<sp/>for<sp/>a<sp/>given</highlight></codeline>
<codeline lineno="309"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TWIS<sp/>task.</highlight></codeline>
<codeline lineno="310"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="311"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="312"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>task<sp/><sp/>Task<sp/>for<sp/>which<sp/>to<sp/>clear<sp/>the<sp/>configuration.</highlight></codeline>
<codeline lineno="313"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__twis__hal_1ga552aad914921d00de2b8cf8f620f76c5" kindref="member">nrf_twis_subscribe_clear</ref>(NRF_TWIS_Type<sp/>*<sp/>p_reg,<sp/><ref refid="group__nrf__twis__hal_1ga0f9a066f20fa56a413dc549242f56360" kindref="member">nrf_twis_task_t</ref><sp/>task);</highlight></codeline>
<codeline lineno="315"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="316"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="317"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>the<sp/>publish<sp/>configuration<sp/>for<sp/>a<sp/>given<sp/>TWIS<sp/>event.</highlight></codeline>
<codeline lineno="318"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="319"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="320"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>event<sp/><sp/><sp/>Event<sp/>for<sp/>which<sp/>to<sp/>set<sp/>the<sp/>configuration.</highlight></codeline>
<codeline lineno="321"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>channel<sp/>Channel<sp/>through<sp/>which<sp/>to<sp/>publish<sp/>the<sp/>event.</highlight></codeline>
<codeline lineno="322"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__twis__hal_1gacc5d93169ccb759bdbe5c8bd59f0535a" kindref="member">nrf_twis_publish_set</ref>(NRF_TWIS_Type<sp/>*<sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__twis__hal_1gaa095872e374917692717a6088e5b6345" kindref="member">nrf_twis_event_t</ref><sp/>event,</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>channel);</highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="327"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="328"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>clearing<sp/>the<sp/>publish<sp/>configuration<sp/>for<sp/>a<sp/>given<sp/>TWIS<sp/>event.</highlight></codeline>
<codeline lineno="329"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="330"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="331"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>event<sp/>Event<sp/>for<sp/>which<sp/>to<sp/>clear<sp/>the<sp/>configuration.</highlight></codeline>
<codeline lineno="332"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__twis__hal_1ga4dee0d30ccd6eaf35e1697d377412faa" kindref="member">nrf_twis_publish_clear</ref>(NRF_TWIS_Type<sp/>*<sp/>p_reg,<sp/><ref refid="group__nrf__twis__hal_1gaa095872e374917692717a6088e5b6345" kindref="member">nrf_twis_event_t</ref><sp/>event);</highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>defined(DPPI_PRESENT)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="336"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="337"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>retrieving<sp/>and<sp/>clearing<sp/>the<sp/>TWIS<sp/>error<sp/>source.</highlight></codeline>
<codeline lineno="338"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="339"><highlight class="comment"><sp/>*<sp/>@attention<sp/>Error<sp/>sources<sp/>are<sp/>cleared<sp/>after<sp/>read.</highlight></codeline>
<codeline lineno="340"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="341"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="342"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="343"><highlight class="comment"><sp/>*<sp/>@return<sp/>Error<sp/>source<sp/>mask<sp/>with<sp/>values<sp/>from<sp/>@ref<sp/>nrf_twis_error_t.</highlight></codeline>
<codeline lineno="344"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__twis__hal_1ga68fb9a7b57216e06b539fc005680b7a4" kindref="member">nrf_twis_error_source_get_and_clear</ref>(NRF_TWIS_Type<sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="347"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="348"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>information<sp/>about<sp/>which<sp/>of<sp/>the<sp/>addresses<sp/>matched.</highlight></codeline>
<codeline lineno="349"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="350"><highlight class="comment"><sp/>*<sp/>Function<sp/>returns<sp/>index<sp/>in<sp/>the<sp/>address<sp/>table</highlight></codeline>
<codeline lineno="351"><highlight class="comment"><sp/>*<sp/>that<sp/>points<sp/>to<sp/>the<sp/>address<sp/>that<sp/>already<sp/>matched.</highlight></codeline>
<codeline lineno="352"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="353"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="354"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="355"><highlight class="comment"><sp/>*<sp/>@return<sp/>Index<sp/>of<sp/>matched<sp/>address.</highlight></codeline>
<codeline lineno="356"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint_fast8_t<sp/><ref refid="group__nrf__twis__hal_1ga88e0ff8d10b77aecba37cfebea94c53e" kindref="member">nrf_twis_match_get</ref>(NRF_TWIS_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="358"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="359"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="360"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>enabling<sp/>TWIS.</highlight></codeline>
<codeline lineno="361"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="362"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="363"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__twis__hal_1ga2b0bbdafe4f64c476912e3bd0f881bce" kindref="member">nrf_twis_enable</ref>(NRF_TWIS_Type<sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="365"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="366"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="367"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>disabling<sp/>TWIS.</highlight></codeline>
<codeline lineno="368"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="369"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="370"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__twis__hal_1ga6afc41963c1635025887963df5686b7d" kindref="member">nrf_twis_disable</ref>(NRF_TWIS_Type<sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="372"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="373"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="374"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>checking<sp/>if<sp/>the<sp/>TWIS<sp/>is<sp/>enabled.</highlight></codeline>
<codeline lineno="375"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="376"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="377"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="378"><highlight class="comment"><sp/>*<sp/>@retval<sp/>true<sp/><sp/>The<sp/>TWIS<sp/>is<sp/>enabled.</highlight></codeline>
<codeline lineno="379"><highlight class="comment"><sp/>*<sp/>@retval<sp/>false<sp/>The<sp/>TWIS<sp/>is<sp/>not<sp/>enabled.</highlight></codeline>
<codeline lineno="380"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrf__twis__hal_1ga406ef3faf583d755d93d8f4e3107afaa" kindref="member">nrf_twis_enable_check</ref>(NRF_TWIS_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="382"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="383"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="384"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>configuring<sp/>TWIS<sp/>pins.</highlight></codeline>
<codeline lineno="385"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="386"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="387"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>scl<sp/><sp/><sp/>SCL<sp/>pin<sp/>number.</highlight></codeline>
<codeline lineno="388"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>sda<sp/><sp/><sp/>SDA<sp/>pin<sp/>number.</highlight></codeline>
<codeline lineno="389"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__twis__hal_1ga58f400b99e68a50ea3470c092f756cb4" kindref="member">nrf_twis_pins_set</ref>(NRF_TWIS_Type<sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>scl,<sp/>uint32_t<sp/>sda);</highlight></codeline>
<codeline lineno="391"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="392"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="393"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>retrieving<sp/>the<sp/>SCL<sp/>pin<sp/>selection.</highlight></codeline>
<codeline lineno="394"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="395"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="396"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="397"><highlight class="comment"><sp/>*<sp/>@return<sp/>SCL<sp/>pin<sp/>selection.</highlight></codeline>
<codeline lineno="398"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__twis__hal_1ga2f6521bb50827c7c4336e407ae5c8dfc" kindref="member">nrf_twis_scl_pin_get</ref>(NRF_TWIS_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="400"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="401"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="402"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>retrieving<sp/>the<sp/>SDA<sp/>pin<sp/>selection.</highlight></codeline>
<codeline lineno="403"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="404"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="405"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="406"><highlight class="comment"><sp/>*<sp/>@return<sp/>SDA<sp/>pin<sp/>selection.</highlight></codeline>
<codeline lineno="407"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="408"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__twis__hal_1ga4cd0fdd60688f23dfc339fcd85fadeeb" kindref="member">nrf_twis_sda_pin_get</ref>(NRF_TWIS_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="409"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="410"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="411"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>the<sp/>receive<sp/>buffer.</highlight></codeline>
<codeline lineno="412"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="413"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="414"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_buf<sp/><sp/>Pointer<sp/>to<sp/>the<sp/>buffer<sp/>for<sp/>received<sp/>data.</highlight></codeline>
<codeline lineno="415"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>length<sp/>Maximum<sp/>number<sp/>of<sp/>data<sp/>bytes<sp/>to<sp/>receive.</highlight></codeline>
<codeline lineno="416"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="417"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__twis__hal_1ga2e2fdc81514fe8291222f092a636ec83" kindref="member">nrf_twis_rx_buffer_set</ref>(NRF_TWIS_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>p_buf,</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>length);</highlight></codeline>
<codeline lineno="420"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="421"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="422"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>the<sp/>receive<sp/>buffer.</highlight></codeline>
<codeline lineno="423"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="424"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="425"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="426"><highlight class="comment"><sp/>*<sp/>@return<sp/>Pointer<sp/>to<sp/>the<sp/>receive<sp/>buffer.</highlight></codeline>
<codeline lineno="427"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="428"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint8_t<sp/>*<sp/><ref refid="group__nrf__twis__hal_1gaf0bf02ca4afb34709ddcc926a11bf4c1" kindref="member">nrf_twis_rx_buffer_get</ref>(NRF_TWIS_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="429"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="430"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="431"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>that<sp/>prepares<sp/>TWIS<sp/>for<sp/>receiving</highlight></codeline>
<codeline lineno="432"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="433"><highlight class="comment"><sp/>*<sp/>This<sp/>function<sp/>sets<sp/>receive<sp/>buffer<sp/>and<sp/>then<sp/>sets<sp/>NRF_TWIS_TASK_PREPARERX<sp/>task.</highlight></codeline>
<codeline lineno="434"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="435"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="436"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_buf<sp/><sp/>Pointer<sp/>to<sp/>the<sp/>buffer<sp/>for<sp/>received<sp/>data.</highlight></codeline>
<codeline lineno="437"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>length<sp/>Maximum<sp/>number<sp/>of<sp/>data<sp/>bytes<sp/>to<sp/>receive.</highlight></codeline>
<codeline lineno="438"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="439"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__twis__hal_1ga72e9082fa44f6fc4d063c344d95c54b4" kindref="member">nrf_twis_rx_prepare</ref>(NRF_TWIS_Type<sp/>*<sp/>p_reg,<sp/>uint8_t<sp/>*<sp/>p_buf,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>length);</highlight></codeline>
<codeline lineno="440"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="441"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="442"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>number<sp/>of<sp/>bytes<sp/>received<sp/>in<sp/>the<sp/>last<sp/>transaction.</highlight></codeline>
<codeline lineno="443"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="444"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>TWIS<sp/>instance.</highlight></codeline>
<codeline lineno="445"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="446"><highlight class="comment"><sp/>*<sp/>@return<sp/>Amount<sp/>of<sp/>received<sp/>bytes.</highlight></codeline>
<codeline lineno="447"><highlight class="comment"><sp/>*<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="448"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="group__nrf__twis__hal_1ga5c9844a79451f11104fafd5dd8159317" kindref="member">nrf_twis_rx_amount_get</ref>(NRF_TWIS_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="449"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="450"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="451"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>the<sp/>transmit<sp/>buffer.</highlight></codeline>
<codeline lineno="452"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="453"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="454"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_buf<sp/><sp/>Pointer<sp/>to<sp/>the<sp/>buffer<sp/>with<sp/>data<sp/>to<sp/>send.</highlight></codeline>
<codeline lineno="455"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>length<sp/>Maximum<sp/>number<sp/>of<sp/>data<sp/>bytes<sp/>to<sp/>transmit.</highlight></codeline>
<codeline lineno="456"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="457"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__twis__hal_1ga9f1c52a92ce23ad9653bb0476c859630" kindref="member">nrf_twis_tx_buffer_set</ref>(NRF_TWIS_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_buf,</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>length);</highlight></codeline>
<codeline lineno="460"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="461"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="462"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>the<sp/>transmit<sp/>buffer.</highlight></codeline>
<codeline lineno="463"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="464"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="465"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="466"><highlight class="comment"><sp/>*<sp/>@return<sp/>Pointer<sp/>to<sp/>the<sp/>transmit<sp/>buffer.</highlight></codeline>
<codeline lineno="467"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="468"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint8_t<sp/>*<sp/><ref refid="group__nrf__twis__hal_1gaeca28e06a53158a07262f5c83fb1eb61" kindref="member">nrf_twis_tx_buffer_get</ref>(NRF_TWIS_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="469"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="470"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="471"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>preparing<sp/>TWIS<sp/>for<sp/>transmitting.</highlight></codeline>
<codeline lineno="472"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="473"><highlight class="comment"><sp/>*<sp/>This<sp/>function<sp/>sets<sp/>transmit<sp/>buffer<sp/>and<sp/>then<sp/>sets<sp/>NRF_TWIS_TASK_PREPARETX<sp/>task.</highlight></codeline>
<codeline lineno="474"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="475"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="476"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_buf<sp/><sp/>Pointer<sp/>to<sp/>the<sp/>buffer<sp/>with<sp/>data<sp/>to<sp/>send.</highlight></codeline>
<codeline lineno="477"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>length<sp/>Maximum<sp/>number<sp/>of<sp/>data<sp/>bytes<sp/>to<sp/>transmit.</highlight></codeline>
<codeline lineno="478"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="479"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__twis__hal_1gadd3057b0a9b02a00e0c6fa15697bbf26" kindref="member">nrf_twis_tx_prepare</ref>(NRF_TWIS_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_buf,</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>length);</highlight></codeline>
<codeline lineno="482"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="483"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="484"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>the<sp/>number<sp/>of<sp/>bytes<sp/>transmitted<sp/>in<sp/>the<sp/>last<sp/>transaction.</highlight></codeline>
<codeline lineno="485"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="486"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="487"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="488"><highlight class="comment"><sp/>*<sp/>@return<sp/>Amount<sp/>of<sp/>bytes<sp/>transmitted.</highlight></codeline>
<codeline lineno="489"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="490"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="group__nrf__twis__hal_1ga686637d3b10e2df8cbeda813ff649c13" kindref="member">nrf_twis_tx_amount_get</ref>(NRF_TWIS_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="491"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="492"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="493"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>the<sp/>slave<sp/>address.</highlight></codeline>
<codeline lineno="494"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="495"><highlight class="comment"><sp/>*<sp/>Function<sp/>sets<sp/>the<sp/>selected<sp/>address<sp/>for<sp/>this<sp/>TWI<sp/>interface.</highlight></codeline>
<codeline lineno="496"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="497"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="498"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>n<sp/><sp/><sp/><sp/><sp/>Index<sp/>of<sp/>address<sp/>to<sp/>be<sp/>set.</highlight></codeline>
<codeline lineno="499"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>addr<sp/><sp/>Addres<sp/>to<sp/>be<sp/>set.</highlight></codeline>
<codeline lineno="500"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="501"><highlight class="comment"><sp/>*<sp/>@sa<sp/>nrf_twis_config_address_set</highlight></codeline>
<codeline lineno="502"><highlight class="comment"><sp/>*<sp/>@sa<sp/>nrf_twis_config_address_get</highlight></codeline>
<codeline lineno="503"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="504"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__twis__hal_1ga197d0cf5d35cd5ecaf8303fd979278d1" kindref="member">nrf_twis_address_set</ref>(NRF_TWIS_Type<sp/>*<sp/><sp/><sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint_fast8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/>n,</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__twis__hal_1gab3ec17f227b682bb63a6ca3b8bf78d8f" kindref="member">nrf_twis_address_t</ref><sp/>addr);</highlight></codeline>
<codeline lineno="507"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="508"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="509"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>retrieving<sp/>configured<sp/>slave<sp/>address.</highlight></codeline>
<codeline lineno="510"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="511"><highlight class="comment"><sp/>*<sp/>Function<sp/>gets<sp/>the<sp/>selected<sp/>address<sp/>for<sp/>this<sp/>TWI<sp/>interface.</highlight></codeline>
<codeline lineno="512"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="513"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="514"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>n<sp/><sp/><sp/><sp/><sp/>Index<sp/>of<sp/>address<sp/>to<sp/>get.</highlight></codeline>
<codeline lineno="515"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="516"><highlight class="comment"><sp/>*<sp/>@return<sp/>Configured<sp/>slave<sp/>address.</highlight></codeline>
<codeline lineno="517"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="518"><highlight class="normal">NRF_STATIC_INLINE<sp/><ref refid="group__nrf__twis__hal_1gab3ec17f227b682bb63a6ca3b8bf78d8f" kindref="member">nrf_twis_address_t</ref><sp/><ref refid="group__nrf__twis__hal_1gabe997aa5bae79862961e60fc49a9ffa7" kindref="member">nrf_twis_address_get</ref>(NRF_TWIS_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint_fast8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n);</highlight></codeline>
<codeline lineno="520"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="521"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="522"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>the<sp/>device<sp/>address<sp/>configuration.</highlight></codeline>
<codeline lineno="523"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="524"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="525"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>addr_mask<sp/>Mask<sp/>of<sp/>address<sp/>indexes<sp/>of<sp/>what<sp/>device<sp/>should<sp/>answer<sp/>to.</highlight></codeline>
<codeline lineno="526"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="527"><highlight class="comment"><sp/>*<sp/>@sa<sp/>nrf_twis_address_set</highlight></codeline>
<codeline lineno="528"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="529"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__twis__hal_1ga6651956e1198c3efc3fe692f4e242e3e" kindref="member">nrf_twis_config_address_set</ref>(NRF_TWIS_Type<sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__twis__hal_1gae8b5a6d6e1ae57daec594f73b19092b1" kindref="member">nrf_twis_config_addr_mask_t</ref><sp/>addr_mask);</highlight></codeline>
<codeline lineno="531"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="532"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="533"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>retrieving<sp/>the<sp/>device<sp/>address<sp/>configuration.</highlight></codeline>
<codeline lineno="534"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="535"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="536"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="537"><highlight class="comment"><sp/>*<sp/>@return<sp/>Mask<sp/>of<sp/>address<sp/>indexes<sp/>of<sp/>what<sp/>device<sp/>should<sp/>answer<sp/>to.</highlight></codeline>
<codeline lineno="538"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="539"><highlight class="normal">NRF_STATIC_INLINE</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><ref refid="group__nrf__twis__hal_1gae8b5a6d6e1ae57daec594f73b19092b1" kindref="member">nrf_twis_config_addr_mask_t</ref><sp/><ref refid="group__nrf__twis__hal_1ga097263f9bee26541a91ea928d39f3fc7" kindref="member">nrf_twis_config_address_get</ref>(NRF_TWIS_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="541"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="542"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="543"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>the<sp/>over-read<sp/>character.</highlight></codeline>
<codeline lineno="544"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="545"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="546"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>orc<sp/><sp/><sp/>Over-read<sp/>character.<sp/>Character<sp/>clocked<sp/>out<sp/>in<sp/>case<sp/>of</highlight></codeline>
<codeline lineno="547"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>over-read<sp/>of<sp/>the<sp/>TXD<sp/>buffer.</highlight></codeline>
<codeline lineno="548"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="549"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__twis__hal_1ga61982ea97228eadbd76475eb8ee3817d" kindref="member">nrf_twis_orc_set</ref>(NRF_TWIS_Type<sp/>*<sp/>p_reg,<sp/>uint8_t<sp/>orc);</highlight></codeline>
<codeline lineno="550"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="551"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="552"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>the<sp/>over-read<sp/>character.</highlight></codeline>
<codeline lineno="553"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="554"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="555"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="556"><highlight class="comment"><sp/>*<sp/>@return<sp/>Over-read<sp/>character<sp/>configured<sp/>for<sp/>selected<sp/>instance.</highlight></codeline>
<codeline lineno="557"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="558"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint8_t<sp/><ref refid="group__nrf__twis__hal_1ga2641893e0f099994aa21c8c6591087e5" kindref="member">nrf_twis_orc_get</ref>(NRF_TWIS_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="559"><highlight class="normal"></highlight></codeline>
<codeline lineno="560"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_TWIS_HAS_LIST_REG</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="561"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="562"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>enabling<sp/>the<sp/>TX<sp/>list<sp/>feature.</highlight></codeline>
<codeline lineno="563"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="564"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="565"><highlight class="comment"><sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="566"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__twis__hal_1ga97194ea3b9da36122bb7b4c49916ab53" kindref="member">nrf_twis_tx_list_enable</ref>(NRF_TWIS_Type<sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="567"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="568"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="569"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>disabling<sp/>the<sp/>TX<sp/>list<sp/>feature.</highlight></codeline>
<codeline lineno="570"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="571"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="572"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="573"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__twis__hal_1gaa1f3a75c8c3ba7c65dc6407b8e462328" kindref="member">nrf_twis_tx_list_disable</ref>(NRF_TWIS_Type<sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="574"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="575"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="576"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>enabling<sp/>the<sp/>RX<sp/>list<sp/>feature.</highlight></codeline>
<codeline lineno="577"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="578"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="579"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="580"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__twis__hal_1ga04b21362f997c16d1f636b219d8dad3a" kindref="member">nrf_twis_rx_list_enable</ref>(NRF_TWIS_Type<sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="581"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="582"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="583"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>disabling<sp/>the<sp/>RX<sp/>list<sp/>feature.</highlight></codeline>
<codeline lineno="584"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="585"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="586"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="587"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__twis__hal_1gaae7e48f099010a8c6e6f3c234f157bc7" kindref="member">nrf_twis_rx_list_disable</ref>(NRF_TWIS_Type<sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="588"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="589"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="590"><highlight class="comment">/**<sp/>@}<sp/>*/</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*<sp/><sp/>End<sp/>of<sp/>nrf_twis_hal<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="591"><highlight class="normal"></highlight></codeline>
<codeline lineno="592"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>NRF_DECLARE_ONLY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="593"><highlight class="normal"></highlight></codeline>
<codeline lineno="594"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>------------------------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="595"><highlight class="comment"><sp/>*<sp/><sp/>Internal<sp/>functions</highlight></codeline>
<codeline lineno="596"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="597"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="598"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="599"><highlight class="comment"><sp/>*<sp/>@internal</highlight></codeline>
<codeline lineno="600"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Internal<sp/>function<sp/>for<sp/>getting<sp/>task<sp/>or<sp/>event<sp/>register<sp/>address.</highlight></codeline>
<codeline lineno="601"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="602"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="603"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>offset<sp/>Offset<sp/>of<sp/>the<sp/>register<sp/>from<sp/>the<sp/>beginning<sp/>of<sp/>the<sp/>instance.</highlight></codeline>
<codeline lineno="604"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="605"><highlight class="comment"><sp/>*<sp/>@attention<sp/>Offset<sp/>must<sp/>be<sp/>modulo<sp/>4<sp/>value.<sp/>In<sp/>other<sp/>case,<sp/>hardware<sp/>fault<sp/>can<sp/>occur.</highlight></codeline>
<codeline lineno="606"><highlight class="comment"><sp/>*<sp/>@return<sp/>Pointer<sp/>to<sp/>the<sp/>register.</highlight></codeline>
<codeline lineno="607"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="608"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint32_t*<sp/>nrf_twis_getRegPtr(NRF_TWIS_Type<sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>offset)</highlight></codeline>
<codeline lineno="609"><highlight class="normal">{</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint32_t*)((uint8_t<sp/>*)p_reg<sp/>+<sp/>(uint32_t)offset);</highlight></codeline>
<codeline lineno="611"><highlight class="normal">}</highlight></codeline>
<codeline lineno="612"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="613"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="614"><highlight class="comment"><sp/>*<sp/>@internal</highlight></codeline>
<codeline lineno="615"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Internal<sp/>function<sp/>for<sp/>getting<sp/>task/event<sp/>register<sp/>address<sp/>-<sp/>constant<sp/>version.</highlight></codeline>
<codeline lineno="616"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="617"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="618"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>offset<sp/>Offset<sp/>of<sp/>the<sp/>register<sp/>from<sp/>the<sp/>beginning<sp/>of<sp/>the<sp/>instance.</highlight></codeline>
<codeline lineno="619"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="620"><highlight class="comment"><sp/>*<sp/>@attention<sp/>Offset<sp/>must<sp/>be<sp/>modulo<sp/>4<sp/>value.<sp/>In<sp/>other<sp/>case,<sp/>hardware<sp/>fault<sp/>can<sp/>occur.</highlight></codeline>
<codeline lineno="621"><highlight class="comment"><sp/>*<sp/>@return<sp/>Pointer<sp/>to<sp/>the<sp/>register.</highlight></codeline>
<codeline lineno="622"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="623"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t*<sp/>nrf_twis_getRegPtr_c(NRF_TWIS_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>offset)</highlight></codeline>
<codeline lineno="625"><highlight class="normal">{</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t*)((uint8_t<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*)p_reg<sp/>+<sp/>(uint32_t)offset);</highlight></codeline>
<codeline lineno="627"><highlight class="normal">}</highlight></codeline>
<codeline lineno="628"><highlight class="normal"></highlight></codeline>
<codeline lineno="629"><highlight class="normal"></highlight></codeline>
<codeline lineno="630"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>------------------------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="631"><highlight class="comment"><sp/>*<sp/><sp/>Interface<sp/>functions<sp/>definitions</highlight></codeline>
<codeline lineno="632"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="633"><highlight class="normal"></highlight></codeline>
<codeline lineno="634"><highlight class="normal"></highlight></codeline>
<codeline lineno="635"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__twis__hal_1gac6a70173d85ce7823437ba9f1c8164a9" kindref="member">nrf_twis_task_trigger</ref>(NRF_TWIS_Type<sp/>*<sp/>p_reg,<sp/><ref refid="group__nrf__twis__hal_1ga0f9a066f20fa56a413dc549242f56360" kindref="member">nrf_twis_task_t</ref><sp/>task)</highlight></codeline>
<codeline lineno="636"><highlight class="normal">{</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/>*(nrf_twis_getRegPtr(p_reg,<sp/>(uint32_t)task))<sp/>=<sp/>1UL;</highlight></codeline>
<codeline lineno="638"><highlight class="normal">}</highlight></codeline>
<codeline lineno="639"><highlight class="normal"></highlight></codeline>
<codeline lineno="640"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__twis__hal_1gaa7cb188303fca30b566bcc33128fac21" kindref="member">nrf_twis_task_address_get</ref>(NRF_TWIS_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__twis__hal_1ga0f9a066f20fa56a413dc549242f56360" kindref="member">nrf_twis_task_t</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>task)</highlight></codeline>
<codeline lineno="642"><highlight class="normal">{</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(uint32_t)nrf_twis_getRegPtr_c(p_reg,<sp/>(uint32_t)task);</highlight></codeline>
<codeline lineno="644"><highlight class="normal">}</highlight></codeline>
<codeline lineno="645"><highlight class="normal"></highlight></codeline>
<codeline lineno="646"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__twis__hal_1ga9b3471028011828ee2df2ff6f053eee2" kindref="member">nrf_twis_event_clear</ref>(NRF_TWIS_Type<sp/>*<sp/>p_reg,<sp/><ref refid="group__nrf__twis__hal_1gaa095872e374917692717a6088e5b6345" kindref="member">nrf_twis_event_t</ref><sp/>event)</highlight></codeline>
<codeline lineno="647"><highlight class="normal">{</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/>*(nrf_twis_getRegPtr(p_reg,<sp/>(uint32_t)event))<sp/>=<sp/>0UL;</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/>nrf_event_readback((uint8_t<sp/>*)p_reg<sp/>+<sp/>(uint32_t)event);</highlight></codeline>
<codeline lineno="650"><highlight class="normal">}</highlight></codeline>
<codeline lineno="651"><highlight class="normal"></highlight></codeline>
<codeline lineno="652"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrf__twis__hal_1ga37232c7135fbe0f4681f6578ea3f5d55" kindref="member">nrf_twis_event_check</ref>(NRF_TWIS_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,<sp/><ref refid="group__nrf__twis__hal_1gaa095872e374917692717a6088e5b6345" kindref="member">nrf_twis_event_t</ref><sp/>event)</highlight></codeline>
<codeline lineno="653"><highlight class="normal">{</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">)*nrf_twis_getRegPtr_c(p_reg,<sp/>(uint32_t)event);</highlight></codeline>
<codeline lineno="655"><highlight class="normal">}</highlight></codeline>
<codeline lineno="656"><highlight class="normal"></highlight></codeline>
<codeline lineno="657"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrf__twis__hal_1ga4f849f84aa26c795773c12b40db861ac" kindref="member">nrf_twis_event_get_and_clear</ref>(NRF_TWIS_Type<sp/>*<sp/>p_reg,<sp/><ref refid="group__nrf__twis__hal_1gaa095872e374917692717a6088e5b6345" kindref="member">nrf_twis_event_t</ref><sp/>event)</highlight></codeline>
<codeline lineno="658"><highlight class="normal">{</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ret<sp/>=<sp/><ref refid="group__nrf__twis__hal_1ga37232c7135fbe0f4681f6578ea3f5d55" kindref="member">nrf_twis_event_check</ref>(p_reg,<sp/>event);</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ret)</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__twis__hal_1ga9b3471028011828ee2df2ff6f053eee2" kindref="member">nrf_twis_event_clear</ref>(p_reg,<sp/>event);</highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="665"><highlight class="normal">}</highlight></codeline>
<codeline lineno="666"><highlight class="normal"></highlight></codeline>
<codeline lineno="667"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__twis__hal_1gaa361feaa2f23dd4b9fe417ff095ae490" kindref="member">nrf_twis_event_address_get</ref>(NRF_TWIS_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__twis__hal_1gaa095872e374917692717a6088e5b6345" kindref="member">nrf_twis_event_t</ref><sp/><sp/><sp/><sp/><sp/><sp/>event)</highlight></codeline>
<codeline lineno="669"><highlight class="normal">{</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(uint32_t)nrf_twis_getRegPtr_c(p_reg,<sp/>(uint32_t)event);</highlight></codeline>
<codeline lineno="671"><highlight class="normal">}</highlight></codeline>
<codeline lineno="672"><highlight class="normal"></highlight></codeline>
<codeline lineno="673"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__twis__hal_1ga3c6ff3552ca042c8593bef12db83caac" kindref="member">nrf_twis_shorts_enable</ref>(NRF_TWIS_Type<sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>mask)</highlight></codeline>
<codeline lineno="674"><highlight class="normal">{</highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;SHORTS<sp/>|=<sp/>mask;</highlight></codeline>
<codeline lineno="676"><highlight class="normal">}</highlight></codeline>
<codeline lineno="677"><highlight class="normal"></highlight></codeline>
<codeline lineno="678"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__twis__hal_1gac8764a8233f598003357fef2cf098e93" kindref="member">nrf_twis_shorts_disable</ref>(NRF_TWIS_Type<sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>mask)</highlight></codeline>
<codeline lineno="679"><highlight class="normal">{</highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(~0U<sp/>==<sp/>mask)</highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Optimized<sp/>version<sp/>for<sp/>&quot;disable<sp/>all&quot;<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_reg-&gt;SHORTS<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_reg-&gt;SHORTS<sp/>&amp;=<sp/>~mask;</highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="689"><highlight class="normal">}</highlight></codeline>
<codeline lineno="690"><highlight class="normal"></highlight></codeline>
<codeline lineno="691"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__twis__hal_1ga5a5229e9bff44a29450e7d5672665959" kindref="member">nrf_twis_shorts_get</ref>(NRF_TWIS_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="692"><highlight class="normal">{</highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p_reg-&gt;SHORTS;</highlight></codeline>
<codeline lineno="694"><highlight class="normal">}</highlight></codeline>
<codeline lineno="695"><highlight class="normal"></highlight></codeline>
<codeline lineno="696"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__twis__hal_1ga70d9f76988e880d6052d128bd095dcd2" kindref="member">nrf_twis_int_enable</ref>(NRF_TWIS_Type<sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>mask)</highlight></codeline>
<codeline lineno="697"><highlight class="normal">{</highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;INTENSET<sp/>=<sp/>mask;</highlight></codeline>
<codeline lineno="699"><highlight class="normal">}</highlight></codeline>
<codeline lineno="700"><highlight class="normal"></highlight></codeline>
<codeline lineno="701"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__twis__hal_1ga20806c89a383c02c930a1e287448fad8" kindref="member">nrf_twis_int_enable_check</ref>(NRF_TWIS_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>mask)</highlight></codeline>
<codeline lineno="702"><highlight class="normal">{</highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p_reg-&gt;INTENSET<sp/>&amp;<sp/>mask;</highlight></codeline>
<codeline lineno="704"><highlight class="normal">}</highlight></codeline>
<codeline lineno="705"><highlight class="normal"></highlight></codeline>
<codeline lineno="706"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__twis__hal_1gae0c61580bd4494d3362271d8f8221251" kindref="member">nrf_twis_int_disable</ref>(NRF_TWIS_Type<sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>mask)</highlight></codeline>
<codeline lineno="707"><highlight class="normal">{</highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;INTENCLR<sp/>=<sp/>mask;</highlight></codeline>
<codeline lineno="709"><highlight class="normal">}</highlight></codeline>
<codeline lineno="710"><highlight class="normal"></highlight></codeline>
<codeline lineno="711"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(DPPI_PRESENT)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="712"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__twis__hal_1ga5f21afcd20b58e1c21fd40bee3cabb29" kindref="member">nrf_twis_subscribe_set</ref>(NRF_TWIS_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__twis__hal_1ga0f9a066f20fa56a413dc549242f56360" kindref="member">nrf_twis_task_t</ref><sp/>task,</highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>channel)</highlight></codeline>
<codeline lineno="715"><highlight class="normal">{</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/><sp/><sp/>*((</highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint32_t<sp/>*)<sp/>((uint8_t<sp/>*)<sp/>p_reg<sp/>+<sp/>(uint32_t)<sp/>task<sp/>+<sp/>0x80uL))<sp/>=</highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)channel<sp/>|<sp/>NRF_SUBSCRIBE_PUBLISH_ENABLE);</highlight></codeline>
<codeline lineno="718"><highlight class="normal">}</highlight></codeline>
<codeline lineno="719"><highlight class="normal"></highlight></codeline>
<codeline lineno="720"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__twis__hal_1ga552aad914921d00de2b8cf8f620f76c5" kindref="member">nrf_twis_subscribe_clear</ref>(NRF_TWIS_Type<sp/>*<sp/>p_reg,<sp/><ref refid="group__nrf__twis__hal_1ga0f9a066f20fa56a413dc549242f56360" kindref="member">nrf_twis_task_t</ref><sp/>task)</highlight></codeline>
<codeline lineno="721"><highlight class="normal">{</highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/><sp/><sp/>*((</highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint32_t<sp/>*)<sp/>((uint8_t<sp/>*)<sp/>p_reg<sp/>+<sp/>(uint32_t)<sp/>task<sp/>+<sp/>0x80uL))<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="723"><highlight class="normal">}</highlight></codeline>
<codeline lineno="724"><highlight class="normal"></highlight></codeline>
<codeline lineno="725"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__twis__hal_1gacc5d93169ccb759bdbe5c8bd59f0535a" kindref="member">nrf_twis_publish_set</ref>(NRF_TWIS_Type<sp/>*<sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__twis__hal_1gaa095872e374917692717a6088e5b6345" kindref="member">nrf_twis_event_t</ref><sp/>event,</highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>channel)</highlight></codeline>
<codeline lineno="728"><highlight class="normal">{</highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/><sp/><sp/>*((</highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint32_t<sp/>*)<sp/>((uint8_t<sp/>*)<sp/>p_reg<sp/>+<sp/>(uint32_t)<sp/>event<sp/>+<sp/>0x80uL))<sp/>=</highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)channel<sp/>|<sp/>NRF_SUBSCRIBE_PUBLISH_ENABLE);</highlight></codeline>
<codeline lineno="731"><highlight class="normal">}</highlight></codeline>
<codeline lineno="732"><highlight class="normal"></highlight></codeline>
<codeline lineno="733"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__twis__hal_1ga4dee0d30ccd6eaf35e1697d377412faa" kindref="member">nrf_twis_publish_clear</ref>(NRF_TWIS_Type<sp/>*<sp/><sp/>p_reg,<sp/><ref refid="group__nrf__twis__hal_1gaa095872e374917692717a6088e5b6345" kindref="member">nrf_twis_event_t</ref><sp/>event)</highlight></codeline>
<codeline lineno="734"><highlight class="normal">{</highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/><sp/><sp/>*((</highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint32_t<sp/>*)<sp/>((uint8_t<sp/>*)<sp/>p_reg<sp/>+<sp/>(uint32_t)<sp/>event<sp/>+<sp/>0x80uL))<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="736"><highlight class="normal">}</highlight></codeline>
<codeline lineno="737"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>defined(DPPI_PRESENT)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="738"><highlight class="normal"></highlight></codeline>
<codeline lineno="739"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__twis__hal_1ga68fb9a7b57216e06b539fc005680b7a4" kindref="member">nrf_twis_error_source_get_and_clear</ref>(NRF_TWIS_Type<sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="740"><highlight class="normal">{</highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>ret<sp/>=<sp/>p_reg-&gt;ERRORSRC;</highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;ERRORSRC<sp/>=<sp/>ret;</highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="744"><highlight class="normal">}</highlight></codeline>
<codeline lineno="745"><highlight class="normal"></highlight></codeline>
<codeline lineno="746"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint_fast8_t<sp/><ref refid="group__nrf__twis__hal_1ga88e0ff8d10b77aecba37cfebea94c53e" kindref="member">nrf_twis_match_get</ref>(NRF_TWIS_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="747"><highlight class="normal">{</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(uint_fast8_t)p_reg-&gt;MATCH;</highlight></codeline>
<codeline lineno="749"><highlight class="normal">}</highlight></codeline>
<codeline lineno="750"><highlight class="normal"></highlight></codeline>
<codeline lineno="751"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__twis__hal_1ga2b0bbdafe4f64c476912e3bd0f881bce" kindref="member">nrf_twis_enable</ref>(NRF_TWIS_Type<sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="752"><highlight class="normal">{</highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;ENABLE<sp/>=<sp/>(TWIS_ENABLE_ENABLE_Enabled<sp/>&lt;&lt;<sp/>TWIS_ENABLE_ENABLE_Pos);</highlight></codeline>
<codeline lineno="754"><highlight class="normal">}</highlight></codeline>
<codeline lineno="755"><highlight class="normal"></highlight></codeline>
<codeline lineno="756"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__twis__hal_1ga6afc41963c1635025887963df5686b7d" kindref="member">nrf_twis_disable</ref>(NRF_TWIS_Type<sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="757"><highlight class="normal">{</highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;ENABLE<sp/>=<sp/>(TWIS_ENABLE_ENABLE_Disabled<sp/>&lt;&lt;<sp/>TWIS_ENABLE_ENABLE_Pos);</highlight></codeline>
<codeline lineno="759"><highlight class="normal">}</highlight></codeline>
<codeline lineno="760"><highlight class="normal"></highlight></codeline>
<codeline lineno="761"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrf__twis__hal_1ga406ef3faf583d755d93d8f4e3107afaa" kindref="member">nrf_twis_enable_check</ref>(NRF_TWIS_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="762"><highlight class="normal">{</highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(p_reg-&gt;ENABLE<sp/>==<sp/>(TWIS_ENABLE_ENABLE_Enabled<sp/>&lt;&lt;<sp/>TWIS_ENABLE_ENABLE_Pos));</highlight></codeline>
<codeline lineno="764"><highlight class="normal">}</highlight></codeline>
<codeline lineno="765"><highlight class="normal"></highlight></codeline>
<codeline lineno="766"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__twis__hal_1ga58f400b99e68a50ea3470c092f756cb4" kindref="member">nrf_twis_pins_set</ref>(NRF_TWIS_Type<sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>scl,<sp/>uint32_t<sp/>sda)</highlight></codeline>
<codeline lineno="767"><highlight class="normal">{</highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;PSEL.SCL<sp/>=<sp/>scl;</highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;PSEL.SDA<sp/>=<sp/>sda;</highlight></codeline>
<codeline lineno="770"><highlight class="normal">}</highlight></codeline>
<codeline lineno="771"><highlight class="normal"></highlight></codeline>
<codeline lineno="772"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__twis__hal_1ga2f6521bb50827c7c4336e407ae5c8dfc" kindref="member">nrf_twis_scl_pin_get</ref>(NRF_TWIS_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="773"><highlight class="normal">{</highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p_reg-&gt;PSEL.SCL;</highlight></codeline>
<codeline lineno="775"><highlight class="normal">}</highlight></codeline>
<codeline lineno="776"><highlight class="normal"></highlight></codeline>
<codeline lineno="777"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__twis__hal_1ga4cd0fdd60688f23dfc339fcd85fadeeb" kindref="member">nrf_twis_sda_pin_get</ref>(NRF_TWIS_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="778"><highlight class="normal">{</highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p_reg-&gt;PSEL.SDA;</highlight></codeline>
<codeline lineno="780"><highlight class="normal">}</highlight></codeline>
<codeline lineno="781"><highlight class="normal"></highlight></codeline>
<codeline lineno="782"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__twis__hal_1ga2e2fdc81514fe8291222f092a636ec83" kindref="member">nrf_twis_rx_buffer_set</ref>(NRF_TWIS_Type<sp/>*<sp/>p_reg,<sp/>uint8_t<sp/>*<sp/>p_buf,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>length)</highlight></codeline>
<codeline lineno="783"><highlight class="normal">{</highlight></codeline>
<codeline lineno="784"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_TWIS_HAS_DMA_REG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;DMA.RX.PTR<sp/><sp/><sp/><sp/>=<sp/>(uint32_t)p_buf;</highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;DMA.RX.MAXCNT<sp/>=<sp/>(uint32_t)length;</highlight></codeline>
<codeline lineno="787"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;RXD.PTR<sp/><sp/><sp/><sp/>=<sp/>(uint32_t)p_buf;</highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;RXD.MAXCNT<sp/>=<sp/>length;</highlight></codeline>
<codeline lineno="790"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="791"><highlight class="normal">}</highlight></codeline>
<codeline lineno="792"><highlight class="normal"></highlight></codeline>
<codeline lineno="793"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint8_t<sp/>*<sp/><ref refid="group__nrf__twis__hal_1gaf0bf02ca4afb34709ddcc926a11bf4c1" kindref="member">nrf_twis_rx_buffer_get</ref>(NRF_TWIS_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="794"><highlight class="normal">{</highlight></codeline>
<codeline lineno="795"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_TWIS_HAS_DMA_REG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(uint8_t<sp/>*)p_reg-&gt;DMA.RX.PTR;</highlight></codeline>
<codeline lineno="797"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(uint8_t<sp/>*)p_reg-&gt;RXD.PTR;</highlight></codeline>
<codeline lineno="799"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="800"><highlight class="normal">}</highlight></codeline>
<codeline lineno="801"><highlight class="normal"></highlight></codeline>
<codeline lineno="802"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__twis__hal_1ga72e9082fa44f6fc4d063c344d95c54b4" kindref="member">nrf_twis_rx_prepare</ref>(NRF_TWIS_Type<sp/>*<sp/>p_reg,<sp/>uint8_t<sp/>*<sp/>p_buf,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>length)</highlight></codeline>
<codeline lineno="803"><highlight class="normal">{</highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__twis__hal_1ga2e2fdc81514fe8291222f092a636ec83" kindref="member">nrf_twis_rx_buffer_set</ref>(p_reg,<sp/>p_buf,<sp/>length);</highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__twis__hal_1gac6a70173d85ce7823437ba9f1c8164a9" kindref="member">nrf_twis_task_trigger</ref>(p_reg,<sp/><ref refid="group__nrf__twis__hal_1gga0f9a066f20fa56a413dc549242f56360aeb0d738dfe3ce8e4b5381ded3175eebd" kindref="member">NRF_TWIS_TASK_PREPARERX</ref>);</highlight></codeline>
<codeline lineno="806"><highlight class="normal">}</highlight></codeline>
<codeline lineno="807"><highlight class="normal"></highlight></codeline>
<codeline lineno="808"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="group__nrf__twis__hal_1ga5c9844a79451f11104fafd5dd8159317" kindref="member">nrf_twis_rx_amount_get</ref>(NRF_TWIS_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="809"><highlight class="normal">{</highlight></codeline>
<codeline lineno="810"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_TWIS_HAS_DMA_REG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p_reg-&gt;DMA.RX.AMOUNT;</highlight></codeline>
<codeline lineno="812"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p_reg-&gt;RXD.AMOUNT;</highlight></codeline>
<codeline lineno="814"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="815"><highlight class="normal">}</highlight></codeline>
<codeline lineno="816"><highlight class="normal"></highlight></codeline>
<codeline lineno="817"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__twis__hal_1ga9f1c52a92ce23ad9653bb0476c859630" kindref="member">nrf_twis_tx_buffer_set</ref>(NRF_TWIS_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_buf,</highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>length)</highlight></codeline>
<codeline lineno="820"><highlight class="normal">{</highlight></codeline>
<codeline lineno="821"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_TWIS_HAS_DMA_REG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;DMA.TX.PTR<sp/><sp/><sp/><sp/>=<sp/>(uint32_t)p_buf;</highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;DMA.TX.MAXCNT<sp/>=<sp/>(uint32_t)length;</highlight></codeline>
<codeline lineno="824"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;TXD.PTR<sp/><sp/><sp/><sp/>=<sp/>(uint32_t)p_buf;</highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;TXD.MAXCNT<sp/>=<sp/>length;</highlight></codeline>
<codeline lineno="827"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="828"><highlight class="normal">}</highlight></codeline>
<codeline lineno="829"><highlight class="normal"></highlight></codeline>
<codeline lineno="830"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint8_t<sp/>*<sp/><ref refid="group__nrf__twis__hal_1gaeca28e06a53158a07262f5c83fb1eb61" kindref="member">nrf_twis_tx_buffer_get</ref>(NRF_TWIS_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="831"><highlight class="normal">{</highlight></codeline>
<codeline lineno="832"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_TWIS_HAS_DMA_REG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(uint8_t<sp/>*)p_reg-&gt;DMA.TX.PTR;</highlight></codeline>
<codeline lineno="834"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(uint8_t<sp/>*)p_reg-&gt;TXD.PTR;</highlight></codeline>
<codeline lineno="836"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="837"><highlight class="normal">}</highlight></codeline>
<codeline lineno="838"><highlight class="normal"></highlight></codeline>
<codeline lineno="839"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__twis__hal_1gadd3057b0a9b02a00e0c6fa15697bbf26" kindref="member">nrf_twis_tx_prepare</ref>(NRF_TWIS_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_buf,</highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>length)</highlight></codeline>
<codeline lineno="842"><highlight class="normal">{</highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__twis__hal_1ga9f1c52a92ce23ad9653bb0476c859630" kindref="member">nrf_twis_tx_buffer_set</ref>(p_reg,<sp/>p_buf,<sp/>length);</highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__twis__hal_1gac6a70173d85ce7823437ba9f1c8164a9" kindref="member">nrf_twis_task_trigger</ref>(p_reg,<sp/><ref refid="group__nrf__twis__hal_1gga0f9a066f20fa56a413dc549242f56360a6af25e21181c33b78253d061d110d59c" kindref="member">NRF_TWIS_TASK_PREPARETX</ref>);</highlight></codeline>
<codeline lineno="845"><highlight class="normal">}</highlight></codeline>
<codeline lineno="846"><highlight class="normal"></highlight></codeline>
<codeline lineno="847"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="group__nrf__twis__hal_1ga686637d3b10e2df8cbeda813ff649c13" kindref="member">nrf_twis_tx_amount_get</ref>(NRF_TWIS_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="848"><highlight class="normal">{</highlight></codeline>
<codeline lineno="849"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_TWIS_HAS_DMA_REG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="850"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p_reg-&gt;DMA.TX.AMOUNT;</highlight></codeline>
<codeline lineno="851"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p_reg-&gt;TXD.AMOUNT;</highlight></codeline>
<codeline lineno="853"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="854"><highlight class="normal">}</highlight></codeline>
<codeline lineno="855"><highlight class="normal"></highlight></codeline>
<codeline lineno="856"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__twis__hal_1ga197d0cf5d35cd5ecaf8303fd979278d1" kindref="member">nrf_twis_address_set</ref>(NRF_TWIS_Type<sp/>*<sp/><sp/><sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint_fast8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/>n,</highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__twis__hal_1gab3ec17f227b682bb63a6ca3b8bf78d8f" kindref="member">nrf_twis_address_t</ref><sp/>addr)</highlight></codeline>
<codeline lineno="859"><highlight class="normal">{</highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__glue_1ga9698a3f6b6bea455d2b54a79e514ee36" kindref="member">NRFX_ASSERT</ref>((uint32_t)addr<sp/>&lt;=<sp/>TWIS_ADDRESS_ADDRESS_Msk);</highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;ADDRESS[n]<sp/>=<sp/>(uint32_t)addr;</highlight></codeline>
<codeline lineno="862"><highlight class="normal">}</highlight></codeline>
<codeline lineno="863"><highlight class="normal"></highlight></codeline>
<codeline lineno="864"><highlight class="normal">NRF_STATIC_INLINE<sp/><ref refid="group__nrf__twis__hal_1gab3ec17f227b682bb63a6ca3b8bf78d8f" kindref="member">nrf_twis_address_t</ref><sp/><ref refid="group__nrf__twis__hal_1gabe997aa5bae79862961e60fc49a9ffa7" kindref="member">nrf_twis_address_get</ref>(NRF_TWIS_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="865"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint_fast8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n)</highlight></codeline>
<codeline lineno="866"><highlight class="normal">{</highlight></codeline>
<codeline lineno="867"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="group__nrf__twis__hal_1gab3ec17f227b682bb63a6ca3b8bf78d8f" kindref="member">nrf_twis_address_t</ref>)p_reg-&gt;ADDRESS[n];</highlight></codeline>
<codeline lineno="868"><highlight class="normal">}</highlight></codeline>
<codeline lineno="869"><highlight class="normal"></highlight></codeline>
<codeline lineno="870"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__twis__hal_1ga6651956e1198c3efc3fe692f4e242e3e" kindref="member">nrf_twis_config_address_set</ref>(NRF_TWIS_Type<sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="871"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__twis__hal_1gae8b5a6d6e1ae57daec594f73b19092b1" kindref="member">nrf_twis_config_addr_mask_t</ref><sp/>addr_mask)</highlight></codeline>
<codeline lineno="872"><highlight class="normal">{</highlight></codeline>
<codeline lineno="873"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>This<sp/>is<sp/>the<sp/>only<sp/>configuration<sp/>in<sp/>TWIS<sp/>-<sp/>just<sp/>write<sp/>it<sp/>without<sp/>masking.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="874"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;CONFIG<sp/>=<sp/>(uint32_t)addr_mask;</highlight></codeline>
<codeline lineno="875"><highlight class="normal">}</highlight></codeline>
<codeline lineno="876"><highlight class="normal"></highlight></codeline>
<codeline lineno="877"><highlight class="normal">NRF_STATIC_INLINE</highlight></codeline>
<codeline lineno="878"><highlight class="normal"><ref refid="group__nrf__twis__hal_1gae8b5a6d6e1ae57daec594f73b19092b1" kindref="member">nrf_twis_config_addr_mask_t</ref><sp/><ref refid="group__nrf__twis__hal_1ga097263f9bee26541a91ea928d39f3fc7" kindref="member">nrf_twis_config_address_get</ref>(NRF_TWIS_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="879"><highlight class="normal">{</highlight></codeline>
<codeline lineno="880"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="group__nrf__twis__hal_1gae8b5a6d6e1ae57daec594f73b19092b1" kindref="member">nrf_twis_config_addr_mask_t</ref>)(p_reg-&gt;CONFIG<sp/>&amp;<sp/><ref refid="group__nrf__twis__hal_1ggae8b5a6d6e1ae57daec594f73b19092b1affbb86eb76e4d96a629fc47931933e4f" kindref="member">NRF_TWIS_CONFIG_ADDRESS01_MASK</ref>);</highlight></codeline>
<codeline lineno="881"><highlight class="normal">}</highlight></codeline>
<codeline lineno="882"><highlight class="normal"></highlight></codeline>
<codeline lineno="883"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__twis__hal_1ga61982ea97228eadbd76475eb8ee3817d" kindref="member">nrf_twis_orc_set</ref>(NRF_TWIS_Type<sp/>*<sp/>p_reg,<sp/>uint8_t<sp/>orc)</highlight></codeline>
<codeline lineno="884"><highlight class="normal">{</highlight></codeline>
<codeline lineno="885"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;ORC<sp/>=<sp/>orc;</highlight></codeline>
<codeline lineno="886"><highlight class="normal">}</highlight></codeline>
<codeline lineno="887"><highlight class="normal"></highlight></codeline>
<codeline lineno="888"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint8_t<sp/><ref refid="group__nrf__twis__hal_1ga2641893e0f099994aa21c8c6591087e5" kindref="member">nrf_twis_orc_get</ref>(NRF_TWIS_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="889"><highlight class="normal">{</highlight></codeline>
<codeline lineno="890"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(uint8_t)p_reg-&gt;ORC;</highlight></codeline>
<codeline lineno="891"><highlight class="normal">}</highlight></codeline>
<codeline lineno="892"><highlight class="normal"></highlight></codeline>
<codeline lineno="893"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_TWIS_HAS_LIST_REG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="894"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__twis__hal_1ga97194ea3b9da36122bb7b4c49916ab53" kindref="member">nrf_twis_tx_list_enable</ref>(NRF_TWIS_Type<sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="895"><highlight class="normal">{</highlight></codeline>
<codeline lineno="896"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;TXD.LIST<sp/>=<sp/>TWIS_TXD_LIST_LIST_ArrayList<sp/>&lt;&lt;<sp/>TWIS_TXD_LIST_LIST_Pos;</highlight></codeline>
<codeline lineno="897"><highlight class="normal">}</highlight></codeline>
<codeline lineno="898"><highlight class="normal"></highlight></codeline>
<codeline lineno="899"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__twis__hal_1gaa1f3a75c8c3ba7c65dc6407b8e462328" kindref="member">nrf_twis_tx_list_disable</ref>(NRF_TWIS_Type<sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="900"><highlight class="normal">{</highlight></codeline>
<codeline lineno="901"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;TXD.LIST<sp/>=<sp/>TWIS_TXD_LIST_LIST_Disabled<sp/>&lt;&lt;<sp/>TWIS_TXD_LIST_LIST_Pos;</highlight></codeline>
<codeline lineno="902"><highlight class="normal">}</highlight></codeline>
<codeline lineno="903"><highlight class="normal"></highlight></codeline>
<codeline lineno="904"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__twis__hal_1ga04b21362f997c16d1f636b219d8dad3a" kindref="member">nrf_twis_rx_list_enable</ref>(NRF_TWIS_Type<sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="905"><highlight class="normal">{</highlight></codeline>
<codeline lineno="906"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;RXD.LIST<sp/>=<sp/>TWIS_RXD_LIST_LIST_ArrayList<sp/>&lt;&lt;<sp/>TWIS_RXD_LIST_LIST_Pos;</highlight></codeline>
<codeline lineno="907"><highlight class="normal">}</highlight></codeline>
<codeline lineno="908"><highlight class="normal"></highlight></codeline>
<codeline lineno="909"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__twis__hal_1gaae7e48f099010a8c6e6f3c234f157bc7" kindref="member">nrf_twis_rx_list_disable</ref>(NRF_TWIS_Type<sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="910"><highlight class="normal">{</highlight></codeline>
<codeline lineno="911"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;RXD.LIST<sp/>=<sp/>TWIS_RXD_LIST_LIST_Disabled<sp/>&lt;&lt;<sp/>TWIS_RXD_LIST_LIST_Pos;</highlight></codeline>
<codeline lineno="912"><highlight class="normal">}</highlight></codeline>
<codeline lineno="913"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="914"><highlight class="normal"></highlight></codeline>
<codeline lineno="915"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>NRF_DECLARE_ONLY<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="916"><highlight class="normal"></highlight></codeline>
<codeline lineno="917"><highlight class="normal"></highlight></codeline>
<codeline lineno="918"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="919"><highlight class="normal">}</highlight></codeline>
<codeline lineno="920"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="921"><highlight class="normal"></highlight></codeline>
<codeline lineno="922"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>NRF_TWIS_H__<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="hal/nrf_twis.h"/>
  </compounddef>
</doxygen>
