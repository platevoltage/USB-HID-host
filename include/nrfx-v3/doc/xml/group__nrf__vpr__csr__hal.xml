<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="group__nrf__vpr__csr__hal" kind="group">
    <compoundname>nrf_vpr_csr_hal</compoundname>
    <title>VPR CSR HAL</title>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="group__nrf__vpr__csr__hal_1ga5a489f5c9dd05366b4853f03961a8e68" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_vpr_csr_int_threshold_t</name>
        <enumvalue id="group__nrf__vpr__csr__hal_1gga5a489f5c9dd05366b4853f03961a8e68a3d5fb389265e7c1232742d6aeb5f04a8" prot="public">
          <name>NRF_VPR_CSR_INT_THRESHOLD_DISABLED</name>
          <initializer>= VPRCSR_MINTTHRESH_TH_DISABLED</initializer>
          <briefdescription>
<para>Threshold disabled. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__vpr__csr__hal_1gga5a489f5c9dd05366b4853f03961a8e68aacd21bd622d960f0879c83d74a6ec9fb" prot="public">
          <name>NRF_VPR_CSR_INT_THRESHOLD_LEVEL0</name>
          <initializer>= VPRCSR_MINTTHRESH_TH_THRESHLEVEL0</initializer>
          <briefdescription>
<para>Threshold level 0. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__vpr__csr__hal_1gga5a489f5c9dd05366b4853f03961a8e68a3906dbc27e8ef8053e95592f222ed273" prot="public">
          <name>NRF_VPR_CSR_INT_THRESHOLD_LEVEL1</name>
          <initializer>= VPRCSR_MINTTHRESH_TH_THRESHLEVEL1</initializer>
          <briefdescription>
<para>Threshold level 1. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__vpr__csr__hal_1gga5a489f5c9dd05366b4853f03961a8e68a48460faa30c0ce1b7b985b4835b3738b" prot="public">
          <name>NRF_VPR_CSR_INT_THRESHOLD_LEVEL2</name>
          <initializer>= VPRCSR_MINTTHRESH_TH_THRESHLEVEL2</initializer>
          <briefdescription>
<para>Threshold level 2. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__vpr__csr__hal_1gga5a489f5c9dd05366b4853f03961a8e68afc81871bce5749b98333d159030d0aba" prot="public">
          <name>NRF_VPR_CSR_INT_THRESHOLD_LEVEL3</name>
          <initializer>= VPRCSR_MINTTHRESH_TH_THRESHLEVEL3</initializer>
          <briefdescription>
<para>Threshold level 3. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Interrupt threshold levels. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_vpr_csr.h" line="56" column="1" bodyfile="hal/nrf_vpr_csr.h" bodystart="57" bodyend="63"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__vpr__csr__hal_1gacc63c2e15b42da5ad68198b87ca50b67" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_vpr_csr_trap_cause_t</name>
        <enumvalue id="group__nrf__vpr__csr__hal_1ggacc63c2e15b42da5ad68198b87ca50b67a5e8e8519d632d5be2cd0465f77eb87f0" prot="public">
          <name>NRF_VPR_CSR_TRAP_CAUSE_INSTR_ADDR_MISALIGNED</name>
          <initializer>= VPRCSR_MCAUSE_EXCEPTIONCODE_INSTADDRMISALIGN</initializer>
          <briefdescription>
<para>Instruction address misaligned. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__vpr__csr__hal_1ggacc63c2e15b42da5ad68198b87ca50b67a6223cf7f68faa85fcff9a032114ab993" prot="public">
          <name>NRF_VPR_CSR_TRAP_CAUSE_INSTR_ACCESS_FAULT</name>
          <initializer>= VPRCSR_MCAUSE_EXCEPTIONCODE_INSTACCESSFAULT</initializer>
          <briefdescription>
<para>Instruction access fault. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__vpr__csr__hal_1ggacc63c2e15b42da5ad68198b87ca50b67ac62432c9669f1e56fbbcd33ea46d7a2a" prot="public">
          <name>NRF_VPR_CSR_TRAP_CAUSE_INSTR_ILLEGAL</name>
          <initializer>= VPRCSR_MCAUSE_EXCEPTIONCODE_ILLEGALINST</initializer>
          <briefdescription>
<para>Illegal instruction. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__vpr__csr__hal_1ggacc63c2e15b42da5ad68198b87ca50b67a5898aa368b5c6e7e072189511a09e2ec" prot="public">
          <name>NRF_VPR_CSR_TRAP_CAUSE_BREAKPOINT</name>
          <initializer>= VPRCSR_MCAUSE_EXCEPTIONCODE_BKPT</initializer>
          <briefdescription>
<para>Breakpoint. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__vpr__csr__hal_1ggacc63c2e15b42da5ad68198b87ca50b67adc5bf3f1fa9105e25260d48571b10e1a" prot="public">
          <name>NRF_VPR_CSR_TRAP_CAUSE_LOAD_ADDR_MISALIGNED</name>
          <initializer>= VPRCSR_MCAUSE_EXCEPTIONCODE_LOADADDRMISALIGN</initializer>
          <briefdescription>
<para>Load address misaligned. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__vpr__csr__hal_1ggacc63c2e15b42da5ad68198b87ca50b67a392358c0fddb5b0a524bf746c615a6d2" prot="public">
          <name>NRF_VPR_CSR_TRAP_CAUSE_LOAD_ACCESS_FAULT</name>
          <initializer>= VPRCSR_MCAUSE_EXCEPTIONCODE_LOADACCESSFAULT</initializer>
          <briefdescription>
<para>Load access fault. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__vpr__csr__hal_1ggacc63c2e15b42da5ad68198b87ca50b67afeff081147d47088f80641b96bb9c2f5" prot="public">
          <name>NRF_VPR_CSR_TRAP_CAUSE_STORE_ADDR_MISALIGNED</name>
          <initializer>= VPRCSR_MCAUSE_EXCEPTIONCODE_STOREADDRMISALIGN</initializer>
          <briefdescription>
<para>Store/AMO address misaligned. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__vpr__csr__hal_1ggacc63c2e15b42da5ad68198b87ca50b67af2b862aca206781f5b13f77414ebaa2b" prot="public">
          <name>NRF_VPR_CSR_TRAP_CAUSE_STORE_ACCESS_FAULT</name>
          <initializer>= VPRCSR_MCAUSE_EXCEPTIONCODE_STOREACCESSFAULT</initializer>
          <briefdescription>
<para>Store/AMO access misaligned. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__vpr__csr__hal_1ggacc63c2e15b42da5ad68198b87ca50b67aa49c3078ba8e770f5ce77a971ce7b2b6" prot="public">
          <name>NRF_VPR_CSR_TRAP_CAUSE_ECALL_M</name>
          <initializer>= VPRCSR_MCAUSE_EXCEPTIONCODE_ECALLMMODE</initializer>
          <briefdescription>
<para>Environment call M-mode. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__vpr__csr__hal_1ggacc63c2e15b42da5ad68198b87ca50b67a0b25ce51d53fb1ce577c24b84495cc2a" prot="public">
          <name>NRF_VPR_CSR_TRAP_CAUSE_STACKING_BUS_FAULT</name>
          <initializer>= VPRCSR_MCAUSE_EXCEPTIONCODE_BUSFAULTSTACKING</initializer>
          <briefdescription>
<para>Bus fault on stacking. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__vpr__csr__hal_1ggacc63c2e15b42da5ad68198b87ca50b67a6e25429a927e3be5d27ccb03a0e797ae" prot="public">
          <name>NRF_VPR_CSR_TRAP_CAUSE_STACKING_UNALIGNED</name>
          <initializer>= VPRCSR_MCAUSE_EXCEPTIONCODE_MISALIGNSTACKING</initializer>
          <briefdescription>
<para>Misaligned Stacking. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__vpr__csr__hal_1ggacc63c2e15b42da5ad68198b87ca50b67a3b30f7c53d8635be59c45f79ef103415" prot="public">
          <name>NRF_VPR_CSR_TRAP_CAUSE_VECTOR_FAULT</name>
          <initializer>= VPRCSR_MCAUSE_EXCEPTIONCODE_INTVECTORFAULT</initializer>
          <briefdescription>
<para>Interrupt Vector Fault. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__vpr__csr__hal_1ggacc63c2e15b42da5ad68198b87ca50b67a1b6ec9ff4545628811f93e1274d72a6e" prot="public">
          <name>NRF_VPR_CSR_TRAP_CAUSE_STACKING_UNALIGNED_EX</name>
          <initializer>= VPRCSR_MCAUSE_EXCEPTIONCODE_STACKINGEXCFAULT</initializer>
          <briefdescription>
<para>Fault on Exception Stacking. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__vpr__csr__hal_1ggacc63c2e15b42da5ad68198b87ca50b67a0d5fb9e26a41b834ae7ad8964ef2c078" prot="public">
          <name>NRF_VPR_CSR_TRAP_CAUSE_UNSTACKING_UNALIGNED</name>
          <initializer>= VPRCSR_MCAUSE_EXCEPTIONCODE_MISALIGNUNSTACKING</initializer>
          <briefdescription>
<para>Misaligned Unstacking. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__vpr__csr__hal_1ggacc63c2e15b42da5ad68198b87ca50b67a0cf7e90486c554c995ed7ae1566ea5b6" prot="public">
          <name>NRF_VPR_CSR_TRAP_CAUSE_UNSTACKING_BUS_FAULT</name>
          <initializer>= VPRCSR_MCAUSE_EXCEPTIONCODE_BUSFAULTUNSTACKING</initializer>
          <briefdescription>
<para>Bus fault on unstacking. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__vpr__csr__hal_1ggacc63c2e15b42da5ad68198b87ca50b67a7d583d75679b414411bbd303767491ac" prot="public">
          <name>NRF_VPR_CSR_TRAP_CAUSE_STORE_TIMEOUT_FAULT</name>
          <initializer>= VPRCSR_MCAUSE_EXCEPTIONCODE_STORETIMEOUTFAULT</initializer>
          <briefdescription>
<para>Store timeout fault. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__vpr__csr__hal_1ggacc63c2e15b42da5ad68198b87ca50b67acce3314f63784fe86a20630df427c46b" prot="public">
          <name>NRF_VPR_CSR_TRAP_CAUSE_LOAD_TIMEOUT_FAULT</name>
          <initializer>= VPRCSR_MCAUSE_EXCEPTIONCODE_LOADTIMEOUTFAULT</initializer>
          <briefdescription>
<para>Load timeout fault. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Trap causes. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_vpr_csr.h" line="66" column="1" bodyfile="hal/nrf_vpr_csr.h" bodystart="67" bodyend="85"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__vpr__csr__hal_1gafef64352097ea118be88599515fbfc79" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_vpr_csr_sleep_state_t</name>
        <enumvalue id="group__nrf__vpr__csr__hal_1ggafef64352097ea118be88599515fbfc79aa75e51af21c82be67e56af33cab69786" prot="public">
          <name>NRF_VPR_CSR_SLEEP_STATE_WAIT</name>
          <initializer>= VPRCSR_NORDIC_VPRNORDICSLEEPCTRL_SLEEPSTATE_WAIT</initializer>
          <briefdescription>
<para>During sleep, clock is not turned off. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__vpr__csr__hal_1ggafef64352097ea118be88599515fbfc79aa4def5a9eead7d2bc6bce2c1528f8c70" prot="public">
          <name>NRF_VPR_CSR_SLEEP_STATE_RESET</name>
          <initializer>= VPRCSR_NORDIC_VPRNORDICSLEEPCTRL_SLEEPSTATE_RESET</initializer>
          <briefdescription>
<para>Sleep mode out of reset. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__vpr__csr__hal_1ggafef64352097ea118be88599515fbfc79a5f1163beb1bba96417adea42c567430b" prot="public">
          <name>NRF_VPR_CSR_SLEEP_STATE_SLEEP</name>
          <initializer>= VPRCSR_NORDIC_VPRNORDICSLEEPCTRL_SLEEPSTATE_SLEEP</initializer>
          <briefdescription>
<para>During sleep, clock is turned off. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__vpr__csr__hal_1ggafef64352097ea118be88599515fbfc79a3c840a75af92fb6f9dcb3af67739c414" prot="public">
          <name>NRF_VPR_CSR_SLEEP_STATE_DEEP_SLEEP</name>
          <initializer>= VPRCSR_NORDIC_VPRNORDICSLEEPCTRL_SLEEPSTATE_DEEPSLEEP</initializer>
          <briefdescription>
<para>During sleep, clock and power are turned off. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__vpr__csr__hal_1ggafef64352097ea118be88599515fbfc79a22e877037d56690cb1e753665fa191c9" prot="public">
          <name>NRF_VPR_CSR_SLEEP_STATE_HIBERNATE</name>
          <initializer>= VPRCSR_NORDIC_VPRNORDICSLEEPCTRL_SLEEPSTATE_HIBERNATE</initializer>
          <briefdescription>
<para>During sleep, clock is turned off. All the registers are saved automatically. Restart by a reset. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Sleep states. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_vpr_csr.h" line="88" column="1" bodyfile="hal/nrf_vpr_csr.h" bodystart="89" bodyend="95"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__nrf__vpr__csr__hal_1ga4d227b47e648efbad434f580e41c6bbc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_vpr_csr_machine_interrupts_enable</definition>
        <argsstring>(void)</argsstring>
        <name>nrf_vpr_csr_machine_interrupts_enable</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Function for enabling the interrupts in machine mode. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_vpr_csr.h" line="320" column="24" bodyfile="hal/nrf_vpr_csr.h" bodystart="320" bodyend="323" declfile="hal/nrf_vpr_csr.h" declline="98" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__vpr__csr__hal_1ga4e2eafd2cbdf4ab1193d80e1215832ac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_vpr_csr_machine_interrupts_disable</definition>
        <argsstring>(void)</argsstring>
        <name>nrf_vpr_csr_machine_interrupts_disable</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Function for disabling the interrupts in machine mode. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_vpr_csr.h" line="325" column="24" bodyfile="hal/nrf_vpr_csr.h" bodystart="325" bodyend="328" declfile="hal/nrf_vpr_csr.h" declline="101" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__vpr__csr__hal_1ga6a0d0450d80b65df870c0163c6b95298" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE bool</type>
        <definition>NRF_STATIC_INLINE bool nrf_vpr_csr_machine_interrupts_check</definition>
        <argsstring>(void)</argsstring>
        <name>nrf_vpr_csr_machine_interrupts_check</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Function for checking whether interrupts are enabled in machine mode. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>Interrupts are enabled. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>Interrupts are disabled. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_vpr_csr.h" line="330" column="24" bodyfile="hal/nrf_vpr_csr.h" bodystart="330" bodyend="333" declfile="hal/nrf_vpr_csr.h" declline="109" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__vpr__csr__hal_1ga3e21a4e0f8dda772f7804711dbdcc2f7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_vpr_csr_machine_trap_vector_table_addr_set</definition>
        <argsstring>(uint32_t address)</argsstring>
        <name>nrf_vpr_csr_machine_trap_vector_table_addr_set</name>
        <param>
          <type>uint32_t</type>
          <declname>address</declname>
        </param>
        <briefdescription>
<para>Function for setting the base address of trap vector table. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">address</parametername>
</parameternamelist>
<parameterdescription>
<para>Machine trap vector table base address to be set. Has to be aligned on 64-byte or greater power-of-two boundary. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_vpr_csr.h" line="335" column="24" bodyfile="hal/nrf_vpr_csr.h" bodystart="335" bodyend="340" declfile="hal/nrf_vpr_csr.h" declline="117" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__vpr__csr__hal_1ga9e3ae13c1cf007efac26ffe6370900ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_vpr_csr_machine_trap_vector_table_addr_get</definition>
        <argsstring>(void)</argsstring>
        <name>nrf_vpr_csr_machine_trap_vector_table_addr_get</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Function for getting the machine trap vector table base address. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Machine trap vector table base address. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_vpr_csr.h" line="342" column="28" bodyfile="hal/nrf_vpr_csr.h" bodystart="342" bodyend="345" declfile="hal/nrf_vpr_csr.h" declline="124" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__vpr__csr__hal_1gaeb121df8116e12e2c73ed35e8f9175fa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_vpr_csr_machine_exception_pc_get</definition>
        <argsstring>(void)</argsstring>
        <name>nrf_vpr_csr_machine_exception_pc_get</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Function for getting the machine exception program counter. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Virtual address of the instruction that was interrupted or that encountered the exception. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_vpr_csr.h" line="347" column="28" bodyfile="hal/nrf_vpr_csr.h" bodystart="347" bodyend="350" declfile="hal/nrf_vpr_csr.h" declline="131" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__vpr__csr__hal_1ga1257cb94feed99dadba196376913b1b2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE <ref refid="group__nrf__vpr__csr__hal_1gacc63c2e15b42da5ad68198b87ca50b67" kindref="member">nrf_vpr_csr_trap_cause_t</ref></type>
        <definition>NRF_STATIC_INLINE nrf_vpr_csr_trap_cause_t nrf_vpr_csr_machine_trap_cause_code_get</definition>
        <argsstring>(void)</argsstring>
        <name>nrf_vpr_csr_machine_trap_cause_code_get</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Function for getting the machine trap cause exception code. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Exception code. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_vpr_csr.h" line="352" column="44" bodyfile="hal/nrf_vpr_csr.h" bodystart="352" bodyend="357" declfile="hal/nrf_vpr_csr.h" declline="138" declcolumn="44"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__vpr__csr__hal_1gac51065c53920bf97d7a065e19c785a35" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE bool</type>
        <definition>NRF_STATIC_INLINE bool nrf_vpr_csr_machine_trap_interrupt_check</definition>
        <argsstring>(void)</argsstring>
        <name>nrf_vpr_csr_machine_trap_interrupt_check</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Function for checking the state of the interrupt bit for machine trap. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>Trap was caused by an interrupt. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>Trap was not caused by an interrupt. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_vpr_csr.h" line="359" column="24" bodyfile="hal/nrf_vpr_csr.h" bodystart="359" bodyend="362" declfile="hal/nrf_vpr_csr.h" declline="146" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__vpr__csr__hal_1gaa4f4dc9075b3891b049d9ab2072ef5c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_vpr_csr_machine_trap_value_get</definition>
        <argsstring>(void)</argsstring>
        <name>nrf_vpr_csr_machine_trap_value_get</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Function for getting the machine trap value. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Exception-specific information. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_vpr_csr.h" line="364" column="28" bodyfile="hal/nrf_vpr_csr.h" bodystart="364" bodyend="367" declfile="hal/nrf_vpr_csr.h" declline="153" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__vpr__csr__hal_1ga39fd48bd7f2dc491ba45cfc9ef54d274" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_vpr_csr_machine_interrupt_threshold_set</definition>
        <argsstring>(nrf_vpr_csr_int_threshold_t th)</argsstring>
        <name>nrf_vpr_csr_machine_interrupt_threshold_set</name>
        <param>
          <type><ref refid="group__nrf__vpr__csr__hal_1ga5a489f5c9dd05366b4853f03961a8e68" kindref="member">nrf_vpr_csr_int_threshold_t</ref></type>
          <declname>th</declname>
        </param>
        <briefdescription>
<para>Function for setting the machine mode interrupt level threshold. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">th</parametername>
</parameternamelist>
<parameterdescription>
<para>Machine mode interrupt level threshold to be set. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_vpr_csr.h" line="369" column="24" bodyfile="hal/nrf_vpr_csr.h" bodystart="369" bodyend="372" declfile="hal/nrf_vpr_csr.h" declline="160" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__vpr__csr__hal_1gac50e976558e8ac13e5edd2b7f93e3e73" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE <ref refid="group__nrf__vpr__csr__hal_1ga5a489f5c9dd05366b4853f03961a8e68" kindref="member">nrf_vpr_csr_int_threshold_t</ref></type>
        <definition>NRF_STATIC_INLINE nrf_vpr_csr_int_threshold_t nrf_vpr_csr_machine_interrupt_threshold_get</definition>
        <argsstring>(void)</argsstring>
        <name>nrf_vpr_csr_machine_interrupt_threshold_get</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Function for getting the machine mode interrupt level threshold. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Machine mode interrupt level threshold. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_vpr_csr.h" line="374" column="47" bodyfile="hal/nrf_vpr_csr.h" bodystart="374" bodyend="377" declfile="hal/nrf_vpr_csr.h" declline="167" declcolumn="47"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__vpr__csr__hal_1ga9ace52d02873e1cdfb917a75c1ec7ce6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_vpr_csr_machine_cycle_counter_enable_set</definition>
        <argsstring>(bool enable)</argsstring>
        <name>nrf_vpr_csr_machine_cycle_counter_enable_set</name>
        <param>
          <type>bool</type>
          <declname>enable</declname>
        </param>
        <briefdescription>
<para>Function for enabling or disabling the Cycle Counter. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">enable</parametername>
</parameternamelist>
<parameterdescription>
<para>True if Cycle Counter is to be enabled, false otherwise. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_vpr_csr.h" line="379" column="24" bodyfile="hal/nrf_vpr_csr.h" bodystart="379" bodyend="388" declfile="hal/nrf_vpr_csr.h" declline="174" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__vpr__csr__hal_1gacc37e82ae52d1e0c773aec9ce2feb224" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE bool</type>
        <definition>NRF_STATIC_INLINE bool nrf_vpr_csr_machine_cycle_counter_enable_check</definition>
        <argsstring>(void)</argsstring>
        <name>nrf_vpr_csr_machine_cycle_counter_enable_check</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Function for checking whether the Cycle Counter is enabled. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>Cycle counter is enabled. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>Cycle counter is disabled. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_vpr_csr.h" line="390" column="24" bodyfile="hal/nrf_vpr_csr.h" bodystart="390" bodyend="395" declfile="hal/nrf_vpr_csr.h" declline="182" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__vpr__csr__hal_1ga31b1cbec0ae6d61d7dddaf037737510f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint64_t</type>
        <definition>NRF_STATIC_INLINE uint64_t nrf_vpr_csr_machine_cycle_counter_get</definition>
        <argsstring>(void)</argsstring>
        <name>nrf_vpr_csr_machine_cycle_counter_get</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Function for getting the machine cycle counter. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Number of clock cycles executed by the processor core. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_vpr_csr.h" line="397" column="28" bodyfile="hal/nrf_vpr_csr.h" bodystart="397" bodyend="400" declfile="hal/nrf_vpr_csr.h" declline="189" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__vpr__csr__hal_1ga5dce54f098deb1999bb09b85e20a0d93" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_vpr_csr_machine_instruction_counter_enable_set</definition>
        <argsstring>(bool enable)</argsstring>
        <name>nrf_vpr_csr_machine_instruction_counter_enable_set</name>
        <param>
          <type>bool</type>
          <declname>enable</declname>
        </param>
        <briefdescription>
<para>Function for enabling or disabling the Instruction Counter. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">enable</parametername>
</parameternamelist>
<parameterdescription>
<para>True if Instruction Counter is to be enabled, false otherwise. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_vpr_csr.h" line="402" column="24" bodyfile="hal/nrf_vpr_csr.h" bodystart="402" bodyend="411" declfile="hal/nrf_vpr_csr.h" declline="196" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__vpr__csr__hal_1gab9873e1a0f12bb4d0134399c23f236c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE bool</type>
        <definition>NRF_STATIC_INLINE bool nrf_vpr_csr_machine_instruction_counter_enable_check</definition>
        <argsstring>(void)</argsstring>
        <name>nrf_vpr_csr_machine_instruction_counter_enable_check</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Function for checking whether the Instruction Counter is enabled. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>Instruction counter is enabled. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>Instruction counter is disabled. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_vpr_csr.h" line="413" column="24" bodyfile="hal/nrf_vpr_csr.h" bodystart="413" bodyend="418" declfile="hal/nrf_vpr_csr.h" declline="204" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__vpr__csr__hal_1gafb6fb029a028961eb5504bb5e0952527" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint64_t</type>
        <definition>NRF_STATIC_INLINE uint64_t nrf_vpr_csr_machine_instruction_counter_get</definition>
        <argsstring>(void)</argsstring>
        <name>nrf_vpr_csr_machine_instruction_counter_get</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Function for getting the machine instruction counter. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Number of instructions exectuted by the processor. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_vpr_csr.h" line="420" column="28" bodyfile="hal/nrf_vpr_csr.h" bodystart="420" bodyend="423" declfile="hal/nrf_vpr_csr.h" declline="210" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__vpr__csr__hal_1ga89124521c55e1b2a7f7199e9a0238862" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_vpr_csr_rtperiph_enable_set</definition>
        <argsstring>(bool enable)</argsstring>
        <name>nrf_vpr_csr_rtperiph_enable_set</name>
        <param>
          <type>bool</type>
          <declname>enable</declname>
        </param>
        <briefdescription>
<para>Function for enabling or disabling the Real-Time Peripherals. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">enable</parametername>
</parameternamelist>
<parameterdescription>
<para>True if RT Perhiperals are to be enabled, false otherwise. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_vpr_csr.h" line="425" column="24" bodyfile="hal/nrf_vpr_csr.h" bodystart="425" bodyend="435" declfile="hal/nrf_vpr_csr.h" declline="217" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__vpr__csr__hal_1gac6ed7c42cb570cff4f8ca72f3c71ee69" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE bool</type>
        <definition>NRF_STATIC_INLINE bool nrf_vpr_csr_rtperiph_enable_check</definition>
        <argsstring>(void)</argsstring>
        <name>nrf_vpr_csr_rtperiph_enable_check</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Function for checking whether the Real-Time Peripherals are enabled. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>RT Peripherals are enabled. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>RT Peripherals are disabled. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_vpr_csr.h" line="437" column="24" bodyfile="hal/nrf_vpr_csr.h" bodystart="437" bodyend="441" declfile="hal/nrf_vpr_csr.h" declline="225" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__vpr__csr__hal_1ga456f7ae39591639514d7677f82ed811a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_vpr_csr_cnt_irq_enable_set</definition>
        <argsstring>(bool enable)</argsstring>
        <name>nrf_vpr_csr_cnt_irq_enable_set</name>
        <param>
          <type>bool</type>
          <declname>enable</declname>
        </param>
        <briefdescription>
<para>Function for enabling or disabling the generation of IRQ at position CNT_IRQ_POSITION. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">enable</parametername>
</parameternamelist>
<parameterdescription>
<para>True if generation of IRQ at position CNT_IRQ_POSITION is to be enabled, false otherwise. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_vpr_csr.h" line="443" column="24" bodyfile="hal/nrf_vpr_csr.h" bodystart="443" bodyend="453" declfile="hal/nrf_vpr_csr.h" declline="232" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__vpr__csr__hal_1ga877675bbb1fc9acf8cbce1d3a4e44a0e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE bool</type>
        <definition>NRF_STATIC_INLINE bool nrf_vpr_csr_cnt_irq_enable_check</definition>
        <argsstring>(void)</argsstring>
        <name>nrf_vpr_csr_cnt_irq_enable_check</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Function for checking whether the generation of IRQ at position CNT_IRQ_POSITION is enabled. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>Generation of IRQ is enabled. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>Generation of IRQ is disabled. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_vpr_csr.h" line="455" column="24" bodyfile="hal/nrf_vpr_csr.h" bodystart="455" bodyend="459" declfile="hal/nrf_vpr_csr.h" declline="240" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__vpr__csr__hal_1ga944f6bbfba5c507fe3445863bfdf9ad1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_vpr_csr_sleep_state_set</definition>
        <argsstring>(nrf_vpr_csr_sleep_state_t state)</argsstring>
        <name>nrf_vpr_csr_sleep_state_set</name>
        <param>
          <type><ref refid="group__nrf__vpr__csr__hal_1gafef64352097ea118be88599515fbfc79" kindref="member">nrf_vpr_csr_sleep_state_t</ref></type>
          <declname>state</declname>
        </param>
        <briefdescription>
<para>Function for setting the sleep state. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">state</parametername>
</parameternamelist>
<parameterdescription>
<para>Sleep state to be set. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_vpr_csr.h" line="461" column="24" bodyfile="hal/nrf_vpr_csr.h" bodystart="461" bodyend="468" declfile="hal/nrf_vpr_csr.h" declline="247" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__vpr__csr__hal_1ga7549c7d81b290f455fdcaa7c079661ec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE <ref refid="group__nrf__vpr__csr__hal_1gafef64352097ea118be88599515fbfc79" kindref="member">nrf_vpr_csr_sleep_state_t</ref></type>
        <definition>NRF_STATIC_INLINE nrf_vpr_csr_sleep_state_t nrf_vpr_csr_sleep_state_get</definition>
        <argsstring>(void)</argsstring>
        <name>nrf_vpr_csr_sleep_state_get</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Function for getting the sleep state. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Current sleep state. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_vpr_csr.h" line="470" column="45" bodyfile="hal/nrf_vpr_csr.h" bodystart="470" bodyend="475" declfile="hal/nrf_vpr_csr.h" declline="254" declcolumn="45"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__vpr__csr__hal_1ga11b70347f6a4d16c24d1e61119eff6b7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_vpr_csr_return_to_sleep_set</definition>
        <argsstring>(bool enable)</argsstring>
        <name>nrf_vpr_csr_return_to_sleep_set</name>
        <param>
          <type>bool</type>
          <declname>enable</declname>
        </param>
        <briefdescription>
<para>Function for enabling or disabling the return to sleep functionality. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">enable</parametername>
</parameternamelist>
<parameterdescription>
<para>True if CPU should be forced to return to sleep when it returns in a non-handler program, false otherwise. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_vpr_csr.h" line="477" column="24" bodyfile="hal/nrf_vpr_csr.h" bodystart="477" bodyend="486" declfile="hal/nrf_vpr_csr.h" declline="262" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__vpr__csr__hal_1ga8b678487a98388822d167bae7e5f69ba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE bool</type>
        <definition>NRF_STATIC_INLINE bool nrf_vpr_csr_return_to_sleep_check</definition>
        <argsstring>(void)</argsstring>
        <name>nrf_vpr_csr_return_to_sleep_check</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Function for checking whether the return to sleep functionality is enabled. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>Return to sleep functionality is enabled. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>Return to sleep functionality is disabled. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_vpr_csr.h" line="488" column="24" bodyfile="hal/nrf_vpr_csr.h" bodystart="488" bodyend="493" declfile="hal/nrf_vpr_csr.h" declline="270" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__vpr__csr__hal_1gac3833b70344c2c9d9c26ca2b0dde4478" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_vpr_csr_stack_on_sleep_set</definition>
        <argsstring>(bool enable)</argsstring>
        <name>nrf_vpr_csr_stack_on_sleep_set</name>
        <param>
          <type>bool</type>
          <declname>enable</declname>
        </param>
        <briefdescription>
<para>Function for enabling or disabling the stack on sleep functionality. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">enable</parametername>
</parameternamelist>
<parameterdescription>
<para>True if CPU should be forced to stack the context before going to sleep (used in order to have a fast wake-up), false otherwise. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_vpr_csr.h" line="495" column="24" bodyfile="hal/nrf_vpr_csr.h" bodystart="495" bodyend="504" declfile="hal/nrf_vpr_csr.h" declline="278" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__vpr__csr__hal_1ga142b7d445f6fd709082fa05504114082" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE bool</type>
        <definition>NRF_STATIC_INLINE bool nrf_vpr_csr_stack_on_sleep_check</definition>
        <argsstring>(void)</argsstring>
        <name>nrf_vpr_csr_stack_on_sleep_check</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Function for checking whether the stack on sleep functionality is enabled. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>Stack on sleep functionality is enabled. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>Stack on sleep functionality is disabled. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_vpr_csr.h" line="506" column="24" bodyfile="hal/nrf_vpr_csr.h" bodystart="506" bodyend="511" declfile="hal/nrf_vpr_csr.h" declline="286" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__vpr__csr__hal_1ga1d5bce98e041ca93055b62e25fba56f8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_vpr_csr_clic_round_robin_set</definition>
        <argsstring>(bool enable)</argsstring>
        <name>nrf_vpr_csr_clic_round_robin_set</name>
        <param>
          <type>bool</type>
          <declname>enable</declname>
        </param>
        <briefdescription>
<para>Function for enabling or disabling the CLIC round robin arbitration. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">enable</parametername>
</parameternamelist>
<parameterdescription>
<para>True if round robin arbitration should be used for CLIC interrupt requests, false otherwise. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_vpr_csr.h" line="513" column="24" bodyfile="hal/nrf_vpr_csr.h" bodystart="513" bodyend="523" declfile="hal/nrf_vpr_csr.h" declline="294" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__vpr__csr__hal_1ga90f06e25db1fafb5a87dbcfc1770ac55" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE bool</type>
        <definition>NRF_STATIC_INLINE bool nrf_vpr_csr_clic_round_robin_check</definition>
        <argsstring>(void)</argsstring>
        <name>nrf_vpr_csr_clic_round_robin_check</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Function for checking whether the CLIC round robin arbitration is enabled. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>CLIC round robin arbitration is enabled. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>CLIC round robin arbitration is disabled. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_vpr_csr.h" line="525" column="24" bodyfile="hal/nrf_vpr_csr.h" bodystart="525" bodyend="531" declfile="hal/nrf_vpr_csr.h" declline="302" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__vpr__csr__hal_1gadf3d446c294ad0e82f868292f41e7b9a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_vpr_csr_unrecoverable_return_set</definition>
        <argsstring>(bool enable)</argsstring>
        <name>nrf_vpr_csr_unrecoverable_return_set</name>
        <param>
          <type>bool</type>
          <declname>enable</declname>
        </param>
        <briefdescription>
<para>Function for enabling or disabling the unrecoverable return functionality. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">enable</parametername>
</parameternamelist>
<parameterdescription>
<para>True if unrecoverable return from exception is to be forced, false otherwise. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_vpr_csr.h" line="533" column="24" bodyfile="hal/nrf_vpr_csr.h" bodystart="533" bodyend="543" declfile="hal/nrf_vpr_csr.h" declline="309" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__vpr__csr__hal_1ga1102fc08b8ff5cf96e062c2495d5cf88" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE bool</type>
        <definition>NRF_STATIC_INLINE bool nrf_vpr_csr_unrecoverable_return_check</definition>
        <argsstring>(void)</argsstring>
        <name>nrf_vpr_csr_unrecoverable_return_check</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Function for checking whether the unrecoverable return is enabled. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>Unrecoverable return is enabled. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>Unrecoverable return is disabled. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_vpr_csr.h" line="545" column="24" bodyfile="hal/nrf_vpr_csr.h" bodystart="545" bodyend="551" declfile="hal/nrf_vpr_csr.h" declline="317" declcolumn="24"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__nrf__vpr__csr__hal_1ga4c59a41d1b8430ec09588ef7306d221d" prot="public" static="no">
        <name>NRF_VPR_CSR_NORDIC_KEY_MASK</name>
        <initializer>    (VPRCSR_NORDIC_VPRNORDICCTRL_NORDICKEY_Enabled &lt;&lt; VPRCSR_NORDIC_VPRNORDICCTRL_NORDICKEY_Pos)</initializer>
        <briefdescription>
<para>Nordic key for CSR writes. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_vpr_csr.h" line="52" column="9" bodyfile="hal/nrf_vpr_csr.h" bodystart="52" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Hardware access layer for managing the VPR RISC-V CPU Control and Status Registers (VPR CSR). </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
