<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="nrf__lrcconf_8h" kind="file" language="C++">
    <compoundname>nrf_lrcconf.h</compoundname>
    <includes local="no">nrfx.h</includes>
    <incdepgraph>
      <node id="1">
        <label>hal/nrf_lrcconf.h</label>
        <link refid="nrf__lrcconf_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>nrfx.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__nrf__lrcconf__hal_1gaa791063c6a00e8f52905d1385ec2a447" prot="public" static="no">
        <name>NRF_LRCCONF_CLK_COUNT</name>
        <initializer>LRCCONF_CLKSTAT_MaxCount</initializer>
        <briefdescription>
<para>Number of clocks supported by LRCCONF. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_lrcconf.h" line="50" column="9" bodyfile="hal/nrf_lrcconf.h" bodystart="50" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__lrcconf__hal_1ga83767b1c32aeb439b88c5a70f43d48c0" prot="public" static="no">
        <name>NRF_LRCCONF_AXI_WAITSTATES_ARRAY_SIZE</name>
        <initializer>LRCCONF_AX2XWAITSTATES_MaxCount</initializer>
        <briefdescription>
<para>Size of AXI bridge waitstates array. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_lrcconf.h" line="53" column="9" bodyfile="hal/nrf_lrcconf.h" bodystart="53" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__lrcconf__hal_1ga75460ffa4cff84f3d9dbc009649c62b1" prot="public" static="no">
        <name>NRF_LRCCONF_HAS_HFXO</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Symbol indicating whether HFXO requesting is present. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_lrcconf.h" line="57" column="9" bodyfile="hal/nrf_lrcconf.h" bodystart="57" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="group__nrf__lrcconf__hal_1ga14c0e42f25451dfea38ea44ab756e05f" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_lrcconf_task_t</name>
        <enumvalue id="group__nrf__lrcconf__hal_1gga14c0e42f25451dfea38ea44ab756e05faff799953116e251e29dc4da501a05e38" prot="public">
          <name>NRF_LRCCONF_TASK_CLKSTART_0</name>
          <initializer>= offsetof(NRF_LRCCONF_Type, TASKS_REQCLKSRC[0])</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Request the clock source for clock 0. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__lrcconf__hal_1gga14c0e42f25451dfea38ea44ab756e05fa9415c29b5a303c1319eb4209fa4c72d7" prot="public">
          <name>NRF_LRCCONF_TASK_CLKSTART_1</name>
          <initializer>= offsetof(NRF_LRCCONF_Type, TASKS_REQCLKSRC[1])</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Request the clock source for clock 1. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__lrcconf__hal_1gga14c0e42f25451dfea38ea44ab756e05fa733a3950f12c0da81a7c7cc56f16b8bf" prot="public">
          <name>NRF_LRCCONF_TASK_CLKSTART_2</name>
          <initializer>= offsetof(NRF_LRCCONF_Type, TASKS_REQCLKSRC[2])</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Request the clock source for clock 2. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__lrcconf__hal_1gga14c0e42f25451dfea38ea44ab756e05faf5bed850cff2b992c3655cd2bed97c81" prot="public">
          <name>NRF_LRCCONF_TASK_CLKSTART_3</name>
          <initializer>= offsetof(NRF_LRCCONF_Type, TASKS_REQCLKSRC[3])</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Request the clock source for clock 3. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__lrcconf__hal_1gga14c0e42f25451dfea38ea44ab756e05fadf9dda54d3fecb3bc1bba60514b98c31" prot="public">
          <name>NRF_LRCCONF_TASK_CLKSTART_4</name>
          <initializer>= offsetof(NRF_LRCCONF_Type, TASKS_REQCLKSRC[4])</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Request the clock source for clock 4. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__lrcconf__hal_1gga14c0e42f25451dfea38ea44ab756e05fa20d66f2873bfacc2ee7e04891ba21b94" prot="public">
          <name>NRF_LRCCONF_TASK_CLKSTART_5</name>
          <initializer>= offsetof(NRF_LRCCONF_Type, TASKS_REQCLKSRC[5])</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Request the clock source for clock 5. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__lrcconf__hal_1gga14c0e42f25451dfea38ea44ab756e05fa8e611e027acda8c9163f167d4c59316f" prot="public">
          <name>NRF_LRCCONF_TASK_CLKSTART_6</name>
          <initializer>= offsetof(NRF_LRCCONF_Type, TASKS_REQCLKSRC[6])</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Request the clock source for clock 6. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__lrcconf__hal_1gga14c0e42f25451dfea38ea44ab756e05fa297c3e6734dc32dd460316dbdf1da225" prot="public">
          <name>NRF_LRCCONF_TASK_CLKSTART_7</name>
          <initializer>= offsetof(NRF_LRCCONF_Type, TASKS_REQCLKSRC[7])</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Request the clock source for clock 7. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__lrcconf__hal_1gga14c0e42f25451dfea38ea44ab756e05fa152543a3a429bd9f12ad98f34b3ba97d" prot="public">
          <name>NRF_LRCCONF_TASK_CLKSTOP_0</name>
          <initializer>= offsetof(NRF_LRCCONF_Type, TASKS_STOPREQCLKSRC[0])</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Stop requesting the clock source for clock 0. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__lrcconf__hal_1gga14c0e42f25451dfea38ea44ab756e05fac83ce0f9d6cebb31262d7cdad5b20048" prot="public">
          <name>NRF_LRCCONF_TASK_CLKSTOP_1</name>
          <initializer>= offsetof(NRF_LRCCONF_Type, TASKS_STOPREQCLKSRC[1])</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Stop requesting the clock source for clock 1. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__lrcconf__hal_1gga14c0e42f25451dfea38ea44ab756e05fab49e6004b01d443b8d753568e3df38f6" prot="public">
          <name>NRF_LRCCONF_TASK_CLKSTOP_2</name>
          <initializer>= offsetof(NRF_LRCCONF_Type, TASKS_STOPREQCLKSRC[2])</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Stop requesting the clock source for clock 2. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__lrcconf__hal_1gga14c0e42f25451dfea38ea44ab756e05fa018f9de7f739e6895aad883dd4215df4" prot="public">
          <name>NRF_LRCCONF_TASK_CLKSTOP_3</name>
          <initializer>= offsetof(NRF_LRCCONF_Type, TASKS_STOPREQCLKSRC[3])</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Stop requesting the clock source for clock 3. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__lrcconf__hal_1gga14c0e42f25451dfea38ea44ab756e05faa19e6b79da12672c6b2ba2a22183327b" prot="public">
          <name>NRF_LRCCONF_TASK_CLKSTOP_4</name>
          <initializer>= offsetof(NRF_LRCCONF_Type, TASKS_STOPREQCLKSRC[4])</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Stop requesting the clock source for clock 4. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__lrcconf__hal_1gga14c0e42f25451dfea38ea44ab756e05fa880e0d3f26b0f1c73bc20a679b0138f8" prot="public">
          <name>NRF_LRCCONF_TASK_CLKSTOP_5</name>
          <initializer>= offsetof(NRF_LRCCONF_Type, TASKS_STOPREQCLKSRC[5])</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Stop requesting the clock source for clock 5. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__lrcconf__hal_1gga14c0e42f25451dfea38ea44ab756e05fa115c9f55e376fdde62c6149ee9ff29f5" prot="public">
          <name>NRF_LRCCONF_TASK_CLKSTOP_6</name>
          <initializer>= offsetof(NRF_LRCCONF_Type, TASKS_STOPREQCLKSRC[6])</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Stop requesting the clock source for clock 6. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__lrcconf__hal_1gga14c0e42f25451dfea38ea44ab756e05fa560291fbaf8ed07f75a2aaceec2451c3" prot="public">
          <name>NRF_LRCCONF_TASK_CLKSTOP_7</name>
          <initializer>= offsetof(NRF_LRCCONF_Type, TASKS_STOPREQCLKSRC[7])</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Stop requesting the clock source for clock 7. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__lrcconf__hal_1gga14c0e42f25451dfea38ea44ab756e05fac4406f22505ab0b19d5d31ab0e3395c1" prot="public">
          <name>NRF_LRCCONF_TASK_CONSTLAT_ENABLE</name>
          <initializer>= offsetof(NRF_LRCCONF_Type, TASKS_CONSTLAT.ENABLE)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Enable constant latency mode. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__lrcconf__hal_1gga14c0e42f25451dfea38ea44ab756e05fa039be60c1c4bd2de0212e4de0b9f93f2" prot="public">
          <name>NRF_LRCCONF_TASK_CONSTLAT_DISABLE</name>
          <initializer>= offsetof(NRF_LRCCONF_Type, TASKS_CONSTLAT.DISABLE)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Disable constant latency mode. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__lrcconf__hal_1gga14c0e42f25451dfea38ea44ab756e05fa947710ff97a12e45a99d6fb98de16fcd" prot="public">
          <name>NRF_LRCCONF_TASK_SYSTEMOFFNOTREADY</name>
          <initializer>= offsetof(NRF_LRCCONF_Type, TASKS_SYSTEMOFF.NOTREADY)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Indicate being not ready to system off . </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__lrcconf__hal_1gga14c0e42f25451dfea38ea44ab756e05fa26dbdc3c77955af64e7497cc1035b3ea" prot="public">
          <name>NRF_LRCCONF_TASK_SYSTEMOFFREADY</name>
          <initializer>= offsetof(NRF_LRCCONF_Type, TASKS_SYSTEMOFF.READY)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Indicate being ready to system off . </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__lrcconf__hal_1gga14c0e42f25451dfea38ea44ab756e05fa65cf1e69827963e9fbee79c54802e975" prot="public">
          <name>NRF_LRCCONF_TASK_REQHFXO</name>
          <initializer>= offsetof(NRF_LRCCONF_Type, TASKS_REQHFXO)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Request HFXO. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__lrcconf__hal_1gga14c0e42f25451dfea38ea44ab756e05fa8f1319f9a5b58c79db03d67cbe2110bc" prot="public">
          <name>NRF_LRCCONF_TASK_STOPREQHFXO</name>
          <initializer>= offsetof(NRF_LRCCONF_Type, TASKS_STOPREQHFXO)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Stop requesting HFXO. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Tasks. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_lrcconf.h" line="63" column="1" bodyfile="hal/nrf_lrcconf.h" bodystart="64" bodyend="89"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__lrcconf__hal_1ga3b888b135075d9e82f4c23a1e3d9fcfd" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_lrcconf_event_t</name>
        <enumvalue id="group__nrf__lrcconf__hal_1gga3b888b135075d9e82f4c23a1e3d9fcfda9ce5d83ac5dcbcd3285b9d5e21eb1502" prot="public">
          <name>NRF_LRCCONF_EVENT_CLKSTARTED_0</name>
          <initializer>= offsetof(NRF_LRCCONF_Type, EVENTS_CLKSRCSTARTED[0])</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Clock 0 started. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__lrcconf__hal_1gga3b888b135075d9e82f4c23a1e3d9fcfda403f6fb165f9df898d6ae6fee29cc54b" prot="public">
          <name>NRF_LRCCONF_EVENT_CLKSTARTED_1</name>
          <initializer>= offsetof(NRF_LRCCONF_Type, EVENTS_CLKSRCSTARTED[1])</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Clock 1 started. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__lrcconf__hal_1gga3b888b135075d9e82f4c23a1e3d9fcfdaa6e539618ff1555fd4ab0efa32286ba0" prot="public">
          <name>NRF_LRCCONF_EVENT_CLKSTARTED_2</name>
          <initializer>= offsetof(NRF_LRCCONF_Type, EVENTS_CLKSRCSTARTED[2])</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Clock 2 started. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__lrcconf__hal_1gga3b888b135075d9e82f4c23a1e3d9fcfda02628e721e7eeb0292cf5b1aabf164da" prot="public">
          <name>NRF_LRCCONF_EVENT_CLKSTARTED_3</name>
          <initializer>= offsetof(NRF_LRCCONF_Type, EVENTS_CLKSRCSTARTED[3])</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Clock 3 started. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__lrcconf__hal_1gga3b888b135075d9e82f4c23a1e3d9fcfda93c46cfae356495e11eeee37e1fb2fe1" prot="public">
          <name>NRF_LRCCONF_EVENT_CLKSTARTED_4</name>
          <initializer>= offsetof(NRF_LRCCONF_Type, EVENTS_CLKSRCSTARTED[4])</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Clock 4 started. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__lrcconf__hal_1gga3b888b135075d9e82f4c23a1e3d9fcfda1eddf6e0ba87aa98155483dc700aa6fc" prot="public">
          <name>NRF_LRCCONF_EVENT_CLKSTARTED_5</name>
          <initializer>= offsetof(NRF_LRCCONF_Type, EVENTS_CLKSRCSTARTED[5])</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Clock 5 started. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__lrcconf__hal_1gga3b888b135075d9e82f4c23a1e3d9fcfda4cee4ab1afe5711166592b04b7204441" prot="public">
          <name>NRF_LRCCONF_EVENT_CLKSTARTED_6</name>
          <initializer>= offsetof(NRF_LRCCONF_Type, EVENTS_CLKSRCSTARTED[6])</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Clock 6 started. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__lrcconf__hal_1gga3b888b135075d9e82f4c23a1e3d9fcfda09392f2190649b652e6888ec8e3e919d" prot="public">
          <name>NRF_LRCCONF_EVENT_CLKSTARTED_7</name>
          <initializer>= offsetof(NRF_LRCCONF_Type, EVENTS_CLKSRCSTARTED[7])</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Clock 7 started. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__lrcconf__hal_1gga3b888b135075d9e82f4c23a1e3d9fcfda70a8f205976314ac83845813e1573768" prot="public">
          <name>NRF_LRCCONF_EVENT_HFXOSTARTED</name>
          <initializer>= offsetof(NRF_LRCCONF_Type, EVENTS_HFXOSTARTED)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>HFXO started. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Events. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_lrcconf.h" line="92" column="1" bodyfile="hal/nrf_lrcconf.h" bodystart="93" bodyend="105"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__lrcconf__hal_1ga3baed0abacb93a058927d25226babff8" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_lrcconf_clk_src_t</name>
        <enumvalue id="group__nrf__lrcconf__hal_1gga3baed0abacb93a058927d25226babff8a45b178dd76cc7b656211f1a63b955c84" prot="public">
          <name>NRF_LRCCONF_CLK_SRC_OPEN_LOOP</name>
          <initializer>= LRCCONF_CLKSTAT_SRC_SRC_OpenLoop</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Open loop mode. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__lrcconf__hal_1gga3baed0abacb93a058927d25226babff8aa9e97d40f43b817acf63cd6dd8b67fe3" prot="public">
          <name>NRF_LRCCONF_CLK_SRC_CLOSED_LOOP</name>
          <initializer>= LRCCONF_CLKSTAT_SRC_SRC_ClosedLoop</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Closed loop mode. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Clock sources. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_lrcconf.h" line="108" column="1" bodyfile="hal/nrf_lrcconf.h" bodystart="109" bodyend="112"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__lrcconf__hal_1ga1ef49ffcd36c4b8f6f562f736782fe02" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_lrcconf_power_domain_mask_t</name>
        <enumvalue id="group__nrf__lrcconf__hal_1gga1ef49ffcd36c4b8f6f562f736782fe02a4d3ade7230048218f3b1429f46c44502" prot="public">
          <name>NRF_LRCCONF_POWER_MAIN</name>
          <initializer>= LRCCONF_POWERON_MAIN_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Mask for main power domain. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__lrcconf__hal_1gga1ef49ffcd36c4b8f6f562f736782fe02a6946d26eec852b6e99acddb3d6fba0be" prot="public">
          <name>NRF_LRCCONF_POWER_DOMAIN_0</name>
          <initializer>= LRCCONF_POWERON_ACTIVE0_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Mask for power domain 0. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__lrcconf__hal_1gga1ef49ffcd36c4b8f6f562f736782fe02aecd63e95c0dc4b2d6614b89b82e132a2" prot="public">
          <name>NRF_LRCCONF_POWER_DOMAIN_1</name>
          <initializer>= LRCCONF_POWERON_ACTIVE1_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Mask for power domain 1. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__lrcconf__hal_1gga1ef49ffcd36c4b8f6f562f736782fe02a6082e701a2685fbb60cd81219178f72b" prot="public">
          <name>NRF_LRCCONF_POWER_DOMAIN_2</name>
          <initializer>= LRCCONF_POWERON_ACTIVE2_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Mask for power domain 2. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__lrcconf__hal_1gga1ef49ffcd36c4b8f6f562f736782fe02a44cb4d79a793c260b6489ca61cee8bf6" prot="public">
          <name>NRF_LRCCONF_POWER_DOMAIN_3</name>
          <initializer>= LRCCONF_POWERON_ACTIVE3_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Mask for power domain 3. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__lrcconf__hal_1gga1ef49ffcd36c4b8f6f562f736782fe02aa72cc84961db71eb328ec7af2e61f0d4" prot="public">
          <name>NRF_LRCCONF_POWER_DOMAIN_4</name>
          <initializer>= LRCCONF_POWERON_ACTIVE4_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Mask for power domain 4. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__lrcconf__hal_1gga1ef49ffcd36c4b8f6f562f736782fe02acae2aaad1dba1f0e7e5bd3b190146479" prot="public">
          <name>NRF_LRCCONF_POWER_DOMAIN_5</name>
          <initializer>= LRCCONF_POWERON_ACTIVE5_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Mask for power domain 5. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__lrcconf__hal_1gga1ef49ffcd36c4b8f6f562f736782fe02a264f82a51d000ec58551af674738d808" prot="public">
          <name>NRF_LRCCONF_POWER_DOMAIN_6</name>
          <initializer>= LRCCONF_POWERON_ACTIVE6_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Mask for power domain 6. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__lrcconf__hal_1gga1ef49ffcd36c4b8f6f562f736782fe02a0179bd35122c0d07f36f3b0f141f5b8b" prot="public">
          <name>NRF_LRCCONF_POWER_DOMAIN_7</name>
          <initializer>= LRCCONF_POWERON_ACTIVE7_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Mask for power domain 7. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Power domain mask. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_lrcconf.h" line="115" column="1" bodyfile="hal/nrf_lrcconf.h" bodystart="116" bodyend="126"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__nrf__lrcconf__hal_1gab0dba61f70c4ba9d4da5036ca8719d2c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_lrcconf_task_trigger</definition>
        <argsstring>(NRF_LRCCONF_Type *p_reg, nrf_lrcconf_task_t task)</argsstring>
        <name>nrf_lrcconf_task_trigger</name>
        <param>
          <type>NRF_LRCCONF_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__lrcconf__hal_1ga14c0e42f25451dfea38ea44ab756e05f" kindref="member">nrf_lrcconf_task_t</ref></type>
          <declname>task</declname>
        </param>
        <briefdescription>
<para>Function for starting a task. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">task</parametername>
</parameternamelist>
<parameterdescription>
<para>Requested task. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_lrcconf.h" line="358" column="24" bodyfile="hal/nrf_lrcconf.h" bodystart="358" bodyend="361" declfile="hal/nrf_lrcconf.h" declline="134" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__lrcconf__hal_1gae608a1ade95a3c88fc4de93e357208ec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_lrcconf_task_address_get</definition>
        <argsstring>(NRF_LRCCONF_Type const *p_reg, nrf_lrcconf_task_t task)</argsstring>
        <name>nrf_lrcconf_task_address_get</name>
        <param>
          <type>NRF_LRCCONF_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__lrcconf__hal_1ga14c0e42f25451dfea38ea44ab756e05f" kindref="member">nrf_lrcconf_task_t</ref></type>
          <declname>task</declname>
        </param>
        <briefdescription>
<para>Function for returning the address of a task. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">task</parametername>
</parameternamelist>
<parameterdescription>
<para>Requested task.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Address of the requested task register. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_lrcconf.h" line="363" column="28" bodyfile="hal/nrf_lrcconf.h" bodystart="363" bodyend="367" declfile="hal/nrf_lrcconf.h" declline="144" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__lrcconf__hal_1gae420bc252f372bf94526d1ffc65c0a93" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_lrcconf_event_address_get</definition>
        <argsstring>(NRF_LRCCONF_Type const *p_reg, nrf_lrcconf_event_t event)</argsstring>
        <name>nrf_lrcconf_event_address_get</name>
        <param>
          <type>NRF_LRCCONF_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__lrcconf__hal_1ga3b888b135075d9e82f4c23a1e3d9fcfd" kindref="member">nrf_lrcconf_event_t</ref></type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>Function for returning the address of an event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>Requested event.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Address of the requested event register. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_lrcconf.h" line="369" column="28" bodyfile="hal/nrf_lrcconf.h" bodystart="369" bodyend="373" declfile="hal/nrf_lrcconf.h" declline="155" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__lrcconf__hal_1gab83756b552a88dcabf1fea291fed7a03" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_lrcconf_event_clear</definition>
        <argsstring>(NRF_LRCCONF_Type *p_reg, nrf_lrcconf_event_t event)</argsstring>
        <name>nrf_lrcconf_event_clear</name>
        <param>
          <type>NRF_LRCCONF_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__lrcconf__hal_1ga3b888b135075d9e82f4c23a1e3d9fcfd" kindref="member">nrf_lrcconf_event_t</ref></type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>Function for clearing an event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event to be cleared. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_lrcconf.h" line="375" column="24" bodyfile="hal/nrf_lrcconf.h" bodystart="375" bodyend="380" declfile="hal/nrf_lrcconf.h" declline="164" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__lrcconf__hal_1ga054ecf316b25c91094ed9bd6905b9798" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE bool</type>
        <definition>NRF_STATIC_INLINE bool nrf_lrcconf_event_check</definition>
        <argsstring>(NRF_LRCCONF_Type const *p_reg, nrf_lrcconf_event_t event)</argsstring>
        <name>nrf_lrcconf_event_check</name>
        <param>
          <type>NRF_LRCCONF_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__lrcconf__hal_1ga3b888b135075d9e82f4c23a1e3d9fcfd" kindref="member">nrf_lrcconf_event_t</ref></type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>Function for retrieving the state of the specified event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event to be checked.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>The event has been generated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>The event has not been generated. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_lrcconf.h" line="382" column="24" bodyfile="hal/nrf_lrcconf.h" bodystart="382" bodyend="386" declfile="hal/nrf_lrcconf.h" declline="176" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__lrcconf__hal_1gaf8a2d5f6786959839b6d53bbf2ec73b9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE <ref refid="group__nrf__lrcconf__hal_1ga14c0e42f25451dfea38ea44ab756e05f" kindref="member">nrf_lrcconf_task_t</ref></type>
        <definition>NRF_STATIC_INLINE nrf_lrcconf_task_t nrf_lrcconf_clkstart_task_get</definition>
        <argsstring>(uint8_t index)</argsstring>
        <name>nrf_lrcconf_clkstart_task_get</name>
        <param>
          <type>uint8_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Function for getting CLKSTART task by its index. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">index</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of the CLKSTART task.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>CLKSTART task. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_lrcconf.h" line="388" column="38" bodyfile="hal/nrf_lrcconf.h" bodystart="388" bodyend="392" declfile="hal/nrf_lrcconf.h" declline="186" declcolumn="38"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__lrcconf__hal_1gae2062a2e2159af2900dcdb2086e431c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE <ref refid="group__nrf__lrcconf__hal_1ga14c0e42f25451dfea38ea44ab756e05f" kindref="member">nrf_lrcconf_task_t</ref></type>
        <definition>NRF_STATIC_INLINE nrf_lrcconf_task_t nrf_lrcconf_clkstop_task_get</definition>
        <argsstring>(uint8_t index)</argsstring>
        <name>nrf_lrcconf_clkstop_task_get</name>
        <param>
          <type>uint8_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Function for getting CLKSTOP task by its index. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">index</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of the CLKSTOP task.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>CLKSTOP task. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_lrcconf.h" line="394" column="38" bodyfile="hal/nrf_lrcconf.h" bodystart="394" bodyend="398" declfile="hal/nrf_lrcconf.h" declline="195" declcolumn="38"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__lrcconf__hal_1ga20a1eb4d5272ca2cfde7bd11bd6a9dbe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE <ref refid="group__nrf__lrcconf__hal_1ga3b888b135075d9e82f4c23a1e3d9fcfd" kindref="member">nrf_lrcconf_event_t</ref></type>
        <definition>NRF_STATIC_INLINE nrf_lrcconf_event_t nrf_lrcconf_clkstarted_event_get</definition>
        <argsstring>(uint8_t index)</argsstring>
        <name>nrf_lrcconf_clkstarted_event_get</name>
        <param>
          <type>uint8_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Function for getting CLKSTARTED event by its index. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">index</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of the CLKSTARTED event.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>CLKSTARTED event. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_lrcconf.h" line="400" column="39" bodyfile="hal/nrf_lrcconf.h" bodystart="400" bodyend="404" declfile="hal/nrf_lrcconf.h" declline="204" declcolumn="39"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__lrcconf__hal_1ga5df3d5aa929b2d295688611ceee882ad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE <ref refid="group__nrf__lrcconf__hal_1ga1ef49ffcd36c4b8f6f562f736782fe02" kindref="member">nrf_lrcconf_power_domain_mask_t</ref></type>
        <definition>NRF_STATIC_INLINE nrf_lrcconf_power_domain_mask_t nrf_lrcconf_power_domain_on_get</definition>
        <argsstring>(uint8_t index)</argsstring>
        <name>nrf_lrcconf_power_domain_on_get</name>
        <param>
          <type>uint8_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Function for getting power domain on mask by its index. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">index</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of the domain.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Enum value for domain. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_lrcconf.h" line="407" column="33" bodyfile="hal/nrf_lrcconf.h" bodystart="407" bodyend="411" declfile="hal/nrf_lrcconf.h" declline="214" declcolumn="33"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__lrcconf__hal_1ga162e0ab9670469cf61356f75ec21dc01" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE bool</type>
        <definition>NRF_STATIC_INLINE bool nrf_lrcconf_clock_run_status_check</definition>
        <argsstring>(NRF_LRCCONF_Type const *p_reg, uint8_t clock)</argsstring>
        <name>nrf_lrcconf_clock_run_status_check</name>
        <param>
          <type>NRF_LRCCONF_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>clock</declname>
        </param>
        <briefdescription>
<para>Function for retrieving the status indicating whether TASK_CLKSTART task has been triggered. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">clock</parametername>
</parameternamelist>
<parameterdescription>
<para>Clock index.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>Clock start task has been triggered. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>Clock start task has not been triggered. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_lrcconf.h" line="413" column="24" bodyfile="hal/nrf_lrcconf.h" bodystart="413" bodyend="418" declfile="hal/nrf_lrcconf.h" declline="226" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__lrcconf__hal_1ga8222f027fe91f95f82b8a2673f3ece1e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE <ref refid="group__nrf__lrcconf__hal_1ga3baed0abacb93a058927d25226babff8" kindref="member">nrf_lrcconf_clk_src_t</ref></type>
        <definition>NRF_STATIC_INLINE nrf_lrcconf_clk_src_t nrf_lrcconf_clock_source_get</definition>
        <argsstring>(NRF_LRCCONF_Type const *p_reg, uint8_t clock)</argsstring>
        <name>nrf_lrcconf_clock_source_get</name>
        <param>
          <type>NRF_LRCCONF_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>clock</declname>
        </param>
        <briefdescription>
<para>Function for retrieving the source of the specified clock. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">clock</parametername>
</parameternamelist>
<parameterdescription>
<para>Clock index.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Clock source. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_lrcconf.h" line="421" column="23" bodyfile="hal/nrf_lrcconf.h" bodystart="421" bodyend="427" declfile="hal/nrf_lrcconf.h" declline="238" declcolumn="23"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__lrcconf__hal_1ga14686fa9ad0904c0b6e20fc5c1f0fb81" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_lrcconf_clock_always_run_force_set</definition>
        <argsstring>(NRF_LRCCONF_Type *p_reg, uint8_t clock, bool alwaysrun)</argsstring>
        <name>nrf_lrcconf_clock_always_run_force_set</name>
        <param>
          <type>NRF_LRCCONF_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>clock</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>alwaysrun</declname>
        </param>
        <briefdescription>
<para>Function for setting the specified clock to remain running. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">clock</parametername>
</parameternamelist>
<parameterdescription>
<para>Clock index. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">alwaysrun</parametername>
</parameternamelist>
<parameterdescription>
<para>True if forcing the clock to remain on is to be enabled, false otherwise. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_lrcconf.h" line="429" column="24" bodyfile="hal/nrf_lrcconf.h" bodystart="429" bodyend="437" declfile="hal/nrf_lrcconf.h" declline="247" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__lrcconf__hal_1gafc54b7541b1a9c94e8ee3c961bed472a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE bool</type>
        <definition>NRF_STATIC_INLINE bool nrf_lrcconf_clock_always_run_check</definition>
        <argsstring>(NRF_LRCCONF_Type const *p_reg, uint8_t clock)</argsstring>
        <name>nrf_lrcconf_clock_always_run_check</name>
        <param>
          <type>NRF_LRCCONF_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>clock</declname>
        </param>
        <briefdescription>
<para>Function for checking if the specified clock is configured to remain running. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">clock</parametername>
</parameternamelist>
<parameterdescription>
<para>Clock index.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>The clock is configured to remain on. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>The clock is not configured to remain on. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_lrcconf.h" line="439" column="24" bodyfile="hal/nrf_lrcconf.h" bodystart="439" bodyend="444" declfile="hal/nrf_lrcconf.h" declline="260" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__lrcconf__hal_1gac12bf418901664551393224c9d2988a0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_lrcconf_clock_source_set</definition>
        <argsstring>(NRF_LRCCONF_Type *p_reg, uint8_t clock, nrf_lrcconf_clk_src_t source)</argsstring>
        <name>nrf_lrcconf_clock_source_set</name>
        <param>
          <type>NRF_LRCCONF_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>clock</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__lrcconf__hal_1ga3baed0abacb93a058927d25226babff8" kindref="member">nrf_lrcconf_clk_src_t</ref></type>
          <declname>source</declname>
        </param>
        <briefdescription>
<para>Function for setting the source of the specified clock. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">clock</parametername>
</parameternamelist>
<parameterdescription>
<para>Clock index. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">source</parametername>
</parameternamelist>
<parameterdescription>
<para>Clock source to be set. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_lrcconf.h" line="446" column="24" bodyfile="hal/nrf_lrcconf.h" bodystart="446" bodyend="453" declfile="hal/nrf_lrcconf.h" declline="270" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__lrcconf__hal_1ga361a95af9fcb17f494d350b46f4930aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE bool</type>
        <definition>NRF_STATIC_INLINE bool nrf_lrcconf_constlatstat_check</definition>
        <argsstring>(NRF_LRCCONF_Type const *p_reg)</argsstring>
        <name>nrf_lrcconf_constlatstat_check</name>
        <param>
          <type>NRF_LRCCONF_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for checking the status of constant latency. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>Constant latency enabled. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>Constant latency disabled, low power enabled. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_lrcconf.h" line="455" column="24" bodyfile="hal/nrf_lrcconf.h" bodystart="455" bodyend="458" declfile="hal/nrf_lrcconf.h" declline="282" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__lrcconf__hal_1ga054afc49252d97e9a8f577fafa640b54" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_lrcconf_poweron_force_set</definition>
        <argsstring>(NRF_LRCCONF_Type *p_reg, nrf_lrcconf_power_domain_mask_t domain_mask, bool alwayson)</argsstring>
        <name>nrf_lrcconf_poweron_force_set</name>
        <param>
          <type>NRF_LRCCONF_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__lrcconf__hal_1ga1ef49ffcd36c4b8f6f562f736782fe02" kindref="member">nrf_lrcconf_power_domain_mask_t</ref></type>
          <declname>domain_mask</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>alwayson</declname>
        </param>
        <briefdescription>
<para>Function for setting the power domain to remain on. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">domain_mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of power domains to remain on. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">alwayson</parametername>
</parameternamelist>
<parameterdescription>
<para>True if forcing the power domain to remain on is to be enabled, false otherwise. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_lrcconf.h" line="461" column="6" bodyfile="hal/nrf_lrcconf.h" bodystart="461" bodyend="466" declfile="hal/nrf_lrcconf.h" declline="293" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__lrcconf__hal_1ga7ec4d74b571e7d5bed2411c769a5a6d3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE bool</type>
        <definition>NRF_STATIC_INLINE bool nrf_lrcconf_poweron_force_check</definition>
        <argsstring>(NRF_LRCCONF_Type const *p_reg, nrf_lrcconf_power_domain_mask_t domain)</argsstring>
        <name>nrf_lrcconf_poweron_force_check</name>
        <param>
          <type>NRF_LRCCONF_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__lrcconf__hal_1ga1ef49ffcd36c4b8f6f562f736782fe02" kindref="member">nrf_lrcconf_power_domain_mask_t</ref></type>
          <declname>domain</declname>
        </param>
        <briefdescription>
<para>Function for checking if the power domain is configured to remain on. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">domain</parametername>
</parameternamelist>
<parameterdescription>
<para>Power domain to be checked.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>The domain is configured to remain on. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>The domain is not configured to remain on. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_lrcconf.h" line="469" column="6" bodyfile="hal/nrf_lrcconf.h" bodystart="469" bodyend="473" declfile="hal/nrf_lrcconf.h" declline="307" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__lrcconf__hal_1gac9d94c99ec79d8b00feb861b074b3a9b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_lrcconf_retain_set</definition>
        <argsstring>(NRF_LRCCONF_Type *p_reg, nrf_lrcconf_power_domain_mask_t domain_mask, bool retain)</argsstring>
        <name>nrf_lrcconf_retain_set</name>
        <param>
          <type>NRF_LRCCONF_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__lrcconf__hal_1ga1ef49ffcd36c4b8f6f562f736782fe02" kindref="member">nrf_lrcconf_power_domain_mask_t</ref></type>
          <declname>domain_mask</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>retain</declname>
        </param>
        <briefdescription>
<para>Function for setting the power domain to be retained in System ON idle. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">domain_mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of power domains to be retained. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">retain</parametername>
</parameternamelist>
<parameterdescription>
<para>True if power domain retention is to be enabled, flase otherwise. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_lrcconf.h" line="476" column="6" bodyfile="hal/nrf_lrcconf.h" bodystart="476" bodyend="481" declfile="hal/nrf_lrcconf.h" declline="318" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__lrcconf__hal_1ga9e5a116d0d251c106e22e33fcb570798" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE bool</type>
        <definition>NRF_STATIC_INLINE bool nrf_lrcconf_retain_check</definition>
        <argsstring>(NRF_LRCCONF_Type const *p_reg, nrf_lrcconf_power_domain_mask_t domain)</argsstring>
        <name>nrf_lrcconf_retain_check</name>
        <param>
          <type>NRF_LRCCONF_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__lrcconf__hal_1ga1ef49ffcd36c4b8f6f562f736782fe02" kindref="member">nrf_lrcconf_power_domain_mask_t</ref></type>
          <declname>domain</declname>
        </param>
        <briefdescription>
<para>Function for checking if the power domain is configured to be retained in System ON idle. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">domain</parametername>
</parameternamelist>
<parameterdescription>
<para>Power domain to be checked.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>The domain is configured to be retained. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>The domain is not configured to be retained. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_lrcconf.h" line="484" column="6" bodyfile="hal/nrf_lrcconf.h" bodystart="484" bodyend="488" declfile="hal/nrf_lrcconf.h" declline="332" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__lrcconf__hal_1gab61791d9f89260688c670bbfec5c24b0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_lrcconf_axi_waitstates_set</definition>
        <argsstring>(NRF_LRCCONF_Type *p_reg, uint8_t domain, uint8_t waitstates_num)</argsstring>
        <name>nrf_lrcconf_axi_waitstates_set</name>
        <param>
          <type>NRF_LRCCONF_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>domain</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>waitstates_num</declname>
        </param>
        <briefdescription>
<para>Function for setting the waitstates for the AXI bridge connection. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">domain</parametername>
</parameternamelist>
<parameterdescription>
<para>Functional domain identifier. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">waitstates_num</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of waitstates. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_lrcconf.h" line="490" column="24" bodyfile="hal/nrf_lrcconf.h" bodystart="490" bodyend="500" declfile="hal/nrf_lrcconf.h" declline="342" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__lrcconf__hal_1gaaa33a8ccda6e8d5e84da0d22236fd806" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint8_t</type>
        <definition>NRF_STATIC_INLINE uint8_t nrf_lrcconf_axi_waitstates_get</definition>
        <argsstring>(NRF_LRCCONF_Type const *p_reg, uint8_t domain)</argsstring>
        <name>nrf_lrcconf_axi_waitstates_get</name>
        <param>
          <type>NRF_LRCCONF_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>domain</declname>
        </param>
        <briefdescription>
<para>Function for getting the waitstates for the AXI bridge connection. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">domain</parametername>
</parameternamelist>
<parameterdescription>
<para>Functional domain identifier.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Number of waitstates </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_lrcconf.h" line="502" column="27" bodyfile="hal/nrf_lrcconf.h" bodystart="502" bodyend="508" declfile="hal/nrf_lrcconf.h" declline="354" declcolumn="27"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2023<sp/>-<sp/>2024,<sp/>Nordic<sp/>Semiconductor<sp/>ASA</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>All<sp/>rights<sp/>reserved.</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>SPDX-License-Identifier:<sp/>BSD-3-Clause</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions<sp/>are<sp/>met:</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>1.<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright<sp/>notice,<sp/>this</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>2.<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the<sp/>distribution.</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/>3.<sp/>Neither<sp/>the<sp/>name<sp/>of<sp/>the<sp/>copyright<sp/>holder<sp/>nor<sp/>the<sp/>names<sp/>of<sp/>its</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>contributors<sp/>may<sp/>be<sp/>used<sp/>to<sp/>endorse<sp/>or<sp/>promote<sp/>products<sp/>derived<sp/>from<sp/>this</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>software<sp/>without<sp/>specific<sp/>prior<sp/>written<sp/>permission.</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>COPYRIGHT<sp/>HOLDERS<sp/>AND<sp/>CONTRIBUTORS<sp/>&quot;AS<sp/>IS&quot;</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/>AND<sp/>ANY<sp/>EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>THE</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*<sp/>ARE<sp/>DISCLAIMED.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>COPYRIGHT<sp/>HOLDER<sp/>OR<sp/>CONTRIBUTORS<sp/>BE</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,<sp/>SPECIAL,<sp/>EXEMPLARY,<sp/>OR</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>PROCUREMENT<sp/>OF</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>*<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,<sp/>DATA,<sp/>OR<sp/>PROFITS;<sp/>OR<sp/>BUSINESS</highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/>*<sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY<sp/>THEORY<sp/>OF<sp/>LIABILITY,<sp/>WHETHER<sp/>IN</highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/>*<sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR<sp/>OTHERWISE)</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/>*<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE<sp/>OF<sp/>THIS<sp/>SOFTWARE,<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/>*<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight></codeline>
<codeline lineno="32"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>NRF_LRCCONF_H__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_LRCCONF_H__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;nrfx.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="42"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="43"><highlight class="comment"><sp/>*<sp/>@defgroup<sp/>nrf_lrcconf_hal<sp/>LRCCONF<sp/>HAL</highlight></codeline>
<codeline lineno="44"><highlight class="comment"><sp/>*<sp/>@{</highlight></codeline>
<codeline lineno="45"><highlight class="comment"><sp/>*<sp/>@ingroup<sp/>nrf_lrc</highlight></codeline>
<codeline lineno="46"><highlight class="comment"><sp/>*<sp/>@brief<sp/><sp/><sp/>Hardware<sp/>access<sp/>layer<sp/>for<sp/>managing<sp/>the<sp/>Local<sp/>Resource<sp/>Controller<sp/>Configuration<sp/>(LRCCONF)<sp/>peripheral.</highlight></codeline>
<codeline lineno="47"><highlight class="comment"><sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="49"><highlight class="comment">/**<sp/>@brief<sp/>Number<sp/>of<sp/>clocks<sp/>supported<sp/>by<sp/>LRCCONF.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_LRCCONF_CLK_COUNT<sp/>LRCCONF_CLKSTAT_MaxCount</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="52"><highlight class="comment">/**<sp/>@brief<sp/>Size<sp/>of<sp/>AXI<sp/>bridge<sp/>waitstates<sp/>array.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_LRCCONF_AXI_WAITSTATES_ARRAY_SIZE<sp/>LRCCONF_AX2XWAITSTATES_MaxCount</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(LRCCONF_TASKS_REQHFXO_TASKS_REQHFXO_Msk)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="56"><highlight class="comment">/**<sp/>@brief<sp/>Symbol<sp/>indicating<sp/>whether<sp/>HFXO<sp/>requesting<sp/>is<sp/>present.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_LRCCONF_HAS_HFXO<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_LRCCONF_HAS_HFXO<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="62"><highlight class="comment">/**<sp/>@brief<sp/>Tasks.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal">{</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__lrcconf__hal_1gga14c0e42f25451dfea38ea44ab756e05faff799953116e251e29dc4da501a05e38" kindref="member">NRF_LRCCONF_TASK_CLKSTART_0</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_LRCCONF_Type,<sp/>TASKS_REQCLKSRC[0]),<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Request<sp/>the<sp/>clock<sp/>source<sp/>for<sp/>clock<sp/>0.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__lrcconf__hal_1gga14c0e42f25451dfea38ea44ab756e05fa9415c29b5a303c1319eb4209fa4c72d7" kindref="member">NRF_LRCCONF_TASK_CLKSTART_1</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_LRCCONF_Type,<sp/>TASKS_REQCLKSRC[1]),<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Request<sp/>the<sp/>clock<sp/>source<sp/>for<sp/>clock<sp/>1.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__lrcconf__hal_1gga14c0e42f25451dfea38ea44ab756e05fa733a3950f12c0da81a7c7cc56f16b8bf" kindref="member">NRF_LRCCONF_TASK_CLKSTART_2</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_LRCCONF_Type,<sp/>TASKS_REQCLKSRC[2]),<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Request<sp/>the<sp/>clock<sp/>source<sp/>for<sp/>clock<sp/>2.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__lrcconf__hal_1gga14c0e42f25451dfea38ea44ab756e05faf5bed850cff2b992c3655cd2bed97c81" kindref="member">NRF_LRCCONF_TASK_CLKSTART_3</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_LRCCONF_Type,<sp/>TASKS_REQCLKSRC[3]),<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Request<sp/>the<sp/>clock<sp/>source<sp/>for<sp/>clock<sp/>3.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__lrcconf__hal_1gga14c0e42f25451dfea38ea44ab756e05fadf9dda54d3fecb3bc1bba60514b98c31" kindref="member">NRF_LRCCONF_TASK_CLKSTART_4</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_LRCCONF_Type,<sp/>TASKS_REQCLKSRC[4]),<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Request<sp/>the<sp/>clock<sp/>source<sp/>for<sp/>clock<sp/>4.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__lrcconf__hal_1gga14c0e42f25451dfea38ea44ab756e05fa20d66f2873bfacc2ee7e04891ba21b94" kindref="member">NRF_LRCCONF_TASK_CLKSTART_5</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_LRCCONF_Type,<sp/>TASKS_REQCLKSRC[5]),<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Request<sp/>the<sp/>clock<sp/>source<sp/>for<sp/>clock<sp/>5.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__lrcconf__hal_1gga14c0e42f25451dfea38ea44ab756e05fa8e611e027acda8c9163f167d4c59316f" kindref="member">NRF_LRCCONF_TASK_CLKSTART_6</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_LRCCONF_Type,<sp/>TASKS_REQCLKSRC[6]),<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Request<sp/>the<sp/>clock<sp/>source<sp/>for<sp/>clock<sp/>6.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__lrcconf__hal_1gga14c0e42f25451dfea38ea44ab756e05fa297c3e6734dc32dd460316dbdf1da225" kindref="member">NRF_LRCCONF_TASK_CLKSTART_7</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_LRCCONF_Type,<sp/>TASKS_REQCLKSRC[7]),<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Request<sp/>the<sp/>clock<sp/>source<sp/>for<sp/>clock<sp/>7.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__lrcconf__hal_1gga14c0e42f25451dfea38ea44ab756e05fa152543a3a429bd9f12ad98f34b3ba97d" kindref="member">NRF_LRCCONF_TASK_CLKSTOP_0</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_LRCCONF_Type,<sp/>TASKS_STOPREQCLKSRC[0]),<sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Stop<sp/>requesting<sp/>the<sp/>clock<sp/>source<sp/>for<sp/>clock<sp/>0.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__lrcconf__hal_1gga14c0e42f25451dfea38ea44ab756e05fac83ce0f9d6cebb31262d7cdad5b20048" kindref="member">NRF_LRCCONF_TASK_CLKSTOP_1</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_LRCCONF_Type,<sp/>TASKS_STOPREQCLKSRC[1]),<sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Stop<sp/>requesting<sp/>the<sp/>clock<sp/>source<sp/>for<sp/>clock<sp/>1.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__lrcconf__hal_1gga14c0e42f25451dfea38ea44ab756e05fab49e6004b01d443b8d753568e3df38f6" kindref="member">NRF_LRCCONF_TASK_CLKSTOP_2</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_LRCCONF_Type,<sp/>TASKS_STOPREQCLKSRC[2]),<sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Stop<sp/>requesting<sp/>the<sp/>clock<sp/>source<sp/>for<sp/>clock<sp/>2.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__lrcconf__hal_1gga14c0e42f25451dfea38ea44ab756e05fa018f9de7f739e6895aad883dd4215df4" kindref="member">NRF_LRCCONF_TASK_CLKSTOP_3</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_LRCCONF_Type,<sp/>TASKS_STOPREQCLKSRC[3]),<sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Stop<sp/>requesting<sp/>the<sp/>clock<sp/>source<sp/>for<sp/>clock<sp/>3.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__lrcconf__hal_1gga14c0e42f25451dfea38ea44ab756e05faa19e6b79da12672c6b2ba2a22183327b" kindref="member">NRF_LRCCONF_TASK_CLKSTOP_4</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_LRCCONF_Type,<sp/>TASKS_STOPREQCLKSRC[4]),<sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Stop<sp/>requesting<sp/>the<sp/>clock<sp/>source<sp/>for<sp/>clock<sp/>4.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__lrcconf__hal_1gga14c0e42f25451dfea38ea44ab756e05fa880e0d3f26b0f1c73bc20a679b0138f8" kindref="member">NRF_LRCCONF_TASK_CLKSTOP_5</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_LRCCONF_Type,<sp/>TASKS_STOPREQCLKSRC[5]),<sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Stop<sp/>requesting<sp/>the<sp/>clock<sp/>source<sp/>for<sp/>clock<sp/>5.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__lrcconf__hal_1gga14c0e42f25451dfea38ea44ab756e05fa115c9f55e376fdde62c6149ee9ff29f5" kindref="member">NRF_LRCCONF_TASK_CLKSTOP_6</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_LRCCONF_Type,<sp/>TASKS_STOPREQCLKSRC[6]),<sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Stop<sp/>requesting<sp/>the<sp/>clock<sp/>source<sp/>for<sp/>clock<sp/>6.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__lrcconf__hal_1gga14c0e42f25451dfea38ea44ab756e05fa560291fbaf8ed07f75a2aaceec2451c3" kindref="member">NRF_LRCCONF_TASK_CLKSTOP_7</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_LRCCONF_Type,<sp/>TASKS_STOPREQCLKSRC[7]),<sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Stop<sp/>requesting<sp/>the<sp/>clock<sp/>source<sp/>for<sp/>clock<sp/>7.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__lrcconf__hal_1gga14c0e42f25451dfea38ea44ab756e05fac4406f22505ab0b19d5d31ab0e3395c1" kindref="member">NRF_LRCCONF_TASK_CONSTLAT_ENABLE</ref><sp/><sp/><sp/>=<sp/>offsetof(NRF_LRCCONF_Type,<sp/>TASKS_CONSTLAT.ENABLE),<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Enable<sp/>constant<sp/>latency<sp/>mode.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__lrcconf__hal_1gga14c0e42f25451dfea38ea44ab756e05fa039be60c1c4bd2de0212e4de0b9f93f2" kindref="member">NRF_LRCCONF_TASK_CONSTLAT_DISABLE</ref><sp/><sp/>=<sp/>offsetof(NRF_LRCCONF_Type,<sp/>TASKS_CONSTLAT.DISABLE),<sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Disable<sp/>constant<sp/>latency<sp/>mode.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__lrcconf__hal_1gga14c0e42f25451dfea38ea44ab756e05fa947710ff97a12e45a99d6fb98de16fcd" kindref="member">NRF_LRCCONF_TASK_SYSTEMOFFNOTREADY</ref><sp/>=<sp/>offsetof(NRF_LRCCONF_Type,<sp/>TASKS_SYSTEMOFF.NOTREADY),<sp/></highlight><highlight class="comment">/**&lt;<sp/>Indicate<sp/>being<sp/>not<sp/>ready<sp/>to<sp/>system<sp/>off<sp/>.*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__lrcconf__hal_1gga14c0e42f25451dfea38ea44ab756e05fa26dbdc3c77955af64e7497cc1035b3ea" kindref="member">NRF_LRCCONF_TASK_SYSTEMOFFREADY</ref><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_LRCCONF_Type,<sp/>TASKS_SYSTEMOFF.READY),<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Indicate<sp/>being<sp/>ready<sp/>to<sp/>system<sp/>off<sp/>.*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_LRCCONF_HAS_HFXO</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__lrcconf__hal_1gga14c0e42f25451dfea38ea44ab756e05fa65cf1e69827963e9fbee79c54802e975" kindref="member">NRF_LRCCONF_TASK_REQHFXO</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_LRCCONF_Type,<sp/>TASKS_REQHFXO),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Request<sp/>HFXO.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__lrcconf__hal_1gga14c0e42f25451dfea38ea44ab756e05fa8f1319f9a5b58c79db03d67cbe2110bc" kindref="member">NRF_LRCCONF_TASK_STOPREQHFXO</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_LRCCONF_Type,<sp/>TASKS_STOPREQHFXO),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Stop<sp/>requesting<sp/>HFXO.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal">}<sp/><ref refid="group__nrf__lrcconf__hal_1ga14c0e42f25451dfea38ea44ab756e05f" kindref="member">nrf_lrcconf_task_t</ref>;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="91"><highlight class="comment">/**<sp/>@brief<sp/>Events.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal">{</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__lrcconf__hal_1gga3b888b135075d9e82f4c23a1e3d9fcfda9ce5d83ac5dcbcd3285b9d5e21eb1502" kindref="member">NRF_LRCCONF_EVENT_CLKSTARTED_0</ref><sp/>=<sp/>offsetof(NRF_LRCCONF_Type,<sp/>EVENTS_CLKSRCSTARTED[0]),<sp/></highlight><highlight class="comment">/**&lt;<sp/>Clock<sp/>0<sp/>started.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__lrcconf__hal_1gga3b888b135075d9e82f4c23a1e3d9fcfda403f6fb165f9df898d6ae6fee29cc54b" kindref="member">NRF_LRCCONF_EVENT_CLKSTARTED_1</ref><sp/>=<sp/>offsetof(NRF_LRCCONF_Type,<sp/>EVENTS_CLKSRCSTARTED[1]),<sp/></highlight><highlight class="comment">/**&lt;<sp/>Clock<sp/>1<sp/>started.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__lrcconf__hal_1gga3b888b135075d9e82f4c23a1e3d9fcfdaa6e539618ff1555fd4ab0efa32286ba0" kindref="member">NRF_LRCCONF_EVENT_CLKSTARTED_2</ref><sp/>=<sp/>offsetof(NRF_LRCCONF_Type,<sp/>EVENTS_CLKSRCSTARTED[2]),<sp/></highlight><highlight class="comment">/**&lt;<sp/>Clock<sp/>2<sp/>started.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__lrcconf__hal_1gga3b888b135075d9e82f4c23a1e3d9fcfda02628e721e7eeb0292cf5b1aabf164da" kindref="member">NRF_LRCCONF_EVENT_CLKSTARTED_3</ref><sp/>=<sp/>offsetof(NRF_LRCCONF_Type,<sp/>EVENTS_CLKSRCSTARTED[3]),<sp/></highlight><highlight class="comment">/**&lt;<sp/>Clock<sp/>3<sp/>started.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__lrcconf__hal_1gga3b888b135075d9e82f4c23a1e3d9fcfda93c46cfae356495e11eeee37e1fb2fe1" kindref="member">NRF_LRCCONF_EVENT_CLKSTARTED_4</ref><sp/>=<sp/>offsetof(NRF_LRCCONF_Type,<sp/>EVENTS_CLKSRCSTARTED[4]),<sp/></highlight><highlight class="comment">/**&lt;<sp/>Clock<sp/>4<sp/>started.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__lrcconf__hal_1gga3b888b135075d9e82f4c23a1e3d9fcfda1eddf6e0ba87aa98155483dc700aa6fc" kindref="member">NRF_LRCCONF_EVENT_CLKSTARTED_5</ref><sp/>=<sp/>offsetof(NRF_LRCCONF_Type,<sp/>EVENTS_CLKSRCSTARTED[5]),<sp/></highlight><highlight class="comment">/**&lt;<sp/>Clock<sp/>5<sp/>started.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__lrcconf__hal_1gga3b888b135075d9e82f4c23a1e3d9fcfda4cee4ab1afe5711166592b04b7204441" kindref="member">NRF_LRCCONF_EVENT_CLKSTARTED_6</ref><sp/>=<sp/>offsetof(NRF_LRCCONF_Type,<sp/>EVENTS_CLKSRCSTARTED[6]),<sp/></highlight><highlight class="comment">/**&lt;<sp/>Clock<sp/>6<sp/>started.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__lrcconf__hal_1gga3b888b135075d9e82f4c23a1e3d9fcfda09392f2190649b652e6888ec8e3e919d" kindref="member">NRF_LRCCONF_EVENT_CLKSTARTED_7</ref><sp/>=<sp/>offsetof(NRF_LRCCONF_Type,<sp/>EVENTS_CLKSRCSTARTED[7]),<sp/></highlight><highlight class="comment">/**&lt;<sp/>Clock<sp/>7<sp/>started.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_LRCCONF_HAS_HFXO</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__lrcconf__hal_1gga3b888b135075d9e82f4c23a1e3d9fcfda70a8f205976314ac83845813e1573768" kindref="member">NRF_LRCCONF_EVENT_HFXOSTARTED</ref><sp/><sp/>=<sp/>offsetof(NRF_LRCCONF_Type,<sp/>EVENTS_HFXOSTARTED),<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>HFXO<sp/>started.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal">}<sp/><ref refid="group__nrf__lrcconf__hal_1ga3b888b135075d9e82f4c23a1e3d9fcfd" kindref="member">nrf_lrcconf_event_t</ref>;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="107"><highlight class="comment">/**<sp/>@brief<sp/>Clock<sp/>sources.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal">{</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__lrcconf__hal_1gga3baed0abacb93a058927d25226babff8a45b178dd76cc7b656211f1a63b955c84" kindref="member">NRF_LRCCONF_CLK_SRC_OPEN_LOOP</ref><sp/><sp/><sp/>=<sp/>LRCCONF_CLKSTAT_SRC_SRC_OpenLoop,<sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Open<sp/>loop<sp/>mode.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__lrcconf__hal_1gga3baed0abacb93a058927d25226babff8aa9e97d40f43b817acf63cd6dd8b67fe3" kindref="member">NRF_LRCCONF_CLK_SRC_CLOSED_LOOP</ref><sp/>=<sp/>LRCCONF_CLKSTAT_SRC_SRC_ClosedLoop,<sp/></highlight><highlight class="comment">/**&lt;<sp/>Closed<sp/>loop<sp/>mode.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal">}<sp/><ref refid="group__nrf__lrcconf__hal_1ga3baed0abacb93a058927d25226babff8" kindref="member">nrf_lrcconf_clk_src_t</ref>;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="114"><highlight class="comment">/**<sp/>@brief<sp/>Power<sp/>domain<sp/>mask.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal">{</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__lrcconf__hal_1gga1ef49ffcd36c4b8f6f562f736782fe02a4d3ade7230048218f3b1429f46c44502" kindref="member">NRF_LRCCONF_POWER_MAIN</ref><sp/><sp/><sp/><sp/><sp/>=<sp/>LRCCONF_POWERON_MAIN_Msk,<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Mask<sp/>for<sp/>main<sp/>power<sp/>domain.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__lrcconf__hal_1gga1ef49ffcd36c4b8f6f562f736782fe02a6946d26eec852b6e99acddb3d6fba0be" kindref="member">NRF_LRCCONF_POWER_DOMAIN_0</ref><sp/>=<sp/>LRCCONF_POWERON_ACTIVE0_Msk,<sp/></highlight><highlight class="comment">/**&lt;<sp/>Mask<sp/>for<sp/>power<sp/>domain<sp/>0.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__lrcconf__hal_1gga1ef49ffcd36c4b8f6f562f736782fe02aecd63e95c0dc4b2d6614b89b82e132a2" kindref="member">NRF_LRCCONF_POWER_DOMAIN_1</ref><sp/>=<sp/>LRCCONF_POWERON_ACTIVE1_Msk,<sp/></highlight><highlight class="comment">/**&lt;<sp/>Mask<sp/>for<sp/>power<sp/>domain<sp/>1.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__lrcconf__hal_1gga1ef49ffcd36c4b8f6f562f736782fe02a6082e701a2685fbb60cd81219178f72b" kindref="member">NRF_LRCCONF_POWER_DOMAIN_2</ref><sp/>=<sp/>LRCCONF_POWERON_ACTIVE2_Msk,<sp/></highlight><highlight class="comment">/**&lt;<sp/>Mask<sp/>for<sp/>power<sp/>domain<sp/>2.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__lrcconf__hal_1gga1ef49ffcd36c4b8f6f562f736782fe02a44cb4d79a793c260b6489ca61cee8bf6" kindref="member">NRF_LRCCONF_POWER_DOMAIN_3</ref><sp/>=<sp/>LRCCONF_POWERON_ACTIVE3_Msk,<sp/></highlight><highlight class="comment">/**&lt;<sp/>Mask<sp/>for<sp/>power<sp/>domain<sp/>3.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__lrcconf__hal_1gga1ef49ffcd36c4b8f6f562f736782fe02aa72cc84961db71eb328ec7af2e61f0d4" kindref="member">NRF_LRCCONF_POWER_DOMAIN_4</ref><sp/>=<sp/>LRCCONF_POWERON_ACTIVE4_Msk,<sp/></highlight><highlight class="comment">/**&lt;<sp/>Mask<sp/>for<sp/>power<sp/>domain<sp/>4.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__lrcconf__hal_1gga1ef49ffcd36c4b8f6f562f736782fe02acae2aaad1dba1f0e7e5bd3b190146479" kindref="member">NRF_LRCCONF_POWER_DOMAIN_5</ref><sp/>=<sp/>LRCCONF_POWERON_ACTIVE5_Msk,<sp/></highlight><highlight class="comment">/**&lt;<sp/>Mask<sp/>for<sp/>power<sp/>domain<sp/>5.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__lrcconf__hal_1gga1ef49ffcd36c4b8f6f562f736782fe02a264f82a51d000ec58551af674738d808" kindref="member">NRF_LRCCONF_POWER_DOMAIN_6</ref><sp/>=<sp/>LRCCONF_POWERON_ACTIVE6_Msk,<sp/></highlight><highlight class="comment">/**&lt;<sp/>Mask<sp/>for<sp/>power<sp/>domain<sp/>6.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__lrcconf__hal_1gga1ef49ffcd36c4b8f6f562f736782fe02a0179bd35122c0d07f36f3b0f141f5b8b" kindref="member">NRF_LRCCONF_POWER_DOMAIN_7</ref><sp/>=<sp/>LRCCONF_POWERON_ACTIVE7_Msk,<sp/></highlight><highlight class="comment">/**&lt;<sp/>Mask<sp/>for<sp/>power<sp/>domain<sp/>7.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal">}<sp/><ref refid="group__nrf__lrcconf__hal_1ga1ef49ffcd36c4b8f6f562f736782fe02" kindref="member">nrf_lrcconf_power_domain_mask_t</ref>;</highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="128"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="129"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>starting<sp/>a<sp/>task.</highlight></codeline>
<codeline lineno="130"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="131"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="132"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>task<sp/><sp/>Requested<sp/>task.</highlight></codeline>
<codeline lineno="133"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__lrcconf__hal_1gab0dba61f70c4ba9d4da5036ca8719d2c" kindref="member">nrf_lrcconf_task_trigger</ref>(NRF_LRCCONF_Type<sp/>*<sp/>p_reg,<sp/><ref refid="group__nrf__lrcconf__hal_1ga14c0e42f25451dfea38ea44ab756e05f" kindref="member">nrf_lrcconf_task_t</ref><sp/>task);</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="136"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="137"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>returning<sp/>the<sp/>address<sp/>of<sp/>a<sp/>task.</highlight></codeline>
<codeline lineno="138"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="139"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="140"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>task<sp/><sp/>Requested<sp/>task.</highlight></codeline>
<codeline lineno="141"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="142"><highlight class="comment"><sp/>*<sp/>@return<sp/>Address<sp/>of<sp/>the<sp/>requested<sp/>task<sp/>register.</highlight></codeline>
<codeline lineno="143"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__lrcconf__hal_1gae608a1ade95a3c88fc4de93e357208ec" kindref="member">nrf_lrcconf_task_address_get</ref>(NRF_LRCCONF_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__lrcconf__hal_1ga14c0e42f25451dfea38ea44ab756e05f" kindref="member">nrf_lrcconf_task_t</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>task);</highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="147"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="148"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>returning<sp/>the<sp/>address<sp/>of<sp/>an<sp/>event.</highlight></codeline>
<codeline lineno="149"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="150"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="151"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>event<sp/>Requested<sp/>event.</highlight></codeline>
<codeline lineno="152"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="153"><highlight class="comment"><sp/>*<sp/>@return<sp/>Address<sp/>of<sp/>the<sp/>requested<sp/>event<sp/>register.</highlight></codeline>
<codeline lineno="154"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__lrcconf__hal_1gae420bc252f372bf94526d1ffc65c0a93" kindref="member">nrf_lrcconf_event_address_get</ref>(NRF_LRCCONF_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__lrcconf__hal_1ga3b888b135075d9e82f4c23a1e3d9fcfd" kindref="member">nrf_lrcconf_event_t</ref><sp/><sp/><sp/><sp/><sp/><sp/>event);</highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="158"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="159"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>clearing<sp/>an<sp/>event.</highlight></codeline>
<codeline lineno="160"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="161"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="162"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>event<sp/>Event<sp/>to<sp/>be<sp/>cleared.</highlight></codeline>
<codeline lineno="163"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__lrcconf__hal_1gab83756b552a88dcabf1fea291fed7a03" kindref="member">nrf_lrcconf_event_clear</ref>(NRF_LRCCONF_Type<sp/>*<sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__lrcconf__hal_1ga3b888b135075d9e82f4c23a1e3d9fcfd" kindref="member">nrf_lrcconf_event_t</ref><sp/>event);</highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="167"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="168"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>retrieving<sp/>the<sp/>state<sp/>of<sp/>the<sp/>specified<sp/>event.</highlight></codeline>
<codeline lineno="169"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="170"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="171"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>event<sp/>Event<sp/>to<sp/>be<sp/>checked.</highlight></codeline>
<codeline lineno="172"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="173"><highlight class="comment"><sp/>*<sp/>@retval<sp/>true<sp/><sp/>The<sp/>event<sp/>has<sp/>been<sp/>generated.</highlight></codeline>
<codeline lineno="174"><highlight class="comment"><sp/>*<sp/>@retval<sp/>false<sp/>The<sp/>event<sp/>has<sp/>not<sp/>been<sp/>generated.</highlight></codeline>
<codeline lineno="175"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrf__lrcconf__hal_1ga054ecf316b25c91094ed9bd6905b9798" kindref="member">nrf_lrcconf_event_check</ref>(NRF_LRCCONF_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__lrcconf__hal_1ga3b888b135075d9e82f4c23a1e3d9fcfd" kindref="member">nrf_lrcconf_event_t</ref><sp/><sp/><sp/><sp/><sp/><sp/>event);</highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="179"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="180"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>CLKSTART<sp/>task<sp/>by<sp/>its<sp/>index.</highlight></codeline>
<codeline lineno="181"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="182"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>index<sp/>Index<sp/>of<sp/>the<sp/>CLKSTART<sp/>task.</highlight></codeline>
<codeline lineno="183"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="184"><highlight class="comment"><sp/>*<sp/>@return<sp/>CLKSTART<sp/>task.</highlight></codeline>
<codeline lineno="185"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal">NRF_STATIC_INLINE<sp/><ref refid="group__nrf__lrcconf__hal_1ga14c0e42f25451dfea38ea44ab756e05f" kindref="member">nrf_lrcconf_task_t</ref><sp/><ref refid="group__nrf__lrcconf__hal_1gaf8a2d5f6786959839b6d53bbf2ec73b9" kindref="member">nrf_lrcconf_clkstart_task_get</ref>(uint8_t<sp/>index);</highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="188"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="189"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>CLKSTOP<sp/>task<sp/>by<sp/>its<sp/>index.</highlight></codeline>
<codeline lineno="190"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="191"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>index<sp/>Index<sp/>of<sp/>the<sp/>CLKSTOP<sp/>task.</highlight></codeline>
<codeline lineno="192"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="193"><highlight class="comment"><sp/>*<sp/>@return<sp/>CLKSTOP<sp/>task.</highlight></codeline>
<codeline lineno="194"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal">NRF_STATIC_INLINE<sp/><ref refid="group__nrf__lrcconf__hal_1ga14c0e42f25451dfea38ea44ab756e05f" kindref="member">nrf_lrcconf_task_t</ref><sp/><ref refid="group__nrf__lrcconf__hal_1gae2062a2e2159af2900dcdb2086e431c5" kindref="member">nrf_lrcconf_clkstop_task_get</ref>(uint8_t<sp/>index);</highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="197"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="198"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>CLKSTARTED<sp/>event<sp/>by<sp/>its<sp/>index.</highlight></codeline>
<codeline lineno="199"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="200"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>index<sp/>Index<sp/>of<sp/>the<sp/>CLKSTARTED<sp/>event.</highlight></codeline>
<codeline lineno="201"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="202"><highlight class="comment"><sp/>*<sp/>@return<sp/>CLKSTARTED<sp/>event.</highlight></codeline>
<codeline lineno="203"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal">NRF_STATIC_INLINE<sp/><ref refid="group__nrf__lrcconf__hal_1ga3b888b135075d9e82f4c23a1e3d9fcfd" kindref="member">nrf_lrcconf_event_t</ref><sp/><ref refid="group__nrf__lrcconf__hal_1ga20a1eb4d5272ca2cfde7bd11bd6a9dbe" kindref="member">nrf_lrcconf_clkstarted_event_get</ref>(uint8_t<sp/>index);</highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="206"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="207"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>power<sp/>domain<sp/>on<sp/>mask<sp/>by<sp/>its<sp/>index.</highlight></codeline>
<codeline lineno="208"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="209"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>index<sp/>Index<sp/>of<sp/>the<sp/>domain.</highlight></codeline>
<codeline lineno="210"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="211"><highlight class="comment"><sp/>*<sp/>@return<sp/>Enum<sp/>value<sp/>for<sp/>domain.</highlight></codeline>
<codeline lineno="212"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal">NRF_STATIC_INLINE</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><ref refid="group__nrf__lrcconf__hal_1ga1ef49ffcd36c4b8f6f562f736782fe02" kindref="member">nrf_lrcconf_power_domain_mask_t</ref><sp/><ref refid="group__nrf__lrcconf__hal_1ga5df3d5aa929b2d295688611ceee882ad" kindref="member">nrf_lrcconf_power_domain_on_get</ref>(uint8_t<sp/>index);</highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="216"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="217"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>retrieving<sp/>the<sp/>status<sp/>indicating<sp/>whether<sp/>TASK_CLKSTART<sp/>task<sp/>has<sp/>been</highlight></codeline>
<codeline lineno="218"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>triggered.</highlight></codeline>
<codeline lineno="219"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="220"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="221"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>clock<sp/>Clock<sp/>index.</highlight></codeline>
<codeline lineno="222"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="223"><highlight class="comment"><sp/>*<sp/>@retval<sp/>true<sp/><sp/>Clock<sp/>start<sp/>task<sp/>has<sp/>been<sp/>triggered.</highlight></codeline>
<codeline lineno="224"><highlight class="comment"><sp/>*<sp/>@retval<sp/>false<sp/>Clock<sp/>start<sp/>task<sp/>has<sp/>not<sp/>been<sp/>triggered.</highlight></codeline>
<codeline lineno="225"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrf__lrcconf__hal_1ga162e0ab9670469cf61356f75ec21dc01" kindref="member">nrf_lrcconf_clock_run_status_check</ref>(NRF_LRCCONF_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>clock);</highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="229"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="230"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>retrieving<sp/>the<sp/>source<sp/>of<sp/>the<sp/>specified<sp/>clock.</highlight></codeline>
<codeline lineno="231"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="232"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="233"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>clock<sp/>Clock<sp/>index.</highlight></codeline>
<codeline lineno="234"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="235"><highlight class="comment"><sp/>*<sp/>@return<sp/>Clock<sp/>source.</highlight></codeline>
<codeline lineno="236"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal">NRF_STATIC_INLINE</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><ref refid="group__nrf__lrcconf__hal_1ga3baed0abacb93a058927d25226babff8" kindref="member">nrf_lrcconf_clk_src_t</ref><sp/><ref refid="group__nrf__lrcconf__hal_1ga8222f027fe91f95f82b8a2673f3ece1e" kindref="member">nrf_lrcconf_clock_source_get</ref>(NRF_LRCCONF_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>clock);</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="240"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="241"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>the<sp/>specified<sp/>clock<sp/>to<sp/>remain<sp/>running.</highlight></codeline>
<codeline lineno="242"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="243"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="244"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>clock<sp/><sp/><sp/><sp/><sp/>Clock<sp/>index.</highlight></codeline>
<codeline lineno="245"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>alwaysrun<sp/>True<sp/>if<sp/>forcing<sp/>the<sp/>clock<sp/>to<sp/>remain<sp/>on<sp/>is<sp/>to<sp/>be<sp/>enabled,<sp/>false<sp/>otherwise.</highlight></codeline>
<codeline lineno="246"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__lrcconf__hal_1ga14686fa9ad0904c0b6e20fc5c1f0fb81" kindref="member">nrf_lrcconf_clock_always_run_force_set</ref>(NRF_LRCCONF_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>clock,</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>alwaysrun);</highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="251"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="252"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>checking<sp/>if<sp/>the<sp/>specified<sp/>clock<sp/>is<sp/>configured<sp/>to<sp/>remain<sp/>running.</highlight></codeline>
<codeline lineno="253"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="254"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="255"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>clock<sp/>Clock<sp/>index.</highlight></codeline>
<codeline lineno="256"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="257"><highlight class="comment"><sp/>*<sp/>@retval<sp/>true<sp/><sp/>The<sp/>clock<sp/>is<sp/>configured<sp/>to<sp/>remain<sp/>on.</highlight></codeline>
<codeline lineno="258"><highlight class="comment"><sp/>*<sp/>@retval<sp/>false<sp/>The<sp/>clock<sp/>is<sp/>not<sp/>configured<sp/>to<sp/>remain<sp/>on.</highlight></codeline>
<codeline lineno="259"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrf__lrcconf__hal_1gafc54b7541b1a9c94e8ee3c961bed472a" kindref="member">nrf_lrcconf_clock_always_run_check</ref>(NRF_LRCCONF_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>clock);</highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="263"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="264"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>the<sp/>source<sp/>of<sp/>the<sp/>specified<sp/>clock.</highlight></codeline>
<codeline lineno="265"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="266"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="267"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>clock<sp/><sp/>Clock<sp/>index.</highlight></codeline>
<codeline lineno="268"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>source<sp/>Clock<sp/>source<sp/>to<sp/>be<sp/>set.</highlight></codeline>
<codeline lineno="269"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__lrcconf__hal_1gac12bf418901664551393224c9d2988a0" kindref="member">nrf_lrcconf_clock_source_set</ref>(NRF_LRCCONF_Type<sp/>*<sp/><sp/><sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>clock,</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__lrcconf__hal_1ga3baed0abacb93a058927d25226babff8" kindref="member">nrf_lrcconf_clk_src_t</ref><sp/>source);</highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="274"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="275"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>checking<sp/>the<sp/>status<sp/>of<sp/>constant<sp/>latency.</highlight></codeline>
<codeline lineno="276"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="277"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="278"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="279"><highlight class="comment"><sp/>*<sp/>@retval<sp/>true<sp/><sp/>Constant<sp/>latency<sp/>enabled.</highlight></codeline>
<codeline lineno="280"><highlight class="comment"><sp/>*<sp/>@retval<sp/>false<sp/>Constant<sp/>latency<sp/>disabled,<sp/>low<sp/>power<sp/>enabled.</highlight></codeline>
<codeline lineno="281"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrf__lrcconf__hal_1ga361a95af9fcb17f494d350b46f4930aa" kindref="member">nrf_lrcconf_constlatstat_check</ref>(NRF_LRCCONF_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="284"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="285"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>the<sp/>power<sp/>domain<sp/>to<sp/>remain<sp/>on.</highlight></codeline>
<codeline lineno="286"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="287"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/><sp/><sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="288"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>domain_mask<sp/>Mask<sp/>of<sp/>power<sp/>domains<sp/>to<sp/>remain<sp/>on.</highlight></codeline>
<codeline lineno="289"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>alwayson<sp/><sp/><sp/><sp/>True<sp/>if<sp/>forcing<sp/>the<sp/>power<sp/>domain<sp/>to<sp/>remain<sp/>on<sp/>is<sp/>to<sp/>be<sp/>enabled,</highlight></codeline>
<codeline lineno="290"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>false<sp/>otherwise.</highlight></codeline>
<codeline lineno="291"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal">NRF_STATIC_INLINE</highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__lrcconf__hal_1ga054afc49252d97e9a8f577fafa640b54" kindref="member">nrf_lrcconf_poweron_force_set</ref>(NRF_LRCCONF_Type<sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__lrcconf__hal_1ga1ef49ffcd36c4b8f6f562f736782fe02" kindref="member">nrf_lrcconf_power_domain_mask_t</ref><sp/>domain_mask,</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>alwayson);</highlight></codeline>
<codeline lineno="296"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="297"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="298"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>checking<sp/>if<sp/>the<sp/>power<sp/>domain<sp/>is<sp/>configured<sp/>to<sp/>remain<sp/>on.</highlight></codeline>
<codeline lineno="299"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="300"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="301"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>domain<sp/>Power<sp/>domain<sp/>to<sp/>be<sp/>checked.</highlight></codeline>
<codeline lineno="302"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="303"><highlight class="comment"><sp/>*<sp/>@retval<sp/>true<sp/><sp/>The<sp/>domain<sp/>is<sp/>configured<sp/>to<sp/>remain<sp/>on.</highlight></codeline>
<codeline lineno="304"><highlight class="comment"><sp/>*<sp/>@retval<sp/>false<sp/>The<sp/>domain<sp/>is<sp/>not<sp/>configured<sp/>to<sp/>remain<sp/>on.</highlight></codeline>
<codeline lineno="305"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal">NRF_STATIC_INLINE</highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrf__lrcconf__hal_1ga7ec4d74b571e7d5bed2411c769a5a6d3" kindref="member">nrf_lrcconf_poweron_force_check</ref>(NRF_LRCCONF_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__lrcconf__hal_1ga1ef49ffcd36c4b8f6f562f736782fe02" kindref="member">nrf_lrcconf_power_domain_mask_t</ref><sp/>domain);</highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="310"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="311"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>the<sp/>power<sp/>domain<sp/>to<sp/>be<sp/>retained<sp/>in<sp/>System<sp/>ON<sp/>idle.</highlight></codeline>
<codeline lineno="312"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="313"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/><sp/><sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="314"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>domain_mask<sp/>Mask<sp/>of<sp/>power<sp/>domains<sp/>to<sp/>be<sp/>retained.</highlight></codeline>
<codeline lineno="315"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>retain<sp/><sp/><sp/><sp/><sp/><sp/>True<sp/>if<sp/>power<sp/>domain<sp/>retention<sp/>is<sp/>to<sp/>be<sp/>enabled,<sp/>flase<sp/>otherwise.</highlight></codeline>
<codeline lineno="316"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal">NRF_STATIC_INLINE</highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__lrcconf__hal_1gac9d94c99ec79d8b00feb861b074b3a9b" kindref="member">nrf_lrcconf_retain_set</ref>(NRF_LRCCONF_Type<sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__lrcconf__hal_1ga1ef49ffcd36c4b8f6f562f736782fe02" kindref="member">nrf_lrcconf_power_domain_mask_t</ref><sp/>domain_mask,</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>retain);</highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="322"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="323"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>checking<sp/>if<sp/>the<sp/>power<sp/>domain<sp/>is<sp/>configured<sp/>to<sp/>be<sp/>retained<sp/>in<sp/>System<sp/>ON<sp/>idle.</highlight></codeline>
<codeline lineno="324"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="325"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="326"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>domain<sp/>Power<sp/>domain<sp/>to<sp/>be<sp/>checked.</highlight></codeline>
<codeline lineno="327"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="328"><highlight class="comment"><sp/>*<sp/>@retval<sp/>true<sp/><sp/>The<sp/>domain<sp/>is<sp/>configured<sp/>to<sp/>be<sp/>retained.</highlight></codeline>
<codeline lineno="329"><highlight class="comment"><sp/>*<sp/>@retval<sp/>false<sp/>The<sp/>domain<sp/>is<sp/>not<sp/>configured<sp/>to<sp/>be<sp/>retained.</highlight></codeline>
<codeline lineno="330"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal">NRF_STATIC_INLINE</highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrf__lrcconf__hal_1ga9e5a116d0d251c106e22e33fcb570798" kindref="member">nrf_lrcconf_retain_check</ref>(NRF_LRCCONF_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__lrcconf__hal_1ga1ef49ffcd36c4b8f6f562f736782fe02" kindref="member">nrf_lrcconf_power_domain_mask_t</ref><sp/>domain);</highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="335"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="336"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>the<sp/>waitstates<sp/>for<sp/>the<sp/>AXI<sp/>bridge<sp/>connection.</highlight></codeline>
<codeline lineno="337"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="338"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="339"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>domain<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Functional<sp/>domain<sp/>identifier.</highlight></codeline>
<codeline lineno="340"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>waitstates_num<sp/>Number<sp/>of<sp/>waitstates.</highlight></codeline>
<codeline lineno="341"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__lrcconf__hal_1gab61791d9f89260688c670bbfec5c24b0" kindref="member">nrf_lrcconf_axi_waitstates_set</ref>(NRF_LRCCONF_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>domain,</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>waitstates_num);</highlight></codeline>
<codeline lineno="345"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="346"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="347"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>the<sp/>waitstates<sp/>for<sp/>the<sp/>AXI<sp/>bridge<sp/>connection.</highlight></codeline>
<codeline lineno="348"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="349"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="350"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>domain<sp/>Functional<sp/>domain<sp/>identifier.</highlight></codeline>
<codeline lineno="351"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="352"><highlight class="comment"><sp/>*<sp/>@return<sp/>Number<sp/>of<sp/>waitstates</highlight></codeline>
<codeline lineno="353"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint8_t<sp/><ref refid="group__nrf__lrcconf__hal_1gaaa33a8ccda6e8d5e84da0d22236fd806" kindref="member">nrf_lrcconf_axi_waitstates_get</ref>(NRF_LRCCONF_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>domain);</highlight></codeline>
<codeline lineno="356"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>NRF_DECLARE_ONLY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__lrcconf__hal_1gab0dba61f70c4ba9d4da5036ca8719d2c" kindref="member">nrf_lrcconf_task_trigger</ref>(NRF_LRCCONF_Type<sp/>*<sp/>p_reg,<sp/><ref refid="group__nrf__lrcconf__hal_1ga14c0e42f25451dfea38ea44ab756e05f" kindref="member">nrf_lrcconf_task_t</ref><sp/>task)</highlight></codeline>
<codeline lineno="359"><highlight class="normal">{</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/>*((</highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint32_t<sp/>*)((uint8_t<sp/>*)p_reg<sp/>+<sp/>(uint32_t)task))<sp/>=<sp/>0x1UL;</highlight></codeline>
<codeline lineno="361"><highlight class="normal">}</highlight></codeline>
<codeline lineno="362"><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__lrcconf__hal_1gae608a1ade95a3c88fc4de93e357208ec" kindref="member">nrf_lrcconf_task_address_get</ref>(NRF_LRCCONF_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__lrcconf__hal_1ga14c0e42f25451dfea38ea44ab756e05f" kindref="member">nrf_lrcconf_task_t</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>task)</highlight></codeline>
<codeline lineno="365"><highlight class="normal">{</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(uint32_t)p_reg<sp/>+<sp/>(uint32_t)task;</highlight></codeline>
<codeline lineno="367"><highlight class="normal">}</highlight></codeline>
<codeline lineno="368"><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__lrcconf__hal_1gae420bc252f372bf94526d1ffc65c0a93" kindref="member">nrf_lrcconf_event_address_get</ref>(NRF_LRCCONF_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__lrcconf__hal_1ga3b888b135075d9e82f4c23a1e3d9fcfd" kindref="member">nrf_lrcconf_event_t</ref><sp/><sp/><sp/><sp/><sp/><sp/>event)</highlight></codeline>
<codeline lineno="371"><highlight class="normal">{</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(uint32_t)p_reg<sp/>+<sp/>(uint32_t)event;</highlight></codeline>
<codeline lineno="373"><highlight class="normal">}</highlight></codeline>
<codeline lineno="374"><highlight class="normal"></highlight></codeline>
<codeline lineno="375"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__lrcconf__hal_1gab83756b552a88dcabf1fea291fed7a03" kindref="member">nrf_lrcconf_event_clear</ref>(NRF_LRCCONF_Type<sp/>*<sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__lrcconf__hal_1ga3b888b135075d9e82f4c23a1e3d9fcfd" kindref="member">nrf_lrcconf_event_t</ref><sp/>event)</highlight></codeline>
<codeline lineno="377"><highlight class="normal">{</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/>*((</highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint32_t<sp/>*)((uint8_t<sp/>*)p_reg<sp/>+<sp/>(uint32_t)event))<sp/>=<sp/>0x0UL;</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/>nrf_event_readback((uint8_t<sp/>*)p_reg<sp/>+<sp/>(uint32_t)event);</highlight></codeline>
<codeline lineno="380"><highlight class="normal">}</highlight></codeline>
<codeline lineno="381"><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrf__lrcconf__hal_1ga054ecf316b25c91094ed9bd6905b9798" kindref="member">nrf_lrcconf_event_check</ref>(NRF_LRCCONF_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__lrcconf__hal_1ga3b888b135075d9e82f4c23a1e3d9fcfd" kindref="member">nrf_lrcconf_event_t</ref><sp/><sp/><sp/><sp/><sp/><sp/>event)</highlight></codeline>
<codeline lineno="384"><highlight class="normal">{</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>nrf_event_check(p_reg,<sp/>event);</highlight></codeline>
<codeline lineno="386"><highlight class="normal">}</highlight></codeline>
<codeline lineno="387"><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal">NRF_STATIC_INLINE<sp/><ref refid="group__nrf__lrcconf__hal_1ga14c0e42f25451dfea38ea44ab756e05f" kindref="member">nrf_lrcconf_task_t</ref><sp/><ref refid="group__nrf__lrcconf__hal_1gaf8a2d5f6786959839b6d53bbf2ec73b9" kindref="member">nrf_lrcconf_clkstart_task_get</ref>(uint8_t<sp/>index)</highlight></codeline>
<codeline lineno="389"><highlight class="normal">{</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__glue_1ga9698a3f6b6bea455d2b54a79e514ee36" kindref="member">NRFX_ASSERT</ref>(index<sp/>&lt;<sp/><ref refid="group__nrf__lrcconf__hal_1gaa791063c6a00e8f52905d1385ec2a447" kindref="member">NRF_LRCCONF_CLK_COUNT</ref>);</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="group__nrf__lrcconf__hal_1ga14c0e42f25451dfea38ea44ab756e05f" kindref="member">nrf_lrcconf_task_t</ref>)(<ref refid="group__nrfx__common_1gaf356c97c2527d9ac57b04dd9f12fc9d3" kindref="member">NRFX_OFFSETOF</ref>(NRF_LRCCONF_Type,<sp/>TASKS_REQCLKSRC[index]));</highlight></codeline>
<codeline lineno="392"><highlight class="normal">}</highlight></codeline>
<codeline lineno="393"><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal">NRF_STATIC_INLINE<sp/><ref refid="group__nrf__lrcconf__hal_1ga14c0e42f25451dfea38ea44ab756e05f" kindref="member">nrf_lrcconf_task_t</ref><sp/><ref refid="group__nrf__lrcconf__hal_1gae2062a2e2159af2900dcdb2086e431c5" kindref="member">nrf_lrcconf_clkstop_task_get</ref>(uint8_t<sp/>index)</highlight></codeline>
<codeline lineno="395"><highlight class="normal">{</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__glue_1ga9698a3f6b6bea455d2b54a79e514ee36" kindref="member">NRFX_ASSERT</ref>(index<sp/>&lt;<sp/><ref refid="group__nrf__lrcconf__hal_1gaa791063c6a00e8f52905d1385ec2a447" kindref="member">NRF_LRCCONF_CLK_COUNT</ref>);</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="group__nrf__lrcconf__hal_1ga14c0e42f25451dfea38ea44ab756e05f" kindref="member">nrf_lrcconf_task_t</ref>)(<ref refid="group__nrfx__common_1gaf356c97c2527d9ac57b04dd9f12fc9d3" kindref="member">NRFX_OFFSETOF</ref>(NRF_LRCCONF_Type,<sp/>TASKS_STOPREQCLKSRC[index]));</highlight></codeline>
<codeline lineno="398"><highlight class="normal">}</highlight></codeline>
<codeline lineno="399"><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal">NRF_STATIC_INLINE<sp/><ref refid="group__nrf__lrcconf__hal_1ga3b888b135075d9e82f4c23a1e3d9fcfd" kindref="member">nrf_lrcconf_event_t</ref><sp/><ref refid="group__nrf__lrcconf__hal_1ga20a1eb4d5272ca2cfde7bd11bd6a9dbe" kindref="member">nrf_lrcconf_clkstarted_event_get</ref>(uint8_t<sp/>index)</highlight></codeline>
<codeline lineno="401"><highlight class="normal">{</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__glue_1ga9698a3f6b6bea455d2b54a79e514ee36" kindref="member">NRFX_ASSERT</ref>(index<sp/>&lt;<sp/><ref refid="group__nrf__lrcconf__hal_1gaa791063c6a00e8f52905d1385ec2a447" kindref="member">NRF_LRCCONF_CLK_COUNT</ref>);</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="group__nrf__lrcconf__hal_1ga3b888b135075d9e82f4c23a1e3d9fcfd" kindref="member">nrf_lrcconf_event_t</ref>)(<ref refid="group__nrfx__common_1gaf356c97c2527d9ac57b04dd9f12fc9d3" kindref="member">NRFX_OFFSETOF</ref>(NRF_LRCCONF_Type,<sp/>EVENTS_CLKSRCSTARTED[index]));</highlight></codeline>
<codeline lineno="404"><highlight class="normal">}</highlight></codeline>
<codeline lineno="405"><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal">NRF_STATIC_INLINE</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><ref refid="group__nrf__lrcconf__hal_1ga1ef49ffcd36c4b8f6f562f736782fe02" kindref="member">nrf_lrcconf_power_domain_mask_t</ref><sp/><ref refid="group__nrf__lrcconf__hal_1ga5df3d5aa929b2d295688611ceee882ad" kindref="member">nrf_lrcconf_power_domain_on_get</ref>(uint8_t<sp/>index)</highlight></codeline>
<codeline lineno="408"><highlight class="normal">{</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__glue_1ga9698a3f6b6bea455d2b54a79e514ee36" kindref="member">NRFX_ASSERT</ref>(index<sp/>&lt;<sp/>8);</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="group__nrf__lrcconf__hal_1ga1ef49ffcd36c4b8f6f562f736782fe02" kindref="member">nrf_lrcconf_power_domain_mask_t</ref>)(LRCCONF_POWERON_ACTIVE0_Msk<sp/>&lt;&lt;<sp/>index);</highlight></codeline>
<codeline lineno="411"><highlight class="normal">}</highlight></codeline>
<codeline lineno="412"><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrf__lrcconf__hal_1ga162e0ab9670469cf61356f75ec21dc01" kindref="member">nrf_lrcconf_clock_run_status_check</ref>(NRF_LRCCONF_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>clock)</highlight></codeline>
<codeline lineno="415"><highlight class="normal">{</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__glue_1ga9698a3f6b6bea455d2b54a79e514ee36" kindref="member">NRFX_ASSERT</ref>(clock<sp/>&lt;<sp/><ref refid="group__nrf__lrcconf__hal_1gaa791063c6a00e8f52905d1385ec2a447" kindref="member">NRF_LRCCONF_CLK_COUNT</ref>);</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p_reg-&gt;CLKSTAT[clock].RUN<sp/>&amp;<sp/>LRCCONF_CLKSTAT_RUN_STATUS_Msk;</highlight></codeline>
<codeline lineno="418"><highlight class="normal">}</highlight></codeline>
<codeline lineno="419"><highlight class="normal"></highlight></codeline>
<codeline lineno="420"><highlight class="normal">NRF_STATIC_INLINE</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><ref refid="group__nrf__lrcconf__hal_1ga3baed0abacb93a058927d25226babff8" kindref="member">nrf_lrcconf_clk_src_t</ref><sp/><ref refid="group__nrf__lrcconf__hal_1ga8222f027fe91f95f82b8a2673f3ece1e" kindref="member">nrf_lrcconf_clock_source_get</ref>(NRF_LRCCONF_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>clock)</highlight></codeline>
<codeline lineno="423"><highlight class="normal">{</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__glue_1ga9698a3f6b6bea455d2b54a79e514ee36" kindref="member">NRFX_ASSERT</ref>(clock<sp/>&lt;<sp/><ref refid="group__nrf__lrcconf__hal_1gaa791063c6a00e8f52905d1385ec2a447" kindref="member">NRF_LRCCONF_CLK_COUNT</ref>);</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="group__nrf__lrcconf__hal_1ga3baed0abacb93a058927d25226babff8" kindref="member">nrf_lrcconf_clk_src_t</ref>)((p_reg-&gt;CLKSTAT[clock].SRC<sp/>&amp;<sp/>LRCCONF_CLKSTAT_SRC_SRC_Msk)<sp/>&gt;&gt;</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LRCCONF_CLKSTAT_SRC_SRC_Pos);</highlight></codeline>
<codeline lineno="427"><highlight class="normal">}</highlight></codeline>
<codeline lineno="428"><highlight class="normal"></highlight></codeline>
<codeline lineno="429"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__lrcconf__hal_1ga14686fa9ad0904c0b6e20fc5c1f0fb81" kindref="member">nrf_lrcconf_clock_always_run_force_set</ref>(NRF_LRCCONF_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>clock,</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>alwaysrun)</highlight></codeline>
<codeline lineno="432"><highlight class="normal">{</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__glue_1ga9698a3f6b6bea455d2b54a79e514ee36" kindref="member">NRFX_ASSERT</ref>(clock<sp/>&lt;<sp/><ref refid="group__nrf__lrcconf__hal_1gaa791063c6a00e8f52905d1385ec2a447" kindref="member">NRF_LRCCONF_CLK_COUNT</ref>);</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;CLKCTRL[clock].ALWAYSRUN<sp/>=<sp/>alwaysrun<sp/>?</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LRCCONF_CLKCTRL_ALWAYSRUN_FORCE_AlwaysRun<sp/>:</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LRCCONF_CLKCTRL_ALWAYSRUN_FORCE_Automatic;</highlight></codeline>
<codeline lineno="437"><highlight class="normal">}</highlight></codeline>
<codeline lineno="438"><highlight class="normal"></highlight></codeline>
<codeline lineno="439"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrf__lrcconf__hal_1gafc54b7541b1a9c94e8ee3c961bed472a" kindref="member">nrf_lrcconf_clock_always_run_check</ref>(NRF_LRCCONF_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>clock)</highlight></codeline>
<codeline lineno="441"><highlight class="normal">{</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__glue_1ga9698a3f6b6bea455d2b54a79e514ee36" kindref="member">NRFX_ASSERT</ref>(clock<sp/>&lt;<sp/><ref refid="group__nrf__lrcconf__hal_1gaa791063c6a00e8f52905d1385ec2a447" kindref="member">NRF_LRCCONF_CLK_COUNT</ref>);</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p_reg-&gt;CLKCTRL[clock].ALWAYSRUN<sp/>&amp;<sp/>LRCCONF_CLKCTRL_ALWAYSRUN_FORCE_AlwaysRun;</highlight></codeline>
<codeline lineno="444"><highlight class="normal">}</highlight></codeline>
<codeline lineno="445"><highlight class="normal"></highlight></codeline>
<codeline lineno="446"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__lrcconf__hal_1gac12bf418901664551393224c9d2988a0" kindref="member">nrf_lrcconf_clock_source_set</ref>(NRF_LRCCONF_Type<sp/>*<sp/><sp/><sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>clock,</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__lrcconf__hal_1ga3baed0abacb93a058927d25226babff8" kindref="member">nrf_lrcconf_clk_src_t</ref><sp/>source)</highlight></codeline>
<codeline lineno="449"><highlight class="normal">{</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__glue_1ga9698a3f6b6bea455d2b54a79e514ee36" kindref="member">NRFX_ASSERT</ref>(clock<sp/>&lt;<sp/><ref refid="group__nrf__lrcconf__hal_1gaa791063c6a00e8f52905d1385ec2a447" kindref="member">NRF_LRCCONF_CLK_COUNT</ref>);</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;CLKCTRL[clock].SRC<sp/>=<sp/>((p_reg-&gt;CLKCTRL[clock].SRC<sp/>&amp;<sp/>~LRCCONF_CLKCTRL_SRC_SRC_Msk)<sp/>|</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((source<sp/>&lt;&lt;<sp/>LRCCONF_CLKCTRL_SRC_SRC_Pos)<sp/>&amp;<sp/>LRCCONF_CLKCTRL_SRC_SRC_Msk));</highlight></codeline>
<codeline lineno="453"><highlight class="normal">}</highlight></codeline>
<codeline lineno="454"><highlight class="normal"></highlight></codeline>
<codeline lineno="455"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrf__lrcconf__hal_1ga361a95af9fcb17f494d350b46f4930aa" kindref="member">nrf_lrcconf_constlatstat_check</ref>(NRF_LRCCONF_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="456"><highlight class="normal">{</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p_reg-&gt;CONSTLATSTAT<sp/>&amp;<sp/>LRCCONF_CONSTLATSTAT_STATUS_Msk;</highlight></codeline>
<codeline lineno="458"><highlight class="normal">}</highlight></codeline>
<codeline lineno="459"><highlight class="normal"></highlight></codeline>
<codeline lineno="460"><highlight class="normal">NRF_STATIC_INLINE</highlight></codeline>
<codeline lineno="461"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__lrcconf__hal_1ga054afc49252d97e9a8f577fafa640b54" kindref="member">nrf_lrcconf_poweron_force_set</ref>(NRF_LRCCONF_Type<sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__lrcconf__hal_1ga1ef49ffcd36c4b8f6f562f736782fe02" kindref="member">nrf_lrcconf_power_domain_mask_t</ref><sp/>domain_mask,</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>alwayson)</highlight></codeline>
<codeline lineno="464"><highlight class="normal">{</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;POWERON<sp/>=<sp/>((p_reg-&gt;POWERON<sp/>&amp;<sp/>~domain_mask)<sp/>|<sp/>(alwayson<sp/>?<sp/>domain_mask<sp/>:<sp/>0));</highlight></codeline>
<codeline lineno="466"><highlight class="normal">}</highlight></codeline>
<codeline lineno="467"><highlight class="normal"></highlight></codeline>
<codeline lineno="468"><highlight class="normal">NRF_STATIC_INLINE</highlight></codeline>
<codeline lineno="469"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrf__lrcconf__hal_1ga7ec4d74b571e7d5bed2411c769a5a6d3" kindref="member">nrf_lrcconf_poweron_force_check</ref>(NRF_LRCCONF_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__lrcconf__hal_1ga1ef49ffcd36c4b8f6f562f736782fe02" kindref="member">nrf_lrcconf_power_domain_mask_t</ref><sp/>domain)</highlight></codeline>
<codeline lineno="471"><highlight class="normal">{</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p_reg-&gt;POWERON<sp/>&amp;<sp/>domain;</highlight></codeline>
<codeline lineno="473"><highlight class="normal">}</highlight></codeline>
<codeline lineno="474"><highlight class="normal"></highlight></codeline>
<codeline lineno="475"><highlight class="normal">NRF_STATIC_INLINE</highlight></codeline>
<codeline lineno="476"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__lrcconf__hal_1gac9d94c99ec79d8b00feb861b074b3a9b" kindref="member">nrf_lrcconf_retain_set</ref>(NRF_LRCCONF_Type<sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__lrcconf__hal_1ga1ef49ffcd36c4b8f6f562f736782fe02" kindref="member">nrf_lrcconf_power_domain_mask_t</ref><sp/>domain_mask,</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>retain)</highlight></codeline>
<codeline lineno="479"><highlight class="normal">{</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;RETAIN<sp/>=<sp/>((p_reg-&gt;RETAIN<sp/>&amp;<sp/>~domain_mask)<sp/>|<sp/>(retain<sp/>?<sp/>domain_mask<sp/>:<sp/>0));</highlight></codeline>
<codeline lineno="481"><highlight class="normal">}</highlight></codeline>
<codeline lineno="482"><highlight class="normal"></highlight></codeline>
<codeline lineno="483"><highlight class="normal">NRF_STATIC_INLINE</highlight></codeline>
<codeline lineno="484"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrf__lrcconf__hal_1ga9e5a116d0d251c106e22e33fcb570798" kindref="member">nrf_lrcconf_retain_check</ref>(NRF_LRCCONF_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__lrcconf__hal_1ga1ef49ffcd36c4b8f6f562f736782fe02" kindref="member">nrf_lrcconf_power_domain_mask_t</ref><sp/>domain)</highlight></codeline>
<codeline lineno="486"><highlight class="normal">{</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p_reg-&gt;RETAIN<sp/>&amp;<sp/>domain;</highlight></codeline>
<codeline lineno="488"><highlight class="normal">}</highlight></codeline>
<codeline lineno="489"><highlight class="normal"></highlight></codeline>
<codeline lineno="490"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__lrcconf__hal_1gab61791d9f89260688c670bbfec5c24b0" kindref="member">nrf_lrcconf_axi_waitstates_set</ref>(NRF_LRCCONF_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>domain,</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>waitstates_num)</highlight></codeline>
<codeline lineno="493"><highlight class="normal">{</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__glue_1ga9698a3f6b6bea455d2b54a79e514ee36" kindref="member">NRFX_ASSERT</ref>(domain<sp/>&lt;<sp/><ref refid="group__nrf__lrcconf__hal_1ga83767b1c32aeb439b88c5a70f43d48c0" kindref="member">NRF_LRCCONF_AXI_WAITSTATES_ARRAY_SIZE</ref>);</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__glue_1ga9698a3f6b6bea455d2b54a79e514ee36" kindref="member">NRFX_ASSERT</ref>(waitstates_num<sp/>&lt;=</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(LRCCONF_AX2XWAITSTATES_WAITSTATES_Msk<sp/>&gt;&gt;<sp/>LRCCONF_AX2XWAITSTATES_WAITSTATES_Pos));</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;AX2XWAITSTATES[domain]<sp/>=<sp/>((uint32_t)waitstates_num<sp/>&lt;&lt;</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LRCCONF_AX2XWAITSTATES_WAITSTATES_Pos)<sp/>&amp;</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LRCCONF_AX2XWAITSTATES_WAITSTATES_Msk;</highlight></codeline>
<codeline lineno="500"><highlight class="normal">}</highlight></codeline>
<codeline lineno="501"><highlight class="normal"></highlight></codeline>
<codeline lineno="502"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint8_t<sp/><ref refid="group__nrf__lrcconf__hal_1gaaa33a8ccda6e8d5e84da0d22236fd806" kindref="member">nrf_lrcconf_axi_waitstates_get</ref>(NRF_LRCCONF_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>domain)</highlight></codeline>
<codeline lineno="504"><highlight class="normal">{</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__glue_1ga9698a3f6b6bea455d2b54a79e514ee36" kindref="member">NRFX_ASSERT</ref>(domain<sp/>&lt;<sp/><ref refid="group__nrf__lrcconf__hal_1ga83767b1c32aeb439b88c5a70f43d48c0" kindref="member">NRF_LRCCONF_AXI_WAITSTATES_ARRAY_SIZE</ref>);</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(uint8_t)((p_reg-&gt;AX2XWAITSTATES[domain]<sp/>&amp;<sp/>LRCCONF_AX2XWAITSTATES_WAITSTATES_Msk)<sp/>&gt;&gt;</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LRCCONF_AX2XWAITSTATES_WAITSTATES_Pos);</highlight></codeline>
<codeline lineno="508"><highlight class="normal">}</highlight></codeline>
<codeline lineno="509"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRF_DECLARE_ONLY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="510"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="511"><highlight class="comment">/**<sp/>@}<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="512"><highlight class="normal"></highlight></codeline>
<codeline lineno="513"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="514"><highlight class="normal">}</highlight></codeline>
<codeline lineno="515"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="516"><highlight class="normal"></highlight></codeline>
<codeline lineno="517"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRF_LRCCONF_H__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="518"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="hal/nrf_lrcconf.h"/>
  </compounddef>
</doxygen>
