<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="nrfx__twis_8h" kind="file" language="C++">
    <compoundname>nrfx_twis.h</compoundname>
    <includes local="no">nrfx.h</includes>
    <includes refid="nrf__twis_8h" local="no">hal/nrf_twis.h</includes>
    <includes refid="nrf__gpio_8h" local="no">hal/nrf_gpio.h</includes>
    <incdepgraph>
      <node id="1">
        <label>drivers/include/nrfx_twis.h</label>
        <link refid="nrfx__twis_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>nrfx.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="structnrfx__twis__t" prot="public">nrfx_twis_t</innerclass>
    <innerclass refid="structnrfx__twis__evt__t" prot="public">nrfx_twis_evt_t</innerclass>
    <innerclass refid="structnrfx__twis__config__t" prot="public">nrfx_twis_config_t</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__nrfx__twis_1gacbd2b67adcc8746a5c351e0fc0494112" prot="public" static="no">
        <name>NRFX_TWIS_INSTANCE</name>
        <param><defname>id</defname></param>
        <initializer>{                                                            \
    .p_reg        = <ref refid="group__nrfx__utils_1ga5ea61d0994f6fb1ab5ed59d44f6a7ce9" kindref="member">NRFX_CONCAT</ref>(NRF_, TWIS, id),             \
    .drv_inst_idx = <ref refid="group__nrfx__utils_1ga5ea61d0994f6fb1ab5ed59d44f6a7ce9" kindref="member">NRFX_CONCAT</ref>(NRFX_TWIS, id, _INST_IDX),   \
}</initializer>
        <briefdescription>
<para>Macro for creating a TWIS driver instance. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/include/nrfx_twis.h" line="68" column="9" bodyfile="drivers/include/nrfx_twis.h" bodystart="68" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrfx__twis_1gad32b78bf3b806c7e124d725bd22e2275" prot="public" static="no">
        <name>NRFX_TWIS_DEFAULT_CONFIG</name>
        <param><defname>_pin_scl</defname></param>
        <param><defname>_pin_sda</defname></param>
        <param><defname>_addr</defname></param>
        <initializer>{                                                                \
    .addr               = { _addr, 0x00 },                       \
    .scl_pin            = _pin_scl,                              \
    .sda_pin            = _pin_sda,                              \
    .scl_pull           = <ref refid="group__nrf__gpio__hal_1gga07e0c8c0b30499cf0a7b79dbe62d3fcca13ffcb94eb78be866c66b5f5b516af65" kindref="member">NRF_GPIO_PIN_NOPULL</ref>,                   \
    .sda_pull           = <ref refid="group__nrf__gpio__hal_1gga07e0c8c0b30499cf0a7b79dbe62d3fcca13ffcb94eb78be866c66b5f5b516af65" kindref="member">NRF_GPIO_PIN_NOPULL</ref>,                   \
    .interrupt_priority = <ref refid="group__nrfx__twis__config_1ga517b813c0cf6d7192e031a3c070fde78" kindref="member">NRFX_TWIS_DEFAULT_CONFIG_IRQ_PRIORITY</ref>  \
}</initializer>
        <briefdescription>
<para>TWIS driver default configuration. </para>
        </briefdescription>
        <detaileddescription>
<para>This configuration sets up TWIS with the following options:<itemizedlist>
<listitem><para>second slave address disabled</para>
</listitem><listitem><para>SCL pull-up disabled</para>
</listitem><listitem><para>SDA pull-up disabled</para>
</listitem></itemizedlist>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">_pin_scl</parametername>
</parameternamelist>
<parameterdescription>
<para>SCL pin. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">_pin_sda</parametername>
</parameternamelist>
<parameterdescription>
<para>SDA pin. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">_addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Slave address on TWI bus. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/include/nrfx_twis.h" line="166" column="9" bodyfile="drivers/include/nrfx_twis.h" bodystart="166" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrfx__twis_1gabc4d6aec51dc58487d3473511f417ef8" prot="public" static="no">
        <name>NRFX_TWIS_INST_HANDLER_GET</name>
        <param><defname>idx</defname></param>
        <initializer><ref refid="group__nrfx__common_1gaa78d21b07d22f7a4bfbd1feda51ef1f4" kindref="member">NRFX_CONCAT_3</ref>(nrfx_twis_, idx, _irq_handler)</initializer>
        <briefdescription>
<para>Macro returning TWIS interrupt handler. </para>
        </briefdescription>
        <detaileddescription>
<para>param[in] idx TWIS index.</para>
<para><simplesect kind="return"><para>Interrupt handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/include/nrfx_twis.h" line="429" column="9" bodyfile="drivers/include/nrfx_twis.h" bodystart="429" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="group__nrfx__twis_1gad348c2ab24232d998f41e5bdf2366717" prot="public" static="no" strong="no">
        <type></type>
        <name>nrfx_twis_evt_type_t</name>
        <enumvalue id="group__nrfx__twis_1ggad348c2ab24232d998f41e5bdf2366717ad397b1332106627eedf9513248241845" prot="public">
          <name>NRFX_TWIS_EVT_READ_REQ</name>
          <briefdescription>
<para>Read request detected. </para>
          </briefdescription>
          <detaileddescription>
<para>If there is no buffer prepared, buf_req flag in the even will be set. Call then <ref refid="group__nrfx__twis_1gad3b8c867d9ba3922639d61c6fe7994bf" kindref="member">nrfx_twis_tx_prepare</ref> to give parameters for buffer. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrfx__twis_1ggad348c2ab24232d998f41e5bdf2366717af9d0e51ce334c53446739418aaa3e1d4" prot="public">
          <name>NRFX_TWIS_EVT_READ_DONE</name>
          <briefdescription>
<para>Read request finished - free any data. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrfx__twis_1ggad348c2ab24232d998f41e5bdf2366717a758cef050ed18e7afb532337d9e5ae0f" prot="public">
          <name>NRFX_TWIS_EVT_READ_ERROR</name>
          <briefdescription>
<para>Read request finished with error. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrfx__twis_1ggad348c2ab24232d998f41e5bdf2366717a9259a99945dd7ed43dc67a7d9fa41dcb" prot="public">
          <name>NRFX_TWIS_EVT_WRITE_REQ</name>
          <briefdescription>
<para>Write request detected. </para>
          </briefdescription>
          <detaileddescription>
<para>If there is no buffer prepared, buf_req flag in the even will be set. Call then <ref refid="group__nrfx__twis_1gacd52f801cf66efb63084e249f8f9a6b4" kindref="member">nrfx_twis_rx_prepare</ref> to give parameters for buffer. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrfx__twis_1ggad348c2ab24232d998f41e5bdf2366717a8252fae5b70a9a0189d93bbdfc8c5ec7" prot="public">
          <name>NRFX_TWIS_EVT_WRITE_DONE</name>
          <briefdescription>
<para>Write request finished - process data. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrfx__twis_1ggad348c2ab24232d998f41e5bdf2366717aaec14b4e2209d093ed43ba9c1cb3be5b" prot="public">
          <name>NRFX_TWIS_EVT_WRITE_ERROR</name>
          <briefdescription>
<para>Write request finished with error. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrfx__twis_1ggad348c2ab24232d998f41e5bdf2366717a04f758a7a46bca512b05a6817ea7f845" prot="public">
          <name>NRFX_TWIS_EVT_GENERAL_ERROR</name>
          <briefdescription>
<para>Error that happens not inside WRITE or READ transaction. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Event callback function event definitions. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/include/nrfx_twis.h" line="75" column="1" bodyfile="drivers/include/nrfx_twis.h" bodystart="76" bodyend="90"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrfx__twis_1ga22e3f400a95e5724c727190b4e23dbbc" prot="public" static="no" strong="no">
        <type></type>
        <name>nrfx_twis_error_t</name>
        <enumvalue id="group__nrfx__twis_1gga22e3f400a95e5724c727190b4e23dbbca18c22552716502b74f4f0bd365827a83" prot="public">
          <name>NRFX_TWIS_ERROR_OVERFLOW</name>
          <initializer>= NRF_TWIS_ERROR_OVERFLOW</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>RX buffer overflow detected, and prevented. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrfx__twis_1gga22e3f400a95e5724c727190b4e23dbbca100229c2c1f70211a37d28ef0e614708" prot="public">
          <name>NRFX_TWIS_ERROR_DATA_NACK</name>
          <initializer>= NRF_TWIS_ERROR_DATA_NACK</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>NACK sent after receiving a data byte. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrfx__twis_1gga22e3f400a95e5724c727190b4e23dbbca511fc5fe104bf1af384bd58c079f0f4b" prot="public">
          <name>NRFX_TWIS_ERROR_OVERREAD</name>
          <initializer>= NRF_TWIS_ERROR_OVERREAD</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>TX buffer over-read detected, and prevented. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrfx__twis_1gga22e3f400a95e5724c727190b4e23dbbca255b00d9e4c8feac8824a563e4142d06" prot="public">
          <name>NRFX_TWIS_ERROR_UNEXPECTED_EVENT</name>
          <initializer>= 1 &lt;&lt; 8</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Unexpected event detected by state machine. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Possible error sources. </para>
        </briefdescription>
        <detaileddescription>
<para>This is flag enum - values from this enum can be connected using logical or operator. <simplesect kind="note"><para>You can use directly <ref refid="group__nrf__twis__hal_1gabc33e3d9a58851106ef1654c2aefa72d" kindref="member">nrf_twis_error_t</ref>. Error type enum is redefined here because of possible future extension (eg. supporting timeouts and synchronous mode). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/include/nrfx_twis.h" line="100" column="1" bodyfile="drivers/include/nrfx_twis.h" bodystart="101" bodyend="106"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group__nrfx__twis_1ga2adf200bfadb9ea3fc4c0a1a63e07030" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* nrfx_twis_event_handler_t) (nrfx_twis_evt_t const *p_event)</definition>
        <argsstring>)(nrfx_twis_evt_t const *p_event)</argsstring>
        <name>nrfx_twis_event_handler_t</name>
        <briefdescription>
<para>TWI slave event callback function type. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event information structure. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/include/nrfx_twis.h" line="127" column="9" bodyfile="drivers/include/nrfx_twis.h" bodystart="127" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__nrfx__twis_1gac246d7ad482509c11a32810ca56e02ed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__nrfx__error__codes_1ga2449720f8fa17b22243218068459a24b" kindref="member">nrfx_err_t</ref></type>
        <definition>nrfx_err_t nrfx_twis_init</definition>
        <argsstring>(nrfx_twis_t const *p_instance, nrfx_twis_config_t const *p_config, nrfx_twis_event_handler_t event_handler)</argsstring>
        <name>nrfx_twis_init</name>
        <param>
          <type><ref refid="structnrfx__twis__t" kindref="compound">nrfx_twis_t</ref> const *</type>
          <declname>p_instance</declname>
        </param>
        <param>
          <type><ref refid="structnrfx__twis__config__t" kindref="compound">nrfx_twis_config_t</ref> const *</type>
          <declname>p_config</declname>
        </param>
        <param>
          <type><ref refid="group__nrfx__twis_1ga2adf200bfadb9ea3fc4c0a1a63e07030" kindref="member">nrfx_twis_event_handler_t</ref></type>
          <declname>event_handler</declname>
        </param>
        <briefdescription>
<para>Function for initializing the TWIS driver instance. </para>
        </briefdescription>
        <detaileddescription>
<para>Function initializes and enables the TWIS driver. <simplesect kind="attention"><para>After driver initialization enable it with <ref refid="group__nrfx__twis_1ga67e499b6c7cc0d3f05b20758711014fd" kindref="member">nrfx_twis_enable</ref>.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_instance</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the driver instance structure. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="attention"><para><emphasis>p_instance</emphasis> has to be global object. It will be used by interrupts so make it sure that object is not destroyed when function is leaving. </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_config</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure with the initial configuration. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">event_handler</parametername>
</parameternamelist>
<parameterdescription>
<para>Event handler provided by the user. If NULL, blocking mode is enabled.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>NRFX_SUCCESS</parametername>
</parameternamelist>
<parameterdescription>
<para>Initialization is successful. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NRFX_ERROR_ALREADY</parametername>
</parameternamelist>
<parameterdescription>
<para>The driver is already initialized. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NRFX_ERROR_INVALID_STATE</parametername>
</parameternamelist>
<parameterdescription>
<para>The driver is already initialized. Deprecated - use <ref refid="group__nrfx__error__codes_1gga2449720f8fa17b22243218068459a24badc3fc33e8a7dc8b9a9547fe07b437efd" kindref="member">NRFX_ERROR_ALREADY</ref> instead. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NRFX_ERROR_BUSY</parametername>
</parameternamelist>
<parameterdescription>
<para>Some other peripheral with the same instance ID is already in use. This is possible only if NRFX_PRS_ENABLED is set to a value other than zero. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/include/nrfx_twis.h" line="198" column="12" declfile="drivers/include/nrfx_twis.h" declline="198" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfx__twis_1ga05860f9773b93188a4c304e14b543b78" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__nrfx__error__codes_1ga2449720f8fa17b22243218068459a24b" kindref="member">nrfx_err_t</ref></type>
        <definition>nrfx_err_t nrfx_twis_reconfigure</definition>
        <argsstring>(nrfx_twis_t const *p_instance, nrfx_twis_config_t const *p_config)</argsstring>
        <name>nrfx_twis_reconfigure</name>
        <param>
          <type><ref refid="structnrfx__twis__t" kindref="compound">nrfx_twis_t</ref> const *</type>
          <declname>p_instance</declname>
        </param>
        <param>
          <type><ref refid="structnrfx__twis__config__t" kindref="compound">nrfx_twis_config_t</ref> const *</type>
          <declname>p_config</declname>
        </param>
        <briefdescription>
<para>Function for reconfiguring the TWIS driver instance. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_instance</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the driver instance structure. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">p_config</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure with the configuration.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>NRFX_SUCCESS</parametername>
</parameternamelist>
<parameterdescription>
<para>Reconfiguration was successful. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NRFX_ERROR_BUSY</parametername>
</parameternamelist>
<parameterdescription>
<para>The driver is during transaction. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NRFX_ERROR_INVALID_STATE</parametername>
</parameternamelist>
<parameterdescription>
<para>The driver is uninitialized. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/include/nrfx_twis.h" line="212" column="12" declfile="drivers/include/nrfx_twis.h" declline="212" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfx__twis_1gab152d0b438e2a0244ccd06e6d3da197f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nrfx_twis_uninit</definition>
        <argsstring>(nrfx_twis_t const *p_instance)</argsstring>
        <name>nrfx_twis_uninit</name>
        <param>
          <type><ref refid="structnrfx__twis__t" kindref="compound">nrfx_twis_t</ref> const *</type>
          <declname>p_instance</declname>
        </param>
        <briefdescription>
<para>Function for uninitializing the TWIS driver instance. </para>
        </briefdescription>
        <detaileddescription>
<para>Function uninitializes the peripheral and resets all registers to default values.</para>
<para><simplesect kind="note"><para>It is safe to call nrfx_twis_uninit even before initialization. Actually, <ref refid="group__nrfx__twis_1gac246d7ad482509c11a32810ca56e02ed" kindref="member">nrfx_twis_init</ref> function calls this function to make sure that TWIS state is known. </para>
</simplesect>
<simplesect kind="note"><para>If TWIS driver was in uninitialized state before calling this function, the selected pins would not be reset to default configuration.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_instance</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the driver instance structure. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/include/nrfx_twis.h" line="230" column="6" declfile="drivers/include/nrfx_twis.h" declline="230" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfx__twis_1ga3995a4040a2d868b633342cfd24fdb4f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool nrfx_twis_init_check</definition>
        <argsstring>(nrfx_twis_t const *p_instance)</argsstring>
        <name>nrfx_twis_init_check</name>
        <param>
          <type><ref refid="structnrfx__twis__t" kindref="compound">nrfx_twis_t</ref> const *</type>
          <declname>p_instance</declname>
        </param>
        <briefdescription>
<para>Function for checking if the TWIS driver instance is initialized. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_instance</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the driver instance structure.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>Instance is already initialized. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>Instance is not initialized. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/include/nrfx_twis.h" line="240" column="6" declfile="drivers/include/nrfx_twis.h" declline="240" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfx__twis_1ga67e499b6c7cc0d3f05b20758711014fd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nrfx_twis_enable</definition>
        <argsstring>(nrfx_twis_t const *p_instance)</argsstring>
        <name>nrfx_twis_enable</name>
        <param>
          <type><ref refid="structnrfx__twis__t" kindref="compound">nrfx_twis_t</ref> const *</type>
          <declname>p_instance</declname>
        </param>
        <briefdescription>
<para>Function for enabling the TWIS instance. </para>
        </briefdescription>
        <detaileddescription>
<para>This function enables the TWIS instance. Function defined if there is need for dynamically enabling and disabling the peripheral. Use <ref refid="group__nrfx__twis_1ga67e499b6c7cc0d3f05b20758711014fd" kindref="member">nrfx_twis_enable</ref> and <ref refid="group__nrfx__twis_1gaf51d1c57585ec3d51e3b77c2cd4c6052" kindref="member">nrfx_twis_disable</ref> functions. They do not change any configuration registers.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p_instance</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the driver instance structure. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/include/nrfx_twis.h" line="252" column="6" declfile="drivers/include/nrfx_twis.h" declline="252" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfx__twis_1gaf51d1c57585ec3d51e3b77c2cd4c6052" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nrfx_twis_disable</definition>
        <argsstring>(nrfx_twis_t const *p_instance)</argsstring>
        <name>nrfx_twis_disable</name>
        <param>
          <type><ref refid="structnrfx__twis__t" kindref="compound">nrfx_twis_t</ref> const *</type>
          <declname>p_instance</declname>
        </param>
        <briefdescription>
<para>Function for disabling the TWIS instance. </para>
        </briefdescription>
        <detaileddescription>
<para>This function disables the TWIS instance, which gives possibility to turn off the TWIS while holding configuration done by <ref refid="group__nrfx__twis_1gac246d7ad482509c11a32810ca56e02ed" kindref="member">nrfx_twis_init</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p_instance</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the driver instance structure. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/include/nrfx_twis.h" line="262" column="6" declfile="drivers/include/nrfx_twis.h" declline="262" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfx__twis_1ga58e5934745bfeafd3b312e73a095b02a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t nrfx_twis_error_get_and_clear</definition>
        <argsstring>(nrfx_twis_t const *p_instance)</argsstring>
        <name>nrfx_twis_error_get_and_clear</name>
        <param>
          <type><ref refid="structnrfx__twis__t" kindref="compound">nrfx_twis_t</ref> const *</type>
          <declname>p_instance</declname>
        </param>
        <briefdescription>
<para>Function for getting and clearing the last error flags. </para>
        </briefdescription>
        <detaileddescription>
<para>This function gets the information about errors. This is also the only possibility to exit from the error substate of the internal state machine. <simplesect kind="attention"><para>This function clears error state and flags.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_instance</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the driver instance structure.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Error flags defined in <ref refid="group__nrfx__twis_1ga22e3f400a95e5724c727190b4e23dbbc" kindref="member">nrfx_twis_error_t</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/include/nrfx_twis.h" line="276" column="10" declfile="drivers/include/nrfx_twis.h" declline="276" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfx__twis_1gad3b8c867d9ba3922639d61c6fe7994bf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__nrfx__error__codes_1ga2449720f8fa17b22243218068459a24b" kindref="member">nrfx_err_t</ref></type>
        <definition>nrfx_err_t nrfx_twis_tx_prepare</definition>
        <argsstring>(nrfx_twis_t const *p_instance, void const *p_buf, size_t size)</argsstring>
        <name>nrfx_twis_tx_prepare</name>
        <param>
          <type><ref refid="structnrfx__twis__t" kindref="compound">nrfx_twis_t</ref> const *</type>
          <declname>p_instance</declname>
        </param>
        <param>
          <type>void const *</type>
          <declname>p_buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Function for preparing the data for sending. </para>
        </briefdescription>
        <detaileddescription>
<para>This function is to be used in response to the <ref refid="group__nrfx__twis_1ggad348c2ab24232d998f41e5bdf2366717ad397b1332106627eedf9513248241845" kindref="member">NRFX_TWIS_EVT_READ_REQ</ref> event.</para>
<para><simplesect kind="note"><para>Peripherals using EasyDMA (including TWIS) require the transfer buffers to be placed in the Data RAM region. If this condition is not met, this function will fail with the error code NRFX_ERROR_INVALID_ADDR. </para>
</simplesect>
<simplesect kind="attention"><para>Transmission buffer must be placed in RAM.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_instance</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the driver instance structure. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">p_buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Transmission buffer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">size</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum number of bytes that master may read from buffer given.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>NRFX_SUCCESS</parametername>
</parameternamelist>
<parameterdescription>
<para>The preparation finished properly. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NRFX_ERROR_INVALID_ADDR</parametername>
</parameternamelist>
<parameterdescription>
<para>The given <emphasis>p_buf</emphasis> is not placed inside the RAM. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NRFX_ERROR_INVALID_LENGTH</parametername>
</parameternamelist>
<parameterdescription>
<para>There is a wrong value in the <emphasis>size</emphasis> parameter. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NRFX_ERROR_INVALID_STATE</parametername>
</parameternamelist>
<parameterdescription>
<para>The module is not initialized or not enabled. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/include/nrfx_twis.h" line="297" column="12" declfile="drivers/include/nrfx_twis.h" declline="297" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfx__twis_1ga2fb3c04f7aad8bf7fbd4829f6648a696" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRFX_STATIC_INLINE size_t</type>
        <definition>NRFX_STATIC_INLINE size_t nrfx_twis_tx_amount</definition>
        <argsstring>(nrfx_twis_t const *p_instance)</argsstring>
        <name>nrfx_twis_tx_amount</name>
        <param>
          <type><ref refid="structnrfx__twis__t" kindref="compound">nrfx_twis_t</ref> const *</type>
          <declname>p_instance</declname>
        </param>
        <briefdescription>
<para>Function for getting the number of transmitted bytes. </para>
        </briefdescription>
        <detaileddescription>
<para>This function returns the number of bytes sent. This function can be called after <ref refid="group__nrfx__twis_1ggad348c2ab24232d998f41e5bdf2366717af9d0e51ce334c53446739418aaa3e1d4" kindref="member">NRFX_TWIS_EVT_READ_DONE</ref> or <ref refid="group__nrfx__twis_1ggad348c2ab24232d998f41e5bdf2366717a758cef050ed18e7afb532337d9e5ae0f" kindref="member">NRFX_TWIS_EVT_READ_ERROR</ref> events.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_instance</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the driver instance structure.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Number of bytes sent. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/include/nrfx_twis.h" line="411" column="27" bodyfile="drivers/include/nrfx_twis.h" bodystart="411" bodyend="414" declfile="drivers/include/nrfx_twis.h" declline="311" declcolumn="27"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfx__twis_1gacd52f801cf66efb63084e249f8f9a6b4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__nrfx__error__codes_1ga2449720f8fa17b22243218068459a24b" kindref="member">nrfx_err_t</ref></type>
        <definition>nrfx_err_t nrfx_twis_rx_prepare</definition>
        <argsstring>(nrfx_twis_t const *p_instance, void *p_buf, size_t size)</argsstring>
        <name>nrfx_twis_rx_prepare</name>
        <param>
          <type><ref refid="structnrfx__twis__t" kindref="compound">nrfx_twis_t</ref> const *</type>
          <declname>p_instance</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>p_buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Function for preparing the data for receiving. </para>
        </briefdescription>
        <detaileddescription>
<para>This function must be used in response to the <ref refid="group__nrfx__twis_1ggad348c2ab24232d998f41e5bdf2366717a9259a99945dd7ed43dc67a7d9fa41dcb" kindref="member">NRFX_TWIS_EVT_WRITE_REQ</ref> event.</para>
<para><simplesect kind="note"><para>Peripherals using EasyDMA (including TWIS) require the transfer buffers to be placed in the Data RAM region. If this condition is not met, this function fails with the error code NRFX_ERROR_INVALID_ADDR.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_instance</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the driver instance structure. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">p_buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer that is to be filled with received data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">size</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the buffer (maximum amount of data to receive).</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>NRFX_SUCCESS</parametername>
</parameternamelist>
<parameterdescription>
<para>The preparation finished properly. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NRFX_ERROR_INVALID_ADDR</parametername>
</parameternamelist>
<parameterdescription>
<para>The given <emphasis>p_buf</emphasis> is not placed inside the RAM. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NRFX_ERROR_INVALID_LENGTH</parametername>
</parameternamelist>
<parameterdescription>
<para>There is a wrong value in the <emphasis>size</emphasis> parameter. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NRFX_ERROR_INVALID_STATE</parametername>
</parameternamelist>
<parameterdescription>
<para>The module is not initialized or not enabled. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/include/nrfx_twis.h" line="331" column="12" declfile="drivers/include/nrfx_twis.h" declline="331" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfx__twis_1ga7116782fd84dcaf937f1a42dd406a985" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRFX_STATIC_INLINE size_t</type>
        <definition>NRFX_STATIC_INLINE size_t nrfx_twis_rx_amount</definition>
        <argsstring>(nrfx_twis_t const *p_instance)</argsstring>
        <name>nrfx_twis_rx_amount</name>
        <param>
          <type><ref refid="structnrfx__twis__t" kindref="compound">nrfx_twis_t</ref> const *</type>
          <declname>p_instance</declname>
        </param>
        <briefdescription>
<para>Function for getting the number of received bytes. </para>
        </briefdescription>
        <detaileddescription>
<para>This function returns number of bytes received. It can be called after <ref refid="group__nrfx__twis_1ggad348c2ab24232d998f41e5bdf2366717a8252fae5b70a9a0189d93bbdfc8c5ec7" kindref="member">NRFX_TWIS_EVT_WRITE_DONE</ref> or <ref refid="group__nrfx__twis_1ggad348c2ab24232d998f41e5bdf2366717aaec14b4e2209d093ed43ba9c1cb3be5b" kindref="member">NRFX_TWIS_EVT_WRITE_ERROR</ref> events.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_instance</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the driver instance structure.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Number of bytes received. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/include/nrfx_twis.h" line="416" column="27" bodyfile="drivers/include/nrfx_twis.h" bodystart="416" bodyend="419" declfile="drivers/include/nrfx_twis.h" declline="345" declcolumn="27"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfx__twis_1gaaf8482aa6cc7d13a931058c0056a36a8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool nrfx_twis_is_busy</definition>
        <argsstring>(nrfx_twis_t const *p_instance)</argsstring>
        <name>nrfx_twis_is_busy</name>
        <param>
          <type><ref refid="structnrfx__twis__t" kindref="compound">nrfx_twis_t</ref> const *</type>
          <declname>p_instance</declname>
        </param>
        <briefdescription>
<para>Function for checking if the driver is busy right now. </para>
        </briefdescription>
        <detaileddescription>
<para>This function tests the actual driver substate. If the driver is in any other state than IDLE or ERROR, this function returns true.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_instance</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the driver instance structure.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>The driver is in state other than ERROR or IDLE. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>There is no transmission pending. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/include/nrfx_twis.h" line="358" column="6" declfile="drivers/include/nrfx_twis.h" declline="358" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfx__twis_1ga60df4f915140c7a3a42a0c216de0ebdf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool nrfx_twis_is_waiting_tx_buff</definition>
        <argsstring>(nrfx_twis_t const *p_instance)</argsstring>
        <name>nrfx_twis_is_waiting_tx_buff</name>
        <param>
          <type><ref refid="structnrfx__twis__t" kindref="compound">nrfx_twis_t</ref> const *</type>
          <declname>p_instance</declname>
        </param>
        <briefdescription>
<para>Function for checking if the driver is waiting for a TX buffer. </para>
        </briefdescription>
        <detaileddescription>
<para>If this function returns true, the driver is stalled expecting of the <ref refid="group__nrfx__twis_1gad3b8c867d9ba3922639d61c6fe7994bf" kindref="member">nrfx_twis_tx_prepare</ref> function call.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_instance</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the driver instance structure.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>The driver is waiting for <ref refid="group__nrfx__twis_1gad3b8c867d9ba3922639d61c6fe7994bf" kindref="member">nrfx_twis_tx_prepare</ref>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>The driver is not in the state where it is waiting for preparing a TX buffer. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/include/nrfx_twis.h" line="371" column="6" declfile="drivers/include/nrfx_twis.h" declline="371" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfx__twis_1ga7bed9d2d72e330bf5e0be50ef005e5f7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool nrfx_twis_is_waiting_rx_buff</definition>
        <argsstring>(nrfx_twis_t const *p_instance)</argsstring>
        <name>nrfx_twis_is_waiting_rx_buff</name>
        <param>
          <type><ref refid="structnrfx__twis__t" kindref="compound">nrfx_twis_t</ref> const *</type>
          <declname>p_instance</declname>
        </param>
        <briefdescription>
<para>Function for checking if the driver is waiting for an RX buffer. </para>
        </briefdescription>
        <detaileddescription>
<para>If this function returns true, the driver is stalled expecting of the <ref refid="group__nrfx__twis_1gacd52f801cf66efb63084e249f8f9a6b4" kindref="member">nrfx_twis_rx_prepare</ref> function call.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_instance</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the driver instance structure.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>The driver is waiting for <ref refid="group__nrfx__twis_1gacd52f801cf66efb63084e249f8f9a6b4" kindref="member">nrfx_twis_rx_prepare</ref>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>The driver is not in the state where it is waiting for preparing an RX buffer. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/include/nrfx_twis.h" line="384" column="6" declfile="drivers/include/nrfx_twis.h" declline="384" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfx__twis_1gae6fc5a52c462f691cb395be8b7941135" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool nrfx_twis_is_pending_tx</definition>
        <argsstring>(nrfx_twis_t const *p_instance)</argsstring>
        <name>nrfx_twis_is_pending_tx</name>
        <param>
          <type><ref refid="structnrfx__twis__t" kindref="compound">nrfx_twis_t</ref> const *</type>
          <declname>p_instance</declname>
        </param>
        <briefdescription>
<para>Function for checking if the driver is sending data. </para>
        </briefdescription>
        <detaileddescription>
<para>If this function returns true, there is an ongoing output transmission.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_instance</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the driver instance structure.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>There is an ongoing output transmission. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>The driver is in other state. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/include/nrfx_twis.h" line="396" column="6" declfile="drivers/include/nrfx_twis.h" declline="396" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfx__twis_1gad6f1affcdb959d5b1e6547e85f61ae46" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool nrfx_twis_is_pending_rx</definition>
        <argsstring>(nrfx_twis_t const *p_instance)</argsstring>
        <name>nrfx_twis_is_pending_rx</name>
        <param>
          <type><ref refid="structnrfx__twis__t" kindref="compound">nrfx_twis_t</ref> const *</type>
          <declname>p_instance</declname>
        </param>
        <briefdescription>
<para>Function for checking if the driver is receiving data. </para>
        </briefdescription>
        <detaileddescription>
<para>If this function returns true, there is an ongoing input transmission.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_instance</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the driver instance structure.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>There is an ongoing input transmission. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>The driver is in other state. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/include/nrfx_twis.h" line="408" column="6" declfile="drivers/include/nrfx_twis.h" declline="408" declcolumn="6"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2015<sp/>-<sp/>2024,<sp/>Nordic<sp/>Semiconductor<sp/>ASA</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>All<sp/>rights<sp/>reserved.</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>SPDX-License-Identifier:<sp/>BSD-3-Clause</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions<sp/>are<sp/>met:</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>1.<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright<sp/>notice,<sp/>this</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>2.<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the<sp/>distribution.</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/>3.<sp/>Neither<sp/>the<sp/>name<sp/>of<sp/>the<sp/>copyright<sp/>holder<sp/>nor<sp/>the<sp/>names<sp/>of<sp/>its</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>contributors<sp/>may<sp/>be<sp/>used<sp/>to<sp/>endorse<sp/>or<sp/>promote<sp/>products<sp/>derived<sp/>from<sp/>this</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>software<sp/>without<sp/>specific<sp/>prior<sp/>written<sp/>permission.</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>COPYRIGHT<sp/>HOLDERS<sp/>AND<sp/>CONTRIBUTORS<sp/>&quot;AS<sp/>IS&quot;</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/>AND<sp/>ANY<sp/>EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>THE</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*<sp/>ARE<sp/>DISCLAIMED.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>COPYRIGHT<sp/>HOLDER<sp/>OR<sp/>CONTRIBUTORS<sp/>BE</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,<sp/>SPECIAL,<sp/>EXEMPLARY,<sp/>OR</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>PROCUREMENT<sp/>OF</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>*<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,<sp/>DATA,<sp/>OR<sp/>PROFITS;<sp/>OR<sp/>BUSINESS</highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/>*<sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY<sp/>THEORY<sp/>OF<sp/>LIABILITY,<sp/>WHETHER<sp/>IN</highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/>*<sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR<sp/>OTHERWISE)</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/>*<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE<sp/>OF<sp/>THIS<sp/>SOFTWARE,<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/>*<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight></codeline>
<codeline lineno="32"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>NRFX_TWIS_H__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRFX_TWIS_H__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;nrfx.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;hal/nrf_twis.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;hal/nrf_gpio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="45"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="46"><highlight class="comment"><sp/>*<sp/>@defgroup<sp/>nrfx_twis<sp/>TWIS<sp/>driver</highlight></codeline>
<codeline lineno="47"><highlight class="comment"><sp/>*<sp/>@{</highlight></codeline>
<codeline lineno="48"><highlight class="comment"><sp/>*<sp/>@ingroup<sp/>nrf_twis</highlight></codeline>
<codeline lineno="49"><highlight class="comment"><sp/>*<sp/>@brief<sp/><sp/><sp/>Two<sp/>Wire<sp/>Interface<sp/>Slave<sp/>with<sp/>EasyDMA<sp/>(TWIS)<sp/>peripheral<sp/>driver.</highlight></codeline>
<codeline lineno="50"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="52"><highlight class="comment">/**<sp/>@brief<sp/>TWIS<sp/>driver<sp/>instance<sp/>data<sp/>structure.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53" refid="structnrfx__twis__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal">{</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/>NRF_TWIS_Type<sp/>*<sp/>p_reg;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Pointer<sp/>to<sp/>a<sp/>structure<sp/>with<sp/>TWIS<sp/>registers.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>drv_inst_idx;<sp/></highlight><highlight class="comment">///&lt;<sp/>Index<sp/>of<sp/>the<sp/>driver<sp/>instance.<sp/>For<sp/>internal<sp/>use<sp/>only.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal">}<sp/><ref refid="structnrfx__twis__t" kindref="compound">nrfx_twis_t</ref>;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>__NRFX_DOXYGEN__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>List<sp/>all<sp/>enabled<sp/>driver<sp/>instances<sp/>(in<sp/>the<sp/>format<sp/>NRFX_\&lt;instance_name\&gt;_INST_IDX).<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__common_1ga97a94e1334c4262979cb718e0f5e6cec" kindref="member">NRFX_INSTANCE_ENUM_LIST</ref>(TWIS)</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/>NRFX_TWIS_ENABLED_COUNT</highlight></codeline>
<codeline lineno="64"><highlight class="normal">};</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="67"><highlight class="comment">/**<sp/>@brief<sp/>Macro<sp/>for<sp/>creating<sp/>a<sp/>TWIS<sp/>driver<sp/>instance.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRFX_TWIS_INSTANCE(id)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="69"><highlight class="preprocessor">{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="70"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>.p_reg<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>NRFX_CONCAT(NRF_,<sp/>TWIS,<sp/>id),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="71"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>.drv_inst_idx<sp/>=<sp/>NRFX_CONCAT(NRFX_TWIS,<sp/>id,<sp/>_INST_IDX),<sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="72"><highlight class="preprocessor">}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="74"><highlight class="comment">/**<sp/>@brief<sp/>Event<sp/>callback<sp/>function<sp/>event<sp/>definitions.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal">{</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__twis_1ggad348c2ab24232d998f41e5bdf2366717ad397b1332106627eedf9513248241845" kindref="member">NRFX_TWIS_EVT_READ_REQ</ref>,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Read<sp/>request<sp/>detected.</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="78"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/**&lt;<sp/>If<sp/>there<sp/>is<sp/>no<sp/>buffer<sp/>prepared,<sp/>buf_req<sp/>flag<sp/>in<sp/>the<sp/>even<sp/>will<sp/>be<sp/>set.</highlight></codeline>
<codeline lineno="79"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Call<sp/>then<sp/>@ref<sp/>nrfx_twis_tx_prepare<sp/>to<sp/>give<sp/>parameters<sp/>for<sp/>buffer.</highlight></codeline>
<codeline lineno="80"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__twis_1ggad348c2ab24232d998f41e5bdf2366717af9d0e51ce334c53446739418aaa3e1d4" kindref="member">NRFX_TWIS_EVT_READ_DONE</ref>,<sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Read<sp/>request<sp/>finished<sp/>-<sp/>free<sp/>any<sp/>data.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__twis_1ggad348c2ab24232d998f41e5bdf2366717a758cef050ed18e7afb532337d9e5ae0f" kindref="member">NRFX_TWIS_EVT_READ_ERROR</ref>,<sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Read<sp/>request<sp/>finished<sp/>with<sp/>error.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__twis_1ggad348c2ab24232d998f41e5bdf2366717a9259a99945dd7ed43dc67a7d9fa41dcb" kindref="member">NRFX_TWIS_EVT_WRITE_REQ</ref>,<sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Write<sp/>request<sp/>detected.</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="84"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/**&lt;<sp/>If<sp/>there<sp/>is<sp/>no<sp/>buffer<sp/>prepared,<sp/>buf_req<sp/>flag<sp/>in<sp/>the<sp/>even<sp/>will<sp/>be<sp/>set.</highlight></codeline>
<codeline lineno="85"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Call<sp/>then<sp/>@ref<sp/>nrfx_twis_rx_prepare<sp/>to<sp/>give<sp/>parameters<sp/>for<sp/>buffer.</highlight></codeline>
<codeline lineno="86"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__twis_1ggad348c2ab24232d998f41e5bdf2366717a8252fae5b70a9a0189d93bbdfc8c5ec7" kindref="member">NRFX_TWIS_EVT_WRITE_DONE</ref>,<sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Write<sp/>request<sp/>finished<sp/>-<sp/>process<sp/>data.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__twis_1ggad348c2ab24232d998f41e5bdf2366717aaec14b4e2209d093ed43ba9c1cb3be5b" kindref="member">NRFX_TWIS_EVT_WRITE_ERROR</ref>,<sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Write<sp/>request<sp/>finished<sp/>with<sp/>error.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__twis_1ggad348c2ab24232d998f41e5bdf2366717a04f758a7a46bca512b05a6817ea7f845" kindref="member">NRFX_TWIS_EVT_GENERAL_ERROR</ref><sp/></highlight><highlight class="comment">///&lt;<sp/>Error<sp/>that<sp/>happens<sp/>not<sp/>inside<sp/>WRITE<sp/>or<sp/>READ<sp/>transaction.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal">}<sp/><ref refid="group__nrfx__twis_1gad348c2ab24232d998f41e5bdf2366717" kindref="member">nrfx_twis_evt_type_t</ref>;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="92"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="93"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Possible<sp/>error<sp/>sources.</highlight></codeline>
<codeline lineno="94"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="95"><highlight class="comment"><sp/>*<sp/>This<sp/>is<sp/>flag<sp/>enum<sp/>-<sp/>values<sp/>from<sp/>this<sp/>enum<sp/>can<sp/>be<sp/>connected<sp/>using<sp/>logical<sp/>or<sp/>operator.</highlight></codeline>
<codeline lineno="96"><highlight class="comment"><sp/>*<sp/>@note</highlight></codeline>
<codeline lineno="97"><highlight class="comment"><sp/>*<sp/>You<sp/>can<sp/>use<sp/>directly<sp/>@ref<sp/>nrf_twis_error_t.<sp/>Error<sp/>type<sp/>enum<sp/>is<sp/>redefined<sp/>here<sp/>because</highlight></codeline>
<codeline lineno="98"><highlight class="comment"><sp/>*<sp/>of<sp/>possible<sp/>future<sp/>extension<sp/>(eg.<sp/>supporting<sp/>timeouts<sp/>and<sp/>synchronous<sp/>mode).</highlight></codeline>
<codeline lineno="99"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal">{</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__twis_1gga22e3f400a95e5724c727190b4e23dbbca18c22552716502b74f4f0bd365827a83" kindref="member">NRFX_TWIS_ERROR_OVERFLOW</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><ref refid="group__nrf__twis__hal_1ggabc33e3d9a58851106ef1654c2aefa72da0b6341d2c4508eede27dd0f644732845" kindref="member">NRF_TWIS_ERROR_OVERFLOW</ref>,<sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>RX<sp/>buffer<sp/>overflow<sp/>detected,<sp/>and<sp/>prevented.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__twis_1gga22e3f400a95e5724c727190b4e23dbbca100229c2c1f70211a37d28ef0e614708" kindref="member">NRFX_TWIS_ERROR_DATA_NACK</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><ref refid="group__nrf__twis__hal_1ggabc33e3d9a58851106ef1654c2aefa72da90bf770179754d7e71301f262e22d279" kindref="member">NRF_TWIS_ERROR_DATA_NACK</ref>,<sp/></highlight><highlight class="comment">/**&lt;<sp/>NACK<sp/>sent<sp/>after<sp/>receiving<sp/>a<sp/>data<sp/>byte.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__twis_1gga22e3f400a95e5724c727190b4e23dbbca511fc5fe104bf1af384bd58c079f0f4b" kindref="member">NRFX_TWIS_ERROR_OVERREAD</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><ref refid="group__nrf__twis__hal_1ggabc33e3d9a58851106ef1654c2aefa72dafbc85d896157a7c1819cf94150237775" kindref="member">NRF_TWIS_ERROR_OVERREAD</ref>,<sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>TX<sp/>buffer<sp/>over-read<sp/>detected,<sp/>and<sp/>prevented.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__twis_1gga22e3f400a95e5724c727190b4e23dbbca255b00d9e4c8feac8824a563e4142d06" kindref="member">NRFX_TWIS_ERROR_UNEXPECTED_EVENT</ref><sp/>=<sp/>1<sp/>&lt;&lt;<sp/>8<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Unexpected<sp/>event<sp/>detected<sp/>by<sp/>state<sp/>machine.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal">}<sp/><ref refid="group__nrfx__twis_1ga22e3f400a95e5724c727190b4e23dbbc" kindref="member">nrfx_twis_error_t</ref>;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="108"><highlight class="comment">/**<sp/>@brief<sp/>TWIS<sp/>driver<sp/>event<sp/>structure.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109" refid="structnrfx__twis__evt__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal">{</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__twis_1gad348c2ab24232d998f41e5bdf2366717" kindref="member">nrfx_twis_evt_type_t</ref><sp/>type;<sp/></highlight><highlight class="comment">///&lt;<sp/>Event<sp/>type.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">union</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>buf_req;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Flag<sp/>for<sp/>@ref<sp/>NRFX_TWIS_EVT_READ_REQ<sp/>and<sp/>@ref<sp/>NRFX_TWIS_EVT_WRITE_REQ.</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="115"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/**&lt;<sp/>Information<sp/>if<sp/>transmission<sp/>buffer<sp/>requires<sp/>to<sp/>be<sp/>prepared.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>tx_amount;<sp/></highlight><highlight class="comment">///&lt;<sp/>Data<sp/>for<sp/>@ref<sp/>NRFX_TWIS_EVT_READ_DONE.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>rx_amount;<sp/></highlight><highlight class="comment">///&lt;<sp/>Data<sp/>for<sp/>@ref<sp/>NRFX_TWIS_EVT_WRITE_DONE.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>error;<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Data<sp/>for<sp/>@ref<sp/>NRFX_TWIS_EVT_GENERAL_ERROR.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/>data;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Union<sp/>to<sp/>store<sp/>event<sp/>data.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal">}<sp/><ref refid="structnrfx__twis__evt__t" kindref="compound">nrfx_twis_evt_t</ref>;</highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="122"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="123"><highlight class="comment"><sp/>*<sp/>@brief<sp/>TWI<sp/>slave<sp/>event<sp/>callback<sp/>function<sp/>type.</highlight></codeline>
<codeline lineno="124"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="125"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_event<sp/>Event<sp/>information<sp/>structure.</highlight></codeline>
<codeline lineno="126"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(*<ref refid="group__nrfx__twis_1ga2adf200bfadb9ea3fc4c0a1a63e07030" kindref="member">nrfx_twis_event_handler_t</ref>)(<ref refid="structnrfx__twis__evt__t" kindref="compound">nrfx_twis_evt_t</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_event);</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="129"><highlight class="comment">/**<sp/>@brief<sp/>Structure<sp/>for<sp/>TWIS<sp/>configuration.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="130" refid="structnrfx__twis__config__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal">{</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>addr[2];<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Set<sp/>addresses<sp/>that<sp/>this<sp/>slave<sp/>should<sp/>respond.<sp/>Set<sp/>0<sp/>to<sp/>disable.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scl_pin;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>SCL<sp/>pin<sp/>number.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sda_pin;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>SDA<sp/>pin<sp/>number.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__gpio__hal_1ga07e0c8c0b30499cf0a7b79dbe62d3fcc" kindref="member">nrf_gpio_pin_pull_t</ref><sp/>scl_pull;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>SCL<sp/>pin<sp/>pull.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__gpio__hal_1ga07e0c8c0b30499cf0a7b79dbe62d3fcc" kindref="member">nrf_gpio_pin_pull_t</ref><sp/>sda_pull;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>SDA<sp/>pin<sp/>pull.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>interrupt_priority;<sp/></highlight><highlight class="comment">///&lt;<sp/>The<sp/>priority<sp/>of<sp/>interrupt<sp/>for<sp/>the<sp/>module<sp/>to<sp/>be<sp/>set.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>skip_gpio_cfg;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Skip<sp/>GPIO<sp/>configuration<sp/>of<sp/>pins.</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="139"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/**&lt;<sp/>When<sp/>set<sp/>to<sp/>true,<sp/>the<sp/>driver<sp/>does<sp/>not<sp/>modify</highlight></codeline>
<codeline lineno="140"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>any<sp/>GPIO<sp/>parameters<sp/>of<sp/>the<sp/>used<sp/>pins.<sp/>Those</highlight></codeline>
<codeline lineno="141"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>parameters<sp/>are<sp/>supposed<sp/>to<sp/>be<sp/>configured</highlight></codeline>
<codeline lineno="142"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>externally<sp/>before<sp/>the<sp/>driver<sp/>is<sp/>initialized.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>skip_psel_cfg;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Skip<sp/>pin<sp/>selection<sp/>configuration.</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="144"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/**&lt;<sp/>When<sp/>set<sp/>to<sp/>true,<sp/>the<sp/>driver<sp/>does<sp/>not<sp/>modify</highlight></codeline>
<codeline lineno="145"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>pin<sp/>select<sp/>registers<sp/>in<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="146"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>Those<sp/>registers<sp/>are<sp/>supposed<sp/>to<sp/>be<sp/>set<sp/>up</highlight></codeline>
<codeline lineno="147"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>externally<sp/>before<sp/>the<sp/>driver<sp/>is<sp/>initialized.</highlight></codeline>
<codeline lineno="148"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>@note<sp/>When<sp/>both<sp/>GPIO<sp/>configuration<sp/>and<sp/>pin</highlight></codeline>
<codeline lineno="149"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>selection<sp/>are<sp/>to<sp/>be<sp/>skipped,<sp/>the<sp/>structure</highlight></codeline>
<codeline lineno="150"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>fields<sp/>that<sp/>specify<sp/>pins<sp/>can<sp/>be<sp/>omitted,</highlight></codeline>
<codeline lineno="151"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>as<sp/>they<sp/>are<sp/>ignored<sp/>anyway.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal">}<sp/><ref refid="structnrfx__twis__config__t" kindref="compound">nrfx_twis_config_t</ref>;</highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="154"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="155"><highlight class="comment"><sp/>*<sp/>@brief<sp/>TWIS<sp/>driver<sp/>default<sp/>configuration.</highlight></codeline>
<codeline lineno="156"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="157"><highlight class="comment"><sp/>*<sp/>This<sp/>configuration<sp/>sets<sp/>up<sp/>TWIS<sp/>with<sp/>the<sp/>following<sp/>options:</highlight></codeline>
<codeline lineno="158"><highlight class="comment"><sp/>*<sp/>-<sp/>second<sp/>slave<sp/>address<sp/>disabled</highlight></codeline>
<codeline lineno="159"><highlight class="comment"><sp/>*<sp/>-<sp/>SCL<sp/>pull-up<sp/>disabled</highlight></codeline>
<codeline lineno="160"><highlight class="comment"><sp/>*<sp/>-<sp/>SDA<sp/>pull-up<sp/>disabled</highlight></codeline>
<codeline lineno="161"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="162"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>_pin_scl<sp/>SCL<sp/>pin.</highlight></codeline>
<codeline lineno="163"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>_pin_sda<sp/>SDA<sp/>pin.</highlight></codeline>
<codeline lineno="164"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>_addr<sp/><sp/><sp/><sp/>Slave<sp/>address<sp/>on<sp/>TWI<sp/>bus.</highlight></codeline>
<codeline lineno="165"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRFX_TWIS_DEFAULT_CONFIG(_pin_scl,<sp/>_pin_sda,<sp/>_addr)<sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="167"><highlight class="preprocessor">{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="168"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>.addr<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>{<sp/>_addr,<sp/>0x00<sp/>},<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="169"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>.scl_pin<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>_pin_scl,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="170"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>.sda_pin<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>_pin_sda,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="171"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>.scl_pull<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>NRF_GPIO_PIN_NOPULL,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="172"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>.sda_pull<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>NRF_GPIO_PIN_NOPULL,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="173"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>.interrupt_priority<sp/>=<sp/>NRFX_TWIS_DEFAULT_CONFIG_IRQ_PRIORITY<sp/><sp/>\</highlight></codeline>
<codeline lineno="174"><highlight class="preprocessor">}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="176"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="177"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>initializing<sp/>the<sp/>TWIS<sp/>driver<sp/>instance.</highlight></codeline>
<codeline lineno="178"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="179"><highlight class="comment"><sp/>*<sp/>Function<sp/>initializes<sp/>and<sp/>enables<sp/>the<sp/>TWIS<sp/>driver.</highlight></codeline>
<codeline lineno="180"><highlight class="comment"><sp/>*<sp/>@attention<sp/>After<sp/>driver<sp/>initialization<sp/>enable<sp/>it<sp/>with<sp/>@ref<sp/>nrfx_twis_enable.</highlight></codeline>
<codeline lineno="181"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="182"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_instance<sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>driver<sp/>instance<sp/>structure.</highlight></codeline>
<codeline lineno="183"><highlight class="comment"><sp/>*<sp/>@attention<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>@em<sp/>p_instance<sp/>has<sp/>to<sp/>be<sp/>global<sp/>object.</highlight></codeline>
<codeline lineno="184"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>It<sp/>will<sp/>be<sp/>used<sp/>by<sp/>interrupts<sp/>so<sp/>make<sp/>it<sp/>sure<sp/>that<sp/>object</highlight></codeline>
<codeline lineno="185"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is<sp/>not<sp/>destroyed<sp/>when<sp/>function<sp/>is<sp/>leaving.</highlight></codeline>
<codeline lineno="186"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_config<sp/><sp/><sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>with<sp/>the<sp/>initial<sp/>configuration.</highlight></codeline>
<codeline lineno="187"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>event_handler<sp/>Event<sp/>handler<sp/>provided<sp/>by<sp/>the<sp/>user.<sp/>If<sp/>NULL,<sp/>blocking<sp/>mode<sp/>is<sp/>enabled.</highlight></codeline>
<codeline lineno="188"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="189"><highlight class="comment"><sp/>*<sp/>@retval<sp/>NRFX_SUCCESS<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Initialization<sp/>is<sp/>successful.</highlight></codeline>
<codeline lineno="190"><highlight class="comment"><sp/>*<sp/>@retval<sp/>NRFX_ERROR_ALREADY<sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>driver<sp/>is<sp/>already<sp/>initialized.</highlight></codeline>
<codeline lineno="191"><highlight class="comment"><sp/>*<sp/>@retval<sp/>NRFX_ERROR_INVALID_STATE<sp/>The<sp/>driver<sp/>is<sp/>already<sp/>initialized.</highlight></codeline>
<codeline lineno="192"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Deprecated<sp/>-<sp/>use<sp/>@ref<sp/>NRFX_ERROR_ALREADY<sp/>instead.</highlight></codeline>
<codeline lineno="193"><highlight class="comment"><sp/>*<sp/>@retval<sp/>NRFX_ERROR_BUSY<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Some<sp/>other<sp/>peripheral<sp/>with<sp/>the<sp/>same</highlight></codeline>
<codeline lineno="194"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>instance<sp/>ID<sp/>is<sp/>already<sp/>in<sp/>use.<sp/>This<sp/>is</highlight></codeline>
<codeline lineno="195"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>possible<sp/>only<sp/>if<sp/>NRFX_PRS_ENABLED</highlight></codeline>
<codeline lineno="196"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is<sp/>set<sp/>to<sp/>a<sp/>value<sp/>other<sp/>than<sp/>zero.</highlight></codeline>
<codeline lineno="197"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"><ref refid="group__nrfx__error__codes_1ga2449720f8fa17b22243218068459a24b" kindref="member">nrfx_err_t</ref><sp/><ref refid="group__nrfx__twis_1gac246d7ad482509c11a32810ca56e02ed" kindref="member">nrfx_twis_init</ref>(<ref refid="structnrfx__twis__t" kindref="compound">nrfx_twis_t</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_instance,</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structnrfx__twis__config__t" kindref="compound">nrfx_twis_config_t</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_config,</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrfx__twis_1ga2adf200bfadb9ea3fc4c0a1a63e07030" kindref="member">nrfx_twis_event_handler_t</ref><sp/><sp/>event_handler);</highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="202"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="203"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>reconfiguring<sp/>the<sp/>TWIS<sp/>driver<sp/>instance.</highlight></codeline>
<codeline lineno="204"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="205"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_instance<sp/>Pointer<sp/>to<sp/>the<sp/>driver<sp/>instance<sp/>structure.</highlight></codeline>
<codeline lineno="206"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_config<sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>with<sp/>the<sp/>configuration.</highlight></codeline>
<codeline lineno="207"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="208"><highlight class="comment"><sp/>*<sp/>@retval<sp/>NRFX_SUCCESS<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Reconfiguration<sp/>was<sp/>successful.</highlight></codeline>
<codeline lineno="209"><highlight class="comment"><sp/>*<sp/>@retval<sp/>NRFX_ERROR_BUSY<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>driver<sp/>is<sp/>during<sp/>transaction.</highlight></codeline>
<codeline lineno="210"><highlight class="comment"><sp/>*<sp/>@retval<sp/>NRFX_ERROR_INVALID_STATE<sp/>The<sp/>driver<sp/>is<sp/>uninitialized.</highlight></codeline>
<codeline lineno="211"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"><ref refid="group__nrfx__error__codes_1ga2449720f8fa17b22243218068459a24b" kindref="member">nrfx_err_t</ref><sp/><ref refid="group__nrfx__twis_1ga05860f9773b93188a4c304e14b543b78" kindref="member">nrfx_twis_reconfigure</ref>(<ref refid="structnrfx__twis__t" kindref="compound">nrfx_twis_t</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_instance,</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structnrfx__twis__config__t" kindref="compound">nrfx_twis_config_t</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_config);</highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="215"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="216"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>uninitializing<sp/>the<sp/>TWIS<sp/>driver<sp/>instance.</highlight></codeline>
<codeline lineno="217"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="218"><highlight class="comment"><sp/>*<sp/>Function<sp/>uninitializes<sp/>the<sp/>peripheral<sp/>and<sp/>resets<sp/>all<sp/>registers<sp/>to<sp/>default<sp/>values.</highlight></codeline>
<codeline lineno="219"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="220"><highlight class="comment"><sp/>*<sp/>@note</highlight></codeline>
<codeline lineno="221"><highlight class="comment"><sp/>*<sp/>It<sp/>is<sp/>safe<sp/>to<sp/>call<sp/>nrfx_twis_uninit<sp/>even<sp/>before<sp/>initialization.</highlight></codeline>
<codeline lineno="222"><highlight class="comment"><sp/>*<sp/>Actually,<sp/>@ref<sp/>nrfx_twis_init<sp/>function<sp/>calls<sp/>this<sp/>function<sp/>to</highlight></codeline>
<codeline lineno="223"><highlight class="comment"><sp/>*<sp/>make<sp/>sure<sp/>that<sp/>TWIS<sp/>state<sp/>is<sp/>known.</highlight></codeline>
<codeline lineno="224"><highlight class="comment"><sp/>*<sp/>@note</highlight></codeline>
<codeline lineno="225"><highlight class="comment"><sp/>*<sp/>If<sp/>TWIS<sp/>driver<sp/>was<sp/>in<sp/>uninitialized<sp/>state<sp/>before<sp/>calling<sp/>this<sp/>function,</highlight></codeline>
<codeline lineno="226"><highlight class="comment"><sp/>*<sp/>the<sp/>selected<sp/>pins<sp/>would<sp/>not<sp/>be<sp/>reset<sp/>to<sp/>default<sp/>configuration.</highlight></codeline>
<codeline lineno="227"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="228"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_instance<sp/>Pointer<sp/>to<sp/>the<sp/>driver<sp/>instance<sp/>structure.</highlight></codeline>
<codeline lineno="229"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrfx__twis_1gab152d0b438e2a0244ccd06e6d3da197f" kindref="member">nrfx_twis_uninit</ref>(<ref refid="structnrfx__twis__t" kindref="compound">nrfx_twis_t</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_instance);</highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="232"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="233"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>checking<sp/>if<sp/>the<sp/>TWIS<sp/>driver<sp/>instance<sp/>is<sp/>initialized.</highlight></codeline>
<codeline lineno="234"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="235"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_instance<sp/>Pointer<sp/>to<sp/>the<sp/>driver<sp/>instance<sp/>structure.</highlight></codeline>
<codeline lineno="236"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="237"><highlight class="comment"><sp/>*<sp/>@retval<sp/>true<sp/><sp/>Instance<sp/>is<sp/>already<sp/>initialized.</highlight></codeline>
<codeline lineno="238"><highlight class="comment"><sp/>*<sp/>@retval<sp/>false<sp/>Instance<sp/>is<sp/>not<sp/>initialized.</highlight></codeline>
<codeline lineno="239"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrfx__twis_1ga3995a4040a2d868b633342cfd24fdb4f" kindref="member">nrfx_twis_init_check</ref>(<ref refid="structnrfx__twis__t" kindref="compound">nrfx_twis_t</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_instance);</highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="242"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="243"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>enabling<sp/>the<sp/>TWIS<sp/>instance.</highlight></codeline>
<codeline lineno="244"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="245"><highlight class="comment"><sp/>*<sp/>This<sp/>function<sp/>enables<sp/>the<sp/>TWIS<sp/>instance.</highlight></codeline>
<codeline lineno="246"><highlight class="comment"><sp/>*<sp/>Function<sp/>defined<sp/>if<sp/>there<sp/>is<sp/>need<sp/>for<sp/>dynamically<sp/>enabling<sp/>and<sp/>disabling<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="247"><highlight class="comment"><sp/>*<sp/>Use<sp/>@ref<sp/>nrfx_twis_enable<sp/>and<sp/>@ref<sp/>nrfx_twis_disable<sp/>functions.</highlight></codeline>
<codeline lineno="248"><highlight class="comment"><sp/>*<sp/>They<sp/>do<sp/>not<sp/>change<sp/>any<sp/>configuration<sp/>registers.</highlight></codeline>
<codeline lineno="249"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="250"><highlight class="comment"><sp/>*<sp/>@param<sp/>p_instance<sp/>Pointer<sp/>to<sp/>the<sp/>driver<sp/>instance<sp/>structure.</highlight></codeline>
<codeline lineno="251"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrfx__twis_1ga67e499b6c7cc0d3f05b20758711014fd" kindref="member">nrfx_twis_enable</ref>(<ref refid="structnrfx__twis__t" kindref="compound">nrfx_twis_t</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_instance);</highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="254"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="255"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>disabling<sp/>the<sp/>TWIS<sp/>instance.</highlight></codeline>
<codeline lineno="256"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="257"><highlight class="comment"><sp/>*<sp/>This<sp/>function<sp/>disables<sp/>the<sp/>TWIS<sp/>instance,<sp/>which<sp/>gives<sp/>possibility<sp/>to<sp/>turn<sp/>off<sp/>the<sp/>TWIS<sp/>while</highlight></codeline>
<codeline lineno="258"><highlight class="comment"><sp/>*<sp/>holding<sp/>configuration<sp/>done<sp/>by<sp/>@ref<sp/>nrfx_twis_init.</highlight></codeline>
<codeline lineno="259"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="260"><highlight class="comment"><sp/>*<sp/>@param<sp/>p_instance<sp/>Pointer<sp/>to<sp/>the<sp/>driver<sp/>instance<sp/>structure.</highlight></codeline>
<codeline lineno="261"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrfx__twis_1gaf51d1c57585ec3d51e3b77c2cd4c6052" kindref="member">nrfx_twis_disable</ref>(<ref refid="structnrfx__twis__t" kindref="compound">nrfx_twis_t</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_instance);</highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="264"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="265"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>and<sp/>clearing<sp/>the<sp/>last<sp/>error<sp/>flags.</highlight></codeline>
<codeline lineno="266"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="267"><highlight class="comment"><sp/>*<sp/>This<sp/>function<sp/>gets<sp/>the<sp/>information<sp/>about<sp/>errors.</highlight></codeline>
<codeline lineno="268"><highlight class="comment"><sp/>*<sp/>This<sp/>is<sp/>also<sp/>the<sp/>only<sp/>possibility<sp/>to<sp/>exit<sp/>from<sp/>the<sp/>error<sp/>substate<sp/>of<sp/>the<sp/>internal<sp/>state<sp/>machine.</highlight></codeline>
<codeline lineno="269"><highlight class="comment"><sp/>*<sp/>@attention</highlight></codeline>
<codeline lineno="270"><highlight class="comment"><sp/>*<sp/>This<sp/>function<sp/>clears<sp/>error<sp/>state<sp/>and<sp/>flags.</highlight></codeline>
<codeline lineno="271"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="272"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_instance<sp/>Pointer<sp/>to<sp/>the<sp/>driver<sp/>instance<sp/>structure.</highlight></codeline>
<codeline lineno="273"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="274"><highlight class="comment"><sp/>*<sp/>@return<sp/>Error<sp/>flags<sp/>defined<sp/>in<sp/>@ref<sp/>nrfx_twis_error_t.</highlight></codeline>
<codeline lineno="275"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal">uint32_t<sp/><ref refid="group__nrfx__twis_1ga58e5934745bfeafd3b312e73a095b02a" kindref="member">nrfx_twis_error_get_and_clear</ref>(<ref refid="structnrfx__twis__t" kindref="compound">nrfx_twis_t</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_instance);</highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="278"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="279"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>preparing<sp/>the<sp/>data<sp/>for<sp/>sending.</highlight></codeline>
<codeline lineno="280"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="281"><highlight class="comment"><sp/>*<sp/>This<sp/>function<sp/>is<sp/>to<sp/>be<sp/>used<sp/>in<sp/>response<sp/>to<sp/>the<sp/>@ref<sp/>NRFX_TWIS_EVT_READ_REQ<sp/>event.</highlight></codeline>
<codeline lineno="282"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="283"><highlight class="comment"><sp/>*<sp/>@note<sp/>Peripherals<sp/>using<sp/>EasyDMA<sp/>(including<sp/>TWIS)<sp/>require<sp/>the<sp/>transfer<sp/>buffers</highlight></codeline>
<codeline lineno="284"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>to<sp/>be<sp/>placed<sp/>in<sp/>the<sp/>Data<sp/>RAM<sp/>region.<sp/>If<sp/>this<sp/>condition<sp/>is<sp/>not<sp/>met,</highlight></codeline>
<codeline lineno="285"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>this<sp/>function<sp/>will<sp/>fail<sp/>with<sp/>the<sp/>error<sp/>code<sp/>NRFX_ERROR_INVALID_ADDR.</highlight></codeline>
<codeline lineno="286"><highlight class="comment"><sp/>*<sp/>@attention<sp/>Transmission<sp/>buffer<sp/>must<sp/>be<sp/>placed<sp/>in<sp/>RAM.</highlight></codeline>
<codeline lineno="287"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="288"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_instance<sp/>Pointer<sp/>to<sp/>the<sp/>driver<sp/>instance<sp/>structure.</highlight></codeline>
<codeline lineno="289"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_buf<sp/><sp/><sp/><sp/><sp/><sp/>Transmission<sp/>buffer.</highlight></codeline>
<codeline lineno="290"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>size<sp/><sp/><sp/><sp/><sp/><sp/><sp/>Maximum<sp/>number<sp/>of<sp/>bytes<sp/>that<sp/>master<sp/>may<sp/>read<sp/>from<sp/>buffer<sp/>given.</highlight></codeline>
<codeline lineno="291"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="292"><highlight class="comment"><sp/>*<sp/>@retval<sp/>NRFX_SUCCESS<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>preparation<sp/>finished<sp/>properly.</highlight></codeline>
<codeline lineno="293"><highlight class="comment"><sp/>*<sp/>@retval<sp/>NRFX_ERROR_INVALID_ADDR<sp/><sp/><sp/>The<sp/>given<sp/>@em<sp/>p_buf<sp/>is<sp/>not<sp/>placed<sp/>inside<sp/>the<sp/>RAM.</highlight></codeline>
<codeline lineno="294"><highlight class="comment"><sp/>*<sp/>@retval<sp/>NRFX_ERROR_INVALID_LENGTH<sp/>There<sp/>is<sp/>a<sp/>wrong<sp/>value<sp/>in<sp/>the<sp/>@em<sp/>size<sp/>parameter.</highlight></codeline>
<codeline lineno="295"><highlight class="comment"><sp/>*<sp/>@retval<sp/>NRFX_ERROR_INVALID_STATE<sp/><sp/>The<sp/>module<sp/>is<sp/>not<sp/>initialized<sp/>or<sp/>not<sp/>enabled.</highlight></codeline>
<codeline lineno="296"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"><ref refid="group__nrfx__error__codes_1ga2449720f8fa17b22243218068459a24b" kindref="member">nrfx_err_t</ref><sp/><ref refid="group__nrfx__twis_1gad3b8c867d9ba3922639d61c6fe7994bf" kindref="member">nrfx_twis_tx_prepare</ref>(<ref refid="structnrfx__twis__t" kindref="compound">nrfx_twis_t</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_instance,</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_buf,</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>size);</highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="301"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="302"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>the<sp/>number<sp/>of<sp/>transmitted<sp/>bytes.</highlight></codeline>
<codeline lineno="303"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="304"><highlight class="comment"><sp/>*<sp/>This<sp/>function<sp/>returns<sp/>the<sp/>number<sp/>of<sp/>bytes<sp/>sent.</highlight></codeline>
<codeline lineno="305"><highlight class="comment"><sp/>*<sp/>This<sp/>function<sp/>can<sp/>be<sp/>called<sp/>after<sp/>@ref<sp/>NRFX_TWIS_EVT_READ_DONE<sp/>or<sp/>@ref<sp/>NRFX_TWIS_EVT_READ_ERROR<sp/>events.</highlight></codeline>
<codeline lineno="306"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="307"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_instance<sp/>Pointer<sp/>to<sp/>the<sp/>driver<sp/>instance<sp/>structure.</highlight></codeline>
<codeline lineno="308"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="309"><highlight class="comment"><sp/>*<sp/>@return<sp/>Number<sp/>of<sp/>bytes<sp/>sent.</highlight></codeline>
<codeline lineno="310"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal">NRFX_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="group__nrfx__twis_1ga2fb3c04f7aad8bf7fbd4829f6648a696" kindref="member">nrfx_twis_tx_amount</ref>(<ref refid="structnrfx__twis__t" kindref="compound">nrfx_twis_t</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_instance);</highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="313"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="314"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>preparing<sp/>the<sp/>data<sp/>for<sp/>receiving.</highlight></codeline>
<codeline lineno="315"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="316"><highlight class="comment"><sp/>*<sp/>This<sp/>function<sp/>must<sp/>be<sp/>used<sp/>in<sp/>response<sp/>to<sp/>the<sp/>@ref<sp/>NRFX_TWIS_EVT_WRITE_REQ<sp/>event.</highlight></codeline>
<codeline lineno="317"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="318"><highlight class="comment"><sp/>*<sp/>@note<sp/>Peripherals<sp/>using<sp/>EasyDMA<sp/>(including<sp/>TWIS)<sp/>require<sp/>the<sp/>transfer<sp/>buffers</highlight></codeline>
<codeline lineno="319"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>to<sp/>be<sp/>placed<sp/>in<sp/>the<sp/>Data<sp/>RAM<sp/>region.<sp/>If<sp/>this<sp/>condition<sp/>is<sp/>not<sp/>met,</highlight></codeline>
<codeline lineno="320"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>this<sp/>function<sp/>fails<sp/>with<sp/>the<sp/>error<sp/>code<sp/>NRFX_ERROR_INVALID_ADDR.</highlight></codeline>
<codeline lineno="321"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="322"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_instance<sp/>Pointer<sp/>to<sp/>the<sp/>driver<sp/>instance<sp/>structure.</highlight></codeline>
<codeline lineno="323"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_buf<sp/><sp/><sp/><sp/><sp/><sp/>Buffer<sp/>that<sp/>is<sp/>to<sp/>be<sp/>filled<sp/>with<sp/>received<sp/>data.</highlight></codeline>
<codeline lineno="324"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>size<sp/><sp/><sp/><sp/><sp/><sp/><sp/>Size<sp/>of<sp/>the<sp/>buffer<sp/>(maximum<sp/>amount<sp/>of<sp/>data<sp/>to<sp/>receive).</highlight></codeline>
<codeline lineno="325"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="326"><highlight class="comment"><sp/>*<sp/>@retval<sp/>NRFX_SUCCESS<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>preparation<sp/>finished<sp/>properly.</highlight></codeline>
<codeline lineno="327"><highlight class="comment"><sp/>*<sp/>@retval<sp/>NRFX_ERROR_INVALID_ADDR<sp/><sp/><sp/>The<sp/>given<sp/>@em<sp/>p_buf<sp/>is<sp/>not<sp/>placed<sp/>inside<sp/>the<sp/>RAM.</highlight></codeline>
<codeline lineno="328"><highlight class="comment"><sp/>*<sp/>@retval<sp/>NRFX_ERROR_INVALID_LENGTH<sp/>There<sp/>is<sp/>a<sp/>wrong<sp/>value<sp/>in<sp/>the<sp/>@em<sp/>size<sp/>parameter.</highlight></codeline>
<codeline lineno="329"><highlight class="comment"><sp/>*<sp/>@retval<sp/>NRFX_ERROR_INVALID_STATE<sp/><sp/>The<sp/>module<sp/>is<sp/>not<sp/>initialized<sp/>or<sp/>not<sp/>enabled.</highlight></codeline>
<codeline lineno="330"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal"><ref refid="group__nrfx__error__codes_1ga2449720f8fa17b22243218068459a24b" kindref="member">nrfx_err_t</ref><sp/><ref refid="group__nrfx__twis_1gacd52f801cf66efb63084e249f8f9a6b4" kindref="member">nrfx_twis_rx_prepare</ref>(<ref refid="structnrfx__twis__t" kindref="compound">nrfx_twis_t</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_instance,</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_buf,</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>size);</highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="335"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="336"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>the<sp/>number<sp/>of<sp/>received<sp/>bytes.</highlight></codeline>
<codeline lineno="337"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="338"><highlight class="comment"><sp/>*<sp/>This<sp/>function<sp/>returns<sp/>number<sp/>of<sp/>bytes<sp/>received.</highlight></codeline>
<codeline lineno="339"><highlight class="comment"><sp/>*<sp/>It<sp/>can<sp/>be<sp/>called<sp/>after<sp/>@ref<sp/>NRFX_TWIS_EVT_WRITE_DONE<sp/>or<sp/>@ref<sp/>NRFX_TWIS_EVT_WRITE_ERROR<sp/>events.</highlight></codeline>
<codeline lineno="340"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="341"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_instance<sp/>Pointer<sp/>to<sp/>the<sp/>driver<sp/>instance<sp/>structure.</highlight></codeline>
<codeline lineno="342"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="343"><highlight class="comment"><sp/>*<sp/>@return<sp/>Number<sp/>of<sp/>bytes<sp/>received.</highlight></codeline>
<codeline lineno="344"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal">NRFX_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="group__nrfx__twis_1ga7116782fd84dcaf937f1a42dd406a985" kindref="member">nrfx_twis_rx_amount</ref>(<ref refid="structnrfx__twis__t" kindref="compound">nrfx_twis_t</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_instance);</highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="347"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="348"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>checking<sp/>if<sp/>the<sp/>driver<sp/>is<sp/>busy<sp/>right<sp/>now.</highlight></codeline>
<codeline lineno="349"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="350"><highlight class="comment"><sp/>*<sp/>This<sp/>function<sp/>tests<sp/>the<sp/>actual<sp/>driver<sp/>substate.</highlight></codeline>
<codeline lineno="351"><highlight class="comment"><sp/>*<sp/>If<sp/>the<sp/>driver<sp/>is<sp/>in<sp/>any<sp/>other<sp/>state<sp/>than<sp/>IDLE<sp/>or<sp/>ERROR,<sp/>this<sp/>function<sp/>returns<sp/>true.</highlight></codeline>
<codeline lineno="352"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="353"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_instance<sp/>Pointer<sp/>to<sp/>the<sp/>driver<sp/>instance<sp/>structure.</highlight></codeline>
<codeline lineno="354"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="355"><highlight class="comment"><sp/>*<sp/>@retval<sp/>true<sp/><sp/>The<sp/>driver<sp/>is<sp/>in<sp/>state<sp/>other<sp/>than<sp/>ERROR<sp/>or<sp/>IDLE.</highlight></codeline>
<codeline lineno="356"><highlight class="comment"><sp/>*<sp/>@retval<sp/>false<sp/>There<sp/>is<sp/>no<sp/>transmission<sp/>pending.</highlight></codeline>
<codeline lineno="357"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrfx__twis_1gaaf8482aa6cc7d13a931058c0056a36a8" kindref="member">nrfx_twis_is_busy</ref>(<ref refid="structnrfx__twis__t" kindref="compound">nrfx_twis_t</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_instance);</highlight></codeline>
<codeline lineno="359"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="360"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="361"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>checking<sp/>if<sp/>the<sp/>driver<sp/>is<sp/>waiting<sp/>for<sp/>a<sp/>TX<sp/>buffer.</highlight></codeline>
<codeline lineno="362"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="363"><highlight class="comment"><sp/>*<sp/>If<sp/>this<sp/>function<sp/>returns<sp/>true,<sp/>the<sp/>driver<sp/>is<sp/>stalled<sp/>expecting</highlight></codeline>
<codeline lineno="364"><highlight class="comment"><sp/>*<sp/>of<sp/>the<sp/>@ref<sp/>nrfx_twis_tx_prepare<sp/>function<sp/>call.</highlight></codeline>
<codeline lineno="365"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="366"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_instance<sp/>Pointer<sp/>to<sp/>the<sp/>driver<sp/>instance<sp/>structure.</highlight></codeline>
<codeline lineno="367"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="368"><highlight class="comment"><sp/>*<sp/>@retval<sp/>true<sp/><sp/>The<sp/>driver<sp/>is<sp/>waiting<sp/>for<sp/>@ref<sp/>nrfx_twis_tx_prepare.</highlight></codeline>
<codeline lineno="369"><highlight class="comment"><sp/>*<sp/>@retval<sp/>false<sp/>The<sp/>driver<sp/>is<sp/>not<sp/>in<sp/>the<sp/>state<sp/>where<sp/>it<sp/>is<sp/>waiting<sp/>for<sp/>preparing<sp/>a<sp/>TX<sp/>buffer.</highlight></codeline>
<codeline lineno="370"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrfx__twis_1ga60df4f915140c7a3a42a0c216de0ebdf" kindref="member">nrfx_twis_is_waiting_tx_buff</ref>(<ref refid="structnrfx__twis__t" kindref="compound">nrfx_twis_t</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_instance);</highlight></codeline>
<codeline lineno="372"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="373"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="374"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>checking<sp/>if<sp/>the<sp/>driver<sp/>is<sp/>waiting<sp/>for<sp/>an<sp/>RX<sp/>buffer.</highlight></codeline>
<codeline lineno="375"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="376"><highlight class="comment"><sp/>*<sp/>If<sp/>this<sp/>function<sp/>returns<sp/>true,<sp/>the<sp/>driver<sp/>is<sp/>stalled<sp/>expecting</highlight></codeline>
<codeline lineno="377"><highlight class="comment"><sp/>*<sp/>of<sp/>the<sp/>@ref<sp/>nrfx_twis_rx_prepare<sp/>function<sp/>call.</highlight></codeline>
<codeline lineno="378"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="379"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_instance<sp/>Pointer<sp/>to<sp/>the<sp/>driver<sp/>instance<sp/>structure.</highlight></codeline>
<codeline lineno="380"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="381"><highlight class="comment"><sp/>*<sp/>@retval<sp/>true<sp/><sp/>The<sp/>driver<sp/>is<sp/>waiting<sp/>for<sp/>@ref<sp/>nrfx_twis_rx_prepare.</highlight></codeline>
<codeline lineno="382"><highlight class="comment"><sp/>*<sp/>@retval<sp/>false<sp/>The<sp/>driver<sp/>is<sp/>not<sp/>in<sp/>the<sp/>state<sp/>where<sp/>it<sp/>is<sp/>waiting<sp/>for<sp/>preparing<sp/>an<sp/>RX<sp/>buffer.</highlight></codeline>
<codeline lineno="383"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrfx__twis_1ga7bed9d2d72e330bf5e0be50ef005e5f7" kindref="member">nrfx_twis_is_waiting_rx_buff</ref>(<ref refid="structnrfx__twis__t" kindref="compound">nrfx_twis_t</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_instance);</highlight></codeline>
<codeline lineno="385"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="386"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="387"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>checking<sp/>if<sp/>the<sp/>driver<sp/>is<sp/>sending<sp/>data.</highlight></codeline>
<codeline lineno="388"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="389"><highlight class="comment"><sp/>*<sp/>If<sp/>this<sp/>function<sp/>returns<sp/>true,<sp/>there<sp/>is<sp/>an<sp/>ongoing<sp/>output<sp/>transmission.</highlight></codeline>
<codeline lineno="390"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="391"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_instance<sp/>Pointer<sp/>to<sp/>the<sp/>driver<sp/>instance<sp/>structure.</highlight></codeline>
<codeline lineno="392"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="393"><highlight class="comment"><sp/>*<sp/>@retval<sp/>true<sp/><sp/>There<sp/>is<sp/>an<sp/>ongoing<sp/>output<sp/>transmission.</highlight></codeline>
<codeline lineno="394"><highlight class="comment"><sp/>*<sp/>@retval<sp/>false<sp/>The<sp/>driver<sp/>is<sp/>in<sp/>other<sp/>state.</highlight></codeline>
<codeline lineno="395"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="396"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrfx__twis_1gae6fc5a52c462f691cb395be8b7941135" kindref="member">nrfx_twis_is_pending_tx</ref>(<ref refid="structnrfx__twis__t" kindref="compound">nrfx_twis_t</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_instance);</highlight></codeline>
<codeline lineno="397"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="398"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="399"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>checking<sp/>if<sp/>the<sp/>driver<sp/>is<sp/>receiving<sp/>data.</highlight></codeline>
<codeline lineno="400"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="401"><highlight class="comment"><sp/>*<sp/>If<sp/>this<sp/>function<sp/>returns<sp/>true,<sp/>there<sp/>is<sp/>an<sp/>ongoing<sp/>input<sp/>transmission.</highlight></codeline>
<codeline lineno="402"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="403"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_instance<sp/>Pointer<sp/>to<sp/>the<sp/>driver<sp/>instance<sp/>structure.</highlight></codeline>
<codeline lineno="404"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="405"><highlight class="comment"><sp/>*<sp/>@retval<sp/>true<sp/><sp/>There<sp/>is<sp/>an<sp/>ongoing<sp/>input<sp/>transmission.</highlight></codeline>
<codeline lineno="406"><highlight class="comment"><sp/>*<sp/>@retval<sp/>false<sp/>The<sp/>driver<sp/>is<sp/>in<sp/>other<sp/>state.</highlight></codeline>
<codeline lineno="407"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="408"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrfx__twis_1gad6f1affcdb959d5b1e6547e85f61ae46" kindref="member">nrfx_twis_is_pending_rx</ref>(<ref refid="structnrfx__twis__t" kindref="compound">nrfx_twis_t</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_instance);</highlight></codeline>
<codeline lineno="409"><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>NRFX_DECLARE_ONLY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="411"><highlight class="normal">NRFX_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="group__nrfx__twis_1ga2fb3c04f7aad8bf7fbd4829f6648a696" kindref="member">nrfx_twis_tx_amount</ref>(<ref refid="structnrfx__twis__t" kindref="compound">nrfx_twis_t</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_instance)</highlight></codeline>
<codeline lineno="412"><highlight class="normal">{</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__nrf__twis__hal_1ga686637d3b10e2df8cbeda813ff649c13" kindref="member">nrf_twis_tx_amount_get</ref>(p_instance-&gt;<ref refid="structnrfx__twis__t_1ae31dd6d5864d30137eb96d6f76be3ff5" kindref="member">p_reg</ref>);</highlight></codeline>
<codeline lineno="414"><highlight class="normal">}</highlight></codeline>
<codeline lineno="415"><highlight class="normal"></highlight></codeline>
<codeline lineno="416"><highlight class="normal">NRFX_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="group__nrfx__twis_1ga7116782fd84dcaf937f1a42dd406a985" kindref="member">nrfx_twis_rx_amount</ref>(<ref refid="structnrfx__twis__t" kindref="compound">nrfx_twis_t</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_instance)</highlight></codeline>
<codeline lineno="417"><highlight class="normal">{</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__nrf__twis__hal_1ga5c9844a79451f11104fafd5dd8159317" kindref="member">nrf_twis_rx_amount_get</ref>(p_instance-&gt;<ref refid="structnrfx__twis__t_1ae31dd6d5864d30137eb96d6f76be3ff5" kindref="member">p_reg</ref>);</highlight></codeline>
<codeline lineno="419"><highlight class="normal">}</highlight></codeline>
<codeline lineno="420"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRFX_DECLARE_ONLY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="422"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="423"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Macro<sp/>returning<sp/>TWIS<sp/>interrupt<sp/>handler.</highlight></codeline>
<codeline lineno="424"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="425"><highlight class="comment"><sp/>*<sp/>param[in]<sp/>idx<sp/>TWIS<sp/>index.</highlight></codeline>
<codeline lineno="426"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="427"><highlight class="comment"><sp/>*<sp/>@return<sp/>Interrupt<sp/>handler.</highlight></codeline>
<codeline lineno="428"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="429"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRFX_TWIS_INST_HANDLER_GET(idx)<sp/>NRFX_CONCAT_3(nrfx_twis_,<sp/>idx,<sp/>_irq_handler)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="431"><highlight class="comment">/**<sp/>@}<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="432"><highlight class="normal"></highlight></codeline>
<codeline lineno="433"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="434"><highlight class="comment"><sp/>*<sp/>Declare<sp/>interrupt<sp/>handlers<sp/>for<sp/>all<sp/>enabled<sp/>driver<sp/>instances<sp/>in<sp/>the<sp/>following<sp/>format:</highlight></codeline>
<codeline lineno="435"><highlight class="comment"><sp/>*<sp/>nrfx_\&lt;periph_name\&gt;_\&lt;idx\&gt;_irq_handler<sp/>(for<sp/>example,<sp/>nrfx_twis_0_irq_handler).</highlight></codeline>
<codeline lineno="436"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="437"><highlight class="comment"><sp/>*<sp/>A<sp/>specific<sp/>interrupt<sp/>handler<sp/>for<sp/>the<sp/>driver<sp/>instance<sp/>can<sp/>be<sp/>retrieved<sp/>by<sp/>using</highlight></codeline>
<codeline lineno="438"><highlight class="comment"><sp/>*<sp/>the<sp/>NRFX_TWIS_INST_HANDLER_GET<sp/>macro.</highlight></codeline>
<codeline lineno="439"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="440"><highlight class="comment"><sp/>*<sp/>Here<sp/>is<sp/>a<sp/>sample<sp/>of<sp/>using<sp/>the<sp/>NRFX_TWIS_INST_HANDLER_GET<sp/>macro<sp/>to<sp/>map<sp/>an<sp/>interrupt<sp/>handler</highlight></codeline>
<codeline lineno="441"><highlight class="comment"><sp/>*<sp/>in<sp/>a<sp/>Zephyr<sp/>application:</highlight></codeline>
<codeline lineno="442"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="443"><highlight class="comment"><sp/>*<sp/>IRQ_CONNECT(NRFX_IRQ_NUMBER_GET(NRF_TWIS_INST_GET(\&lt;instance_index\&gt;)),<sp/>\&lt;priority\&gt;,</highlight></codeline>
<codeline lineno="444"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NRFX_TWIS_INST_HANDLER_GET(\&lt;instance_index\&gt;),<sp/>0,<sp/>0);</highlight></codeline>
<codeline lineno="445"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="446"><highlight class="normal"><ref refid="group__nrfx__common_1gae3bda8e976c1f0e657e9260af2def0ef" kindref="member">NRFX_INSTANCE_IRQ_HANDLERS_DECLARE</ref>(TWIS,<sp/>twis)</highlight></codeline>
<codeline lineno="447"><highlight class="normal"></highlight></codeline>
<codeline lineno="448"><highlight class="normal"></highlight></codeline>
<codeline lineno="449"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="450"><highlight class="normal">}</highlight></codeline>
<codeline lineno="451"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="452"><highlight class="normal"></highlight></codeline>
<codeline lineno="453"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRFX_TWIS_H__</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="drivers/include/nrfx_twis.h"/>
  </compounddef>
</doxygen>
