<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="nrfx__common_8h" kind="file" language="C++">
    <compoundname>nrfx_common.h</compoundname>
    <includes local="no">stdint.h</includes>
    <includes local="no">stddef.h</includes>
    <includes local="no">stdbool.h</includes>
    <includes local="no">string.h</includes>
    <includes local="no">limits.h</includes>
    <includes local="no">nrf.h</includes>
    <includes refid="nrfx__utils_8h" local="yes">nrfx_utils.h</includes>
    <includes local="no">nrf_peripherals.h</includes>
    <includes local="no">nrf_mem.h</includes>
    <includes refid="nrfx__ext_8h" local="yes">nrfx_ext.h</includes>
    <incdepgraph>
      <node id="1">
        <label>drivers/nrfx_common.h</label>
        <link refid="nrfx__common_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>limits.h</label>
      </node>
      <node id="7">
        <label>nrf.h</label>
      </node>
      <node id="9">
        <label>nrf_mem.h</label>
      </node>
      <node id="8">
        <label>nrf_peripherals.h</label>
      </node>
      <node id="4">
        <label>stdbool.h</label>
      </node>
      <node id="3">
        <label>stddef.h</label>
      </node>
      <node id="2">
        <label>stdint.h</label>
      </node>
      <node id="5">
        <label>string.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="nrfx__common_8h_1a50c6da6241c92d78ee5b87271af9dd7a" prot="public" static="no">
        <name>ISA_ARM</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/nrfx_common.h" line="54" column="9" bodyfile="drivers/nrfx_common.h" bodystart="54" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="nrfx__common_8h_1adedcca4df2f8067287724e4d8de073f6" prot="public" static="no">
        <name>NRFX_STATIC_INLINE</name>
        <initializer>__STATIC_INLINE</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/nrfx_common.h" line="69" column="10" bodyfile="drivers/nrfx_common.h" bodystart="69" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="nrfx__common_8h_1aab7f18ce6e7ab2e9d88b0b12a05d4eb3" prot="public" static="no">
        <name>NRFY_STATIC_INLINE</name>
        <initializer>__STATIC_INLINE</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/nrfx_common.h" line="73" column="9" bodyfile="drivers/nrfx_common.h" bodystart="73" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="nrfx__common_8h_1a7c942a49e9ed8d4befe44478c713e576" prot="public" static="no">
        <name>NRF_STATIC_INLINE</name>
        <initializer>__STATIC_INLINE</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/nrfx_common.h" line="79" column="10" bodyfile="drivers/nrfx_common.h" bodystart="79" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrfx__common_1gaf8e9c8e0bf6d67f69eb7ed0dbfcbe621" prot="public" static="no">
        <name>NRFX_CHECK</name>
        <param><defname>module_enabled</defname></param>
        <initializer><ref refid="group__nrfx__utils_1ga238278032464c932dc46946bedd44473" kindref="member">NRFX_IS_ENABLED</ref>(module_enabled)</initializer>
        <briefdescription>
<para>Macro for checking if the specified identifier is defined and it has a non-zero value. </para>
        </briefdescription>
        <detaileddescription>
<para>Normally, preprocessors treat all undefined identifiers as having the value zero. However, some tools, like static code analyzers, can issue a warning when such identifier is evaluated. This macro gives the possibility to suppress such warnings only in places where this macro is used for evaluation, not in the whole analyzed code. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/nrfx_common.h" line="100" column="9" bodyfile="drivers/nrfx_common.h" bodystart="100" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrfx__common_1gaecad8a6485425eddd9394900eb38786f" prot="public" static="no">
        <name>NRFX_API_VER_AT_LEAST</name>
        <param><defname>major</defname></param>
        <param><defname>minor</defname></param>
        <param><defname>micro</defname></param>
        <initializer>    ((<ref refid="group__nrfx__common__config_1gaf14738ceb195dd31d4322d07d41d0eb4" kindref="member">NRFX_CONFIG_API_VER_MAJOR</ref> &gt;= (major)) &amp;&amp;     \
     (<ref refid="group__nrfx__common__config_1gae351f1ad60c1b6e1761cd201f5b4d8bc" kindref="member">NRFX_CONFIG_API_VER_MINOR</ref> &gt;= (minor)) &amp;&amp;     \
     (<ref refid="group__nrfx__common__config_1ga36af34ce39f29b5e7803930195c6a1d5" kindref="member">NRFX_CONFIG_API_VER_MICRO</ref> &gt;= (micro)))</initializer>
        <briefdescription>
<para>Macro for checking if the configured API version is greater than or equal to the specified API version. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>API version to be used is configured using following symbols:<itemizedlist>
<listitem><para><ref refid="group__nrfx__common__config_1gaf14738ceb195dd31d4322d07d41d0eb4" kindref="member">NRFX_CONFIG_API_VER_MAJOR</ref></para>
</listitem><listitem><para><ref refid="group__nrfx__common__config_1gae351f1ad60c1b6e1761cd201f5b4d8bc" kindref="member">NRFX_CONFIG_API_VER_MINOR</ref></para>
</listitem><listitem><para><ref refid="group__nrfx__common__config_1ga36af34ce39f29b5e7803930195c6a1d5" kindref="member">NRFX_CONFIG_API_VER_MICRO</ref></para>
</listitem></itemizedlist>
</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">major</parametername>
</parameternamelist>
<parameterdescription>
<para>Major API version. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">minor</parametername>
</parameternamelist>
<parameterdescription>
<para>Minor API version. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">micro</parametername>
</parameternamelist>
<parameterdescription>
<para>Micro API version.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>Configured API version is greater than or equal to the specified API version. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>Configured API version is smaller than the specified API version. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/nrfx_common.h" line="118" column="9" bodyfile="drivers/nrfx_common.h" bodystart="118" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrfx__common_1ga6d45af3faab5d861172ff70e48ebc540" prot="public" static="no">
        <name>NRFX_BIT</name>
        <param><defname>x</defname></param>
        <initializer>(1UL &lt;&lt; (x))</initializer>
        <briefdescription>
<para>Macro for creating unsigned integer with bit position <computeroutput>x</computeroutput> set. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">x</parametername>
</parameternamelist>
<parameterdescription>
<para>Bit position to be set.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Unsigned integer with requested bit position set. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/nrfx_common.h" line="130" column="9" bodyfile="drivers/nrfx_common.h" bodystart="130" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrfx__common_1ga5297a05d3568750308e0f3e33074235c" prot="public" static="no">
        <name>NRFX_BIT_MASK</name>
        <param><defname>x</defname></param>
        <initializer>(((x) == 32) ? UINT32_MAX : ((1UL &lt;&lt; (x)) - 1))</initializer>
        <briefdescription>
<para>Macro for returning bit mask or 0 if <computeroutput>x</computeroutput> is 0. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">x</parametername>
</parameternamelist>
<parameterdescription>
<para>Bit mask size. Bit mask has bits 0 through x-1 (inclusive) set.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Bit mask. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/nrfx_common.h" line="139" column="9" bodyfile="drivers/nrfx_common.h" bodystart="139" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrfx__common_1ga42eebf999b96ade647c5c75b280081e3" prot="public" static="no">
        <name>NRFX_BIT_SIZE</name>
        <param><defname>x</defname></param>
        <initializer>((x) &lt;&lt; 3)</initializer>
        <briefdescription>
<para>Macro for returning size in bits for given size in bytes. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">x</parametername>
</parameternamelist>
<parameterdescription>
<para>Size in bytes.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Size in bits. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/nrfx_common.h" line="148" column="9" bodyfile="drivers/nrfx_common.h" bodystart="148" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrfx__common_1ga9fced903f4d0fc450e63d40426050236" prot="public" static="no">
        <name>NRFX_CONCAT_2</name>
        <param><defname>p1</defname></param>
        <param><defname>p2</defname></param>
        <initializer><ref refid="group__nrfx__common_1ga0a62bf54a7a56a54d6385a6139e8976f" kindref="member">NRFX_CONCAT_2_</ref>(p1, p2)</initializer>
        <briefdescription>
<para>Macro for concatenating two tokens in macro expansion. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This macro is expanded in two steps so that tokens given as macros themselves are fully expanded before they are merged.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p1</parametername>
</parameternamelist>
<parameterdescription>
<para>First token. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">p2</parametername>
</parameternamelist>
<parameterdescription>
<para>Second token.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The two tokens merged into one, unless they cannot together form a valid token (in such case, the preprocessor issues a warning and does not perform the concatenation).</para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__nrfx__common_1gaa78d21b07d22f7a4bfbd1feda51ef1f4" kindref="member">NRFX_CONCAT_3</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/nrfx_common.h" line="165" column="9" bodyfile="drivers/nrfx_common.h" bodystart="165" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrfx__common_1ga0a62bf54a7a56a54d6385a6139e8976f" prot="public" static="no">
        <name>NRFX_CONCAT_2_</name>
        <param><defname>p1</defname></param>
        <param><defname>p2</defname></param>
        <initializer>p1 ## p2</initializer>
        <briefdescription>
<para>Internal macro used by <ref refid="group__nrfx__common_1ga9fced903f4d0fc450e63d40426050236" kindref="member">NRFX_CONCAT_2</ref> to perform the expansion in two steps. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/nrfx_common.h" line="168" column="9" bodyfile="drivers/nrfx_common.h" bodystart="168" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrfx__common_1gaa78d21b07d22f7a4bfbd1feda51ef1f4" prot="public" static="no">
        <name>NRFX_CONCAT_3</name>
        <param><defname>p1</defname></param>
        <param><defname>p2</defname></param>
        <param><defname>p3</defname></param>
        <initializer><ref refid="group__nrfx__common_1ga097c0e3f5995932a0c273b85ca786581" kindref="member">NRFX_CONCAT_3_</ref>(p1, p2, p3)</initializer>
        <briefdescription>
<para>Macro for concatenating three tokens in macro expansion. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This macro is expanded in two steps so that tokens given as macros themselves are fully expanded before they are merged.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p1</parametername>
</parameternamelist>
<parameterdescription>
<para>First token. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">p2</parametername>
</parameternamelist>
<parameterdescription>
<para>Second token. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">p3</parametername>
</parameternamelist>
<parameterdescription>
<para>Third token.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The three tokens merged into one, unless they cannot together form a valid token (in such case, the preprocessor issues a warning and does not perform the concatenation).</para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__nrfx__common_1ga9fced903f4d0fc450e63d40426050236" kindref="member">NRFX_CONCAT_2</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/nrfx_common.h" line="186" column="9" bodyfile="drivers/nrfx_common.h" bodystart="186" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrfx__common_1ga097c0e3f5995932a0c273b85ca786581" prot="public" static="no">
        <name>NRFX_CONCAT_3_</name>
        <param><defname>p1</defname></param>
        <param><defname>p2</defname></param>
        <param><defname>p3</defname></param>
        <initializer>p1 ## p2 ## p3</initializer>
        <briefdescription>
<para>Internal macro used by <ref refid="group__nrfx__common_1gaa78d21b07d22f7a4bfbd1feda51ef1f4" kindref="member">NRFX_CONCAT_3</ref> to perform the expansion in two steps. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/nrfx_common.h" line="189" column="9" bodyfile="drivers/nrfx_common.h" bodystart="189" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrfx__common_1gac856b9983c8485fb865f017c77dd4f81" prot="public" static="no">
        <name>NRFX_ABS</name>
        <param><defname>a</defname></param>
        <initializer>((a) &lt; (0) ? -(a) : (a))</initializer>
        <briefdescription>
<para>Macro for computing the absolute value of an integer number. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para>Input value.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Absolute value. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/nrfx_common.h" line="198" column="9" bodyfile="drivers/nrfx_common.h" bodystart="198" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrfx__common_1ga9bb83016125feb768471ed62b4bf9181" prot="public" static="no">
        <name>NRFX_FEATURE_PRESENT</name>
        <param><defname>periph_name</defname></param>
        <param><defname>feature_name</defname></param>
        <initializer>        <ref refid="group__nrfx__utils_1gac0b7db186b16e71e28d7eb956869a30a" kindref="member">NRFX_COND_CODE_0</ref>(<ref refid="group__nrfx__utils_1ga5ea61d0994f6fb1ab5ed59d44f6a7ce9" kindref="member">NRFX_CONCAT</ref>(0,                                                            \
                            _NRFX_FEATURE_PRESENT(periph_name, feature_name, 256),                 \
                            _NRFX_FEATURE_PRESENT(<ref refid="group__nrfx__utils_1ga5ea61d0994f6fb1ab5ed59d44f6a7ce9" kindref="member">NRFX_CONCAT</ref>(periph_name, 0), feature_name, 100), \
                            _NRFX_FEATURE_PRESENT(<ref refid="group__nrfx__utils_1ga5ea61d0994f6fb1ab5ed59d44f6a7ce9" kindref="member">NRFX_CONCAT</ref>(periph_name, 00), feature_name, 10)  \
                         ),                                                                        \
                        (0), (1))</initializer>
        <briefdescription>
<para>Macro for checking whether any of the instance of the specified peripheral supports a given feature. </para>
        </briefdescription>
        <detaileddescription>
<para>Macro checks flags set in &lt;device&gt;_peripherals.h file.</para>
<para>Macro supports check on instances with following names:<itemizedlist>
<listitem><para>&lt;periph_name&gt;0 - &lt;periph_name&gt;255 - e.g. SPIM0, SPIM255</para>
</listitem><listitem><para>&lt;periph_name&gt;00 - &lt;periph_name&gt;099 - e.g. SPIM00, SPIM099</para>
</listitem><listitem><para>&lt;periph_name&gt;000 - &lt;periph_name&gt;009 - e.g. SPIM000, SPIM009</para>
</listitem></itemizedlist>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">periph_name</parametername>
</parameternamelist>
<parameterdescription>
<para>Peripheral name, e.g. SPIM. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">feature_name</parametername>
</parameternamelist>
<parameterdescription>
<para>Feature flag name suffix following an instance name, e.g. _FEATURE_HARDWARE_CSN_PRESENT.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>1</parametername>
</parameternamelist>
<parameterdescription>
<para>At least one instance on current device supports a given feature. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>None of peripheral instances supports a given feature. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/nrfx_common.h" line="217" column="9" bodyfile="drivers/nrfx_common.h" bodystart="217" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrfx__common_1ga67de60e8d50b057ffcc75c9479fd0d1d" prot="public" static="no">
        <name>NRFX_FOREACH_ENABLED</name>
        <param><defname>periph_name</defname></param>
        <param><defname>macro</defname></param>
        <param><defname>sep</defname></param>
        <param><defname>off_code</defname></param>
        <param><defname>...</defname></param>
        <initializer>        <ref refid="group__nrfx__utils_1gaec8b3bf0959011b5e1eda4252a8f329a" kindref="member">NRFX_LISTIFY</ref>(256, _NRFX_EVAL_IF_ENABLED, sep,                                 \
                     off_code, periph_name, , macro, __VA_ARGS__) NRFX_DEBRACKET sep  \
        <ref refid="group__nrfx__utils_1gaec8b3bf0959011b5e1eda4252a8f329a" kindref="member">NRFX_LISTIFY</ref>(100, _NRFX_EVAL_IF_ENABLED, sep,                                 \
                     off_code, periph_name, 0, macro, __VA_ARGS__) NRFX_DEBRACKET sep \
        <ref refid="group__nrfx__utils_1gaec8b3bf0959011b5e1eda4252a8f329a" kindref="member">NRFX_LISTIFY</ref>(10, _NRFX_EVAL_IF_ENABLED, sep,                                  \
                     off_code, periph_name, 00, macro, __VA_ARGS__)</initializer>
        <briefdescription>
<para>Macro for resolving provided user macro for enabled instances of a driver. </para>
        </briefdescription>
        <detaileddescription>
<para>Macro checks if driver instances are enabled for all potential instaces of a peripheral. It takes peripheral name and checks whether NRFX_&lt;peripheral&gt;&lt;id&gt;_ENABLED is set to 1 and if yes then provided macro is evaluated for given instance.</para>
<para>Macro supports check on instances with following names:<itemizedlist>
<listitem><para>&lt;periph_name&gt;0 - &lt;periph_name&gt;255 - e.g. SPIM0, SPIM255</para>
</listitem><listitem><para>&lt;periph_name&gt;00 - &lt;periph_name&gt;099 - e.g. SPIM00, SPIM099</para>
</listitem><listitem><para>&lt;periph_name&gt;000 - &lt;periph_name&gt;009 - e.g. SPIM000, SPIM009</para>
</listitem></itemizedlist>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">periph_name</parametername>
</parameternamelist>
<parameterdescription>
<para>Peripheral name, e.g. SPIM. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">macro</parametername>
</parameternamelist>
<parameterdescription>
<para>Macro which is resolved if driver instance is enabled. Macro has following arguments: macro(periph_name, prefix, i, ...). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">sep</parametername>
</parameternamelist>
<parameterdescription>
<para>Separator added between all evaluations, in parentheses. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">off_code</parametername>
</parameternamelist>
<parameterdescription>
<para>Code injected for disabled instances, in parentheses. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/nrfx_common.h" line="243" column="9" bodyfile="drivers/nrfx_common.h" bodystart="243" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrfx__common_1ga0b8fc2ee054d67089fabbccc4fd30386" prot="public" static="no">
        <name>NRFX_FOREACH_PRESENT</name>
        <param><defname>periph_name</defname></param>
        <param><defname>macro</defname></param>
        <param><defname>sep</defname></param>
        <param><defname>off_code</defname></param>
        <param><defname>...</defname></param>
        <initializer>        <ref refid="group__nrfx__utils_1gaec8b3bf0959011b5e1eda4252a8f329a" kindref="member">NRFX_LISTIFY</ref>(256, _NRFX_EVAL_IF_PRESENT, sep,                                  \
                     off_code, periph_name, , macro, __VA_ARGS__) NRFX_DEBRACKET sep   \
        <ref refid="group__nrfx__utils_1gaec8b3bf0959011b5e1eda4252a8f329a" kindref="member">NRFX_LISTIFY</ref>(100, _NRFX_EVAL_IF_PRESENT, sep,                                  \
                     off_code, periph_name, 0, macro, __VA_ARGS__) NRFX_DEBRACKET sep  \
        <ref refid="group__nrfx__utils_1gaec8b3bf0959011b5e1eda4252a8f329a" kindref="member">NRFX_LISTIFY</ref>(10, _NRFX_EVAL_IF_PRESENT, sep,                                   \
                     off_code, periph_name, 00, macro, __VA_ARGS__) NRFX_DEBRACKET sep \
        _NRFX_EVAL_IF_PRESENT(, off_code, periph_name, , macro, __VA_ARGS__)</initializer>
        <briefdescription>
<para>Macro for resolving provided user macro for present instances of a peripheral. </para>
        </briefdescription>
        <detaileddescription>
<para>Macro checks if peripheral instances are present by checking if there is a token NRF_&lt;periph_name&gt;&lt;id&gt; defined with wrapped in parenthesis value.</para>
<para>Macro supports check on instances with following names:<itemizedlist>
<listitem><para>&lt;periph_name&gt;0 - &lt;periph_name&gt;255 - e.g. SPIM0, SPIM255</para>
</listitem><listitem><para>&lt;periph_name&gt;00 - &lt;periph_name&gt;099 - e.g. SPIM00, SPIM099</para>
</listitem><listitem><para>&lt;periph_name&gt;000 - &lt;periph_name&gt;009 - e.g. SPIM000, SPIM009</para>
</listitem><listitem><para>&lt;periph_name&gt; - e.g. SPIM</para>
</listitem></itemizedlist>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">periph_name</parametername>
</parameternamelist>
<parameterdescription>
<para>Peripheral name, e.g. SPIM. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">macro</parametername>
</parameternamelist>
<parameterdescription>
<para>Macro which is resolved if peripheral instance is present. Macro has following arguments: macro(periph_name, prefix, i, ...). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">sep</parametername>
</parameternamelist>
<parameterdescription>
<para>Separator added between all evaluations, in parentheses. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">off_code</parametername>
</parameternamelist>
<parameterdescription>
<para>Code injected for disabled instances, in parentheses. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/nrfx_common.h" line="269" column="9" bodyfile="drivers/nrfx_common.h" bodystart="269" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrfx__common_1ga22607aaeca14ce95965ee9d83ef97130" prot="public" static="no">
        <name>NRFX_INSTANCE_CONCAT</name>
        <param><defname>periph_name</defname></param>
        <param><defname>prefix</defname></param>
        <param><defname>i</defname></param>
        <param><defname>macro</defname></param>
        <param><defname>...</defname></param>
        <initializer>      macro(<ref refid="group__nrfx__utils_1ga5ea61d0994f6fb1ab5ed59d44f6a7ce9" kindref="member">NRFX_CONCAT</ref>(periph_name, prefix, i), __VA_ARGS__)</initializer>
        <briefdescription>
<para>Macro for resolving provided user macro on concatenated peripheral name and instance index. </para>
        </briefdescription>
        <detaileddescription>
<para>Execute provided macro with single argument &lt;instance&gt; that is the concatenation of <computeroutput>periph_name</computeroutput>, <computeroutput>prefix</computeroutput> and <computeroutput>i</computeroutput>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">i</parametername>
</parameternamelist>
<parameterdescription>
<para>Instance index. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">periph_name</parametername>
</parameternamelist>
<parameterdescription>
<para>Peripheral name, e.g. SPIM. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">prefix</parametername>
</parameternamelist>
<parameterdescription>
<para>Prefix added before instance index, e.g. some device has instances named like SPIM00. First 0 is passed here as prefix. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">macro</parametername>
</parameternamelist>
<parameterdescription>
<para>Macro which is executed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">...</parametername>
</parameternamelist>
<parameterdescription>
<para>Variable length arguments passed to the <computeroutput>macro</computeroutput>. Macro has following arguments: macro(instance, ...). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/nrfx_common.h" line="293" column="9" bodyfile="drivers/nrfx_common.h" bodystart="293" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrfx__common_1ga97a94e1334c4262979cb718e0f5e6cec" prot="public" static="no">
        <name>NRFX_INSTANCE_ENUM_LIST</name>
        <param><defname>periph_name</defname></param>
        <initializer>        <ref refid="group__nrfx__common_1ga67de60e8d50b057ffcc75c9479fd0d1d" kindref="member">NRFX_FOREACH_ENABLED</ref>(periph_name, _NRFX_INST_ENUM, (), ())</initializer>
        <briefdescription>
<para>Macro for creating a content for enum which is listing enabled driver instances. </para>
        </briefdescription>
        <detaileddescription>
<para>It creates comma separated list of entries like NRFX_&lt;instance_name&gt;<emphasis>INST_IDX, e.g. (NRFX_SPIM0_INST_IDX) for all enabled instances (NRFX</emphasis>&lt;instance_name&gt;_ENABLED is set to 1). It should be called within enum declaration. Created enum is used by the driver to index all enabled instances of the driver.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">periph_name</parametername>
</parameternamelist>
<parameterdescription>
<para>Peripheral name (e.g. SPIM). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/nrfx_common.h" line="306" column="9" bodyfile="drivers/nrfx_common.h" bodystart="306" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrfx__common_1gac954051ae958ca6de190526f6996af8b" prot="public" static="no">
        <name>NRFX_INSTANCE_IRQ_HANDLERS</name>
        <param><defname>periph_name</defname></param>
        <param><defname>periph_name_small</defname></param>
        <initializer>    <ref refid="group__nrfx__common_1ga67de60e8d50b057ffcc75c9479fd0d1d" kindref="member">NRFX_FOREACH_ENABLED</ref>(periph_name, _NRFX_IRQ_HANDLER, (), (), periph_name_small)</initializer>
        <briefdescription>
<para>Macro for creating an interrupt handler for all enabled driver instances. </para>
        </briefdescription>
        <detaileddescription>
<para>Macro creates a set of functions which calls generic <computeroutput>irq_handler</computeroutput> function with two parameters:<itemizedlist>
<listitem><para>peripheral instance register pointer</para>
</listitem><listitem><para>pointer to a control block structure associated with the given instance</para>
</listitem></itemizedlist>
</para>
<para>Generic interrupt handler function with above mentioned parameters named <computeroutput>irq_handler</computeroutput> must be implemented in the driver.</para>
<para><simplesect kind="note"><para>Handlers are using enum which should be generated using <ref refid="group__nrfx__common_1ga97a94e1334c4262979cb718e0f5e6cec" kindref="member">NRFX_INSTANCE_ENUM_LIST</ref>.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">periph_name</parametername>
</parameternamelist>
<parameterdescription>
<para>Peripheral name, e.g. SPIM. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">periph_name_small</parametername>
</parameternamelist>
<parameterdescription>
<para>Peripheral name written with small letters, e.g. spim. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/nrfx_common.h" line="324" column="9" bodyfile="drivers/nrfx_common.h" bodystart="324" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrfx__common_1gab0a56e850cdc324f487e734e3ef896d8" prot="public" static="no">
        <name>NRFX_INSTANCE_IRQ_HANDLERS_EXT</name>
        <param><defname>periph_name</defname></param>
        <param><defname>periph_name_small</defname></param>
        <param><defname>ext_macro</defname></param>
        <initializer>    <ref refid="group__nrfx__common_1ga67de60e8d50b057ffcc75c9479fd0d1d" kindref="member">NRFX_FOREACH_ENABLED</ref>(periph_name, _NRFX_IRQ_HANDLER_EXT, (), (), periph_name_small, ext_macro)</initializer>
        <briefdescription>
<para>Macro for creating an interrupt handler for all enabled driver instances with the specified extra parameter. </para>
        </briefdescription>
        <detaileddescription>
<para>Macro creates set of function which calls generic <computeroutput>irq_handler</computeroutput> function with three parameters:<itemizedlist>
<listitem><para>peripheral instance register pointer</para>
</listitem><listitem><para>pointer to a control block structure associated with the given instance</para>
</listitem><listitem><para>provided <computeroutput>ext_macro</computeroutput> called with peripheral name suffix (e.g. 01 for TIMER01)</para>
</listitem></itemizedlist>
</para>
<para>Generic interrupt handler function with above mentioned parameters named <computeroutput>irq_handler</computeroutput> must be implemented in the driver.</para>
<para><simplesect kind="note"><para>Handlers are using enum which should be generated using <ref refid="group__nrfx__common_1ga97a94e1334c4262979cb718e0f5e6cec" kindref="member">NRFX_INSTANCE_ENUM_LIST</ref>.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">periph_name</parametername>
</parameternamelist>
<parameterdescription>
<para>Peripheral name, e.g. SPIM. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">periph_name_small</parametername>
</parameternamelist>
<parameterdescription>
<para>Peripheral name written with small letters, e.g. rtc. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">ext_macro</parametername>
</parameternamelist>
<parameterdescription>
<para>External macro to be executed for each instance. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/nrfx_common.h" line="345" column="9" bodyfile="drivers/nrfx_common.h" bodystart="345" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrfx__common_1gae3bda8e976c1f0e657e9260af2def0ef" prot="public" static="no">
        <name>NRFX_INSTANCE_IRQ_HANDLERS_DECLARE</name>
        <param><defname>periph_name</defname></param>
        <param><defname>periph_name_small</defname></param>
        <initializer>    <ref refid="group__nrfx__common_1ga67de60e8d50b057ffcc75c9479fd0d1d" kindref="member">NRFX_FOREACH_ENABLED</ref>(periph_name, _NRFX_IRQ_HANDLER_DECLARE, (), (), periph_name_small)</initializer>
        <briefdescription>
<para>Macro for declaring an interrupt handler for all enabled driver instances. </para>
        </briefdescription>
        <detaileddescription>
<para>Macro creates set of function declarations. It is intended to be used in the driver header.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">periph_name</parametername>
</parameternamelist>
<parameterdescription>
<para>Peripheral name, e.g. SPIM. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">periph_name_small</parametername>
</parameternamelist>
<parameterdescription>
<para>Peripheral name written with small letters, e.g. spim. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/nrfx_common.h" line="356" column="9" bodyfile="drivers/nrfx_common.h" bodystart="356" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrfx__common_1gaf4c6ab6524ef4a8636cc97f2447ab65c" prot="public" static="no">
        <name>NRFX_INSTANCE_IRQ_HANDLERS_LIST</name>
        <param><defname>periph_name</defname></param>
        <param><defname>periph_name_small</defname></param>
        <initializer>    <ref refid="group__nrfx__common_1ga67de60e8d50b057ffcc75c9479fd0d1d" kindref="member">NRFX_FOREACH_ENABLED</ref>(periph_name, _NRFX_IRQ_HANDLER_LIST, (), (), periph_name_small)</initializer>
        <briefdescription>
<para>Macro for generating comma-separated list of interrupt handlers for all enabled driver instances. </para>
        </briefdescription>
        <detaileddescription>
<para>Interrupt handlers are generated using <ref refid="group__nrfx__common_1gac954051ae958ca6de190526f6996af8b" kindref="member">NRFX_INSTANCE_IRQ_HANDLERS</ref>. It is intended to be used to create a list which is used for passing an interrupt handler function to the PRS driver.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">periph_name</parametername>
</parameternamelist>
<parameterdescription>
<para>Peripheral name, e.g. SPIM. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">periph_name_small</parametername>
</parameternamelist>
<parameterdescription>
<para>Peripheral name written with small letters, e.g. spim. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/nrfx_common.h" line="370" column="9" bodyfile="drivers/nrfx_common.h" bodystart="370" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrfx__common_1ga9cc7f9da377228c1f0b191bd660577af" prot="public" static="no">
        <name>NRFX_INSTANCE_PRESENT</name>
        <param><defname>_inst</defname></param>
        <initializer><ref refid="group__nrfx__utils_1ga61259822a6d31a2d4cb15a9943a24521" kindref="member">NRFX_ARG_HAS_PARENTHESIS</ref>(<ref refid="group__nrfx__utils_1ga5ea61d0994f6fb1ab5ed59d44f6a7ce9" kindref="member">NRFX_CONCAT</ref>(NRF_, _inst))</initializer>
        <briefdescription>
<para>Macro for checking if given peripheral instance is present on the target. </para>
        </briefdescription>
        <detaileddescription>
<para>Macro utilizes the fact that for each existing instance a define is created which points to the memory mapped register set casted to a register set structure. It is wrapped in parenthesis and existance of parethesis wrapping is used to determine if instance exists. It if does not exist then token (e.g. NRF_SPIM10) is undefined so it does not have parenthesis wrapping.</para>
<para>Since macro returns literal 1 it can be used by other macros.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">_inst</parametername>
</parameternamelist>
<parameterdescription>
<para>Instance, .e.g SPIM10.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>1</parametername>
</parameternamelist>
<parameterdescription>
<para>If instance is present. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>If instance is not present. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/nrfx_common.h" line="388" column="9" bodyfile="drivers/nrfx_common.h" bodystart="388" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrfx__common_1ga3a3c912a8618b4181054a51dc49e6bd4" prot="public" static="no">
        <name>NRFX_MIN</name>
        <param><defname>a</defname></param>
        <param><defname>b</defname></param>
        <initializer>((a) &lt; (b) ? (a) : (b))</initializer>
        <briefdescription>
<para>Macro for getting the smaller value between two arguments. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para>First argument. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para>Second argument.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Smaller value between two arguments. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/nrfx_common.h" line="398" column="9" bodyfile="drivers/nrfx_common.h" bodystart="398" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrfx__common_1gaaf20fb75ada3be75dbf03d6fe4d43f6a" prot="public" static="no">
        <name>NRFX_MAX</name>
        <param><defname>a</defname></param>
        <param><defname>b</defname></param>
        <initializer>((a) &gt; (b) ? (a) : (b))</initializer>
        <briefdescription>
<para>Macro for getting the larger value between two arguments. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para>First argument. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para>Second argument.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Larger value between two arguments. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/nrfx_common.h" line="408" column="9" bodyfile="drivers/nrfx_common.h" bodystart="408" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrfx__common_1ga9ab9182c3b8a8fd3bced580fdf215d2d" prot="public" static="no">
        <name>NRFX_IN_RANGE</name>
        <param><defname>val</defname></param>
        <param><defname>min</defname></param>
        <param><defname>max</defname></param>
        <initializer>((val) &gt;= (min) &amp;&amp; (val) &lt;= (max))</initializer>
        <briefdescription>
<para>Macro for checking if a given value is in a given range. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para><computeroutput>val</computeroutput> is evaluated twice.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">val</parametername>
</parameternamelist>
<parameterdescription>
<para>A value to be checked. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">min</parametername>
</parameternamelist>
<parameterdescription>
<para>The lower bound (inclusive). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">max</parametername>
</parameternamelist>
<parameterdescription>
<para>The upper bound (inclusive).</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>The value is in the given range. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>The value is out of the given range. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/nrfx_common.h" line="422" column="9" bodyfile="drivers/nrfx_common.h" bodystart="422" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrfx__common_1gace8c98e2beb5dae71ccd6da8a5c50f93" prot="public" static="no">
        <name>NRFX_ROUNDED_DIV</name>
        <param><defname>a</defname></param>
        <param><defname>b</defname></param>
        <initializer>    ((((a) &lt; 0) ^ ((b) &lt; 0)) ? (((a) - (b) / 2) / (b)) : (((a) + (b) / 2) / (b)))</initializer>
        <briefdescription>
<para>Macro for performing rounded integer division (as opposed to truncating the result). </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para>Numerator. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para>Denominator.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Rounded (integer) result of dividing <computeroutput>a</computeroutput> by <computeroutput>b</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/nrfx_common.h" line="433" column="9" bodyfile="drivers/nrfx_common.h" bodystart="433" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrfx__common_1gac6eb065c273d30e60564b323d2cabd21" prot="public" static="no">
        <name>NRFX_CEIL_DIV</name>
        <param><defname>a</defname></param>
        <param><defname>b</defname></param>
        <initializer>((((a) - 1) / (b)) + 1)</initializer>
        <briefdescription>
<para>Macro for performing integer division, making sure the result is rounded up. </para>
        </briefdescription>
        <detaileddescription>
<para>A typical use case for this macro is to compute the number of objects with size <computeroutput>b</computeroutput> required to hold <computeroutput>a</computeroutput> number of bytes.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para>Numerator. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para>Denominator.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Integer result of dividing <computeroutput>a</computeroutput> by <computeroutput>b</computeroutput>, rounded up. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/nrfx_common.h" line="447" column="9" bodyfile="drivers/nrfx_common.h" bodystart="447" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrfx__common_1gafbf1f8a50035b7d9f6c1cc1155ed1989" prot="public" static="no">
        <name>NRFX_ARRAY_SIZE</name>
        <param><defname>array</defname></param>
        <initializer>(sizeof(array) / sizeof((array)[0]))</initializer>
        <briefdescription>
<para>Macro for getting the number of elements in an array. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">array</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the array.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Array element count. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/nrfx_common.h" line="456" column="9" bodyfile="drivers/nrfx_common.h" bodystart="456" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrfx__common_1gaf356c97c2527d9ac57b04dd9f12fc9d3" prot="public" static="no">
        <name>NRFX_OFFSETOF</name>
        <param><defname>type</defname></param>
        <param><defname>member</defname></param>
        <initializer>((size_t) &amp; (((type *)0)-&gt;member))</initializer>
        <briefdescription>
<para>Macro for getting the offset (in bytes) from the beginning of a structure of the specified type to its specified member. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">type</parametername>
</parameternamelist>
<parameterdescription>
<para>Structure type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">member</parametername>
</parameternamelist>
<parameterdescription>
<para>Structure member whose offset is searched for.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Member offset in bytes. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/nrfx_common.h" line="467" column="9" bodyfile="drivers/nrfx_common.h" bodystart="467" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrfx__common_1gad915509e5196347904abacd49406158f" prot="public" static="no">
        <name>NRFX_IS_POWER_OF_TWO</name>
        <param><defname>val</defname></param>
        <initializer>(((val) != 0) &amp;&amp; ((val) &amp; ((val) - 1)) == 0)</initializer>
        <briefdescription>
<para>Macro for checking whether given number is power of 2. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">val</parametername>
</parameternamelist>
<parameterdescription>
<para>Tested value.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>The value is power of 2. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>The value is not power of 2. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/nrfx_common.h" line="477" column="9" bodyfile="drivers/nrfx_common.h" bodystart="477" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrfx__common_1ga8442c06f3943789856920c4bbec6b586" prot="public" static="no">
        <name>NRFX_IS_EVEN</name>
        <param><defname>val</defname></param>
        <initializer>(((val) % 2)  == 0)</initializer>
        <briefdescription>
<para>Macro for checking whether a given number is even. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">val</parametername>
</parameternamelist>
<parameterdescription>
<para>Tested value.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>The value is even. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>The value is odd. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/nrfx_common.h" line="487" column="9" bodyfile="drivers/nrfx_common.h" bodystart="487" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrfx__common_1ga7ca284ed361da5e254887608b58fa282" prot="public" static="no">
        <name>NRFX_EASYDMA_LENGTH_VALIDATE</name>
        <param><defname>peripheral</defname></param>
        <param><defname>length1</defname></param>
        <param><defname>length2</defname></param>
        <initializer>    (((length1) &lt; (1U &lt;&lt; <ref refid="group__nrfx__common_1ga9fced903f4d0fc450e63d40426050236" kindref="member">NRFX_CONCAT_2</ref>(peripheral, _EASYDMA_MAXCNT_SIZE))) &amp;&amp; \
     ((length2) &lt; (1U &lt;&lt; <ref refid="group__nrfx__common_1ga9fced903f4d0fc450e63d40426050236" kindref="member">NRFX_CONCAT_2</ref>(peripheral, _EASYDMA_MAXCNT_SIZE))))</initializer>
        <briefdescription>
<para>Macro for checking if given lengths of EasyDMA transfers do not exceed the limit of the specified peripheral. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">peripheral</parametername>
</parameternamelist>
<parameterdescription>
<para>Peripheral to check the lengths against. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">length1</parametername>
</parameternamelist>
<parameterdescription>
<para>First length to be checked. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">length2</parametername>
</parameternamelist>
<parameterdescription>
<para>Second length to be checked (pass 0 if not needed).</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>The length of buffers does not exceed the limit of the specified peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>The length of buffers exceeds the limit of the specified peripheral. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/nrfx_common.h" line="500" column="9" bodyfile="drivers/nrfx_common.h" bodystart="500" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrfx__common_1ga3292710cf0aa46e2e5cc6c6fc240ff19" prot="public" static="no">
        <name>NRFX_WAIT_FOR</name>
        <param><defname>condition</defname></param>
        <param><defname>attempts</defname></param>
        <param><defname>delay_us</defname></param>
        <param><defname>result</defname></param>
        <initializer>do {                                                         \
    result =  false;                                         \
    uint32_t remaining_attempts = (attempts);                \
    do {                                                     \
           if (condition)                                    \
           {                                                 \
               result =  true;                               \
               break;                                        \
           }                                                 \
           <ref refid="group__nrfx__glue_1ga97d116463eb34d7e7b6317861b905d7b" kindref="member">NRFX_DELAY_US</ref>(delay_us);                          \
    } while (--remaining_attempts);                          \
} while(0)</initializer>
        <briefdescription>
<para>Macro for waiting until condition is met. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">condition</parametername>
</parameternamelist>
<parameterdescription>
<para>Condition to meet. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">attempts</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum number of condition checks. Must not be 0. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">delay_us</parametername>
</parameternamelist>
<parameterdescription>
<para>Delay between consecutive checks, in microseconds. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">result</parametername>
</parameternamelist>
<parameterdescription>
<para>Boolean variable to store the result of the wait process. Set to true if the condition is met or false otherwise. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/nrfx_common.h" line="513" column="9" bodyfile="drivers/nrfx_common.h" bodystart="513" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrfx__common_1gabb3f39c8950fb847210fe0dd03b4d85c" prot="public" static="no">
        <name>NRFX_PERIPHERAL_ID_GET</name>
        <param><defname>base_addr</defname></param>
        <initializer>(uint16_t)(((uint32_t)(base_addr) &gt;&gt; 12) &amp; 0x000001FF)</initializer>
        <briefdescription>
<para>Macro for getting the ID number of the specified peripheral. </para>
        </briefdescription>
        <detaileddescription>
<para>For peripherals in Nordic SoCs, there is a direct relationship between their ID numbers and their base addresses. See the chapter &quot;Peripheral interface&quot; (section &quot;Peripheral ID&quot;) in the Product Specification.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">base_addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Peripheral base address or pointer.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>ID number associated with the specified peripheral. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/nrfx_common.h" line="538" column="9" bodyfile="drivers/nrfx_common.h" bodystart="538" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrfx__common_1ga9cb38ace2c9ba19bfa7f270fb2a17297" prot="public" static="no">
        <name>NRFX_IRQ_NUMBER_GET</name>
        <param><defname>base_addr</defname></param>
        <initializer><ref refid="group__nrfx__common_1gabb3f39c8950fb847210fe0dd03b4d85c" kindref="member">NRFX_PERIPHERAL_ID_GET</ref>(base_addr)</initializer>
        <briefdescription>
<para>Macro for getting the interrupt number assigned to a specific peripheral. </para>
        </briefdescription>
        <detaileddescription>
<para>For peripherals in Nordic SoCs, the IRQ number assigned to a peripheral is equal to its ID number. See the chapter &quot;Peripheral interface&quot; (sections &quot;Peripheral ID&quot; and &quot;Interrupts&quot;) in the Product Specification.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">base_addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Peripheral base address or pointer.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Interrupt number associated with the specified peripheral. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/nrfx_common.h" line="552" column="9" bodyfile="drivers/nrfx_common.h" bodystart="552" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrfx__common_1ga3528e3108745eba098ef97d545b454cc" prot="public" static="no">
        <name>NRFX_KHZ_TO_HZ</name>
        <param><defname>freq</defname></param>
        <initializer>((freq) * 1000)</initializer>
        <briefdescription>
<para>Macro for converting frequency in kHz to Hz. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">freq</parametername>
</parameternamelist>
<parameterdescription>
<para>Frequency value in kHz.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Number of Hz in <computeroutput>freq</computeroutput> kHz. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/nrfx_common.h" line="561" column="9" bodyfile="drivers/nrfx_common.h" bodystart="561" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrfx__common_1ga30e3c68cc0831c3bd64574a0a64439cc" prot="public" static="no">
        <name>NRFX_MHZ_TO_HZ</name>
        <param><defname>freq</defname></param>
        <initializer>((freq) * 1000 * 1000)</initializer>
        <briefdescription>
<para>Macro for converting frequency in MHz to Hz. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">freq</parametername>
</parameternamelist>
<parameterdescription>
<para>Frequency value in MHz.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Number of Hz in <computeroutput>freq</computeroutput> MHz. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/nrfx_common.h" line="570" column="9" bodyfile="drivers/nrfx_common.h" bodystart="570" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="group__nrfx__common_1gae09c4084ccd60f0b39742ce7e5c85794" prot="public" static="no" strong="no">
        <type></type>
        <name>nrfx_drv_state_t</name>
        <enumvalue id="group__nrfx__common_1ggae09c4084ccd60f0b39742ce7e5c85794a818be090e62d11f6fefe03de41c87027" prot="public">
          <name>NRFX_DRV_STATE_UNINITIALIZED</name>
          <briefdescription>
<para>Uninitialized. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrfx__common_1ggae09c4084ccd60f0b39742ce7e5c85794a9c8b17faf6d1c8823c0dfde4f2d30e53" prot="public">
          <name>NRFX_DRV_STATE_INITIALIZED</name>
          <briefdescription>
<para>Initialized but powered off. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrfx__common_1ggae09c4084ccd60f0b39742ce7e5c85794aa54676bc3a4aff29a96570856b3a4e4c" prot="public">
          <name>NRFX_DRV_STATE_POWERED_ON</name>
          <briefdescription>
<para>Initialized and powered on. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Driver state. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/nrfx_common.h" line="576" column="1" bodyfile="drivers/nrfx_common.h" bodystart="577" bodyend="581"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group__nrfx__common_1ga0df9b339824c02d64f40f1fc391a97bc" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* nrfx_irq_handler_t) (void)</definition>
        <argsstring>)(void)</argsstring>
        <name>nrfx_irq_handler_t</name>
        <briefdescription>
<para>IRQ handler type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/nrfx_common.h" line="573" column="9" bodyfile="drivers/nrfx_common.h" bodystart="573" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__nrfx__common_1ga95a38945a06d6759d49f3c7d245253fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>__STATIC_INLINE bool</type>
        <definition>__STATIC_INLINE bool nrfx_is_in_ram</definition>
        <argsstring>(void const *p_object)</argsstring>
        <name>nrfx_is_in_ram</name>
        <param>
          <type>void const *</type>
          <declname>p_object</declname>
        </param>
        <briefdescription>
<para>Function for checking if an object is placed in the Data RAM region. </para>
        </briefdescription>
        <detaileddescription>
<para>Several peripherals (the ones using EasyDMA) require the transfer buffers to be placed in the Data RAM region. This function can be used to check if this condition is met.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_object</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to an object whose location is to be checked.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>The pointed object is located in the Data RAM region. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>The pointed object is not located in the Data RAM region. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/nrfx_common.h" line="654" column="24" bodyfile="drivers/nrfx_common.h" bodystart="654" bodyend="657" declfile="drivers/nrfx_common.h" declline="595" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfx__common_1gae7d3e75c56537708646ecf2e1ddde335" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>__STATIC_INLINE bool</type>
        <definition>__STATIC_INLINE bool nrfx_is_word_aligned</definition>
        <argsstring>(void const *p_object)</argsstring>
        <name>nrfx_is_word_aligned</name>
        <param>
          <type>void const *</type>
          <declname>p_object</declname>
        </param>
        <briefdescription>
<para>Function for checking if an object is aligned to a 32-bit word. </para>
        </briefdescription>
        <detaileddescription>
<para>Several peripherals (the ones using EasyDMA) require the transfer buffers to be aligned to a 32-bit word. This function can be used to check if this condition is met.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_object</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to an object whose location is to be checked.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>The pointed object is aligned to a 32-bit word. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>The pointed object is not aligned to a 32-bit word. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/nrfx_common.h" line="659" column="24" bodyfile="drivers/nrfx_common.h" bodystart="659" bodyend="662" declfile="drivers/nrfx_common.h" declline="609" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfx__common_1ga99320a533545d814f480ee108a6b61ce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>__STATIC_INLINE IRQn_Type</type>
        <definition>__STATIC_INLINE IRQn_Type nrfx_get_irq_number</definition>
        <argsstring>(void const *p_reg)</argsstring>
        <name>nrfx_get_irq_number</name>
        <param>
          <type>void const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting the interrupt number for the specified peripheral. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Peripheral base pointer.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Interrupt number associated with the pointed peripheral. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/nrfx_common.h" line="664" column="29" bodyfile="drivers/nrfx_common.h" bodystart="664" bodyend="667" declfile="drivers/nrfx_common.h" declline="618" declcolumn="29"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfx__common_1gaba57956ebbf00ae1d7a28f047478aa1d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>__STATIC_INLINE uint32_t</type>
        <definition>__STATIC_INLINE uint32_t nrfx_bitpos_to_event</definition>
        <argsstring>(uint32_t bit)</argsstring>
        <name>nrfx_bitpos_to_event</name>
        <param>
          <type>uint32_t</type>
          <declname>bit</declname>
        </param>
        <briefdescription>
<para>Function for converting an INTEN register bit position to the corresponding event identifier. </para>
        </briefdescription>
        <detaileddescription>
<para>The event identifier is the offset between the event register address and the peripheral base address, and is equal (thus, can be directly cast) to the corresponding value of the enumerated type from HAL (nrf_*_event_t).</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">bit</parametername>
</parameternamelist>
<parameterdescription>
<para>INTEN register bit position.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Event identifier.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__nrfx__common_1gab995afe99539062db99e98bbef6a27ad" kindref="member">nrfx_event_to_bitpos</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/nrfx_common.h" line="669" column="28" bodyfile="drivers/nrfx_common.h" bodystart="669" bodyend="673" declfile="drivers/nrfx_common.h" declline="634" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfx__common_1gab995afe99539062db99e98bbef6a27ad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>__STATIC_INLINE uint32_t</type>
        <definition>__STATIC_INLINE uint32_t nrfx_event_to_bitpos</definition>
        <argsstring>(uint32_t event)</argsstring>
        <name>nrfx_event_to_bitpos</name>
        <param>
          <type>uint32_t</type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>Function for converting an event identifier to the corresponding INTEN register bit position. </para>
        </briefdescription>
        <detaileddescription>
<para>The event identifier is the offset between the event register address and the peripheral base address, and is equal (thus, can be directly cast) to the corresponding value of the enumerated type from HAL (nrf_*_event_t).</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event identifier.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>INTEN register bit position.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__nrfx__common_1gaba57956ebbf00ae1d7a28f047478aa1d" kindref="member">nrfx_bitpos_to_event</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/nrfx_common.h" line="675" column="28" bodyfile="drivers/nrfx_common.h" bodystart="675" bodyend="679" declfile="drivers/nrfx_common.h" declline="650" declcolumn="28"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2017<sp/>-<sp/>2024,<sp/>Nordic<sp/>Semiconductor<sp/>ASA</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>All<sp/>rights<sp/>reserved.</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>SPDX-License-Identifier:<sp/>BSD-3-Clause</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions<sp/>are<sp/>met:</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>1.<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright<sp/>notice,<sp/>this</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>2.<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the<sp/>distribution.</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/>3.<sp/>Neither<sp/>the<sp/>name<sp/>of<sp/>the<sp/>copyright<sp/>holder<sp/>nor<sp/>the<sp/>names<sp/>of<sp/>its</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>contributors<sp/>may<sp/>be<sp/>used<sp/>to<sp/>endorse<sp/>or<sp/>promote<sp/>products<sp/>derived<sp/>from<sp/>this</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>software<sp/>without<sp/>specific<sp/>prior<sp/>written<sp/>permission.</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>COPYRIGHT<sp/>HOLDERS<sp/>AND<sp/>CONTRIBUTORS<sp/>&quot;AS<sp/>IS&quot;</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/>AND<sp/>ANY<sp/>EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>THE</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*<sp/>ARE<sp/>DISCLAIMED.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>COPYRIGHT<sp/>HOLDER<sp/>OR<sp/>CONTRIBUTORS<sp/>BE</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,<sp/>SPECIAL,<sp/>EXEMPLARY,<sp/>OR</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>PROCUREMENT<sp/>OF</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>*<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,<sp/>DATA,<sp/>OR<sp/>PROFITS;<sp/>OR<sp/>BUSINESS</highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/>*<sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY<sp/>THEORY<sp/>OF<sp/>LIABILITY,<sp/>WHETHER<sp/>IN</highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/>*<sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR<sp/>OTHERWISE)</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/>*<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE<sp/>OF<sp/>THIS<sp/>SOFTWARE,<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/>*<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight></codeline>
<codeline lineno="32"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>NRFX_COMMON_H__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRFX_COMMON_H__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdint.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stddef.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdbool.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;limits.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;nrf.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;nrfx_utils.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;nrf_peripherals.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;nrf_mem.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;nrfx_ext.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__CORTEX_M)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ISA_ARM<sp/><sp/><sp/><sp/><sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(__VPR_REV)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ISA_RISCV<sp/><sp/><sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ISA_UNKNOWN<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(ISA_RISCV)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__STATIC_INLINE<sp/>__attribute__((always_inline))<sp/>static<sp/>inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>NRFX_STATIC_INLINE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>NRFX_DECLARE_ONLY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRFX_STATIC_INLINE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRFX_STATIC_INLINE<sp/>__STATIC_INLINE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRFX_STATIC_INLINE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRFY_STATIC_INLINE<sp/>__STATIC_INLINE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>NRF_STATIC_INLINE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>NRF_DECLARE_ONLY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_STATIC_INLINE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_STATIC_INLINE<sp/>__STATIC_INLINE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRF_STATIC_INLINE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="83"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="84"><highlight class="comment"><sp/>*<sp/>@defgroup<sp/>nrfx_common<sp/>Common<sp/>module</highlight></codeline>
<codeline lineno="85"><highlight class="comment"><sp/>*<sp/>@{</highlight></codeline>
<codeline lineno="86"><highlight class="comment"><sp/>*<sp/>@ingroup<sp/>nrfx</highlight></codeline>
<codeline lineno="87"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Common<sp/>module.</highlight></codeline>
<codeline lineno="88"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="90"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="91"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Macro<sp/>for<sp/>checking<sp/>if<sp/>the<sp/>specified<sp/>identifier<sp/>is<sp/>defined<sp/>and<sp/>it<sp/>has</highlight></codeline>
<codeline lineno="92"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a<sp/>non-zero<sp/>value.</highlight></codeline>
<codeline lineno="93"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="94"><highlight class="comment"><sp/>*<sp/>Normally,<sp/>preprocessors<sp/>treat<sp/>all<sp/>undefined<sp/>identifiers<sp/>as<sp/>having<sp/>the<sp/>value</highlight></codeline>
<codeline lineno="95"><highlight class="comment"><sp/>*<sp/>zero.<sp/>However,<sp/>some<sp/>tools,<sp/>like<sp/>static<sp/>code<sp/>analyzers,<sp/>can<sp/>issue<sp/>a<sp/>warning</highlight></codeline>
<codeline lineno="96"><highlight class="comment"><sp/>*<sp/>when<sp/>such<sp/>identifier<sp/>is<sp/>evaluated.<sp/>This<sp/>macro<sp/>gives<sp/>the<sp/>possibility<sp/>to<sp/>suppress</highlight></codeline>
<codeline lineno="97"><highlight class="comment"><sp/>*<sp/>such<sp/>warnings<sp/>only<sp/>in<sp/>places<sp/>where<sp/>this<sp/>macro<sp/>is<sp/>used<sp/>for<sp/>evaluation,<sp/>not<sp/>in</highlight></codeline>
<codeline lineno="98"><highlight class="comment"><sp/>*<sp/>the<sp/>whole<sp/>analyzed<sp/>code.</highlight></codeline>
<codeline lineno="99"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRFX_CHECK(module_enabled)<sp/>NRFX_IS_ENABLED(module_enabled)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="102"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="103"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Macro<sp/>for<sp/>checking<sp/>if<sp/>the<sp/>configured<sp/>API<sp/>version<sp/>is<sp/>greater<sp/>than<sp/>or<sp/>equal</highlight></codeline>
<codeline lineno="104"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>to<sp/>the<sp/>specified<sp/>API<sp/>version.</highlight></codeline>
<codeline lineno="105"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="106"><highlight class="comment"><sp/>*<sp/>@note<sp/>API<sp/>version<sp/>to<sp/>be<sp/>used<sp/>is<sp/>configured<sp/>using<sp/>following<sp/>symbols:</highlight></codeline>
<codeline lineno="107"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>@ref<sp/>NRFX_CONFIG_API_VER_MAJOR</highlight></codeline>
<codeline lineno="108"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>@ref<sp/>NRFX_CONFIG_API_VER_MINOR</highlight></codeline>
<codeline lineno="109"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>@ref<sp/>NRFX_CONFIG_API_VER_MICRO</highlight></codeline>
<codeline lineno="110"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="111"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>major<sp/>Major<sp/>API<sp/>version.</highlight></codeline>
<codeline lineno="112"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>minor<sp/>Minor<sp/>API<sp/>version.</highlight></codeline>
<codeline lineno="113"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>micro<sp/>Micro<sp/>API<sp/>version.</highlight></codeline>
<codeline lineno="114"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="115"><highlight class="comment"><sp/>*<sp/>@retval<sp/>true<sp/><sp/>Configured<sp/>API<sp/>version<sp/>is<sp/>greater<sp/>than<sp/>or<sp/>equal<sp/>to<sp/>the<sp/>specified<sp/>API<sp/>version.</highlight></codeline>
<codeline lineno="116"><highlight class="comment"><sp/>*<sp/>@retval<sp/>false<sp/>Configured<sp/>API<sp/>version<sp/>is<sp/>smaller<sp/>than<sp/>the<sp/>specified<sp/>API<sp/>version.</highlight></codeline>
<codeline lineno="117"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRFX_API_VER_AT_LEAST(major,<sp/>minor,<sp/>micro)<sp/>\</highlight></codeline>
<codeline lineno="119"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>((NRFX_CONFIG_API_VER_MAJOR<sp/>&gt;=<sp/>(major))<sp/>&amp;&amp;<sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="120"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>(NRFX_CONFIG_API_VER_MINOR<sp/>&gt;=<sp/>(minor))<sp/>&amp;&amp;<sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="121"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>(NRFX_CONFIG_API_VER_MICRO<sp/>&gt;=<sp/>(micro)))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="123"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="124"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Macro<sp/>for<sp/>creating<sp/>unsigned<sp/>integer<sp/>with<sp/>bit<sp/>position<sp/>@p<sp/>x<sp/>set.</highlight></codeline>
<codeline lineno="125"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="126"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>x<sp/>Bit<sp/>position<sp/>to<sp/>be<sp/>set.</highlight></codeline>
<codeline lineno="127"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="128"><highlight class="comment"><sp/>*<sp/>@return<sp/>Unsigned<sp/>integer<sp/>with<sp/>requested<sp/>bit<sp/>position<sp/>set.</highlight></codeline>
<codeline lineno="129"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRFX_BIT(x)<sp/>(1UL<sp/>&lt;&lt;<sp/>(x))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="132"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="133"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Macro<sp/>for<sp/>returning<sp/>bit<sp/>mask<sp/>or<sp/>0<sp/>if<sp/>@p<sp/>x<sp/>is<sp/>0.</highlight></codeline>
<codeline lineno="134"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="135"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>x<sp/>Bit<sp/>mask<sp/>size.<sp/>Bit<sp/>mask<sp/>has<sp/>bits<sp/>0<sp/>through<sp/>x-1<sp/>(inclusive)<sp/>set.</highlight></codeline>
<codeline lineno="136"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="137"><highlight class="comment"><sp/>*<sp/>@return<sp/>Bit<sp/>mask.</highlight></codeline>
<codeline lineno="138"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRFX_BIT_MASK(x)<sp/>(((x)<sp/>==<sp/>32)<sp/>?<sp/>UINT32_MAX<sp/>:<sp/>((1UL<sp/>&lt;&lt;<sp/>(x))<sp/>-<sp/>1))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="141"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="142"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Macro<sp/>for<sp/>returning<sp/>size<sp/>in<sp/>bits<sp/>for<sp/>given<sp/>size<sp/>in<sp/>bytes.</highlight></codeline>
<codeline lineno="143"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="144"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>x<sp/>Size<sp/>in<sp/>bytes.</highlight></codeline>
<codeline lineno="145"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="146"><highlight class="comment"><sp/>*<sp/>@return<sp/>Size<sp/>in<sp/>bits.</highlight></codeline>
<codeline lineno="147"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRFX_BIT_SIZE(x)<sp/>((x)<sp/>&lt;&lt;<sp/>3)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="150"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="151"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Macro<sp/>for<sp/>concatenating<sp/>two<sp/>tokens<sp/>in<sp/>macro<sp/>expansion.</highlight></codeline>
<codeline lineno="152"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="153"><highlight class="comment"><sp/>*<sp/>@note<sp/>This<sp/>macro<sp/>is<sp/>expanded<sp/>in<sp/>two<sp/>steps<sp/>so<sp/>that<sp/>tokens<sp/>given<sp/>as<sp/>macros</highlight></codeline>
<codeline lineno="154"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>themselves<sp/>are<sp/>fully<sp/>expanded<sp/>before<sp/>they<sp/>are<sp/>merged.</highlight></codeline>
<codeline lineno="155"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="156"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p1<sp/>First<sp/>token.</highlight></codeline>
<codeline lineno="157"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p2<sp/>Second<sp/>token.</highlight></codeline>
<codeline lineno="158"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="159"><highlight class="comment"><sp/>*<sp/>@return<sp/>The<sp/>two<sp/>tokens<sp/>merged<sp/>into<sp/>one,<sp/>unless<sp/>they<sp/>cannot<sp/>together<sp/>form</highlight></codeline>
<codeline lineno="160"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a<sp/>valid<sp/>token<sp/>(in<sp/>such<sp/>case,<sp/>the<sp/>preprocessor<sp/>issues<sp/>a<sp/>warning<sp/>and</highlight></codeline>
<codeline lineno="161"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>does<sp/>not<sp/>perform<sp/>the<sp/>concatenation).</highlight></codeline>
<codeline lineno="162"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="163"><highlight class="comment"><sp/>*<sp/>@sa<sp/>NRFX_CONCAT_3</highlight></codeline>
<codeline lineno="164"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRFX_CONCAT_2(p1,<sp/>p2)<sp/>NRFX_CONCAT_2_(p1,<sp/>p2)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="167"><highlight class="comment">/**<sp/>@brief<sp/>Internal<sp/>macro<sp/>used<sp/>by<sp/>@ref<sp/>NRFX_CONCAT_2<sp/>to<sp/>perform<sp/>the<sp/>expansion<sp/>in<sp/>two<sp/>steps.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRFX_CONCAT_2_(p1,<sp/>p2)<sp/>p1<sp/>##<sp/>p2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="170"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="171"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Macro<sp/>for<sp/>concatenating<sp/>three<sp/>tokens<sp/>in<sp/>macro<sp/>expansion.</highlight></codeline>
<codeline lineno="172"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="173"><highlight class="comment"><sp/>*<sp/>@note<sp/>This<sp/>macro<sp/>is<sp/>expanded<sp/>in<sp/>two<sp/>steps<sp/>so<sp/>that<sp/>tokens<sp/>given<sp/>as<sp/>macros</highlight></codeline>
<codeline lineno="174"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>themselves<sp/>are<sp/>fully<sp/>expanded<sp/>before<sp/>they<sp/>are<sp/>merged.</highlight></codeline>
<codeline lineno="175"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="176"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p1<sp/>First<sp/>token.</highlight></codeline>
<codeline lineno="177"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p2<sp/>Second<sp/>token.</highlight></codeline>
<codeline lineno="178"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p3<sp/>Third<sp/>token.</highlight></codeline>
<codeline lineno="179"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="180"><highlight class="comment"><sp/>*<sp/>@return<sp/>The<sp/>three<sp/>tokens<sp/>merged<sp/>into<sp/>one,<sp/>unless<sp/>they<sp/>cannot<sp/>together<sp/>form</highlight></codeline>
<codeline lineno="181"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a<sp/>valid<sp/>token<sp/>(in<sp/>such<sp/>case,<sp/>the<sp/>preprocessor<sp/>issues<sp/>a<sp/>warning<sp/>and</highlight></codeline>
<codeline lineno="182"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>does<sp/>not<sp/>perform<sp/>the<sp/>concatenation).</highlight></codeline>
<codeline lineno="183"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="184"><highlight class="comment"><sp/>*<sp/>@sa<sp/>NRFX_CONCAT_2</highlight></codeline>
<codeline lineno="185"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRFX_CONCAT_3(p1,<sp/>p2,<sp/>p3)<sp/>NRFX_CONCAT_3_(p1,<sp/>p2,<sp/>p3)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="188"><highlight class="comment">/**<sp/>@brief<sp/>Internal<sp/>macro<sp/>used<sp/>by<sp/>@ref<sp/>NRFX_CONCAT_3<sp/>to<sp/>perform<sp/>the<sp/>expansion<sp/>in<sp/>two<sp/>steps.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRFX_CONCAT_3_(p1,<sp/>p2,<sp/>p3)<sp/>p1<sp/>##<sp/>p2<sp/>##<sp/>p3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="191"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="192"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Macro<sp/>for<sp/>computing<sp/>the<sp/>absolute<sp/>value<sp/>of<sp/>an<sp/>integer<sp/>number.</highlight></codeline>
<codeline lineno="193"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="194"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>a<sp/>Input<sp/>value.</highlight></codeline>
<codeline lineno="195"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="196"><highlight class="comment"><sp/>*<sp/>@return<sp/>Absolute<sp/>value.</highlight></codeline>
<codeline lineno="197"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRFX_ABS(a)<sp/>((a)<sp/>&lt;<sp/>(0)<sp/>?<sp/>-(a)<sp/>:<sp/>(a))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="200"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="201"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Macro<sp/>for<sp/>checking<sp/>whether<sp/>any<sp/>of<sp/>the<sp/>instance<sp/>of<sp/>the<sp/>specified<sp/>peripheral<sp/>supports<sp/>a<sp/>given<sp/>feature.</highlight></codeline>
<codeline lineno="202"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="203"><highlight class="comment"><sp/>*<sp/>Macro<sp/>checks<sp/>flags<sp/>set<sp/>in<sp/>\&lt;device\&gt;_peripherals.h<sp/>file.</highlight></codeline>
<codeline lineno="204"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="205"><highlight class="comment"><sp/>*<sp/>Macro<sp/>supports<sp/>check<sp/>on<sp/>instances<sp/>with<sp/>following<sp/>names:</highlight></codeline>
<codeline lineno="206"><highlight class="comment"><sp/>*<sp/>-<sp/>\&lt;periph_name\&gt;0<sp/>-<sp/>\&lt;periph_name\&gt;255<sp/>-<sp/>e.g.<sp/>SPIM0,<sp/>SPIM255</highlight></codeline>
<codeline lineno="207"><highlight class="comment"><sp/>*<sp/>-<sp/>\&lt;periph_name\&gt;00<sp/>-<sp/>\&lt;periph_name\&gt;099<sp/>-<sp/>e.g.<sp/>SPIM00,<sp/>SPIM099</highlight></codeline>
<codeline lineno="208"><highlight class="comment"><sp/>*<sp/>-<sp/>\&lt;periph_name\&gt;000<sp/>-<sp/>\&lt;periph_name\&gt;009<sp/>-<sp/>e.g.<sp/>SPIM000,<sp/>SPIM009</highlight></codeline>
<codeline lineno="209"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="210"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>periph_name<sp/><sp/>Peripheral<sp/>name,<sp/>e.g.<sp/>SPIM.</highlight></codeline>
<codeline lineno="211"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>feature_name<sp/>Feature<sp/>flag<sp/>name<sp/>suffix<sp/>following<sp/>an<sp/>instance<sp/>name,<sp/>e.g.</highlight></codeline>
<codeline lineno="212"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_FEATURE_HARDWARE_CSN_PRESENT.</highlight></codeline>
<codeline lineno="213"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="214"><highlight class="comment"><sp/>*<sp/>@retval<sp/>1<sp/>At<sp/>least<sp/>one<sp/>instance<sp/>on<sp/>current<sp/>device<sp/>supports<sp/>a<sp/>given<sp/>feature.</highlight></codeline>
<codeline lineno="215"><highlight class="comment"><sp/>*<sp/>@retval<sp/>0<sp/>None<sp/>of<sp/>peripheral<sp/>instances<sp/>supports<sp/>a<sp/>given<sp/>feature.</highlight></codeline>
<codeline lineno="216"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRFX_FEATURE_PRESENT(periph_name,<sp/>feature_name)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="218"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NRFX_COND_CODE_0(NRFX_CONCAT(0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="219"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_NRFX_FEATURE_PRESENT(periph_name,<sp/>feature_name,<sp/>256),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="220"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_NRFX_FEATURE_PRESENT(NRFX_CONCAT(periph_name,<sp/>0),<sp/>feature_name,<sp/>100),<sp/>\</highlight></codeline>
<codeline lineno="221"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_NRFX_FEATURE_PRESENT(NRFX_CONCAT(periph_name,<sp/>00),<sp/>feature_name,<sp/>10)<sp/><sp/>\</highlight></codeline>
<codeline lineno="222"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="223"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(0),<sp/>(1))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="225"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="226"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Macro<sp/>for<sp/>resolving<sp/>provided<sp/>user<sp/>macro<sp/>for<sp/>enabled<sp/>instances<sp/>of<sp/>a<sp/>driver.</highlight></codeline>
<codeline lineno="227"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="228"><highlight class="comment"><sp/>*<sp/>Macro<sp/>checks<sp/>if<sp/>driver<sp/>instances<sp/>are<sp/>enabled<sp/>for<sp/>all<sp/>potential<sp/>instaces<sp/>of<sp/>a</highlight></codeline>
<codeline lineno="229"><highlight class="comment"><sp/>*<sp/>peripheral.<sp/>It<sp/>takes<sp/>peripheral<sp/>name<sp/>and<sp/>checks<sp/>whether<sp/>NRFX_\&lt;peripheral\&gt;\&lt;id\&gt;_ENABLED</highlight></codeline>
<codeline lineno="230"><highlight class="comment"><sp/>*<sp/>is<sp/>set<sp/>to<sp/>1<sp/>and<sp/>if<sp/>yes<sp/>then<sp/>provided<sp/>macro<sp/>is<sp/>evaluated<sp/>for<sp/>given<sp/>instance.</highlight></codeline>
<codeline lineno="231"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="232"><highlight class="comment"><sp/>*<sp/>Macro<sp/>supports<sp/>check<sp/>on<sp/>instances<sp/>with<sp/>following<sp/>names:</highlight></codeline>
<codeline lineno="233"><highlight class="comment"><sp/>*<sp/>-<sp/>\&lt;periph_name\&gt;0<sp/>-<sp/>\&lt;periph_name\&gt;255<sp/>-<sp/>e.g.<sp/>SPIM0,<sp/>SPIM255</highlight></codeline>
<codeline lineno="234"><highlight class="comment"><sp/>*<sp/>-<sp/>\&lt;periph_name\&gt;00<sp/>-<sp/>\&lt;periph_name\&gt;099<sp/>-<sp/>e.g.<sp/>SPIM00,<sp/>SPIM099</highlight></codeline>
<codeline lineno="235"><highlight class="comment"><sp/>*<sp/>-<sp/>\&lt;periph_name\&gt;000<sp/>-<sp/>\&lt;periph_name\&gt;009<sp/>-<sp/>e.g.<sp/>SPIM000,<sp/>SPIM009</highlight></codeline>
<codeline lineno="236"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="237"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>periph_name<sp/>Peripheral<sp/>name,<sp/>e.g.<sp/>SPIM.</highlight></codeline>
<codeline lineno="238"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>macro<sp/><sp/><sp/><sp/><sp/><sp/><sp/>Macro<sp/>which<sp/>is<sp/>resolved<sp/>if<sp/>driver<sp/>instance<sp/>is<sp/>enabled.<sp/>Macro<sp/>has<sp/>following</highlight></codeline>
<codeline lineno="239"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>arguments:<sp/>macro(periph_name,<sp/>prefix,<sp/>i,<sp/>...).</highlight></codeline>
<codeline lineno="240"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>sep<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Separator<sp/>added<sp/>between<sp/>all<sp/>evaluations,<sp/>in<sp/>parentheses.</highlight></codeline>
<codeline lineno="241"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>off_code<sp/><sp/><sp/><sp/>Code<sp/>injected<sp/>for<sp/>disabled<sp/>instances,<sp/>in<sp/>parentheses.</highlight></codeline>
<codeline lineno="242"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRFX_FOREACH_ENABLED(periph_name,<sp/>macro,<sp/>sep,<sp/>off_code,<sp/>...)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="244"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NRFX_LISTIFY(256,<sp/>_NRFX_EVAL_IF_ENABLED,<sp/>sep,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="245"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>off_code,<sp/>periph_name,<sp/>,<sp/>macro,<sp/>__VA_ARGS__)<sp/>NRFX_DEBRACKET<sp/>sep<sp/><sp/>\</highlight></codeline>
<codeline lineno="246"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NRFX_LISTIFY(100,<sp/>_NRFX_EVAL_IF_ENABLED,<sp/>sep,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="247"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>off_code,<sp/>periph_name,<sp/>0,<sp/>macro,<sp/>__VA_ARGS__)<sp/>NRFX_DEBRACKET<sp/>sep<sp/>\</highlight></codeline>
<codeline lineno="248"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NRFX_LISTIFY(10,<sp/>_NRFX_EVAL_IF_ENABLED,<sp/>sep,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="249"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>off_code,<sp/>periph_name,<sp/>00,<sp/>macro,<sp/>__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="251"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="252"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Macro<sp/>for<sp/>resolving<sp/>provided<sp/>user<sp/>macro<sp/>for<sp/>present<sp/>instances<sp/>of<sp/>a<sp/>peripheral.</highlight></codeline>
<codeline lineno="253"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="254"><highlight class="comment"><sp/>*<sp/>Macro<sp/>checks<sp/>if<sp/>peripheral<sp/>instances<sp/>are<sp/>present<sp/>by<sp/>checking<sp/>if<sp/>there<sp/>is<sp/>a<sp/>token</highlight></codeline>
<codeline lineno="255"><highlight class="comment"><sp/>*<sp/>NRF_\&lt;periph_name\&gt;\&lt;id\&gt;<sp/>defined<sp/>with<sp/>wrapped<sp/>in<sp/>parenthesis<sp/>value.</highlight></codeline>
<codeline lineno="256"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="257"><highlight class="comment"><sp/>*<sp/>Macro<sp/>supports<sp/>check<sp/>on<sp/>instances<sp/>with<sp/>following<sp/>names:</highlight></codeline>
<codeline lineno="258"><highlight class="comment"><sp/>*<sp/>-<sp/>\&lt;periph_name\&gt;0<sp/>-<sp/>\&lt;periph_name\&gt;255<sp/>-<sp/>e.g.<sp/>SPIM0,<sp/>SPIM255</highlight></codeline>
<codeline lineno="259"><highlight class="comment"><sp/>*<sp/>-<sp/>\&lt;periph_name\&gt;00<sp/>-<sp/>\&lt;periph_name\&gt;099<sp/>-<sp/>e.g.<sp/>SPIM00,<sp/>SPIM099</highlight></codeline>
<codeline lineno="260"><highlight class="comment"><sp/>*<sp/>-<sp/>\&lt;periph_name\&gt;000<sp/>-<sp/>\&lt;periph_name\&gt;009<sp/>-<sp/>e.g.<sp/>SPIM000,<sp/>SPIM009</highlight></codeline>
<codeline lineno="261"><highlight class="comment"><sp/>*<sp/>-<sp/>\&lt;periph_name\&gt;<sp/>-<sp/>e.g.<sp/>SPIM</highlight></codeline>
<codeline lineno="262"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="263"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>periph_name<sp/>Peripheral<sp/>name,<sp/>e.g.<sp/>SPIM.</highlight></codeline>
<codeline lineno="264"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>macro<sp/><sp/><sp/><sp/><sp/><sp/><sp/>Macro<sp/>which<sp/>is<sp/>resolved<sp/>if<sp/>peripheral<sp/>instance<sp/>is<sp/>present.</highlight></codeline>
<codeline lineno="265"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Macro<sp/>has<sp/>following<sp/>arguments:<sp/>macro(periph_name,<sp/>prefix,<sp/>i,<sp/>...).</highlight></codeline>
<codeline lineno="266"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>sep<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Separator<sp/>added<sp/>between<sp/>all<sp/>evaluations,<sp/>in<sp/>parentheses.</highlight></codeline>
<codeline lineno="267"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>off_code<sp/><sp/><sp/><sp/>Code<sp/>injected<sp/>for<sp/>disabled<sp/>instances,<sp/>in<sp/>parentheses.</highlight></codeline>
<codeline lineno="268"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRFX_FOREACH_PRESENT(periph_name,<sp/>macro,<sp/>sep,<sp/>off_code,<sp/>...)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="270"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NRFX_LISTIFY(256,<sp/>_NRFX_EVAL_IF_PRESENT,<sp/>sep,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="271"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>off_code,<sp/>periph_name,<sp/>,<sp/>macro,<sp/>__VA_ARGS__)<sp/>NRFX_DEBRACKET<sp/>sep<sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="272"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NRFX_LISTIFY(100,<sp/>_NRFX_EVAL_IF_PRESENT,<sp/>sep,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="273"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>off_code,<sp/>periph_name,<sp/>0,<sp/>macro,<sp/>__VA_ARGS__)<sp/>NRFX_DEBRACKET<sp/>sep<sp/><sp/>\</highlight></codeline>
<codeline lineno="274"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NRFX_LISTIFY(10,<sp/>_NRFX_EVAL_IF_PRESENT,<sp/>sep,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="275"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>off_code,<sp/>periph_name,<sp/>00,<sp/>macro,<sp/>__VA_ARGS__)<sp/>NRFX_DEBRACKET<sp/>sep<sp/>\</highlight></codeline>
<codeline lineno="276"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_NRFX_EVAL_IF_PRESENT(,<sp/>off_code,<sp/>periph_name,<sp/>,<sp/>macro,<sp/>__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="278"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="279"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Macro<sp/>for<sp/>resolving<sp/>provided<sp/>user<sp/>macro<sp/>on<sp/>concatenated<sp/>peripheral<sp/>name</highlight></codeline>
<codeline lineno="280"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>and<sp/>instance<sp/>index.</highlight></codeline>
<codeline lineno="281"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="282"><highlight class="comment"><sp/>*<sp/>Execute<sp/>provided<sp/>macro<sp/>with<sp/>single<sp/>argument<sp/>&lt;instance\&gt;</highlight></codeline>
<codeline lineno="283"><highlight class="comment"><sp/>*<sp/>that<sp/>is<sp/>the<sp/>concatenation<sp/>of<sp/>@p<sp/>periph_name,<sp/>@p<sp/>prefix<sp/>and<sp/>@p<sp/>i.</highlight></codeline>
<codeline lineno="284"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="285"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>i<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Instance<sp/>index.</highlight></codeline>
<codeline lineno="286"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>periph_name<sp/>Peripheral<sp/>name,<sp/>e.g.<sp/>SPIM.</highlight></codeline>
<codeline lineno="287"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>prefix<sp/><sp/><sp/><sp/><sp/><sp/>Prefix<sp/>added<sp/>before<sp/>instance<sp/>index,<sp/>e.g.<sp/>some<sp/>device<sp/>has</highlight></codeline>
<codeline lineno="288"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>instances<sp/>named<sp/>like<sp/>SPIM00.<sp/>First<sp/>0<sp/>is<sp/>passed<sp/>here<sp/>as<sp/>prefix.</highlight></codeline>
<codeline lineno="289"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>macro<sp/><sp/><sp/><sp/><sp/><sp/><sp/>Macro<sp/>which<sp/>is<sp/>executed.</highlight></codeline>
<codeline lineno="290"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>...<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Variable<sp/>length<sp/>arguments<sp/>passed<sp/>to<sp/>the<sp/>@p<sp/>macro.<sp/>Macro<sp/>has<sp/>following</highlight></codeline>
<codeline lineno="291"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>arguments:<sp/>macro(instance,<sp/>...).</highlight></codeline>
<codeline lineno="292"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRFX_INSTANCE_CONCAT(periph_name,<sp/>prefix,<sp/>i,<sp/>macro,<sp/>...)<sp/>\</highlight></codeline>
<codeline lineno="294"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>macro(NRFX_CONCAT(periph_name,<sp/>prefix,<sp/>i),<sp/>__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="296"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="297"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Macro<sp/>for<sp/>creating<sp/>a<sp/>content<sp/>for<sp/>enum<sp/>which<sp/>is<sp/>listing<sp/>enabled<sp/>driver<sp/>instances.</highlight></codeline>
<codeline lineno="298"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="299"><highlight class="comment"><sp/>*<sp/>It<sp/>creates<sp/>comma<sp/>separated<sp/>list<sp/>of<sp/>entries<sp/>like<sp/>NRFX_\&lt;instance_name\&gt;_INST_IDX,</highlight></codeline>
<codeline lineno="300"><highlight class="comment"><sp/>*<sp/>e.g.<sp/>(NRFX_SPIM0_INST_IDX)<sp/>for<sp/>all<sp/>enabled<sp/>instances<sp/>(NRFX_\&lt;instance_name\&gt;_ENABLED</highlight></codeline>
<codeline lineno="301"><highlight class="comment"><sp/>*<sp/>is<sp/>set<sp/>to<sp/>1).<sp/>It<sp/>should<sp/>be<sp/>called<sp/>within<sp/>enum<sp/>declaration.<sp/>Created<sp/>enum<sp/>is<sp/>used</highlight></codeline>
<codeline lineno="302"><highlight class="comment"><sp/>*<sp/>by<sp/>the<sp/>driver<sp/>to<sp/>index<sp/>all<sp/>enabled<sp/>instances<sp/>of<sp/>the<sp/>driver.</highlight></codeline>
<codeline lineno="303"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="304"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>periph_name<sp/>Peripheral<sp/>name<sp/>(e.g.<sp/>SPIM).</highlight></codeline>
<codeline lineno="305"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRFX_INSTANCE_ENUM_LIST(periph_name)<sp/>\</highlight></codeline>
<codeline lineno="307"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NRFX_FOREACH_ENABLED(periph_name,<sp/>_NRFX_INST_ENUM,<sp/>(),<sp/>())</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="309"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="310"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Macro<sp/>for<sp/>creating<sp/>an<sp/>interrupt<sp/>handler<sp/>for<sp/>all<sp/>enabled<sp/>driver<sp/>instances.</highlight></codeline>
<codeline lineno="311"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="312"><highlight class="comment"><sp/>*<sp/>Macro<sp/>creates<sp/>a<sp/>set<sp/>of<sp/>functions<sp/>which<sp/>calls<sp/>generic<sp/>@p<sp/>irq_handler<sp/>function<sp/>with<sp/>two<sp/>parameters:</highlight></codeline>
<codeline lineno="313"><highlight class="comment"><sp/>*<sp/>-<sp/>peripheral<sp/>instance<sp/>register<sp/>pointer</highlight></codeline>
<codeline lineno="314"><highlight class="comment"><sp/>*<sp/>-<sp/>pointer<sp/>to<sp/>a<sp/>control<sp/>block<sp/>structure<sp/>associated<sp/>with<sp/>the<sp/>given<sp/>instance</highlight></codeline>
<codeline lineno="315"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="316"><highlight class="comment"><sp/>*<sp/>Generic<sp/>interrupt<sp/>handler<sp/>function<sp/>with<sp/>above<sp/>mentioned<sp/>parameters<sp/>named<sp/>@p<sp/>irq_handler</highlight></codeline>
<codeline lineno="317"><highlight class="comment"><sp/>*<sp/>must<sp/>be<sp/>implemented<sp/>in<sp/>the<sp/>driver.</highlight></codeline>
<codeline lineno="318"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="319"><highlight class="comment"><sp/>*<sp/>@note<sp/>Handlers<sp/>are<sp/>using<sp/>enum<sp/>which<sp/>should<sp/>be<sp/>generated<sp/>using<sp/>@ref<sp/>NRFX_INSTANCE_ENUM_LIST.</highlight></codeline>
<codeline lineno="320"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="321"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>periph_name<sp/><sp/><sp/><sp/><sp/><sp/><sp/>Peripheral<sp/>name,<sp/>e.g.<sp/>SPIM.</highlight></codeline>
<codeline lineno="322"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>periph_name_small<sp/>Peripheral<sp/>name<sp/>written<sp/>with<sp/>small<sp/>letters,<sp/>e.g.<sp/>spim.</highlight></codeline>
<codeline lineno="323"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRFX_INSTANCE_IRQ_HANDLERS(periph_name,<sp/>periph_name_small)<sp/>\</highlight></codeline>
<codeline lineno="325"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>NRFX_FOREACH_ENABLED(periph_name,<sp/>_NRFX_IRQ_HANDLER,<sp/>(),<sp/>(),<sp/>periph_name_small)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="327"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="328"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Macro<sp/>for<sp/>creating<sp/>an<sp/>interrupt<sp/>handler<sp/>for<sp/>all<sp/>enabled<sp/>driver<sp/>instances</highlight></codeline>
<codeline lineno="329"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>with<sp/>the<sp/>specified<sp/>extra<sp/>parameter.</highlight></codeline>
<codeline lineno="330"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="331"><highlight class="comment"><sp/>*<sp/>Macro<sp/>creates<sp/>set<sp/>of<sp/>function<sp/>which<sp/>calls<sp/>generic<sp/>@p<sp/>irq_handler<sp/>function<sp/>with<sp/>three<sp/>parameters:</highlight></codeline>
<codeline lineno="332"><highlight class="comment"><sp/>*<sp/>-<sp/>peripheral<sp/>instance<sp/>register<sp/>pointer</highlight></codeline>
<codeline lineno="333"><highlight class="comment"><sp/>*<sp/>-<sp/>pointer<sp/>to<sp/>a<sp/>control<sp/>block<sp/>structure<sp/>associated<sp/>with<sp/>the<sp/>given<sp/>instance</highlight></codeline>
<codeline lineno="334"><highlight class="comment"><sp/>*<sp/>-<sp/>provided<sp/>@p<sp/>ext_macro<sp/>called<sp/>with<sp/>peripheral<sp/>name<sp/>suffix<sp/>(e.g.<sp/>01<sp/>for<sp/>TIMER01)</highlight></codeline>
<codeline lineno="335"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="336"><highlight class="comment"><sp/>*<sp/>Generic<sp/>interrupt<sp/>handler<sp/>function<sp/>with<sp/>above<sp/>mentioned<sp/>parameters<sp/>named<sp/>@p<sp/>irq_handler</highlight></codeline>
<codeline lineno="337"><highlight class="comment"><sp/>*<sp/>must<sp/>be<sp/>implemented<sp/>in<sp/>the<sp/>driver.</highlight></codeline>
<codeline lineno="338"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="339"><highlight class="comment"><sp/>*<sp/>@note<sp/>Handlers<sp/>are<sp/>using<sp/>enum<sp/>which<sp/>should<sp/>be<sp/>generated<sp/>using<sp/>@ref<sp/>NRFX_INSTANCE_ENUM_LIST.</highlight></codeline>
<codeline lineno="340"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="341"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>periph_name<sp/><sp/><sp/><sp/><sp/><sp/><sp/>Peripheral<sp/>name,<sp/>e.g.<sp/>SPIM.</highlight></codeline>
<codeline lineno="342"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>periph_name_small<sp/>Peripheral<sp/>name<sp/>written<sp/>with<sp/>small<sp/>letters,<sp/>e.g.<sp/>rtc.</highlight></codeline>
<codeline lineno="343"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>ext_macro<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>External<sp/>macro<sp/>to<sp/>be<sp/>executed<sp/>for<sp/>each<sp/>instance.</highlight></codeline>
<codeline lineno="344"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRFX_INSTANCE_IRQ_HANDLERS_EXT(periph_name,<sp/>periph_name_small,<sp/>ext_macro)<sp/>\</highlight></codeline>
<codeline lineno="346"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>NRFX_FOREACH_ENABLED(periph_name,<sp/>_NRFX_IRQ_HANDLER_EXT,<sp/>(),<sp/>(),<sp/>periph_name_small,<sp/>ext_macro)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="348"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="349"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Macro<sp/>for<sp/>declaring<sp/>an<sp/>interrupt<sp/>handler<sp/>for<sp/>all<sp/>enabled<sp/>driver<sp/>instances.</highlight></codeline>
<codeline lineno="350"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="351"><highlight class="comment"><sp/>*<sp/>Macro<sp/>creates<sp/>set<sp/>of<sp/>function<sp/>declarations.<sp/>It<sp/>is<sp/>intended<sp/>to<sp/>be<sp/>used<sp/>in<sp/>the<sp/>driver<sp/>header.</highlight></codeline>
<codeline lineno="352"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="353"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>periph_name<sp/><sp/><sp/><sp/><sp/><sp/><sp/>Peripheral<sp/>name,<sp/>e.g.<sp/>SPIM.</highlight></codeline>
<codeline lineno="354"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>periph_name_small<sp/>Peripheral<sp/>name<sp/>written<sp/>with<sp/>small<sp/>letters,<sp/>e.g.<sp/>spim.</highlight></codeline>
<codeline lineno="355"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRFX_INSTANCE_IRQ_HANDLERS_DECLARE(periph_name,<sp/>periph_name_small)<sp/>\</highlight></codeline>
<codeline lineno="357"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>NRFX_FOREACH_ENABLED(periph_name,<sp/>_NRFX_IRQ_HANDLER_DECLARE,<sp/>(),<sp/>(),<sp/>periph_name_small)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="359"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="360"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Macro<sp/>for<sp/>generating<sp/>comma-separated<sp/>list<sp/>of<sp/>interrupt<sp/>handlers<sp/>for<sp/>all</highlight></codeline>
<codeline lineno="361"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>enabled<sp/>driver<sp/>instances.</highlight></codeline>
<codeline lineno="362"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="363"><highlight class="comment"><sp/>*<sp/>Interrupt<sp/>handlers<sp/>are<sp/>generated<sp/>using<sp/>@ref<sp/>NRFX_INSTANCE_IRQ_HANDLERS.</highlight></codeline>
<codeline lineno="364"><highlight class="comment"><sp/>*<sp/>It<sp/>is<sp/>intended<sp/>to<sp/>be<sp/>used<sp/>to<sp/>create<sp/>a<sp/>list<sp/>which<sp/>is<sp/>used<sp/>for<sp/>passing<sp/>an<sp/>interrupt</highlight></codeline>
<codeline lineno="365"><highlight class="comment"><sp/>*<sp/>handler<sp/>function<sp/>to<sp/>the<sp/>PRS<sp/>driver.</highlight></codeline>
<codeline lineno="366"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="367"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>periph_name<sp/><sp/><sp/><sp/><sp/><sp/><sp/>Peripheral<sp/>name,<sp/>e.g.<sp/>SPIM.</highlight></codeline>
<codeline lineno="368"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>periph_name_small<sp/>Peripheral<sp/>name<sp/>written<sp/>with<sp/>small<sp/>letters,<sp/>e.g.<sp/>spim.</highlight></codeline>
<codeline lineno="369"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRFX_INSTANCE_IRQ_HANDLERS_LIST(periph_name,<sp/>periph_name_small)<sp/>\</highlight></codeline>
<codeline lineno="371"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>NRFX_FOREACH_ENABLED(periph_name,<sp/>_NRFX_IRQ_HANDLER_LIST,<sp/>(),<sp/>(),<sp/>periph_name_small)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="373"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="374"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Macro<sp/>for<sp/>checking<sp/>if<sp/>given<sp/>peripheral<sp/>instance<sp/>is<sp/>present<sp/>on<sp/>the<sp/>target.</highlight></codeline>
<codeline lineno="375"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="376"><highlight class="comment"><sp/>*<sp/>Macro<sp/>utilizes<sp/>the<sp/>fact<sp/>that<sp/>for<sp/>each<sp/>existing<sp/>instance<sp/>a<sp/>define<sp/>is<sp/>created<sp/>which<sp/>points<sp/>to</highlight></codeline>
<codeline lineno="377"><highlight class="comment"><sp/>*<sp/>the<sp/>memory<sp/>mapped<sp/>register<sp/>set<sp/>casted<sp/>to<sp/>a<sp/>register<sp/>set<sp/>structure.<sp/>It<sp/>is<sp/>wrapped<sp/>in<sp/>parenthesis</highlight></codeline>
<codeline lineno="378"><highlight class="comment"><sp/>*<sp/>and<sp/>existance<sp/>of<sp/>parethesis<sp/>wrapping<sp/>is<sp/>used<sp/>to<sp/>determine<sp/>if<sp/>instance<sp/>exists.<sp/>It<sp/>if<sp/>does<sp/>not</highlight></codeline>
<codeline lineno="379"><highlight class="comment"><sp/>*<sp/>exist<sp/>then<sp/>token<sp/>(e.g.<sp/>NRF_SPIM10)<sp/>is<sp/>undefined<sp/>so<sp/>it<sp/>does<sp/>not<sp/>have<sp/>parenthesis<sp/>wrapping.</highlight></codeline>
<codeline lineno="380"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="381"><highlight class="comment"><sp/>*<sp/>Since<sp/>macro<sp/>returns<sp/>literal<sp/>1<sp/>it<sp/>can<sp/>be<sp/>used<sp/>by<sp/>other<sp/>macros.</highlight></codeline>
<codeline lineno="382"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="383"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>_inst<sp/>Instance,<sp/>.e.g<sp/>SPIM10.</highlight></codeline>
<codeline lineno="384"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="385"><highlight class="comment"><sp/>*<sp/>@retval<sp/>1<sp/>If<sp/>instance<sp/>is<sp/>present.</highlight></codeline>
<codeline lineno="386"><highlight class="comment"><sp/>*<sp/>@retval<sp/>0<sp/>If<sp/>instance<sp/>is<sp/>not<sp/>present.</highlight></codeline>
<codeline lineno="387"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRFX_INSTANCE_PRESENT(_inst)<sp/>NRFX_ARG_HAS_PARENTHESIS(NRFX_CONCAT(NRF_,<sp/>_inst))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="389"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="390"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="391"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Macro<sp/>for<sp/>getting<sp/>the<sp/>smaller<sp/>value<sp/>between<sp/>two<sp/>arguments.</highlight></codeline>
<codeline lineno="392"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="393"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>a<sp/>First<sp/>argument.</highlight></codeline>
<codeline lineno="394"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>b<sp/>Second<sp/>argument.</highlight></codeline>
<codeline lineno="395"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="396"><highlight class="comment"><sp/>*<sp/>@return<sp/>Smaller<sp/>value<sp/>between<sp/>two<sp/>arguments.</highlight></codeline>
<codeline lineno="397"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="398"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRFX_MIN(a,<sp/>b)<sp/>((a)<sp/>&lt;<sp/>(b)<sp/>?<sp/>(a)<sp/>:<sp/>(b))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="400"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="401"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Macro<sp/>for<sp/>getting<sp/>the<sp/>larger<sp/>value<sp/>between<sp/>two<sp/>arguments.</highlight></codeline>
<codeline lineno="402"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="403"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>a<sp/>First<sp/>argument.</highlight></codeline>
<codeline lineno="404"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>b<sp/>Second<sp/>argument.</highlight></codeline>
<codeline lineno="405"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="406"><highlight class="comment"><sp/>*<sp/>@return<sp/>Larger<sp/>value<sp/>between<sp/>two<sp/>arguments.</highlight></codeline>
<codeline lineno="407"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="408"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRFX_MAX(a,<sp/>b)<sp/>((a)<sp/>&gt;<sp/>(b)<sp/>?<sp/>(a)<sp/>:<sp/>(b))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="409"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="410"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="411"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Macro<sp/>for<sp/>checking<sp/>if<sp/>a<sp/>given<sp/>value<sp/>is<sp/>in<sp/>a<sp/>given<sp/>range.</highlight></codeline>
<codeline lineno="412"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="413"><highlight class="comment"><sp/>*<sp/>@note<sp/>@p<sp/>val<sp/>is<sp/>evaluated<sp/>twice.</highlight></codeline>
<codeline lineno="414"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="415"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>val<sp/>A<sp/>value<sp/>to<sp/>be<sp/>checked.</highlight></codeline>
<codeline lineno="416"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>min<sp/>The<sp/>lower<sp/>bound<sp/>(inclusive).</highlight></codeline>
<codeline lineno="417"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>max<sp/>The<sp/>upper<sp/>bound<sp/>(inclusive).</highlight></codeline>
<codeline lineno="418"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="419"><highlight class="comment"><sp/>*<sp/>@retval<sp/>true<sp/><sp/>The<sp/>value<sp/>is<sp/>in<sp/>the<sp/>given<sp/>range.</highlight></codeline>
<codeline lineno="420"><highlight class="comment"><sp/>*<sp/>@retval<sp/>false<sp/>The<sp/>value<sp/>is<sp/>out<sp/>of<sp/>the<sp/>given<sp/>range.</highlight></codeline>
<codeline lineno="421"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRFX_IN_RANGE(val,<sp/>min,<sp/>max)<sp/>((val)<sp/>&gt;=<sp/>(min)<sp/>&amp;&amp;<sp/>(val)<sp/>&lt;=<sp/>(max))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="423"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="424"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="425"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Macro<sp/>for<sp/>performing<sp/>rounded<sp/>integer<sp/>division<sp/>(as<sp/>opposed<sp/>to</highlight></codeline>
<codeline lineno="426"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>truncating<sp/>the<sp/>result).</highlight></codeline>
<codeline lineno="427"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="428"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>a<sp/>Numerator.</highlight></codeline>
<codeline lineno="429"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>b<sp/>Denominator.</highlight></codeline>
<codeline lineno="430"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="431"><highlight class="comment"><sp/>*<sp/>@return<sp/>Rounded<sp/>(integer)<sp/>result<sp/>of<sp/>dividing<sp/>@c<sp/>a<sp/>by<sp/>@c<sp/>b.</highlight></codeline>
<codeline lineno="432"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="433"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRFX_ROUNDED_DIV(a,<sp/>b)<sp/>\</highlight></codeline>
<codeline lineno="434"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>((((a)<sp/>&lt;<sp/>0)<sp/>^<sp/>((b)<sp/>&lt;<sp/>0))<sp/>?<sp/>(((a)<sp/>-<sp/>(b)<sp/>/<sp/>2)<sp/>/<sp/>(b))<sp/>:<sp/>(((a)<sp/>+<sp/>(b)<sp/>/<sp/>2)<sp/>/<sp/>(b)))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="435"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="436"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="437"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Macro<sp/>for<sp/>performing<sp/>integer<sp/>division,<sp/>making<sp/>sure<sp/>the<sp/>result<sp/>is<sp/>rounded<sp/>up.</highlight></codeline>
<codeline lineno="438"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="439"><highlight class="comment"><sp/>*<sp/>@details<sp/>A<sp/>typical<sp/>use<sp/>case<sp/>for<sp/>this<sp/>macro<sp/>is<sp/>to<sp/>compute<sp/>the<sp/>number<sp/>of<sp/>objects</highlight></codeline>
<codeline lineno="440"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>with<sp/>size<sp/>@c<sp/>b<sp/>required<sp/>to<sp/>hold<sp/>@c<sp/>a<sp/>number<sp/>of<sp/>bytes.</highlight></codeline>
<codeline lineno="441"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="442"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>a<sp/>Numerator.</highlight></codeline>
<codeline lineno="443"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>b<sp/>Denominator.</highlight></codeline>
<codeline lineno="444"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="445"><highlight class="comment"><sp/>*<sp/>@return<sp/>Integer<sp/>result<sp/>of<sp/>dividing<sp/>@c<sp/>a<sp/>by<sp/>@c<sp/>b,<sp/>rounded<sp/>up.</highlight></codeline>
<codeline lineno="446"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="447"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRFX_CEIL_DIV(a,<sp/>b)<sp/>((((a)<sp/>-<sp/>1)<sp/>/<sp/>(b))<sp/>+<sp/>1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="448"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="449"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="450"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Macro<sp/>for<sp/>getting<sp/>the<sp/>number<sp/>of<sp/>elements<sp/>in<sp/>an<sp/>array.</highlight></codeline>
<codeline lineno="451"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="452"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>array<sp/>Name<sp/>of<sp/>the<sp/>array.</highlight></codeline>
<codeline lineno="453"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="454"><highlight class="comment"><sp/>*<sp/>@return<sp/>Array<sp/>element<sp/>count.</highlight></codeline>
<codeline lineno="455"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="456"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRFX_ARRAY_SIZE(array)<sp/>(sizeof(array)<sp/>/<sp/>sizeof((array)[0]))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="457"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="458"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="459"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Macro<sp/>for<sp/>getting<sp/>the<sp/>offset<sp/>(in<sp/>bytes)<sp/>from<sp/>the<sp/>beginning<sp/>of<sp/>a<sp/>structure</highlight></codeline>
<codeline lineno="460"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>of<sp/>the<sp/>specified<sp/>type<sp/>to<sp/>its<sp/>specified<sp/>member.</highlight></codeline>
<codeline lineno="461"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="462"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>type<sp/><sp/><sp/>Structure<sp/>type.</highlight></codeline>
<codeline lineno="463"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>member<sp/>Structure<sp/>member<sp/>whose<sp/>offset<sp/>is<sp/>searched<sp/>for.</highlight></codeline>
<codeline lineno="464"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="465"><highlight class="comment"><sp/>*<sp/>@return<sp/>Member<sp/>offset<sp/>in<sp/>bytes.</highlight></codeline>
<codeline lineno="466"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="467"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRFX_OFFSETOF(type,<sp/>member)<sp/>((size_t)<sp/>&amp;<sp/>(((type<sp/>*)0)-&gt;member))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="468"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="469"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="470"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Macro<sp/>for<sp/>checking<sp/>whether<sp/>given<sp/>number<sp/>is<sp/>power<sp/>of<sp/>2.</highlight></codeline>
<codeline lineno="471"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="472"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>val<sp/>Tested<sp/>value.</highlight></codeline>
<codeline lineno="473"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="474"><highlight class="comment"><sp/>*<sp/>@retval<sp/>true<sp/><sp/>The<sp/>value<sp/>is<sp/>power<sp/>of<sp/>2.</highlight></codeline>
<codeline lineno="475"><highlight class="comment"><sp/>*<sp/>@retval<sp/>false<sp/>The<sp/>value<sp/>is<sp/>not<sp/>power<sp/>of<sp/>2.</highlight></codeline>
<codeline lineno="476"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="477"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRFX_IS_POWER_OF_TWO(val)<sp/>(((val)<sp/>!=<sp/>0)<sp/>&amp;&amp;<sp/>((val)<sp/>&amp;<sp/>((val)<sp/>-<sp/>1))<sp/>==<sp/>0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="478"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="479"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="480"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Macro<sp/>for<sp/>checking<sp/>whether<sp/>a<sp/>given<sp/>number<sp/>is<sp/>even.</highlight></codeline>
<codeline lineno="481"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="482"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>val<sp/>Tested<sp/>value.</highlight></codeline>
<codeline lineno="483"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="484"><highlight class="comment"><sp/>*<sp/>@retval<sp/>true<sp/><sp/>The<sp/>value<sp/>is<sp/>even.</highlight></codeline>
<codeline lineno="485"><highlight class="comment"><sp/>*<sp/>@retval<sp/>false<sp/>The<sp/>value<sp/>is<sp/>odd.</highlight></codeline>
<codeline lineno="486"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="487"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRFX_IS_EVEN(val)<sp/>(((val)<sp/>%<sp/>2)<sp/><sp/>==<sp/>0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="488"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="489"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="490"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Macro<sp/>for<sp/>checking<sp/>if<sp/>given<sp/>lengths<sp/>of<sp/>EasyDMA<sp/>transfers<sp/>do<sp/>not<sp/>exceed</highlight></codeline>
<codeline lineno="491"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>limit<sp/>of<sp/>the<sp/>specified<sp/>peripheral.</highlight></codeline>
<codeline lineno="492"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="493"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>peripheral<sp/>Peripheral<sp/>to<sp/>check<sp/>the<sp/>lengths<sp/>against.</highlight></codeline>
<codeline lineno="494"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>length1<sp/><sp/><sp/><sp/>First<sp/>length<sp/>to<sp/>be<sp/>checked.</highlight></codeline>
<codeline lineno="495"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>length2<sp/><sp/><sp/><sp/>Second<sp/>length<sp/>to<sp/>be<sp/>checked<sp/>(pass<sp/>0<sp/>if<sp/>not<sp/>needed).</highlight></codeline>
<codeline lineno="496"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="497"><highlight class="comment"><sp/>*<sp/>@retval<sp/>true<sp/><sp/>The<sp/>length<sp/>of<sp/>buffers<sp/>does<sp/>not<sp/>exceed<sp/>the<sp/>limit<sp/>of<sp/>the<sp/>specified<sp/>peripheral.</highlight></codeline>
<codeline lineno="498"><highlight class="comment"><sp/>*<sp/>@retval<sp/>false<sp/>The<sp/>length<sp/>of<sp/>buffers<sp/>exceeds<sp/>the<sp/>limit<sp/>of<sp/>the<sp/>specified<sp/>peripheral.</highlight></codeline>
<codeline lineno="499"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="500"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRFX_EASYDMA_LENGTH_VALIDATE(peripheral,<sp/>length1,<sp/>length2)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="501"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>(((length1)<sp/>&lt;<sp/>(1U<sp/>&lt;&lt;<sp/>NRFX_CONCAT_2(peripheral,<sp/>_EASYDMA_MAXCNT_SIZE)))<sp/>&amp;&amp;<sp/>\</highlight></codeline>
<codeline lineno="502"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>((length2)<sp/>&lt;<sp/>(1U<sp/>&lt;&lt;<sp/>NRFX_CONCAT_2(peripheral,<sp/>_EASYDMA_MAXCNT_SIZE))))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="503"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="504"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="505"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Macro<sp/>for<sp/>waiting<sp/>until<sp/>condition<sp/>is<sp/>met.</highlight></codeline>
<codeline lineno="506"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="507"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/><sp/>condition<sp/>Condition<sp/>to<sp/>meet.</highlight></codeline>
<codeline lineno="508"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/><sp/>attempts<sp/><sp/>Maximum<sp/>number<sp/>of<sp/>condition<sp/>checks.<sp/>Must<sp/>not<sp/>be<sp/>0.</highlight></codeline>
<codeline lineno="509"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/><sp/>delay_us<sp/><sp/>Delay<sp/>between<sp/>consecutive<sp/>checks,<sp/>in<sp/>microseconds.</highlight></codeline>
<codeline lineno="510"><highlight class="comment"><sp/>*<sp/>@param[out]<sp/>result<sp/><sp/><sp/><sp/>Boolean<sp/>variable<sp/>to<sp/>store<sp/>the<sp/>result<sp/>of<sp/>the<sp/>wait<sp/>process.</highlight></codeline>
<codeline lineno="511"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Set<sp/>to<sp/>true<sp/>if<sp/>the<sp/>condition<sp/>is<sp/>met<sp/>or<sp/>false<sp/>otherwise.</highlight></codeline>
<codeline lineno="512"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="513"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRFX_WAIT_FOR(condition,<sp/>attempts,<sp/>delay_us,<sp/>result)<sp/>\</highlight></codeline>
<codeline lineno="514"><highlight class="preprocessor">do<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="515"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>result<sp/>=<sp/><sp/>false;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="516"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>uint32_t<sp/>remaining_attempts<sp/>=<sp/>(attempts);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="517"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>do<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="518"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(condition)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="519"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="520"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/><sp/>true;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="521"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>break;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="522"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="523"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NRFX_DELAY_US(delay_us);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="524"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>while<sp/>(--remaining_attempts);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="525"><highlight class="preprocessor">}<sp/>while(0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="526"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="527"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="528"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Macro<sp/>for<sp/>getting<sp/>the<sp/>ID<sp/>number<sp/>of<sp/>the<sp/>specified<sp/>peripheral.</highlight></codeline>
<codeline lineno="529"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="530"><highlight class="comment"><sp/>*<sp/>For<sp/>peripherals<sp/>in<sp/>Nordic<sp/>SoCs,<sp/>there<sp/>is<sp/>a<sp/>direct<sp/>relationship<sp/>between<sp/>their</highlight></codeline>
<codeline lineno="531"><highlight class="comment"><sp/>*<sp/>ID<sp/>numbers<sp/>and<sp/>their<sp/>base<sp/>addresses.<sp/>See<sp/>the<sp/>chapter<sp/>&quot;Peripheral<sp/>interface&quot;</highlight></codeline>
<codeline lineno="532"><highlight class="comment"><sp/>*<sp/>(section<sp/>&quot;Peripheral<sp/>ID&quot;)<sp/>in<sp/>the<sp/>Product<sp/>Specification.</highlight></codeline>
<codeline lineno="533"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="534"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>base_addr<sp/>Peripheral<sp/>base<sp/>address<sp/>or<sp/>pointer.</highlight></codeline>
<codeline lineno="535"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="536"><highlight class="comment"><sp/>*<sp/>@return<sp/>ID<sp/>number<sp/>associated<sp/>with<sp/>the<sp/>specified<sp/>peripheral.</highlight></codeline>
<codeline lineno="537"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="538"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRFX_PERIPHERAL_ID_GET(base_addr)<sp/>(uint16_t)(((uint32_t)(base_addr)<sp/>&gt;&gt;<sp/>12)<sp/>&amp;<sp/>0x000001FF)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="539"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="540"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="541"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Macro<sp/>for<sp/>getting<sp/>the<sp/>interrupt<sp/>number<sp/>assigned<sp/>to<sp/>a<sp/>specific</highlight></codeline>
<codeline lineno="542"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>peripheral.</highlight></codeline>
<codeline lineno="543"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="544"><highlight class="comment"><sp/>*<sp/>For<sp/>peripherals<sp/>in<sp/>Nordic<sp/>SoCs,<sp/>the<sp/>IRQ<sp/>number<sp/>assigned<sp/>to<sp/>a<sp/>peripheral<sp/>is</highlight></codeline>
<codeline lineno="545"><highlight class="comment"><sp/>*<sp/>equal<sp/>to<sp/>its<sp/>ID<sp/>number.<sp/>See<sp/>the<sp/>chapter<sp/>&quot;Peripheral<sp/>interface&quot;<sp/>(sections</highlight></codeline>
<codeline lineno="546"><highlight class="comment"><sp/>*<sp/>&quot;Peripheral<sp/>ID&quot;<sp/>and<sp/>&quot;Interrupts&quot;)<sp/>in<sp/>the<sp/>Product<sp/>Specification.</highlight></codeline>
<codeline lineno="547"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="548"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>base_addr<sp/>Peripheral<sp/>base<sp/>address<sp/>or<sp/>pointer.</highlight></codeline>
<codeline lineno="549"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="550"><highlight class="comment"><sp/>*<sp/>@return<sp/>Interrupt<sp/>number<sp/>associated<sp/>with<sp/>the<sp/>specified<sp/>peripheral.</highlight></codeline>
<codeline lineno="551"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="552"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRFX_IRQ_NUMBER_GET(base_addr)<sp/>NRFX_PERIPHERAL_ID_GET(base_addr)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="553"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="554"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="555"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Macro<sp/>for<sp/>converting<sp/>frequency<sp/>in<sp/>kHz<sp/>to<sp/>Hz.</highlight></codeline>
<codeline lineno="556"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="557"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>freq<sp/>Frequency<sp/>value<sp/>in<sp/>kHz.</highlight></codeline>
<codeline lineno="558"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="559"><highlight class="comment"><sp/>*<sp/>@return<sp/>Number<sp/>of<sp/>Hz<sp/>in<sp/>@p<sp/>freq<sp/>kHz.</highlight></codeline>
<codeline lineno="560"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="561"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRFX_KHZ_TO_HZ(freq)<sp/>((freq)<sp/>*<sp/>1000)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="562"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="563"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="564"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Macro<sp/>for<sp/>converting<sp/>frequency<sp/>in<sp/>MHz<sp/>to<sp/>Hz.</highlight></codeline>
<codeline lineno="565"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="566"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>freq<sp/>Frequency<sp/>value<sp/>in<sp/>MHz.</highlight></codeline>
<codeline lineno="567"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="568"><highlight class="comment"><sp/>*<sp/>@return<sp/>Number<sp/>of<sp/>Hz<sp/>in<sp/>@p<sp/>freq<sp/>MHz.</highlight></codeline>
<codeline lineno="569"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="570"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRFX_MHZ_TO_HZ(freq)<sp/>((freq)<sp/>*<sp/>1000<sp/>*<sp/>1000)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="571"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="572"><highlight class="comment">/**<sp/>@brief<sp/>IRQ<sp/>handler<sp/>type.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="573"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(*<sp/><ref refid="group__nrfx__common_1ga0df9b339824c02d64f40f1fc391a97bc" kindref="member">nrfx_irq_handler_t</ref>)(void);</highlight></codeline>
<codeline lineno="574"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="575"><highlight class="comment">/**<sp/>@brief<sp/>Driver<sp/>state.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="576"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="577"><highlight class="normal">{</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__common_1ggae09c4084ccd60f0b39742ce7e5c85794a818be090e62d11f6fefe03de41c87027" kindref="member">NRFX_DRV_STATE_UNINITIALIZED</ref>,<sp/></highlight><highlight class="comment">///&lt;<sp/>Uninitialized.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__common_1ggae09c4084ccd60f0b39742ce7e5c85794a9c8b17faf6d1c8823c0dfde4f2d30e53" kindref="member">NRFX_DRV_STATE_INITIALIZED</ref>,<sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Initialized<sp/>but<sp/>powered<sp/>off.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__common_1ggae09c4084ccd60f0b39742ce7e5c85794aa54676bc3a4aff29a96570856b3a4e4c" kindref="member">NRFX_DRV_STATE_POWERED_ON</ref>,<sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Initialized<sp/>and<sp/>powered<sp/>on.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="581"><highlight class="normal">}<sp/><ref refid="group__nrfx__common_1gae09c4084ccd60f0b39742ce7e5c85794" kindref="member">nrfx_drv_state_t</ref>;</highlight></codeline>
<codeline lineno="582"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="583"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="584"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>checking<sp/>if<sp/>an<sp/>object<sp/>is<sp/>placed<sp/>in<sp/>the<sp/>Data<sp/>RAM<sp/>region.</highlight></codeline>
<codeline lineno="585"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="586"><highlight class="comment"><sp/>*<sp/>Several<sp/>peripherals<sp/>(the<sp/>ones<sp/>using<sp/>EasyDMA)<sp/>require<sp/>the<sp/>transfer<sp/>buffers</highlight></codeline>
<codeline lineno="587"><highlight class="comment"><sp/>*<sp/>to<sp/>be<sp/>placed<sp/>in<sp/>the<sp/>Data<sp/>RAM<sp/>region.<sp/>This<sp/>function<sp/>can<sp/>be<sp/>used<sp/>to<sp/>check<sp/>if</highlight></codeline>
<codeline lineno="588"><highlight class="comment"><sp/>*<sp/>this<sp/>condition<sp/>is<sp/>met.</highlight></codeline>
<codeline lineno="589"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="590"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_object<sp/>Pointer<sp/>to<sp/>an<sp/>object<sp/>whose<sp/>location<sp/>is<sp/>to<sp/>be<sp/>checked.</highlight></codeline>
<codeline lineno="591"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="592"><highlight class="comment"><sp/>*<sp/>@retval<sp/>true<sp/><sp/>The<sp/>pointed<sp/>object<sp/>is<sp/>located<sp/>in<sp/>the<sp/>Data<sp/>RAM<sp/>region.</highlight></codeline>
<codeline lineno="593"><highlight class="comment"><sp/>*<sp/>@retval<sp/>false<sp/>The<sp/>pointed<sp/>object<sp/>is<sp/>not<sp/>located<sp/>in<sp/>the<sp/>Data<sp/>RAM<sp/>region.</highlight></codeline>
<codeline lineno="594"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="595"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrfx__common_1ga95a38945a06d6759d49f3c7d245253fc" kindref="member">nrfx_is_in_ram</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_object);</highlight></codeline>
<codeline lineno="596"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="597"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="598"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>checking<sp/>if<sp/>an<sp/>object<sp/>is<sp/>aligned<sp/>to<sp/>a<sp/>32-bit<sp/>word</highlight></codeline>
<codeline lineno="599"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="600"><highlight class="comment"><sp/>*<sp/>Several<sp/>peripherals<sp/>(the<sp/>ones<sp/>using<sp/>EasyDMA)<sp/>require<sp/>the<sp/>transfer<sp/>buffers</highlight></codeline>
<codeline lineno="601"><highlight class="comment"><sp/>*<sp/>to<sp/>be<sp/>aligned<sp/>to<sp/>a<sp/>32-bit<sp/>word.<sp/>This<sp/>function<sp/>can<sp/>be<sp/>used<sp/>to<sp/>check<sp/>if</highlight></codeline>
<codeline lineno="602"><highlight class="comment"><sp/>*<sp/>this<sp/>condition<sp/>is<sp/>met.</highlight></codeline>
<codeline lineno="603"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="604"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_object<sp/><sp/>Pointer<sp/>to<sp/>an<sp/>object<sp/>whose<sp/>location<sp/>is<sp/>to<sp/>be<sp/>checked.</highlight></codeline>
<codeline lineno="605"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="606"><highlight class="comment"><sp/>*<sp/>@retval<sp/>true<sp/><sp/>The<sp/>pointed<sp/>object<sp/>is<sp/>aligned<sp/>to<sp/>a<sp/>32-bit<sp/>word.</highlight></codeline>
<codeline lineno="607"><highlight class="comment"><sp/>*<sp/>@retval<sp/>false<sp/>The<sp/>pointed<sp/>object<sp/>is<sp/>not<sp/>aligned<sp/>to<sp/>a<sp/>32-bit<sp/>word.</highlight></codeline>
<codeline lineno="608"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="609"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrfx__common_1gae7d3e75c56537708646ecf2e1ddde335" kindref="member">nrfx_is_word_aligned</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_object);</highlight></codeline>
<codeline lineno="610"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="611"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="612"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>the<sp/>interrupt<sp/>number<sp/>for<sp/>the<sp/>specified<sp/>peripheral.</highlight></codeline>
<codeline lineno="613"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="614"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Peripheral<sp/>base<sp/>pointer.</highlight></codeline>
<codeline lineno="615"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="616"><highlight class="comment"><sp/>*<sp/>@return<sp/>Interrupt<sp/>number<sp/>associated<sp/>with<sp/>the<sp/>pointed<sp/>peripheral.</highlight></codeline>
<codeline lineno="617"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="618"><highlight class="normal">NRF_STATIC_INLINE<sp/>IRQn_Type<sp/><ref refid="group__nrfx__common_1ga99320a533545d814f480ee108a6b61ce" kindref="member">nrfx_get_irq_number</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="619"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="620"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="621"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>converting<sp/>an<sp/>INTEN<sp/>register<sp/>bit<sp/>position<sp/>to<sp/>the</highlight></codeline>
<codeline lineno="622"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>corresponding<sp/>event<sp/>identifier.</highlight></codeline>
<codeline lineno="623"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="624"><highlight class="comment"><sp/>*<sp/>The<sp/>event<sp/>identifier<sp/>is<sp/>the<sp/>offset<sp/>between<sp/>the<sp/>event<sp/>register<sp/>address<sp/>and</highlight></codeline>
<codeline lineno="625"><highlight class="comment"><sp/>*<sp/>the<sp/>peripheral<sp/>base<sp/>address,<sp/>and<sp/>is<sp/>equal<sp/>(thus,<sp/>can<sp/>be<sp/>directly<sp/>cast)<sp/>to</highlight></codeline>
<codeline lineno="626"><highlight class="comment"><sp/>*<sp/>the<sp/>corresponding<sp/>value<sp/>of<sp/>the<sp/>enumerated<sp/>type<sp/>from<sp/>HAL<sp/>(nrf_*_event_t).</highlight></codeline>
<codeline lineno="627"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="628"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>bit<sp/>INTEN<sp/>register<sp/>bit<sp/>position.</highlight></codeline>
<codeline lineno="629"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="630"><highlight class="comment"><sp/>*<sp/>@return<sp/>Event<sp/>identifier.</highlight></codeline>
<codeline lineno="631"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="632"><highlight class="comment"><sp/>*<sp/>@sa<sp/>nrfx_event_to_bitpos</highlight></codeline>
<codeline lineno="633"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="634"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrfx__common_1gaba57956ebbf00ae1d7a28f047478aa1d" kindref="member">nrfx_bitpos_to_event</ref>(uint32_t<sp/>bit);</highlight></codeline>
<codeline lineno="635"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="636"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="637"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>converting<sp/>an<sp/>event<sp/>identifier<sp/>to<sp/>the<sp/>corresponding</highlight></codeline>
<codeline lineno="638"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>INTEN<sp/>register<sp/>bit<sp/>position.</highlight></codeline>
<codeline lineno="639"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="640"><highlight class="comment"><sp/>*<sp/>The<sp/>event<sp/>identifier<sp/>is<sp/>the<sp/>offset<sp/>between<sp/>the<sp/>event<sp/>register<sp/>address<sp/>and</highlight></codeline>
<codeline lineno="641"><highlight class="comment"><sp/>*<sp/>the<sp/>peripheral<sp/>base<sp/>address,<sp/>and<sp/>is<sp/>equal<sp/>(thus,<sp/>can<sp/>be<sp/>directly<sp/>cast)<sp/>to</highlight></codeline>
<codeline lineno="642"><highlight class="comment"><sp/>*<sp/>the<sp/>corresponding<sp/>value<sp/>of<sp/>the<sp/>enumerated<sp/>type<sp/>from<sp/>HAL<sp/>(nrf_*_event_t).</highlight></codeline>
<codeline lineno="643"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="644"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>event<sp/>Event<sp/>identifier.</highlight></codeline>
<codeline lineno="645"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="646"><highlight class="comment"><sp/>*<sp/>@return<sp/>INTEN<sp/>register<sp/>bit<sp/>position.</highlight></codeline>
<codeline lineno="647"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="648"><highlight class="comment"><sp/>*<sp/>@sa<sp/>nrfx_bitpos_to_event</highlight></codeline>
<codeline lineno="649"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="650"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrfx__common_1gab995afe99539062db99e98bbef6a27ad" kindref="member">nrfx_event_to_bitpos</ref>(uint32_t<sp/>event);</highlight></codeline>
<codeline lineno="651"><highlight class="normal"></highlight></codeline>
<codeline lineno="652"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>NRF_DECLARE_ONLY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="653"><highlight class="normal"></highlight></codeline>
<codeline lineno="654"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrfx__common_1ga95a38945a06d6759d49f3c7d245253fc" kindref="member">nrfx_is_in_ram</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_object)</highlight></codeline>
<codeline lineno="655"><highlight class="normal">{</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((((uint32_t)p_object)<sp/>&amp;<sp/>0xE0000000u)<sp/>==<sp/>0x20000000u);</highlight></codeline>
<codeline lineno="657"><highlight class="normal">}</highlight></codeline>
<codeline lineno="658"><highlight class="normal"></highlight></codeline>
<codeline lineno="659"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrfx__common_1gae7d3e75c56537708646ecf2e1ddde335" kindref="member">nrfx_is_word_aligned</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_object)</highlight></codeline>
<codeline lineno="660"><highlight class="normal">{</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((((uint32_t)p_object)<sp/>&amp;<sp/>0x3u)<sp/>==<sp/>0u);</highlight></codeline>
<codeline lineno="662"><highlight class="normal">}</highlight></codeline>
<codeline lineno="663"><highlight class="normal"></highlight></codeline>
<codeline lineno="664"><highlight class="normal">NRF_STATIC_INLINE<sp/>IRQn_Type<sp/><ref refid="group__nrfx__common_1ga99320a533545d814f480ee108a6b61ce" kindref="member">nrfx_get_irq_number</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="665"><highlight class="normal">{</highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(IRQn_Type)<ref refid="group__nrfx__common_1ga9cb38ace2c9ba19bfa7f270fb2a17297" kindref="member">NRFX_IRQ_NUMBER_GET</ref>(p_reg);</highlight></codeline>
<codeline lineno="667"><highlight class="normal">}</highlight></codeline>
<codeline lineno="668"><highlight class="normal"></highlight></codeline>
<codeline lineno="669"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrfx__common_1gaba57956ebbf00ae1d7a28f047478aa1d" kindref="member">nrfx_bitpos_to_event</ref>(uint32_t<sp/>bit)</highlight></codeline>
<codeline lineno="670"><highlight class="normal">{</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>event_reg_offset<sp/>=<sp/>0x100u;</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>event_reg_offset<sp/>+<sp/>(bit<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(uint32_t));</highlight></codeline>
<codeline lineno="673"><highlight class="normal">}</highlight></codeline>
<codeline lineno="674"><highlight class="normal"></highlight></codeline>
<codeline lineno="675"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrfx__common_1gab995afe99539062db99e98bbef6a27ad" kindref="member">nrfx_event_to_bitpos</ref>(uint32_t<sp/>event)</highlight></codeline>
<codeline lineno="676"><highlight class="normal">{</highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>event_reg_offset<sp/>=<sp/>0x100u;</highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(event<sp/>-<sp/>event_reg_offset)<sp/>/<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(uint32_t);</highlight></codeline>
<codeline lineno="679"><highlight class="normal">}</highlight></codeline>
<codeline lineno="680"><highlight class="normal"></highlight></codeline>
<codeline lineno="681"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRF_DECLARE_ONLY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="682"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="683"><highlight class="comment">/**<sp/>@}<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="684"><highlight class="normal"></highlight></codeline>
<codeline lineno="685"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="686"><highlight class="normal">}</highlight></codeline>
<codeline lineno="687"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="688"><highlight class="normal"></highlight></codeline>
<codeline lineno="689"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRFX_COMMON_H__</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="drivers/nrfx_common.h"/>
  </compounddef>
</doxygen>
