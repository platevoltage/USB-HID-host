<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="nrfy__vpr_8h" kind="file" language="C++">
    <compoundname>nrfy_vpr.h</compoundname>
    <includes local="no">nrfx.h</includes>
    <includes refid="nrf__vpr_8h" local="no">hal/nrf_vpr.h</includes>
    <incdepgraph>
      <node id="1">
        <label>haly/nrfy_vpr.h</label>
        <link refid="nrfy__vpr_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>nrfx.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__nrfy__vpr_1ga3b8050db7722ab27340441756d9cba8d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRFY_STATIC_INLINE void</type>
        <definition>NRFY_STATIC_INLINE void nrfy_vpr_task_trigger</definition>
        <argsstring>(NRF_VPR_Type *p_reg, nrf_vpr_task_t task)</argsstring>
        <name>nrfy_vpr_task_trigger</name>
        <param>
          <type>NRF_VPR_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__vpr__hal_1ga83abf42553e30dad0a6c8e89145a3381" kindref="member">nrf_vpr_task_t</ref></type>
          <declname>task</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__nrf__vpr__hal_1ga907c3749057d799427e19910a19c3d78" kindref="member">nrf_vpr_task_trigger</ref>  Function for triggering the specified VPR task.  </para>
</simplesect>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">task</parametername>
</parameternamelist>
<parameterdescription>
<para>Task to be triggered.   </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="haly/nrfy_vpr.h" line="52" column="25" bodyfile="haly/nrfy_vpr.h" bodystart="52" bodyend="56"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfy__vpr_1gae5a8daae6b3dac55e55adb4abdbf8470" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRFY_STATIC_INLINE uint32_t</type>
        <definition>NRFY_STATIC_INLINE uint32_t nrfy_vpr_task_address_get</definition>
        <argsstring>(NRF_VPR_Type const *p_reg, nrf_vpr_task_t task)</argsstring>
        <name>nrfy_vpr_task_address_get</name>
        <param>
          <type>NRF_VPR_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__vpr__hal_1ga83abf42553e30dad0a6c8e89145a3381" kindref="member">nrf_vpr_task_t</ref></type>
          <declname>task</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__nrf__vpr__hal_1ga01815ed892820f3ecd7f7b2581061213" kindref="member">nrf_vpr_task_address_get</ref>  Function for getting the address of the specified VPR task register.  </para>
</simplesect>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">task</parametername>
</parameternamelist>
<parameterdescription>
<para>Specified task.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Address of the specified task register.   </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="haly/nrfy_vpr.h" line="59" column="29" bodyfile="haly/nrfy_vpr.h" bodystart="59" bodyend="63"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfy__vpr_1ga9ddd80deb430359c6dee9f9fa45a6c4e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRFY_STATIC_INLINE <ref refid="group__nrf__vpr__hal_1ga83abf42553e30dad0a6c8e89145a3381" kindref="member">nrf_vpr_task_t</ref></type>
        <definition>NRFY_STATIC_INLINE nrf_vpr_task_t nrfy_vpr_trigger_task_get</definition>
        <argsstring>(uint8_t index)</argsstring>
        <name>nrfy_vpr_trigger_task_get</name>
        <param>
          <type>uint8_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__nrf__vpr__hal_1gaa2da678a2b9a3737b0ec4b8a0f82bc67" kindref="member">nrf_vpr_trigger_task_get</ref>  Function for getting the specified VPR TRIGGER task.  </para>
</simplesect>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">index</parametername>
</parameternamelist>
<parameterdescription>
<para>Task index.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The specified VPR TRIGGER task.   </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="haly/nrfy_vpr.h" line="66" column="35" bodyfile="haly/nrfy_vpr.h" bodystart="66" bodyend="69"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfy__vpr_1ga34445ccffb35b65458545cb420210931" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRFY_STATIC_INLINE void</type>
        <definition>NRFY_STATIC_INLINE void nrfy_vpr_event_clear</definition>
        <argsstring>(NRF_VPR_Type *p_reg, nrf_vpr_event_t event)</argsstring>
        <name>nrfy_vpr_event_clear</name>
        <param>
          <type>NRF_VPR_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__vpr__hal_1gaefccc60dc0d11472c75c898826ea04af" kindref="member">nrf_vpr_event_t</ref></type>
          <declname>event</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__nrf__vpr__hal_1gad961b33210d4937bd0c7075f8c25cc5a" kindref="member">nrf_vpr_event_clear</ref>  Function for clearing the specified VPR event.  </para>
</simplesect>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event to clear.   </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="haly/nrfy_vpr.h" line="72" column="25" bodyfile="haly/nrfy_vpr.h" bodystart="72" bodyend="76"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfy__vpr_1ga7f5e0142535437542b5f25cf9c6adc54" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRFY_STATIC_INLINE bool</type>
        <definition>NRFY_STATIC_INLINE bool nrfy_vpr_event_check</definition>
        <argsstring>(NRF_VPR_Type const *p_reg, nrf_vpr_event_t event)</argsstring>
        <name>nrfy_vpr_event_check</name>
        <param>
          <type>NRF_VPR_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__vpr__hal_1gaefccc60dc0d11472c75c898826ea04af" kindref="member">nrf_vpr_event_t</ref></type>
          <declname>event</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__nrf__vpr__hal_1ga978f5d9abfae2e413c84334b291b407a" kindref="member">nrf_vpr_event_check</ref>  Function for retrieving the state of the VPR event.  </para>
</simplesect>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event to be checked.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>The event has been generated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>The event has not been generated.   </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="haly/nrfy_vpr.h" line="79" column="25" bodyfile="haly/nrfy_vpr.h" bodystart="79" bodyend="86"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfy__vpr_1gaa7aef5df70c119ea09df8904a4499dc8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRFY_STATIC_INLINE uint32_t</type>
        <definition>NRFY_STATIC_INLINE uint32_t nrfy_vpr_event_address_get</definition>
        <argsstring>(NRF_VPR_Type const *p_reg, nrf_vpr_event_t event)</argsstring>
        <name>nrfy_vpr_event_address_get</name>
        <param>
          <type>NRF_VPR_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__vpr__hal_1gaefccc60dc0d11472c75c898826ea04af" kindref="member">nrf_vpr_event_t</ref></type>
          <declname>event</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__nrf__vpr__hal_1ga46d1cac15ba0cb54eafc067aca7d6ec8" kindref="member">nrf_vpr_event_address_get</ref>  Function for getting the address of the specified VPR event register.  </para>
</simplesect>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>Specified event.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Address of the specified event register.   </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="haly/nrfy_vpr.h" line="89" column="29" bodyfile="haly/nrfy_vpr.h" bodystart="89" bodyend="93"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfy__vpr_1ga8683db4720e2ea4bc6fa5d23d6c2c1c7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRFY_STATIC_INLINE <ref refid="group__nrf__vpr__hal_1gaefccc60dc0d11472c75c898826ea04af" kindref="member">nrf_vpr_event_t</ref></type>
        <definition>NRFY_STATIC_INLINE nrf_vpr_event_t nrfy_vpr_triggered_event_get</definition>
        <argsstring>(uint8_t index)</argsstring>
        <name>nrfy_vpr_triggered_event_get</name>
        <param>
          <type>uint8_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__nrf__vpr__hal_1ga72b26e3e399d99b3fb484307a8c6c7e8" kindref="member">nrf_vpr_triggered_event_get</ref>  Function for getting the specified VPR TRIGGERED event.  </para>
</simplesect>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">index</parametername>
</parameternamelist>
<parameterdescription>
<para>Event index.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The specified VPR TRIGGERED event.   </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="haly/nrfy_vpr.h" line="96" column="36" bodyfile="haly/nrfy_vpr.h" bodystart="96" bodyend="99"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfy__vpr_1ga9277ca2a4d52fa2f6aa7fa99a45426b2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRFY_STATIC_INLINE void</type>
        <definition>NRFY_STATIC_INLINE void nrfy_vpr_int_enable</definition>
        <argsstring>(NRF_VPR_Type *p_reg, uint32_t mask)</argsstring>
        <name>nrfy_vpr_int_enable</name>
        <param>
          <type>NRF_VPR_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__nrf__vpr__hal_1ga7398319240c3fe8efd7b5df8aa3b1c56" kindref="member">nrf_vpr_int_enable</ref>  Function for enabling specified interrupts.  </para>
</simplesect>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of interrupts to be enabled. Use <ref refid="group__nrf__vpr__hal_1ga6350a68d561921ac32788547cce356a3" kindref="member">nrf_vpr_int_mask_t</ref> values for bit masking.   </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="haly/nrfy_vpr.h" line="102" column="25" bodyfile="haly/nrfy_vpr.h" bodystart="102" bodyend="107"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfy__vpr_1ga0bae29787a62d242f6bed84b8aa92531" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRFY_STATIC_INLINE void</type>
        <definition>NRFY_STATIC_INLINE void nrfy_vpr_int_disable</definition>
        <argsstring>(NRF_VPR_Type *p_reg, uint32_t mask)</argsstring>
        <name>nrfy_vpr_int_disable</name>
        <param>
          <type>NRF_VPR_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__nrf__vpr__hal_1ga9d4752073b984bcd01e269d426939f88" kindref="member">nrf_vpr_int_disable</ref>  Function for disabling specified interrupts.  </para>
</simplesect>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of interrupts to be disabled. Use <ref refid="group__nrf__vpr__hal_1ga6350a68d561921ac32788547cce356a3" kindref="member">nrf_vpr_int_mask_t</ref> values for bit masking.   </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="haly/nrfy_vpr.h" line="110" column="25" bodyfile="haly/nrfy_vpr.h" bodystart="110" bodyend="115"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfy__vpr_1ga0930465f606a8684deed4d01ce8d040a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRFY_STATIC_INLINE uint32_t</type>
        <definition>NRFY_STATIC_INLINE uint32_t nrfy_vpr_int_enable_check</definition>
        <argsstring>(NRF_VPR_Type const *p_reg, uint32_t mask)</argsstring>
        <name>nrfy_vpr_int_enable_check</name>
        <param>
          <type>NRF_VPR_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__nrf__vpr__hal_1ga438dab7243ef940d2dce027b7786a4af" kindref="member">nrf_vpr_int_enable_check</ref>  Function for checking if the specified interrupts are enabled.  </para>
</simplesect>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of interrupts to be checked. Use <ref refid="group__nrf__vpr__hal_1ga6350a68d561921ac32788547cce356a3" kindref="member">nrf_vpr_int_mask_t</ref> values for bit masking.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Mask of enabled interrupts.   </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="haly/nrfy_vpr.h" line="118" column="29" bodyfile="haly/nrfy_vpr.h" bodystart="118" bodyend="126"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfy__vpr_1ga8f8ccf6b8f1083f28be9aafef99aa400" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRFY_STATIC_INLINE void</type>
        <definition>NRFY_STATIC_INLINE void nrfy_vpr_cpurun_set</definition>
        <argsstring>(NRF_VPR_Type *p_reg, bool enable)</argsstring>
        <name>nrfy_vpr_cpurun_set</name>
        <param>
          <type>NRF_VPR_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>enable</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__nrf__vpr__hal_1ga012a27945c573679f902f2e345fc7792" kindref="member">nrf_vpr_cpurun_set</ref>  Function for setting the state of the CPU after core reset.  </para>
</simplesect>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">enable</parametername>
</parameternamelist>
<parameterdescription>
<para>True if CPU is to be running, false if stopped.   </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="haly/nrfy_vpr.h" line="129" column="25" bodyfile="haly/nrfy_vpr.h" bodystart="129" bodyend="134"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfy__vpr_1gae553c9eee675e1d888a44c513da7959c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRFY_STATIC_INLINE bool</type>
        <definition>NRFY_STATIC_INLINE bool nrfy_vpr_cpurun_get</definition>
        <argsstring>(NRF_VPR_Type const *p_reg)</argsstring>
        <name>nrfy_vpr_cpurun_get</name>
        <param>
          <type>NRF_VPR_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__nrf__vpr__hal_1ga87c5af83ac3f0680747f8949cf9dfb4d" kindref="member">nrf_vpr_cpurun_get</ref>  Function for getting the state of the CPU after core reset.  </para>
</simplesect>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>CPU is to be running after core reset. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>CPU is to be stopped after core reset.   </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="haly/nrfy_vpr.h" line="137" column="25" bodyfile="haly/nrfy_vpr.h" bodystart="137" bodyend="144"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfy__vpr_1gafdcd9fcf0f71a1b12d39eea4f94f85fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRFY_STATIC_INLINE void</type>
        <definition>NRFY_STATIC_INLINE void nrfy_vpr_initpc_set</definition>
        <argsstring>(NRF_VPR_Type *p_reg, uint32_t pc)</argsstring>
        <name>nrfy_vpr_initpc_set</name>
        <param>
          <type>NRF_VPR_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>pc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__nrf__vpr__hal_1ga274fb49feaa99361a3f996131d8beb0e" kindref="member">nrf_vpr_initpc_set</ref>  Function for setting the initial value of the program counter after CPU reset.  </para>
</simplesect>
</para>
<para><simplesect kind="note"><para>This address value must be 64-bit aligned.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pc</parametername>
</parameternamelist>
<parameterdescription>
<para>Initial value of the program counter to be set.   </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="haly/nrfy_vpr.h" line="147" column="25" bodyfile="haly/nrfy_vpr.h" bodystart="147" bodyend="152"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfy__vpr_1gaeed45c21be888fa2eb351cd42e811701" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRFY_STATIC_INLINE uint32_t</type>
        <definition>NRFY_STATIC_INLINE uint32_t nrfy_vpr_initpc_get</definition>
        <argsstring>(NRF_VPR_Type const *p_reg)</argsstring>
        <name>nrfy_vpr_initpc_get</name>
        <param>
          <type>NRF_VPR_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__nrf__vpr__hal_1ga18503be618285e03dfcdbcaa8d1070be" kindref="member">nrf_vpr_initpc_get</ref>  Function for getting the initial value of the program counter after CPU reset.  </para>
</simplesect>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Initial value of the program counter.   </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="haly/nrfy_vpr.h" line="155" column="29" bodyfile="haly/nrfy_vpr.h" bodystart="155" bodyend="162"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfy__vpr_1ga44f9c079311ca673283c41fb353b9b53" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRFY_STATIC_INLINE void</type>
        <definition>NRFY_STATIC_INLINE void nrfy_vpr_debugif_dmcontrol_set</definition>
        <argsstring>(NRF_VPR_Type *p_reg, nrf_vpr_dmcontrol_t signal, bool enable)</argsstring>
        <name>nrfy_vpr_debugif_dmcontrol_set</name>
        <param>
          <type>NRF_VPR_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__vpr__hal_1ga35190f0b82c676e4d73b3f56f2ece9ff" kindref="member">nrf_vpr_dmcontrol_t</ref></type>
          <declname>signal</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>enable</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__nrf__vpr__hal_1gaba0ea17e2364214ca0a36705e094a67e" kindref="member">nrf_vpr_debugif_dmcontrol_set</ref>  Function for setting the specified debug mode control signal.  </para>
</simplesect>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">signal</parametername>
</parameternamelist>
<parameterdescription>
<para>Signal to be set. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">enable</parametername>
</parameternamelist>
<parameterdescription>
<para>True if signal is to be 1, false if 0.   </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="haly/nrfy_vpr.h" line="165" column="25" bodyfile="haly/nrfy_vpr.h" bodystart="165" bodyend="171"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfy__vpr_1ga89256a1adeed37e4183f65c46aee7842" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRFY_STATIC_INLINE bool</type>
        <definition>NRFY_STATIC_INLINE bool nrfy_vpr_debugif_dmcontrol_get</definition>
        <argsstring>(NRF_VPR_Type const *p_reg, nrf_vpr_dmcontrol_t signal)</argsstring>
        <name>nrfy_vpr_debugif_dmcontrol_get</name>
        <param>
          <type>NRF_VPR_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__vpr__hal_1ga35190f0b82c676e4d73b3f56f2ece9ff" kindref="member">nrf_vpr_dmcontrol_t</ref></type>
          <declname>signal</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__nrf__vpr__hal_1ga9300eb8dd279fffc9434d6ddae7e60c5" kindref="member">nrf_vpr_debugif_dmcontrol_get</ref>  Function for getting the debug mode control signals.  </para>
</simplesect>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">signal</parametername>
</parameternamelist>
<parameterdescription>
<para>Signal to be retrieved.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>Signal is logical 1. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>Signal is logical 0.   </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="haly/nrfy_vpr.h" line="174" column="25" bodyfile="haly/nrfy_vpr.h" bodystart="174" bodyend="182"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2023<sp/>-<sp/>2024,<sp/>Nordic<sp/>Semiconductor<sp/>ASA</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>All<sp/>rights<sp/>reserved.</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>SPDX-License-Identifier:<sp/>BSD-3-Clause</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions<sp/>are<sp/>met:</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>1.<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright<sp/>notice,<sp/>this</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>2.<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the<sp/>distribution.</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/>3.<sp/>Neither<sp/>the<sp/>name<sp/>of<sp/>the<sp/>copyright<sp/>holder<sp/>nor<sp/>the<sp/>names<sp/>of<sp/>its</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>contributors<sp/>may<sp/>be<sp/>used<sp/>to<sp/>endorse<sp/>or<sp/>promote<sp/>products<sp/>derived<sp/>from<sp/>this</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>software<sp/>without<sp/>specific<sp/>prior<sp/>written<sp/>permission.</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>COPYRIGHT<sp/>HOLDERS<sp/>AND<sp/>CONTRIBUTORS<sp/>&quot;AS<sp/>IS&quot;</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/>AND<sp/>ANY<sp/>EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>THE</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*<sp/>ARE<sp/>DISCLAIMED.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>COPYRIGHT<sp/>HOLDER<sp/>OR<sp/>CONTRIBUTORS<sp/>BE</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,<sp/>SPECIAL,<sp/>EXEMPLARY,<sp/>OR</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>PROCUREMENT<sp/>OF</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>*<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,<sp/>DATA,<sp/>OR<sp/>PROFITS;<sp/>OR<sp/>BUSINESS</highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/>*<sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY<sp/>THEORY<sp/>OF<sp/>LIABILITY,<sp/>WHETHER<sp/>IN</highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/>*<sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR<sp/>OTHERWISE)</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/>*<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE<sp/>OF<sp/>THIS<sp/>SOFTWARE,<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/>*<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight></codeline>
<codeline lineno="32"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>NRFY_VPR_H__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRFY_VPR_H__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;nrfx.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;hal/nrf_vpr.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="44"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="45"><highlight class="comment"><sp/>*<sp/>@defgroup<sp/>nrfy_vpr<sp/>VPR<sp/>HALY</highlight></codeline>
<codeline lineno="46"><highlight class="comment"><sp/>*<sp/>@{</highlight></codeline>
<codeline lineno="47"><highlight class="comment"><sp/>*<sp/>@ingroup<sp/>nrf_vpr</highlight></codeline>
<codeline lineno="48"><highlight class="comment"><sp/>*<sp/>@brief<sp/><sp/><sp/>Hardware<sp/>access<sp/>layer<sp/>with<sp/>cache<sp/>and<sp/>barrier<sp/>support<sp/>for<sp/>managing<sp/>the<sp/>VPR<sp/>peripheral.</highlight></codeline>
<codeline lineno="49"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="51"><highlight class="comment">/**<sp/>@refhal{nrf_vpr_task_trigger}<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal">NRFY_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrfy__vpr_1ga3b8050db7722ab27340441756d9cba8d" kindref="member">nrfy_vpr_task_trigger</ref>(NRF_VPR_Type<sp/>*<sp/>p_reg,<sp/><ref refid="group__nrf__vpr__hal_1ga83abf42553e30dad0a6c8e89145a3381" kindref="member">nrf_vpr_task_t</ref><sp/>task)</highlight></codeline>
<codeline lineno="53"><highlight class="normal">{</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__vpr__hal_1ga907c3749057d799427e19910a19c3d78" kindref="member">nrf_vpr_task_trigger</ref>(p_reg,<sp/>task);</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/>nrf_barrier_w();</highlight></codeline>
<codeline lineno="56"><highlight class="normal">}</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="58"><highlight class="comment">/**<sp/>@refhal{nrf_vpr_task_address_get}<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal">NRFY_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrfy__vpr_1gae5a8daae6b3dac55e55adb4abdbf8470" kindref="member">nrfy_vpr_task_address_get</ref>(NRF_VPR_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__vpr__hal_1ga83abf42553e30dad0a6c8e89145a3381" kindref="member">nrf_vpr_task_t</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>task)</highlight></codeline>
<codeline lineno="61"><highlight class="normal">{</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__nrf__vpr__hal_1ga01815ed892820f3ecd7f7b2581061213" kindref="member">nrf_vpr_task_address_get</ref>(p_reg,<sp/>task);</highlight></codeline>
<codeline lineno="63"><highlight class="normal">}</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="65"><highlight class="comment">/**<sp/>@refhal{nrf_vpr_trigger_task_get}<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal">NRFY_STATIC_INLINE<sp/><ref refid="group__nrf__vpr__hal_1ga83abf42553e30dad0a6c8e89145a3381" kindref="member">nrf_vpr_task_t</ref><sp/><ref refid="group__nrfy__vpr_1ga9ddd80deb430359c6dee9f9fa45a6c4e" kindref="member">nrfy_vpr_trigger_task_get</ref>(uint8_t<sp/>index)</highlight></codeline>
<codeline lineno="67"><highlight class="normal">{</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__nrf__vpr__hal_1gaa2da678a2b9a3737b0ec4b8a0f82bc67" kindref="member">nrf_vpr_trigger_task_get</ref>(index);</highlight></codeline>
<codeline lineno="69"><highlight class="normal">}</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="71"><highlight class="comment">/**<sp/>@refhal{nrf_vpr_event_clear}<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal">NRFY_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrfy__vpr_1ga34445ccffb35b65458545cb420210931" kindref="member">nrfy_vpr_event_clear</ref>(NRF_VPR_Type<sp/>*<sp/>p_reg,<sp/><ref refid="group__nrf__vpr__hal_1gaefccc60dc0d11472c75c898826ea04af" kindref="member">nrf_vpr_event_t</ref><sp/>event)</highlight></codeline>
<codeline lineno="73"><highlight class="normal">{</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__vpr__hal_1gad961b33210d4937bd0c7075f8c25cc5a" kindref="member">nrf_vpr_event_clear</ref>(p_reg,<sp/>event);</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/>nrf_barrier_w();</highlight></codeline>
<codeline lineno="76"><highlight class="normal">}</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="78"><highlight class="comment">/**<sp/>@refhal{nrf_vpr_event_check}<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal">NRFY_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrfy__vpr_1ga7f5e0142535437542b5f25cf9c6adc54" kindref="member">nrfy_vpr_event_check</ref>(NRF_VPR_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,<sp/><ref refid="group__nrf__vpr__hal_1gaefccc60dc0d11472c75c898826ea04af" kindref="member">nrf_vpr_event_t</ref><sp/>event)</highlight></codeline>
<codeline lineno="80"><highlight class="normal">{</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/>nrf_barrier_r();</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ret<sp/>=<sp/><ref refid="group__nrf__vpr__hal_1ga978f5d9abfae2e413c84334b291b407a" kindref="member">nrf_vpr_event_check</ref>(p_reg,<sp/>event);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/>nrf_barrier_r();</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="86"><highlight class="normal">}</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="88"><highlight class="comment">/**<sp/>@refhal{nrf_vpr_event_address_get}<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal">NRFY_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrfy__vpr_1gaa7aef5df70c119ea09df8904a4499dc8" kindref="member">nrfy_vpr_event_address_get</ref>(NRF_VPR_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__vpr__hal_1gaefccc60dc0d11472c75c898826ea04af" kindref="member">nrf_vpr_event_t</ref><sp/><sp/><sp/><sp/><sp/><sp/>event)</highlight></codeline>
<codeline lineno="91"><highlight class="normal">{</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__nrf__vpr__hal_1ga46d1cac15ba0cb54eafc067aca7d6ec8" kindref="member">nrf_vpr_event_address_get</ref>(p_reg,<sp/>event);</highlight></codeline>
<codeline lineno="93"><highlight class="normal">}</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="95"><highlight class="comment">/**<sp/>@refhal{nrf_vpr_triggered_event_get}<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal">NRFY_STATIC_INLINE<sp/><ref refid="group__nrf__vpr__hal_1gaefccc60dc0d11472c75c898826ea04af" kindref="member">nrf_vpr_event_t</ref><sp/><ref refid="group__nrfy__vpr_1ga8683db4720e2ea4bc6fa5d23d6c2c1c7" kindref="member">nrfy_vpr_triggered_event_get</ref>(uint8_t<sp/>index)</highlight></codeline>
<codeline lineno="97"><highlight class="normal">{</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__nrf__vpr__hal_1ga72b26e3e399d99b3fb484307a8c6c7e8" kindref="member">nrf_vpr_triggered_event_get</ref>(index);</highlight></codeline>
<codeline lineno="99"><highlight class="normal">}</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="101"><highlight class="comment">/**<sp/>@refhal{nrf_vpr_int_enable}<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal">NRFY_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrfy__vpr_1ga9277ca2a4d52fa2f6aa7fa99a45426b2" kindref="member">nrfy_vpr_int_enable</ref>(NRF_VPR_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/>mask)</highlight></codeline>
<codeline lineno="104"><highlight class="normal">{</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__vpr__hal_1ga7398319240c3fe8efd7b5df8aa3b1c56" kindref="member">nrf_vpr_int_enable</ref>(p_reg,<sp/>mask);</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/>nrf_barrier_w();</highlight></codeline>
<codeline lineno="107"><highlight class="normal">}</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="109"><highlight class="comment">/**<sp/>@refhal{nrf_vpr_int_disable}<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal">NRFY_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrfy__vpr_1ga0bae29787a62d242f6bed84b8aa92531" kindref="member">nrfy_vpr_int_disable</ref>(NRF_VPR_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/>mask)</highlight></codeline>
<codeline lineno="112"><highlight class="normal">{</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__vpr__hal_1ga9d4752073b984bcd01e269d426939f88" kindref="member">nrf_vpr_int_disable</ref>(p_reg,<sp/>mask);</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/>nrf_barrier_w();</highlight></codeline>
<codeline lineno="115"><highlight class="normal">}</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="117"><highlight class="comment">/**<sp/>@refhal{nrf_vpr_int_enable_check}<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal">NRFY_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrfy__vpr_1ga0930465f606a8684deed4d01ce8d040a" kindref="member">nrfy_vpr_int_enable_check</ref>(NRF_VPR_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mask)</highlight></codeline>
<codeline lineno="120"><highlight class="normal">{</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/>nrf_barrier_rw();</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>ret<sp/>=<sp/><ref refid="group__nrf__vpr__hal_1ga438dab7243ef940d2dce027b7786a4af" kindref="member">nrf_vpr_int_enable_check</ref>(p_reg,<sp/>mask);</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/>nrf_barrier_r();</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="126"><highlight class="normal">}</highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="128"><highlight class="comment">/**<sp/>@refhal{nrf_vpr_cpurun_set}<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal">NRFY_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrfy__vpr_1ga8f8ccf6b8f1083f28be9aafef99aa400" kindref="member">nrfy_vpr_cpurun_set</ref>(NRF_VPR_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>enable)</highlight></codeline>
<codeline lineno="131"><highlight class="normal">{</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__vpr__hal_1ga012a27945c573679f902f2e345fc7792" kindref="member">nrf_vpr_cpurun_set</ref>(p_reg,<sp/>enable);</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/>nrf_barrier_w();</highlight></codeline>
<codeline lineno="134"><highlight class="normal">}</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="136"><highlight class="comment">/**<sp/>@refhal{nrf_vpr_cpurun_get}<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal">NRFY_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrfy__vpr_1gae553c9eee675e1d888a44c513da7959c" kindref="member">nrfy_vpr_cpurun_get</ref>(NRF_VPR_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="138"><highlight class="normal">{</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/>nrf_barrier_rw();</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ret<sp/>=<sp/><ref refid="group__nrf__vpr__hal_1ga87c5af83ac3f0680747f8949cf9dfb4d" kindref="member">nrf_vpr_cpurun_get</ref>(p_reg);</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/>nrf_barrier_r();</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="144"><highlight class="normal">}</highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="146"><highlight class="comment">/**<sp/>@refhal{nrf_vpr_initpc_set}<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal">NRFY_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrfy__vpr_1gafdcd9fcf0f71a1b12d39eea4f94f85fb" kindref="member">nrfy_vpr_initpc_set</ref>(NRF_VPR_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/>pc)</highlight></codeline>
<codeline lineno="149"><highlight class="normal">{</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__vpr__hal_1ga274fb49feaa99361a3f996131d8beb0e" kindref="member">nrf_vpr_initpc_set</ref>(p_reg,<sp/>pc);</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/>nrf_barrier_w();</highlight></codeline>
<codeline lineno="152"><highlight class="normal">}</highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="154"><highlight class="comment">/**<sp/>@refhal{nrf_vpr_initpc_get}<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal">NRFY_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrfy__vpr_1gaeed45c21be888fa2eb351cd42e811701" kindref="member">nrfy_vpr_initpc_get</ref>(NRF_VPR_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="156"><highlight class="normal">{</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/>nrf_barrier_rw();</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>ret<sp/>=<sp/><ref refid="group__nrf__vpr__hal_1ga18503be618285e03dfcdbcaa8d1070be" kindref="member">nrf_vpr_initpc_get</ref>(p_reg);</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/>nrf_barrier_r();</highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="162"><highlight class="normal">}</highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="164"><highlight class="comment">/**<sp/>@refhal{nrf_vpr_debugif_dmcontrol_set}<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal">NRFY_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrfy__vpr_1ga44f9c079311ca673283c41fb353b9b53" kindref="member">nrfy_vpr_debugif_dmcontrol_set</ref>(NRF_VPR_Type<sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__vpr__hal_1ga35190f0b82c676e4d73b3f56f2ece9ff" kindref="member">nrf_vpr_dmcontrol_t</ref><sp/>signal,</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>enable)</highlight></codeline>
<codeline lineno="168"><highlight class="normal">{</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__vpr__hal_1gaba0ea17e2364214ca0a36705e094a67e" kindref="member">nrf_vpr_debugif_dmcontrol_set</ref>(p_reg,<sp/>signal,<sp/>enable);</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/>nrf_barrier_w();</highlight></codeline>
<codeline lineno="171"><highlight class="normal">}</highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="173"><highlight class="comment">/**<sp/>@refhal{nrf_vpr_debugif_dmcontrol_get}<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal">NRFY_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrfy__vpr_1ga89256a1adeed37e4183f65c46aee7842" kindref="member">nrfy_vpr_debugif_dmcontrol_get</ref>(NRF_VPR_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__vpr__hal_1ga35190f0b82c676e4d73b3f56f2ece9ff" kindref="member">nrf_vpr_dmcontrol_t</ref><sp/><sp/>signal)</highlight></codeline>
<codeline lineno="176"><highlight class="normal">{</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/>nrf_barrier_rw();</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ret<sp/>=<sp/><ref refid="group__nrf__vpr__hal_1ga9300eb8dd279fffc9434d6ddae7e60c5" kindref="member">nrf_vpr_debugif_dmcontrol_get</ref>(p_reg,<sp/>signal);</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/>nrf_barrier_r();</highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="182"><highlight class="normal">}</highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="184"><highlight class="comment">/**<sp/>@}<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal">}</highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRFY_VPR_H__</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="haly/nrfy_vpr.h"/>
  </compounddef>
</doxygen>
