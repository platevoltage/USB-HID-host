<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="nrf__comp_8h" kind="file" language="C++">
    <compoundname>nrf_comp.h</compoundname>
    <includes local="no">nrfx.h</includes>
    <includedby refid="nrfy__comp_8h" local="no">haly/nrfy_comp.h</includedby>
    <incdepgraph>
      <node id="1">
        <label>hal/nrf_comp.h</label>
        <link refid="nrf__comp_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>nrfx.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="structnrf__comp__th__t" prot="public">nrf_comp_th_t</innerclass>
    <innerclass refid="structnrf__comp__ref__conf__t" prot="public">nrf_comp_ref_conf_t</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__nrf__comp__hal_1gae7541cca597fceac27d9155082b16248" prot="public" static="no">
        <name>NRF_COMP_HAS_ISOURCE</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Symbol indicating whether COMP has ISOURCE register. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_comp.h" line="52" column="9" bodyfile="hal/nrf_comp.h" bodystart="52" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__comp__hal_1ga12753db5a9e4ad645e57fbf992289d78" prot="public" static="no">
        <name>NRF_COMP_HAS_AIN_AS_PIN</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Symbol indicating whether the configuration of analog input using pin number is present. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_comp.h" line="59" column="9" bodyfile="hal/nrf_comp.h" bodystart="59" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="group__nrf__comp__hal_1ga2cb45b32907064f8b15ae54d91ca7470" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_comp_ref_t</name>
        <enumvalue id="group__nrf__comp__hal_1gga2cb45b32907064f8b15ae54d91ca7470a683a97562633fe24b117a2ccbc0faa90" prot="public">
          <name>NRF_COMP_REF_INT_1V2</name>
          <initializer>= COMP_REFSEL_REFSEL_Int1V2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>VREF = internal 1.2 V reference (VDD &gt;= 1.7 V). </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__comp__hal_1gga2cb45b32907064f8b15ae54d91ca7470a9deceb6914afc21b109a3e8adf565098" prot="public">
          <name>NRF_COMP_REF_INT_1V8</name>
          <initializer>= COMP_REFSEL_REFSEL_Int1V8</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>VREF = internal 1.8 V reference (VDD &gt;= VREF + 0.2 V). </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__comp__hal_1gga2cb45b32907064f8b15ae54d91ca7470a12a30003593a48a4213b4136b31ed9e7" prot="public">
          <name>NRF_COMP_REF_INT_2V4</name>
          <initializer>= COMP_REFSEL_REFSEL_Int2V4</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>VREF = internal 2.4 V reference (VDD &gt;= VREF + 0.2 V). </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__comp__hal_1gga2cb45b32907064f8b15ae54d91ca7470a0ccdb9ee6317bfaa2be3360c334a576c" prot="public">
          <name>NRF_COMP_REF_AVDDAO1V8</name>
          <initializer>= COMP_REFSEL_REFSEL_AVDDAO1V8</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>VREF = AVDD_AO_1V8. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__comp__hal_1gga2cb45b32907064f8b15ae54d91ca7470aa3f446be7d1fcd2c8e0710ea8bbe3c49" prot="public">
          <name>NRF_COMP_REF_VDD</name>
          <initializer>= COMP_REFSEL_REFSEL_VDD</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>VREF = VDD. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__comp__hal_1gga2cb45b32907064f8b15ae54d91ca7470ad4b2a1a578ad12d820f421c4eaded048" prot="public">
          <name>NRF_COMP_REF_AREF</name>
          <initializer>= COMP_REFSEL_REFSEL_ARef</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>VREF = AREF (VDD &gt;= VREF &gt;= AREFMIN). </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>COMP reference selection. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_comp.h" line="96" column="1" bodyfile="hal/nrf_comp.h" bodystart="97" bodyend="112"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__comp__hal_1ga501c4187cafe59f88ed8e98c7de2bfe6" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_comp_main_mode_t</name>
        <enumvalue id="group__nrf__comp__hal_1gga501c4187cafe59f88ed8e98c7de2bfe6ac957c24d7ddc8c5ed4ff64430d2965db" prot="public">
          <name>NRF_COMP_MAIN_MODE_SE</name>
          <initializer>= COMP_MODE_MAIN_SE</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Single-ended mode. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__comp__hal_1gga501c4187cafe59f88ed8e98c7de2bfe6acc65bd4c0459d7bce4beb36cbbc35ebf" prot="public">
          <name>NRF_COMP_MAIN_MODE_DIFF</name>
          <initializer>= COMP_MODE_MAIN_Diff</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Differential mode. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>COMP main operation mode. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_comp.h" line="147" column="1" bodyfile="hal/nrf_comp.h" bodystart="148" bodyend="151"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__comp__hal_1gab73023f0b42ab46c65312f9ea9419e05" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_comp_sp_mode_t</name>
        <enumvalue id="group__nrf__comp__hal_1ggab73023f0b42ab46c65312f9ea9419e05a913d611ea3940e37924497ee95ffef78" prot="public">
          <name>NRF_COMP_SP_MODE_LOW</name>
          <initializer>= COMP_MODE_SP_Low</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Low power mode. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__comp__hal_1ggab73023f0b42ab46c65312f9ea9419e05a698a3502bbddf2b190d724d3ebf7e3c4" prot="public">
          <name>NRF_COMP_SP_MODE_NORMAL</name>
          <initializer>= COMP_MODE_SP_Normal</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Normal mode. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__comp__hal_1ggab73023f0b42ab46c65312f9ea9419e05ab112225d17bad73d2ab7729a8a1d76de" prot="public">
          <name>NRF_COMP_SP_MODE_HIGH</name>
          <initializer>= COMP_MODE_SP_High</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>High-speed mode. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>COMP speed and power mode. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_comp.h" line="154" column="1" bodyfile="hal/nrf_comp.h" bodystart="155" bodyend="161"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__comp__hal_1gaad279eda81a34c4cc4534f2603ab2717" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_comp_hyst_t</name>
        <enumvalue id="group__nrf__comp__hal_1ggaad279eda81a34c4cc4534f2603ab2717a83a04f019cc200d74e481e644420b6fe" prot="public">
          <name>NRF_COMP_HYST_NO_HYST</name>
          <initializer>= COMP_HYST_HYST_NoHyst</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Comparator hysteresis disabled. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__comp__hal_1ggaad279eda81a34c4cc4534f2603ab2717a71200a7942d1434ea7ce5df178918563" prot="public">
          <name>NRF_COMP_HYST_40MV</name>
          <initializer>= COMP_HYST_HYST_Hyst40mV</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Comparator hysteresis enabled at 40 mV level. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__comp__hal_1ggaad279eda81a34c4cc4534f2603ab2717a93499a63e3c0553cef478b471a1a724a" prot="public">
          <name>NRF_COMP_HYST_50MV</name>
          <initializer>= COMP_HYST_HYST_Hyst50mV</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Comparator hysteresis enabled at 50 mV level. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>COMP comparator hysteresis. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_comp.h" line="164" column="1" bodyfile="hal/nrf_comp.h" bodystart="165" bodyend="173"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__comp__hal_1gaee0ea1e7c432520ed0ff1fb8ed3e9586" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_isource_t</name>
        <enumvalue id="group__nrf__comp__hal_1ggaee0ea1e7c432520ed0ff1fb8ed3e9586ad24db8d5831ad607e770c5a426131710" prot="public">
          <name>NRF_COMP_ISOURCE_OFF</name>
          <initializer>= COMP_ISOURCE_ISOURCE_Off</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Current source disabled. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__comp__hal_1ggaee0ea1e7c432520ed0ff1fb8ed3e9586acacf524a0c3e83d679b6903d58b6af7a" prot="public">
          <name>NRF_COMP_ISOURCE_IEN_2UA5</name>
          <initializer>= COMP_ISOURCE_ISOURCE_Ien2uA5</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Current source enabled (+/- 2.5 uA). </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__comp__hal_1ggaee0ea1e7c432520ed0ff1fb8ed3e9586aa734781d1bd5da1585fc5f57b293e530" prot="public">
          <name>NRF_COMP_ISOURCE_IEN_5UA</name>
          <initializer>= COMP_ISOURCE_ISOURCE_Ien5uA</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Current source enabled (+/- 5 uA). </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__comp__hal_1ggaee0ea1e7c432520ed0ff1fb8ed3e9586a2640cbdac92d7c14fc2164b0b3fe9e0a" prot="public">
          <name>NRF_COMP_ISOURCE_IEN_10UA</name>
          <initializer>= COMP_ISOURCE_ISOURCE_Ien10uA</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Current source enabled (+/- 10 uA). </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>COMP current source selection on analog input. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_comp.h" line="177" column="1" bodyfile="hal/nrf_comp.h" bodystart="178" bodyend="195"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__comp__hal_1ga0a587fcb0646329cb6d9700f555787f8" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_comp_task_t</name>
        <enumvalue id="group__nrf__comp__hal_1gga0a587fcb0646329cb6d9700f555787f8aedc5ccaa13628f7af6836e5ebe95895b" prot="public">
          <name>NRF_COMP_TASK_START</name>
          <initializer>= offsetof(NRF_COMP_Type, TASKS_START)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>COMP start sampling task. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__comp__hal_1gga0a587fcb0646329cb6d9700f555787f8aaa6e596dc463abb077e160e4dd869a8c" prot="public">
          <name>NRF_COMP_TASK_STOP</name>
          <initializer>= offsetof(NRF_COMP_Type, TASKS_STOP)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>COMP stop sampling task. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__comp__hal_1gga0a587fcb0646329cb6d9700f555787f8aee22b3249ada6965b7859d383de2cb70" prot="public">
          <name>NRF_COMP_TASK_SAMPLE</name>
          <initializer>= offsetof(NRF_COMP_Type, TASKS_SAMPLE)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Sample comparator value. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>COMP tasks. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_comp.h" line="199" column="1" bodyfile="hal/nrf_comp.h" bodystart="200" bodyend="204"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__comp__hal_1ga17ffea3865f2db28127bae9411bce036" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_comp_event_t</name>
        <enumvalue id="group__nrf__comp__hal_1gga17ffea3865f2db28127bae9411bce036af14fa8579f8161312ce9320216316cfe" prot="public">
          <name>NRF_COMP_EVENT_READY</name>
          <initializer>= offsetof(NRF_COMP_Type, EVENTS_READY)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>COMP is ready and output is valid. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__comp__hal_1gga17ffea3865f2db28127bae9411bce036aaa4c13d4069ae0dfba1ffe3406cfa267" prot="public">
          <name>NRF_COMP_EVENT_DOWN</name>
          <initializer>= offsetof(NRF_COMP_Type, EVENTS_DOWN)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Input voltage crossed the threshold going down. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__comp__hal_1gga17ffea3865f2db28127bae9411bce036a01c26def4266ae02e4f6abeb18ae5f4f" prot="public">
          <name>NRF_COMP_EVENT_UP</name>
          <initializer>= offsetof(NRF_COMP_Type, EVENTS_UP)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Input voltage crossed the threshold going up. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__comp__hal_1gga17ffea3865f2db28127bae9411bce036a6eb2fb92c021fde7a3c1590094782b7f" prot="public">
          <name>NRF_COMP_EVENT_CROSS</name>
          <initializer>= offsetof(NRF_COMP_Type, EVENTS_CROSS)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Input voltage crossed the threshold in any direction. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>COMP events. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_comp.h" line="207" column="1" bodyfile="hal/nrf_comp.h" bodystart="208" bodyend="213"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__comp__hal_1gab671bf5df533600ad4538f8ca2005a43" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_comp_int_mask_t</name>
        <enumvalue id="group__nrf__comp__hal_1ggab671bf5df533600ad4538f8ca2005a43a5416dd348fbaa0b85363fc1b5525099d" prot="public">
          <name>NRF_COMP_INT_READY_MASK</name>
          <initializer>= COMP_INTENSET_READY_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Interrupt on READY event. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__comp__hal_1ggab671bf5df533600ad4538f8ca2005a43ad78cf001b11ef4dd67f8f28c9f2dbe0c" prot="public">
          <name>NRF_COMP_INT_DOWN_MASK</name>
          <initializer>= COMP_INTENSET_DOWN_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Interrupt on DOWN event. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__comp__hal_1ggab671bf5df533600ad4538f8ca2005a43a25b4fc71542b4e626dd99ef643768fb5" prot="public">
          <name>NRF_COMP_INT_UP_MASK</name>
          <initializer>= COMP_INTENSET_UP_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Interrupt on UP event. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__comp__hal_1ggab671bf5df533600ad4538f8ca2005a43a8bf5389eb68ecca5d1fad116f711eda2" prot="public">
          <name>NRF_COMP_INT_CROSS_MASK</name>
          <initializer>= COMP_INTENSET_CROSS_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Interrupt on CROSS event. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>COMP interrupts. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_comp.h" line="216" column="1" bodyfile="hal/nrf_comp.h" bodystart="217" bodyend="222"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__comp__hal_1gac21bbfe9589f7dfa639396957d2f2d79" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_comp_short_mask_t</name>
        <enumvalue id="group__nrf__comp__hal_1ggac21bbfe9589f7dfa639396957d2f2d79ab244208dd383122017e2f5ce0e593564" prot="public">
          <name>NRF_COMP_SHORT_STOP_CROSS_MASK</name>
          <initializer>= COMP_SHORTS_CROSS_STOP_Msk</initializer>
          <briefdescription>
<para>Shortcut between the CROSS event and the STOP task. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__comp__hal_1ggac21bbfe9589f7dfa639396957d2f2d79a238f7ff2ccecbe44a8f2c5ecd9defe9b" prot="public">
          <name>NRF_COMP_SHORT_STOP_UP_MASK</name>
          <initializer>= COMP_SHORTS_UP_STOP_Msk</initializer>
          <briefdescription>
<para>Shortcut between the UP event and the STOP task. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__comp__hal_1ggac21bbfe9589f7dfa639396957d2f2d79a9a48568b373cedda97dff468bf5e40f8" prot="public">
          <name>NRF_COMP_SHORT_STOP_DOWN_MASK</name>
          <initializer>= COMP_SHORTS_DOWN_STOP_Msk</initializer>
          <briefdescription>
<para>Shortcut between the DOWN event and the STOP task. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>COMP shortcut masks. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_comp.h" line="225" column="1" bodyfile="hal/nrf_comp.h" bodystart="226" bodyend="230"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group__nrf__comp__hal_1ga4fb8152c87746c98fa6952a30ef7ad01" prot="public" static="no">
        <type>uint32_t</type>
        <definition>typedef uint32_t nrf_comp_input_t</definition>
        <argsstring></argsstring>
        <name>nrf_comp_input_t</name>
        <briefdescription>
<para>COMP analog pin selection. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_comp.h" line="66" column="18" bodyfile="hal/nrf_comp.h" bodystart="66" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__nrf__comp__hal_1gaa940ec4e99c2581cdf5000e61d327a8e" prot="public" static="no">
        <type>uint32_t</type>
        <definition>typedef uint32_t nrf_comp_ext_ref_t</definition>
        <argsstring></argsstring>
        <name>nrf_comp_ext_ref_t</name>
        <briefdescription>
<para>COMP external analog reference selection. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_comp.h" line="116" column="18" bodyfile="hal/nrf_comp.h" bodystart="116" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__nrf__comp__hal_1ga5c05f52c23dd3844511462c680a4417c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_comp_enable</definition>
        <argsstring>(NRF_COMP_Type *p_reg)</argsstring>
        <name>nrf_comp_enable</name>
        <param>
          <type>NRF_COMP_Type *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for enabling the COMP peripheral. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_comp.h" line="442" column="24" bodyfile="hal/nrf_comp.h" bodystart="442" bodyend="445" declfile="hal/nrf_comp.h" declline="244" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__comp__hal_1gac09cea25dd0a0d2669ae72bfa8f3ccb8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_comp_disable</definition>
        <argsstring>(NRF_COMP_Type *p_reg)</argsstring>
        <name>nrf_comp_disable</name>
        <param>
          <type>NRF_COMP_Type *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for disabling the COMP peripheral. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_comp.h" line="447" column="24" bodyfile="hal/nrf_comp.h" bodystart="447" bodyend="450" declfile="hal/nrf_comp.h" declline="251" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__comp__hal_1ga5f7499ef1f0b88f8215c720387821279" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE bool</type>
        <definition>NRF_STATIC_INLINE bool nrf_comp_enable_check</definition>
        <argsstring>(NRF_COMP_Type const *p_reg)</argsstring>
        <name>nrf_comp_enable_check</name>
        <param>
          <type>NRF_COMP_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for checking if the COMP peripheral is enabled. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>The COMP peripheral is enabled. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>The COMP peripheral is not enabled. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_comp.h" line="452" column="24" bodyfile="hal/nrf_comp.h" bodystart="452" bodyend="455" declfile="hal/nrf_comp.h" declline="261" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__comp__hal_1ga8097d4f1c755b65c111fd3d43456e0d0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_comp_ref_set</definition>
        <argsstring>(NRF_COMP_Type *p_reg, nrf_comp_ref_t reference)</argsstring>
        <name>nrf_comp_ref_set</name>
        <param>
          <type>NRF_COMP_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__comp__hal_1ga2cb45b32907064f8b15ae54d91ca7470" kindref="member">nrf_comp_ref_t</ref></type>
          <declname>reference</declname>
        </param>
        <briefdescription>
<para>Function for setting the reference source. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">reference</parametername>
</parameternamelist>
<parameterdescription>
<para>COMP reference selection. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_comp.h" line="457" column="24" bodyfile="hal/nrf_comp.h" bodystart="457" bodyend="460" declfile="hal/nrf_comp.h" declline="269" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__comp__hal_1gaf2c4ded08a41d04b0b739b2053d72975" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_comp_ext_ref_set</definition>
        <argsstring>(NRF_COMP_Type *p_reg, nrf_comp_ext_ref_t ext_ref)</argsstring>
        <name>nrf_comp_ext_ref_set</name>
        <param>
          <type>NRF_COMP_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__comp__hal_1gaa940ec4e99c2581cdf5000e61d327a8e" kindref="member">nrf_comp_ext_ref_t</ref></type>
          <declname>ext_ref</declname>
        </param>
        <briefdescription>
<para>Function for setting the external analog reference source. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">ext_ref</parametername>
</parameternamelist>
<parameterdescription>
<para>COMP external analog reference selection. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_comp.h" line="462" column="24" bodyfile="hal/nrf_comp.h" bodystart="462" bodyend="472" declfile="hal/nrf_comp.h" declline="277" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__comp__hal_1ga500c5806660982e218ce77192d364757" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_comp_th_set</definition>
        <argsstring>(NRF_COMP_Type *p_reg, nrf_comp_th_t threshold)</argsstring>
        <name>nrf_comp_th_set</name>
        <param>
          <type>NRF_COMP_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="structnrf__comp__th__t" kindref="compound">nrf_comp_th_t</ref></type>
          <declname>threshold</declname>
        </param>
        <briefdescription>
<para>Function for setting threshold voltages. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">threshold</parametername>
</parameternamelist>
<parameterdescription>
<para>COMP VDOWN and VUP thresholds. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_comp.h" line="474" column="24" bodyfile="hal/nrf_comp.h" bodystart="474" bodyend="479" declfile="hal/nrf_comp.h" declline="285" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__comp__hal_1ga2ceb27145e46165c2bf722120ced720d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_comp_main_mode_set</definition>
        <argsstring>(NRF_COMP_Type *p_reg, nrf_comp_main_mode_t main_mode)</argsstring>
        <name>nrf_comp_main_mode_set</name>
        <param>
          <type>NRF_COMP_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__comp__hal_1ga501c4187cafe59f88ed8e98c7de2bfe6" kindref="member">nrf_comp_main_mode_t</ref></type>
          <declname>main_mode</declname>
        </param>
        <briefdescription>
<para>Function for setting the main mode. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">main_mode</parametername>
</parameternamelist>
<parameterdescription>
<para>COMP main operation mode. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_comp.h" line="481" column="24" bodyfile="hal/nrf_comp.h" bodystart="481" bodyend="485" declfile="hal/nrf_comp.h" declline="293" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__comp__hal_1ga8117597efb3ea6d5ee41aaa1a230332d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_comp_speed_mode_set</definition>
        <argsstring>(NRF_COMP_Type *p_reg, nrf_comp_sp_mode_t speed_mode)</argsstring>
        <name>nrf_comp_speed_mode_set</name>
        <param>
          <type>NRF_COMP_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__comp__hal_1gab73023f0b42ab46c65312f9ea9419e05" kindref="member">nrf_comp_sp_mode_t</ref></type>
          <declname>speed_mode</declname>
        </param>
        <briefdescription>
<para>Function for setting the speed mode. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">speed_mode</parametername>
</parameternamelist>
<parameterdescription>
<para>COMP speed and power mode. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_comp.h" line="487" column="24" bodyfile="hal/nrf_comp.h" bodystart="487" bodyend="491" declfile="hal/nrf_comp.h" declline="302" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__comp__hal_1gabd2c44d11c6c3e9e34ab8da3f3a2441d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_comp_hysteresis_set</definition>
        <argsstring>(NRF_COMP_Type *p_reg, nrf_comp_hyst_t hyst)</argsstring>
        <name>nrf_comp_hysteresis_set</name>
        <param>
          <type>NRF_COMP_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__comp__hal_1gaad279eda81a34c4cc4534f2603ab2717" kindref="member">nrf_comp_hyst_t</ref></type>
          <declname>hyst</declname>
        </param>
        <briefdescription>
<para>Function for setting the hysteresis. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">hyst</parametername>
</parameternamelist>
<parameterdescription>
<para>COMP comparator hysteresis. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_comp.h" line="493" column="24" bodyfile="hal/nrf_comp.h" bodystart="493" bodyend="496" declfile="hal/nrf_comp.h" declline="311" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__comp__hal_1ga6b3db242bd32551bc5460bec2c39f727" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_comp_isource_set</definition>
        <argsstring>(NRF_COMP_Type *p_reg, nrf_isource_t isource)</argsstring>
        <name>nrf_comp_isource_set</name>
        <param>
          <type>NRF_COMP_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__comp__hal_1gaee0ea1e7c432520ed0ff1fb8ed3e9586" kindref="member">nrf_isource_t</ref></type>
          <declname>isource</declname>
        </param>
        <briefdescription>
<para>Function for setting the current source on the analog input. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">isource</parametername>
</parameternamelist>
<parameterdescription>
<para>COMP current source selection on analog input. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_comp.h" line="320" column="24" declfile="hal/nrf_comp.h" declline="320" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__comp__hal_1ga95a7abbc3a0213fc6532300c57200010" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_comp_input_select</definition>
        <argsstring>(NRF_COMP_Type *p_reg, nrf_comp_input_t input)</argsstring>
        <name>nrf_comp_input_select</name>
        <param>
          <type>NRF_COMP_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__comp__hal_1ga4fb8152c87746c98fa6952a30ef7ad01" kindref="member">nrf_comp_input_t</ref></type>
          <declname>input</declname>
        </param>
        <briefdescription>
<para>Function for selecting the active input of the COMP. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">input</parametername>
</parameternamelist>
<parameterdescription>
<para>Input to be selected. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_comp.h" line="505" column="24" bodyfile="hal/nrf_comp.h" bodystart="505" bodyend="514" declfile="hal/nrf_comp.h" declline="329" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__comp__hal_1ga7c28874b0f93f96651b711a982fc8936" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_comp_result_get</definition>
        <argsstring>(NRF_COMP_Type const *p_reg)</argsstring>
        <name>nrf_comp_result_get</name>
        <param>
          <type>NRF_COMP_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting the last COMP compare result. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>If VIN+ == VIN-, the return value depends on the previous result.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The last compare result. If 0, then VIN+ &lt; VIN-. If 1, then VIN+ &gt; VIN-. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_comp.h" line="516" column="28" bodyfile="hal/nrf_comp.h" bodystart="516" bodyend="519" declfile="hal/nrf_comp.h" declline="340" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__comp__hal_1ga4b55bc056e76b423b75e62a2a5b032be" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_comp_int_enable</definition>
        <argsstring>(NRF_COMP_Type *p_reg, uint32_t mask)</argsstring>
        <name>nrf_comp_int_enable</name>
        <param>
          <type>NRF_COMP_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Function for enabling interrupts from COMP. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of interrupts to be enabled. Use <ref refid="group__nrf__comp__hal_1gab671bf5df533600ad4538f8ca2005a43" kindref="member">nrf_comp_int_mask_t</ref> values for bit masking.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="group__nrf__comp__hal_1ga8779fcf92170dc1f02ea74c091f7b6ef" kindref="member">nrf_comp_int_enable_check</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_comp.h" line="521" column="24" bodyfile="hal/nrf_comp.h" bodystart="521" bodyend="524" declfile="hal/nrf_comp.h" declline="351" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__comp__hal_1ga3684f8b0cc17571c7c112f538b262311" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_comp_int_disable</definition>
        <argsstring>(NRF_COMP_Type *p_reg, uint32_t mask)</argsstring>
        <name>nrf_comp_int_disable</name>
        <param>
          <type>NRF_COMP_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Function for disabling interrupts from COMP. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of interrupts to be disabled. Use <ref refid="group__nrf__comp__hal_1gab671bf5df533600ad4538f8ca2005a43" kindref="member">nrf_comp_int_mask_t</ref> values for bit masking.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="group__nrf__comp__hal_1ga8779fcf92170dc1f02ea74c091f7b6ef" kindref="member">nrf_comp_int_enable_check</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_comp.h" line="526" column="24" bodyfile="hal/nrf_comp.h" bodystart="526" bodyend="529" declfile="hal/nrf_comp.h" declline="362" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__comp__hal_1ga8779fcf92170dc1f02ea74c091f7b6ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_comp_int_enable_check</definition>
        <argsstring>(NRF_COMP_Type const *p_reg, uint32_t mask)</argsstring>
        <name>nrf_comp_int_enable_check</name>
        <param>
          <type>NRF_COMP_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Function for checking if the specified interrupts are enabled. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of interrupts to be checked. Use <ref refid="group__nrf__comp__hal_1gab671bf5df533600ad4538f8ca2005a43" kindref="member">nrf_comp_int_mask_t</ref> values for bit masking.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Mask of enabled interrupts. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_comp.h" line="531" column="28" bodyfile="hal/nrf_comp.h" bodystart="531" bodyend="534" declfile="hal/nrf_comp.h" declline="373" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__comp__hal_1gafa255ea77d914b7abf54edbac9375f7a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_comp_task_address_get</definition>
        <argsstring>(NRF_COMP_Type const *p_reg, nrf_comp_task_t task)</argsstring>
        <name>nrf_comp_task_address_get</name>
        <param>
          <type>NRF_COMP_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__comp__hal_1ga0a587fcb0646329cb6d9700f555787f8" kindref="member">nrf_comp_task_t</ref></type>
          <declname>task</declname>
        </param>
        <briefdescription>
<para>Function for getting the address of the specified COMP task register. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">task</parametername>
</parameternamelist>
<parameterdescription>
<para>COMP task.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Address of the specified COMP task. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_comp.h" line="536" column="28" bodyfile="hal/nrf_comp.h" bodystart="536" bodyend="540" declfile="hal/nrf_comp.h" declline="383" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__comp__hal_1gacd266bda717882290555993230244d60" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_comp_event_address_get</definition>
        <argsstring>(NRF_COMP_Type const *p_reg, nrf_comp_event_t event)</argsstring>
        <name>nrf_comp_event_address_get</name>
        <param>
          <type>NRF_COMP_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__comp__hal_1ga17ffea3865f2db28127bae9411bce036" kindref="member">nrf_comp_event_t</ref></type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>Function for getting the address of the specified COMP event register. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>COMP event.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Address of the specified COMP event. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_comp.h" line="542" column="28" bodyfile="hal/nrf_comp.h" bodystart="542" bodyend="546" declfile="hal/nrf_comp.h" declline="394" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__comp__hal_1ga5e27ebf4b606f2cfe394df53a611c20e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_comp_shorts_enable</definition>
        <argsstring>(NRF_COMP_Type *p_reg, uint32_t mask)</argsstring>
        <name>nrf_comp_shorts_enable</name>
        <param>
          <type>NRF_COMP_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Function for setting COMP shortcuts. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of shortcuts. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_comp.h" line="548" column="24" bodyfile="hal/nrf_comp.h" bodystart="548" bodyend="551" declfile="hal/nrf_comp.h" declline="403" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__comp__hal_1ga940bea65f2f301b560de50f7982c220a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_comp_shorts_disable</definition>
        <argsstring>(NRF_COMP_Type *p_reg, uint32_t mask)</argsstring>
        <name>nrf_comp_shorts_disable</name>
        <param>
          <type>NRF_COMP_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Function for clearing COMP shortcuts by mask. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of shortcuts. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_comp.h" line="553" column="24" bodyfile="hal/nrf_comp.h" bodystart="553" bodyend="556" declfile="hal/nrf_comp.h" declline="411" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__comp__hal_1ga44bf51b858aa721c9259de645facadc6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_comp_task_trigger</definition>
        <argsstring>(NRF_COMP_Type *p_reg, nrf_comp_task_t task)</argsstring>
        <name>nrf_comp_task_trigger</name>
        <param>
          <type>NRF_COMP_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__comp__hal_1ga0a587fcb0646329cb6d9700f555787f8" kindref="member">nrf_comp_task_t</ref></type>
          <declname>task</declname>
        </param>
        <briefdescription>
<para>Function for setting the specified COMP task. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">task</parametername>
</parameternamelist>
<parameterdescription>
<para>Task to be activated. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_comp.h" line="558" column="24" bodyfile="hal/nrf_comp.h" bodystart="558" bodyend="561" declfile="hal/nrf_comp.h" declline="419" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__comp__hal_1ga4cddceff06a97a15d763b963059b20a8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_comp_event_clear</definition>
        <argsstring>(NRF_COMP_Type *p_reg, nrf_comp_event_t event)</argsstring>
        <name>nrf_comp_event_clear</name>
        <param>
          <type>NRF_COMP_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__comp__hal_1ga17ffea3865f2db28127bae9411bce036" kindref="member">nrf_comp_event_t</ref></type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>Function for clearing the specified COMP event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>COMP event to be cleared. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_comp.h" line="563" column="24" bodyfile="hal/nrf_comp.h" bodystart="563" bodyend="567" declfile="hal/nrf_comp.h" declline="427" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__comp__hal_1gac382518feeb776a5e52c3e82b1d3f43e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE bool</type>
        <definition>NRF_STATIC_INLINE bool nrf_comp_event_check</definition>
        <argsstring>(NRF_COMP_Type const *p_reg, nrf_comp_event_t event)</argsstring>
        <name>nrf_comp_event_check</name>
        <param>
          <type>NRF_COMP_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__comp__hal_1ga17ffea3865f2db28127bae9411bce036" kindref="member">nrf_comp_event_t</ref></type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>Function for retrieving the state of the COMP event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event to be checked.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>The event has been generated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>The event has not been generated. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_comp.h" line="569" column="24" bodyfile="hal/nrf_comp.h" bodystart="569" bodyend="572" declfile="hal/nrf_comp.h" declline="438" declcolumn="24"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2015<sp/>-<sp/>2024,<sp/>Nordic<sp/>Semiconductor<sp/>ASA</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>All<sp/>rights<sp/>reserved.</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>SPDX-License-Identifier:<sp/>BSD-3-Clause</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions<sp/>are<sp/>met:</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>1.<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright<sp/>notice,<sp/>this</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>2.<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the<sp/>distribution.</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/>3.<sp/>Neither<sp/>the<sp/>name<sp/>of<sp/>the<sp/>copyright<sp/>holder<sp/>nor<sp/>the<sp/>names<sp/>of<sp/>its</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>contributors<sp/>may<sp/>be<sp/>used<sp/>to<sp/>endorse<sp/>or<sp/>promote<sp/>products<sp/>derived<sp/>from<sp/>this</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>software<sp/>without<sp/>specific<sp/>prior<sp/>written<sp/>permission.</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>COPYRIGHT<sp/>HOLDERS<sp/>AND<sp/>CONTRIBUTORS<sp/>&quot;AS<sp/>IS&quot;</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/>AND<sp/>ANY<sp/>EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>THE</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*<sp/>ARE<sp/>DISCLAIMED.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>COPYRIGHT<sp/>HOLDER<sp/>OR<sp/>CONTRIBUTORS<sp/>BE</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,<sp/>SPECIAL,<sp/>EXEMPLARY,<sp/>OR</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>PROCUREMENT<sp/>OF</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>*<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,<sp/>DATA,<sp/>OR<sp/>PROFITS;<sp/>OR<sp/>BUSINESS</highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/>*<sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY<sp/>THEORY<sp/>OF<sp/>LIABILITY,<sp/>WHETHER<sp/>IN</highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/>*<sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR<sp/>OTHERWISE)</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/>*<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE<sp/>OF<sp/>THIS<sp/>SOFTWARE,<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/>*<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight></codeline>
<codeline lineno="32"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>NRF_COMP_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_COMP_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;nrfx.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="43"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="44"><highlight class="comment"><sp/>*<sp/>@defgroup<sp/>nrf_comp_hal<sp/>COMP<sp/>HAL</highlight></codeline>
<codeline lineno="45"><highlight class="comment"><sp/>*<sp/>@{</highlight></codeline>
<codeline lineno="46"><highlight class="comment"><sp/>*<sp/>@ingroup<sp/>nrf_comp</highlight></codeline>
<codeline lineno="47"><highlight class="comment"><sp/>*<sp/>@brief<sp/><sp/><sp/>Hardware<sp/>access<sp/>layer<sp/>(HAL)<sp/>for<sp/>managing<sp/>the<sp/>Comparator<sp/>(COMP)<sp/>peripheral.</highlight></codeline>
<codeline lineno="48"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(COMP_ISOURCE_ISOURCE_Msk)<sp/>||<sp/>defined<sp/>(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="51"><highlight class="comment">/**<sp/>@brief<sp/>Symbol<sp/>indicating<sp/>whether<sp/>COMP<sp/>has<sp/>ISOURCE<sp/>register.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_COMP_HAS_ISOURCE<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_COMP_HAS_ISOURCE<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(COMP_PSEL_PIN_Msk)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="58"><highlight class="comment">/**<sp/>@brief<sp/>Symbol<sp/>indicating<sp/>whether<sp/>the<sp/>configuration<sp/>of<sp/>analog<sp/>input<sp/>using<sp/>pin<sp/>number<sp/>is<sp/>present.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_COMP_HAS_AIN_AS_PIN<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_COMP_HAS_AIN_AS_PIN<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="64"><highlight class="comment">/**<sp/>@brief<sp/>COMP<sp/>analog<sp/>pin<sp/>selection.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_COMP_HAS_AIN_AS_PIN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>uint32_t<sp/><ref refid="group__nrf__comp__hal_1ga4fb8152c87746c98fa6952a30ef7ad01" kindref="member">nrf_comp_input_t</ref>;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal">{</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>NRF_COMP_INPUT_0<sp/><sp/><sp/>=<sp/>COMP_PSEL_PSEL_AnalogInput0,<sp/></highlight><highlight class="comment">/*!&lt;<sp/>AIN0<sp/>selected<sp/>as<sp/>analog<sp/>input.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>NRF_COMP_INPUT_1<sp/><sp/><sp/>=<sp/>COMP_PSEL_PSEL_AnalogInput1,<sp/></highlight><highlight class="comment">/*!&lt;<sp/>AIN1<sp/>selected<sp/>as<sp/>analog<sp/>input.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>NRF_COMP_INPUT_2<sp/><sp/><sp/>=<sp/>COMP_PSEL_PSEL_AnalogInput2,<sp/></highlight><highlight class="comment">/*!&lt;<sp/>AIN2<sp/>selected<sp/>as<sp/>analog<sp/>input.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/>NRF_COMP_INPUT_3<sp/><sp/><sp/>=<sp/>COMP_PSEL_PSEL_AnalogInput3,<sp/></highlight><highlight class="comment">/*!&lt;<sp/>AIN3<sp/>selected<sp/>as<sp/>analog<sp/>input.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined<sp/>(COMP_PSEL_PSEL_AnalogInput4)<sp/>||<sp/>defined<sp/>(__NRFX_DOXYGEN__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/>NRF_COMP_INPUT_4<sp/><sp/><sp/>=<sp/>COMP_PSEL_PSEL_AnalogInput4,<sp/></highlight><highlight class="comment">/*!&lt;<sp/>AIN4<sp/>selected<sp/>as<sp/>analog<sp/>input.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined<sp/>(COMP_PSEL_PSEL_AnalogInput5)<sp/>||<sp/>defined<sp/>(__NRFX_DOXYGEN__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/>NRF_COMP_INPUT_5<sp/><sp/><sp/>=<sp/>COMP_PSEL_PSEL_AnalogInput5,<sp/></highlight><highlight class="comment">/*!&lt;<sp/>AIN5<sp/>selected<sp/>as<sp/>analog<sp/>input.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined<sp/>(COMP_PSEL_PSEL_AnalogInput6)<sp/>||<sp/>defined<sp/>(__NRFX_DOXYGEN__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/>NRF_COMP_INPUT_6<sp/><sp/><sp/>=<sp/>COMP_PSEL_PSEL_AnalogInput6,<sp/></highlight><highlight class="comment">/*!&lt;<sp/>AIN6<sp/>selected<sp/>as<sp/>analog<sp/>input.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined<sp/>(COMP_PSEL_PSEL_AnalogInput7)<sp/>||<sp/>defined<sp/>(__NRFX_DOXYGEN__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/>NRF_COMP_INPUT_7<sp/><sp/><sp/>=<sp/>COMP_PSEL_PSEL_AnalogInput7,<sp/></highlight><highlight class="comment">/*!&lt;<sp/>AIN7<sp/>selected<sp/>as<sp/>analog<sp/>input.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined<sp/>(COMP_PSEL_PSEL_VddDiv2)<sp/>||<sp/>defined<sp/>(__NRFX_DOXYGEN__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/>NRF_COMP_VDD_DIV2<sp/><sp/>=<sp/>COMP_PSEL_PSEL_VddDiv2,<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*!&lt;<sp/>VDD/2<sp/>selected<sp/>as<sp/>analog<sp/>input.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined<sp/>(COMP_PSEL_PSEL_VddhDiv5)<sp/>||<sp/>defined<sp/>(__NRFX_DOXYGEN__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/>NRF_COMP_VDDH_DIV5<sp/>=<sp/>COMP_PSEL_PSEL_VddhDiv5,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*!&lt;<sp/>VDDH/5<sp/>selected<sp/>as<sp/>analog<sp/>input.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal">}<sp/><ref refid="group__nrf__comp__hal_1ga4fb8152c87746c98fa6952a30ef7ad01" kindref="member">nrf_comp_input_t</ref>;</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRF_COMP_HAS_AIN_AS_PIN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="95"><highlight class="comment">/**<sp/>@brief<sp/>COMP<sp/>reference<sp/>selection.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal">{</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__comp__hal_1gga2cb45b32907064f8b15ae54d91ca7470a683a97562633fe24b117a2ccbc0faa90" kindref="member">NRF_COMP_REF_INT_1V2</ref><sp/><sp/><sp/>=<sp/>COMP_REFSEL_REFSEL_Int1V2,<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*!&lt;<sp/>VREF<sp/>=<sp/>internal<sp/>1.2<sp/>V<sp/>reference<sp/>(VDD<sp/>&gt;=<sp/>1.7<sp/>V).<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(COMP_REFSEL_REFSEL_Int1V8)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__comp__hal_1gga2cb45b32907064f8b15ae54d91ca7470a9deceb6914afc21b109a3e8adf565098" kindref="member">NRF_COMP_REF_INT_1V8</ref><sp/><sp/><sp/>=<sp/>COMP_REFSEL_REFSEL_Int1V8,<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*!&lt;<sp/>VREF<sp/>=<sp/>internal<sp/>1.8<sp/>V<sp/>reference<sp/>(VDD<sp/>&gt;=<sp/>VREF<sp/>+<sp/>0.2<sp/>V).<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(COMP_REFSEL_REFSEL_Int2V4)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__comp__hal_1gga2cb45b32907064f8b15ae54d91ca7470a12a30003593a48a4213b4136b31ed9e7" kindref="member">NRF_COMP_REF_INT_2V4</ref><sp/><sp/><sp/>=<sp/>COMP_REFSEL_REFSEL_Int2V4,<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*!&lt;<sp/>VREF<sp/>=<sp/>internal<sp/>2.4<sp/>V<sp/>reference<sp/>(VDD<sp/>&gt;=<sp/>VREF<sp/>+<sp/>0.2<sp/>V).<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(COMP_REFSEL_REFSEL_AVDDAO1V8)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__comp__hal_1gga2cb45b32907064f8b15ae54d91ca7470a0ccdb9ee6317bfaa2be3360c334a576c" kindref="member">NRF_COMP_REF_AVDDAO1V8</ref><sp/>=<sp/>COMP_REFSEL_REFSEL_AVDDAO1V8,<sp/></highlight><highlight class="comment">/*!&lt;<sp/>VREF<sp/>=<sp/>AVDD_AO_1V8.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(COMP_REFSEL_REFSEL_VDD)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__comp__hal_1gga2cb45b32907064f8b15ae54d91ca7470aa3f446be7d1fcd2c8e0710ea8bbe3c49" kindref="member">NRF_COMP_REF_VDD</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>COMP_REFSEL_REFSEL_VDD,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*!&lt;<sp/>VREF<sp/>=<sp/>VDD.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__comp__hal_1gga2cb45b32907064f8b15ae54d91ca7470ad4b2a1a578ad12d820f421c4eaded048" kindref="member">NRF_COMP_REF_AREF</ref><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>COMP_REFSEL_REFSEL_ARef<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*!&lt;<sp/>VREF<sp/>=<sp/>AREF<sp/>(VDD<sp/>&gt;=<sp/>VREF<sp/>&gt;=<sp/>AREFMIN).<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal">}<sp/><ref refid="group__nrf__comp__hal_1ga2cb45b32907064f8b15ae54d91ca7470" kindref="member">nrf_comp_ref_t</ref>;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="114"><highlight class="comment">/**<sp/>@brief<sp/>COMP<sp/>external<sp/>analog<sp/>reference<sp/>selection.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_COMP_HAS_AIN_AS_PIN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>uint32_t<sp/><ref refid="group__nrf__comp__hal_1gaa940ec4e99c2581cdf5000e61d327a8e" kindref="member">nrf_comp_ext_ref_t</ref>;</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal">{</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/>NRF_COMP_EXT_REF_0<sp/>=<sp/>COMP_EXTREFSEL_EXTREFSEL_AnalogReference0,<sp/></highlight><highlight class="comment">/*!&lt;<sp/>Use<sp/>AIN0<sp/>as<sp/>external<sp/>analog<sp/>reference.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/>NRF_COMP_EXT_REF_1<sp/>=<sp/>COMP_EXTREFSEL_EXTREFSEL_AnalogReference1,<sp/></highlight><highlight class="comment">/*!&lt;<sp/>Use<sp/>AIN1<sp/>as<sp/>external<sp/>analog<sp/>reference.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/>NRF_COMP_EXT_REF_2<sp/>=<sp/>COMP_EXTREFSEL_EXTREFSEL_AnalogReference2,<sp/></highlight><highlight class="comment">/*!&lt;<sp/>Use<sp/>AIN2<sp/>as<sp/>external<sp/>analog<sp/>reference.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/>NRF_COMP_EXT_REF_3<sp/>=<sp/>COMP_EXTREFSEL_EXTREFSEL_AnalogReference3,<sp/></highlight><highlight class="comment">/*!&lt;<sp/>Use<sp/>AIN3<sp/>as<sp/>external<sp/>analog<sp/>reference.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined<sp/>(COMP_EXTREFSEL_EXTREFSEL_AnalogReference4)<sp/>||<sp/>defined<sp/>(__NRFX_DOXYGEN__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/>NRF_COMP_EXT_REF_4<sp/>=<sp/>COMP_EXTREFSEL_EXTREFSEL_AnalogReference4,<sp/></highlight><highlight class="comment">/*!&lt;<sp/>Use<sp/>AIN4<sp/>as<sp/>external<sp/>analog<sp/>reference.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined<sp/>(COMP_EXTREFSEL_EXTREFSEL_AnalogReference5)<sp/>||<sp/>defined<sp/>(__NRFX_DOXYGEN__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/>NRF_COMP_EXT_REF_5<sp/>=<sp/>COMP_EXTREFSEL_EXTREFSEL_AnalogReference5,<sp/></highlight><highlight class="comment">/*!&lt;<sp/>Use<sp/>AIN5<sp/>as<sp/>external<sp/>analog<sp/>reference.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined<sp/>(COMP_EXTREFSEL_EXTREFSEL_AnalogReference6)<sp/>||<sp/>defined<sp/>(__NRFX_DOXYGEN__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/>NRF_COMP_EXT_REF_6<sp/>=<sp/>COMP_EXTREFSEL_EXTREFSEL_AnalogReference6,<sp/></highlight><highlight class="comment">/*!&lt;<sp/>Use<sp/>AIN6<sp/>as<sp/>external<sp/>analog<sp/>reference.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined<sp/>(COMP_EXTREFSEL_EXTREFSEL_AnalogReference7)<sp/>||<sp/>defined<sp/>(__NRFX_DOXYGEN__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/>NRF_COMP_EXT_REF_7<sp/>=<sp/>COMP_EXTREFSEL_EXTREFSEL_AnalogReference7<sp/><sp/></highlight><highlight class="comment">/*!&lt;<sp/>Use<sp/>AIN7<sp/>as<sp/>external<sp/>analog<sp/>reference.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal">}<sp/><ref refid="group__nrf__comp__hal_1gaa940ec4e99c2581cdf5000e61d327a8e" kindref="member">nrf_comp_ext_ref_t</ref>;</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRF_COMP_HAS_AIN_AS_PIN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="139"><highlight class="comment">/**<sp/>@brief<sp/>COMP<sp/>THDOWN<sp/>and<sp/>THUP<sp/>values<sp/>that<sp/>are<sp/>used<sp/>to<sp/>calculate<sp/>the<sp/>threshold<sp/>voltages<sp/>VDOWN<sp/>and<sp/>VUP.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="140" refid="structnrf__comp__th__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal">{</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>th_down;<sp/></highlight><highlight class="comment">/*!&lt;<sp/>THDOWN<sp/>value.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>th_up;<sp/><sp/><sp/></highlight><highlight class="comment">/*!&lt;<sp/>THUP<sp/>value.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal">}<sp/><ref refid="structnrf__comp__th__t" kindref="compound">nrf_comp_th_t</ref>;</highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="146"><highlight class="comment">/**<sp/>@brief<sp/>COMP<sp/>main<sp/>operation<sp/>mode.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal">{</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__comp__hal_1gga501c4187cafe59f88ed8e98c7de2bfe6ac957c24d7ddc8c5ed4ff64430d2965db" kindref="member">NRF_COMP_MAIN_MODE_SE</ref><sp/><sp/><sp/>=<sp/>COMP_MODE_MAIN_SE,<sp/><sp/></highlight><highlight class="comment">/*!&lt;<sp/>Single-ended<sp/>mode.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__comp__hal_1gga501c4187cafe59f88ed8e98c7de2bfe6acc65bd4c0459d7bce4beb36cbbc35ebf" kindref="member">NRF_COMP_MAIN_MODE_DIFF</ref><sp/>=<sp/>COMP_MODE_MAIN_Diff<sp/></highlight><highlight class="comment">/*!&lt;<sp/>Differential<sp/>mode.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal">}<sp/><ref refid="group__nrf__comp__hal_1ga501c4187cafe59f88ed8e98c7de2bfe6" kindref="member">nrf_comp_main_mode_t</ref>;</highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="153"><highlight class="comment">/**<sp/>@brief<sp/>COMP<sp/>speed<sp/>and<sp/>power<sp/>mode.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal">{</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__comp__hal_1ggab73023f0b42ab46c65312f9ea9419e05a913d611ea3940e37924497ee95ffef78" kindref="member">NRF_COMP_SP_MODE_LOW</ref><sp/><sp/><sp/><sp/>=<sp/>COMP_MODE_SP_Low,<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*!&lt;<sp/>Low<sp/>power<sp/>mode.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined<sp/>(COMP_MODE_SP_Normal)<sp/>||<sp/>defined<sp/>(__NRFX_DOXYGEN__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__comp__hal_1ggab73023f0b42ab46c65312f9ea9419e05a698a3502bbddf2b190d724d3ebf7e3c4" kindref="member">NRF_COMP_SP_MODE_NORMAL</ref><sp/>=<sp/>COMP_MODE_SP_Normal,<sp/></highlight><highlight class="comment">/*!&lt;<sp/>Normal<sp/>mode.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__comp__hal_1ggab73023f0b42ab46c65312f9ea9419e05ab112225d17bad73d2ab7729a8a1d76de" kindref="member">NRF_COMP_SP_MODE_HIGH</ref><sp/><sp/><sp/>=<sp/>COMP_MODE_SP_High<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*!&lt;<sp/>High-speed<sp/>mode.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal">}<sp/><ref refid="group__nrf__comp__hal_1gab73023f0b42ab46c65312f9ea9419e05" kindref="member">nrf_comp_sp_mode_t</ref>;</highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="163"><highlight class="comment">/**<sp/>@brief<sp/>COMP<sp/>comparator<sp/>hysteresis.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal">{</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__comp__hal_1ggaad279eda81a34c4cc4534f2603ab2717a83a04f019cc200d74e481e644420b6fe" kindref="member">NRF_COMP_HYST_NO_HYST</ref><sp/>=<sp/>COMP_HYST_HYST_NoHyst,<sp/><sp/><sp/></highlight><highlight class="comment">/*!&lt;<sp/>Comparator<sp/>hysteresis<sp/>disabled.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined<sp/>(COMP_HYST_HYST_Hyst40mV)<sp/>||<sp/>defined<sp/>(__NRFX_DOXYGEN__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__comp__hal_1ggaad279eda81a34c4cc4534f2603ab2717a71200a7942d1434ea7ce5df178918563" kindref="member">NRF_COMP_HYST_40MV</ref><sp/><sp/><sp/><sp/>=<sp/>COMP_HYST_HYST_Hyst40mV,<sp/></highlight><highlight class="comment">/*!&lt;<sp/>Comparator<sp/>hysteresis<sp/>enabled<sp/>at<sp/>40<sp/>mV<sp/>level.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined<sp/>(COMP_HYST_HYST_Hyst50mV)<sp/>||<sp/>defined<sp/>(__NRFX_DOXYGEN__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__comp__hal_1ggaad279eda81a34c4cc4534f2603ab2717a93499a63e3c0553cef478b471a1a724a" kindref="member">NRF_COMP_HYST_50MV</ref><sp/><sp/><sp/><sp/>=<sp/>COMP_HYST_HYST_Hyst50mV<sp/><sp/></highlight><highlight class="comment">/*!&lt;<sp/>Comparator<sp/>hysteresis<sp/>enabled<sp/>at<sp/>50<sp/>mV<sp/>level.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal">}<sp/><ref refid="group__nrf__comp__hal_1gaad279eda81a34c4cc4534f2603ab2717" kindref="member">nrf_comp_hyst_t</ref>;</highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_COMP_HAS_ISOURCE</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="176"><highlight class="comment">/**<sp/>@brief<sp/>COMP<sp/>current<sp/>source<sp/>selection<sp/>on<sp/>analog<sp/>input.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal">{</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__comp__hal_1ggaee0ea1e7c432520ed0ff1fb8ed3e9586ad24db8d5831ad607e770c5a426131710" kindref="member">NRF_COMP_ISOURCE_OFF</ref><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>COMP_ISOURCE_ISOURCE_Off,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*!&lt;<sp/>Current<sp/>source<sp/>disabled.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined<sp/>(COMP_ISOURCE_ISOURCE_Ien2uA5)<sp/>||<sp/>defined<sp/>(__NRFX_DOXYGEN__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__comp__hal_1ggaee0ea1e7c432520ed0ff1fb8ed3e9586acacf524a0c3e83d679b6903d58b6af7a" kindref="member">NRF_COMP_ISOURCE_IEN_2UA5</ref><sp/>=<sp/>COMP_ISOURCE_ISOURCE_Ien2uA5,<sp/></highlight><highlight class="comment">/*!&lt;<sp/>Current<sp/>source<sp/>enabled<sp/>(+/-<sp/>2.5<sp/>uA).<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__comp__hal_1ggaee0ea1e7c432520ed0ff1fb8ed3e9586acacf524a0c3e83d679b6903d58b6af7a" kindref="member">NRF_COMP_ISOURCE_IEN_2UA5</ref><sp/>=<sp/>COMP_ISOURCE_ISOURCE_Ien2mA5,<sp/></highlight><highlight class="comment">/*!&lt;<sp/>Current<sp/>source<sp/>enabled<sp/>(+/-<sp/>2.5<sp/>uA).<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined<sp/>(COMP_ISOURCE_ISOURCE_Ien5uA)<sp/>||<sp/>defined<sp/>(__NRFX_DOXYGEN__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__comp__hal_1ggaee0ea1e7c432520ed0ff1fb8ed3e9586aa734781d1bd5da1585fc5f57b293e530" kindref="member">NRF_COMP_ISOURCE_IEN_5UA</ref><sp/><sp/>=<sp/>COMP_ISOURCE_ISOURCE_Ien5uA,<sp/><sp/></highlight><highlight class="comment">/*!&lt;<sp/>Current<sp/>source<sp/>enabled<sp/>(+/-<sp/>5<sp/>uA).<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__comp__hal_1ggaee0ea1e7c432520ed0ff1fb8ed3e9586aa734781d1bd5da1585fc5f57b293e530" kindref="member">NRF_COMP_ISOURCE_IEN_5UA</ref><sp/><sp/>=<sp/>COMP_ISOURCE_ISOURCE_Ien5mA,<sp/><sp/></highlight><highlight class="comment">/*!&lt;<sp/>Current<sp/>source<sp/>enabled<sp/>(+/-<sp/>5<sp/>uA).<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined<sp/>(COMP_ISOURCE_ISOURCE_Ien10uA)<sp/>||<sp/>defined<sp/>(__NRFX_DOXYGEN__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__comp__hal_1ggaee0ea1e7c432520ed0ff1fb8ed3e9586a2640cbdac92d7c14fc2164b0b3fe9e0a" kindref="member">NRF_COMP_ISOURCE_IEN_10UA</ref><sp/>=<sp/>COMP_ISOURCE_ISOURCE_Ien10uA,<sp/></highlight><highlight class="comment">/*!&lt;<sp/>Current<sp/>source<sp/>enabled<sp/>(+/-<sp/>10<sp/>uA).<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__comp__hal_1ggaee0ea1e7c432520ed0ff1fb8ed3e9586a2640cbdac92d7c14fc2164b0b3fe9e0a" kindref="member">NRF_COMP_ISOURCE_IEN_10UA</ref><sp/>=<sp/>COMP_ISOURCE_ISOURCE_Ien10mA,<sp/></highlight><highlight class="comment">/*!&lt;<sp/>Current<sp/>source<sp/>enabled<sp/>(+/-<sp/>10<sp/>uA).<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal">}<sp/><ref refid="group__nrf__comp__hal_1gaee0ea1e7c432520ed0ff1fb8ed3e9586" kindref="member">nrf_isource_t</ref>;</highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRF_COMP_HAS_ISOURCE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="198"><highlight class="comment">/**<sp/>@brief<sp/>COMP<sp/>tasks.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal">{</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__comp__hal_1gga0a587fcb0646329cb6d9700f555787f8aedc5ccaa13628f7af6836e5ebe95895b" kindref="member">NRF_COMP_TASK_START</ref><sp/><sp/>=<sp/>offsetof(NRF_COMP_Type,<sp/>TASKS_START),<sp/></highlight><highlight class="comment">/*!&lt;<sp/>COMP<sp/>start<sp/>sampling<sp/>task.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__comp__hal_1gga0a587fcb0646329cb6d9700f555787f8aaa6e596dc463abb077e160e4dd869a8c" kindref="member">NRF_COMP_TASK_STOP</ref><sp/><sp/><sp/>=<sp/>offsetof(NRF_COMP_Type,<sp/>TASKS_STOP),<sp/><sp/></highlight><highlight class="comment">/*!&lt;<sp/>COMP<sp/>stop<sp/>sampling<sp/>task.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__comp__hal_1gga0a587fcb0646329cb6d9700f555787f8aee22b3249ada6965b7859d383de2cb70" kindref="member">NRF_COMP_TASK_SAMPLE</ref><sp/>=<sp/>offsetof(NRF_COMP_Type,<sp/>TASKS_SAMPLE)<sp/></highlight><highlight class="comment">/*!&lt;<sp/>Sample<sp/>comparator<sp/>value.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal">}<sp/><ref refid="group__nrf__comp__hal_1ga0a587fcb0646329cb6d9700f555787f8" kindref="member">nrf_comp_task_t</ref>;</highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="206"><highlight class="comment">/**<sp/>@brief<sp/>COMP<sp/>events.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal">{</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__comp__hal_1gga17ffea3865f2db28127bae9411bce036af14fa8579f8161312ce9320216316cfe" kindref="member">NRF_COMP_EVENT_READY</ref><sp/>=<sp/>offsetof(NRF_COMP_Type,<sp/>EVENTS_READY),<sp/></highlight><highlight class="comment">/*!&lt;<sp/>COMP<sp/>is<sp/>ready<sp/>and<sp/>output<sp/>is<sp/>valid.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__comp__hal_1gga17ffea3865f2db28127bae9411bce036aaa4c13d4069ae0dfba1ffe3406cfa267" kindref="member">NRF_COMP_EVENT_DOWN</ref><sp/><sp/>=<sp/>offsetof(NRF_COMP_Type,<sp/>EVENTS_DOWN),<sp/><sp/></highlight><highlight class="comment">/*!&lt;<sp/>Input<sp/>voltage<sp/>crossed<sp/>the<sp/>threshold<sp/>going<sp/>down.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__comp__hal_1gga17ffea3865f2db28127bae9411bce036a01c26def4266ae02e4f6abeb18ae5f4f" kindref="member">NRF_COMP_EVENT_UP</ref><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_COMP_Type,<sp/>EVENTS_UP),<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*!&lt;<sp/>Input<sp/>voltage<sp/>crossed<sp/>the<sp/>threshold<sp/>going<sp/>up.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__comp__hal_1gga17ffea3865f2db28127bae9411bce036a6eb2fb92c021fde7a3c1590094782b7f" kindref="member">NRF_COMP_EVENT_CROSS</ref><sp/>=<sp/>offsetof(NRF_COMP_Type,<sp/>EVENTS_CROSS)<sp/><sp/></highlight><highlight class="comment">/*!&lt;<sp/>Input<sp/>voltage<sp/>crossed<sp/>the<sp/>threshold<sp/>in<sp/>any<sp/>direction.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal">}<sp/><ref refid="group__nrf__comp__hal_1ga17ffea3865f2db28127bae9411bce036" kindref="member">nrf_comp_event_t</ref>;</highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="215"><highlight class="comment">/**<sp/>@brief<sp/>COMP<sp/>interrupts.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal">{</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__comp__hal_1ggab671bf5df533600ad4538f8ca2005a43a5416dd348fbaa0b85363fc1b5525099d" kindref="member">NRF_COMP_INT_READY_MASK</ref><sp/>=<sp/>COMP_INTENSET_READY_Msk,<sp/></highlight><highlight class="comment">/**&lt;<sp/>Interrupt<sp/>on<sp/>READY<sp/>event.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__comp__hal_1ggab671bf5df533600ad4538f8ca2005a43ad78cf001b11ef4dd67f8f28c9f2dbe0c" kindref="member">NRF_COMP_INT_DOWN_MASK</ref><sp/><sp/>=<sp/>COMP_INTENSET_DOWN_Msk,<sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Interrupt<sp/>on<sp/>DOWN<sp/>event.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__comp__hal_1ggab671bf5df533600ad4538f8ca2005a43a25b4fc71542b4e626dd99ef643768fb5" kindref="member">NRF_COMP_INT_UP_MASK</ref><sp/><sp/><sp/><sp/>=<sp/>COMP_INTENSET_UP_Msk,<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Interrupt<sp/>on<sp/>UP<sp/>event.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__comp__hal_1ggab671bf5df533600ad4538f8ca2005a43a8bf5389eb68ecca5d1fad116f711eda2" kindref="member">NRF_COMP_INT_CROSS_MASK</ref><sp/>=<sp/>COMP_INTENSET_CROSS_Msk<sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Interrupt<sp/>on<sp/>CROSS<sp/>event.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal">}<sp/><ref refid="group__nrf__comp__hal_1gab671bf5df533600ad4538f8ca2005a43" kindref="member">nrf_comp_int_mask_t</ref>;</highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="224"><highlight class="comment">/**<sp/>@brief<sp/>COMP<sp/>shortcut<sp/>masks.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal">{</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__comp__hal_1ggac21bbfe9589f7dfa639396957d2f2d79ab244208dd383122017e2f5ce0e593564" kindref="member">NRF_COMP_SHORT_STOP_CROSS_MASK</ref><sp/>=<sp/>COMP_SHORTS_CROSS_STOP_Msk,<sp/></highlight><highlight class="comment">///&lt;<sp/>Shortcut<sp/>between<sp/>the<sp/>CROSS<sp/>event<sp/>and<sp/>the<sp/>STOP<sp/>task.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__comp__hal_1ggac21bbfe9589f7dfa639396957d2f2d79a238f7ff2ccecbe44a8f2c5ecd9defe9b" kindref="member">NRF_COMP_SHORT_STOP_UP_MASK</ref><sp/><sp/><sp/><sp/>=<sp/>COMP_SHORTS_UP_STOP_Msk,<sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Shortcut<sp/>between<sp/>the<sp/>UP<sp/>event<sp/>and<sp/>the<sp/>STOP<sp/>task.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__comp__hal_1ggac21bbfe9589f7dfa639396957d2f2d79a9a48568b373cedda97dff468bf5e40f8" kindref="member">NRF_COMP_SHORT_STOP_DOWN_MASK</ref><sp/><sp/>=<sp/>COMP_SHORTS_DOWN_STOP_Msk<sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Shortcut<sp/>between<sp/>the<sp/>DOWN<sp/>event<sp/>and<sp/>the<sp/>STOP<sp/>task.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal">}<sp/><ref refid="group__nrf__comp__hal_1gac21bbfe9589f7dfa639396957d2f2d79" kindref="member">nrf_comp_short_mask_t</ref>;</highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="232"><highlight class="comment">/**<sp/>@brief<sp/>COMP<sp/>reference<sp/>configuration.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="233" refid="structnrf__comp__ref__conf__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal">{</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__comp__hal_1ga2cb45b32907064f8b15ae54d91ca7470" kindref="member">nrf_comp_ref_t</ref><sp/><sp/><sp/><sp/><sp/>reference;<sp/></highlight><highlight class="comment">/*!&lt;<sp/>COMP<sp/>reference<sp/>selection.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__comp__hal_1gaa940ec4e99c2581cdf5000e61d327a8e" kindref="member">nrf_comp_ext_ref_t</ref><sp/>external;<sp/><sp/></highlight><highlight class="comment">/*!&lt;<sp/>COMP<sp/>external<sp/>analog<sp/>reference<sp/>selection.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal">}<sp/><ref refid="structnrf__comp__ref__conf__t" kindref="compound">nrf_comp_ref_conf_t</ref>;</highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="239"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="240"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>enabling<sp/>the<sp/>COMP<sp/>peripheral.</highlight></codeline>
<codeline lineno="241"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="242"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="243"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__comp__hal_1ga5c05f52c23dd3844511462c680a4417c" kindref="member">nrf_comp_enable</ref>(NRF_COMP_Type<sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="246"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="247"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>disabling<sp/>the<sp/>COMP<sp/>peripheral.</highlight></codeline>
<codeline lineno="248"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="249"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="250"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__comp__hal_1gac09cea25dd0a0d2669ae72bfa8f3ccb8" kindref="member">nrf_comp_disable</ref>(NRF_COMP_Type<sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="253"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="254"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>checking<sp/>if<sp/>the<sp/>COMP<sp/>peripheral<sp/>is<sp/>enabled.</highlight></codeline>
<codeline lineno="255"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="256"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="257"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="258"><highlight class="comment"><sp/>*<sp/>@retval<sp/>true<sp/><sp/>The<sp/>COMP<sp/>peripheral<sp/>is<sp/>enabled.</highlight></codeline>
<codeline lineno="259"><highlight class="comment"><sp/>*<sp/>@retval<sp/>false<sp/>The<sp/>COMP<sp/>peripheral<sp/>is<sp/>not<sp/>enabled.</highlight></codeline>
<codeline lineno="260"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrf__comp__hal_1ga5f7499ef1f0b88f8215c720387821279" kindref="member">nrf_comp_enable_check</ref>(NRF_COMP_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="263"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="264"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>the<sp/>reference<sp/>source.</highlight></codeline>
<codeline lineno="265"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="266"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="267"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>reference<sp/>COMP<sp/>reference<sp/>selection.</highlight></codeline>
<codeline lineno="268"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__comp__hal_1ga8097d4f1c755b65c111fd3d43456e0d0" kindref="member">nrf_comp_ref_set</ref>(NRF_COMP_Type<sp/>*<sp/>p_reg,<sp/><ref refid="group__nrf__comp__hal_1ga2cb45b32907064f8b15ae54d91ca7470" kindref="member">nrf_comp_ref_t</ref><sp/>reference);</highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="271"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="272"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>the<sp/>external<sp/>analog<sp/>reference<sp/>source.</highlight></codeline>
<codeline lineno="273"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="274"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="275"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>ext_ref<sp/>COMP<sp/>external<sp/>analog<sp/>reference<sp/>selection.</highlight></codeline>
<codeline lineno="276"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__comp__hal_1gaf2c4ded08a41d04b0b739b2053d72975" kindref="member">nrf_comp_ext_ref_set</ref>(NRF_COMP_Type<sp/>*<sp/>p_reg,<sp/><ref refid="group__nrf__comp__hal_1gaa940ec4e99c2581cdf5000e61d327a8e" kindref="member">nrf_comp_ext_ref_t</ref><sp/>ext_ref);</highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="279"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="280"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>threshold<sp/>voltages.</highlight></codeline>
<codeline lineno="281"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="282"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="283"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>threshold<sp/>COMP<sp/>VDOWN<sp/>and<sp/>VUP<sp/>thresholds.</highlight></codeline>
<codeline lineno="284"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__comp__hal_1ga500c5806660982e218ce77192d364757" kindref="member">nrf_comp_th_set</ref>(NRF_COMP_Type<sp/>*<sp/>p_reg,<sp/><ref refid="structnrf__comp__th__t" kindref="compound">nrf_comp_th_t</ref><sp/>threshold);</highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="287"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="288"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>the<sp/>main<sp/>mode.</highlight></codeline>
<codeline lineno="289"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="290"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="291"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>main_mode<sp/>COMP<sp/>main<sp/>operation<sp/>mode.</highlight></codeline>
<codeline lineno="292"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__comp__hal_1ga2ceb27145e46165c2bf722120ced720d" kindref="member">nrf_comp_main_mode_set</ref>(NRF_COMP_Type<sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__comp__hal_1ga501c4187cafe59f88ed8e98c7de2bfe6" kindref="member">nrf_comp_main_mode_t</ref><sp/>main_mode);</highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="296"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="297"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>the<sp/>speed<sp/>mode.</highlight></codeline>
<codeline lineno="298"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="299"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/><sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="300"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>speed_mode<sp/>COMP<sp/>speed<sp/>and<sp/>power<sp/>mode.</highlight></codeline>
<codeline lineno="301"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__comp__hal_1ga8117597efb3ea6d5ee41aaa1a230332d" kindref="member">nrf_comp_speed_mode_set</ref>(NRF_COMP_Type<sp/>*<sp/><sp/><sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__comp__hal_1gab73023f0b42ab46c65312f9ea9419e05" kindref="member">nrf_comp_sp_mode_t</ref><sp/>speed_mode);</highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="305"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="306"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>the<sp/>hysteresis.</highlight></codeline>
<codeline lineno="307"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="308"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="309"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>hyst<sp/><sp/>COMP<sp/>comparator<sp/>hysteresis.</highlight></codeline>
<codeline lineno="310"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__comp__hal_1gabd2c44d11c6c3e9e34ab8da3f3a2441d" kindref="member">nrf_comp_hysteresis_set</ref>(NRF_COMP_Type<sp/>*<sp/>p_reg,<sp/><ref refid="group__nrf__comp__hal_1gaad279eda81a34c4cc4534f2603ab2717" kindref="member">nrf_comp_hyst_t</ref><sp/>hyst);</highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_COMP_HAS_ISOURCE</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="314"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="315"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>the<sp/>current<sp/>source<sp/>on<sp/>the<sp/>analog<sp/>input.</highlight></codeline>
<codeline lineno="316"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="317"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="318"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>isource<sp/>COMP<sp/>current<sp/>source<sp/>selection<sp/>on<sp/>analog<sp/>input.</highlight></codeline>
<codeline lineno="319"><highlight class="comment"><sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__comp__hal_1ga6b3db242bd32551bc5460bec2c39f727" kindref="member">nrf_comp_isource_set</ref>(NRF_COMP_Type<sp/>*<sp/>p_reg,<sp/><ref refid="group__nrf__comp__hal_1gaee0ea1e7c432520ed0ff1fb8ed3e9586" kindref="member">nrf_isource_t</ref><sp/>isource);</highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="323"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="324"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>selecting<sp/>the<sp/>active<sp/>input<sp/>of<sp/>the<sp/>COMP.</highlight></codeline>
<codeline lineno="325"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="326"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="327"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>input<sp/>Input<sp/>to<sp/>be<sp/>selected.</highlight></codeline>
<codeline lineno="328"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__comp__hal_1ga95a7abbc3a0213fc6532300c57200010" kindref="member">nrf_comp_input_select</ref>(NRF_COMP_Type<sp/>*<sp/>p_reg,<sp/><ref refid="group__nrf__comp__hal_1ga4fb8152c87746c98fa6952a30ef7ad01" kindref="member">nrf_comp_input_t</ref><sp/>input);</highlight></codeline>
<codeline lineno="330"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="331"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="332"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>the<sp/>last<sp/>COMP<sp/>compare<sp/>result.</highlight></codeline>
<codeline lineno="333"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="334"><highlight class="comment"><sp/>*<sp/>@note<sp/>If<sp/>VIN+<sp/>==<sp/>VIN-,<sp/>the<sp/>return<sp/>value<sp/>depends<sp/>on<sp/>the<sp/>previous<sp/>result.</highlight></codeline>
<codeline lineno="335"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="336"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="337"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="338"><highlight class="comment"><sp/>*<sp/>@return<sp/>The<sp/>last<sp/>compare<sp/>result.<sp/>If<sp/>0,<sp/>then<sp/>VIN+<sp/>&lt;<sp/>VIN-.<sp/>If<sp/>1,<sp/>then<sp/>VIN+<sp/>&gt;<sp/>VIN-.</highlight></codeline>
<codeline lineno="339"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__comp__hal_1ga7c28874b0f93f96651b711a982fc8936" kindref="member">nrf_comp_result_get</ref>(NRF_COMP_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="341"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="342"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="343"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>enabling<sp/>interrupts<sp/>from<sp/>COMP.</highlight></codeline>
<codeline lineno="344"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="345"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="346"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>mask<sp/><sp/>Mask<sp/>of<sp/>interrupts<sp/>to<sp/>be<sp/>enabled.</highlight></codeline>
<codeline lineno="347"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Use<sp/>@ref<sp/>nrf_comp_int_mask_t<sp/>values<sp/>for<sp/>bit<sp/>masking.</highlight></codeline>
<codeline lineno="348"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="349"><highlight class="comment"><sp/>*<sp/>@sa<sp/>nrf_comp_int_enable_check</highlight></codeline>
<codeline lineno="350"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__comp__hal_1ga4b55bc056e76b423b75e62a2a5b032be" kindref="member">nrf_comp_int_enable</ref>(NRF_COMP_Type<sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>mask);</highlight></codeline>
<codeline lineno="352"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="353"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="354"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>disabling<sp/>interrupts<sp/>from<sp/>COMP.</highlight></codeline>
<codeline lineno="355"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="356"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="357"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>mask<sp/><sp/>Mask<sp/>of<sp/>interrupts<sp/>to<sp/>be<sp/>disabled.</highlight></codeline>
<codeline lineno="358"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Use<sp/>@ref<sp/>nrf_comp_int_mask_t<sp/>values<sp/>for<sp/>bit<sp/>masking.</highlight></codeline>
<codeline lineno="359"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="360"><highlight class="comment"><sp/>*<sp/>@sa<sp/>nrf_comp_int_enable_check</highlight></codeline>
<codeline lineno="361"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__comp__hal_1ga3684f8b0cc17571c7c112f538b262311" kindref="member">nrf_comp_int_disable</ref>(NRF_COMP_Type<sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>mask);</highlight></codeline>
<codeline lineno="363"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="364"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="365"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>checking<sp/>if<sp/>the<sp/>specified<sp/>interrupts<sp/>are<sp/>enabled.</highlight></codeline>
<codeline lineno="366"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="367"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="368"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>mask<sp/><sp/>Mask<sp/>of<sp/>interrupts<sp/>to<sp/>be<sp/>checked.</highlight></codeline>
<codeline lineno="369"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Use<sp/>@ref<sp/>nrf_comp_int_mask_t<sp/>values<sp/>for<sp/>bit<sp/>masking.</highlight></codeline>
<codeline lineno="370"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="371"><highlight class="comment"><sp/>*<sp/>@return<sp/>Mask<sp/>of<sp/>enabled<sp/>interrupts.</highlight></codeline>
<codeline lineno="372"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__comp__hal_1ga8779fcf92170dc1f02ea74c091f7b6ef" kindref="member">nrf_comp_int_enable_check</ref>(NRF_COMP_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>mask);</highlight></codeline>
<codeline lineno="374"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="375"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="376"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>the<sp/>address<sp/>of<sp/>the<sp/>specified<sp/>COMP<sp/>task<sp/>register.</highlight></codeline>
<codeline lineno="377"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="378"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="379"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>task<sp/><sp/>COMP<sp/>task.</highlight></codeline>
<codeline lineno="380"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="381"><highlight class="comment"><sp/>*<sp/>@return<sp/>Address<sp/>of<sp/>the<sp/>specified<sp/>COMP<sp/>task.</highlight></codeline>
<codeline lineno="382"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__comp__hal_1gafa255ea77d914b7abf54edbac9375f7a" kindref="member">nrf_comp_task_address_get</ref>(NRF_COMP_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__comp__hal_1ga0a587fcb0646329cb6d9700f555787f8" kindref="member">nrf_comp_task_t</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>task);</highlight></codeline>
<codeline lineno="385"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="386"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="387"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>the<sp/>address<sp/>of<sp/>the<sp/>specified<sp/>COMP<sp/>event<sp/>register.</highlight></codeline>
<codeline lineno="388"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="389"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="390"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>event<sp/>COMP<sp/>event.</highlight></codeline>
<codeline lineno="391"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="392"><highlight class="comment"><sp/>*<sp/>@return<sp/>Address<sp/>of<sp/>the<sp/>specified<sp/>COMP<sp/>event.</highlight></codeline>
<codeline lineno="393"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__comp__hal_1gacd266bda717882290555993230244d60" kindref="member">nrf_comp_event_address_get</ref>(NRF_COMP_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__comp__hal_1ga17ffea3865f2db28127bae9411bce036" kindref="member">nrf_comp_event_t</ref><sp/><sp/><sp/><sp/><sp/><sp/>event);</highlight></codeline>
<codeline lineno="396"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="397"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="398"><highlight class="comment"><sp/>*<sp/>@brief<sp/><sp/>Function<sp/>for<sp/>setting<sp/>COMP<sp/>shortcuts.</highlight></codeline>
<codeline lineno="399"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="400"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="401"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>mask<sp/><sp/>Mask<sp/>of<sp/>shortcuts.</highlight></codeline>
<codeline lineno="402"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__comp__hal_1ga5e27ebf4b606f2cfe394df53a611c20e" kindref="member">nrf_comp_shorts_enable</ref>(NRF_COMP_Type<sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>mask);</highlight></codeline>
<codeline lineno="404"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="405"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="406"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>clearing<sp/>COMP<sp/>shortcuts<sp/>by<sp/>mask.</highlight></codeline>
<codeline lineno="407"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="408"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="409"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>mask<sp/><sp/>Mask<sp/>of<sp/>shortcuts.</highlight></codeline>
<codeline lineno="410"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="411"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__comp__hal_1ga940bea65f2f301b560de50f7982c220a" kindref="member">nrf_comp_shorts_disable</ref>(NRF_COMP_Type<sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>mask);</highlight></codeline>
<codeline lineno="412"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="413"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="414"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>the<sp/>specified<sp/>COMP<sp/>task.</highlight></codeline>
<codeline lineno="415"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="416"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="417"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>task<sp/><sp/>Task<sp/>to<sp/>be<sp/>activated.</highlight></codeline>
<codeline lineno="418"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="419"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__comp__hal_1ga44bf51b858aa721c9259de645facadc6" kindref="member">nrf_comp_task_trigger</ref>(NRF_COMP_Type<sp/>*<sp/>p_reg,<sp/><ref refid="group__nrf__comp__hal_1ga0a587fcb0646329cb6d9700f555787f8" kindref="member">nrf_comp_task_t</ref><sp/>task);</highlight></codeline>
<codeline lineno="420"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="421"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="422"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>clearing<sp/>the<sp/>specified<sp/>COMP<sp/>event.</highlight></codeline>
<codeline lineno="423"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="424"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="425"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>event<sp/>COMP<sp/>event<sp/>to<sp/>be<sp/>cleared.</highlight></codeline>
<codeline lineno="426"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="427"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__comp__hal_1ga4cddceff06a97a15d763b963059b20a8" kindref="member">nrf_comp_event_clear</ref>(NRF_COMP_Type<sp/>*<sp/>p_reg,<sp/><ref refid="group__nrf__comp__hal_1ga17ffea3865f2db28127bae9411bce036" kindref="member">nrf_comp_event_t</ref><sp/>event);</highlight></codeline>
<codeline lineno="428"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="429"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="430"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>retrieving<sp/>the<sp/>state<sp/>of<sp/>the<sp/>COMP<sp/>event.</highlight></codeline>
<codeline lineno="431"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="432"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="433"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>event<sp/>Event<sp/>to<sp/>be<sp/>checked.</highlight></codeline>
<codeline lineno="434"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="435"><highlight class="comment"><sp/>*<sp/>@retval<sp/>true<sp/><sp/>The<sp/>event<sp/>has<sp/>been<sp/>generated.</highlight></codeline>
<codeline lineno="436"><highlight class="comment"><sp/>*<sp/>@retval<sp/>false<sp/>The<sp/>event<sp/>has<sp/>not<sp/>been<sp/>generated.</highlight></codeline>
<codeline lineno="437"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="438"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrf__comp__hal_1gac382518feeb776a5e52c3e82b1d3f43e" kindref="member">nrf_comp_event_check</ref>(NRF_COMP_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,<sp/><ref refid="group__nrf__comp__hal_1ga17ffea3865f2db28127bae9411bce036" kindref="member">nrf_comp_event_t</ref><sp/>event);</highlight></codeline>
<codeline lineno="439"><highlight class="normal"></highlight></codeline>
<codeline lineno="440"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>NRF_DECLARE_ONLY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="441"><highlight class="normal"></highlight></codeline>
<codeline lineno="442"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__comp__hal_1ga5c05f52c23dd3844511462c680a4417c" kindref="member">nrf_comp_enable</ref>(NRF_COMP_Type<sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="443"><highlight class="normal">{</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;ENABLE<sp/>=<sp/>(COMP_ENABLE_ENABLE_Enabled<sp/>&lt;&lt;<sp/>COMP_ENABLE_ENABLE_Pos);</highlight></codeline>
<codeline lineno="445"><highlight class="normal">}</highlight></codeline>
<codeline lineno="446"><highlight class="normal"></highlight></codeline>
<codeline lineno="447"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__comp__hal_1gac09cea25dd0a0d2669ae72bfa8f3ccb8" kindref="member">nrf_comp_disable</ref>(NRF_COMP_Type<sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="448"><highlight class="normal">{</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;ENABLE<sp/>=<sp/>(COMP_ENABLE_ENABLE_Disabled<sp/>&lt;&lt;<sp/>COMP_ENABLE_ENABLE_Pos);</highlight></codeline>
<codeline lineno="450"><highlight class="normal">}</highlight></codeline>
<codeline lineno="451"><highlight class="normal"></highlight></codeline>
<codeline lineno="452"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrf__comp__hal_1ga5f7499ef1f0b88f8215c720387821279" kindref="member">nrf_comp_enable_check</ref>(NRF_COMP_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="453"><highlight class="normal">{</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((p_reg-&gt;ENABLE)<sp/>&amp;<sp/>COMP_ENABLE_ENABLE_Enabled);</highlight></codeline>
<codeline lineno="455"><highlight class="normal">}</highlight></codeline>
<codeline lineno="456"><highlight class="normal"></highlight></codeline>
<codeline lineno="457"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__comp__hal_1ga8097d4f1c755b65c111fd3d43456e0d0" kindref="member">nrf_comp_ref_set</ref>(NRF_COMP_Type<sp/>*<sp/>p_reg,<sp/><ref refid="group__nrf__comp__hal_1ga2cb45b32907064f8b15ae54d91ca7470" kindref="member">nrf_comp_ref_t</ref><sp/>reference)</highlight></codeline>
<codeline lineno="458"><highlight class="normal">{</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;REFSEL<sp/>=<sp/>(reference<sp/>&lt;&lt;<sp/>COMP_REFSEL_REFSEL_Pos);</highlight></codeline>
<codeline lineno="460"><highlight class="normal">}</highlight></codeline>
<codeline lineno="461"><highlight class="normal"></highlight></codeline>
<codeline lineno="462"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__comp__hal_1gaf2c4ded08a41d04b0b739b2053d72975" kindref="member">nrf_comp_ext_ref_set</ref>(NRF_COMP_Type<sp/>*<sp/>p_reg,<sp/><ref refid="group__nrf__comp__hal_1gaa940ec4e99c2581cdf5000e61d327a8e" kindref="member">nrf_comp_ext_ref_t</ref><sp/>ext_ref)</highlight></codeline>
<codeline lineno="463"><highlight class="normal">{</highlight></codeline>
<codeline lineno="464"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_COMP_HAS_AIN_AS_PIN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;EXTREFSEL<sp/>=<sp/>(NRF_PIN_NUMBER_TO_PORT(ext_ref)<sp/>&lt;&lt;<sp/>COMP_EXTREFSEL_PORT_Pos)<sp/>|</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(NRF_PIN_NUMBER_TO_PIN(ext_ref)<sp/>&lt;&lt;<sp/>COMP_EXTREFSEL_PIN_Pos)<sp/>|</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(p_reg-&gt;EXTREFSEL<sp/>&amp;<sp/>~(COMP_EXTREFSEL_PORT_Msk<sp/>|<sp/>COMP_EXTREFSEL_PIN_Msk));</highlight></codeline>
<codeline lineno="468"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;EXTREFSEL<sp/>=<sp/>((uint32_t)ext_ref<sp/>&lt;&lt;<sp/>COMP_EXTREFSEL_EXTREFSEL_Pos)<sp/>|</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(p_reg-&gt;EXTREFSEL<sp/>&amp;<sp/>~COMP_EXTREFSEL_EXTREFSEL_Msk);</highlight></codeline>
<codeline lineno="471"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="472"><highlight class="normal">}</highlight></codeline>
<codeline lineno="473"><highlight class="normal"></highlight></codeline>
<codeline lineno="474"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__comp__hal_1ga500c5806660982e218ce77192d364757" kindref="member">nrf_comp_th_set</ref>(NRF_COMP_Type<sp/>*<sp/>p_reg,<sp/><ref refid="structnrf__comp__th__t" kindref="compound">nrf_comp_th_t</ref><sp/>threshold)</highlight></codeline>
<codeline lineno="475"><highlight class="normal">{</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;TH<sp/>=</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(((uint32_t)threshold.<ref refid="structnrf__comp__th__t_1aa1935eefda3fb23664bdc597880b62aa" kindref="member">th_down</ref><sp/>&lt;&lt;<sp/>COMP_TH_THDOWN_Pos)<sp/>&amp;<sp/>COMP_TH_THDOWN_Msk)<sp/>|</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(((uint32_t)threshold.<ref refid="structnrf__comp__th__t_1ab0a4626c8889883eb1bb50b1d1031f96" kindref="member">th_up</ref><sp/>&lt;&lt;<sp/>COMP_TH_THUP_Pos)<sp/>&amp;<sp/>COMP_TH_THUP_Msk);</highlight></codeline>
<codeline lineno="479"><highlight class="normal">}</highlight></codeline>
<codeline lineno="480"><highlight class="normal"></highlight></codeline>
<codeline lineno="481"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__comp__hal_1ga2ceb27145e46165c2bf722120ced720d" kindref="member">nrf_comp_main_mode_set</ref>(NRF_COMP_Type<sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__comp__hal_1ga501c4187cafe59f88ed8e98c7de2bfe6" kindref="member">nrf_comp_main_mode_t</ref><sp/>main_mode)</highlight></codeline>
<codeline lineno="483"><highlight class="normal">{</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;MODE<sp/>|=<sp/>(main_mode<sp/>&lt;&lt;<sp/>COMP_MODE_MAIN_Pos);</highlight></codeline>
<codeline lineno="485"><highlight class="normal">}</highlight></codeline>
<codeline lineno="486"><highlight class="normal"></highlight></codeline>
<codeline lineno="487"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__comp__hal_1ga8117597efb3ea6d5ee41aaa1a230332d" kindref="member">nrf_comp_speed_mode_set</ref>(NRF_COMP_Type<sp/>*<sp/><sp/><sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__comp__hal_1gab73023f0b42ab46c65312f9ea9419e05" kindref="member">nrf_comp_sp_mode_t</ref><sp/>speed_mode)</highlight></codeline>
<codeline lineno="489"><highlight class="normal">{</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;MODE<sp/>|=<sp/>(speed_mode<sp/>&lt;&lt;<sp/>COMP_MODE_SP_Pos);</highlight></codeline>
<codeline lineno="491"><highlight class="normal">}</highlight></codeline>
<codeline lineno="492"><highlight class="normal"></highlight></codeline>
<codeline lineno="493"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__comp__hal_1gabd2c44d11c6c3e9e34ab8da3f3a2441d" kindref="member">nrf_comp_hysteresis_set</ref>(NRF_COMP_Type<sp/>*<sp/>p_reg,<sp/><ref refid="group__nrf__comp__hal_1gaad279eda81a34c4cc4534f2603ab2717" kindref="member">nrf_comp_hyst_t</ref><sp/>hyst)</highlight></codeline>
<codeline lineno="494"><highlight class="normal">{</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;HYST<sp/>=<sp/>(hyst<sp/>&lt;&lt;<sp/>COMP_HYST_HYST_Pos)<sp/>&amp;<sp/>COMP_HYST_HYST_Msk;</highlight></codeline>
<codeline lineno="496"><highlight class="normal">}</highlight></codeline>
<codeline lineno="497"><highlight class="normal"></highlight></codeline>
<codeline lineno="498"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined<sp/>(COMP_ISOURCE_ISOURCE_Msk)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="499"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__comp__hal_1ga6b3db242bd32551bc5460bec2c39f727" kindref="member">nrf_comp_isource_set</ref>(NRF_COMP_Type<sp/>*<sp/>p_reg,<sp/><ref refid="group__nrf__comp__hal_1gaee0ea1e7c432520ed0ff1fb8ed3e9586" kindref="member">nrf_isource_t</ref><sp/>isource)</highlight></codeline>
<codeline lineno="500"><highlight class="normal">{</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;ISOURCE<sp/>=<sp/>(isource<sp/>&lt;&lt;<sp/>COMP_ISOURCE_ISOURCE_Pos)<sp/>&amp;<sp/>COMP_ISOURCE_ISOURCE_Msk;</highlight></codeline>
<codeline lineno="502"><highlight class="normal">}</highlight></codeline>
<codeline lineno="503"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="504"><highlight class="normal"></highlight></codeline>
<codeline lineno="505"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__comp__hal_1ga95a7abbc3a0213fc6532300c57200010" kindref="member">nrf_comp_input_select</ref>(NRF_COMP_Type<sp/>*<sp/>p_reg,<sp/><ref refid="group__nrf__comp__hal_1ga4fb8152c87746c98fa6952a30ef7ad01" kindref="member">nrf_comp_input_t</ref><sp/>input)</highlight></codeline>
<codeline lineno="506"><highlight class="normal">{</highlight></codeline>
<codeline lineno="507"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_COMP_HAS_AIN_AS_PIN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;PSEL<sp/>=<sp/>(NRF_PIN_NUMBER_TO_PORT(input)<sp/>&lt;&lt;<sp/>COMP_PSEL_PORT_Pos)<sp/>|</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(NRF_PIN_NUMBER_TO_PIN(input)<sp/>&lt;&lt;<sp/>COMP_PSEL_PIN_Pos)<sp/>|</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(p_reg-&gt;PSEL<sp/>&amp;<sp/>~(COMP_PSEL_PORT_Msk<sp/>|<sp/>COMP_PSEL_PIN_Msk));</highlight></codeline>
<codeline lineno="511"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;PSEL<sp/>=<sp/>((uint32_t)input<sp/>&lt;&lt;<sp/>COMP_PSEL_PSEL_Pos)<sp/>|<sp/>(p_reg-&gt;PSEL<sp/>&amp;<sp/>~COMP_PSEL_PSEL_Msk);</highlight></codeline>
<codeline lineno="513"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="514"><highlight class="normal">}</highlight></codeline>
<codeline lineno="515"><highlight class="normal"></highlight></codeline>
<codeline lineno="516"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__comp__hal_1ga7c28874b0f93f96651b711a982fc8936" kindref="member">nrf_comp_result_get</ref>(NRF_COMP_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="517"><highlight class="normal">{</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(uint32_t)p_reg-&gt;RESULT;</highlight></codeline>
<codeline lineno="519"><highlight class="normal">}</highlight></codeline>
<codeline lineno="520"><highlight class="normal"></highlight></codeline>
<codeline lineno="521"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__comp__hal_1ga4b55bc056e76b423b75e62a2a5b032be" kindref="member">nrf_comp_int_enable</ref>(NRF_COMP_Type<sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>mask)</highlight></codeline>
<codeline lineno="522"><highlight class="normal">{</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;INTENSET<sp/>=<sp/>mask;</highlight></codeline>
<codeline lineno="524"><highlight class="normal">}</highlight></codeline>
<codeline lineno="525"><highlight class="normal"></highlight></codeline>
<codeline lineno="526"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__comp__hal_1ga3684f8b0cc17571c7c112f538b262311" kindref="member">nrf_comp_int_disable</ref>(NRF_COMP_Type<sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>mask)</highlight></codeline>
<codeline lineno="527"><highlight class="normal">{</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;INTENCLR<sp/>=<sp/>mask;</highlight></codeline>
<codeline lineno="529"><highlight class="normal">}</highlight></codeline>
<codeline lineno="530"><highlight class="normal"></highlight></codeline>
<codeline lineno="531"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__comp__hal_1ga8779fcf92170dc1f02ea74c091f7b6ef" kindref="member">nrf_comp_int_enable_check</ref>(NRF_COMP_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>mask)</highlight></codeline>
<codeline lineno="532"><highlight class="normal">{</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p_reg-&gt;INTENSET<sp/>&amp;<sp/>mask;<sp/></highlight><highlight class="comment">//<sp/>When<sp/>read,<sp/>this<sp/>register<sp/>returns<sp/>the<sp/>value<sp/>of<sp/>INTEN.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="534"><highlight class="normal">}</highlight></codeline>
<codeline lineno="535"><highlight class="normal"></highlight></codeline>
<codeline lineno="536"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__comp__hal_1gafa255ea77d914b7abf54edbac9375f7a" kindref="member">nrf_comp_task_address_get</ref>(NRF_COMP_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__comp__hal_1ga0a587fcb0646329cb6d9700f555787f8" kindref="member">nrf_comp_task_t</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>task)</highlight></codeline>
<codeline lineno="538"><highlight class="normal">{</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>nrf_task_event_address_get(p_reg,<sp/>task);</highlight></codeline>
<codeline lineno="540"><highlight class="normal">}</highlight></codeline>
<codeline lineno="541"><highlight class="normal"></highlight></codeline>
<codeline lineno="542"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__comp__hal_1gacd266bda717882290555993230244d60" kindref="member">nrf_comp_event_address_get</ref>(NRF_COMP_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__comp__hal_1ga17ffea3865f2db28127bae9411bce036" kindref="member">nrf_comp_event_t</ref><sp/><sp/><sp/><sp/><sp/><sp/>event)</highlight></codeline>
<codeline lineno="544"><highlight class="normal">{</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>nrf_task_event_address_get(p_reg,<sp/>event);</highlight></codeline>
<codeline lineno="546"><highlight class="normal">}</highlight></codeline>
<codeline lineno="547"><highlight class="normal"></highlight></codeline>
<codeline lineno="548"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__comp__hal_1ga5e27ebf4b606f2cfe394df53a611c20e" kindref="member">nrf_comp_shorts_enable</ref>(NRF_COMP_Type<sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>mask)</highlight></codeline>
<codeline lineno="549"><highlight class="normal">{</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;SHORTS<sp/>|=<sp/>mask;</highlight></codeline>
<codeline lineno="551"><highlight class="normal">}</highlight></codeline>
<codeline lineno="552"><highlight class="normal"></highlight></codeline>
<codeline lineno="553"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__comp__hal_1ga940bea65f2f301b560de50f7982c220a" kindref="member">nrf_comp_shorts_disable</ref>(NRF_COMP_Type<sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>mask)</highlight></codeline>
<codeline lineno="554"><highlight class="normal">{</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;SHORTS<sp/>&amp;=<sp/>~mask;</highlight></codeline>
<codeline lineno="556"><highlight class="normal">}</highlight></codeline>
<codeline lineno="557"><highlight class="normal"></highlight></codeline>
<codeline lineno="558"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__comp__hal_1ga44bf51b858aa721c9259de645facadc6" kindref="member">nrf_comp_task_trigger</ref>(NRF_COMP_Type<sp/>*<sp/>p_reg,<sp/><ref refid="group__nrf__comp__hal_1ga0a587fcb0646329cb6d9700f555787f8" kindref="member">nrf_comp_task_t</ref><sp/>task)</highlight></codeline>
<codeline lineno="559"><highlight class="normal">{</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/>*(<sp/>(</highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint32_t<sp/>*)(<sp/>(uint8_t<sp/>*)p_reg<sp/>+<sp/>(uint32_t)task)<sp/>)<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="561"><highlight class="normal">}</highlight></codeline>
<codeline lineno="562"><highlight class="normal"></highlight></codeline>
<codeline lineno="563"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__comp__hal_1ga4cddceff06a97a15d763b963059b20a8" kindref="member">nrf_comp_event_clear</ref>(NRF_COMP_Type<sp/>*<sp/>p_reg,<sp/><ref refid="group__nrf__comp__hal_1ga17ffea3865f2db28127bae9411bce036" kindref="member">nrf_comp_event_t</ref><sp/>event)</highlight></codeline>
<codeline lineno="564"><highlight class="normal">{</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/>*(<sp/>(</highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint32_t<sp/>*)(<sp/>(uint8_t<sp/>*)p_reg<sp/>+<sp/>(uint32_t)event)<sp/>)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/>nrf_event_readback((uint8_t<sp/>*)p_reg<sp/>+<sp/>(uint32_t)event);</highlight></codeline>
<codeline lineno="567"><highlight class="normal">}</highlight></codeline>
<codeline lineno="568"><highlight class="normal"></highlight></codeline>
<codeline lineno="569"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrf__comp__hal_1gac382518feeb776a5e52c3e82b1d3f43e" kindref="member">nrf_comp_event_check</ref>(NRF_COMP_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,<sp/><ref refid="group__nrf__comp__hal_1ga17ffea3865f2db28127bae9411bce036" kindref="member">nrf_comp_event_t</ref><sp/>event)</highlight></codeline>
<codeline lineno="570"><highlight class="normal">{</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>nrf_event_check(p_reg,<sp/>event);</highlight></codeline>
<codeline lineno="572"><highlight class="normal">}</highlight></codeline>
<codeline lineno="573"><highlight class="normal"></highlight></codeline>
<codeline lineno="574"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRF_DECLARE_ONLY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="575"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="576"><highlight class="comment">/**<sp/>@}<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="577"><highlight class="normal"></highlight></codeline>
<codeline lineno="578"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="579"><highlight class="normal">}</highlight></codeline>
<codeline lineno="580"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="581"><highlight class="normal"></highlight></codeline>
<codeline lineno="582"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRF_COMP_H_</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="hal/nrf_comp.h"/>
  </compounddef>
</doxygen>
