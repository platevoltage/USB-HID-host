<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="group__nrf__spu__hal" kind="group">
    <compoundname>nrf_spu_hal</compoundname>
    <title>SPU HAL</title>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="group__nrf__spu__hal_1gaca772df92f8018db60b64684673403a6" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_spu_event_t</name>
        <enumvalue id="group__nrf__spu__hal_1ggaca772df92f8018db60b64684673403a6aaa31caa7b50e4970d7cda08812af19be" prot="public">
          <name>NRF_SPU_EVENT_RAMACCERR</name>
          <initializer>= offsetof(NRF_SPU_Type, EVENTS_RAMACCERR)</initializer>
          <briefdescription>
<para>A security violation has been detected for the RAM memory space. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__spu__hal_1ggaca772df92f8018db60b64684673403a6ac6ad3b7f3e47c8a8582db960471b169f" prot="public">
          <name>NRF_SPU_EVENT_FLASHACCERR</name>
          <initializer>= offsetof(NRF_SPU_Type, EVENTS_FLASHACCERR)</initializer>
          <briefdescription>
<para>A security violation has been detected for the Flash memory space. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__spu__hal_1ggaca772df92f8018db60b64684673403a6ac55127f75f98e0be611c2009ab883052" prot="public">
          <name>NRF_SPU_EVENT_PERIPHACCERR</name>
          <initializer>= offsetof(NRF_SPU_Type, EVENTS_PERIPHACCERR)</initializer>
          <briefdescription>
<para>A security violation has been detected on one or several peripherals. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>SPU events. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_spu.h" line="193" column="1" bodyfile="hal/nrf_spu.h" bodystart="194" bodyend="200"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__spu__hal_1ga44a6e9c6511f38d0246e967076179519" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_spu_int_mask_t</name>
        <enumvalue id="group__nrf__spu__hal_1gga44a6e9c6511f38d0246e967076179519a8dc6bb66508e4cf4f32b0801d70de165" prot="public">
          <name>NRF_SPU_INT_RAMACCERR_MASK</name>
          <initializer>= SPU_INTENSET_RAMACCERR_Msk</initializer>
          <briefdescription>
<para>Interrupt on RAMACCERR event. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__spu__hal_1gga44a6e9c6511f38d0246e967076179519a236c5f3afb426371c0105377e91b715d" prot="public">
          <name>NRF_SPU_INT_FLASHACCERR_MASK</name>
          <initializer>= SPU_INTENSET_FLASHACCERR_Msk</initializer>
          <briefdescription>
<para>Interrupt on FLASHACCERR event. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__spu__hal_1gga44a6e9c6511f38d0246e967076179519a7ee08e69378f053e63a0727830b919a0" prot="public">
          <name>NRF_SPU_INT_PERIPHACCERR_MASK</name>
          <initializer>= SPU_INTENSET_PERIPHACCERR_Msk</initializer>
          <briefdescription>
<para>Interrupt on PERIPHACCERR event. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>SPU interrupts. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_spu.h" line="203" column="1" bodyfile="hal/nrf_spu.h" bodystart="204" bodyend="210"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__spu__hal_1ga45f740567f5b83d2f7eca5a8d18cff94" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_spu_nsc_size_t</name>
        <enumvalue id="group__nrf__spu__hal_1gga45f740567f5b83d2f7eca5a8d18cff94a875353222524f16265c720a1f818f5de" prot="public">
          <name>NRF_SPU_NSC_SIZE_DISABLED</name>
          <initializer>= 0</initializer>
          <briefdescription>
<para>Not defined as a non-secure callable region. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__spu__hal_1gga45f740567f5b83d2f7eca5a8d18cff94a80ae19ec3a1c0ae36a0ccdd23cdbfb60" prot="public">
          <name>NRF_SPU_NSC_SIZE_32B</name>
          <initializer>= 1</initializer>
          <briefdescription>
<para>Non-Secure Callable region with a 32-byte size. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__spu__hal_1gga45f740567f5b83d2f7eca5a8d18cff94a28724cd813cd3df4cbe36a82527d5910" prot="public">
          <name>NRF_SPU_NSC_SIZE_64B</name>
          <initializer>= 2</initializer>
          <briefdescription>
<para>Non-Secure Callable region with a 64-byte size. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__spu__hal_1gga45f740567f5b83d2f7eca5a8d18cff94a43fc9e24300cf96a121f175311243623" prot="public">
          <name>NRF_SPU_NSC_SIZE_128B</name>
          <initializer>= 3</initializer>
          <briefdescription>
<para>Non-Secure Callable region with a 128-byte size. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__spu__hal_1gga45f740567f5b83d2f7eca5a8d18cff94ac7f5658740dab3ec33e973784548cfc5" prot="public">
          <name>NRF_SPU_NSC_SIZE_256B</name>
          <initializer>= 4</initializer>
          <briefdescription>
<para>Non-Secure Callable region with a 256-byte size. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__spu__hal_1gga45f740567f5b83d2f7eca5a8d18cff94a19bf4751cf0a17fa4a1176dbeeaa4542" prot="public">
          <name>NRF_SPU_NSC_SIZE_512B</name>
          <initializer>= 5</initializer>
          <briefdescription>
<para>Non-Secure Callable region with a 512-byte size. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__spu__hal_1gga45f740567f5b83d2f7eca5a8d18cff94a8e329246efb352f991937d3e8c1b1cd2" prot="public">
          <name>NRF_SPU_NSC_SIZE_1024B</name>
          <initializer>= 6</initializer>
          <briefdescription>
<para>Non-Secure Callable region with a 1024-byte size. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__spu__hal_1gga45f740567f5b83d2f7eca5a8d18cff94a2c5720f5bc224b6bec52f781098465be" prot="public">
          <name>NRF_SPU_NSC_SIZE_2048B</name>
          <initializer>= 7</initializer>
          <briefdescription>
<para>Non-Secure Callable region with a 2048-byte size. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__spu__hal_1gga45f740567f5b83d2f7eca5a8d18cff94a9483e4865c487560d215570215d9ded7" prot="public">
          <name>NRF_SPU_NSC_SIZE_4096B</name>
          <initializer>= 8</initializer>
          <briefdescription>
<para>Non-Secure Callable region with a 4096-byte size. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>SPU Non-Secure Callable (NSC) region size. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_spu.h" line="214" column="1" bodyfile="hal/nrf_spu.h" bodystart="215" bodyend="225"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__spu__hal_1gafe75ab0f3d1142b83a6211f2143850fc" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_spu_mem_perm_t</name>
        <enumvalue id="group__nrf__spu__hal_1ggafe75ab0f3d1142b83a6211f2143850fca9a72b741820101251a417c3815bdeeeb" prot="public">
          <name>NRF_SPU_MEM_PERM_EXECUTE</name>
          <initializer>= SPU_FLASHREGION_PERM_EXECUTE_Msk</initializer>
          <briefdescription>
<para>Allow code execution from particular memory region. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__spu__hal_1ggafe75ab0f3d1142b83a6211f2143850fca3be27a79290460a4e969e3b7c760a069" prot="public">
          <name>NRF_SPU_MEM_PERM_WRITE</name>
          <initializer>= SPU_FLASHREGION_PERM_WRITE_Msk</initializer>
          <briefdescription>
<para>Allow write operation on particular memory region. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__spu__hal_1ggafe75ab0f3d1142b83a6211f2143850fca2df2bef69809b5249db4f8dc69746408" prot="public">
          <name>NRF_SPU_MEM_PERM_READ</name>
          <initializer>= SPU_FLASHREGION_PERM_READ_Msk</initializer>
          <briefdescription>
<para>Allow read operation from particular memory region. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>SPU memory region permissions. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_spu.h" line="228" column="1" bodyfile="hal/nrf_spu.h" bodystart="229" bodyend="233"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__spu__hal_1ga5cf6c98f4cb95c5c49bb1a6e85ed3023" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_spu_securemapping_t</name>
        <enumvalue id="group__nrf__spu__hal_1gga5cf6c98f4cb95c5c49bb1a6e85ed3023aacf88e38058393479e91304f58bca9ba" prot="public">
          <name>NRF_SPU_SECUREMAPPING_NONSECURE</name>
          <initializer>= SPU_PERIPH_PERM_SECUREMAPPING_NonSecure</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Peripheral is always accessible as non-secure. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__spu__hal_1gga5cf6c98f4cb95c5c49bb1a6e85ed3023a64328376a41d5dfc2986c75aed3fdc33" prot="public">
          <name>NRF_SPU_SECUREMAPPING_SECURE</name>
          <initializer>= SPU_PERIPH_PERM_SECUREMAPPING_Secure</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Peripheral is always accessible as secure. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__spu__hal_1gga5cf6c98f4cb95c5c49bb1a6e85ed3023acde7766ec08af43a7fef33c7a1a378ac" prot="public">
          <name>NRF_SPU_SECUREMAPPING_USERSELECTABLE</name>
          <initializer>= SPU_PERIPH_PERM_SECUREMAPPING_UserSelectable</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Non-secure or secure attribute for this peripheral is defined by the PERIPH[n].PERM register. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__spu__hal_1gga5cf6c98f4cb95c5c49bb1a6e85ed3023aa53394b582de83ae0aa9b62bf350bcdf" prot="public">
          <name>NRF_SPU_SECUREMAPPING_SPLIT</name>
          <initializer>= SPU_PERIPH_PERM_SECUREMAPPING_Split</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Peripheral implements the split security mechanism. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>SPU read capabilities for TrustZone Cortex-M secure attribute. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_spu.h" line="238" column="1" bodyfile="hal/nrf_spu.h" bodystart="239" bodyend="244"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__spu__hal_1ga9e1f6046a4de5110aeb69bc50134a033" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_spu_dma_t</name>
        <enumvalue id="group__nrf__spu__hal_1gga9e1f6046a4de5110aeb69bc50134a033a64d243877930bbda516bb6b88a298958" prot="public">
          <name>NRF_SPU_DMA_NODMA</name>
          <initializer>= SPU_PERIPH_PERM_DMA_NoDMA</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Peripheral has no DMA capability. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__spu__hal_1gga9e1f6046a4de5110aeb69bc50134a033a9603e10a06b00ec076748c69eef6cf8e" prot="public">
          <name>NRF_SPU_DMA_NOSEPARATEATTRIBUTE</name>
          <initializer>= SPU_PERIPH_PERM_DMA_NoSeparateAttribute</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>DMA transfers always have the same security attribute as assigned to the peripheral. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__spu__hal_1gga9e1f6046a4de5110aeb69bc50134a033a5ec1f8ef0e82c738e86839aa892b5817" prot="public">
          <name>NRF_SPU_DMA_SEPARATEATTRIBUTE</name>
          <initializer>= SPU_PERIPH_PERM_DMA_SeparateAttribute</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>DMA transfers can have a different security attribute than the one assigned to the peripheral. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>SPU DMA capabilities. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_spu.h" line="247" column="1" bodyfile="hal/nrf_spu.h" bodystart="248" bodyend="252"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__spu__hal_1ga96d287b38368a0b90d2d50fa507d5910" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_spu_feature_t</name>
        <enumvalue id="group__nrf__spu__hal_1gga96d287b38368a0b90d2d50fa507d5910a7baa958274d1e9c51a5241bfdbd0f3db" prot="public">
          <name>NRF_SPU_FEATURE_IPCT_CHANNEL</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>IPCT channel. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__spu__hal_1gga96d287b38368a0b90d2d50fa507d5910a9547ff64dcb63fcadccb8f7b4ca56873" prot="public">
          <name>NRF_SPU_FEATURE_IPCT_INTERRUPT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>IPCT interrupt. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__spu__hal_1gga96d287b38368a0b90d2d50fa507d5910a4a5ff0ecfc8eebd0efca979edbc6d089" prot="public">
          <name>NRF_SPU_FEATURE_DPPI_CHANNEL</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>DPPI channel. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__spu__hal_1gga96d287b38368a0b90d2d50fa507d5910a0a31d1189078fe62d9d8cb0aab52b0bd" prot="public">
          <name>NRF_SPU_FEATURE_DPPI_CHANNEL_GROUP</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>DPPI channel group. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__spu__hal_1gga96d287b38368a0b90d2d50fa507d5910aad0854b3dcc9365b7818296b429e9446" prot="public">
          <name>NRF_SPU_FEATURE_GPIOTE_CHANNEL</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>GPIOTE channel. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__spu__hal_1gga96d287b38368a0b90d2d50fa507d5910a26a0e7cb4a4f0dfd4b2cbf0c80b27b39" prot="public">
          <name>NRF_SPU_FEATURE_GPIOTE_INTERRUPT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>GPIOTE interrupt. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__spu__hal_1gga96d287b38368a0b90d2d50fa507d5910a3ef48fa94d14fc8a637bf047d4856bab" prot="public">
          <name>NRF_SPU_FEATURE_GPIO_PIN</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>GPIO pin. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__spu__hal_1gga96d287b38368a0b90d2d50fa507d5910ae13fcbd2355939fa7576fc5996b02644" prot="public">
          <name>NRF_SPU_FEATURE_GRTC_CC</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>GRTC compare channel. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__spu__hal_1gga96d287b38368a0b90d2d50fa507d5910a18f692cf4cdaaea2a3a2ead78fa0c48a" prot="public">
          <name>NRF_SPU_FEATURE_GRTC_SYSCOUNTER</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>GRTC SYSCOUNTER. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__spu__hal_1gga96d287b38368a0b90d2d50fa507d5910a7afd8ebd9f5bbfab544194c705f51c21" prot="public">
          <name>NRF_SPU_FEATURE_GRTC_INTERRUPT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>GRTC interrupt. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__spu__hal_1gga96d287b38368a0b90d2d50fa507d5910aa6b4d41fd7253e12e2cf9ebc416f0203" prot="public">
          <name>NRF_SPU_FEATURE_BELLS_BELL</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>BELLS bell pair. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__spu__hal_1gga96d287b38368a0b90d2d50fa507d5910a619f8775f5fcaa382154b4e7fb5f40a2" prot="public">
          <name>NRF_SPU_FEATURE_TDD</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>TDD. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__spu__hal_1gga96d287b38368a0b90d2d50fa507d5910ab64395a095c8b996c8eb6cfbde3678fa" prot="public">
          <name>NRF_SPU_FEATURE_MRAMC_WAITSTATES</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>MRAMC waitstates. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__spu__hal_1gga96d287b38368a0b90d2d50fa507d5910a2cd49f3916e7ebf525bd4e812b3b88b0" prot="public">
          <name>NRF_SPU_FEATURE_MRAMC_AUTODPOWERDOWN</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>MRAMC automatic power-down. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__spu__hal_1gga96d287b38368a0b90d2d50fa507d5910a88e95648761808813dcdb3ee3f180e81" prot="public">
          <name>NRF_SPU_FEATURE_MRAMC_READY</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>MRAMC ready. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>SPU features. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_spu.h" line="255" column="1" bodyfile="hal/nrf_spu.h" bodystart="256" bodyend="286"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__nrf__spu__hal_1ga68219a0729e52f40c0d7cbb9759b7a8b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_spu_event_clear</definition>
        <argsstring>(NRF_SPU_Type *p_reg, nrf_spu_event_t event)</argsstring>
        <name>nrf_spu_event_clear</name>
        <param>
          <type>NRF_SPU_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__spu__hal_1gaca772df92f8018db60b64684673403a6" kindref="member">nrf_spu_event_t</ref></type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>Function for clearing a specific SPU event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event to clear. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_spu.h" line="842" column="24" bodyfile="hal/nrf_spu.h" bodystart="842" bodyend="847" declfile="hal/nrf_spu.h" declline="296" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__spu__hal_1ga70ba554940e198a2c00862945deade16" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE bool</type>
        <definition>NRF_STATIC_INLINE bool nrf_spu_event_check</definition>
        <argsstring>(NRF_SPU_Type const *p_reg, nrf_spu_event_t event)</argsstring>
        <name>nrf_spu_event_check</name>
        <param>
          <type>NRF_SPU_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__spu__hal_1gaca772df92f8018db60b64684673403a6" kindref="member">nrf_spu_event_t</ref></type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>Function for retrieving the state of the SPU event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event to be checked.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>The event has been generated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>The event has not been generated. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_spu.h" line="849" column="24" bodyfile="hal/nrf_spu.h" bodystart="849" bodyend="853" declfile="hal/nrf_spu.h" declline="308" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__spu__hal_1gad978dc17a54c14ead43c2fa1671c66b4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_spu_int_enable</definition>
        <argsstring>(NRF_SPU_Type *p_reg, uint32_t mask)</argsstring>
        <name>nrf_spu_int_enable</name>
        <param>
          <type>NRF_SPU_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Function for enabling specified interrupts. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of interrupts to be enabled. Use <ref refid="group__nrf__spu__hal_1ga44a6e9c6511f38d0246e967076179519" kindref="member">nrf_spu_int_mask_t</ref> values for bit masking. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_spu.h" line="855" column="24" bodyfile="hal/nrf_spu.h" bodystart="855" bodyend="859" declfile="hal/nrf_spu.h" declline="318" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__spu__hal_1ga068fbe3a30786954e8ca216c0a8a5e53" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_spu_int_disable</definition>
        <argsstring>(NRF_SPU_Type *p_reg, uint32_t mask)</argsstring>
        <name>nrf_spu_int_disable</name>
        <param>
          <type>NRF_SPU_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Function for disabling specified interrupts. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of interrupts to be disabled. Use <ref refid="group__nrf__spu__hal_1ga44a6e9c6511f38d0246e967076179519" kindref="member">nrf_spu_int_mask_t</ref> values for bit masking. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_spu.h" line="861" column="24" bodyfile="hal/nrf_spu.h" bodystart="861" bodyend="865" declfile="hal/nrf_spu.h" declline="328" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__spu__hal_1ga1dc0a504e03ed6f38f9c4a5c364b1715" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_spu_int_enable_check</definition>
        <argsstring>(NRF_SPU_Type const *p_reg, uint32_t mask)</argsstring>
        <name>nrf_spu_int_enable_check</name>
        <param>
          <type>NRF_SPU_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Function for checking if the specified interrupts are enabled. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of interrupts to be checked. Use <ref refid="group__nrf__spu__hal_1ga44a6e9c6511f38d0246e967076179519" kindref="member">nrf_spu_int_mask_t</ref> values for bit masking.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Mask of enabled interrupts. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_spu.h" line="867" column="28" bodyfile="hal/nrf_spu.h" bodystart="867" bodyend="870" declfile="hal/nrf_spu.h" declline="340" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__spu__hal_1ga200ee02fe1c23101aad0ce846fca29ba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_spu_publish_set</definition>
        <argsstring>(NRF_SPU_Type *p_reg, nrf_spu_event_t event, uint32_t channel)</argsstring>
        <name>nrf_spu_publish_set</name>
        <param>
          <type>NRF_SPU_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__spu__hal_1gaca772df92f8018db60b64684673403a6" kindref="member">nrf_spu_event_t</ref></type>
          <declname>event</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>channel</declname>
        </param>
        <briefdescription>
<para>Function for setting up publication configuration of a given SPU event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event to configure. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">channel</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel to connect with published event. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_spu.h" line="873" column="24" bodyfile="hal/nrf_spu.h" bodystart="873" bodyend="879" declfile="hal/nrf_spu.h" declline="350" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__spu__hal_1ga78d3fa9ec803eaef4593e1a52820bcbb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_spu_publish_clear</definition>
        <argsstring>(NRF_SPU_Type *p_reg, nrf_spu_event_t event)</argsstring>
        <name>nrf_spu_publish_clear</name>
        <param>
          <type>NRF_SPU_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__spu__hal_1gaca772df92f8018db60b64684673403a6" kindref="member">nrf_spu_event_t</ref></type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>Function for clearing publication configuration of a given SPU event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event to clear. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_spu.h" line="881" column="24" bodyfile="hal/nrf_spu.h" bodystart="881" bodyend="885" declfile="hal/nrf_spu.h" declline="360" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__spu__hal_1ga2df21cb782ba105b5e208bad095a011a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE bool</type>
        <definition>NRF_STATIC_INLINE bool nrf_spu_tz_is_available</definition>
        <argsstring>(NRF_SPU_Type const *p_reg)</argsstring>
        <name>nrf_spu_tz_is_available</name>
        <param>
          <type>NRF_SPU_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for retrieving the capabilities of the current device. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>ARM TrustZone support is available. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>ARM TrustZone support is not available. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_spu.h" line="887" column="24" bodyfile="hal/nrf_spu.h" bodystart="887" bodyend="890" declfile="hal/nrf_spu.h" declline="371" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__spu__hal_1ga9f7ed30e65625d27a94d2367c8fe3faa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_spu_dppi_config_set</definition>
        <argsstring>(NRF_SPU_Type *p_reg, uint8_t dppi_id, uint32_t channels_mask, bool lock_conf)</argsstring>
        <name>nrf_spu_dppi_config_set</name>
        <param>
          <type>NRF_SPU_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>dppi_id</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>channels_mask</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>lock_conf</declname>
        </param>
        <briefdescription>
<para>Function for configuring the DPPI channels to be available in particular domains. </para>
        </briefdescription>
        <detaileddescription>
<para>Channels are configured as bitmask. Set one in bitmask to make channels available only in secure domain. Set zero to make it available in secure and non-secure domains.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">dppi_id</parametername>
</parameternamelist>
<parameterdescription>
<para>DPPI peripheral id. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">channels_mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Bitmask with channels configuration. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">lock_conf</parametername>
</parameternamelist>
<parameterdescription>
<para>Lock configuration until next SoC reset. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_spu.h" line="892" column="24" bodyfile="hal/nrf_spu.h" bodystart="892" bodyend="905" declfile="hal/nrf_spu.h" declline="384" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__spu__hal_1ga6ca19b4ad46b497cd693047115e12347" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_spu_gpio_config_set</definition>
        <argsstring>(NRF_SPU_Type *p_reg, uint8_t gpio_port, uint32_t gpio_mask, bool lock_conf)</argsstring>
        <name>nrf_spu_gpio_config_set</name>
        <param>
          <type>NRF_SPU_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>gpio_port</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>gpio_mask</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>lock_conf</declname>
        </param>
        <briefdescription>
<para>Function for configuring the GPIO pins to be available in particular domains. </para>
        </briefdescription>
        <detaileddescription>
<para>GPIO pins are configured as bitmask. Set one in bitmask to make particular pin available only in secure domain. Set zero to make it available in secure and non-secure domains.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">gpio_port</parametername>
</parameternamelist>
<parameterdescription>
<para>Port number. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">gpio_mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Bitmask with gpio configuration. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">lock_conf</parametername>
</parameternamelist>
<parameterdescription>
<para>Lock configuration until next SoC reset. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_spu.h" line="907" column="24" bodyfile="hal/nrf_spu.h" bodystart="907" bodyend="920" declfile="hal/nrf_spu.h" declline="400" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__spu__hal_1ga8f549ce08f3891c83d62a5256a7594c8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_spu_flashnsc_set</definition>
        <argsstring>(NRF_SPU_Type *p_reg, uint8_t flash_nsc_id, nrf_spu_nsc_size_t flash_nsc_size, uint8_t region_number, bool lock_conf)</argsstring>
        <name>nrf_spu_flashnsc_set</name>
        <param>
          <type>NRF_SPU_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>flash_nsc_id</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__spu__hal_1ga45f740567f5b83d2f7eca5a8d18cff94" kindref="member">nrf_spu_nsc_size_t</ref></type>
          <declname>flash_nsc_size</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>region_number</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>lock_conf</declname>
        </param>
        <briefdescription>
<para>Function for configuring non-secure callable flash region. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">flash_nsc_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Non-secure callable flash region ID. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">flash_nsc_size</parametername>
</parameternamelist>
<parameterdescription>
<para>Non-secure callable flash region size. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">region_number</parametername>
</parameternamelist>
<parameterdescription>
<para>Flash region number. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">lock_conf</parametername>
</parameternamelist>
<parameterdescription>
<para>Lock configuration until next SoC reset. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_spu.h" line="922" column="24" bodyfile="hal/nrf_spu.h" bodystart="922" bodyend="935" declfile="hal/nrf_spu.h" declline="414" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__spu__hal_1ga289b83bd30667a37519640cb5c6a74fd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_spu_ramnsc_set</definition>
        <argsstring>(NRF_SPU_Type *p_reg, uint8_t ram_nsc_id, nrf_spu_nsc_size_t ram_nsc_size, uint8_t region_number, bool lock_conf)</argsstring>
        <name>nrf_spu_ramnsc_set</name>
        <param>
          <type>NRF_SPU_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>ram_nsc_id</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__spu__hal_1ga45f740567f5b83d2f7eca5a8d18cff94" kindref="member">nrf_spu_nsc_size_t</ref></type>
          <declname>ram_nsc_size</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>region_number</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>lock_conf</declname>
        </param>
        <briefdescription>
<para>Function for configuring non-secure callable RAM region. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">ram_nsc_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Non-secure callable RAM region ID. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">ram_nsc_size</parametername>
</parameternamelist>
<parameterdescription>
<para>Non-secure callable RAM region size. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">region_number</parametername>
</parameternamelist>
<parameterdescription>
<para>RAM region number. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">lock_conf</parametername>
</parameternamelist>
<parameterdescription>
<para>Lock configuration until next SoC reset. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_spu.h" line="937" column="24" bodyfile="hal/nrf_spu.h" bodystart="937" bodyend="950" declfile="hal/nrf_spu.h" declline="429" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__spu__hal_1ga3d59cd2c2e218eeec8b98ae49225da4e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_spu_flashregion_set</definition>
        <argsstring>(NRF_SPU_Type *p_reg, uint8_t region_id, bool secure_attr, uint32_t permissions, bool lock_conf)</argsstring>
        <name>nrf_spu_flashregion_set</name>
        <param>
          <type>NRF_SPU_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>region_id</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>secure_attr</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>permissions</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>lock_conf</declname>
        </param>
        <briefdescription>
<para>Function for configuring security for a particular flash region. </para>
        </briefdescription>
        <detaileddescription>
<para>Permissions parameter must be set by using the logical OR on the <ref refid="group__nrf__spu__hal_1gafe75ab0f3d1142b83a6211f2143850fc" kindref="member">nrf_spu_mem_perm_t</ref> values.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">region_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Flash region index. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">secure_attr</parametername>
</parameternamelist>
<parameterdescription>
<para>Set region attribute to secure. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">permissions</parametername>
</parameternamelist>
<parameterdescription>
<para>Flash region permissions. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">lock_conf</parametername>
</parameternamelist>
<parameterdescription>
<para>Lock configuration until next SoC reset. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_spu.h" line="952" column="24" bodyfile="hal/nrf_spu.h" bodystart="952" bodyend="963" declfile="hal/nrf_spu.h" declline="446" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__spu__hal_1gad3d8c40545df1ac1f7a40d2e3b23dee5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_spu_ramregion_set</definition>
        <argsstring>(NRF_SPU_Type *p_reg, uint8_t region_id, bool secure_attr, uint32_t permissions, bool lock_conf)</argsstring>
        <name>nrf_spu_ramregion_set</name>
        <param>
          <type>NRF_SPU_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>region_id</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>secure_attr</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>permissions</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>lock_conf</declname>
        </param>
        <briefdescription>
<para>Function for configuring security for the RAM region. </para>
        </briefdescription>
        <detaileddescription>
<para>Permissions parameter must be set by using the logical OR on the <ref refid="group__nrf__spu__hal_1gafe75ab0f3d1142b83a6211f2143850fc" kindref="member">nrf_spu_mem_perm_t</ref> values.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">region_id</parametername>
</parameternamelist>
<parameterdescription>
<para>RAM region index. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">secure_attr</parametername>
</parameternamelist>
<parameterdescription>
<para>Set region attribute to secure. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">permissions</parametername>
</parameternamelist>
<parameterdescription>
<para>RAM region permissions. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">lock_conf</parametername>
</parameternamelist>
<parameterdescription>
<para>Lock configuration until next SoC reset. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_spu.h" line="965" column="24" bodyfile="hal/nrf_spu.h" bodystart="965" bodyend="976" declfile="hal/nrf_spu.h" declline="463" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__spu__hal_1ga5518273cfb31711bc2bc98341149ca5d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_spu_peripheral_set</definition>
        <argsstring>(NRF_SPU_Type *p_reg, uint32_t peripheral_id, bool secure_attr, bool secure_dma, bool lock_conf)</argsstring>
        <name>nrf_spu_peripheral_set</name>
        <param>
          <type>NRF_SPU_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>peripheral_id</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>secure_attr</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>secure_dma</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>lock_conf</declname>
        </param>
        <briefdescription>
<para>Function for configuring access permissions of the peripheral. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">peripheral_id</parametername>
</parameternamelist>
<parameterdescription>
<para>ID number of a particular peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">secure_attr</parametername>
</parameternamelist>
<parameterdescription>
<para>Peripheral registers accessible only from secure domain. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">secure_dma</parametername>
</parameternamelist>
<parameterdescription>
<para>DMA transfers possible only from RAM memory in secure domain. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">lock_conf</parametername>
</parameternamelist>
<parameterdescription>
<para>Lock configuration until next SoC reset. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_spu.h" line="978" column="24" bodyfile="hal/nrf_spu.h" bodystart="978" bodyend="991" declfile="hal/nrf_spu.h" declline="478" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__spu__hal_1ga26f1482b45a4443897ffe48f91e578e9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_spu_extdomain_set</definition>
        <argsstring>(NRF_SPU_Type *p_reg, uint32_t domain_id, bool secure_attr, bool lock_conf)</argsstring>
        <name>nrf_spu_extdomain_set</name>
        <param>
          <type>NRF_SPU_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>domain_id</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>secure_attr</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>lock_conf</declname>
        </param>
        <briefdescription>
<para>Function for configuring bus access permissions of the specified external domain. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">domain_id</parametername>
</parameternamelist>
<parameterdescription>
<para>ID number of a particular external domain. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">secure_attr</parametername>
</parameternamelist>
<parameterdescription>
<para>Specifies if the bus accesses from this domain have the secure attribute set. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">lock_conf</parametername>
</parameternamelist>
<parameterdescription>
<para>Specifies if the configuration should be locked until next SoC reset. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_spu.h" line="993" column="24" bodyfile="hal/nrf_spu.h" bodystart="993" bodyend="1003" declfile="hal/nrf_spu.h" declline="492" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__spu__hal_1gacbafb55d6851f8899248996a3e7b503d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_spu_periphaccerr_address_get</definition>
        <argsstring>(NRF_SPU_Type const *p_reg)</argsstring>
        <name>nrf_spu_periphaccerr_address_get</name>
        <param>
          <type>NRF_SPU_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting the address of the security violation. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>The event PERIPHACCERR must be cleared to clear this register.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Address of the transaction that caused first error. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_spu.h" line="1007" column="28" bodyfile="hal/nrf_spu.h" bodystart="1007" bodyend="1010" declfile="hal/nrf_spu.h" declline="509" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__spu__hal_1ga99c0ed224649632d21662232df24e22e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE nrf_owner_t</type>
        <definition>NRF_STATIC_INLINE nrf_owner_t nrf_spu_periphaccerr_ownerid_get</definition>
        <argsstring>(NRF_SPU_Type const *p_reg)</argsstring>
        <name>nrf_spu_periphaccerr_ownerid_get</name>
        <param>
          <type>NRF_SPU_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting the owner ID of the security violation. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>The event PERIPHACCERR must be cleared to clear this register.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Owner ID of the transaction that caused first error. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_spu.h" line="1013" column="31" bodyfile="hal/nrf_spu.h" bodystart="1013" bodyend="1016" declfile="hal/nrf_spu.h" declline="521" declcolumn="31"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__spu__hal_1gadc7939f13a352b9ed85baa764820d66a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE <ref refid="group__nrf__spu__hal_1ga5cf6c98f4cb95c5c49bb1a6e85ed3023" kindref="member">nrf_spu_securemapping_t</ref></type>
        <definition>NRF_STATIC_INLINE nrf_spu_securemapping_t nrf_spu_periph_perm_securemapping_get</definition>
        <argsstring>(NRF_SPU_Type const *p_reg, uint8_t index)</argsstring>
        <name>nrf_spu_periph_perm_securemapping_get</name>
        <param>
          <type>NRF_SPU_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Function for getting the capabilities for TrustZone Cortex-M secure attribute of the specified slave. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">index</parametername>
</parameternamelist>
<parameterdescription>
<para>Peripheral slave index.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>TrustZone capabilities. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_spu.h" line="1114" column="25" bodyfile="hal/nrf_spu.h" bodystart="1114" bodyend="1122" declfile="hal/nrf_spu.h" declline="534" declcolumn="25"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__spu__hal_1gaf6580f7851c2dd66b0773ffecef19466" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE <ref refid="group__nrf__spu__hal_1ga9e1f6046a4de5110aeb69bc50134a033" kindref="member">nrf_spu_dma_t</ref></type>
        <definition>NRF_STATIC_INLINE nrf_spu_dma_t nrf_spu_periph_perm_dma_get</definition>
        <argsstring>(NRF_SPU_Type const *p_reg, uint8_t index)</argsstring>
        <name>nrf_spu_periph_perm_dma_get</name>
        <param>
          <type>NRF_SPU_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Function for getting the DMA capabilities of the specified slave. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">index</parametername>
</parameternamelist>
<parameterdescription>
<para>Peripheral slave index.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>DMA capabilities. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_spu.h" line="1124" column="33" bodyfile="hal/nrf_spu.h" bodystart="1124" bodyend="1131" declfile="hal/nrf_spu.h" declline="545" declcolumn="33"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__spu__hal_1gae93e3fe9eee85ad284840b3bbd007858" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE bool</type>
        <definition>NRF_STATIC_INLINE bool nrf_spu_periph_perm_secattr_get</definition>
        <argsstring>(NRF_SPU_Type const *p_reg, uint8_t index)</argsstring>
        <name>nrf_spu_periph_perm_secattr_get</name>
        <param>
          <type>NRF_SPU_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Function for getting the security mapping of the specified slave. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">index</parametername>
</parameternamelist>
<parameterdescription>
<para>Peripheral slave index.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>Peripheral is mapped in secure peripheral address space. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>If TrustZone capabilities are <ref refid="group__nrf__spu__hal_1gga5cf6c98f4cb95c5c49bb1a6e85ed3023acde7766ec08af43a7fef33c7a1a378ac" kindref="member">NRF_SPU_SECUREMAPPING_USERSELECTABLE</ref>, then peripheral is mapped in non-secure peripheral address space. If TrustZone capabilities are <ref refid="group__nrf__spu__hal_1gga5cf6c98f4cb95c5c49bb1a6e85ed3023aa53394b582de83ae0aa9b62bf350bcdf" kindref="member">NRF_SPU_SECUREMAPPING_SPLIT</ref>, then peripheral is mapped in non-secure and secure peripheral address space. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_spu.h" line="1063" column="24" bodyfile="hal/nrf_spu.h" bodystart="1063" bodyend="1069" declfile="hal/nrf_spu.h" declline="560" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__spu__hal_1ga72c2eda8b1aa5fc262ac3364b1e42b2e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_spu_periph_perm_secattr_set</definition>
        <argsstring>(NRF_SPU_Type *p_reg, uint8_t index, bool enable)</argsstring>
        <name>nrf_spu_periph_perm_secattr_set</name>
        <param>
          <type>NRF_SPU_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>index</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>enable</declname>
        </param>
        <briefdescription>
<para>Function for setting the security mapping of the specified slave. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This bit has effect only if TrustZone capabilities are either <ref refid="group__nrf__spu__hal_1gga5cf6c98f4cb95c5c49bb1a6e85ed3023acde7766ec08af43a7fef33c7a1a378ac" kindref="member">NRF_SPU_SECUREMAPPING_USERSELECTABLE</ref> or <ref refid="group__nrf__spu__hal_1gga5cf6c98f4cb95c5c49bb1a6e85ed3023aa53394b582de83ae0aa9b62bf350bcdf" kindref="member">NRF_SPU_SECUREMAPPING_SPLIT</ref>.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">index</parametername>
</parameternamelist>
<parameterdescription>
<para>Peripheral slave index. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">enable</parametername>
</parameternamelist>
<parameterdescription>
<para>True if security mapping is to be set, false otherwise. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_spu.h" line="1102" column="24" bodyfile="hal/nrf_spu.h" bodystart="1102" bodyend="1111" declfile="hal/nrf_spu.h" declline="573" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__spu__hal_1gad4797b13e8352b1d16e839915d93291f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE bool</type>
        <definition>NRF_STATIC_INLINE bool nrf_spu_periph_perm_dmasec_get</definition>
        <argsstring>(NRF_SPU_Type const *p_reg, uint8_t index)</argsstring>
        <name>nrf_spu_periph_perm_dmasec_get</name>
        <param>
          <type>NRF_SPU_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Function for getting the security attribution for the DMA transfer of the specified slave. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">index</parametername>
</parameternamelist>
<parameterdescription>
<para>Peripheral slave index.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if DMA transfers initiated by this peripheral have the secure attribute set, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_spu.h" line="1055" column="24" bodyfile="hal/nrf_spu.h" bodystart="1055" bodyend="1061" declfile="hal/nrf_spu.h" declline="587" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__spu__hal_1ga32806730a0b60e4a65fcfd06b35b65d0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_spu_periph_perm_dmasec_set</definition>
        <argsstring>(NRF_SPU_Type *p_reg, uint8_t index, bool enable)</argsstring>
        <name>nrf_spu_periph_perm_dmasec_set</name>
        <param>
          <type>NRF_SPU_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>index</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>enable</declname>
        </param>
        <briefdescription>
<para>Function for setting the security attribution for the DMA transfer of the specified slave. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This bit has effect only if peripheral security mapping is enabled.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">index</parametername>
</parameternamelist>
<parameterdescription>
<para>Peripheral slave index. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">enable</parametername>
</parameternamelist>
<parameterdescription>
<para>True if secure attribute for the DMA transfer is to be set, false otherwise. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_spu.h" line="1091" column="24" bodyfile="hal/nrf_spu.h" bodystart="1091" bodyend="1100" declfile="hal/nrf_spu.h" declline="600" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__spu__hal_1ga801ac355cde9424713bf9ff25de270dc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE bool</type>
        <definition>NRF_STATIC_INLINE bool nrf_spu_periph_perm_block_get</definition>
        <argsstring>(NRF_SPU_Type const *p_reg, uint8_t index)</argsstring>
        <name>nrf_spu_periph_perm_block_get</name>
        <param>
          <type>NRF_SPU_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Function for getting the status of the peripheral access lock of the specified slave. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>When peripheral access lock is enabled, reading or modifying the registers of the peripheral is blocked.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">index</parametername>
</parameternamelist>
<parameterdescription>
<para>Peripheral slave index.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the peripheral access is locked, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_spu.h" line="1046" column="24" bodyfile="hal/nrf_spu.h" bodystart="1046" bodyend="1052" declfile="hal/nrf_spu.h" declline="616" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__spu__hal_1gae4238c89034e45d4b4b16381b530f47d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_spu_periph_perm_block_enable</definition>
        <argsstring>(NRF_SPU_Type *p_reg, uint8_t index)</argsstring>
        <name>nrf_spu_periph_perm_block_enable</name>
        <param>
          <type>NRF_SPU_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Function for enabling the peripheral access lock of the specified slave. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>When peripheral access lock is enabled, reading or modifying the registers of the peripheral is blocked.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">index</parametername>
</parameternamelist>
<parameterdescription>
<para>Peripheral slave index. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_spu.h" line="1081" column="24" bodyfile="hal/nrf_spu.h" bodystart="1081" bodyend="1088" declfile="hal/nrf_spu.h" declline="628" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__spu__hal_1ga1881ee3346de4ed5a95eb0e3d0e0131d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE bool</type>
        <definition>NRF_STATIC_INLINE bool nrf_spu_periph_perm_lock_get</definition>
        <argsstring>(NRF_SPU_Type const *p_reg, uint8_t index)</argsstring>
        <name>nrf_spu_periph_perm_lock_get</name>
        <param>
          <type>NRF_SPU_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Function for getting the status of the peripheral management lock of the specified slave. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>When peripheral management lock is enabled, modifying the SPU configuration associated with specified peripheral is not possible.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">index</parametername>
</parameternamelist>
<parameterdescription>
<para>Peripheral slave index.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the peripheral management is locked, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_spu.h" line="1037" column="24" bodyfile="hal/nrf_spu.h" bodystart="1037" bodyend="1043" declfile="hal/nrf_spu.h" declline="643" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__spu__hal_1ga03b4ff6cfffed66789549900aa6c7bd4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_spu_periph_perm_lock_enable</definition>
        <argsstring>(NRF_SPU_Type *p_reg, uint8_t index)</argsstring>
        <name>nrf_spu_periph_perm_lock_enable</name>
        <param>
          <type>NRF_SPU_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Function for enabling the peripheral management lock of the specified slave. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>When peripheral management lock is enabled, modifying the SPU configuration associated with specified peripheral is not possible.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">index</parametername>
</parameternamelist>
<parameterdescription>
<para>Peripheral slave index. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_spu.h" line="1071" column="24" bodyfile="hal/nrf_spu.h" bodystart="1071" bodyend="1078" declfile="hal/nrf_spu.h" declline="655" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__spu__hal_1gacb4c7161984ddd9d05d09a670287059c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE nrf_owner_t</type>
        <definition>NRF_STATIC_INLINE nrf_owner_t nrf_spu_periph_perm_ownerid_get</definition>
        <argsstring>(NRF_SPU_Type const *p_reg, uint8_t index)</argsstring>
        <name>nrf_spu_periph_perm_ownerid_get</name>
        <param>
          <type>NRF_SPU_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Function for getting the peripheral owner ID of the specified slave. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">index</parametername>
</parameternamelist>
<parameterdescription>
<para>Peripheral slave index.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Owner ID. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_spu.h" line="1134" column="31" bodyfile="hal/nrf_spu.h" bodystart="1134" bodyend="1141" declfile="hal/nrf_spu.h" declline="667" declcolumn="31"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__spu__hal_1gab10e1128d592f7573f0fcbedafcc4b94" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_spu_periph_perm_ownerid_set</definition>
        <argsstring>(NRF_SPU_Type *p_reg, uint8_t index, nrf_owner_t owner_id)</argsstring>
        <name>nrf_spu_periph_perm_ownerid_set</name>
        <param>
          <type>NRF_SPU_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>index</declname>
        </param>
        <param>
          <type>nrf_owner_t</type>
          <declname>owner_id</declname>
        </param>
        <briefdescription>
<para>Function for setting the peripheral owner ID of the specified slave. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">index</parametername>
</parameternamelist>
<parameterdescription>
<para>Peripheral slave index. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">owner_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Owner ID to be set. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_spu.h" line="1143" column="24" bodyfile="hal/nrf_spu.h" bodystart="1143" bodyend="1152" declfile="hal/nrf_spu.h" declline="677" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__spu__hal_1ga2558e753e968a4322a91c6957a95a6ce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE bool</type>
        <definition>NRF_STATIC_INLINE bool nrf_spu_periph_perm_ownerprog_get</definition>
        <argsstring>(NRF_SPU_Type const *p_reg, uint8_t index)</argsstring>
        <name>nrf_spu_periph_perm_ownerprog_get</name>
        <param>
          <type>NRF_SPU_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Function for getting the indication if owner ID of the specified slave is programmable or not. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">index</parametername>
</parameternamelist>
<parameterdescription>
<para>Peripheral slave index.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if owner ID is programmable, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_spu.h" line="1028" column="24" bodyfile="hal/nrf_spu.h" bodystart="1028" bodyend="1034" declfile="hal/nrf_spu.h" declline="690" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__spu__hal_1gac88ce0843392afbed0314e969aded8c6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE bool</type>
        <definition>NRF_STATIC_INLINE bool nrf_spu_periph_perm_present_get</definition>
        <argsstring>(NRF_SPU_Type const *p_reg, uint8_t index)</argsstring>
        <name>nrf_spu_periph_perm_present_get</name>
        <param>
          <type>NRF_SPU_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Function for getting the indication if peripheral with the specified slave index is present. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">index</parametername>
</parameternamelist>
<parameterdescription>
<para>Peripheral slave index.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if peripheral is present, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_spu.h" line="1019" column="24" bodyfile="hal/nrf_spu.h" bodystart="1019" bodyend="1025" declfile="hal/nrf_spu.h" declline="703" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__spu__hal_1gad2f33b71131b6e984f4dd0661caf8f09" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE bool</type>
        <definition>NRF_STATIC_INLINE bool nrf_spu_feature_secattr_get</definition>
        <argsstring>(NRF_SPU_Type const *p_reg, nrf_spu_feature_t feature, uint8_t index, uint8_t subindex)</argsstring>
        <name>nrf_spu_feature_secattr_get</name>
        <param>
          <type>NRF_SPU_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__spu__hal_1ga96d287b38368a0b90d2d50fa507d5910" kindref="member">nrf_spu_feature_t</ref></type>
          <declname>feature</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>index</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>subindex</declname>
        </param>
        <briefdescription>
<para>Function for getting the security mapping of the specified feature. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">feature</parametername>
</parameternamelist>
<parameterdescription>
<para>Feature to be accessed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">index</parametername>
</parameternamelist>
<parameterdescription>
<para>Feature index. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">subindex</parametername>
</parameternamelist>
<parameterdescription>
<para>Feature subindex. Only used for applicable features, otherwise skipped.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>Feature is available for secure usage. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>Feature is available for non-secure usage. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_spu.h" line="1155" column="24" bodyfile="hal/nrf_spu.h" bodystart="1155" bodyend="1286" declfile="hal/nrf_spu.h" declline="717" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__spu__hal_1ga5041c2c330a50d77d47b5e3638b12f7a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_spu_feature_secattr_set</definition>
        <argsstring>(NRF_SPU_Type *p_reg, nrf_spu_feature_t feature, uint8_t index, uint8_t subindex, bool enable)</argsstring>
        <name>nrf_spu_feature_secattr_set</name>
        <param>
          <type>NRF_SPU_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__spu__hal_1ga96d287b38368a0b90d2d50fa507d5910" kindref="member">nrf_spu_feature_t</ref></type>
          <declname>feature</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>index</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>subindex</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>enable</declname>
        </param>
        <briefdescription>
<para>Function for setting the security mapping of the specified feature. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">feature</parametername>
</parameternamelist>
<parameterdescription>
<para>Feature to be accessed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">index</parametername>
</parameternamelist>
<parameterdescription>
<para>Feature index. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">subindex</parametername>
</parameternamelist>
<parameterdescription>
<para>Feature subindex. Only used for applicable features, otherwise skipped. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">enable</parametername>
</parameternamelist>
<parameterdescription>
<para>True if security mapping is to be set, false otherwise. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_spu.h" line="1691" column="24" bodyfile="hal/nrf_spu.h" bodystart="1691" bodyend="1913" declfile="hal/nrf_spu.h" declline="731" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__spu__hal_1gaaa80a705edd8347b7222401a87f26f59" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE bool</type>
        <definition>NRF_STATIC_INLINE bool nrf_spu_feature_lock_get</definition>
        <argsstring>(NRF_SPU_Type const *p_reg, nrf_spu_feature_t feature, uint8_t index, uint8_t subindex)</argsstring>
        <name>nrf_spu_feature_lock_get</name>
        <param>
          <type>NRF_SPU_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__spu__hal_1ga96d287b38368a0b90d2d50fa507d5910" kindref="member">nrf_spu_feature_t</ref></type>
          <declname>feature</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>index</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>subindex</declname>
        </param>
        <briefdescription>
<para>Function for getting the status of the management lock of the specified feature. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>When feature management lock is enabled, modifying the SPU configuration associated with specified feature is not possible.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">feature</parametername>
</parameternamelist>
<parameterdescription>
<para>Feature to be accessed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">index</parametername>
</parameternamelist>
<parameterdescription>
<para>Feature index. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">subindex</parametername>
</parameternamelist>
<parameterdescription>
<para>Feature subindex. Only used for applicable features, otherwise skipped.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if feature management is locked, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_spu.h" line="1288" column="24" bodyfile="hal/nrf_spu.h" bodystart="1288" bodyend="1419" declfile="hal/nrf_spu.h" declline="750" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__spu__hal_1ga0be19d03dc1415fd873eb3fd8b70bb1f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_spu_feature_lock_enable</definition>
        <argsstring>(NRF_SPU_Type *p_reg, nrf_spu_feature_t feature, uint8_t index, uint8_t subindex)</argsstring>
        <name>nrf_spu_feature_lock_enable</name>
        <param>
          <type>NRF_SPU_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__spu__hal_1ga96d287b38368a0b90d2d50fa507d5910" kindref="member">nrf_spu_feature_t</ref></type>
          <declname>feature</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>index</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>subindex</declname>
        </param>
        <briefdescription>
<para>Function for enabling the management lock of the specified feature. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>When feature management lock is enabled, modifying the SPU configuration associated with specified feature is not possible.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">feature</parametername>
</parameternamelist>
<parameterdescription>
<para>Feature to be accessed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">index</parametername>
</parameternamelist>
<parameterdescription>
<para>Feature index. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">subindex</parametername>
</parameternamelist>
<parameterdescription>
<para>Feature subindex. Only used for applicable features, otherwise skipped. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_spu.h" line="1915" column="24" bodyfile="hal/nrf_spu.h" bodystart="1915" bodyend="2100" declfile="hal/nrf_spu.h" declline="766" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__spu__hal_1ga0151c1446805884a8e238fcbf90cca38" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE bool</type>
        <definition>NRF_STATIC_INLINE bool nrf_spu_feature_block_get</definition>
        <argsstring>(NRF_SPU_Type const *p_reg, nrf_spu_feature_t feature, uint8_t index, uint8_t subindex)</argsstring>
        <name>nrf_spu_feature_block_get</name>
        <param>
          <type>NRF_SPU_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__spu__hal_1ga96d287b38368a0b90d2d50fa507d5910" kindref="member">nrf_spu_feature_t</ref></type>
          <declname>feature</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>index</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>subindex</declname>
        </param>
        <briefdescription>
<para>Function for getting status of the access lock of the specified feature. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>When feature access lock is enabled, reading or modifying the registers of the feature is blocked.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">feature</parametername>
</parameternamelist>
<parameterdescription>
<para>Feature to be accessed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">index</parametername>
</parameternamelist>
<parameterdescription>
<para>Feature index. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">subindex</parametername>
</parameternamelist>
<parameterdescription>
<para>Feature subindex. Only used for applicable features, otherwise skipped.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the feature access is locked, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_spu.h" line="1422" column="24" bodyfile="hal/nrf_spu.h" bodystart="1422" bodyend="1553" declfile="hal/nrf_spu.h" declline="785" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__spu__hal_1ga5ed56a25adf9f45e12eb44901f41aa36" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_spu_feature_block_enable</definition>
        <argsstring>(NRF_SPU_Type *p_reg, nrf_spu_feature_t feature, uint8_t index, uint8_t subindex)</argsstring>
        <name>nrf_spu_feature_block_enable</name>
        <param>
          <type>NRF_SPU_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__spu__hal_1ga96d287b38368a0b90d2d50fa507d5910" kindref="member">nrf_spu_feature_t</ref></type>
          <declname>feature</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>index</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>subindex</declname>
        </param>
        <briefdescription>
<para>Function for enabling the feature block of the specified feature. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>When feature access lock is enabled, reading or modifying the registers of the feature is blocked.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">feature</parametername>
</parameternamelist>
<parameterdescription>
<para>Feature to be accessed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">index</parametername>
</parameternamelist>
<parameterdescription>
<para>Feature index. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">subindex</parametername>
</parameternamelist>
<parameterdescription>
<para>Feature subindex. Only used for applicable features, otherwise skipped. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_spu.h" line="2103" column="24" bodyfile="hal/nrf_spu.h" bodystart="2103" bodyend="2288" declfile="hal/nrf_spu.h" declline="801" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__spu__hal_1ga2ce58ebf39fc9cee317d7cfe0a0770d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE nrf_owner_t</type>
        <definition>NRF_STATIC_INLINE nrf_owner_t nrf_spu_feature_ownerid_get</definition>
        <argsstring>(NRF_SPU_Type const *p_reg, nrf_spu_feature_t feature, uint8_t index, uint8_t subindex)</argsstring>
        <name>nrf_spu_feature_ownerid_get</name>
        <param>
          <type>NRF_SPU_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__spu__hal_1ga96d287b38368a0b90d2d50fa507d5910" kindref="member">nrf_spu_feature_t</ref></type>
          <declname>feature</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>index</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>subindex</declname>
        </param>
        <briefdescription>
<para>Function for getting the feature owner ID of the specified feature. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">feature</parametername>
</parameternamelist>
<parameterdescription>
<para>Feature to be accessed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">index</parametername>
</parameternamelist>
<parameterdescription>
<para>Feature index. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">subindex</parametername>
</parameternamelist>
<parameterdescription>
<para>Feature subindex. Only used for applicable features, otherwise skipped.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Owner ID. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_spu.h" line="1557" column="31" bodyfile="hal/nrf_spu.h" bodystart="1557" bodyend="1688" declfile="hal/nrf_spu.h" declline="818" declcolumn="31"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__spu__hal_1ga75edeaa9063ab5cba1b60c7c44fce989" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_spu_feature_ownerid_set</definition>
        <argsstring>(NRF_SPU_Type *p_reg, nrf_spu_feature_t feature, uint8_t index, uint8_t subindex, nrf_owner_t owner_id)</argsstring>
        <name>nrf_spu_feature_ownerid_set</name>
        <param>
          <type>NRF_SPU_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__spu__hal_1ga96d287b38368a0b90d2d50fa507d5910" kindref="member">nrf_spu_feature_t</ref></type>
          <declname>feature</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>index</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>subindex</declname>
        </param>
        <param>
          <type>nrf_owner_t</type>
          <declname>owner_id</declname>
        </param>
        <briefdescription>
<para>Function for setting the feature owner ID of the specified feature. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">feature</parametername>
</parameternamelist>
<parameterdescription>
<para>Feature to be accessed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">index</parametername>
</parameternamelist>
<parameterdescription>
<para>Feature index. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">subindex</parametername>
</parameternamelist>
<parameterdescription>
<para>Feature subindex. Only used for applicable features, otherwise skipped. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">owner_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Owner ID to be set. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_spu.h" line="2292" column="24" bodyfile="hal/nrf_spu.h" bodystart="2292" bodyend="2496" declfile="hal/nrf_spu.h" declline="832" declcolumn="24"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__nrf__spu__hal_1gaab4014f3cf67116e3d80ae20d65ff837" prot="public" static="no">
        <name>NRF_SPU_HAS_PERIPHERAL_ACCESS</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Presence of peripheral access feature. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_spu.h" line="52" column="9" bodyfile="hal/nrf_spu.h" bodystart="52" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__spu__hal_1ga98b997a0f3b31bd93a1f8428ef80c687" prot="public" static="no">
        <name>NRF_SPU_HAS_PERIPHERAL_ACCESS_ERROR_INFO</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Symbol indicating whether register containing information about the transaction that caused peripheral access error is present. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_spu.h" line="62" column="9" bodyfile="hal/nrf_spu.h" bodystart="62" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__spu__hal_1ga048a53af00c9dcb6da3647dd884f1720" prot="public" static="no">
        <name>NRF_SPU_HAS_OWNERSHIP</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Presence of ownership feature. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_spu.h" line="69" column="9" bodyfile="hal/nrf_spu.h" bodystart="69" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__spu__hal_1ga40a1a0a8d05076c0f72ceff2cdf3a84d" prot="public" static="no">
        <name>NRF_SPU_HAS_MEMORY</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Presence of memory feature. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_spu.h" line="76" column="9" bodyfile="hal/nrf_spu.h" bodystart="76" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__spu__hal_1ga01c10baa92c4c6dd06eec4d749a1a864" prot="public" static="no">
        <name>NRF_SPU_HAS_BLOCK</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Symbol indicating whether block feature is present. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_spu.h" line="83" column="9" bodyfile="hal/nrf_spu.h" bodystart="83" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__spu__hal_1ga6a99e5afe5afd97f6f9cfd4945542548" prot="public" static="no">
        <name>NRF_SPU_HAS_BELLS</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Symbol indicating whether SPU has registers related to BELLS. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_spu.h" line="91" column="9" bodyfile="hal/nrf_spu.h" bodystart="91" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__spu__hal_1ga460e99db7029fd6e5ec13edfe1c72d17" prot="public" static="no">
        <name>NRF_SPU_HAS_DOMAIN</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Symbol indicating whether SPU uses DOMAIN register name. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_spu.h" line="98" column="9" bodyfile="hal/nrf_spu.h" bodystart="98" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__spu__hal_1ga9e18262850998ecb3894154c387c93fa" prot="public" static="no">
        <name>NRF_SPU_HAS_IPCT</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Symbol indicating whether SPU has registers related to IPCT. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_spu.h" line="105" column="9" bodyfile="hal/nrf_spu.h" bodystart="105" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__spu__hal_1gaabdb8c3f2d2d0bfb2494110ca9af47bf" prot="public" static="no">
        <name>NRF_SPU_HAS_TDD</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Symbol indicating whether SPU has registers related to TDD. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_spu.h" line="112" column="9" bodyfile="hal/nrf_spu.h" bodystart="112" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__spu__hal_1ga4f39a304139e9846770235c0be41bd83" prot="public" static="no">
        <name>NRF_SPU_HAS_MRAMC</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Symbol indicating whether SPU has registers related to MRAMC. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_spu.h" line="119" column="9" bodyfile="hal/nrf_spu.h" bodystart="119" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__spu__hal_1gac0e0e10b6088f821e9ec7c071986b121" prot="public" static="no">
        <name>NRF_SPU_PERIPH_COUNT</name>
        <initializer>SPU_PERIPH_MaxCount</initializer>
        <briefdescription>
<para>Number of peripherals. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_spu.h" line="127" column="9" bodyfile="hal/nrf_spu.h" bodystart="127" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__spu__hal_1gae30f789339871eac2c0f9695cc747863" prot="public" static="no">
        <name>NRF_SPU_FEATURE_IPCT_CHANNEL_COUNT</name>
        <initializer>SPU_FEATURE_IPCT_CH_MaxCount</initializer>
        <briefdescription>
<para>Number of IPCT channels. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_spu.h" line="131" column="9" bodyfile="hal/nrf_spu.h" bodystart="131" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__spu__hal_1ga9f927d27e6364ba0251887aa60d39025" prot="public" static="no">
        <name>NRF_SPU_FEATURE_IPCT_INTERRUPT_COUNT</name>
        <initializer>SPU_FEATURE_IPCT_INTERRUPT_MaxCount</initializer>
        <briefdescription>
<para>Number of IPCT interrupts. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_spu.h" line="134" column="9" bodyfile="hal/nrf_spu.h" bodystart="134" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__spu__hal_1ga48d3215148737a51b65198ac42b3cf10" prot="public" static="no">
        <name>NRF_SPU_FEATURE_DPPI_CHANNEL_COUNT</name>
        <initializer>SPU_FEATURE_DPPIC_CH_MaxCount</initializer>
        <briefdescription>
<para>Number of DPPI channels. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_spu.h" line="138" column="9" bodyfile="hal/nrf_spu.h" bodystart="138" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__spu__hal_1ga345aa751d0891327b15d6a1eac4407a6" prot="public" static="no">
        <name>NRF_SPU_FEATURE_DPPI_CHANNEL_GROUP_COUNT</name>
        <initializer>SPU_FEATURE_DPPIC_CHG_MaxCount</initializer>
        <briefdescription>
<para>Number of DPPI channel groups. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_spu.h" line="141" column="9" bodyfile="hal/nrf_spu.h" bodystart="141" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__spu__hal_1ga8a3e6a15506ffb8cc8e41fdd047488d6" prot="public" static="no">
        <name>NRF_SPU_FEATURE_GPIOTE_COUNT</name>
        <initializer>SPU_FEATURE_GPIOTE_MaxCount</initializer>
        <briefdescription>
<para>Number of GPIOTEs. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_spu.h" line="144" column="9" bodyfile="hal/nrf_spu.h" bodystart="144" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__spu__hal_1gadf9d14b0e40184cd1633f6b75ddcf062" prot="public" static="no">
        <name>NRF_SPU_FEATURE_GPIOTE_CHANNEL_COUNT</name>
        <initializer>SPU_FEATURE_GPIOTE_CH_MaxCount</initializer>
        <briefdescription>
<para>Number of GPIOTE channels. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_spu.h" line="147" column="9" bodyfile="hal/nrf_spu.h" bodystart="147" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__spu__hal_1gaa020d2c6d6119793c733e7adddf38ec6" prot="public" static="no">
        <name>NRF_SPU_FEATURE_GPIOTE_INTERRUPT_COUNT</name>
        <initializer>SPU_FEATURE_GPIOTE_INTERRUPT_MaxCount</initializer>
        <briefdescription>
<para>Number of GPIOTE interrupts. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_spu.h" line="150" column="9" bodyfile="hal/nrf_spu.h" bodystart="150" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__spu__hal_1gaebd932719b56117fd33d598f96e251d0" prot="public" static="no">
        <name>NRF_SPU_FEATURE_GPIO_COUNT</name>
        <initializer>SPU_FEATURE_GPIO_MaxCount</initializer>
        <briefdescription>
<para>Number of GPIOs. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_spu.h" line="153" column="9" bodyfile="hal/nrf_spu.h" bodystart="153" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__spu__hal_1ga83d9bfc4fa2a6d9cb1a03169a2654a1c" prot="public" static="no">
        <name>NRF_SPU_FEATURE_GPIO_PIN_COUNT</name>
        <initializer>SPU_FEATURE_GPIO_PIN_MaxCount</initializer>
        <briefdescription>
<para>Number of GPIO pins. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_spu.h" line="156" column="9" bodyfile="hal/nrf_spu.h" bodystart="156" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__spu__hal_1ga016f5f723234ce5147c269fc845d93a2" prot="public" static="no">
        <name>NRF_SPU_FEATURE_GRTC_CC_COUNT</name>
        <initializer>SPU_FEATURE_GRTC_CC_MaxCount</initializer>
        <briefdescription>
<para>Number of GRTC compare channels. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_spu.h" line="159" column="9" bodyfile="hal/nrf_spu.h" bodystart="159" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__spu__hal_1ga90575272ee25f0d449e46fdc270ee304" prot="public" static="no">
        <name>NRF_SPU_FEATURE_GRTC_INTERRUPT_COUNT</name>
        <initializer>SPU_FEATURE_GRTC_INTERRUPT_MaxCount</initializer>
        <briefdescription>
<para>Number of GRTC interrupts.. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_spu.h" line="162" column="9" bodyfile="hal/nrf_spu.h" bodystart="162" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__spu__hal_1gacdd8cf71d46d434dac525136753b1dce" prot="public" static="no">
        <name>NRF_SPU_FEATURE_BELL_DOMAIN_COUNT</name>
        <initializer>SPU_FEATURE_BELLS_DOMAIN_MaxCount</initializer>
        <briefdescription>
<para>Number of BELL domains. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_spu.h" line="166" column="9" bodyfile="hal/nrf_spu.h" bodystart="166" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__spu__hal_1gae992299f429668f72c433937f1b21433" prot="public" static="no">
        <name>NRF_SPU_FEATURE_BELL_BELL_COUNT</name>
        <initializer>SPU_FEATURE_BELLS_DOMAIN_BELL_MaxCount</initializer>
        <briefdescription>
<para>Number of BELL Domain/Processor features. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_spu.h" line="173" column="9" bodyfile="hal/nrf_spu.h" bodystart="173" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__spu__hal_1gab930b097abfffa1c91b384c44a40defd" prot="public" static="no">
        <name>NRF_SPU_FEATURE_TDD_COUNT</name>
        <initializer>SPU_FEATURE_TDD_MaxCount</initializer>
        <briefdescription>
<para>Number of TDDs. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_spu.h" line="182" column="9" bodyfile="hal/nrf_spu.h" bodystart="182" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__spu__hal_1gaaa47bc82953589b344f54d7b5b5b8dd9" prot="public" static="no">
        <name>NRF_SPU_FEATURE_MRAMC_COUNT</name>
        <initializer>SPU_FEATURE_MRAMC_MaxCount</initializer>
        <briefdescription>
<para>Number of MRAMCs. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_spu.h" line="187" column="9" bodyfile="hal/nrf_spu.h" bodystart="187" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Hardware access layer for managing the System Protection Unit (SPU) peripheral. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
