<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="group__nrf__usbreg__hal" kind="group">
    <compoundname>nrf_usbreg_hal</compoundname>
    <title>USBREG HAL</title>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="group__nrf__usbreg__hal_1gae8a52dc6c780079ded627a742a0f4e0a" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_usbreg_event_t</name>
        <enumvalue id="group__nrf__usbreg__hal_1ggae8a52dc6c780079ded627a742a0f4e0aa8089893253405d3180eb3c4740059c2d" prot="public">
          <name>NRF_USBREG_EVENT_USBDETECTED</name>
          <initializer>= offsetof(NRF_USBREG_Type, EVENTS_USBDETECTED)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Voltage supply detected on VBUS. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__usbreg__hal_1ggae8a52dc6c780079ded627a742a0f4e0aa4bee95a0c89578cd17d114c4e69a3cbb" prot="public">
          <name>NRF_USBREG_EVENT_USBREMOVED</name>
          <initializer>= offsetof(NRF_USBREG_Type, EVENTS_USBREMOVED)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Voltage supply removed from VBUS. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__usbreg__hal_1ggae8a52dc6c780079ded627a742a0f4e0aa836eee5faab1f0044b60fcad394782da" prot="public">
          <name>NRF_USBREG_EVENT_USBPWRRDY</name>
          <initializer>= offsetof(NRF_USBREG_Type, EVENTS_USBPWRRDY)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>USB 3.3<nonbreakablespace/>V supply ready. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>USBREG events. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_usbreg.h" line="52" column="1" bodyfile="hal/nrf_usbreg.h" bodystart="53" bodyend="57"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__usbreg__hal_1ga2288c89a4e949850e56258953d992a36" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_usbreg_int_mask_t</name>
        <enumvalue id="group__nrf__usbreg__hal_1gga2288c89a4e949850e56258953d992a36ae9f95bef84d415b0c9580bdc4bf29373" prot="public">
          <name>NRF_USBREG_INT_USBDETECTED</name>
          <initializer>= USBREG_INTEN_USBDETECTED_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Interrupt on USBDETECTED. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__usbreg__hal_1gga2288c89a4e949850e56258953d992a36a80c42218de21b864c3c78b71c7b3cb6e" prot="public">
          <name>NRF_USBREG_INT_USBREMOVED</name>
          <initializer>= USBREG_INTEN_USBREMOVED_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Interrupt on USBREMOVED. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__usbreg__hal_1gga2288c89a4e949850e56258953d992a36a88b85c3d3418f407d46d3d05ed1749dc" prot="public">
          <name>NRF_USBREG_INT_USBPWRRDY</name>
          <initializer>= USBREG_INTEN_USBPWRRDY_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Interrupt on USBPWRRDY. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>USBREG interrupts. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_usbreg.h" line="60" column="1" bodyfile="hal/nrf_usbreg.h" bodystart="61" bodyend="65"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__usbreg__hal_1gaebec804f89b6688e6721f19b4d8ef19e" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_usbreg_status_mask_t</name>
        <enumvalue id="group__nrf__usbreg__hal_1ggaebec804f89b6688e6721f19b4d8ef19ea96a1646de94932318898f62a3f9f84b3" prot="public">
          <name>NRF_USBREG_STATUS_VBUSDETECT_MASK</name>
          <initializer>= USBREG_USBREGSTATUS_VBUSDETECT_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>USB detected or removed. <linebreak/>
 </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__usbreg__hal_1ggaebec804f89b6688e6721f19b4d8ef19ea83bd89ca397706a41f69dffb0ef34ac2" prot="public">
          <name>NRF_USBREG_STATUS_OUTPUTRDY_MASK</name>
          <initializer>= USBREG_USBREGSTATUS_OUTPUTRDY_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>USB 3.3<nonbreakablespace/>V supply ready. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>USBREGSTATUS register bit masks. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_usbreg.h" line="68" column="1" bodyfile="hal/nrf_usbreg.h" bodystart="69" bodyend="72"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__nrf__usbreg__hal_1gaa6f410fc0998f96525845f71495c64a6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_usbreg_event_clear</definition>
        <argsstring>(NRF_USBREG_Type *p_reg, nrf_usbreg_event_t event)</argsstring>
        <name>nrf_usbreg_event_clear</name>
        <param>
          <type>NRF_USBREG_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__usbreg__hal_1gae8a52dc6c780079ded627a742a0f4e0a" kindref="member">nrf_usbreg_event_t</ref></type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>Function for clearing the specified USBREG event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event to be cleared. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_usbreg.h" line="137" column="24" bodyfile="hal/nrf_usbreg.h" bodystart="137" bodyend="141" declfile="hal/nrf_usbreg.h" declline="80" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__usbreg__hal_1ga217d816aa377f8428d4505a01094ca23" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE bool</type>
        <definition>NRF_STATIC_INLINE bool nrf_usbreg_event_check</definition>
        <argsstring>(NRF_USBREG_Type const *p_reg, nrf_usbreg_event_t event)</argsstring>
        <name>nrf_usbreg_event_check</name>
        <param>
          <type>NRF_USBREG_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__usbreg__hal_1gae8a52dc6c780079ded627a742a0f4e0a" kindref="member">nrf_usbreg_event_t</ref></type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>Function for retrieving the state of the USBREG event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event to be checked.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>The event has been generated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>The event has not been generated. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_usbreg.h" line="143" column="24" bodyfile="hal/nrf_usbreg.h" bodystart="143" bodyend="147" declfile="hal/nrf_usbreg.h" declline="92" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__usbreg__hal_1ga6026282bca272bdb5f5c74738ed6fbfd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_usbreg_int_enable</definition>
        <argsstring>(NRF_USBREG_Type *p_reg, uint32_t mask)</argsstring>
        <name>nrf_usbreg_int_enable</name>
        <param>
          <type>NRF_USBREG_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Function for enabling specified interrupts. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of interrupts to be enabled. Use <ref refid="group__nrf__usbreg__hal_1ga2288c89a4e949850e56258953d992a36" kindref="member">nrf_usbreg_int_mask_t</ref> values for bit masking. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_usbreg.h" line="149" column="24" bodyfile="hal/nrf_usbreg.h" bodystart="149" bodyend="152" declfile="hal/nrf_usbreg.h" declline="102" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__usbreg__hal_1gababd55c7c0b0a1ff984dac351273f5b3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_usbreg_int_disable</definition>
        <argsstring>(NRF_USBREG_Type *p_reg, uint32_t mask)</argsstring>
        <name>nrf_usbreg_int_disable</name>
        <param>
          <type>NRF_USBREG_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Function for disabling specified interrupts. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of interrupts to be disabled. Use <ref refid="group__nrf__usbreg__hal_1ga2288c89a4e949850e56258953d992a36" kindref="member">nrf_usbreg_int_mask_t</ref> values for bit masking. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_usbreg.h" line="154" column="24" bodyfile="hal/nrf_usbreg.h" bodystart="154" bodyend="157" declfile="hal/nrf_usbreg.h" declline="111" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__usbreg__hal_1ga42aceecf9b26fe41d8d204dd00b8e9fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_usbreg_int_enable_check</definition>
        <argsstring>(NRF_USBREG_Type const *p_reg, uint32_t mask)</argsstring>
        <name>nrf_usbreg_int_enable_check</name>
        <param>
          <type>NRF_USBREG_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Function for checking if the specified interrupts are enabled. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of interrupts to be checked. Use <ref refid="group__nrf__usbreg__hal_1ga2288c89a4e949850e56258953d992a36" kindref="member">nrf_usbreg_int_mask_t</ref> values for bit masking.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Mask of enabled interrupts. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_usbreg.h" line="159" column="28" bodyfile="hal/nrf_usbreg.h" bodystart="159" bodyend="163" declfile="hal/nrf_usbreg.h" declline="122" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__usbreg__hal_1gad32a7d9f071bd87bf6f031081b8f4d7d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_usbreg_status_get</definition>
        <argsstring>(NRF_USBREG_Type const *p_reg)</argsstring>
        <name>nrf_usbreg_status_get</name>
        <param>
          <type>NRF_USBREG_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting the whole USBREGSTATUS register. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The USBREGSTATUS register value. Use <ref refid="group__nrf__usbreg__hal_1gaebec804f89b6688e6721f19b4d8ef19e" kindref="member">nrf_usbreg_status_mask_t</ref> values for bit masking. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_usbreg.h" line="165" column="28" bodyfile="hal/nrf_usbreg.h" bodystart="165" bodyend="168" declfile="hal/nrf_usbreg.h" declline="133" declcolumn="28"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Hardware access layer for managing the USB regulator peripheral. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
