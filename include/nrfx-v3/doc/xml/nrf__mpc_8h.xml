<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="nrf__mpc_8h" kind="file" language="C++">
    <compoundname>nrf_mpc.h</compoundname>
    <includes local="no">nrfx.h</includes>
    <incdepgraph>
      <node id="1">
        <label>hal/nrf_mpc.h</label>
        <link refid="nrf__mpc_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>nrfx.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="structnrf__mpc__region__config__t" prot="public">nrf_mpc_region_config_t</innerclass>
    <innerclass refid="structnrf__mpc__override__config__t" prot="public">nrf_mpc_override_config_t</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__nrf__mpc__hal_1ga7be93b4931a85c0d99e1e57b3725bf62" prot="public" static="no">
        <name>NRF_MPC_HAS_RTCHOKE</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Symbol indicating whether RTCHOKE functionality is present. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_mpc.h" line="53" column="9" bodyfile="hal/nrf_mpc.h" bodystart="53" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__mpc__hal_1ga10f21e5dc459acad0ea2d36f29b8037b" prot="public" static="no">
        <name>NRF_MPC_HAS_SECDOM</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Symbol indicating whether SECDOM functionality is present. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_mpc.h" line="60" column="9" bodyfile="hal/nrf_mpc.h" bodystart="60" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__mpc__hal_1gab273d8e3ac44dfb001e8dd37079e10ed" prot="public" static="no">
        <name>NRF_MPC_HAS_OVERRIDE_OFFSET</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Symbol indicating whether OVERRIDE OFFSET functionality is present. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_mpc.h" line="67" column="9" bodyfile="hal/nrf_mpc.h" bodystart="67" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__mpc__hal_1ga23e057328b822941974380fd47f35540" prot="public" static="no">
        <name>NRF_MPC_REGION_COUNT</name>
        <initializer>MPC_REGION_MaxCount</initializer>
        <briefdescription>
<para>Number of regions. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_mpc.h" line="73" column="9" bodyfile="hal/nrf_mpc.h" bodystart="73" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__mpc__hal_1gad1d9c129c96df36540f7e075aad3ad12" prot="public" static="no">
        <name>NRF_MPC_OVERRIDE_COUNT</name>
        <initializer>MPC_OVERRIDE_MaxCount</initializer>
        <briefdescription>
<para>Number of override regions. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_mpc.h" line="76" column="9" bodyfile="hal/nrf_mpc.h" bodystart="76" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__mpc__hal_1gabc595a5b1c0c672d60b76bb8b90d2c88" prot="public" static="no">
        <name>NRF_MPC_MASTER_PORTS_COUNT</name>
        <initializer>MPC_MASTER_PORTS_MaxCount</initializer>
        <briefdescription>
<para>Number of master ports. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_mpc.h" line="79" column="9" bodyfile="hal/nrf_mpc.h" bodystart="79" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__mpc__hal_1ga61549ebb9c4c7beb97135757d0ea3b43" prot="public" static="no">
        <name>NRF_MPC_RTCHOKE_COUNT</name>
        <initializer>MPC_RTCHOKE_DELAY_MaxCount</initializer>
        <briefdescription>
<para>Number of Real Time Choke slaves. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_mpc.h" line="83" column="9" bodyfile="hal/nrf_mpc.h" bodystart="83" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="group__nrf__mpc__hal_1ga934ee74ecdc1e369d8160adb9fc66720" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_mpc_event_t</name>
        <enumvalue id="group__nrf__mpc__hal_1gga934ee74ecdc1e369d8160adb9fc66720a22af0570a23c55c1853b69faf805c232" prot="public">
          <name>NRF_MPC_EVENT_MEMACCERR</name>
          <initializer>= offsetof(NRF_MPC_Type, EVENTS_MEMACCERR)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Memory access error. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>MPC events. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_mpc.h" line="87" column="1" bodyfile="hal/nrf_mpc.h" bodystart="88" bodyend="90"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__mpc__hal_1ga772315a021c75e1da4c2e3e063187507" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_mpc_int_mask_t</name>
        <enumvalue id="group__nrf__mpc__hal_1gga772315a021c75e1da4c2e3e063187507ae01bcfb89be5b3c40fed1fc219d9643c" prot="public">
          <name>NRF_MPC_INT_MEMACCERR_MASK</name>
          <initializer>= MPC_INTENSET_MEMACCERR_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Interrupt on MEMACCERR event. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>MPC interrupts. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_mpc.h" line="93" column="1" bodyfile="hal/nrf_mpc.h" bodystart="94" bodyend="96"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__mpc__hal_1ga7a52bbfed00c736a7ee0f49896fa4081" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_mpc_errorsource_t</name>
        <enumvalue id="group__nrf__mpc__hal_1gga7a52bbfed00c736a7ee0f49896fa4081a64cb903a31aa57615e678d5c7d1eafa3" prot="public">
          <name>NRF_MPC_ERRORSOURCE_SLAVE</name>
          <initializer>= MPC_MEMACCERR_INFO_ERRORSOURCE_Slave</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Error was triggered by an AXI slave. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__mpc__hal_1gga7a52bbfed00c736a7ee0f49896fa4081aef720a89162160fcd8414c59dfe9256b" prot="public">
          <name>NRF_MPC_ERRORSOURCE_MPC</name>
          <initializer>= MPC_MEMACCERR_INFO_ERRORSOURCE_MPC</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Error was triggered by MCP module. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Error sources. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_mpc.h" line="99" column="1" bodyfile="hal/nrf_mpc.h" bodystart="100" bodyend="103"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__mpc__hal_1ga7647978ee34cb4523182c945f58551b9" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_mpc_permission_mask_t</name>
        <enumvalue id="group__nrf__mpc__hal_1gga7647978ee34cb4523182c945f58551b9a1c509f1ebed48d6867afccc726a4043b" prot="public">
          <name>NRF_MPC_PERM_READ_MASK</name>
          <initializer>= MPC_OVERRIDE_PERM_READ_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Read access. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__mpc__hal_1gga7647978ee34cb4523182c945f58551b9a558f07197637e5a0b8a2a2f921fd447d" prot="public">
          <name>NRF_MPC_PERM_WRITE_MASK</name>
          <initializer>= MPC_OVERRIDE_PERM_WRITE_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Write access. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__mpc__hal_1gga7647978ee34cb4523182c945f58551b9a79c6b09eb35c7aad331e55d236dd2c70" prot="public">
          <name>NRF_MPC_PERM_EXECUTE_MASK</name>
          <initializer>= MPC_OVERRIDE_PERM_EXECUTE_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Software execute. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__mpc__hal_1gga7647978ee34cb4523182c945f58551b9a262e5d8389b70a706fc90ee7bedfc21b" prot="public">
          <name>NRF_MPC_PERM_SECURE_MASK</name>
          <initializer>= MPC_OVERRIDE_PERM_SECATTR_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Security mapping. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Permissions mask. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This enum may be used for both permission settings and permission settings mask. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_mpc.h" line="110" column="1" bodyfile="hal/nrf_mpc.h" bodystart="111" bodyend="116"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__mpc__hal_1ga89f734f107017134f3ff2c1136864626" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_mpc_masterport_mask_t</name>
        <enumvalue id="group__nrf__mpc__hal_1gga89f734f107017134f3ff2c1136864626a43c186c29e44d048d4d7fe4ff28a652e" prot="public">
          <name>NRF_MPC_MASTERPORT_0_MASK</name>
          <initializer>= MPC_REGION_MASTERPORT_ENABLE0_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Enable master port 0. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__mpc__hal_1gga89f734f107017134f3ff2c1136864626a7de1a72c217938e2df33c57e5c1d1dfd" prot="public">
          <name>NRF_MPC_MASTERPORT_1_MASK</name>
          <initializer>= MPC_REGION_MASTERPORT_ENABLE1_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Enable master port 1. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__mpc__hal_1gga89f734f107017134f3ff2c1136864626a01c63fbb707890de841006fda673c7a0" prot="public">
          <name>NRF_MPC_MASTERPORT_2_MASK</name>
          <initializer>= MPC_REGION_MASTERPORT_ENABLE2_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Enable master port 2. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__mpc__hal_1gga89f734f107017134f3ff2c1136864626a2e60961c3d173af19e69bb72d89359b0" prot="public">
          <name>NRF_MPC_MASTERPORT_3_MASK</name>
          <initializer>= MPC_REGION_MASTERPORT_ENABLE3_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Enable master port 3. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__mpc__hal_1gga89f734f107017134f3ff2c1136864626a8d0d2f2319c6c8a0a03d5500cb3ec0e1" prot="public">
          <name>NRF_MPC_MASTERPORT_4_MASK</name>
          <initializer>= MPC_REGION_MASTERPORT_ENABLE4_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Enable master port 4. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__mpc__hal_1gga89f734f107017134f3ff2c1136864626ae0c8a06e6520ffd7a128333b53eae1ed" prot="public">
          <name>NRF_MPC_MASTERPORT_5_MASK</name>
          <initializer>= MPC_REGION_MASTERPORT_ENABLE5_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Enable master port 5. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__mpc__hal_1gga89f734f107017134f3ff2c1136864626aa78b1ac5e174da4d23be61d3d848c307" prot="public">
          <name>NRF_MPC_MASTERPORT_6_MASK</name>
          <initializer>= MPC_REGION_MASTERPORT_ENABLE6_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Enable master port 6. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__mpc__hal_1gga89f734f107017134f3ff2c1136864626a8436ed84236cfdc080dfd18607d3104d" prot="public">
          <name>NRF_MPC_MASTERPORT_7_MASK</name>
          <initializer>= MPC_REGION_MASTERPORT_ENABLE7_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Enable master port 7. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__mpc__hal_1gga89f734f107017134f3ff2c1136864626a3ccbfb54e1ef110e13b796eadeb099f1" prot="public">
          <name>NRF_MPC_MASTERPORT_8_MASK</name>
          <initializer>= MPC_REGION_MASTERPORT_ENABLE8_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Enable master port 8. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__mpc__hal_1gga89f734f107017134f3ff2c1136864626ae9182adf98e9b7dd08cac1938fa4c3b8" prot="public">
          <name>NRF_MPC_MASTERPORT_9_MASK</name>
          <initializer>= MPC_REGION_MASTERPORT_ENABLE9_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Enable master port 9. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__mpc__hal_1gga89f734f107017134f3ff2c1136864626aa53e7ec9f08170d9206c9f2af034ce1c" prot="public">
          <name>NRF_MPC_MASTERPORT_10_MASK</name>
          <initializer>= MPC_REGION_MASTERPORT_ENABLE10_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Enable master port 10. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__mpc__hal_1gga89f734f107017134f3ff2c1136864626a4f507e6bc4cb0b2470370bbd76d21276" prot="public">
          <name>NRF_MPC_MASTERPORT_11_MASK</name>
          <initializer>= MPC_REGION_MASTERPORT_ENABLE11_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Enable master port 11. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__mpc__hal_1gga89f734f107017134f3ff2c1136864626aff37a9b46c2e54b063257ff36d20fb96" prot="public">
          <name>NRF_MPC_MASTERPORT_12_MASK</name>
          <initializer>= MPC_REGION_MASTERPORT_ENABLE12_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Enable master port 12. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__mpc__hal_1gga89f734f107017134f3ff2c1136864626a40a0275a3e23ae843380fd27b3d2a7d5" prot="public">
          <name>NRF_MPC_MASTERPORT_13_MASK</name>
          <initializer>= MPC_REGION_MASTERPORT_ENABLE13_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Enable master port 13. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__mpc__hal_1gga89f734f107017134f3ff2c1136864626a7b7cf1b2bf1f319c354013c347da4b28" prot="public">
          <name>NRF_MPC_MASTERPORT_14_MASK</name>
          <initializer>= MPC_REGION_MASTERPORT_ENABLE14_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Enable master port 14. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Masterport mask. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_mpc.h" line="119" column="1" bodyfile="hal/nrf_mpc.h" bodystart="120" bodyend="155"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__nrf__mpc__hal_1ga1efe7a5a8558565cc61d2c4f311d1cc1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE bool</type>
        <definition>NRF_STATIC_INLINE bool nrf_mpc_event_check</definition>
        <argsstring>(NRF_MPC_Type const *p_reg, nrf_mpc_event_t event)</argsstring>
        <name>nrf_mpc_event_check</name>
        <param>
          <type>NRF_MPC_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__mpc__hal_1ga934ee74ecdc1e369d8160adb9fc66720" kindref="member">nrf_mpc_event_t</ref></type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>Function for retrieving the state of the specified MPC event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event to be checked.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>The event has been generated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>The event has not been generated. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_mpc.h" line="678" column="24" bodyfile="hal/nrf_mpc.h" bodystart="678" bodyend="681" declfile="hal/nrf_mpc.h" declline="187" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__mpc__hal_1gaa90d4919d314628db3a9c6d042715522" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_mpc_event_clear</definition>
        <argsstring>(NRF_MPC_Type *p_reg, nrf_mpc_event_t event)</argsstring>
        <name>nrf_mpc_event_clear</name>
        <param>
          <type>NRF_MPC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__mpc__hal_1ga934ee74ecdc1e369d8160adb9fc66720" kindref="member">nrf_mpc_event_t</ref></type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>Function for clearing the specified MPC event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event to be cleared. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_mpc.h" line="683" column="24" bodyfile="hal/nrf_mpc.h" bodystart="683" bodyend="687" declfile="hal/nrf_mpc.h" declline="195" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__mpc__hal_1ga3904ca723acf510699a41b86c45ff6ba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_mpc_event_address_get</definition>
        <argsstring>(NRF_MPC_Type const *p_reg, nrf_mpc_event_t event)</argsstring>
        <name>nrf_mpc_event_address_get</name>
        <param>
          <type>NRF_MPC_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__mpc__hal_1ga934ee74ecdc1e369d8160adb9fc66720" kindref="member">nrf_mpc_event_t</ref></type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>Function for getting the address of the specified MPC event register. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event to get the address of.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Address of the specified event register. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_mpc.h" line="689" column="28" bodyfile="hal/nrf_mpc.h" bodystart="689" bodyend="693" declfile="hal/nrf_mpc.h" declline="205" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__mpc__hal_1ga25ca9fe6b6ebcf95172d18727eee35c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_mpc_int_enable</definition>
        <argsstring>(NRF_MPC_Type *p_reg, uint32_t mask)</argsstring>
        <name>nrf_mpc_int_enable</name>
        <param>
          <type>NRF_MPC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Function for enabling the specified interrupts. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of interrupts to be enabled. Use <ref refid="group__nrf__mpc__hal_1ga772315a021c75e1da4c2e3e063187507" kindref="member">nrf_mpc_int_mask_t</ref> values for bit masking. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_mpc.h" line="695" column="24" bodyfile="hal/nrf_mpc.h" bodystart="695" bodyend="698" declfile="hal/nrf_mpc.h" declline="215" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__mpc__hal_1ga1e22f8e05eb85b0ed1b14654c93abd7f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_mpc_int_enable_check</definition>
        <argsstring>(NRF_MPC_Type const *p_reg, uint32_t mask)</argsstring>
        <name>nrf_mpc_int_enable_check</name>
        <param>
          <type>NRF_MPC_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Function for checking if the specified interrupts are enabled. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of interrupts to be checked. Use <ref refid="group__nrf__mpc__hal_1ga772315a021c75e1da4c2e3e063187507" kindref="member">nrf_mpc_int_mask_t</ref> values for bit masking.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Mask of enabled interrupts. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_mpc.h" line="700" column="28" bodyfile="hal/nrf_mpc.h" bodystart="700" bodyend="703" declfile="hal/nrf_mpc.h" declline="226" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__mpc__hal_1gaf40309fcc06c2cac4f55186a6c093042" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_mpc_int_disable</definition>
        <argsstring>(NRF_MPC_Type *p_reg, uint32_t mask)</argsstring>
        <name>nrf_mpc_int_disable</name>
        <param>
          <type>NRF_MPC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Function for disabling the specified interrupts. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of interrupts to be disabled. Use <ref refid="group__nrf__mpc__hal_1ga772315a021c75e1da4c2e3e063187507" kindref="member">nrf_mpc_int_mask_t</ref> values for bit masking. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_mpc.h" line="705" column="24" bodyfile="hal/nrf_mpc.h" bodystart="705" bodyend="708" declfile="hal/nrf_mpc.h" declline="235" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__mpc__hal_1gacbff5f9ce331b63da982ea340f425c9a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_mpc_region_config_set</definition>
        <argsstring>(NRF_MPC_Type *p_reg, uint8_t index, nrf_mpc_region_config_t const *p_config)</argsstring>
        <name>nrf_mpc_region_config_set</name>
        <param>
          <type>NRF_MPC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>index</declname>
        </param>
        <param>
          <type><ref refid="structnrf__mpc__region__config__t" kindref="compound">nrf_mpc_region_config_t</ref> const *</type>
          <declname>p_config</declname>
        </param>
        <briefdescription>
<para>Function for setting configuration of the region. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">index</parametername>
</parameternamelist>
<parameterdescription>
<para>Region index. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">p_config</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of the region configuration parameters. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_mpc.h" line="710" column="24" bodyfile="hal/nrf_mpc.h" bodystart="710" bodyend="733" declfile="hal/nrf_mpc.h" declline="244" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__mpc__hal_1gab554feb151d3a8a84aa1ef49985b24b8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE <ref refid="structnrf__mpc__region__config__t" kindref="compound">nrf_mpc_region_config_t</ref></type>
        <definition>NRF_STATIC_INLINE nrf_mpc_region_config_t nrf_mpc_region_config_get</definition>
        <argsstring>(NRF_MPC_Type const *p_reg, uint8_t index)</argsstring>
        <name>nrf_mpc_region_config_get</name>
        <param>
          <type>NRF_MPC_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Function for getting configuration of the region. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">index</parametername>
</parameternamelist>
<parameterdescription>
<para>Region index.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Structure with configuration of the region. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_mpc.h" line="735" column="43" bodyfile="hal/nrf_mpc.h" bodystart="735" bodyend="760" declfile="hal/nrf_mpc.h" declline="256" declcolumn="43"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__mpc__hal_1ga7157d67ae0a98e234ee019202d106c40" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_mpc_region_startaddr_set</definition>
        <argsstring>(NRF_MPC_Type *p_reg, uint8_t index, uint32_t address)</argsstring>
        <name>nrf_mpc_region_startaddr_set</name>
        <param>
          <type>NRF_MPC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>index</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>address</declname>
        </param>
        <briefdescription>
<para>Function for setting start address of the region. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Address must be on a 4kB memory boundary.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">index</parametername>
</parameternamelist>
<parameterdescription>
<para>Region index. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">address</parametername>
</parameternamelist>
<parameterdescription>
<para>Address to be set. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_mpc.h" line="762" column="24" bodyfile="hal/nrf_mpc.h" bodystart="762" bodyend="770" declfile="hal/nrf_mpc.h" declline="268" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__mpc__hal_1ga32f4b879381393d713cce3491fb1e57a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_mpc_region_startaddr_get</definition>
        <argsstring>(NRF_MPC_Type const *p_reg, uint8_t index)</argsstring>
        <name>nrf_mpc_region_startaddr_get</name>
        <param>
          <type>NRF_MPC_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Function for getting start address of the region. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">index</parametername>
</parameternamelist>
<parameterdescription>
<para>Region index.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Start address of the region. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_mpc.h" line="772" column="28" bodyfile="hal/nrf_mpc.h" bodystart="772" bodyend="777" declfile="hal/nrf_mpc.h" declline="280" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__mpc__hal_1ga22f8d9a1f3e4fd561edbbdb88e143f6a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_mpc_region_addrmask_set</definition>
        <argsstring>(NRF_MPC_Type *p_reg, uint8_t index, uint32_t address)</argsstring>
        <name>nrf_mpc_region_addrmask_set</name>
        <param>
          <type>NRF_MPC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>index</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>address</declname>
        </param>
        <briefdescription>
<para>Function for setting address mask of the region. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Mask must be on a 4kB memory boundary.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">index</parametername>
</parameternamelist>
<parameterdescription>
<para>Region index. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">address</parametername>
</parameternamelist>
<parameterdescription>
<para>Address to be set. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_mpc.h" line="779" column="24" bodyfile="hal/nrf_mpc.h" bodystart="779" bodyend="787" declfile="hal/nrf_mpc.h" declline="291" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__mpc__hal_1gae5cffc828be3aca6ebdeac0461001f90" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_mpc_region_addrmask_get</definition>
        <argsstring>(NRF_MPC_Type const *p_reg, uint8_t index)</argsstring>
        <name>nrf_mpc_region_addrmask_get</name>
        <param>
          <type>NRF_MPC_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Function for getting address mask of the region. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">index</parametername>
</parameternamelist>
<parameterdescription>
<para>Region index.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Address mask of the region. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_mpc.h" line="789" column="28" bodyfile="hal/nrf_mpc.h" bodystart="789" bodyend="794" declfile="hal/nrf_mpc.h" declline="303" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__mpc__hal_1ga447c3ac18526b96414f7222acf308d75" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_mpc_region_masterport_set</definition>
        <argsstring>(NRF_MPC_Type *p_reg, uint8_t index, uint32_t mask)</argsstring>
        <name>nrf_mpc_region_masterport_set</name>
        <param>
          <type>NRF_MPC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>index</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Function for enabling the specified master ports of the region. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">index</parametername>
</parameternamelist>
<parameterdescription>
<para>Region index. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of master ports to be enabled, constructed from <ref refid="group__nrf__mpc__hal_1ga89f734f107017134f3ff2c1136864626" kindref="member">nrf_mpc_masterport_mask_t</ref> enumerator values. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_mpc.h" line="796" column="24" bodyfile="hal/nrf_mpc.h" bodystart="796" bodyend="803" declfile="hal/nrf_mpc.h" declline="313" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__mpc__hal_1gaf2ead7ef46873e85ffff2a217a3f1cd4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_mpc_region_masterport_get</definition>
        <argsstring>(NRF_MPC_Type const *p_reg, uint8_t index)</argsstring>
        <name>nrf_mpc_region_masterport_get</name>
        <param>
          <type>NRF_MPC_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Function for getting enabled master ports of the region. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">index</parametername>
</parameternamelist>
<parameterdescription>
<para>Region index.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Mask of enabled master ports, constructed from <ref refid="group__nrf__mpc__hal_1ga89f734f107017134f3ff2c1136864626" kindref="member">nrf_mpc_masterport_mask_t</ref> enumerator values. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_mpc.h" line="805" column="28" bodyfile="hal/nrf_mpc.h" bodystart="805" bodyend="810" declfile="hal/nrf_mpc.h" declline="326" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__mpc__hal_1ga39c507026fa171618a79101c6233ca8b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_mpc_override_config_set</definition>
        <argsstring>(NRF_MPC_Type *p_reg, uint8_t index, nrf_mpc_override_config_t const *p_config)</argsstring>
        <name>nrf_mpc_override_config_set</name>
        <param>
          <type>NRF_MPC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>index</declname>
        </param>
        <param>
          <type><ref refid="structnrf__mpc__override__config__t" kindref="compound">nrf_mpc_override_config_t</ref> const *</type>
          <declname>p_config</declname>
        </param>
        <briefdescription>
<para>Function for setting configuration of the override region. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">index</parametername>
</parameternamelist>
<parameterdescription>
<para>Override region index. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">p_config</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of the override region configuration parameters. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_mpc.h" line="812" column="24" bodyfile="hal/nrf_mpc.h" bodystart="812" bodyend="835" declfile="hal/nrf_mpc.h" declline="335" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__mpc__hal_1gac007fe07342b8eecba4932d41ed0efec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE <ref refid="structnrf__mpc__override__config__t" kindref="compound">nrf_mpc_override_config_t</ref></type>
        <definition>NRF_STATIC_INLINE nrf_mpc_override_config_t nrf_mpc_override_config_get</definition>
        <argsstring>(NRF_MPC_Type const *p_reg, uint8_t index)</argsstring>
        <name>nrf_mpc_override_config_get</name>
        <param>
          <type>NRF_MPC_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Function for getting configuration of the override region. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">index</parametername>
</parameternamelist>
<parameterdescription>
<para>Override region index.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Structure with configuration of the override region. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_mpc.h" line="837" column="45" bodyfile="hal/nrf_mpc.h" bodystart="837" bodyend="862" declfile="hal/nrf_mpc.h" declline="347" declcolumn="45"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__mpc__hal_1ga860c13495b30810658e923daae9307c9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_mpc_override_startaddr_set</definition>
        <argsstring>(NRF_MPC_Type *p_reg, uint8_t index, uint32_t address)</argsstring>
        <name>nrf_mpc_override_startaddr_set</name>
        <param>
          <type>NRF_MPC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>index</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>address</declname>
        </param>
        <briefdescription>
<para>Function for setting start address of the override region. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Address must be on a 4kB memory boundary.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">index</parametername>
</parameternamelist>
<parameterdescription>
<para>Override region index. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">address</parametername>
</parameternamelist>
<parameterdescription>
<para>Address to be set. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_mpc.h" line="864" column="24" bodyfile="hal/nrf_mpc.h" bodystart="864" bodyend="872" declfile="hal/nrf_mpc.h" declline="359" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__mpc__hal_1gae3d4c0b94e029e5c76125e12dee391cc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_mpc_override_startaddr_get</definition>
        <argsstring>(NRF_MPC_Type const *p_reg, uint8_t index)</argsstring>
        <name>nrf_mpc_override_startaddr_get</name>
        <param>
          <type>NRF_MPC_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Function for getting start address of the override region. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">index</parametername>
</parameternamelist>
<parameterdescription>
<para>Override region index.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Start address of the override region. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_mpc.h" line="874" column="28" bodyfile="hal/nrf_mpc.h" bodystart="874" bodyend="880" declfile="hal/nrf_mpc.h" declline="371" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__mpc__hal_1ga3788c87dd9420235f8965883202c9c78" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_mpc_override_endaddr_set</definition>
        <argsstring>(NRF_MPC_Type *p_reg, uint8_t index, uint32_t address)</argsstring>
        <name>nrf_mpc_override_endaddr_set</name>
        <param>
          <type>NRF_MPC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>index</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>address</declname>
        </param>
        <briefdescription>
<para>Function for setting end address of the override region. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Address must be on a 4kB memory boundary.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">index</parametername>
</parameternamelist>
<parameterdescription>
<para>Override region index. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">address</parametername>
</parameternamelist>
<parameterdescription>
<para>Address to be set. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_mpc.h" line="882" column="24" bodyfile="hal/nrf_mpc.h" bodystart="882" bodyend="890" declfile="hal/nrf_mpc.h" declline="383" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__mpc__hal_1gac05d65c913a5fa0c53ea112257da7969" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_mpc_override_endaddr_get</definition>
        <argsstring>(NRF_MPC_Type const *p_reg, uint8_t index)</argsstring>
        <name>nrf_mpc_override_endaddr_get</name>
        <param>
          <type>NRF_MPC_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Function for getting end address of the override region. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">index</parametername>
</parameternamelist>
<parameterdescription>
<para>Override region index.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>End address of the override region. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_mpc.h" line="892" column="28" bodyfile="hal/nrf_mpc.h" bodystart="892" bodyend="898" declfile="hal/nrf_mpc.h" declline="395" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__mpc__hal_1ga4360714e10c9b3a46f342b9084b34911" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_mpc_override_offset_set</definition>
        <argsstring>(NRF_MPC_Type *p_reg, uint8_t index, uint32_t offset)</argsstring>
        <name>nrf_mpc_override_offset_set</name>
        <param>
          <type>NRF_MPC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>index</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>offset</declname>
        </param>
        <briefdescription>
<para>Function for setting offset of the override region. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Offset will be left shifted before applying, creating a 33-bit signed integer.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">index</parametername>
</parameternamelist>
<parameterdescription>
<para>Override region index. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">offset</parametername>
</parameternamelist>
<parameterdescription>
<para>Address offset value divided by 2. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_mpc.h" line="901" column="24" bodyfile="hal/nrf_mpc.h" bodystart="901" bodyend="909" declfile="hal/nrf_mpc.h" declline="408" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__mpc__hal_1gaebfa2cf1848130f9c4bc17c814545e1a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_mpc_override_offset_get</definition>
        <argsstring>(NRF_MPC_Type const *p_reg, uint8_t index)</argsstring>
        <name>nrf_mpc_override_offset_get</name>
        <param>
          <type>NRF_MPC_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Function for getting offset of the override region. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Offset is left shifted before applying, creating a 33-bit signed integer.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">index</parametername>
</parameternamelist>
<parameterdescription>
<para>Override region index.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Address offset value divided by 2. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_mpc.h" line="911" column="28" bodyfile="hal/nrf_mpc.h" bodystart="911" bodyend="917" declfile="hal/nrf_mpc.h" declline="422" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__mpc__hal_1ga765e067757c5e85d628788848163ee95" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_mpc_override_perm_set</definition>
        <argsstring>(NRF_MPC_Type *p_reg, uint8_t index, uint32_t permissions)</argsstring>
        <name>nrf_mpc_override_perm_set</name>
        <param>
          <type>NRF_MPC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>index</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>permissions</declname>
        </param>
        <briefdescription>
<para>Function for setting permission settings for the override region. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">index</parametername>
</parameternamelist>
<parameterdescription>
<para>Override region index. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">permissions</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of permissions to be set, constructed from <ref refid="group__nrf__mpc__hal_1ga7647978ee34cb4523182c945f58551b9" kindref="member">nrf_mpc_permission_mask_t</ref> enumerator values. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_mpc.h" line="920" column="24" bodyfile="hal/nrf_mpc.h" bodystart="920" bodyend="927" declfile="hal/nrf_mpc.h" declline="434" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__mpc__hal_1gafced42e6003285cc6b93aef32c08715e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_mpc_override_perm_get</definition>
        <argsstring>(NRF_MPC_Type const *p_reg, uint8_t index)</argsstring>
        <name>nrf_mpc_override_perm_get</name>
        <param>
          <type>NRF_MPC_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Function for getting permission settings of the override region. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">index</parametername>
</parameternamelist>
<parameterdescription>
<para>Override region index.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Mask of permissions, constructed from <ref refid="group__nrf__mpc__hal_1ga7647978ee34cb4523182c945f58551b9" kindref="member">nrf_mpc_permission_mask_t</ref> enumerator values. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_mpc.h" line="929" column="28" bodyfile="hal/nrf_mpc.h" bodystart="929" bodyend="935" declfile="hal/nrf_mpc.h" declline="446" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__mpc__hal_1ga9baa4d2ef6d04d3c6125f2ed9493aaf5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_mpc_override_permmask_set</definition>
        <argsstring>(NRF_MPC_Type *p_reg, uint8_t index, uint32_t permissions)</argsstring>
        <name>nrf_mpc_override_permmask_set</name>
        <param>
          <type>NRF_MPC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>index</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>permissions</declname>
        </param>
        <briefdescription>
<para>Function for setting permission settings mask for the override region. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">index</parametername>
</parameternamelist>
<parameterdescription>
<para>Override region index. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">permissions</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of permissions settings mask to be set, constructed from <ref refid="group__nrf__mpc__hal_1ga7647978ee34cb4523182c945f58551b9" kindref="member">nrf_mpc_permission_mask_t</ref> enumerator values. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_mpc.h" line="937" column="24" bodyfile="hal/nrf_mpc.h" bodystart="937" bodyend="944" declfile="hal/nrf_mpc.h" declline="457" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__mpc__hal_1ga13a7fe4a399c7d24fcf9f9c7788c09c1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_mpc_override_permmask_get</definition>
        <argsstring>(NRF_MPC_Type const *p_reg, uint8_t index)</argsstring>
        <name>nrf_mpc_override_permmask_get</name>
        <param>
          <type>NRF_MPC_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Function for getting permission settings mask of the override region. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">index</parametername>
</parameternamelist>
<parameterdescription>
<para>Override region index.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Mask of permissions settings mask, constructed from <ref refid="group__nrf__mpc__hal_1ga7647978ee34cb4523182c945f58551b9" kindref="member">nrf_mpc_permission_mask_t</ref> enumerator values. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_mpc.h" line="946" column="28" bodyfile="hal/nrf_mpc.h" bodystart="946" bodyend="952" declfile="hal/nrf_mpc.h" declline="470" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__mpc__hal_1ga0fd600b1d367f88e6181ec42e9c1f842" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_mpc_override_ownerid_set</definition>
        <argsstring>(NRF_MPC_Type *p_reg, uint8_t index, nrf_owner_t owner_id)</argsstring>
        <name>nrf_mpc_override_ownerid_set</name>
        <param>
          <type>NRF_MPC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>index</declname>
        </param>
        <param>
          <type>nrf_owner_t</type>
          <declname>owner_id</declname>
        </param>
        <briefdescription>
<para>Function for setting owner ID for the override region. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">index</parametername>
</parameternamelist>
<parameterdescription>
<para>Override region index. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">owner_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Owner ID to be set. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_mpc.h" line="954" column="24" bodyfile="hal/nrf_mpc.h" bodystart="954" bodyend="962" declfile="hal/nrf_mpc.h" declline="480" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__mpc__hal_1ga36bb427a4979cd656667b8a08ad55ff4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE nrf_owner_t</type>
        <definition>NRF_STATIC_INLINE nrf_owner_t nrf_mpc_override_ownerid_get</definition>
        <argsstring>(NRF_MPC_Type *p_reg, uint8_t index)</argsstring>
        <name>nrf_mpc_override_ownerid_get</name>
        <param>
          <type>NRF_MPC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Function for getting owner ID of the override region. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">index</parametername>
</parameternamelist>
<parameterdescription>
<para>Override region index.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Owner ID of the overridde region. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_mpc.h" line="964" column="31" bodyfile="hal/nrf_mpc.h" bodystart="964" bodyend="969" declfile="hal/nrf_mpc.h" declline="492" declcolumn="31"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__mpc__hal_1gae79fb68d0f2cdb8bab520731e25b38e9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_mpc_override_masterport_set</definition>
        <argsstring>(NRF_MPC_Type *p_reg, uint8_t index, uint32_t mask)</argsstring>
        <name>nrf_mpc_override_masterport_set</name>
        <param>
          <type>NRF_MPC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>index</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Function for enabling the specified master ports of the override region. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">index</parametername>
</parameternamelist>
<parameterdescription>
<para>Override region index. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of master ports to be enabled, constructed from <ref refid="group__nrf__mpc__hal_1ga89f734f107017134f3ff2c1136864626" kindref="member">nrf_mpc_masterport_mask_t</ref> enumerator values. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_mpc.h" line="971" column="24" bodyfile="hal/nrf_mpc.h" bodystart="971" bodyend="978" declfile="hal/nrf_mpc.h" declline="502" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__mpc__hal_1ga398b9aad20b0735a4ada32812a3dd3d0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_mpc_override_masterport_get</definition>
        <argsstring>(NRF_MPC_Type const *p_reg, uint8_t index)</argsstring>
        <name>nrf_mpc_override_masterport_get</name>
        <param>
          <type>NRF_MPC_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Function for getting enabled master ports of the override region. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">index</parametername>
</parameternamelist>
<parameterdescription>
<para>Override region index.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Mask of enabled master ports, constructed from <ref refid="group__nrf__mpc__hal_1ga89f734f107017134f3ff2c1136864626" kindref="member">nrf_mpc_masterport_mask_t</ref> enumerator values. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_mpc.h" line="980" column="28" bodyfile="hal/nrf_mpc.h" bodystart="980" bodyend="986" declfile="hal/nrf_mpc.h" declline="515" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__mpc__hal_1gaaef975d68f3bb54b021d37ba1d64c9ce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_mpc_memaccerr_address_get</definition>
        <argsstring>(NRF_MPC_Type const *p_reg)</argsstring>
        <name>nrf_mpc_memaccerr_address_get</name>
        <param>
          <type>NRF_MPC_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting the memory address of memory access error. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Register content will not be changed as long as MEMACCERR event is active.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Target address for the errroneous access. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_mpc.h" line="988" column="28" bodyfile="hal/nrf_mpc.h" bodystart="988" bodyend="991" declfile="hal/nrf_mpc.h" declline="527" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__mpc__hal_1ga7b52f80f1b3190f2630418b740a8abbb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE nrf_owner_t</type>
        <definition>NRF_STATIC_INLINE nrf_owner_t nrf_mpc_memaccerr_info_ownerid_get</definition>
        <argsstring>(NRF_MPC_Type const *p_reg)</argsstring>
        <name>nrf_mpc_memaccerr_info_ownerid_get</name>
        <param>
          <type>NRF_MPC_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting the owner identifier of the transaction that triggered memory access error. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Register content will not be changed as long as MEMACCERR event is active.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Owner identifier of the errorneous access. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_mpc.h" line="993" column="31" bodyfile="hal/nrf_mpc.h" bodystart="993" bodyend="997" declfile="hal/nrf_mpc.h" declline="538" declcolumn="31"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__mpc__hal_1ga788b2a97dba99dfa03f09ef727c178d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint8_t</type>
        <definition>NRF_STATIC_INLINE uint8_t nrf_mpc_memaccerr_info_masterport_get</definition>
        <argsstring>(NRF_MPC_Type const *p_reg)</argsstring>
        <name>nrf_mpc_memaccerr_info_masterport_get</name>
        <param>
          <type>NRF_MPC_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting the master port of the transaction that triggered memory access error. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Register content will not be changed as long as MEMACCERR event is active.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Master port where errorneous access is detected. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_mpc.h" line="999" column="27" bodyfile="hal/nrf_mpc.h" bodystart="999" bodyend="1003" declfile="hal/nrf_mpc.h" declline="549" declcolumn="27"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__mpc__hal_1gaeca19e5b26e7b6504cc179e01ed93f05" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_mpc_memaccerr_info_perm_get</definition>
        <argsstring>(NRF_MPC_Type const *p_reg)</argsstring>
        <name>nrf_mpc_memaccerr_info_perm_get</name>
        <param>
          <type>NRF_MPC_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting the permissions of the transaction that triggered memory access error. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Register content will not be changed as long as MEMACCERR event is active.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Permission settings of the errorneous access. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_mpc.h" line="1005" column="28" bodyfile="hal/nrf_mpc.h" bodystart="1005" bodyend="1011" declfile="hal/nrf_mpc.h" declline="560" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__mpc__hal_1gad5eedb315b47a18f9965755353a60f31" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE <ref refid="group__nrf__mpc__hal_1ga7a52bbfed00c736a7ee0f49896fa4081" kindref="member">nrf_mpc_errorsource_t</ref></type>
        <definition>NRF_STATIC_INLINE nrf_mpc_errorsource_t nrf_mpc_memaccerr_info_errorsource_get</definition>
        <argsstring>(NRF_MPC_Type const *p_reg)</argsstring>
        <name>nrf_mpc_memaccerr_info_errorsource_get</name>
        <param>
          <type>NRF_MPC_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting the source of the transaction that triggered memory access error. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Register content will not be changed as long as MEMACCERR event is active.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Source of the errorneous access. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_mpc.h" line="1014" column="1" bodyfile="hal/nrf_mpc.h" bodystart="1014" bodyend="1018" declfile="hal/nrf_mpc.h" declline="572" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__mpc__hal_1gaeec50c60a288767deb1587481edbe762" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_mpc_globalslave_masterport_set</definition>
        <argsstring>(NRF_MPC_Type *p_reg, uint32_t mask)</argsstring>
        <name>nrf_mpc_globalslave_masterport_set</name>
        <param>
          <type>NRF_MPC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Function for enabling the specified master ports connection to global slave. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of master ports to be connected, constructed from <ref refid="group__nrf__mpc__hal_1ga89f734f107017134f3ff2c1136864626" kindref="member">nrf_mpc_masterport_mask_t</ref> enumerator values. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_mpc.h" line="1020" column="24" bodyfile="hal/nrf_mpc.h" bodystart="1020" bodyend="1023" declfile="hal/nrf_mpc.h" declline="581" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__mpc__hal_1ga0aae47ddb1607ea45e94b1f8bd281e85" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_mpc_globalslave_masterport_get</definition>
        <argsstring>(NRF_MPC_Type const *p_reg)</argsstring>
        <name>nrf_mpc_globalslave_masterport_get</name>
        <param>
          <type>NRF_MPC_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting enabled master ports connection to global slave. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Mask of master ports connected, constructed from <ref refid="group__nrf__mpc__hal_1ga89f734f107017134f3ff2c1136864626" kindref="member">nrf_mpc_masterport_mask_t</ref> enumerator values. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_mpc.h" line="1025" column="28" bodyfile="hal/nrf_mpc.h" bodystart="1025" bodyend="1028" declfile="hal/nrf_mpc.h" declline="591" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__mpc__hal_1gae6edfd83d8f3f243e4637a3152d829f7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_mpc_globalslave_lock_enable</definition>
        <argsstring>(NRF_MPC_Type *p_reg)</argsstring>
        <name>nrf_mpc_globalslave_lock_enable</name>
        <param>
          <type>NRF_MPC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for enabling the global slave registers lock. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>When global slave registers is enabled, modifying the global slave configuration is not possible.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_mpc.h" line="1030" column="24" bodyfile="hal/nrf_mpc.h" bodystart="1030" bodyend="1033" declfile="hal/nrf_mpc.h" declline="601" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__mpc__hal_1ga6a6e9ce5f593eca645894a5d5ca0aa1e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE bool</type>
        <definition>NRF_STATIC_INLINE bool nrf_mpc_globalslave_lock_check</definition>
        <argsstring>(NRF_MPC_Type const *p_reg)</argsstring>
        <name>nrf_mpc_globalslave_lock_check</name>
        <param>
          <type>NRF_MPC_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting the status of the global slave registers lock. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>When global slave registers is enabled, modifying the global slave configuration is not possible.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if global slave registers are locked, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_mpc.h" line="1035" column="24" bodyfile="hal/nrf_mpc.h" bodystart="1035" bodyend="1039" declfile="hal/nrf_mpc.h" declline="613" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__mpc__hal_1gac611c03b4cabceedf8df9694361a6f66" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_mpc_rtchoke_writeaccess_set</definition>
        <argsstring>(NRF_MPC_Type *p_reg, uint32_t mask)</argsstring>
        <name>nrf_mpc_rtchoke_writeaccess_set</name>
        <param>
          <type>NRF_MPC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Function for enabling the AXI Write Address Channel Real Time Choke for specified master ports. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of master ports to have the Write Real Time Choke enabled, constructed from <ref refid="group__nrf__mpc__hal_1ga89f734f107017134f3ff2c1136864626" kindref="member">nrf_mpc_masterport_mask_t</ref> enumerator values. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_mpc.h" line="1042" column="24" bodyfile="hal/nrf_mpc.h" bodystart="1042" bodyend="1045" declfile="hal/nrf_mpc.h" declline="623" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__mpc__hal_1ga2ddf36ab7898e4415c2a2334198598d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_mpc_rtchoke_writeaccess_get</definition>
        <argsstring>(NRF_MPC_Type const *p_reg)</argsstring>
        <name>nrf_mpc_rtchoke_writeaccess_get</name>
        <param>
          <type>NRF_MPC_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting master ports with enabled AXI Write Address Channel Real Time Choke. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Mask of master ports with the Write Real Time Choke enabled, constructed from <ref refid="group__nrf__mpc__hal_1ga89f734f107017134f3ff2c1136864626" kindref="member">nrf_mpc_masterport_mask_t</ref> enumerator values. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_mpc.h" line="1047" column="28" bodyfile="hal/nrf_mpc.h" bodystart="1047" bodyend="1050" declfile="hal/nrf_mpc.h" declline="633" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__mpc__hal_1ga13bb38ea31028aae2aac0ee3e091b21e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_mpc_rtchoke_readaccess_set</definition>
        <argsstring>(NRF_MPC_Type *p_reg, uint32_t mask)</argsstring>
        <name>nrf_mpc_rtchoke_readaccess_set</name>
        <param>
          <type>NRF_MPC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Function for enabling the AXI Read Address Channel Real Time Choke for specified master ports. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of master ports to have the Read Real Time Choke enabled, constructed from <ref refid="group__nrf__mpc__hal_1ga89f734f107017134f3ff2c1136864626" kindref="member">nrf_mpc_masterport_mask_t</ref> enumerator values. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_mpc.h" line="1052" column="24" bodyfile="hal/nrf_mpc.h" bodystart="1052" bodyend="1055" declfile="hal/nrf_mpc.h" declline="642" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__mpc__hal_1ga5e448fe5c32baa27c83d191623623249" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_mpc_rtchoke_readaccess_get</definition>
        <argsstring>(NRF_MPC_Type const *p_reg)</argsstring>
        <name>nrf_mpc_rtchoke_readaccess_get</name>
        <param>
          <type>NRF_MPC_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting master ports with enabled AXI Read Address Channel Real Time Choke. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Mask of master ports with the Read Real Time Choke enabled, constructed from <ref refid="group__nrf__mpc__hal_1ga89f734f107017134f3ff2c1136864626" kindref="member">nrf_mpc_masterport_mask_t</ref> enumerator values. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_mpc.h" line="1057" column="28" bodyfile="hal/nrf_mpc.h" bodystart="1057" bodyend="1060" declfile="hal/nrf_mpc.h" declline="652" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__mpc__hal_1gad8417da63a1d979fbb0640f5863c4324" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_mpc_rtchoke_delay_set</definition>
        <argsstring>(NRF_MPC_Type *p_reg, uint8_t slave, uint8_t delay)</argsstring>
        <name>nrf_mpc_rtchoke_delay_set</name>
        <param>
          <type>NRF_MPC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>slave</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>delay</declname>
        </param>
        <briefdescription>
<para>Function for setting the Real Time Choke delay for the specified slave. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">slave</parametername>
</parameternamelist>
<parameterdescription>
<para>Slave number. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">delay</parametername>
</parameternamelist>
<parameterdescription>
<para>Delay value to be set. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_mpc.h" line="1062" column="24" bodyfile="hal/nrf_mpc.h" bodystart="1062" bodyend="1069" declfile="hal/nrf_mpc.h" declline="661" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__mpc__hal_1ga175f2577dab13295cdaec1156517ba2c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint8_t</type>
        <definition>NRF_STATIC_INLINE uint8_t nrf_mpc_rtchoke_delay_get</definition>
        <argsstring>(NRF_MPC_Type const *p_reg, uint8_t slave)</argsstring>
        <name>nrf_mpc_rtchoke_delay_get</name>
        <param>
          <type>NRF_MPC_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>slave</declname>
        </param>
        <briefdescription>
<para>Function for getting the Real Time Choke delay for the specified slave. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">slave</parametername>
</parameternamelist>
<parameterdescription>
<para>Slave number.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Delay value for slave. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_mpc.h" line="1071" column="27" bodyfile="hal/nrf_mpc.h" bodystart="1071" bodyend="1076" declfile="hal/nrf_mpc.h" declline="673" declcolumn="27"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2023<sp/>-<sp/>2024,<sp/>Nordic<sp/>Semiconductor<sp/>ASA</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>All<sp/>rights<sp/>reserved.</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>SPDX-License-Identifier:<sp/>BSD-3-Clause</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions<sp/>are<sp/>met:</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>1.<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright<sp/>notice,<sp/>this</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>2.<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the<sp/>distribution.</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/>3.<sp/>Neither<sp/>the<sp/>name<sp/>of<sp/>the<sp/>copyright<sp/>holder<sp/>nor<sp/>the<sp/>names<sp/>of<sp/>its</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>contributors<sp/>may<sp/>be<sp/>used<sp/>to<sp/>endorse<sp/>or<sp/>promote<sp/>products<sp/>derived<sp/>from<sp/>this</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>software<sp/>without<sp/>specific<sp/>prior<sp/>written<sp/>permission.</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>COPYRIGHT<sp/>HOLDERS<sp/>AND<sp/>CONTRIBUTORS<sp/>&quot;AS<sp/>IS&quot;</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/>AND<sp/>ANY<sp/>EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>THE</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*<sp/>ARE<sp/>DISCLAIMED.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>COPYRIGHT<sp/>HOLDER<sp/>OR<sp/>CONTRIBUTORS<sp/>BE</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,<sp/>SPECIAL,<sp/>EXEMPLARY,<sp/>OR</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>PROCUREMENT<sp/>OF</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>*<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,<sp/>DATA,<sp/>OR<sp/>PROFITS;<sp/>OR<sp/>BUSINESS</highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/>*<sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY<sp/>THEORY<sp/>OF<sp/>LIABILITY,<sp/>WHETHER<sp/>IN</highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/>*<sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR<sp/>OTHERWISE)</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/>*<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE<sp/>OF<sp/>THIS<sp/>SOFTWARE,<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/>*<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight></codeline>
<codeline lineno="32"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>NRF_MPC_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_MPC_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;nrfx.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="43"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="44"><highlight class="comment"><sp/>*<sp/>@defgroup<sp/>nrf_mpc_hal<sp/>MPC<sp/>HAL</highlight></codeline>
<codeline lineno="45"><highlight class="comment"><sp/>*<sp/>@{</highlight></codeline>
<codeline lineno="46"><highlight class="comment"><sp/>*<sp/>@ingroup<sp/>nrf_mpc</highlight></codeline>
<codeline lineno="47"><highlight class="comment"><sp/>*<sp/>@brief<sp/><sp/><sp/>Hardware<sp/>access<sp/>layer<sp/>for<sp/>managing<sp/>the<sp/>Memory<sp/>Privilege<sp/>Controller<sp/>(MPC)</highlight></codeline>
<codeline lineno="48"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>peripheral.</highlight></codeline>
<codeline lineno="49"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MPC_RTCHOKE_WRITEACCESS_ENABLE0_Msk)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="52"><highlight class="comment">/**<sp/>@brief<sp/>Symbol<sp/>indicating<sp/>whether<sp/>RTCHOKE<sp/>functionality<sp/>is<sp/>present.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_MPC_HAS_RTCHOKE<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_MPC_HAS_RTCHOKE<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MPC_OVERRIDE_CONFIG_SECDOMENABLE_Msk)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="59"><highlight class="comment">/**<sp/>@brief<sp/>Symbol<sp/>indicating<sp/>whether<sp/>SECDOM<sp/>functionality<sp/>is<sp/>present.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_MPC_HAS_SECDOM<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_MPC_HAS_SECDOM<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MPC_OVERRIDE_OFFSET_OFFSET_Msk)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="66"><highlight class="comment">/**<sp/>@brief<sp/>Symbol<sp/>indicating<sp/>whether<sp/>OVERRIDE<sp/>OFFSET<sp/>functionality<sp/>is<sp/>present.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_MPC_HAS_OVERRIDE_OFFSET<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_MPC_HAS_OVERRIDE_OFFSET<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="72"><highlight class="comment">/**<sp/>@brief<sp/>Number<sp/>of<sp/>regions.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_MPC_REGION_COUNT<sp/><sp/><sp/>MPC_REGION_MaxCount</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="75"><highlight class="comment">/**<sp/>@brief<sp/>Number<sp/>of<sp/>override<sp/>regions.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_MPC_OVERRIDE_COUNT<sp/>MPC_OVERRIDE_MaxCount</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="78"><highlight class="comment">/**<sp/>@brief<sp/>Number<sp/>of<sp/>master<sp/>ports.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_MPC_MASTER_PORTS_COUNT<sp/>MPC_MASTER_PORTS_MaxCount</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_MPC_HAS_RTCHOKE</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="82"><highlight class="comment">/**<sp/>@brief<sp/>Number<sp/>of<sp/>Real<sp/>Time<sp/>Choke<sp/>slaves.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_MPC_RTCHOKE_COUNT<sp/><sp/>MPC_RTCHOKE_DELAY_MaxCount</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="86"><highlight class="comment">/**<sp/>@brief<sp/>MPC<sp/>events.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal">{</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__mpc__hal_1gga934ee74ecdc1e369d8160adb9fc66720a22af0570a23c55c1853b69faf805c232" kindref="member">NRF_MPC_EVENT_MEMACCERR</ref><sp/>=<sp/>offsetof(NRF_MPC_Type,<sp/>EVENTS_MEMACCERR),<sp/></highlight><highlight class="comment">/**&lt;<sp/>Memory<sp/>access<sp/>error.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal">}<sp/><ref refid="group__nrf__mpc__hal_1ga934ee74ecdc1e369d8160adb9fc66720" kindref="member">nrf_mpc_event_t</ref>;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="92"><highlight class="comment">/**<sp/>@brief<sp/>MPC<sp/>interrupts.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal">{</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__mpc__hal_1gga772315a021c75e1da4c2e3e063187507ae01bcfb89be5b3c40fed1fc219d9643c" kindref="member">NRF_MPC_INT_MEMACCERR_MASK</ref><sp/>=<sp/>MPC_INTENSET_MEMACCERR_Msk,<sp/></highlight><highlight class="comment">/**&lt;<sp/>Interrupt<sp/>on<sp/>MEMACCERR<sp/>event.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal">}<sp/><ref refid="group__nrf__mpc__hal_1ga772315a021c75e1da4c2e3e063187507" kindref="member">nrf_mpc_int_mask_t</ref>;</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="98"><highlight class="comment">/**<sp/>@brief<sp/>Error<sp/>sources.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal">{</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__mpc__hal_1gga7a52bbfed00c736a7ee0f49896fa4081a64cb903a31aa57615e678d5c7d1eafa3" kindref="member">NRF_MPC_ERRORSOURCE_SLAVE</ref><sp/>=<sp/>MPC_MEMACCERR_INFO_ERRORSOURCE_Slave,<sp/></highlight><highlight class="comment">/**&lt;<sp/>Error<sp/>was<sp/>triggered<sp/>by<sp/>an<sp/>AXI<sp/>slave.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__mpc__hal_1gga7a52bbfed00c736a7ee0f49896fa4081aef720a89162160fcd8414c59dfe9256b" kindref="member">NRF_MPC_ERRORSOURCE_MPC</ref><sp/><sp/><sp/>=<sp/>MPC_MEMACCERR_INFO_ERRORSOURCE_MPC,<sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Error<sp/>was<sp/>triggered<sp/>by<sp/>MCP<sp/>module.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal">}<sp/><ref refid="group__nrf__mpc__hal_1ga7a52bbfed00c736a7ee0f49896fa4081" kindref="member">nrf_mpc_errorsource_t</ref>;</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="105"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="106"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Permissions<sp/>mask.</highlight></codeline>
<codeline lineno="107"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="108"><highlight class="comment"><sp/>*<sp/>@note<sp/>This<sp/>enum<sp/>may<sp/>be<sp/>used<sp/>for<sp/>both<sp/>permission<sp/>settings<sp/>and<sp/>permission<sp/>settings<sp/>mask.</highlight></codeline>
<codeline lineno="109"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal">{</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__mpc__hal_1gga7647978ee34cb4523182c945f58551b9a1c509f1ebed48d6867afccc726a4043b" kindref="member">NRF_MPC_PERM_READ_MASK</ref><sp/><sp/><sp/><sp/>=<sp/>MPC_OVERRIDE_PERM_READ_Msk,<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Read<sp/>access.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__mpc__hal_1gga7647978ee34cb4523182c945f58551b9a558f07197637e5a0b8a2a2f921fd447d" kindref="member">NRF_MPC_PERM_WRITE_MASK</ref><sp/><sp/><sp/>=<sp/>MPC_OVERRIDE_PERM_WRITE_Msk,<sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Write<sp/>access.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__mpc__hal_1gga7647978ee34cb4523182c945f58551b9a79c6b09eb35c7aad331e55d236dd2c70" kindref="member">NRF_MPC_PERM_EXECUTE_MASK</ref><sp/>=<sp/>MPC_OVERRIDE_PERM_EXECUTE_Msk,<sp/></highlight><highlight class="comment">/**&lt;<sp/>Software<sp/>execute.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__mpc__hal_1gga7647978ee34cb4523182c945f58551b9a262e5d8389b70a706fc90ee7bedfc21b" kindref="member">NRF_MPC_PERM_SECURE_MASK</ref><sp/><sp/>=<sp/>MPC_OVERRIDE_PERM_SECATTR_Msk,<sp/></highlight><highlight class="comment">/**&lt;<sp/>Security<sp/>mapping.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal">}<sp/><ref refid="group__nrf__mpc__hal_1ga7647978ee34cb4523182c945f58551b9" kindref="member">nrf_mpc_permission_mask_t</ref>;</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="118"><highlight class="comment">/**<sp/>@brief<sp/>Masterport<sp/>mask.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal">{</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__mpc__hal_1gga89f734f107017134f3ff2c1136864626a43c186c29e44d048d4d7fe4ff28a652e" kindref="member">NRF_MPC_MASTERPORT_0_MASK</ref><sp/><sp/>=<sp/>MPC_REGION_MASTERPORT_ENABLE0_Msk,<sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Enable<sp/>master<sp/>port<sp/>0.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__mpc__hal_1gga89f734f107017134f3ff2c1136864626a7de1a72c217938e2df33c57e5c1d1dfd" kindref="member">NRF_MPC_MASTERPORT_1_MASK</ref><sp/><sp/>=<sp/>MPC_REGION_MASTERPORT_ENABLE1_Msk,<sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Enable<sp/>master<sp/>port<sp/>1.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__mpc__hal_1gga89f734f107017134f3ff2c1136864626a01c63fbb707890de841006fda673c7a0" kindref="member">NRF_MPC_MASTERPORT_2_MASK</ref><sp/><sp/>=<sp/>MPC_REGION_MASTERPORT_ENABLE2_Msk,<sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Enable<sp/>master<sp/>port<sp/>2.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__mpc__hal_1gga89f734f107017134f3ff2c1136864626a2e60961c3d173af19e69bb72d89359b0" kindref="member">NRF_MPC_MASTERPORT_3_MASK</ref><sp/><sp/>=<sp/>MPC_REGION_MASTERPORT_ENABLE3_Msk,<sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Enable<sp/>master<sp/>port<sp/>3.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__mpc__hal_1gga89f734f107017134f3ff2c1136864626a8d0d2f2319c6c8a0a03d5500cb3ec0e1" kindref="member">NRF_MPC_MASTERPORT_4_MASK</ref><sp/><sp/>=<sp/>MPC_REGION_MASTERPORT_ENABLE4_Msk,<sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Enable<sp/>master<sp/>port<sp/>4.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__mpc__hal_1gga89f734f107017134f3ff2c1136864626ae0c8a06e6520ffd7a128333b53eae1ed" kindref="member">NRF_MPC_MASTERPORT_5_MASK</ref><sp/><sp/>=<sp/>MPC_REGION_MASTERPORT_ENABLE5_Msk,<sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Enable<sp/>master<sp/>port<sp/>5.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__mpc__hal_1gga89f734f107017134f3ff2c1136864626aa78b1ac5e174da4d23be61d3d848c307" kindref="member">NRF_MPC_MASTERPORT_6_MASK</ref><sp/><sp/>=<sp/>MPC_REGION_MASTERPORT_ENABLE6_Msk,<sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Enable<sp/>master<sp/>port<sp/>6.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__mpc__hal_1gga89f734f107017134f3ff2c1136864626a8436ed84236cfdc080dfd18607d3104d" kindref="member">NRF_MPC_MASTERPORT_7_MASK</ref><sp/><sp/>=<sp/>MPC_REGION_MASTERPORT_ENABLE7_Msk,<sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Enable<sp/>master<sp/>port<sp/>7.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__mpc__hal_1gga89f734f107017134f3ff2c1136864626a3ccbfb54e1ef110e13b796eadeb099f1" kindref="member">NRF_MPC_MASTERPORT_8_MASK</ref><sp/><sp/>=<sp/>MPC_REGION_MASTERPORT_ENABLE8_Msk,<sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Enable<sp/>master<sp/>port<sp/>8.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__mpc__hal_1gga89f734f107017134f3ff2c1136864626ae9182adf98e9b7dd08cac1938fa4c3b8" kindref="member">NRF_MPC_MASTERPORT_9_MASK</ref><sp/><sp/>=<sp/>MPC_REGION_MASTERPORT_ENABLE9_Msk,<sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Enable<sp/>master<sp/>port<sp/>9.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__mpc__hal_1gga89f734f107017134f3ff2c1136864626aa53e7ec9f08170d9206c9f2af034ce1c" kindref="member">NRF_MPC_MASTERPORT_10_MASK</ref><sp/>=<sp/>MPC_REGION_MASTERPORT_ENABLE10_Msk,<sp/></highlight><highlight class="comment">/**&lt;<sp/>Enable<sp/>master<sp/>port<sp/>10.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__mpc__hal_1gga89f734f107017134f3ff2c1136864626a4f507e6bc4cb0b2470370bbd76d21276" kindref="member">NRF_MPC_MASTERPORT_11_MASK</ref><sp/>=<sp/>MPC_REGION_MASTERPORT_ENABLE11_Msk,<sp/></highlight><highlight class="comment">/**&lt;<sp/>Enable<sp/>master<sp/>port<sp/>11.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__mpc__hal_1gga89f734f107017134f3ff2c1136864626aff37a9b46c2e54b063257ff36d20fb96" kindref="member">NRF_MPC_MASTERPORT_12_MASK</ref><sp/>=<sp/>MPC_REGION_MASTERPORT_ENABLE12_Msk,<sp/></highlight><highlight class="comment">/**&lt;<sp/>Enable<sp/>master<sp/>port<sp/>12.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__mpc__hal_1gga89f734f107017134f3ff2c1136864626a40a0275a3e23ae843380fd27b3d2a7d5" kindref="member">NRF_MPC_MASTERPORT_13_MASK</ref><sp/>=<sp/>MPC_REGION_MASTERPORT_ENABLE13_Msk,<sp/></highlight><highlight class="comment">/**&lt;<sp/>Enable<sp/>master<sp/>port<sp/>13.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__mpc__hal_1gga89f734f107017134f3ff2c1136864626a7b7cf1b2bf1f319c354013c347da4b28" kindref="member">NRF_MPC_MASTERPORT_14_MASK</ref><sp/>=<sp/>MPC_REGION_MASTERPORT_ENABLE14_Msk,<sp/></highlight><highlight class="comment">/**&lt;<sp/>Enable<sp/>master<sp/>port<sp/>14.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(NRF_MPC_MASTER_PORTS_COUNT<sp/>&gt;<sp/>15)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/>NRF_MPC_MASTERPORT_15_MASK<sp/>=<sp/>MPC_REGION_MASTERPORT_ENABLE15_Msk,<sp/></highlight><highlight class="comment">/**&lt;<sp/>Enable<sp/>master<sp/>port<sp/>15.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/>NRF_MPC_MASTERPORT_16_MASK<sp/>=<sp/>MPC_REGION_MASTERPORT_ENABLE16_Msk,<sp/></highlight><highlight class="comment">/**&lt;<sp/>Enable<sp/>master<sp/>port<sp/>16.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/>NRF_MPC_MASTERPORT_17_MASK<sp/>=<sp/>MPC_REGION_MASTERPORT_ENABLE17_Msk,<sp/></highlight><highlight class="comment">/**&lt;<sp/>Enable<sp/>master<sp/>port<sp/>17.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/>NRF_MPC_MASTERPORT_18_MASK<sp/>=<sp/>MPC_REGION_MASTERPORT_ENABLE18_Msk,<sp/></highlight><highlight class="comment">/**&lt;<sp/>Enable<sp/>master<sp/>port<sp/>18.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/>NRF_MPC_MASTERPORT_19_MASK<sp/>=<sp/>MPC_REGION_MASTERPORT_ENABLE19_Msk,<sp/></highlight><highlight class="comment">/**&lt;<sp/>Enable<sp/>master<sp/>port<sp/>19.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/>NRF_MPC_MASTERPORT_20_MASK<sp/>=<sp/>MPC_REGION_MASTERPORT_ENABLE20_Msk,<sp/></highlight><highlight class="comment">/**&lt;<sp/>Enable<sp/>master<sp/>port<sp/>20.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/>NRF_MPC_MASTERPORT_21_MASK<sp/>=<sp/>MPC_REGION_MASTERPORT_ENABLE21_Msk,<sp/></highlight><highlight class="comment">/**&lt;<sp/>Enable<sp/>master<sp/>port<sp/>21.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/>NRF_MPC_MASTERPORT_22_MASK<sp/>=<sp/>MPC_REGION_MASTERPORT_ENABLE22_Msk,<sp/></highlight><highlight class="comment">/**&lt;<sp/>Enable<sp/>master<sp/>port<sp/>22.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/>NRF_MPC_MASTERPORT_23_MASK<sp/>=<sp/>MPC_REGION_MASTERPORT_ENABLE23_Msk,<sp/></highlight><highlight class="comment">/**&lt;<sp/>Enable<sp/>master<sp/>port<sp/>23.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/>NRF_MPC_MASTERPORT_24_MASK<sp/>=<sp/>MPC_REGION_MASTERPORT_ENABLE24_Msk,<sp/></highlight><highlight class="comment">/**&lt;<sp/>Enable<sp/>master<sp/>port<sp/>24.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/>NRF_MPC_MASTERPORT_25_MASK<sp/>=<sp/>MPC_REGION_MASTERPORT_ENABLE25_Msk,<sp/></highlight><highlight class="comment">/**&lt;<sp/>Enable<sp/>master<sp/>port<sp/>25.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/>NRF_MPC_MASTERPORT_26_MASK<sp/>=<sp/>MPC_REGION_MASTERPORT_ENABLE26_Msk,<sp/></highlight><highlight class="comment">/**&lt;<sp/>Enable<sp/>master<sp/>port<sp/>26.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/>NRF_MPC_MASTERPORT_27_MASK<sp/>=<sp/>MPC_REGION_MASTERPORT_ENABLE27_Msk,<sp/></highlight><highlight class="comment">/**&lt;<sp/>Enable<sp/>master<sp/>port<sp/>27.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/>NRF_MPC_MASTERPORT_28_MASK<sp/>=<sp/>MPC_REGION_MASTERPORT_ENABLE28_Msk,<sp/></highlight><highlight class="comment">/**&lt;<sp/>Enable<sp/>master<sp/>port<sp/>28.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/>NRF_MPC_MASTERPORT_29_MASK<sp/>=<sp/>MPC_REGION_MASTERPORT_ENABLE29_Msk,<sp/></highlight><highlight class="comment">/**&lt;<sp/>Enable<sp/>master<sp/>port<sp/>29.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/>NRF_MPC_MASTERPORT_30_MASK<sp/>=<sp/>MPC_REGION_MASTERPORT_ENABLE30_Msk,<sp/></highlight><highlight class="comment">/**&lt;<sp/>Enable<sp/>master<sp/>port<sp/>30.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/>NRF_MPC_MASTERPORT_31_MASK<sp/>=<sp/>MPC_REGION_MASTERPORT_ENABLE31_Msk,<sp/></highlight><highlight class="comment">/**&lt;<sp/>Enable<sp/>master<sp/>port<sp/>31.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal">}<sp/><ref refid="group__nrf__mpc__hal_1ga89f734f107017134f3ff2c1136864626" kindref="member">nrf_mpc_masterport_mask_t</ref>;</highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="157"><highlight class="comment">/**<sp/>@brief<sp/>Region<sp/>configuration.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="158" refid="structnrf__mpc__region__config__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal">{</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/>slave_number;<sp/></highlight><highlight class="comment">/**&lt;<sp/>Target<sp/>slave<sp/>number.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lock;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Lock<sp/>region<sp/>until<sp/>next<sp/>reset.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>enable;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Enable<sp/>region.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/>nrf_owner_t<sp/>owner;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Owner<sp/>identifier.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/>permissions;<sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Permissions.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal">}<sp/><ref refid="structnrf__mpc__region__config__t" kindref="compound">nrf_mpc_region_config_t</ref>;</highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="167"><highlight class="comment">/**<sp/>@brief<sp/>Override<sp/>region<sp/>configuration.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="168" refid="structnrf__mpc__override__config__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal">{</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>slave_number;<sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Target<sp/>slave<sp/>number.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>lock;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Lock<sp/>region<sp/>until<sp/>next<sp/>reset.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>enable;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Enable<sp/>region.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>secdom_enable;<sp/></highlight><highlight class="comment">/**&lt;<sp/>Enable<sp/>overriding<sp/>of<sp/>secure<sp/>domain<sp/>permissions.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>secure_mask;<sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Secure<sp/>mask.<sp/>Read<sp/>only.</highlight></codeline>
<codeline lineno="175"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>If<sp/>set,<sp/>the<sp/>bit<sp/>28<sp/>of<sp/>the<sp/>transaction<sp/>is<sp/>ignored<sp/>while<sp/>address<sp/>matching.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal">}<sp/><ref refid="structnrf__mpc__override__config__t" kindref="compound">nrf_mpc_override_config_t</ref>;</highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="178"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="179"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>retrieving<sp/>the<sp/>state<sp/>of<sp/>the<sp/>specified<sp/>MPC<sp/>event.</highlight></codeline>
<codeline lineno="180"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="181"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="182"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>event<sp/>Event<sp/>to<sp/>be<sp/>checked.</highlight></codeline>
<codeline lineno="183"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="184"><highlight class="comment"><sp/>*<sp/>@retval<sp/>true<sp/><sp/>The<sp/>event<sp/>has<sp/>been<sp/>generated.</highlight></codeline>
<codeline lineno="185"><highlight class="comment"><sp/>*<sp/>@retval<sp/>false<sp/>The<sp/>event<sp/>has<sp/>not<sp/>been<sp/>generated.</highlight></codeline>
<codeline lineno="186"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrf__mpc__hal_1ga1efe7a5a8558565cc61d2c4f311d1cc1" kindref="member">nrf_mpc_event_check</ref>(NRF_MPC_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,<sp/><ref refid="group__nrf__mpc__hal_1ga934ee74ecdc1e369d8160adb9fc66720" kindref="member">nrf_mpc_event_t</ref><sp/>event);</highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="189"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="190"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>clearing<sp/>the<sp/>specified<sp/>MPC<sp/>event.</highlight></codeline>
<codeline lineno="191"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="192"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="193"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>event<sp/>Event<sp/>to<sp/>be<sp/>cleared.</highlight></codeline>
<codeline lineno="194"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__mpc__hal_1gaa90d4919d314628db3a9c6d042715522" kindref="member">nrf_mpc_event_clear</ref>(NRF_MPC_Type<sp/>*<sp/>p_reg,<sp/><ref refid="group__nrf__mpc__hal_1ga934ee74ecdc1e369d8160adb9fc66720" kindref="member">nrf_mpc_event_t</ref><sp/>event);</highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="197"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="198"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>the<sp/>address<sp/>of<sp/>the<sp/>specified<sp/>MPC<sp/>event<sp/>register.</highlight></codeline>
<codeline lineno="199"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="200"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="201"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>event<sp/>Event<sp/>to<sp/>get<sp/>the<sp/>address<sp/>of.</highlight></codeline>
<codeline lineno="202"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="203"><highlight class="comment"><sp/>*<sp/>@return<sp/>Address<sp/>of<sp/>the<sp/>specified<sp/>event<sp/>register.</highlight></codeline>
<codeline lineno="204"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__mpc__hal_1ga3904ca723acf510699a41b86c45ff6ba" kindref="member">nrf_mpc_event_address_get</ref>(NRF_MPC_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__mpc__hal_1ga934ee74ecdc1e369d8160adb9fc66720" kindref="member">nrf_mpc_event_t</ref><sp/><sp/><sp/><sp/><sp/><sp/>event);</highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="208"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="209"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>enabling<sp/>the<sp/>specified<sp/>interrupts.</highlight></codeline>
<codeline lineno="210"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="211"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="212"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>mask<sp/><sp/>Mask<sp/>of<sp/>interrupts<sp/>to<sp/>be<sp/>enabled.</highlight></codeline>
<codeline lineno="213"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Use<sp/>@ref<sp/>nrf_mpc_int_mask_t<sp/>values<sp/>for<sp/>bit<sp/>masking.</highlight></codeline>
<codeline lineno="214"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__mpc__hal_1ga25ca9fe6b6ebcf95172d18727eee35c5" kindref="member">nrf_mpc_int_enable</ref>(NRF_MPC_Type<sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>mask);</highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="217"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="218"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>checking<sp/>if<sp/>the<sp/>specified<sp/>interrupts<sp/>are<sp/>enabled.</highlight></codeline>
<codeline lineno="219"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="220"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="221"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>mask<sp/><sp/>Mask<sp/>of<sp/>interrupts<sp/>to<sp/>be<sp/>checked.</highlight></codeline>
<codeline lineno="222"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Use<sp/>@ref<sp/>nrf_mpc_int_mask_t<sp/>values<sp/>for<sp/>bit<sp/>masking.</highlight></codeline>
<codeline lineno="223"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="224"><highlight class="comment"><sp/>*<sp/>@return<sp/>Mask<sp/>of<sp/>enabled<sp/>interrupts.</highlight></codeline>
<codeline lineno="225"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__mpc__hal_1ga1e22f8e05eb85b0ed1b14654c93abd7f" kindref="member">nrf_mpc_int_enable_check</ref>(NRF_MPC_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>mask);</highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="228"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="229"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>disabling<sp/>the<sp/>specified<sp/>interrupts.</highlight></codeline>
<codeline lineno="230"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="231"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="232"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>mask<sp/><sp/>Mask<sp/>of<sp/>interrupts<sp/>to<sp/>be<sp/>disabled.</highlight></codeline>
<codeline lineno="233"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Use<sp/>@ref<sp/>nrf_mpc_int_mask_t<sp/>values<sp/>for<sp/>bit<sp/>masking.</highlight></codeline>
<codeline lineno="234"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__mpc__hal_1gaf40309fcc06c2cac4f55186a6c093042" kindref="member">nrf_mpc_int_disable</ref>(NRF_MPC_Type<sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>mask);</highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="237"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="238"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>configuration<sp/>of<sp/>the<sp/>region.</highlight></codeline>
<codeline lineno="239"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="240"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="241"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>index<sp/><sp/><sp/><sp/>Region<sp/>index.</highlight></codeline>
<codeline lineno="242"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_config<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>the<sp/>region<sp/>configuration<sp/>parameters.</highlight></codeline>
<codeline lineno="243"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__mpc__hal_1gacbff5f9ce331b63da982ea340f425c9a" kindref="member">nrf_mpc_region_config_set</ref>(NRF_MPC_Type<sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index,</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structnrf__mpc__region__config__t" kindref="compound">nrf_mpc_region_config_t</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_config);</highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="248"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="249"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>configuration<sp/>of<sp/>the<sp/>region.</highlight></codeline>
<codeline lineno="250"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="251"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="252"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>index<sp/>Region<sp/>index.</highlight></codeline>
<codeline lineno="253"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="254"><highlight class="comment"><sp/>*<sp/>@return<sp/>Structure<sp/>with<sp/>configuration<sp/>of<sp/>the<sp/>region.</highlight></codeline>
<codeline lineno="255"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal">NRF_STATIC_INLINE<sp/><ref refid="structnrf__mpc__region__config__t" kindref="compound">nrf_mpc_region_config_t</ref><sp/><ref refid="group__nrf__mpc__hal_1gab554feb151d3a8a84aa1ef49985b24b8" kindref="member">nrf_mpc_region_config_get</ref>(NRF_MPC_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index);</highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="259"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="260"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>start<sp/>address<sp/>of<sp/>the<sp/>region.</highlight></codeline>
<codeline lineno="261"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="262"><highlight class="comment"><sp/>*<sp/>@note<sp/>Address<sp/>must<sp/>be<sp/>on<sp/>a<sp/>4kB<sp/>memory<sp/>boundary.</highlight></codeline>
<codeline lineno="263"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="264"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="265"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>index<sp/><sp/><sp/>Region<sp/>index.</highlight></codeline>
<codeline lineno="266"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>address<sp/>Address<sp/>to<sp/>be<sp/>set.</highlight></codeline>
<codeline lineno="267"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__mpc__hal_1ga7157d67ae0a98e234ee019202d106c40" kindref="member">nrf_mpc_region_startaddr_set</ref>(NRF_MPC_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index,</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/>address);</highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="272"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="273"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>start<sp/>address<sp/>of<sp/>the<sp/>region.</highlight></codeline>
<codeline lineno="274"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="275"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="276"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>index<sp/>Region<sp/>index.</highlight></codeline>
<codeline lineno="277"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="278"><highlight class="comment"><sp/>*<sp/>@return<sp/>Start<sp/>address<sp/>of<sp/>the<sp/>region.</highlight></codeline>
<codeline lineno="279"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__mpc__hal_1ga32f4b879381393d713cce3491fb1e57a" kindref="member">nrf_mpc_region_startaddr_get</ref>(NRF_MPC_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,<sp/>uint8_t<sp/>index);</highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="282"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="283"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>address<sp/>mask<sp/>of<sp/>the<sp/>region.</highlight></codeline>
<codeline lineno="284"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="285"><highlight class="comment"><sp/>*<sp/>@note<sp/>Mask<sp/>must<sp/>be<sp/>on<sp/>a<sp/>4kB<sp/>memory<sp/>boundary.</highlight></codeline>
<codeline lineno="286"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="287"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="288"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>index<sp/><sp/><sp/>Region<sp/>index.</highlight></codeline>
<codeline lineno="289"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>address<sp/>Address<sp/>to<sp/>be<sp/>set.</highlight></codeline>
<codeline lineno="290"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__mpc__hal_1ga22f8d9a1f3e4fd561edbbdb88e143f6a" kindref="member">nrf_mpc_region_addrmask_set</ref>(NRF_MPC_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index,</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/>address);</highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="295"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="296"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>address<sp/>mask<sp/>of<sp/>the<sp/>region.</highlight></codeline>
<codeline lineno="297"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="298"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="299"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>index<sp/>Region<sp/>index.</highlight></codeline>
<codeline lineno="300"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="301"><highlight class="comment"><sp/>*<sp/>@return<sp/>Address<sp/>mask<sp/>of<sp/>the<sp/>region.</highlight></codeline>
<codeline lineno="302"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__mpc__hal_1gae5cffc828be3aca6ebdeac0461001f90" kindref="member">nrf_mpc_region_addrmask_get</ref>(NRF_MPC_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,<sp/>uint8_t<sp/>index);</highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="305"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="306"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>enabling<sp/>the<sp/>specified<sp/>master<sp/>ports<sp/>of<sp/>the<sp/>region.</highlight></codeline>
<codeline lineno="307"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="308"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="309"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>index<sp/>Region<sp/>index.</highlight></codeline>
<codeline lineno="310"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>mask<sp/><sp/>Mask<sp/>of<sp/>master<sp/>ports<sp/>to<sp/>be<sp/>enabled,</highlight></codeline>
<codeline lineno="311"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>constructed<sp/>from<sp/>@ref<sp/>nrf_mpc_masterport_mask_t<sp/>enumerator<sp/>values.</highlight></codeline>
<codeline lineno="312"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__mpc__hal_1ga447c3ac18526b96414f7222acf308d75" kindref="member">nrf_mpc_region_masterport_set</ref>(NRF_MPC_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index,</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/>mask);</highlight></codeline>
<codeline lineno="316"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="317"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="318"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>enabled<sp/>master<sp/>ports<sp/>of<sp/>the<sp/>region.</highlight></codeline>
<codeline lineno="319"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="320"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="321"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>index<sp/>Region<sp/>index.</highlight></codeline>
<codeline lineno="322"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="323"><highlight class="comment"><sp/>*<sp/>@return<sp/>Mask<sp/>of<sp/>enabled<sp/>master<sp/>ports,</highlight></codeline>
<codeline lineno="324"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>constructed<sp/>from<sp/>@ref<sp/>nrf_mpc_masterport_mask_t<sp/>enumerator<sp/>values.</highlight></codeline>
<codeline lineno="325"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__mpc__hal_1gaf2ead7ef46873e85ffff2a217a3f1cd4" kindref="member">nrf_mpc_region_masterport_get</ref>(NRF_MPC_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,<sp/>uint8_t<sp/>index);</highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="328"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="329"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>configuration<sp/>of<sp/>the<sp/>override<sp/>region.</highlight></codeline>
<codeline lineno="330"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="331"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="332"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>index<sp/><sp/><sp/><sp/>Override<sp/>region<sp/>index.</highlight></codeline>
<codeline lineno="333"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_config<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>the<sp/>override<sp/>region<sp/>configuration<sp/>parameters.</highlight></codeline>
<codeline lineno="334"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__mpc__hal_1ga39c507026fa171618a79101c6233ca8b" kindref="member">nrf_mpc_override_config_set</ref>(NRF_MPC_Type<sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index,</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structnrf__mpc__override__config__t" kindref="compound">nrf_mpc_override_config_t</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_config);</highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="339"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="340"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>configuration<sp/>of<sp/>the<sp/>override<sp/>region.</highlight></codeline>
<codeline lineno="341"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="342"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="343"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>index<sp/>Override<sp/>region<sp/>index.</highlight></codeline>
<codeline lineno="344"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="345"><highlight class="comment"><sp/>*<sp/>@return<sp/>Structure<sp/>with<sp/>configuration<sp/>of<sp/>the<sp/>override<sp/>region.</highlight></codeline>
<codeline lineno="346"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal">NRF_STATIC_INLINE<sp/><ref refid="structnrf__mpc__override__config__t" kindref="compound">nrf_mpc_override_config_t</ref><sp/><ref refid="group__nrf__mpc__hal_1gac007fe07342b8eecba4932d41ed0efec" kindref="member">nrf_mpc_override_config_get</ref>(NRF_MPC_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index);</highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="350"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="351"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>start<sp/>address<sp/>of<sp/>the<sp/>override<sp/>region.</highlight></codeline>
<codeline lineno="352"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="353"><highlight class="comment"><sp/>*<sp/>@note<sp/>Address<sp/>must<sp/>be<sp/>on<sp/>a<sp/>4kB<sp/>memory<sp/>boundary.</highlight></codeline>
<codeline lineno="354"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="355"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="356"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>index<sp/><sp/><sp/>Override<sp/>region<sp/>index.</highlight></codeline>
<codeline lineno="357"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>address<sp/>Address<sp/>to<sp/>be<sp/>set.</highlight></codeline>
<codeline lineno="358"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__mpc__hal_1ga860c13495b30810658e923daae9307c9" kindref="member">nrf_mpc_override_startaddr_set</ref>(NRF_MPC_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index,</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/>address);</highlight></codeline>
<codeline lineno="362"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="363"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="364"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>start<sp/>address<sp/>of<sp/>the<sp/>override<sp/>region.</highlight></codeline>
<codeline lineno="365"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="366"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="367"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>index<sp/>Override<sp/>region<sp/>index.</highlight></codeline>
<codeline lineno="368"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="369"><highlight class="comment"><sp/>*<sp/>@return<sp/>Start<sp/>address<sp/>of<sp/>the<sp/>override<sp/>region.</highlight></codeline>
<codeline lineno="370"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__mpc__hal_1gae3d4c0b94e029e5c76125e12dee391cc" kindref="member">nrf_mpc_override_startaddr_get</ref>(NRF_MPC_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index);</highlight></codeline>
<codeline lineno="373"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="374"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="375"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>end<sp/>address<sp/>of<sp/>the<sp/>override<sp/>region.</highlight></codeline>
<codeline lineno="376"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="377"><highlight class="comment"><sp/>*<sp/>@note<sp/>Address<sp/>must<sp/>be<sp/>on<sp/>a<sp/>4kB<sp/>memory<sp/>boundary.</highlight></codeline>
<codeline lineno="378"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="379"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="380"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>index<sp/><sp/><sp/>Override<sp/>region<sp/>index.</highlight></codeline>
<codeline lineno="381"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>address<sp/>Address<sp/>to<sp/>be<sp/>set.</highlight></codeline>
<codeline lineno="382"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__mpc__hal_1ga3788c87dd9420235f8965883202c9c78" kindref="member">nrf_mpc_override_endaddr_set</ref>(NRF_MPC_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index,</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/>address);</highlight></codeline>
<codeline lineno="386"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="387"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="388"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>end<sp/>address<sp/>of<sp/>the<sp/>override<sp/>region.</highlight></codeline>
<codeline lineno="389"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="390"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="391"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>index<sp/>Override<sp/>region<sp/>index.</highlight></codeline>
<codeline lineno="392"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="393"><highlight class="comment"><sp/>*<sp/>@return<sp/>End<sp/>address<sp/>of<sp/>the<sp/>override<sp/>region.</highlight></codeline>
<codeline lineno="394"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__mpc__hal_1gac05d65c913a5fa0c53ea112257da7969" kindref="member">nrf_mpc_override_endaddr_get</ref>(NRF_MPC_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index);</highlight></codeline>
<codeline lineno="397"><highlight class="normal"></highlight></codeline>
<codeline lineno="398"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_MPC_HAS_OVERRIDE_OFFSET</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="399"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="400"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>offset<sp/>of<sp/>the<sp/>override<sp/>region.</highlight></codeline>
<codeline lineno="401"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="402"><highlight class="comment"><sp/>*<sp/>@note<sp/>Offset<sp/>will<sp/>be<sp/>left<sp/>shifted<sp/>before<sp/>applying,<sp/>creating<sp/>a<sp/>33-bit<sp/>signed<sp/>integer.</highlight></codeline>
<codeline lineno="403"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="404"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="405"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>index<sp/><sp/>Override<sp/>region<sp/>index.</highlight></codeline>
<codeline lineno="406"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>offset<sp/>Address<sp/>offset<sp/>value<sp/>divided<sp/>by<sp/>2.</highlight></codeline>
<codeline lineno="407"><highlight class="comment"><sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="408"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__mpc__hal_1ga4360714e10c9b3a46f342b9084b34911" kindref="member">nrf_mpc_override_offset_set</ref>(NRF_MPC_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index,</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/>offset);</highlight></codeline>
<codeline lineno="411"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="412"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="413"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>offset<sp/>of<sp/>the<sp/>override<sp/>region.</highlight></codeline>
<codeline lineno="414"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="415"><highlight class="comment"><sp/>*<sp/>@note<sp/>Offset<sp/>is<sp/>left<sp/>shifted<sp/>before<sp/>applying,<sp/>creating<sp/>a<sp/>33-bit<sp/>signed<sp/>integer.</highlight></codeline>
<codeline lineno="416"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="417"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="418"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>index<sp/>Override<sp/>region<sp/>index.</highlight></codeline>
<codeline lineno="419"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="420"><highlight class="comment"><sp/>*<sp/>@return<sp/>Address<sp/>offset<sp/>value<sp/>divided<sp/>by<sp/>2.</highlight></codeline>
<codeline lineno="421"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__mpc__hal_1gaebfa2cf1848130f9c4bc17c814545e1a" kindref="member">nrf_mpc_override_offset_get</ref>(NRF_MPC_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index);</highlight></codeline>
<codeline lineno="424"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="426"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="427"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>permission<sp/>settings<sp/>for<sp/>the<sp/>override<sp/>region.</highlight></codeline>
<codeline lineno="428"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="429"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/><sp/><sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="430"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>index<sp/><sp/><sp/><sp/><sp/><sp/><sp/>Override<sp/>region<sp/>index.</highlight></codeline>
<codeline lineno="431"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>permissions<sp/>Mask<sp/>of<sp/>permissions<sp/>to<sp/>be<sp/>set,</highlight></codeline>
<codeline lineno="432"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>constructed<sp/>from<sp/>@ref<sp/>nrf_mpc_permission_mask_t<sp/>enumerator<sp/>values.</highlight></codeline>
<codeline lineno="433"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="434"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__mpc__hal_1ga765e067757c5e85d628788848163ee95" kindref="member">nrf_mpc_override_perm_set</ref>(NRF_MPC_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index,</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/>permissions);</highlight></codeline>
<codeline lineno="437"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="438"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="439"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>permission<sp/>settings<sp/>of<sp/>the<sp/>override<sp/>region.</highlight></codeline>
<codeline lineno="440"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="441"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="442"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>index<sp/>Override<sp/>region<sp/>index.</highlight></codeline>
<codeline lineno="443"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="444"><highlight class="comment"><sp/>*<sp/>@return<sp/>Mask<sp/>of<sp/>permissions,<sp/>constructed<sp/>from<sp/>@ref<sp/>nrf_mpc_permission_mask_t<sp/>enumerator<sp/>values.</highlight></codeline>
<codeline lineno="445"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="446"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__mpc__hal_1gafced42e6003285cc6b93aef32c08715e" kindref="member">nrf_mpc_override_perm_get</ref>(NRF_MPC_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index);</highlight></codeline>
<codeline lineno="448"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="449"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="450"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>permission<sp/>settings<sp/>mask<sp/>for<sp/>the<sp/>override<sp/>region.</highlight></codeline>
<codeline lineno="451"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="452"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/><sp/><sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="453"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>index<sp/><sp/><sp/><sp/><sp/><sp/><sp/>Override<sp/>region<sp/>index.</highlight></codeline>
<codeline lineno="454"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>permissions<sp/>Mask<sp/>of<sp/>permissions<sp/>settings<sp/>mask<sp/>to<sp/>be<sp/>set,</highlight></codeline>
<codeline lineno="455"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>constructed<sp/>from<sp/>@ref<sp/>nrf_mpc_permission_mask_t<sp/>enumerator<sp/>values.</highlight></codeline>
<codeline lineno="456"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="457"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__mpc__hal_1ga9baa4d2ef6d04d3c6125f2ed9493aaf5" kindref="member">nrf_mpc_override_permmask_set</ref>(NRF_MPC_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index,</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/>permissions);</highlight></codeline>
<codeline lineno="460"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="461"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="462"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>permission<sp/>settings<sp/>mask<sp/>of<sp/>the<sp/>override<sp/>region.</highlight></codeline>
<codeline lineno="463"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="464"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="465"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>index<sp/>Override<sp/>region<sp/>index.</highlight></codeline>
<codeline lineno="466"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="467"><highlight class="comment"><sp/>*<sp/>@return<sp/>Mask<sp/>of<sp/>permissions<sp/>settings<sp/>mask,</highlight></codeline>
<codeline lineno="468"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>constructed<sp/>from<sp/>@ref<sp/>nrf_mpc_permission_mask_t<sp/>enumerator<sp/>values.</highlight></codeline>
<codeline lineno="469"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="470"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__mpc__hal_1ga13a7fe4a399c7d24fcf9f9c7788c09c1" kindref="member">nrf_mpc_override_permmask_get</ref>(NRF_MPC_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index);</highlight></codeline>
<codeline lineno="472"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="473"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="474"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>owner<sp/>ID<sp/>for<sp/>the<sp/>override<sp/>region.</highlight></codeline>
<codeline lineno="475"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="476"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="477"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>index<sp/><sp/><sp/><sp/>Override<sp/>region<sp/>index.</highlight></codeline>
<codeline lineno="478"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>owner_id<sp/>Owner<sp/>ID<sp/>to<sp/>be<sp/>set.</highlight></codeline>
<codeline lineno="479"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="480"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__mpc__hal_1ga0fd600b1d367f88e6181ec42e9c1f842" kindref="member">nrf_mpc_override_ownerid_set</ref>(NRF_MPC_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index,</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nrf_owner_t<sp/><sp/><sp/><sp/>owner_id);</highlight></codeline>
<codeline lineno="483"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="484"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="485"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>owner<sp/>ID<sp/>of<sp/>the<sp/>override<sp/>region.</highlight></codeline>
<codeline lineno="486"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="487"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="488"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>index<sp/>Override<sp/>region<sp/>index.</highlight></codeline>
<codeline lineno="489"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="490"><highlight class="comment"><sp/>*<sp/>@return<sp/>Owner<sp/>ID<sp/>of<sp/>the<sp/>overridde<sp/>region.</highlight></codeline>
<codeline lineno="491"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="492"><highlight class="normal">NRF_STATIC_INLINE<sp/>nrf_owner_t<sp/><ref refid="group__nrf__mpc__hal_1ga36bb427a4979cd656667b8a08ad55ff4" kindref="member">nrf_mpc_override_ownerid_get</ref>(NRF_MPC_Type<sp/>*<sp/>p_reg,<sp/>uint8_t<sp/>index);</highlight></codeline>
<codeline lineno="493"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="494"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="495"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>enabling<sp/>the<sp/>specified<sp/>master<sp/>ports<sp/>of<sp/>the<sp/>override<sp/>region.</highlight></codeline>
<codeline lineno="496"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="497"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="498"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>index<sp/>Override<sp/>region<sp/>index.</highlight></codeline>
<codeline lineno="499"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>mask<sp/><sp/>Mask<sp/>of<sp/>master<sp/>ports<sp/>to<sp/>be<sp/>enabled,</highlight></codeline>
<codeline lineno="500"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>constructed<sp/>from<sp/>@ref<sp/>nrf_mpc_masterport_mask_t<sp/>enumerator<sp/>values.</highlight></codeline>
<codeline lineno="501"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="502"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__mpc__hal_1gae79fb68d0f2cdb8bab520731e25b38e9" kindref="member">nrf_mpc_override_masterport_set</ref>(NRF_MPC_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index,</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/>mask);</highlight></codeline>
<codeline lineno="505"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="506"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="507"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>enabled<sp/>master<sp/>ports<sp/>of<sp/>the<sp/>override<sp/>region.</highlight></codeline>
<codeline lineno="508"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="509"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="510"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>index<sp/>Override<sp/>region<sp/>index.</highlight></codeline>
<codeline lineno="511"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="512"><highlight class="comment"><sp/>*<sp/>@return<sp/>Mask<sp/>of<sp/>enabled<sp/>master<sp/>ports,</highlight></codeline>
<codeline lineno="513"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>constructed<sp/>from<sp/>@ref<sp/>nrf_mpc_masterport_mask_t<sp/>enumerator<sp/>values.</highlight></codeline>
<codeline lineno="514"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="515"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__mpc__hal_1ga398b9aad20b0735a4ada32812a3dd3d0" kindref="member">nrf_mpc_override_masterport_get</ref>(NRF_MPC_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index);</highlight></codeline>
<codeline lineno="517"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="518"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="519"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>the<sp/>memory<sp/>address<sp/>of<sp/>memory<sp/>access<sp/>error.</highlight></codeline>
<codeline lineno="520"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="521"><highlight class="comment"><sp/>*<sp/>@note<sp/>Register<sp/>content<sp/>will<sp/>not<sp/>be<sp/>changed<sp/>as<sp/>long<sp/>as<sp/>MEMACCERR<sp/>event<sp/>is<sp/>active.</highlight></codeline>
<codeline lineno="522"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="523"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="524"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="525"><highlight class="comment"><sp/>*<sp/>@return<sp/>Target<sp/>address<sp/>for<sp/>the<sp/>errroneous<sp/>access.</highlight></codeline>
<codeline lineno="526"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="527"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__mpc__hal_1gaaef975d68f3bb54b021d37ba1d64c9ce" kindref="member">nrf_mpc_memaccerr_address_get</ref>(NRF_MPC_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="528"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="529"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="530"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>the<sp/>owner<sp/>identifier<sp/>of<sp/>the<sp/>transaction<sp/>that<sp/>triggered<sp/>memory<sp/>access<sp/>error.</highlight></codeline>
<codeline lineno="531"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="532"><highlight class="comment"><sp/>*<sp/>@note<sp/>Register<sp/>content<sp/>will<sp/>not<sp/>be<sp/>changed<sp/>as<sp/>long<sp/>as<sp/>MEMACCERR<sp/>event<sp/>is<sp/>active.</highlight></codeline>
<codeline lineno="533"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="534"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="535"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="536"><highlight class="comment"><sp/>*<sp/>@return<sp/>Owner<sp/>identifier<sp/>of<sp/>the<sp/>errorneous<sp/>access.</highlight></codeline>
<codeline lineno="537"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="538"><highlight class="normal">NRF_STATIC_INLINE<sp/>nrf_owner_t<sp/><ref refid="group__nrf__mpc__hal_1ga7b52f80f1b3190f2630418b740a8abbb" kindref="member">nrf_mpc_memaccerr_info_ownerid_get</ref>(NRF_MPC_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="539"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="540"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="541"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>the<sp/>master<sp/>port<sp/>of<sp/>the<sp/>transaction<sp/>that<sp/>triggered<sp/>memory<sp/>access<sp/>error.</highlight></codeline>
<codeline lineno="542"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="543"><highlight class="comment"><sp/>*<sp/>@note<sp/>Register<sp/>content<sp/>will<sp/>not<sp/>be<sp/>changed<sp/>as<sp/>long<sp/>as<sp/>MEMACCERR<sp/>event<sp/>is<sp/>active.</highlight></codeline>
<codeline lineno="544"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="545"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="546"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="547"><highlight class="comment"><sp/>*<sp/>@return<sp/>Master<sp/>port<sp/>where<sp/>errorneous<sp/>access<sp/>is<sp/>detected.</highlight></codeline>
<codeline lineno="548"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="549"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint8_t<sp/><ref refid="group__nrf__mpc__hal_1ga788b2a97dba99dfa03f09ef727c178d5" kindref="member">nrf_mpc_memaccerr_info_masterport_get</ref>(NRF_MPC_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="550"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="551"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="552"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>the<sp/>permissions<sp/>of<sp/>the<sp/>transaction<sp/>that<sp/>triggered<sp/>memory<sp/>access<sp/>error.</highlight></codeline>
<codeline lineno="553"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="554"><highlight class="comment"><sp/>*<sp/>@note<sp/>Register<sp/>content<sp/>will<sp/>not<sp/>be<sp/>changed<sp/>as<sp/>long<sp/>as<sp/>MEMACCERR<sp/>event<sp/>is<sp/>active.</highlight></codeline>
<codeline lineno="555"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="556"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="557"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="558"><highlight class="comment"><sp/>*<sp/>@return<sp/>Permission<sp/>settings<sp/>of<sp/>the<sp/>errorneous<sp/>access.</highlight></codeline>
<codeline lineno="559"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="560"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__mpc__hal_1gaeca19e5b26e7b6504cc179e01ed93f05" kindref="member">nrf_mpc_memaccerr_info_perm_get</ref>(NRF_MPC_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="561"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="562"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="563"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>the<sp/>source<sp/>of<sp/>the<sp/>transaction<sp/>that<sp/>triggered<sp/>memory<sp/>access<sp/>error.</highlight></codeline>
<codeline lineno="564"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="565"><highlight class="comment"><sp/>*<sp/>@note<sp/>Register<sp/>content<sp/>will<sp/>not<sp/>be<sp/>changed<sp/>as<sp/>long<sp/>as<sp/>MEMACCERR<sp/>event<sp/>is<sp/>active.</highlight></codeline>
<codeline lineno="566"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="567"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="568"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="569"><highlight class="comment"><sp/>*<sp/>@return<sp/>Source<sp/>of<sp/>the<sp/>errorneous<sp/>access.</highlight></codeline>
<codeline lineno="570"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="571"><highlight class="normal">NRF_STATIC_INLINE<sp/><ref refid="group__nrf__mpc__hal_1ga7a52bbfed00c736a7ee0f49896fa4081" kindref="member">nrf_mpc_errorsource_t</ref></highlight></codeline>
<codeline lineno="572"><highlight class="normal"><ref refid="group__nrf__mpc__hal_1gad5eedb315b47a18f9965755353a60f31" kindref="member">nrf_mpc_memaccerr_info_errorsource_get</ref>(NRF_MPC_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="573"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="574"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="575"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>enabling<sp/>the<sp/>specified<sp/>master<sp/>ports<sp/>connection<sp/>to<sp/>global<sp/>slave.</highlight></codeline>
<codeline lineno="576"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="577"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="578"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>mask<sp/><sp/>Mask<sp/>of<sp/>master<sp/>ports<sp/>to<sp/>be<sp/>connected,</highlight></codeline>
<codeline lineno="579"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>constructed<sp/>from<sp/>@ref<sp/>nrf_mpc_masterport_mask_t<sp/>enumerator<sp/>values.</highlight></codeline>
<codeline lineno="580"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="581"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__mpc__hal_1gaeec50c60a288767deb1587481edbe762" kindref="member">nrf_mpc_globalslave_masterport_set</ref>(NRF_MPC_Type<sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>mask);</highlight></codeline>
<codeline lineno="582"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="583"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="584"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>enabled<sp/>master<sp/>ports<sp/>connection<sp/>to<sp/>global<sp/>slave.</highlight></codeline>
<codeline lineno="585"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="586"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="587"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="588"><highlight class="comment"><sp/>*<sp/>@return<sp/>Mask<sp/>of<sp/>master<sp/>ports<sp/>connected,</highlight></codeline>
<codeline lineno="589"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>constructed<sp/>from<sp/>@ref<sp/>nrf_mpc_masterport_mask_t<sp/>enumerator<sp/>values.</highlight></codeline>
<codeline lineno="590"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="591"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__mpc__hal_1ga0aae47ddb1607ea45e94b1f8bd281e85" kindref="member">nrf_mpc_globalslave_masterport_get</ref>(NRF_MPC_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="592"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="593"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="594"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>enabling<sp/>the<sp/>global<sp/>slave<sp/>registers<sp/>lock.</highlight></codeline>
<codeline lineno="595"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="596"><highlight class="comment"><sp/>*<sp/>@note<sp/>When<sp/>global<sp/>slave<sp/>registers<sp/>is<sp/>enabled,<sp/>modifying<sp/>the<sp/>global<sp/>slave<sp/>configuration</highlight></codeline>
<codeline lineno="597"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>is<sp/>not<sp/>possible.</highlight></codeline>
<codeline lineno="598"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="599"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="600"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="601"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__mpc__hal_1gae6edfd83d8f3f243e4637a3152d829f7" kindref="member">nrf_mpc_globalslave_lock_enable</ref>(NRF_MPC_Type<sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="602"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="603"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="604"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>the<sp/>status<sp/>of<sp/>the<sp/>global<sp/>slave<sp/>registers<sp/>lock.</highlight></codeline>
<codeline lineno="605"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="606"><highlight class="comment"><sp/>*<sp/>@note<sp/>When<sp/>global<sp/>slave<sp/>registers<sp/>is<sp/>enabled,<sp/>modifying<sp/>the<sp/>global<sp/>slave<sp/>configuration</highlight></codeline>
<codeline lineno="607"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>is<sp/>not<sp/>possible.</highlight></codeline>
<codeline lineno="608"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="609"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="610"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="611"><highlight class="comment"><sp/>*<sp/>@return<sp/>True<sp/>if<sp/>global<sp/>slave<sp/>registers<sp/>are<sp/>locked,<sp/>false<sp/>otherwise.</highlight></codeline>
<codeline lineno="612"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="613"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrf__mpc__hal_1ga6a6e9ce5f593eca645894a5d5ca0aa1e" kindref="member">nrf_mpc_globalslave_lock_check</ref>(NRF_MPC_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="614"><highlight class="normal"></highlight></codeline>
<codeline lineno="615"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_MPC_HAS_RTCHOKE</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="616"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="617"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>enabling<sp/>the<sp/>AXI<sp/>Write<sp/>Address<sp/>Channel<sp/>Real<sp/>Time<sp/>Choke<sp/>for<sp/>specified<sp/>master<sp/>ports.</highlight></codeline>
<codeline lineno="618"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="619"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="620"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>mask<sp/><sp/>Mask<sp/>of<sp/>master<sp/>ports<sp/>to<sp/>have<sp/>the<sp/>Write<sp/>Real<sp/>Time<sp/>Choke<sp/>enabled,</highlight></codeline>
<codeline lineno="621"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>constructed<sp/>from<sp/>@ref<sp/>nrf_mpc_masterport_mask_t<sp/>enumerator<sp/>values.</highlight></codeline>
<codeline lineno="622"><highlight class="comment"><sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="623"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__mpc__hal_1gac611c03b4cabceedf8df9694361a6f66" kindref="member">nrf_mpc_rtchoke_writeaccess_set</ref>(NRF_MPC_Type<sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>mask);</highlight></codeline>
<codeline lineno="624"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="625"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="626"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>master<sp/>ports<sp/>with<sp/>enabled<sp/>AXI<sp/>Write<sp/>Address<sp/>Channel<sp/>Real<sp/>Time<sp/>Choke.</highlight></codeline>
<codeline lineno="627"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="628"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="629"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="630"><highlight class="comment"><sp/>*<sp/>@return<sp/>Mask<sp/>of<sp/>master<sp/>ports<sp/>with<sp/>the<sp/>Write<sp/>Real<sp/>Time<sp/>Choke<sp/>enabled,</highlight></codeline>
<codeline lineno="631"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>constructed<sp/>from<sp/>@ref<sp/>nrf_mpc_masterport_mask_t<sp/>enumerator<sp/>values.</highlight></codeline>
<codeline lineno="632"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="633"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__mpc__hal_1ga2ddf36ab7898e4415c2a2334198598d5" kindref="member">nrf_mpc_rtchoke_writeaccess_get</ref>(NRF_MPC_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="634"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="635"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="636"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>enabling<sp/>the<sp/>AXI<sp/>Read<sp/>Address<sp/>Channel<sp/>Real<sp/>Time<sp/>Choke<sp/>for<sp/>specified<sp/>master<sp/>ports.</highlight></codeline>
<codeline lineno="637"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="638"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="639"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>mask<sp/><sp/>Mask<sp/>of<sp/>master<sp/>ports<sp/>to<sp/>have<sp/>the<sp/>Read<sp/>Real<sp/>Time<sp/>Choke<sp/>enabled,</highlight></codeline>
<codeline lineno="640"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>constructed<sp/>from<sp/>@ref<sp/>nrf_mpc_masterport_mask_t<sp/>enumerator<sp/>values.</highlight></codeline>
<codeline lineno="641"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="642"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__mpc__hal_1ga13bb38ea31028aae2aac0ee3e091b21e" kindref="member">nrf_mpc_rtchoke_readaccess_set</ref>(NRF_MPC_Type<sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>mask);</highlight></codeline>
<codeline lineno="643"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="644"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="645"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>master<sp/>ports<sp/>with<sp/>enabled<sp/>AXI<sp/>Read<sp/>Address<sp/>Channel<sp/>Real<sp/>Time<sp/>Choke.</highlight></codeline>
<codeline lineno="646"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="647"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="648"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="649"><highlight class="comment"><sp/>*<sp/>@return<sp/>Mask<sp/>of<sp/>master<sp/>ports<sp/>with<sp/>the<sp/>Read<sp/>Real<sp/>Time<sp/>Choke<sp/>enabled,</highlight></codeline>
<codeline lineno="650"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>constructed<sp/>from<sp/>@ref<sp/>nrf_mpc_masterport_mask_t<sp/>enumerator<sp/>values.</highlight></codeline>
<codeline lineno="651"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="652"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__mpc__hal_1ga5e448fe5c32baa27c83d191623623249" kindref="member">nrf_mpc_rtchoke_readaccess_get</ref>(NRF_MPC_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="653"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="654"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="655"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>the<sp/>Real<sp/>Time<sp/>Choke<sp/>delay<sp/>for<sp/>the<sp/>specified<sp/>slave.</highlight></codeline>
<codeline lineno="656"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="657"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="658"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>slave<sp/>Slave<sp/>number.</highlight></codeline>
<codeline lineno="659"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>delay<sp/>Delay<sp/>value<sp/>to<sp/>be<sp/>set.</highlight></codeline>
<codeline lineno="660"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="661"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__mpc__hal_1gad8417da63a1d979fbb0640f5863c4324" kindref="member">nrf_mpc_rtchoke_delay_set</ref>(NRF_MPC_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>slave,</highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>delay);</highlight></codeline>
<codeline lineno="664"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="665"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="666"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>the<sp/>Real<sp/>Time<sp/>Choke<sp/>delay<sp/>for<sp/>the<sp/>specified<sp/>slave.</highlight></codeline>
<codeline lineno="667"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="668"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="669"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>slave<sp/>Slave<sp/>number.</highlight></codeline>
<codeline lineno="670"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="671"><highlight class="comment"><sp/>*<sp/>@return<sp/>Delay<sp/>value<sp/>for<sp/>slave.</highlight></codeline>
<codeline lineno="672"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="673"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint8_t<sp/><ref refid="group__nrf__mpc__hal_1ga175f2577dab13295cdaec1156517ba2c" kindref="member">nrf_mpc_rtchoke_delay_get</ref>(NRF_MPC_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,<sp/>uint8_t<sp/>slave);</highlight></codeline>
<codeline lineno="674"><highlight class="normal"></highlight></codeline>
<codeline lineno="675"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRF_MPC_HAS_RTCHOKE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="676"><highlight class="normal"></highlight></codeline>
<codeline lineno="677"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>NRF_DECLARE_ONLY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="678"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrf__mpc__hal_1ga1efe7a5a8558565cc61d2c4f311d1cc1" kindref="member">nrf_mpc_event_check</ref>(NRF_MPC_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,<sp/><ref refid="group__nrf__mpc__hal_1ga934ee74ecdc1e369d8160adb9fc66720" kindref="member">nrf_mpc_event_t</ref><sp/>event)</highlight></codeline>
<codeline lineno="679"><highlight class="normal">{</highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>nrf_event_check(p_reg,<sp/>event);</highlight></codeline>
<codeline lineno="681"><highlight class="normal">}</highlight></codeline>
<codeline lineno="682"><highlight class="normal"></highlight></codeline>
<codeline lineno="683"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__mpc__hal_1gaa90d4919d314628db3a9c6d042715522" kindref="member">nrf_mpc_event_clear</ref>(NRF_MPC_Type<sp/>*<sp/>p_reg,<sp/><ref refid="group__nrf__mpc__hal_1ga934ee74ecdc1e369d8160adb9fc66720" kindref="member">nrf_mpc_event_t</ref><sp/>event)</highlight></codeline>
<codeline lineno="684"><highlight class="normal">{</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/><sp/>*((</highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint32_t<sp/>*)((uint8_t<sp/>*)p_reg<sp/>+<sp/>(uint32_t)event))<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/><sp/>nrf_event_readback((uint8_t<sp/>*)p_reg<sp/>+<sp/>(uint32_t)event);</highlight></codeline>
<codeline lineno="687"><highlight class="normal">}</highlight></codeline>
<codeline lineno="688"><highlight class="normal"></highlight></codeline>
<codeline lineno="689"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__mpc__hal_1ga3904ca723acf510699a41b86c45ff6ba" kindref="member">nrf_mpc_event_address_get</ref>(NRF_MPC_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__mpc__hal_1ga934ee74ecdc1e369d8160adb9fc66720" kindref="member">nrf_mpc_event_t</ref><sp/><sp/><sp/><sp/><sp/><sp/>event)</highlight></codeline>
<codeline lineno="691"><highlight class="normal">{</highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>nrf_task_event_address_get(p_reg,<sp/>event);</highlight></codeline>
<codeline lineno="693"><highlight class="normal">}</highlight></codeline>
<codeline lineno="694"><highlight class="normal"></highlight></codeline>
<codeline lineno="695"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__mpc__hal_1ga25ca9fe6b6ebcf95172d18727eee35c5" kindref="member">nrf_mpc_int_enable</ref>(NRF_MPC_Type<sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>mask)</highlight></codeline>
<codeline lineno="696"><highlight class="normal">{</highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;INTENSET<sp/>=<sp/>mask;</highlight></codeline>
<codeline lineno="698"><highlight class="normal">}</highlight></codeline>
<codeline lineno="699"><highlight class="normal"></highlight></codeline>
<codeline lineno="700"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__mpc__hal_1ga1e22f8e05eb85b0ed1b14654c93abd7f" kindref="member">nrf_mpc_int_enable_check</ref>(NRF_MPC_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>mask)</highlight></codeline>
<codeline lineno="701"><highlight class="normal">{</highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p_reg-&gt;INTENSET<sp/>&amp;<sp/>mask;</highlight></codeline>
<codeline lineno="703"><highlight class="normal">}</highlight></codeline>
<codeline lineno="704"><highlight class="normal"></highlight></codeline>
<codeline lineno="705"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__mpc__hal_1gaf40309fcc06c2cac4f55186a6c093042" kindref="member">nrf_mpc_int_disable</ref>(NRF_MPC_Type<sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>mask)</highlight></codeline>
<codeline lineno="706"><highlight class="normal">{</highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;INTENCLR<sp/>=<sp/>mask;</highlight></codeline>
<codeline lineno="708"><highlight class="normal">}</highlight></codeline>
<codeline lineno="709"><highlight class="normal"></highlight></codeline>
<codeline lineno="710"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__mpc__hal_1gacbff5f9ce331b63da982ea340f425c9a" kindref="member">nrf_mpc_region_config_set</ref>(NRF_MPC_Type<sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index,</highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structnrf__mpc__region__config__t" kindref="compound">nrf_mpc_region_config_t</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_config)</highlight></codeline>
<codeline lineno="713"><highlight class="normal">{</highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__glue_1ga9698a3f6b6bea455d2b54a79e514ee36" kindref="member">NRFX_ASSERT</ref>(index<sp/>&lt;<sp/><ref refid="group__nrf__mpc__hal_1ga23e057328b822941974380fd47f35540" kindref="member">NRF_MPC_REGION_COUNT</ref>);</highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__glue_1ga9698a3f6b6bea455d2b54a79e514ee36" kindref="member">NRFX_ASSERT</ref>(p_config<sp/>!=<sp/>NULL);</highlight></codeline>
<codeline lineno="716"><highlight class="normal"></highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;REGION[index].CONFIG<sp/>=<sp/>(((p_config-&gt;<ref refid="structnrf__mpc__region__config__t_1a054dea0aabe1a6ee2db1fecae85a6dbb" kindref="member">slave_number</ref><sp/>&lt;&lt;</highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MPC_REGION_CONFIG_SLAVENUMBER_Pos)<sp/>&amp;</highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MPC_REGION_CONFIG_SLAVENUMBER_Msk)<sp/>|</highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((p_config-&gt;<ref refid="structnrf__mpc__region__config__t_1a6cf4b2cfcaec789f3cd10a13b2fe2306" kindref="member">lock</ref><sp/>?<sp/>MPC_REGION_CONFIG_LOCK_Locked<sp/>:</highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MPC_REGION_CONFIG_LOCK_Unlocked)<sp/>&lt;&lt;</highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MPC_REGION_CONFIG_LOCK_Pos)<sp/>|</highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((p_config-&gt;<ref refid="structnrf__mpc__region__config__t_1a4de0d503ce985c901074ad86c6cd96ae" kindref="member">enable</ref><sp/>?<sp/>MPC_REGION_CONFIG_ENABLE_Enabled<sp/>:</highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MPC_REGION_CONFIG_ENABLE_Disabled)<sp/>&lt;&lt;</highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MPC_REGION_CONFIG_ENABLE_Pos)<sp/>|</highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((p_config-&gt;<ref refid="structnrf__mpc__region__config__t_1aa6addf45d511c661f30f1c4448216539" kindref="member">permissions</ref><sp/>&lt;&lt;<sp/>MPC_REGION_CONFIG_READ_Pos)<sp/>&amp;</highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(MPC_REGION_CONFIG_READ_Msk<sp/>|<sp/>MPC_REGION_CONFIG_WRITE_Msk<sp/>|</highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MPC_REGION_CONFIG_EXECUTE_Msk<sp/>|</highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MPC_REGION_CONFIG_SECATTR_Msk))<sp/>|</highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((p_config-&gt;<ref refid="structnrf__mpc__region__config__t_1ac6f78d5496451fe0b92a7d38f22d0df7" kindref="member">owner</ref><sp/>&lt;&lt;</highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MPC_REGION_CONFIG_OWNERID_Pos)<sp/>&amp;</highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MPC_REGION_CONFIG_OWNERID_Msk));</highlight></codeline>
<codeline lineno="733"><highlight class="normal">}</highlight></codeline>
<codeline lineno="734"><highlight class="normal"></highlight></codeline>
<codeline lineno="735"><highlight class="normal">NRF_STATIC_INLINE<sp/><ref refid="structnrf__mpc__region__config__t" kindref="compound">nrf_mpc_region_config_t</ref><sp/><ref refid="group__nrf__mpc__hal_1gab554feb151d3a8a84aa1ef49985b24b8" kindref="member">nrf_mpc_region_config_get</ref>(NRF_MPC_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index)</highlight></codeline>
<codeline lineno="737"><highlight class="normal">{</highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__glue_1ga9698a3f6b6bea455d2b54a79e514ee36" kindref="member">NRFX_ASSERT</ref>(index<sp/>&lt;<sp/><ref refid="group__nrf__mpc__hal_1ga23e057328b822941974380fd47f35540" kindref="member">NRF_MPC_REGION_COUNT</ref>);</highlight></codeline>
<codeline lineno="739"><highlight class="normal"></highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structnrf__mpc__region__config__t" kindref="compound">nrf_mpc_region_config_t</ref><sp/>ret;</highlight></codeline>
<codeline lineno="741"><highlight class="normal"></highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/><sp/><sp/>ret.<ref refid="structnrf__mpc__region__config__t_1a054dea0aabe1a6ee2db1fecae85a6dbb" kindref="member">slave_number</ref><sp/>=<sp/>(p_reg-&gt;REGION[index].CONFIG<sp/>&amp;<sp/>MPC_REGION_CONFIG_SLAVENUMBER_Msk)</highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;<sp/>MPC_REGION_CONFIG_SLAVENUMBER_Pos;</highlight></codeline>
<codeline lineno="744"><highlight class="normal"></highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/><sp/><sp/>ret.<ref refid="structnrf__mpc__region__config__t_1a6cf4b2cfcaec789f3cd10a13b2fe2306" kindref="member">lock</ref><sp/>=<sp/>((p_reg-&gt;REGION[index].CONFIG<sp/>&amp;<sp/>MPC_REGION_CONFIG_LOCK_Msk)</highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;<sp/>MPC_REGION_CONFIG_LOCK_Pos)<sp/>==<sp/><sp/>MPC_REGION_CONFIG_LOCK_Locked;</highlight></codeline>
<codeline lineno="747"><highlight class="normal"></highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/><sp/><sp/>ret.<ref refid="structnrf__mpc__region__config__t_1a4de0d503ce985c901074ad86c6cd96ae" kindref="member">enable</ref><sp/>=<sp/>((p_reg-&gt;REGION[index].CONFIG<sp/>&amp;<sp/>MPC_REGION_CONFIG_ENABLE_Msk)</highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;<sp/>MPC_REGION_CONFIG_ENABLE_Pos)<sp/>==<sp/>MPC_REGION_CONFIG_ENABLE_Enabled;</highlight></codeline>
<codeline lineno="750"><highlight class="normal"></highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/><sp/><sp/>ret.<ref refid="structnrf__mpc__region__config__t_1aa6addf45d511c661f30f1c4448216539" kindref="member">permissions</ref><sp/>=<sp/>(p_reg-&gt;REGION[index].CONFIG<sp/>&amp;</highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(MPC_REGION_CONFIG_READ_Msk<sp/>|<sp/>MPC_REGION_CONFIG_WRITE_Msk<sp/>|</highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MPC_REGION_CONFIG_EXECUTE_Msk<sp/>|<sp/>MPC_REGION_CONFIG_SECATTR_Msk))</highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;<sp/>MPC_REGION_CONFIG_READ_Pos;</highlight></codeline>
<codeline lineno="755"><highlight class="normal"></highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/><sp/><sp/>ret.<ref refid="structnrf__mpc__region__config__t_1ac6f78d5496451fe0b92a7d38f22d0df7" kindref="member">owner</ref><sp/>=<sp/>(nrf_owner_t)((p_reg-&gt;REGION[index].CONFIG<sp/>&amp;<sp/>MPC_REGION_CONFIG_OWNERID_Msk)</highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;<sp/>MPC_REGION_CONFIG_OWNERID_Pos);</highlight></codeline>
<codeline lineno="758"><highlight class="normal"></highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="760"><highlight class="normal">}</highlight></codeline>
<codeline lineno="761"><highlight class="normal"></highlight></codeline>
<codeline lineno="762"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__mpc__hal_1ga7157d67ae0a98e234ee019202d106c40" kindref="member">nrf_mpc_region_startaddr_set</ref>(NRF_MPC_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index,</highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/>address)</highlight></codeline>
<codeline lineno="765"><highlight class="normal">{</highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__glue_1ga9698a3f6b6bea455d2b54a79e514ee36" kindref="member">NRFX_ASSERT</ref>(index<sp/>&lt;<sp/><ref refid="group__nrf__mpc__hal_1ga23e057328b822941974380fd47f35540" kindref="member">NRF_MPC_REGION_COUNT</ref>);</highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__glue_1ga9698a3f6b6bea455d2b54a79e514ee36" kindref="member">NRFX_ASSERT</ref>((address<sp/>&amp;<sp/>0xFFFUL)<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="768"><highlight class="normal"></highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;REGION[index].STARTADDR<sp/>=<sp/>address;</highlight></codeline>
<codeline lineno="770"><highlight class="normal">}</highlight></codeline>
<codeline lineno="771"><highlight class="normal"></highlight></codeline>
<codeline lineno="772"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__mpc__hal_1ga32f4b879381393d713cce3491fb1e57a" kindref="member">nrf_mpc_region_startaddr_get</ref>(NRF_MPC_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,<sp/>uint8_t<sp/>index)</highlight></codeline>
<codeline lineno="773"><highlight class="normal">{</highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__glue_1ga9698a3f6b6bea455d2b54a79e514ee36" kindref="member">NRFX_ASSERT</ref>(index<sp/>&lt;<sp/><ref refid="group__nrf__mpc__hal_1ga23e057328b822941974380fd47f35540" kindref="member">NRF_MPC_REGION_COUNT</ref>);</highlight></codeline>
<codeline lineno="775"><highlight class="normal"></highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p_reg-&gt;REGION[index].STARTADDR;</highlight></codeline>
<codeline lineno="777"><highlight class="normal">}</highlight></codeline>
<codeline lineno="778"><highlight class="normal"></highlight></codeline>
<codeline lineno="779"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__mpc__hal_1ga22f8d9a1f3e4fd561edbbdb88e143f6a" kindref="member">nrf_mpc_region_addrmask_set</ref>(NRF_MPC_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index,</highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/>address)</highlight></codeline>
<codeline lineno="782"><highlight class="normal">{</highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__glue_1ga9698a3f6b6bea455d2b54a79e514ee36" kindref="member">NRFX_ASSERT</ref>(index<sp/>&lt;<sp/><ref refid="group__nrf__mpc__hal_1ga23e057328b822941974380fd47f35540" kindref="member">NRF_MPC_REGION_COUNT</ref>);</highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__glue_1ga9698a3f6b6bea455d2b54a79e514ee36" kindref="member">NRFX_ASSERT</ref>((address<sp/>&amp;<sp/>0xFFFUL)<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="785"><highlight class="normal"></highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;REGION[index].ADDRMASK<sp/>=<sp/>address;</highlight></codeline>
<codeline lineno="787"><highlight class="normal">}</highlight></codeline>
<codeline lineno="788"><highlight class="normal"></highlight></codeline>
<codeline lineno="789"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__mpc__hal_1gae5cffc828be3aca6ebdeac0461001f90" kindref="member">nrf_mpc_region_addrmask_get</ref>(NRF_MPC_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,<sp/>uint8_t<sp/>index)</highlight></codeline>
<codeline lineno="790"><highlight class="normal">{</highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__glue_1ga9698a3f6b6bea455d2b54a79e514ee36" kindref="member">NRFX_ASSERT</ref>(index<sp/>&lt;<sp/><ref refid="group__nrf__mpc__hal_1ga23e057328b822941974380fd47f35540" kindref="member">NRF_MPC_REGION_COUNT</ref>);</highlight></codeline>
<codeline lineno="792"><highlight class="normal"></highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p_reg-&gt;REGION[index].ADDRMASK;</highlight></codeline>
<codeline lineno="794"><highlight class="normal">}</highlight></codeline>
<codeline lineno="795"><highlight class="normal"></highlight></codeline>
<codeline lineno="796"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__mpc__hal_1ga447c3ac18526b96414f7222acf308d75" kindref="member">nrf_mpc_region_masterport_set</ref>(NRF_MPC_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index,</highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/>mask)</highlight></codeline>
<codeline lineno="799"><highlight class="normal">{</highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__glue_1ga9698a3f6b6bea455d2b54a79e514ee36" kindref="member">NRFX_ASSERT</ref>(index<sp/>&lt;<sp/><ref refid="group__nrf__mpc__hal_1ga23e057328b822941974380fd47f35540" kindref="member">NRF_MPC_REGION_COUNT</ref>);</highlight></codeline>
<codeline lineno="801"><highlight class="normal"></highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;REGION[index].MASTERPORT<sp/>=<sp/>mask;</highlight></codeline>
<codeline lineno="803"><highlight class="normal">}</highlight></codeline>
<codeline lineno="804"><highlight class="normal"></highlight></codeline>
<codeline lineno="805"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__mpc__hal_1gaf2ead7ef46873e85ffff2a217a3f1cd4" kindref="member">nrf_mpc_region_masterport_get</ref>(NRF_MPC_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,<sp/>uint8_t<sp/>index)</highlight></codeline>
<codeline lineno="806"><highlight class="normal">{</highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__glue_1ga9698a3f6b6bea455d2b54a79e514ee36" kindref="member">NRFX_ASSERT</ref>(index<sp/>&lt;<sp/><ref refid="group__nrf__mpc__hal_1ga23e057328b822941974380fd47f35540" kindref="member">NRF_MPC_REGION_COUNT</ref>);</highlight></codeline>
<codeline lineno="808"><highlight class="normal"></highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p_reg-&gt;REGION[index].MASTERPORT;</highlight></codeline>
<codeline lineno="810"><highlight class="normal">}</highlight></codeline>
<codeline lineno="811"><highlight class="normal"></highlight></codeline>
<codeline lineno="812"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__mpc__hal_1ga39c507026fa171618a79101c6233ca8b" kindref="member">nrf_mpc_override_config_set</ref>(NRF_MPC_Type<sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index,</highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structnrf__mpc__override__config__t" kindref="compound">nrf_mpc_override_config_t</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_config)</highlight></codeline>
<codeline lineno="815"><highlight class="normal">{</highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__glue_1ga9698a3f6b6bea455d2b54a79e514ee36" kindref="member">NRFX_ASSERT</ref>(index<sp/>&lt;<sp/><ref refid="group__nrf__mpc__hal_1gad1d9c129c96df36540f7e075aad3ad12" kindref="member">NRF_MPC_OVERRIDE_COUNT</ref>);</highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__glue_1ga9698a3f6b6bea455d2b54a79e514ee36" kindref="member">NRFX_ASSERT</ref>(p_config<sp/>!=<sp/>NULL);</highlight></codeline>
<codeline lineno="818"><highlight class="normal"></highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;OVERRIDE[index].CONFIG<sp/>=<sp/>(((p_config-&gt;<ref refid="structnrf__mpc__override__config__t_1aeba44959ba9eb41e8554346fc519d457" kindref="member">slave_number</ref><sp/>&lt;&lt;</highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MPC_OVERRIDE_CONFIG_SLAVENUMBER_Pos)<sp/>&amp;</highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MPC_OVERRIDE_CONFIG_SLAVENUMBER_Msk)<sp/>|</highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((p_config-&gt;<ref refid="structnrf__mpc__override__config__t_1afaede07e7e8d148de29d572b9d131f32" kindref="member">lock</ref><sp/>?<sp/>MPC_OVERRIDE_CONFIG_LOCK_Locked<sp/>:</highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MPC_OVERRIDE_CONFIG_LOCK_Unlocked)<sp/>&lt;&lt;</highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MPC_OVERRIDE_CONFIG_LOCK_Pos)<sp/>|</highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((p_config-&gt;<ref refid="structnrf__mpc__override__config__t_1a7983b862caf84e27bfcba42a3484802f" kindref="member">enable</ref><sp/>?<sp/>MPC_OVERRIDE_CONFIG_ENABLE_Enabled<sp/>:</highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MPC_OVERRIDE_CONFIG_ENABLE_Disabled)<sp/>&lt;&lt;</highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MPC_OVERRIDE_CONFIG_ENABLE_Pos)<sp/>|</highlight></codeline>
<codeline lineno="828"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_MPC_HAS_SECDOM</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((p_config-&gt;<ref refid="structnrf__mpc__override__config__t_1af9c0906727de0d61f51abab88ca5baee" kindref="member">secdom_enable</ref><sp/>?</highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MPC_OVERRIDE_CONFIG_SECDOMENABLE_Enabled<sp/>:</highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MPC_OVERRIDE_CONFIG_SECDOMENABLE_Disabled)<sp/>&lt;&lt;</highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MPC_OVERRIDE_CONFIG_SECDOMENABLE_Pos)<sp/>|</highlight></codeline>
<codeline lineno="833"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0);</highlight></codeline>
<codeline lineno="835"><highlight class="normal">}</highlight></codeline>
<codeline lineno="836"><highlight class="normal"></highlight></codeline>
<codeline lineno="837"><highlight class="normal">NRF_STATIC_INLINE<sp/><ref refid="structnrf__mpc__override__config__t" kindref="compound">nrf_mpc_override_config_t</ref><sp/><ref refid="group__nrf__mpc__hal_1gac007fe07342b8eecba4932d41ed0efec" kindref="member">nrf_mpc_override_config_get</ref>(NRF_MPC_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index)</highlight></codeline>
<codeline lineno="839"><highlight class="normal">{</highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__glue_1ga9698a3f6b6bea455d2b54a79e514ee36" kindref="member">NRFX_ASSERT</ref>(index<sp/>&lt;<sp/><ref refid="group__nrf__mpc__hal_1gad1d9c129c96df36540f7e075aad3ad12" kindref="member">NRF_MPC_OVERRIDE_COUNT</ref>);</highlight></codeline>
<codeline lineno="841"><highlight class="normal"></highlight></codeline>
<codeline lineno="842"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structnrf__mpc__override__config__t" kindref="compound">nrf_mpc_override_config_t</ref><sp/>ret;</highlight></codeline>
<codeline lineno="843"><highlight class="normal"></highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/><sp/><sp/>ret.<ref refid="structnrf__mpc__override__config__t_1aeba44959ba9eb41e8554346fc519d457" kindref="member">slave_number</ref><sp/>=<sp/>(p_reg-&gt;OVERRIDE[index].CONFIG<sp/>&amp;<sp/>MPC_OVERRIDE_CONFIG_SLAVENUMBER_Msk)</highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;<sp/>MPC_OVERRIDE_CONFIG_SLAVENUMBER_Pos;</highlight></codeline>
<codeline lineno="846"><highlight class="normal"></highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/><sp/><sp/>ret.<ref refid="structnrf__mpc__override__config__t_1afaede07e7e8d148de29d572b9d131f32" kindref="member">lock</ref><sp/>=<sp/>((p_reg-&gt;OVERRIDE[index].CONFIG<sp/>&amp;<sp/>MPC_OVERRIDE_CONFIG_LOCK_Msk)</highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;<sp/>MPC_OVERRIDE_CONFIG_LOCK_Pos)<sp/>==<sp/>MPC_OVERRIDE_CONFIG_LOCK_Locked;</highlight></codeline>
<codeline lineno="849"><highlight class="normal"></highlight></codeline>
<codeline lineno="850"><highlight class="normal"><sp/><sp/><sp/><sp/>ret.<ref refid="structnrf__mpc__override__config__t_1a7983b862caf84e27bfcba42a3484802f" kindref="member">enable</ref><sp/>=<sp/>((p_reg-&gt;OVERRIDE[index].CONFIG<sp/>&amp;<sp/>MPC_OVERRIDE_CONFIG_ENABLE_Msk)</highlight></codeline>
<codeline lineno="851"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;<sp/>MPC_OVERRIDE_CONFIG_ENABLE_Pos)<sp/>==<sp/>MPC_OVERRIDE_CONFIG_ENABLE_Enabled;</highlight></codeline>
<codeline lineno="852"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_MPC_HAS_SECDOM</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="853"><highlight class="normal"><sp/><sp/><sp/><sp/>ret.<ref refid="structnrf__mpc__override__config__t_1af9c0906727de0d61f51abab88ca5baee" kindref="member">secdom_enable</ref><sp/>=<sp/>((p_reg-&gt;OVERRIDE[index].CONFIG<sp/>&amp;<sp/>MPC_OVERRIDE_CONFIG_SECDOMENABLE_Msk)</highlight></codeline>
<codeline lineno="854"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;<sp/>MPC_OVERRIDE_CONFIG_SECDOMENABLE_Pos)</highlight></codeline>
<codeline lineno="855"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>==<sp/>MPC_OVERRIDE_CONFIG_SECDOMENABLE_Enabled;</highlight></codeline>
<codeline lineno="856"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/><sp/><sp/>ret.<ref refid="structnrf__mpc__override__config__t_1a288370ffa540451f928016b4761af0e8" kindref="member">secure_mask</ref><sp/>=<sp/>((p_reg-&gt;OVERRIDE[index].CONFIG<sp/>&amp;<sp/>MPC_OVERRIDE_CONFIG_SECUREMASK_Msk)</highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;<sp/>MPC_OVERRIDE_CONFIG_SECUREMASK_Pos)<sp/>==</highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MPC_OVERRIDE_CONFIG_SECUREMASK_Enabled;</highlight></codeline>
<codeline lineno="860"><highlight class="normal"></highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="862"><highlight class="normal">}</highlight></codeline>
<codeline lineno="863"><highlight class="normal"></highlight></codeline>
<codeline lineno="864"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__mpc__hal_1ga860c13495b30810658e923daae9307c9" kindref="member">nrf_mpc_override_startaddr_set</ref>(NRF_MPC_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="865"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index,</highlight></codeline>
<codeline lineno="866"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/>address)</highlight></codeline>
<codeline lineno="867"><highlight class="normal">{</highlight></codeline>
<codeline lineno="868"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__glue_1ga9698a3f6b6bea455d2b54a79e514ee36" kindref="member">NRFX_ASSERT</ref>(index<sp/>&lt;<sp/><ref refid="group__nrf__mpc__hal_1gad1d9c129c96df36540f7e075aad3ad12" kindref="member">NRF_MPC_OVERRIDE_COUNT</ref>);</highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__glue_1ga9698a3f6b6bea455d2b54a79e514ee36" kindref="member">NRFX_ASSERT</ref>((address<sp/>&amp;<sp/>0xFFFUL)<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="870"><highlight class="normal"></highlight></codeline>
<codeline lineno="871"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;OVERRIDE[index].STARTADDR<sp/>=<sp/>address;</highlight></codeline>
<codeline lineno="872"><highlight class="normal">}</highlight></codeline>
<codeline lineno="873"><highlight class="normal"></highlight></codeline>
<codeline lineno="874"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__mpc__hal_1gae3d4c0b94e029e5c76125e12dee391cc" kindref="member">nrf_mpc_override_startaddr_get</ref>(NRF_MPC_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="875"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index)</highlight></codeline>
<codeline lineno="876"><highlight class="normal">{</highlight></codeline>
<codeline lineno="877"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__glue_1ga9698a3f6b6bea455d2b54a79e514ee36" kindref="member">NRFX_ASSERT</ref>(index<sp/>&lt;<sp/><ref refid="group__nrf__mpc__hal_1gad1d9c129c96df36540f7e075aad3ad12" kindref="member">NRF_MPC_OVERRIDE_COUNT</ref>);</highlight></codeline>
<codeline lineno="878"><highlight class="normal"></highlight></codeline>
<codeline lineno="879"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p_reg-&gt;OVERRIDE[index].STARTADDR;</highlight></codeline>
<codeline lineno="880"><highlight class="normal">}</highlight></codeline>
<codeline lineno="881"><highlight class="normal"></highlight></codeline>
<codeline lineno="882"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__mpc__hal_1ga3788c87dd9420235f8965883202c9c78" kindref="member">nrf_mpc_override_endaddr_set</ref>(NRF_MPC_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index,</highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/>address)</highlight></codeline>
<codeline lineno="885"><highlight class="normal">{</highlight></codeline>
<codeline lineno="886"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__glue_1ga9698a3f6b6bea455d2b54a79e514ee36" kindref="member">NRFX_ASSERT</ref>(index<sp/>&lt;<sp/><ref refid="group__nrf__mpc__hal_1gad1d9c129c96df36540f7e075aad3ad12" kindref="member">NRF_MPC_OVERRIDE_COUNT</ref>);</highlight></codeline>
<codeline lineno="887"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__glue_1ga9698a3f6b6bea455d2b54a79e514ee36" kindref="member">NRFX_ASSERT</ref>((address<sp/>&amp;<sp/>0xFFFUL)<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="888"><highlight class="normal"></highlight></codeline>
<codeline lineno="889"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;OVERRIDE[index].ENDADDR<sp/>=<sp/>address;</highlight></codeline>
<codeline lineno="890"><highlight class="normal">}</highlight></codeline>
<codeline lineno="891"><highlight class="normal"></highlight></codeline>
<codeline lineno="892"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__mpc__hal_1gac05d65c913a5fa0c53ea112257da7969" kindref="member">nrf_mpc_override_endaddr_get</ref>(NRF_MPC_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="893"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index)</highlight></codeline>
<codeline lineno="894"><highlight class="normal">{</highlight></codeline>
<codeline lineno="895"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__glue_1ga9698a3f6b6bea455d2b54a79e514ee36" kindref="member">NRFX_ASSERT</ref>(index<sp/>&lt;<sp/><ref refid="group__nrf__mpc__hal_1gad1d9c129c96df36540f7e075aad3ad12" kindref="member">NRF_MPC_OVERRIDE_COUNT</ref>);</highlight></codeline>
<codeline lineno="896"><highlight class="normal"></highlight></codeline>
<codeline lineno="897"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p_reg-&gt;OVERRIDE[index].ENDADDR;</highlight></codeline>
<codeline lineno="898"><highlight class="normal">}</highlight></codeline>
<codeline lineno="899"><highlight class="normal"></highlight></codeline>
<codeline lineno="900"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_MPC_HAS_OVERRIDE_OFFSET</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="901"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__mpc__hal_1ga4360714e10c9b3a46f342b9084b34911" kindref="member">nrf_mpc_override_offset_set</ref>(NRF_MPC_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="902"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index,</highlight></codeline>
<codeline lineno="903"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/>offset)</highlight></codeline>
<codeline lineno="904"><highlight class="normal">{</highlight></codeline>
<codeline lineno="905"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__glue_1ga9698a3f6b6bea455d2b54a79e514ee36" kindref="member">NRFX_ASSERT</ref>(index<sp/>&lt;<sp/><ref refid="group__nrf__mpc__hal_1gad1d9c129c96df36540f7e075aad3ad12" kindref="member">NRF_MPC_OVERRIDE_COUNT</ref>);</highlight></codeline>
<codeline lineno="906"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__glue_1ga9698a3f6b6bea455d2b54a79e514ee36" kindref="member">NRFX_ASSERT</ref>((offset<sp/>&amp;<sp/>0x3FFUL)<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="907"><highlight class="normal"></highlight></codeline>
<codeline lineno="908"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;OVERRIDE[index].OFFSET<sp/>=<sp/>(int32_t)offset;</highlight></codeline>
<codeline lineno="909"><highlight class="normal">}</highlight></codeline>
<codeline lineno="910"><highlight class="normal"></highlight></codeline>
<codeline lineno="911"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__mpc__hal_1gaebfa2cf1848130f9c4bc17c814545e1a" kindref="member">nrf_mpc_override_offset_get</ref>(NRF_MPC_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="912"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index)</highlight></codeline>
<codeline lineno="913"><highlight class="normal">{</highlight></codeline>
<codeline lineno="914"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__glue_1ga9698a3f6b6bea455d2b54a79e514ee36" kindref="member">NRFX_ASSERT</ref>(index<sp/>&lt;<sp/><ref refid="group__nrf__mpc__hal_1gad1d9c129c96df36540f7e075aad3ad12" kindref="member">NRF_MPC_OVERRIDE_COUNT</ref>);</highlight></codeline>
<codeline lineno="915"><highlight class="normal"></highlight></codeline>
<codeline lineno="916"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(uint32_t)p_reg-&gt;OVERRIDE[index].OFFSET;</highlight></codeline>
<codeline lineno="917"><highlight class="normal">}</highlight></codeline>
<codeline lineno="918"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="919"><highlight class="normal"></highlight></codeline>
<codeline lineno="920"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__mpc__hal_1ga765e067757c5e85d628788848163ee95" kindref="member">nrf_mpc_override_perm_set</ref>(NRF_MPC_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="921"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index,</highlight></codeline>
<codeline lineno="922"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/>permissions)</highlight></codeline>
<codeline lineno="923"><highlight class="normal">{</highlight></codeline>
<codeline lineno="924"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__glue_1ga9698a3f6b6bea455d2b54a79e514ee36" kindref="member">NRFX_ASSERT</ref>(index<sp/>&lt;<sp/><ref refid="group__nrf__mpc__hal_1gad1d9c129c96df36540f7e075aad3ad12" kindref="member">NRF_MPC_OVERRIDE_COUNT</ref>);</highlight></codeline>
<codeline lineno="925"><highlight class="normal"></highlight></codeline>
<codeline lineno="926"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;OVERRIDE[index].PERM<sp/>=<sp/>permissions;</highlight></codeline>
<codeline lineno="927"><highlight class="normal">}</highlight></codeline>
<codeline lineno="928"><highlight class="normal"></highlight></codeline>
<codeline lineno="929"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__mpc__hal_1gafced42e6003285cc6b93aef32c08715e" kindref="member">nrf_mpc_override_perm_get</ref>(NRF_MPC_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="930"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index)</highlight></codeline>
<codeline lineno="931"><highlight class="normal">{</highlight></codeline>
<codeline lineno="932"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__glue_1ga9698a3f6b6bea455d2b54a79e514ee36" kindref="member">NRFX_ASSERT</ref>(index<sp/>&lt;<sp/><ref refid="group__nrf__mpc__hal_1gad1d9c129c96df36540f7e075aad3ad12" kindref="member">NRF_MPC_OVERRIDE_COUNT</ref>);</highlight></codeline>
<codeline lineno="933"><highlight class="normal"></highlight></codeline>
<codeline lineno="934"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p_reg-&gt;OVERRIDE[index].PERM;</highlight></codeline>
<codeline lineno="935"><highlight class="normal">}</highlight></codeline>
<codeline lineno="936"><highlight class="normal"></highlight></codeline>
<codeline lineno="937"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__mpc__hal_1ga9baa4d2ef6d04d3c6125f2ed9493aaf5" kindref="member">nrf_mpc_override_permmask_set</ref>(NRF_MPC_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="938"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index,</highlight></codeline>
<codeline lineno="939"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/>permissions)</highlight></codeline>
<codeline lineno="940"><highlight class="normal">{</highlight></codeline>
<codeline lineno="941"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__glue_1ga9698a3f6b6bea455d2b54a79e514ee36" kindref="member">NRFX_ASSERT</ref>(index<sp/>&lt;<sp/><ref refid="group__nrf__mpc__hal_1gad1d9c129c96df36540f7e075aad3ad12" kindref="member">NRF_MPC_OVERRIDE_COUNT</ref>);</highlight></codeline>
<codeline lineno="942"><highlight class="normal"></highlight></codeline>
<codeline lineno="943"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;OVERRIDE[index].PERMMASK<sp/>=<sp/>permissions;</highlight></codeline>
<codeline lineno="944"><highlight class="normal">}</highlight></codeline>
<codeline lineno="945"><highlight class="normal"></highlight></codeline>
<codeline lineno="946"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__mpc__hal_1ga13a7fe4a399c7d24fcf9f9c7788c09c1" kindref="member">nrf_mpc_override_permmask_get</ref>(NRF_MPC_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="947"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index)</highlight></codeline>
<codeline lineno="948"><highlight class="normal">{</highlight></codeline>
<codeline lineno="949"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__glue_1ga9698a3f6b6bea455d2b54a79e514ee36" kindref="member">NRFX_ASSERT</ref>(index<sp/>&lt;<sp/><ref refid="group__nrf__mpc__hal_1gad1d9c129c96df36540f7e075aad3ad12" kindref="member">NRF_MPC_OVERRIDE_COUNT</ref>);</highlight></codeline>
<codeline lineno="950"><highlight class="normal"></highlight></codeline>
<codeline lineno="951"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p_reg-&gt;OVERRIDE[index].PERMMASK;</highlight></codeline>
<codeline lineno="952"><highlight class="normal">}</highlight></codeline>
<codeline lineno="953"><highlight class="normal"></highlight></codeline>
<codeline lineno="954"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__mpc__hal_1ga0fd600b1d367f88e6181ec42e9c1f842" kindref="member">nrf_mpc_override_ownerid_set</ref>(NRF_MPC_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="955"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index,</highlight></codeline>
<codeline lineno="956"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nrf_owner_t<sp/><sp/><sp/><sp/>owner_id)</highlight></codeline>
<codeline lineno="957"><highlight class="normal">{</highlight></codeline>
<codeline lineno="958"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__glue_1ga9698a3f6b6bea455d2b54a79e514ee36" kindref="member">NRFX_ASSERT</ref>(index<sp/>&lt;<sp/><ref refid="group__nrf__mpc__hal_1gad1d9c129c96df36540f7e075aad3ad12" kindref="member">NRF_MPC_OVERRIDE_COUNT</ref>);</highlight></codeline>
<codeline lineno="959"><highlight class="normal"></highlight></codeline>
<codeline lineno="960"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;OVERRIDE[index].OWNER<sp/>=<sp/>(owner_id<sp/>&lt;&lt;<sp/>MPC_OVERRIDE_OWNER_OWNERID_Pos)<sp/>&amp;</highlight></codeline>
<codeline lineno="961"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MPC_OVERRIDE_OWNER_OWNERID_Msk;</highlight></codeline>
<codeline lineno="962"><highlight class="normal">}</highlight></codeline>
<codeline lineno="963"><highlight class="normal"></highlight></codeline>
<codeline lineno="964"><highlight class="normal">NRF_STATIC_INLINE<sp/>nrf_owner_t<sp/><ref refid="group__nrf__mpc__hal_1ga36bb427a4979cd656667b8a08ad55ff4" kindref="member">nrf_mpc_override_ownerid_get</ref>(NRF_MPC_Type<sp/>*<sp/>p_reg,<sp/>uint8_t<sp/>index)</highlight></codeline>
<codeline lineno="965"><highlight class="normal">{</highlight></codeline>
<codeline lineno="966"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__glue_1ga9698a3f6b6bea455d2b54a79e514ee36" kindref="member">NRFX_ASSERT</ref>(index<sp/>&lt;<sp/><ref refid="group__nrf__mpc__hal_1gad1d9c129c96df36540f7e075aad3ad12" kindref="member">NRF_MPC_OVERRIDE_COUNT</ref>);</highlight></codeline>
<codeline lineno="967"><highlight class="normal"></highlight></codeline>
<codeline lineno="968"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(nrf_owner_t)p_reg-&gt;OVERRIDE[index].OWNER;</highlight></codeline>
<codeline lineno="969"><highlight class="normal">}</highlight></codeline>
<codeline lineno="970"><highlight class="normal"></highlight></codeline>
<codeline lineno="971"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__mpc__hal_1gae79fb68d0f2cdb8bab520731e25b38e9" kindref="member">nrf_mpc_override_masterport_set</ref>(NRF_MPC_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="972"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index,</highlight></codeline>
<codeline lineno="973"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/>mask)</highlight></codeline>
<codeline lineno="974"><highlight class="normal">{</highlight></codeline>
<codeline lineno="975"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__glue_1ga9698a3f6b6bea455d2b54a79e514ee36" kindref="member">NRFX_ASSERT</ref>(index<sp/>&lt;<sp/><ref refid="group__nrf__mpc__hal_1gad1d9c129c96df36540f7e075aad3ad12" kindref="member">NRF_MPC_OVERRIDE_COUNT</ref>);</highlight></codeline>
<codeline lineno="976"><highlight class="normal"></highlight></codeline>
<codeline lineno="977"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;OVERRIDE[index].MASTERPORT<sp/>=<sp/>mask;</highlight></codeline>
<codeline lineno="978"><highlight class="normal">}</highlight></codeline>
<codeline lineno="979"><highlight class="normal"></highlight></codeline>
<codeline lineno="980"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__mpc__hal_1ga398b9aad20b0735a4ada32812a3dd3d0" kindref="member">nrf_mpc_override_masterport_get</ref>(NRF_MPC_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="981"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index)</highlight></codeline>
<codeline lineno="982"><highlight class="normal">{</highlight></codeline>
<codeline lineno="983"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__glue_1ga9698a3f6b6bea455d2b54a79e514ee36" kindref="member">NRFX_ASSERT</ref>(index<sp/>&lt;<sp/><ref refid="group__nrf__mpc__hal_1gad1d9c129c96df36540f7e075aad3ad12" kindref="member">NRF_MPC_OVERRIDE_COUNT</ref>);</highlight></codeline>
<codeline lineno="984"><highlight class="normal"></highlight></codeline>
<codeline lineno="985"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p_reg-&gt;OVERRIDE[index].MASTERPORT;</highlight></codeline>
<codeline lineno="986"><highlight class="normal">}</highlight></codeline>
<codeline lineno="987"><highlight class="normal"></highlight></codeline>
<codeline lineno="988"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__mpc__hal_1gaaef975d68f3bb54b021d37ba1d64c9ce" kindref="member">nrf_mpc_memaccerr_address_get</ref>(NRF_MPC_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="989"><highlight class="normal">{</highlight></codeline>
<codeline lineno="990"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p_reg-&gt;MEMACCERR.ADDRESS;</highlight></codeline>
<codeline lineno="991"><highlight class="normal">}</highlight></codeline>
<codeline lineno="992"><highlight class="normal"></highlight></codeline>
<codeline lineno="993"><highlight class="normal">NRF_STATIC_INLINE<sp/>nrf_owner_t<sp/><ref refid="group__nrf__mpc__hal_1ga7b52f80f1b3190f2630418b740a8abbb" kindref="member">nrf_mpc_memaccerr_info_ownerid_get</ref>(NRF_MPC_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="994"><highlight class="normal">{</highlight></codeline>
<codeline lineno="995"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(nrf_owner_t)((p_reg-&gt;MEMACCERR.INFO<sp/>&amp;<sp/>MPC_MEMACCERR_INFO_OWNERID_Msk)</highlight></codeline>
<codeline lineno="996"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;<sp/>MPC_MEMACCERR_INFO_OWNERID_Pos);</highlight></codeline>
<codeline lineno="997"><highlight class="normal">}</highlight></codeline>
<codeline lineno="998"><highlight class="normal"></highlight></codeline>
<codeline lineno="999"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint8_t<sp/><ref refid="group__nrf__mpc__hal_1ga788b2a97dba99dfa03f09ef727c178d5" kindref="member">nrf_mpc_memaccerr_info_masterport_get</ref>(NRF_MPC_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="1000"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1001"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((p_reg-&gt;MEMACCERR.INFO<sp/>&amp;<sp/>MPC_MEMACCERR_INFO_MASTERPORT_Msk)</highlight></codeline>
<codeline lineno="1002"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;<sp/>MPC_MEMACCERR_INFO_MASTERPORT_Pos);</highlight></codeline>
<codeline lineno="1003"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1004"><highlight class="normal"></highlight></codeline>
<codeline lineno="1005"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__mpc__hal_1gaeca19e5b26e7b6504cc179e01ed93f05" kindref="member">nrf_mpc_memaccerr_info_perm_get</ref>(NRF_MPC_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="1006"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1007"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((p_reg-&gt;MEMACCERR.INFO<sp/>&amp;</highlight></codeline>
<codeline lineno="1008"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(MPC_MEMACCERR_INFO_READ_Msk<sp/>|<sp/>MPC_MEMACCERR_INFO_WRITE_Msk<sp/>|</highlight></codeline>
<codeline lineno="1009"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MPC_MEMACCERR_INFO_EXECUTE_Msk<sp/>|<sp/>MPC_MEMACCERR_INFO_SECURE_Msk))</highlight></codeline>
<codeline lineno="1010"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;<sp/>MPC_MEMACCERR_INFO_READ_Pos);</highlight></codeline>
<codeline lineno="1011"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1012"><highlight class="normal"></highlight></codeline>
<codeline lineno="1013"><highlight class="normal">NRF_STATIC_INLINE<sp/><ref refid="group__nrf__mpc__hal_1ga7a52bbfed00c736a7ee0f49896fa4081" kindref="member">nrf_mpc_errorsource_t</ref></highlight></codeline>
<codeline lineno="1014"><highlight class="normal"><ref refid="group__nrf__mpc__hal_1gad5eedb315b47a18f9965755353a60f31" kindref="member">nrf_mpc_memaccerr_info_errorsource_get</ref>(NRF_MPC_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="1015"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1016"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="group__nrf__mpc__hal_1ga7a52bbfed00c736a7ee0f49896fa4081" kindref="member">nrf_mpc_errorsource_t</ref>)((p_reg-&gt;MEMACCERR.INFO<sp/>&amp;<sp/>MPC_MEMACCERR_INFO_ERRORSOURCE_Msk)</highlight></codeline>
<codeline lineno="1017"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;<sp/>MPC_MEMACCERR_INFO_ERRORSOURCE_Pos);</highlight></codeline>
<codeline lineno="1018"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1019"><highlight class="normal"></highlight></codeline>
<codeline lineno="1020"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__mpc__hal_1gaeec50c60a288767deb1587481edbe762" kindref="member">nrf_mpc_globalslave_masterport_set</ref>(NRF_MPC_Type<sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>mask)</highlight></codeline>
<codeline lineno="1021"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1022"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;GLOBALSLAVE.MASTERPORT<sp/>=<sp/>mask;</highlight></codeline>
<codeline lineno="1023"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1024"><highlight class="normal"></highlight></codeline>
<codeline lineno="1025"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__mpc__hal_1ga0aae47ddb1607ea45e94b1f8bd281e85" kindref="member">nrf_mpc_globalslave_masterport_get</ref>(NRF_MPC_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="1026"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1027"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p_reg-&gt;GLOBALSLAVE.MASTERPORT;</highlight></codeline>
<codeline lineno="1028"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1029"><highlight class="normal"></highlight></codeline>
<codeline lineno="1030"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__mpc__hal_1gae6edfd83d8f3f243e4637a3152d829f7" kindref="member">nrf_mpc_globalslave_lock_enable</ref>(NRF_MPC_Type<sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="1031"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1032"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;GLOBALSLAVE.LOCK<sp/>=<sp/>(MPC_GLOBALSLAVE_LOCK_LOCK_Enabled<sp/>&lt;&lt;<sp/>MPC_GLOBALSLAVE_LOCK_LOCK_Pos);</highlight></codeline>
<codeline lineno="1033"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1034"><highlight class="normal"></highlight></codeline>
<codeline lineno="1035"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrf__mpc__hal_1ga6a6e9ce5f593eca645894a5d5ca0aa1e" kindref="member">nrf_mpc_globalslave_lock_check</ref>(NRF_MPC_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="1036"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1037"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((p_reg-&gt;GLOBALSLAVE.LOCK<sp/>&amp;<sp/>MPC_GLOBALSLAVE_LOCK_LOCK_Msk)</highlight></codeline>
<codeline lineno="1038"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;<sp/>MPC_GLOBALSLAVE_LOCK_LOCK_Pos)<sp/>==<sp/>MPC_GLOBALSLAVE_LOCK_LOCK_Enabled;</highlight></codeline>
<codeline lineno="1039"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1040"><highlight class="normal"></highlight></codeline>
<codeline lineno="1041"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_MPC_HAS_RTCHOKE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1042"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__mpc__hal_1gac611c03b4cabceedf8df9694361a6f66" kindref="member">nrf_mpc_rtchoke_writeaccess_set</ref>(NRF_MPC_Type<sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>mask)</highlight></codeline>
<codeline lineno="1043"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1044"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;RTCHOKE.WRITEACCESS<sp/>=<sp/>mask;</highlight></codeline>
<codeline lineno="1045"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1046"><highlight class="normal"></highlight></codeline>
<codeline lineno="1047"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__mpc__hal_1ga2ddf36ab7898e4415c2a2334198598d5" kindref="member">nrf_mpc_rtchoke_writeaccess_get</ref>(NRF_MPC_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="1048"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1049"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p_reg-&gt;RTCHOKE.WRITEACCESS;</highlight></codeline>
<codeline lineno="1050"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1051"><highlight class="normal"></highlight></codeline>
<codeline lineno="1052"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__mpc__hal_1ga13bb38ea31028aae2aac0ee3e091b21e" kindref="member">nrf_mpc_rtchoke_readaccess_set</ref>(NRF_MPC_Type<sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>mask)</highlight></codeline>
<codeline lineno="1053"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1054"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;RTCHOKE.READACCESS<sp/>=<sp/>mask;</highlight></codeline>
<codeline lineno="1055"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1056"><highlight class="normal"></highlight></codeline>
<codeline lineno="1057"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__mpc__hal_1ga5e448fe5c32baa27c83d191623623249" kindref="member">nrf_mpc_rtchoke_readaccess_get</ref>(NRF_MPC_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="1058"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1059"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p_reg-&gt;RTCHOKE.READACCESS;</highlight></codeline>
<codeline lineno="1060"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1061"><highlight class="normal"></highlight></codeline>
<codeline lineno="1062"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__mpc__hal_1gad8417da63a1d979fbb0640f5863c4324" kindref="member">nrf_mpc_rtchoke_delay_set</ref>(NRF_MPC_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="1063"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>slave,</highlight></codeline>
<codeline lineno="1064"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>delay)</highlight></codeline>
<codeline lineno="1065"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1066"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__glue_1ga9698a3f6b6bea455d2b54a79e514ee36" kindref="member">NRFX_ASSERT</ref>(slave<sp/>&lt;<sp/><ref refid="group__nrf__mpc__hal_1ga61549ebb9c4c7beb97135757d0ea3b43" kindref="member">NRF_MPC_RTCHOKE_COUNT</ref>);</highlight></codeline>
<codeline lineno="1067"><highlight class="normal"></highlight></codeline>
<codeline lineno="1068"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;RTCHOKE.DELAY[slave]<sp/>=<sp/>delay;</highlight></codeline>
<codeline lineno="1069"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1070"><highlight class="normal"></highlight></codeline>
<codeline lineno="1071"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint8_t<sp/><ref refid="group__nrf__mpc__hal_1ga175f2577dab13295cdaec1156517ba2c" kindref="member">nrf_mpc_rtchoke_delay_get</ref>(NRF_MPC_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,<sp/>uint8_t<sp/>slave)</highlight></codeline>
<codeline lineno="1072"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1073"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__glue_1ga9698a3f6b6bea455d2b54a79e514ee36" kindref="member">NRFX_ASSERT</ref>(slave<sp/>&lt;<sp/><ref refid="group__nrf__mpc__hal_1ga61549ebb9c4c7beb97135757d0ea3b43" kindref="member">NRF_MPC_RTCHOKE_COUNT</ref>);</highlight></codeline>
<codeline lineno="1074"><highlight class="normal"></highlight></codeline>
<codeline lineno="1075"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(uint8_t)p_reg-&gt;RTCHOKE.DELAY[slave];</highlight></codeline>
<codeline lineno="1076"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1077"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1078"><highlight class="normal"></highlight></codeline>
<codeline lineno="1079"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRF_DECLARE_ONLY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1080"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1081"><highlight class="comment">/**<sp/>@}<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1082"><highlight class="normal"></highlight></codeline>
<codeline lineno="1083"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1084"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1085"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1086"><highlight class="normal"></highlight></codeline>
<codeline lineno="1087"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>NRF_MPC_H_<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="hal/nrf_mpc.h"/>
  </compounddef>
</doxygen>
