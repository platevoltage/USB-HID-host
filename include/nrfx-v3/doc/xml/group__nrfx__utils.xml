<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="group__nrfx__utils" kind="group">
    <compoundname>nrfx_utils</compoundname>
    <title>Preprocessor utility macros</title>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__nrfx__utils_1ga3759226de0d998545425ded334168058" prot="public" static="no">
        <name>NRFX_COND_CODE_1</name>
        <param><defname>_flag</defname></param>
        <param><defname>_if_1_code</defname></param>
        <param><defname>_else_code</defname></param>
        <initializer>    _NRFX_COND_CODE_1(_flag, _if_1_code, _else_code)</initializer>
        <briefdescription>
<para>Macro for inserting code depending on whether <computeroutput>_flag</computeroutput> exists and expands to 1 or not. </para>
        </briefdescription>
        <detaileddescription>
<para>To prevent the preprocessor from treating commas as argument separators, the <computeroutput>_if_1_code</computeroutput> and <computeroutput>_else_code</computeroutput> expressions must be inside brackets/parentheses: <computeroutput>()</computeroutput>. These are stripped away during macro expansion.</para>
<para>Example: <verbatim>NRFX_COND_CODE_1(CONFIG_FLAG, (uint32_t x;), (there_is_no_flag();))
</verbatim> If <computeroutput>CONFIG_FLAG</computeroutput> is defined to 1, this expands to: <verbatim>uint32_t x;
</verbatim> It expands to <computeroutput>there_is_no_flag();</computeroutput> otherwise.</para>
<para>This could be used as an alternative to: <verbatim>#if defined(CONFIG_FLAG) &amp;&amp; (CONFIG_FLAG == 1)
#define MAYBE_DECLARE(x) uint32_t x
#else
#define MAYBE_DECLARE(x) there_is_no_flag()
#endif

MAYBE_DECLARE(x);
</verbatim> However, the advantage of COND_CODE_1() is that code is resolved in place where it is used, while the <computeroutput>#if</computeroutput> method defines <computeroutput>MAYBE_DECLARE</computeroutput> on two lines and requires it to be invoked again on a separate line. This makes COND_CODE_1() more concise and also sometimes more useful when used within another macro&apos;s expansion.</para>
<para><simplesect kind="note"><para><computeroutput>_flag</computeroutput> can be the result of preprocessor expansion, however <computeroutput>_if_1_code</computeroutput> is only expanded if <computeroutput>_flag</computeroutput> expands to the integer literal 1. Integer expressions that evaluate to 1, e.g. after doing some arithmetic, will not work.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">_flag</parametername>
</parameternamelist>
<parameterdescription>
<para>Evaluated flag </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">_if_1_code</parametername>
</parameternamelist>
<parameterdescription>
<para>Result if <computeroutput>_flag</computeroutput> expands to 1; must be in parentheses </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">_else_code</parametername>
</parameternamelist>
<parameterdescription>
<para>Result otherwise; must be in parentheses </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/nrfx_utils.h" line="89" column="9" bodyfile="drivers/nrfx_utils.h" bodystart="89" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrfx__utils_1gac0b7db186b16e71e28d7eb956869a30a" prot="public" static="no">
        <name>NRFX_COND_CODE_0</name>
        <param><defname>_flag</defname></param>
        <param><defname>_if_0_code</defname></param>
        <param><defname>_else_code</defname></param>
        <initializer>    _NRFX_COND_CODE_0(_flag, _if_0_code, _else_code)</initializer>
        <briefdescription>
<para>Macro for inserting code depending on whether <computeroutput>_flag</computeroutput> exists and expands to 0 or not. </para>
        </briefdescription>
        <detaileddescription>
<para>This is like <ref refid="group__nrfx__utils_1ga3759226de0d998545425ded334168058" kindref="member">NRFX_COND_CODE_1()</ref>, except that it tests whether <computeroutput>_flag</computeroutput> expands to the integer literal 0. It expands to <computeroutput>_if_0_code</computeroutput> if so, and <computeroutput>_else_code</computeroutput> otherwise; both of these must be enclosed in parentheses.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">_flag</parametername>
</parameternamelist>
<parameterdescription>
<para>Evaluated flag </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">_if_0_code</parametername>
</parameternamelist>
<parameterdescription>
<para>Result if <computeroutput>_flag</computeroutput> expands to 0; must be in parentheses </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">_else_code</parametername>
</parameternamelist>
<parameterdescription>
<para>Result otherwise; must be in parentheses </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/nrfx_utils.h" line="104" column="9" bodyfile="drivers/nrfx_utils.h" bodystart="104" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrfx__utils_1ga238278032464c932dc46946bedd44473" prot="public" static="no">
        <name>NRFX_IS_ENABLED</name>
        <param><defname>config_macro</defname></param>
        <initializer>_NRFX_IS_ENABLED1(config_macro)</initializer>
        <briefdescription>
<para>Macro for checking for macro definition in compiler-visible expressions. </para>
        </briefdescription>
        <detaileddescription>
<para>It has the effect of taking a macro value that may be defined to &quot;1&quot; or may not be defined at all and turning it into a literal expression that can be handled by the C compiler instead of just the preprocessor.</para>
<para>That is, it works similarly to <computeroutput>#if defined(CONFIG_FOO)</computeroutput> except that its expansion is a C expression. Thus, much <computeroutput>#ifdef</computeroutput> usage can be replaced with equivalents like: <verbatim>if (IS_ENABLED(CONFIG_FOO)) {
        do_something_with_foo
}
</verbatim> This is cleaner since the compiler can generate errors and warnings for <computeroutput>do_something_with_foo</computeroutput> even when <computeroutput>CONFIG_FOO</computeroutput> is undefined.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">config_macro</parametername>
</parameternamelist>
<parameterdescription>
<para>Macro to check</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if <computeroutput>config_macro</computeroutput> is defined to 1, 0 otherwise (including if <computeroutput>config_macro</computeroutput> is not defined) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/nrfx_utils.h" line="131" column="9" bodyfile="drivers/nrfx_utils.h" bodystart="131" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrfx__utils_1gaec8b3bf0959011b5e1eda4252a8f329a" prot="public" static="no">
        <name>NRFX_LISTIFY</name>
        <param><defname>LEN</defname></param>
        <param><defname>F</defname></param>
        <param><defname>sep</defname></param>
        <param><defname>...</defname></param>
        <initializer>    <ref refid="group__nrfx__common_1ga9fced903f4d0fc450e63d40426050236" kindref="member">NRFX_CONCAT_2</ref>(_NRFX_LISTIFY_, LEN)(F, sep, __VA_ARGS__)</initializer>
        <briefdescription>
<para>Macro for generating a sequence of code with configurable separator. </para>
        </briefdescription>
        <detaileddescription>
<para>Example: <verbatim>#define FOO(i, _) MY_PWM ## i
{ NRFX_LISTIFY(PWM_COUNT, FOO, (,)) }
</verbatim> The above two lines expand to:</para>
<para>{ MY_PWM0 , MY_PWM1 }</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">LEN</parametername>
</parameternamelist>
<parameterdescription>
<para>The length of the sequence. Must be an integer literal less than 255. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">F</parametername>
</parameternamelist>
<parameterdescription>
<para>A macro function that accepts at least two arguments: <computeroutput>F(i, ...)</computeroutput>. <computeroutput>F</computeroutput> is called repeatedly in the expansion. Its first argument <computeroutput>i</computeroutput> is the index in the sequence, and the variable list of arguments passed to LISTIFY are passed through to <computeroutput>F</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">sep</parametername>
</parameternamelist>
<parameterdescription>
<para>Separator (e.g. comma or semicolon). Must be in parentheses; this is required to enable providing a comma as separator.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>Calling NRFX_LISTIFY with undefined arguments has undefined behavior. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/nrfx_utils.h" line="157" column="9" bodyfile="drivers/nrfx_utils.h" bodystart="157" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrfx__utils_1ga49d7e75b5cdb92a5f8e4196c4f3e52bf" prot="public" static="no">
        <name>NRFX_IS_EMPTY</name>
        <param><defname>arg</defname></param>
        <initializer>_NRFX_IS_EMPTY(arg)</initializer>
        <briefdescription>
<para>Macro for checking if input argument is empty. </para>
        </briefdescription>
        <detaileddescription>
<para>Empty means that nothing is provided or provided value is resolved to nothing (e.g. empty define).</para>
<para>Macro idea is taken from P99 which is under Apache 2.0 license and described by Jens Gustedt <ulink url="https://gustedt.wordpress.com/2010/06/08/detect-empty-macro-arguments/">https://gustedt.wordpress.com/2010/06/08/detect-empty-macro-arguments/</ulink></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>arg</parametername>
</parameternamelist>
<parameterdescription>
<para>Argument.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>1</parametername>
</parameternamelist>
<parameterdescription>
<para>if argument is empty. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>if argument is not empty. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/nrfx_utils.h" line="174" column="9" bodyfile="drivers/nrfx_utils.h" bodystart="174" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrfx__utils_1ga9b4880ee0671521522e81f00f8229fb5" prot="public" static="no">
        <name>NRFX_NUM_VA_ARGS_LESS_1</name>
        <param><defname>...</defname></param>
        <initializer>        _NRFX_NUM_VA_ARGS_LESS_1_IMPL(__VA_ARGS__, 63, 62, 61, \
                    60, 59, 58, 57, 56, 55, 54, 53, 52, 51, \
                    50, 49, 48, 47, 46, 45, 44, 43, 42, 41, \
                    40, 39, 38, 37, 36, 35, 34, 33, 32, 31, \
                    30, 29, 28, 27, 26, 25, 24, 23, 22, 21, \
                    20, 19, 18, 17, 16, 15, 14, 13, 12, 11, \
                    10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, ~)</initializer>
        <briefdescription>
<para>Macro for calculating number of arguments in the variable arguments list minus one. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">...</parametername>
</parameternamelist>
<parameterdescription>
<para>List of arguments</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Number of variadic arguments in the argument list, minus one </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/nrfx_utils.h" line="183" column="9" bodyfile="drivers/nrfx_utils.h" bodystart="183" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrfx__utils_1ga5ea61d0994f6fb1ab5ed59d44f6a7ce9" prot="public" static="no">
        <name>NRFX_CONCAT</name>
        <param><defname>...</defname></param>
        <initializer>    <ref refid="group__nrfx__common_1ga9fced903f4d0fc450e63d40426050236" kindref="member">NRFX_CONCAT_2</ref>(_NRFX_CONCAT_, <ref refid="group__nrfx__utils_1ga9b4880ee0671521522e81f00f8229fb5" kindref="member">NRFX_NUM_VA_ARGS_LESS_1</ref>(__VA_ARGS__))(__VA_ARGS__)</initializer>
        <briefdescription>
<para>Macro for concatenating multiple arguments. </para>
        </briefdescription>
        <detaileddescription>
<para>Support up to 8 arguments.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">...</parametername>
</parameternamelist>
<parameterdescription>
<para>Arguments to concatenate. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/nrfx_utils.h" line="199" column="9" bodyfile="drivers/nrfx_utils.h" bodystart="199" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrfx__utils_1ga61259822a6d31a2d4cb15a9943a24521" prot="public" static="no">
        <name>NRFX_ARG_HAS_PARENTHESIS</name>
        <param><defname>x</defname></param>
        <initializer>_NRFX_GET_ARG3(_NRFX_EVAL(_NRFX_ARG_HAS_PARENTHESIS x, 1, 0))</initializer>
        <briefdescription>
<para>Macro for checking if argument starts with opening round bracket and contains matching closing bracket (parenthesis). </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">x</parametername>
</parameternamelist>
<parameterdescription>
<para>Input argument.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>1</parametername>
</parameternamelist>
<parameterdescription>
<para>If input argument starts with opening bracket and contains closing bracket. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>If input argument does not match above mentioned condition. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/nrfx_utils.h" line="211" column="9" bodyfile="drivers/nrfx_utils.h" bodystart="211" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrfx__utils_1ga9b551cefe9795f4eabe3a3cbce957ba6" prot="public" static="no">
        <name>NRFX_FOR_EACH</name>
        <param><defname>F</defname></param>
        <param><defname>sep</defname></param>
        <param><defname>...</defname></param>
        <initializer>    _NRFX_FOR_EACH(F, sep, <ref refid="group__nrfx__utils_1ga00142655b3872c09ccbe8178696b6d31" kindref="member">NRFX_REVERSE_ARGS</ref>(__VA_ARGS__))</initializer>
        <briefdescription>
<para>Macro for calling a macro <computeroutput>F</computeroutput> on each provided argument with a given separator between each call. </para>
        </briefdescription>
        <detaileddescription>
<para>Example: <verbatim>#define F(x) int a##x
NRFX_FOR_EACH(F, (;), 4, 5, 6);
</verbatim> This expands to: <verbatim>int a4;
int a5;
int a6;
</verbatim> <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>F</parametername>
</parameternamelist>
<parameterdescription>
<para>Macro to invoke </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sep</parametername>
</parameternamelist>
<parameterdescription>
<para>Separator (e.g. comma or semicolon). Must be in parentheses; this is required to enable providing a comma as a separator. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>...</parametername>
</parameternamelist>
<parameterdescription>
<para>Variable argument list. The macro <computeroutput>F</computeroutput> is invoked as <computeroutput>F(element)</computeroutput> for each element in the list. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/nrfx_utils.h" line="234" column="9" bodyfile="drivers/nrfx_utils.h" bodystart="234" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrfx__utils_1ga17d2cf34acf3b05105b494aab2e14926" prot="public" static="no">
        <name>NRFX_FOR_EACH_IDX</name>
        <param><defname>F</defname></param>
        <param><defname>sep</defname></param>
        <param><defname>...</defname></param>
        <initializer>    _NRFX_FOR_EACH_IDX(F, sep, <ref refid="group__nrfx__utils_1ga00142655b3872c09ccbe8178696b6d31" kindref="member">NRFX_REVERSE_ARGS</ref>(__VA_ARGS__))</initializer>
        <briefdescription>
<para>Call macro <computeroutput>F</computeroutput> on each provided argument, with the argument&apos;s index as an additional parameter. </para>
        </briefdescription>
        <detaileddescription>
<para>This is like <ref refid="group__nrfx__utils_1ga9b551cefe9795f4eabe3a3cbce957ba6" kindref="member">NRFX_FOR_EACH()</ref>, except <computeroutput>F</computeroutput> should be a macro which takes two arguments: <computeroutput>F(index, variable_arg)</computeroutput>.</para>
<para>Example: <verbatim>#define F(idx, x) int a##idx = x
NRFX_FOR_EACH_IDX(F, (;), 4, 5, 6);
</verbatim> This expands to: <verbatim>int a0 = 4;
int a1 = 5;
int a2 = 6;
</verbatim> <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>F</parametername>
</parameternamelist>
<parameterdescription>
<para>Macro to invoke </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sep</parametername>
</parameternamelist>
<parameterdescription>
<para>Separator (e.g. comma or semicolon). Must be in parentheses; this is required to enable providing a comma as a separator. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>...</parametername>
</parameternamelist>
<parameterdescription>
<para>Variable argument list. The macro <computeroutput>F</computeroutput> is invoked as <computeroutput>F(index, element)</computeroutput> for each element in the list. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/nrfx_utils.h" line="261" column="9" bodyfile="drivers/nrfx_utils.h" bodystart="261" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrfx__utils_1gaf9a75fa66390a5833db6697214dba323" prot="public" static="no">
        <name>NRFX_FOR_EACH_FIXED_ARG</name>
        <param><defname>F</defname></param>
        <param><defname>sep</defname></param>
        <param><defname>fixed_arg</defname></param>
        <param><defname>...</defname></param>
        <initializer>    _NRFX_FOR_EACH_FIXED_ARG(F, sep, fixed_arg, <ref refid="group__nrfx__utils_1ga00142655b3872c09ccbe8178696b6d31" kindref="member">NRFX_REVERSE_ARGS</ref>(__VA_ARGS__))</initializer>
        <briefdescription>
<para>Macro for calling macro <computeroutput>F</computeroutput> on each provided argument, with an additional fixed argument as a parameter. </para>
        </briefdescription>
        <detaileddescription>
<para>This is like <ref refid="group__nrfx__utils_1ga9b551cefe9795f4eabe3a3cbce957ba6" kindref="member">NRFX_FOR_EACH()</ref>, except <computeroutput>F</computeroutput> should be a macro which takes two arguments: <computeroutput>F(variable_arg, fixed_arg)</computeroutput>.</para>
<para>Example: <verbatim>static void func(int val, void *dev);
NRFX_FOR_EACH_FIXED_ARG(func, (;), dev, 4, 5, 6);
</verbatim> This expands to: <verbatim>func(4, dev);
func(5, dev);
func(6, dev);
</verbatim> <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>F</parametername>
</parameternamelist>
<parameterdescription>
<para>Macro to invoke </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sep</parametername>
</parameternamelist>
<parameterdescription>
<para>Separator (e.g. comma or semicolon). Must be in parentheses; this is required to enable providing a comma as a separator. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fixed_arg</parametername>
</parameternamelist>
<parameterdescription>
<para>Fixed argument passed to <computeroutput>F</computeroutput> as the second macro parameter. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>...</parametername>
</parameternamelist>
<parameterdescription>
<para>Variable argument list. The macro <computeroutput>F</computeroutput> is invoked as <computeroutput>F(element, fixed_arg)</computeroutput> for each element in the list. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/nrfx_utils.h" line="289" column="9" bodyfile="drivers/nrfx_utils.h" bodystart="289" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrfx__utils_1ga70aaf745a268eaf9afb98f00f542231e" prot="public" static="no">
        <name>NRFX_FOR_EACH_IDX_FIXED_ARG</name>
        <param><defname>F</defname></param>
        <param><defname>sep</defname></param>
        <param><defname>fixed_arg</defname></param>
        <param><defname>...</defname></param>
        <initializer>    _NRFX_FOR_EACH_IDX_FIXED_ARG(F, sep, fixed_arg, <ref refid="group__nrfx__utils_1ga00142655b3872c09ccbe8178696b6d31" kindref="member">NRFX_REVERSE_ARGS</ref>(__VA_ARGS__))</initializer>
        <briefdescription>
<para>Macro from calling macro <computeroutput>F</computeroutput> for each variable argument with an index and fixed argument. </para>
        </briefdescription>
        <detaileddescription>
<para>This is like the combination of <ref refid="group__nrfx__utils_1ga17d2cf34acf3b05105b494aab2e14926" kindref="member">NRFX_FOR_EACH_IDX()</ref> with <ref refid="group__nrfx__utils_1gaf9a75fa66390a5833db6697214dba323" kindref="member">NRFX_FOR_EACH_FIXED_ARG()</ref>.</para>
<para>Example: <verbatim>#define F(idx, x, fixed_arg) int fixed_arg##idx = x
NRFX_FOR_EACH_IDX_FIXED_ARG(F, (;), a, 4, 5, 6);
</verbatim> This expands to: <verbatim>int a0 = 4;
int a1 = 5;
int a2 = 6;
</verbatim> <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>F</parametername>
</parameternamelist>
<parameterdescription>
<para>Macro to invoke </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sep</parametername>
</parameternamelist>
<parameterdescription>
<para>Separator (e.g. comma or semicolon). Must be in parentheses; This is required to enable providing a comma as a separator. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fixed_arg</parametername>
</parameternamelist>
<parameterdescription>
<para>Fixed argument passed to <computeroutput>F</computeroutput> as the third macro parameter. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>...</parametername>
</parameternamelist>
<parameterdescription>
<para>Variable list of arguments. The macro <computeroutput>F</computeroutput> is invoked as <computeroutput>F(index, element, fixed_arg)</computeroutput> for each element in the list. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/nrfx_utils.h" line="317" column="9" bodyfile="drivers/nrfx_utils.h" bodystart="317" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrfx__utils_1ga00142655b3872c09ccbe8178696b6d31" prot="public" static="no">
        <name>NRFX_REVERSE_ARGS</name>
        <param><defname>...</defname></param>
        <initializer>    _NRFX_FOR_EACH_ENGINE(_NRFX_FOR_EACH_EXEC, (,), NRFX_EVAL, _, __VA_ARGS__)</initializer>
        <briefdescription>
<para>Macro for reversing arguments order. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>...</parametername>
</parameternamelist>
<parameterdescription>
<para>Variable argument list.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Input arguments in reversed order. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/nrfx_utils.h" line="327" column="9" bodyfile="drivers/nrfx_utils.h" bodystart="327" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrfx__utils_1ga7558c8c1390a9256f39a82da2087c8df" prot="public" static="no">
        <name>NRFX_MAX_N</name>
        <param><defname>...</defname></param>
        <initializer>    NRFX_EVAL(<ref refid="group__nrfx__utils_1ga9b551cefe9795f4eabe3a3cbce957ba6" kindref="member">NRFX_FOR_EACH</ref>(_NRFX_MAX_P1, (), __VA_ARGS__) 0 \
              <ref refid="group__nrfx__utils_1ga9b551cefe9795f4eabe3a3cbce957ba6" kindref="member">NRFX_FOR_EACH</ref>(_NRFX_MAX_P2, (), __VA_ARGS__))</initializer>
        <briefdescription>
<para>Macro for getting the highest value from input arguments. </para>
        </briefdescription>
        <detaileddescription>
<para>It is similar to <ref refid="group__nrfx__common_1gaaf20fb75ada3be75dbf03d6fe4d43f6a" kindref="member">NRFX_MAX</ref> but accepts a variable number of arguments.</para>
<para><simplesect kind="note"><para>Input arguments must be numeric variables.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>...</parametername>
</parameternamelist>
<parameterdescription>
<para>Variable argument list.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Highest value from the input list. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/nrfx_utils.h" line="342" column="9" bodyfile="drivers/nrfx_utils.h" bodystart="342" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Preprocessor utility macros. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
