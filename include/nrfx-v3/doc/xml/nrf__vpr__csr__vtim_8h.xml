<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="nrf__vpr__csr__vtim_8h" kind="file" language="C++">
    <compoundname>nrf_vpr_csr_vtim.h</compoundname>
    <includes local="no">nrfx.h</includes>
    <incdepgraph>
      <node id="1">
        <label>hal/nrf_vpr_csr_vtim.h</label>
        <link refid="nrf__vpr__csr__vtim_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>nrfx.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="group__nrf__vpr__csr__vtim__hal_1gaf273ee37843343825d23707160759bc1" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_vpr_csr_vtim_count_t</name>
        <enumvalue id="group__nrf__vpr__csr__vtim__hal_1ggaf273ee37843343825d23707160759bc1a9880228ac0edb029392a9267b6ce8905" prot="public">
          <name>NRF_VPR_CSR_VTIM_COUNT_STOP</name>
          <initializer>= VPRCSR_NORDIC_CNTMODE0_CNTMODE0_STOP</initializer>
          <briefdescription>
<para>Counter stops at 0. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__vpr__csr__vtim__hal_1ggaf273ee37843343825d23707160759bc1a0f5c6b228554f3fd0e5b5c893da9dd06" prot="public">
          <name>NRF_VPR_CSR_VTIM_COUNT_WRAP</name>
          <initializer>= VPRCSR_NORDIC_CNTMODE0_CNTMODE0_WRAP</initializer>
          <briefdescription>
<para>Counter will continue counting from 0xFFF. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__vpr__csr__vtim__hal_1ggaf273ee37843343825d23707160759bc1aaa7786994ac0aa72b5a13529b7357d08" prot="public">
          <name>NRF_VPR_CSR_VTIM_COUNT_RELOAD</name>
          <initializer>= VPRCSR_NORDIC_CNTMODE0_CNTMODE0_RELOAD</initializer>
          <briefdescription>
<para>Counter will continue counting from the value in counter top. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__vpr__csr__vtim__hal_1ggaf273ee37843343825d23707160759bc1a6e401a478cb2c5a05cf5838d873cb35d" prot="public">
          <name>NRF_VPR_CSR_VTIM_COUNT_TRIGGER_COMBINED</name>
          <initializer>= VPRCSR_NORDIC_CNTMODE0_CNTMODE0_TRIGCOMB</initializer>
          <briefdescription>
<para>Trigger (counter 0) or combined (counter 1) mode. </para>
          </briefdescription>
          <detaileddescription>
<para>Trigger (applies to counter 0): Counter stops at 0. Counting will restart when a VIO event happens. Combined (applies to counter 1): Counter 1 acts as an extension of counter 0. (16 most significant bits of a 32-bit counter.) </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Counter modes. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_vpr_csr_vtim.h" line="52" column="1" bodyfile="hal/nrf_vpr_csr_vtim.h" bodystart="53" bodyend="62"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__nrf__vpr__csr__vtim__hal_1gaeb4dd30faa22a984ff379b95eef65c08" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE <ref refid="group__nrf__vpr__csr__vtim__hal_1gaf273ee37843343825d23707160759bc1" kindref="member">nrf_vpr_csr_vtim_count_t</ref></type>
        <definition>NRF_STATIC_INLINE nrf_vpr_csr_vtim_count_t nrf_vpr_cst_vtim_count_mode_get</definition>
        <argsstring>(uint8_t counter)</argsstring>
        <name>nrf_vpr_cst_vtim_count_mode_get</name>
        <param>
          <type>uint8_t</type>
          <declname>counter</declname>
        </param>
        <briefdescription>
<para>Function for getting the counter mode. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">counter</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of the counter.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Counter mode. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_vpr_csr_vtim.h" line="194" column="44" bodyfile="hal/nrf_vpr_csr_vtim.h" bodystart="194" bodyend="206" declfile="hal/nrf_vpr_csr_vtim.h" declline="71" declcolumn="44"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__vpr__csr__vtim__hal_1ga29f20cbd973bf1208da400282864ead2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_vpr_csr_vtim_count_mode_set</definition>
        <argsstring>(uint8_t counter, nrf_vpr_csr_vtim_count_t mode)</argsstring>
        <name>nrf_vpr_csr_vtim_count_mode_set</name>
        <param>
          <type>uint8_t</type>
          <declname>counter</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__vpr__csr__vtim__hal_1gaf273ee37843343825d23707160759bc1" kindref="member">nrf_vpr_csr_vtim_count_t</ref></type>
          <declname>mode</declname>
        </param>
        <briefdescription>
<para>Function for setting the counter mode. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">counter</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of the counter. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mode</parametername>
</parameternamelist>
<parameterdescription>
<para>Counter mode to be set. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_vpr_csr_vtim.h" line="208" column="24" bodyfile="hal/nrf_vpr_csr_vtim.h" bodystart="208" bodyend="223" declfile="hal/nrf_vpr_csr_vtim.h" declline="79" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__vpr__csr__vtim__hal_1ga9c7c354a85b8c90818468a076b27b8e0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint16_t</type>
        <definition>NRF_STATIC_INLINE uint16_t nrf_vpr_csr_vtim_simple_counter_get</definition>
        <argsstring>(uint8_t counter)</argsstring>
        <name>nrf_vpr_csr_vtim_simple_counter_get</name>
        <param>
          <type>uint8_t</type>
          <declname>counter</declname>
        </param>
        <briefdescription>
<para>Function for getting the counter value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">counter</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of the counter.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Counter value. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_vpr_csr_vtim.h" line="225" column="28" bodyfile="hal/nrf_vpr_csr_vtim.h" bodystart="225" bodyend="237" declfile="hal/nrf_vpr_csr_vtim.h" declline="89" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__vpr__csr__vtim__hal_1gafaca2bbb44b469ad0cb08761b66398d7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_vpr_csr_vtim_simple_counter_set</definition>
        <argsstring>(uint8_t counter, uint16_t value)</argsstring>
        <name>nrf_vpr_csr_vtim_simple_counter_set</name>
        <param>
          <type>uint8_t</type>
          <declname>counter</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Function for setting the counter value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">counter</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of the counter. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to be set. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_vpr_csr_vtim.h" line="239" column="24" bodyfile="hal/nrf_vpr_csr_vtim.h" bodystart="239" bodyend="253" declfile="hal/nrf_vpr_csr_vtim.h" declline="97" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__vpr__csr__vtim__hal_1ga5c3bec2fd505d2b0fa3d9b82b63cbe5c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint16_t</type>
        <definition>NRF_STATIC_INLINE uint16_t nrf_vpr_csr_vtim_simple_counter_top_get</definition>
        <argsstring>(uint8_t counter)</argsstring>
        <name>nrf_vpr_csr_vtim_simple_counter_top_get</name>
        <param>
          <type>uint8_t</type>
          <declname>counter</declname>
        </param>
        <briefdescription>
<para>Function for getting the counter top. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">counter</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of the counter.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Counter top. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_vpr_csr_vtim.h" line="255" column="28" bodyfile="hal/nrf_vpr_csr_vtim.h" bodystart="255" bodyend="268" declfile="hal/nrf_vpr_csr_vtim.h" declline="106" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__vpr__csr__vtim__hal_1ga1b2214cebfa609766a3e3e6cef4b95fa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_vpr_csr_vtim_simple_counter_top_set</definition>
        <argsstring>(uint8_t counter, uint16_t value)</argsstring>
        <name>nrf_vpr_csr_vtim_simple_counter_top_set</name>
        <param>
          <type>uint8_t</type>
          <declname>counter</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Function for setting the counter top. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">counter</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of the counter. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>Top value to be set. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_vpr_csr_vtim.h" line="270" column="24" bodyfile="hal/nrf_vpr_csr_vtim.h" bodystart="270" bodyend="292" declfile="hal/nrf_vpr_csr_vtim.h" declline="114" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__vpr__csr__vtim__hal_1ga53f8a2f942e663c3d3e03672903a92c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_vpr_csr_vtim_simple_counter_add_set</definition>
        <argsstring>(uint8_t counter, uint16_t value)</argsstring>
        <name>nrf_vpr_csr_vtim_simple_counter_add_set</name>
        <param>
          <type>uint8_t</type>
          <declname>counter</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Function for setting the counter add. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">counter</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of the counter. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>Add value to be set. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_vpr_csr_vtim.h" line="294" column="24" bodyfile="hal/nrf_vpr_csr_vtim.h" bodystart="294" bodyend="308" declfile="hal/nrf_vpr_csr_vtim.h" declline="122" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__vpr__csr__vtim__hal_1ga8718b4ab442cc0e2b015b2e5be38f42f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_vpr_csr_vtim_simple_wait_set</definition>
        <argsstring>(uint8_t counter, bool write, uint16_t value)</argsstring>
        <name>nrf_vpr_csr_vtim_simple_wait_set</name>
        <param>
          <type>uint8_t</type>
          <declname>counter</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>write</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Function for setting the wait register. </para>
        </briefdescription>
        <detaileddescription>
<para>Writing to this register will stall the CPU until counter reaches 0.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">counter</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of the counter. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">write</parametername>
</parameternamelist>
<parameterdescription>
<para>True if <computeroutput>value</computeroutput> is to be writtten to the counter value before starting the wait. False otherwise. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to be written to the counter if <computeroutput>write</computeroutput> is true. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_vpr_csr_vtim.h" line="310" column="24" bodyfile="hal/nrf_vpr_csr_vtim.h" bodystart="310" bodyend="332" declfile="hal/nrf_vpr_csr_vtim.h" declline="134" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__vpr__csr__vtim__hal_1gaf3607a5b62a3a728290876910b009b35" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_vpr_csr_vtim_combined_counter_get</definition>
        <argsstring>(void)</argsstring>
        <name>nrf_vpr_csr_vtim_combined_counter_get</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Function for getting the combined counter value. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Lower 16 bits represent counter 0, while higher 16 bits represent counter 1.</para>
</simplesect>
<simplesect kind="return"><para>Counter value. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_vpr_csr_vtim.h" line="334" column="28" bodyfile="hal/nrf_vpr_csr_vtim.h" bodystart="334" bodyend="337" declfile="hal/nrf_vpr_csr_vtim.h" declline="145" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__vpr__csr__vtim__hal_1ga7673387755512daba1a04e43199e2f25" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_vpr_csr_vtim_combined_counter_set</definition>
        <argsstring>(uint32_t value)</argsstring>
        <name>nrf_vpr_csr_vtim_combined_counter_set</name>
        <param>
          <type>uint32_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Function for setting the combined counter value. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Lower 16 bits represent counter 0, while higher 16 bits represent counter 1.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to be set. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_vpr_csr_vtim.h" line="339" column="24" bodyfile="hal/nrf_vpr_csr_vtim.h" bodystart="339" bodyend="342" declfile="hal/nrf_vpr_csr_vtim.h" declline="154" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__vpr__csr__vtim__hal_1gab0ceb55587900ff6125aaa732e39dfc9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_vpr_csr_vtim_combined_counter_top_get</definition>
        <argsstring>(void)</argsstring>
        <name>nrf_vpr_csr_vtim_combined_counter_top_get</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Function for getting the combined counter top. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Lower 16 bits represent counter 0, while higher 16 bits represent counter 1.</para>
</simplesect>
<simplesect kind="return"><para>Counter top. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_vpr_csr_vtim.h" line="344" column="28" bodyfile="hal/nrf_vpr_csr_vtim.h" bodystart="344" bodyend="347" declfile="hal/nrf_vpr_csr_vtim.h" declline="163" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__vpr__csr__vtim__hal_1gaddf46ec2a8e7ce0ef97607357b1fdfc1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_vpr_csr_vtim_combined_counter_top_set</definition>
        <argsstring>(uint32_t value)</argsstring>
        <name>nrf_vpr_csr_vtim_combined_counter_top_set</name>
        <param>
          <type>uint32_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Function for setting the combined counter top. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Lower 16 bits represent counter 0, while higher 16 bits represent counter 1.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>Top value to be set. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_vpr_csr_vtim.h" line="349" column="24" bodyfile="hal/nrf_vpr_csr_vtim.h" bodystart="349" bodyend="352" declfile="hal/nrf_vpr_csr_vtim.h" declline="172" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__vpr__csr__vtim__hal_1gaef3038fbcfb1904556d3dac3f2de3cdc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_vpr_csr_vtim_combined_counter_add_set</definition>
        <argsstring>(uint32_t value)</argsstring>
        <name>nrf_vpr_csr_vtim_combined_counter_add_set</name>
        <param>
          <type>uint32_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Function for setting the combined counter add. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This function should be used in 32-bit counter mode.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>Add value to be set. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_vpr_csr_vtim.h" line="354" column="24" bodyfile="hal/nrf_vpr_csr_vtim.h" bodystart="354" bodyend="357" declfile="hal/nrf_vpr_csr_vtim.h" declline="181" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__vpr__csr__vtim__hal_1ga79beb8fd665e11d66c1f96832694b574" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_vpr_csr_vtim_combined_wait_trigger</definition>
        <argsstring>(void)</argsstring>
        <name>nrf_vpr_csr_vtim_combined_wait_trigger</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Function for triggering the wait. </para>
        </briefdescription>
        <detaileddescription>
<para>Writing to this register will stall the CPU until 32-bit counter reaches 0.</para>
<para><simplesect kind="note"><para>This function should be used in 32-bit counter mode. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_vpr_csr_vtim.h" line="359" column="24" bodyfile="hal/nrf_vpr_csr_vtim.h" bodystart="359" bodyend="363" declfile="hal/nrf_vpr_csr_vtim.h" declline="190" declcolumn="24"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2023<sp/>-<sp/>2024,<sp/>Nordic<sp/>Semiconductor<sp/>ASA</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>All<sp/>rights<sp/>reserved.</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>SPDX-License-Identifier:<sp/>BSD-3-Clause</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions<sp/>are<sp/>met:</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>1.<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright<sp/>notice,<sp/>this</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>2.<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the<sp/>distribution.</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/>3.<sp/>Neither<sp/>the<sp/>name<sp/>of<sp/>the<sp/>copyright<sp/>holder<sp/>nor<sp/>the<sp/>names<sp/>of<sp/>its</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>contributors<sp/>may<sp/>be<sp/>used<sp/>to<sp/>endorse<sp/>or<sp/>promote<sp/>products<sp/>derived<sp/>from<sp/>this</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>software<sp/>without<sp/>specific<sp/>prior<sp/>written<sp/>permission.</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>COPYRIGHT<sp/>HOLDERS<sp/>AND<sp/>CONTRIBUTORS<sp/>&quot;AS<sp/>IS&quot;</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/>AND<sp/>ANY<sp/>EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>THE</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*<sp/>ARE<sp/>DISCLAIMED.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>COPYRIGHT<sp/>HOLDER<sp/>OR<sp/>CONTRIBUTORS<sp/>BE</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,<sp/>SPECIAL,<sp/>EXEMPLARY,<sp/>OR</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>PROCUREMENT<sp/>OF</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>*<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,<sp/>DATA,<sp/>OR<sp/>PROFITS;<sp/>OR<sp/>BUSINESS</highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/>*<sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY<sp/>THEORY<sp/>OF<sp/>LIABILITY,<sp/>WHETHER<sp/>IN</highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/>*<sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR<sp/>OTHERWISE)</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/>*<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE<sp/>OF<sp/>THIS<sp/>SOFTWARE,<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/>*<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight></codeline>
<codeline lineno="32"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>NRF_VPR_CSR_VTIM_H__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_VPR_CSR_VTIM_H__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;nrfx.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="43"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="44"><highlight class="comment"><sp/>*<sp/>@defgroup<sp/>nrf_vpr_csr_vtim_hal<sp/>VPR<sp/>CSR<sp/>VTIM<sp/>HAL</highlight></codeline>
<codeline lineno="45"><highlight class="comment"><sp/>*<sp/>@{</highlight></codeline>
<codeline lineno="46"><highlight class="comment"><sp/>*<sp/>@ingroup<sp/>nrf_vpr</highlight></codeline>
<codeline lineno="47"><highlight class="comment"><sp/>*<sp/>@brief<sp/><sp/><sp/>Hardware<sp/>access<sp/>layer<sp/>for<sp/>managing<sp/>the<sp/>VPR<sp/>RISC-V<sp/>CPU<sp/>Control</highlight></codeline>
<codeline lineno="48"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>and<sp/>Status<sp/>Registers<sp/>for<sp/>VPR<sp/>Timer<sp/>(VPR<sp/>CSR<sp/>VTIM).</highlight></codeline>
<codeline lineno="49"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="51"><highlight class="comment">/**<sp/>@brief<sp/>Counter<sp/>modes.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal">{</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__vpr__csr__vtim__hal_1ggaf273ee37843343825d23707160759bc1a9880228ac0edb029392a9267b6ce8905" kindref="member">NRF_VPR_CSR_VTIM_COUNT_STOP</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>VPRCSR_NORDIC_CNTMODE0_CNTMODE0_STOP,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Counter<sp/>stops<sp/>at<sp/>0.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__vpr__csr__vtim__hal_1ggaf273ee37843343825d23707160759bc1a0f5c6b228554f3fd0e5b5c893da9dd06" kindref="member">NRF_VPR_CSR_VTIM_COUNT_WRAP</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>VPRCSR_NORDIC_CNTMODE0_CNTMODE0_WRAP,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Counter<sp/>will<sp/>continue<sp/>counting<sp/>from<sp/>0xFFF.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__vpr__csr__vtim__hal_1ggaf273ee37843343825d23707160759bc1aaa7786994ac0aa72b5a13529b7357d08" kindref="member">NRF_VPR_CSR_VTIM_COUNT_RELOAD</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>VPRCSR_NORDIC_CNTMODE0_CNTMODE0_RELOAD,<sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Counter<sp/>will<sp/>continue<sp/>counting<sp/>from<sp/>the<sp/>value<sp/>in<sp/>counter<sp/>top.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__vpr__csr__vtim__hal_1ggaf273ee37843343825d23707160759bc1a6e401a478cb2c5a05cf5838d873cb35d" kindref="member">NRF_VPR_CSR_VTIM_COUNT_TRIGGER_COMBINED</ref><sp/>=<sp/>VPRCSR_NORDIC_CNTMODE0_CNTMODE0_TRIGCOMB,<sp/></highlight><highlight class="comment">///&lt;<sp/>Trigger<sp/>(counter<sp/>0)<sp/>or<sp/>combined<sp/>(counter<sp/>1)<sp/>mode.</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="58"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/**&lt;<sp/>Trigger<sp/>(applies<sp/>to<sp/>counter<sp/>0):<sp/>Counter<sp/>stops<sp/>at<sp/>0.</highlight></codeline>
<codeline lineno="59"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>Counting<sp/>will<sp/>restart<sp/>when<sp/>a<sp/>VIO<sp/>event<sp/>happens.</highlight></codeline>
<codeline lineno="60"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>Combined<sp/>(applies<sp/>to<sp/>counter<sp/>1):<sp/>Counter<sp/>1<sp/>acts<sp/>as<sp/>an<sp/>extension<sp/>of<sp/>counter<sp/>0.</highlight></codeline>
<codeline lineno="61"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>(16<sp/>most<sp/>significant<sp/>bits<sp/>of<sp/>a<sp/>32-bit<sp/>counter.)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal">}<sp/><ref refid="group__nrf__vpr__csr__vtim__hal_1gaf273ee37843343825d23707160759bc1" kindref="member">nrf_vpr_csr_vtim_count_t</ref>;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="64"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="65"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>the<sp/>counter<sp/>mode.</highlight></codeline>
<codeline lineno="66"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="67"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>counter<sp/>Index<sp/>of<sp/>the<sp/>counter.</highlight></codeline>
<codeline lineno="68"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="69"><highlight class="comment"><sp/>*<sp/>@return<sp/>Counter<sp/>mode.</highlight></codeline>
<codeline lineno="70"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal">NRF_STATIC_INLINE<sp/><ref refid="group__nrf__vpr__csr__vtim__hal_1gaf273ee37843343825d23707160759bc1" kindref="member">nrf_vpr_csr_vtim_count_t</ref><sp/><ref refid="group__nrf__vpr__csr__vtim__hal_1gaeb4dd30faa22a984ff379b95eef65c08" kindref="member">nrf_vpr_cst_vtim_count_mode_get</ref>(uint8_t<sp/>counter);</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="73"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="74"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>the<sp/>counter<sp/>mode.</highlight></codeline>
<codeline lineno="75"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="76"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>counter<sp/>Index<sp/>of<sp/>the<sp/>counter.</highlight></codeline>
<codeline lineno="77"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>mode<sp/><sp/><sp/><sp/>Counter<sp/>mode<sp/>to<sp/>be<sp/>set.</highlight></codeline>
<codeline lineno="78"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__vpr__csr__vtim__hal_1ga29f20cbd973bf1208da400282864ead2" kindref="member">nrf_vpr_csr_vtim_count_mode_set</ref>(uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>counter,</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__vpr__csr__vtim__hal_1gaf273ee37843343825d23707160759bc1" kindref="member">nrf_vpr_csr_vtim_count_t</ref><sp/>mode);</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="82"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="83"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>the<sp/>counter<sp/>value.</highlight></codeline>
<codeline lineno="84"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="85"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>counter<sp/>Index<sp/>of<sp/>the<sp/>counter.</highlight></codeline>
<codeline lineno="86"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="87"><highlight class="comment"><sp/>*<sp/>@return<sp/>Counter<sp/>value.</highlight></codeline>
<codeline lineno="88"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint16_t<sp/><ref refid="group__nrf__vpr__csr__vtim__hal_1ga9c7c354a85b8c90818468a076b27b8e0" kindref="member">nrf_vpr_csr_vtim_simple_counter_get</ref>(uint8_t<sp/>counter);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="91"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="92"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>the<sp/>counter<sp/>value.</highlight></codeline>
<codeline lineno="93"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="94"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>counter<sp/>Index<sp/>of<sp/>the<sp/>counter.</highlight></codeline>
<codeline lineno="95"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>value<sp/><sp/><sp/>Value<sp/>to<sp/>be<sp/>set.</highlight></codeline>
<codeline lineno="96"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__vpr__csr__vtim__hal_1gafaca2bbb44b469ad0cb08761b66398d7" kindref="member">nrf_vpr_csr_vtim_simple_counter_set</ref>(uint8_t<sp/>counter,<sp/>uint16_t<sp/>value);</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="99"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="100"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>the<sp/>counter<sp/>top.</highlight></codeline>
<codeline lineno="101"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="102"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>counter<sp/>Index<sp/>of<sp/>the<sp/>counter.</highlight></codeline>
<codeline lineno="103"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="104"><highlight class="comment"><sp/>*<sp/>@return<sp/>Counter<sp/>top.</highlight></codeline>
<codeline lineno="105"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint16_t<sp/><ref refid="group__nrf__vpr__csr__vtim__hal_1ga5c3bec2fd505d2b0fa3d9b82b63cbe5c" kindref="member">nrf_vpr_csr_vtim_simple_counter_top_get</ref>(uint8_t<sp/>counter);</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="108"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="109"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>the<sp/>counter<sp/>top.</highlight></codeline>
<codeline lineno="110"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="111"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>counter<sp/>Index<sp/>of<sp/>the<sp/>counter.</highlight></codeline>
<codeline lineno="112"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>value<sp/><sp/><sp/>Top<sp/>value<sp/>to<sp/>be<sp/>set.</highlight></codeline>
<codeline lineno="113"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__vpr__csr__vtim__hal_1ga1b2214cebfa609766a3e3e6cef4b95fa" kindref="member">nrf_vpr_csr_vtim_simple_counter_top_set</ref>(uint8_t<sp/>counter,<sp/>uint16_t<sp/>value);</highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="116"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="117"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>the<sp/>counter<sp/>add.</highlight></codeline>
<codeline lineno="118"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="119"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>counter<sp/>Index<sp/>of<sp/>the<sp/>counter.</highlight></codeline>
<codeline lineno="120"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>value<sp/><sp/><sp/>Add<sp/>value<sp/>to<sp/>be<sp/>set.</highlight></codeline>
<codeline lineno="121"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__vpr__csr__vtim__hal_1ga53f8a2f942e663c3d3e03672903a92c3" kindref="member">nrf_vpr_csr_vtim_simple_counter_add_set</ref>(uint8_t<sp/>counter,<sp/>uint16_t<sp/>value);</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="124"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="125"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>the<sp/>wait<sp/>register.</highlight></codeline>
<codeline lineno="126"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="127"><highlight class="comment"><sp/>*<sp/>Writing<sp/>to<sp/>this<sp/>register<sp/>will<sp/>stall<sp/>the<sp/>CPU<sp/>until<sp/>counter<sp/>reaches<sp/>0.</highlight></codeline>
<codeline lineno="128"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="129"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>counter<sp/>Index<sp/>of<sp/>the<sp/>counter.</highlight></codeline>
<codeline lineno="130"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>write<sp/><sp/><sp/>True<sp/>if<sp/>@p<sp/>value<sp/>is<sp/>to<sp/>be<sp/>writtten<sp/>to<sp/>the<sp/>counter<sp/>value<sp/>before<sp/>starting<sp/>the<sp/>wait.</highlight></codeline>
<codeline lineno="131"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>False<sp/>otherwise.</highlight></codeline>
<codeline lineno="132"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>value<sp/><sp/><sp/>Value<sp/>to<sp/>be<sp/>written<sp/>to<sp/>the<sp/>counter<sp/>if<sp/>@p<sp/>write<sp/>is<sp/>true.</highlight></codeline>
<codeline lineno="133"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__vpr__csr__vtim__hal_1ga8718b4ab442cc0e2b015b2e5be38f42f" kindref="member">nrf_vpr_csr_vtim_simple_wait_set</ref>(uint8_t<sp/><sp/>counter,</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>write,</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint16_t<sp/>value);</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="138"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="139"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>the<sp/>combined<sp/>counter<sp/>value.</highlight></codeline>
<codeline lineno="140"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="141"><highlight class="comment"><sp/>*<sp/>@note<sp/>Lower<sp/>16<sp/>bits<sp/>represent<sp/>counter<sp/>0,<sp/>while<sp/>higher<sp/>16<sp/>bits<sp/>represent<sp/>counter<sp/>1.</highlight></codeline>
<codeline lineno="142"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="143"><highlight class="comment"><sp/>*<sp/>@return<sp/>Counter<sp/>value.</highlight></codeline>
<codeline lineno="144"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__vpr__csr__vtim__hal_1gaf3607a5b62a3a728290876910b009b35" kindref="member">nrf_vpr_csr_vtim_combined_counter_get</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="147"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="148"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>the<sp/>combined<sp/>counter<sp/>value.</highlight></codeline>
<codeline lineno="149"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="150"><highlight class="comment"><sp/>*<sp/>@note<sp/>Lower<sp/>16<sp/>bits<sp/>represent<sp/>counter<sp/>0,<sp/>while<sp/>higher<sp/>16<sp/>bits<sp/>represent<sp/>counter<sp/>1.</highlight></codeline>
<codeline lineno="151"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="152"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>value<sp/>Value<sp/>to<sp/>be<sp/>set.</highlight></codeline>
<codeline lineno="153"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__vpr__csr__vtim__hal_1ga7673387755512daba1a04e43199e2f25" kindref="member">nrf_vpr_csr_vtim_combined_counter_set</ref>(uint32_t<sp/>value);</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="156"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="157"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>the<sp/>combined<sp/>counter<sp/>top.</highlight></codeline>
<codeline lineno="158"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="159"><highlight class="comment"><sp/>*<sp/>@note<sp/>Lower<sp/>16<sp/>bits<sp/>represent<sp/>counter<sp/>0,<sp/>while<sp/>higher<sp/>16<sp/>bits<sp/>represent<sp/>counter<sp/>1.</highlight></codeline>
<codeline lineno="160"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="161"><highlight class="comment"><sp/>*<sp/>@return<sp/>Counter<sp/>top.</highlight></codeline>
<codeline lineno="162"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__vpr__csr__vtim__hal_1gab0ceb55587900ff6125aaa732e39dfc9" kindref="member">nrf_vpr_csr_vtim_combined_counter_top_get</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="165"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="166"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>the<sp/>combined<sp/>counter<sp/>top.</highlight></codeline>
<codeline lineno="167"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="168"><highlight class="comment"><sp/>*<sp/>@note<sp/>Lower<sp/>16<sp/>bits<sp/>represent<sp/>counter<sp/>0,<sp/>while<sp/>higher<sp/>16<sp/>bits<sp/>represent<sp/>counter<sp/>1.</highlight></codeline>
<codeline lineno="169"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="170"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>value<sp/>Top<sp/>value<sp/>to<sp/>be<sp/>set.</highlight></codeline>
<codeline lineno="171"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__vpr__csr__vtim__hal_1gaddf46ec2a8e7ce0ef97607357b1fdfc1" kindref="member">nrf_vpr_csr_vtim_combined_counter_top_set</ref>(uint32_t<sp/>value);</highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="174"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="175"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>the<sp/>combined<sp/>counter<sp/>add.</highlight></codeline>
<codeline lineno="176"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="177"><highlight class="comment"><sp/>*<sp/>@note<sp/>This<sp/>function<sp/>should<sp/>be<sp/>used<sp/>in<sp/>32-bit<sp/>counter<sp/>mode.</highlight></codeline>
<codeline lineno="178"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="179"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>value<sp/>Add<sp/>value<sp/>to<sp/>be<sp/>set.</highlight></codeline>
<codeline lineno="180"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__vpr__csr__vtim__hal_1gaef3038fbcfb1904556d3dac3f2de3cdc" kindref="member">nrf_vpr_csr_vtim_combined_counter_add_set</ref>(uint32_t<sp/>value);</highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="183"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="184"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>triggering<sp/>the<sp/>wait.</highlight></codeline>
<codeline lineno="185"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="186"><highlight class="comment"><sp/>*<sp/>Writing<sp/>to<sp/>this<sp/>register<sp/>will<sp/>stall<sp/>the<sp/>CPU<sp/>until<sp/>32-bit<sp/>counter<sp/>reaches<sp/>0.</highlight></codeline>
<codeline lineno="187"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="188"><highlight class="comment"><sp/>*<sp/>@note<sp/>This<sp/>function<sp/>should<sp/>be<sp/>used<sp/>in<sp/>32-bit<sp/>counter<sp/>mode.</highlight></codeline>
<codeline lineno="189"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__vpr__csr__vtim__hal_1ga79beb8fd665e11d66c1f96832694b574" kindref="member">nrf_vpr_csr_vtim_combined_wait_trigger</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>NRF_DECLARE_ONLY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal">NRF_STATIC_INLINE<sp/><ref refid="group__nrf__vpr__csr__vtim__hal_1gaf273ee37843343825d23707160759bc1" kindref="member">nrf_vpr_csr_vtim_count_t</ref><sp/><ref refid="group__nrf__vpr__csr__vtim__hal_1gaeb4dd30faa22a984ff379b95eef65c08" kindref="member">nrf_vpr_cst_vtim_count_mode_get</ref>(uint8_t<sp/>counter)</highlight></codeline>
<codeline lineno="195"><highlight class="normal">{</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(counter)</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0:</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>nrf_csr_read(VPRCSR_NORDIC_CNTMODE0);</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>1:</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>nrf_csr_read(VPRCSR_NORDIC_CNTMODE1);</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrfx__glue_1ga9698a3f6b6bea455d2b54a79e514ee36" kindref="member">NRFX_ASSERT</ref>(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="206"><highlight class="normal">}</highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__vpr__csr__vtim__hal_1ga29f20cbd973bf1208da400282864ead2" kindref="member">nrf_vpr_csr_vtim_count_mode_set</ref>(uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>counter,</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__vpr__csr__vtim__hal_1gaf273ee37843343825d23707160759bc1" kindref="member">nrf_vpr_csr_vtim_count_t</ref><sp/>mode)</highlight></codeline>
<codeline lineno="210"><highlight class="normal">{</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(counter)</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0:</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nrf_csr_write(VPRCSR_NORDIC_CNTMODE0,<sp/>mode);</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>1:</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nrf_csr_write(VPRCSR_NORDIC_CNTMODE1,<sp/>mode);</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrfx__glue_1ga9698a3f6b6bea455d2b54a79e514ee36" kindref="member">NRFX_ASSERT</ref>(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="223"><highlight class="normal">}</highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint16_t<sp/><ref refid="group__nrf__vpr__csr__vtim__hal_1ga9c7c354a85b8c90818468a076b27b8e0" kindref="member">nrf_vpr_csr_vtim_simple_counter_get</ref>(uint8_t<sp/>counter)</highlight></codeline>
<codeline lineno="226"><highlight class="normal">{</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(counter)</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0:</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(uint16_t)nrf_csr_read(VPRCSR_NORDIC_CNT0);</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>1:</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(uint16_t)nrf_csr_read(VPRCSR_NORDIC_CNT1);</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrfx__glue_1ga9698a3f6b6bea455d2b54a79e514ee36" kindref="member">NRFX_ASSERT</ref>(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="237"><highlight class="normal">}</highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__vpr__csr__vtim__hal_1gafaca2bbb44b469ad0cb08761b66398d7" kindref="member">nrf_vpr_csr_vtim_simple_counter_set</ref>(uint8_t<sp/>counter,<sp/>uint16_t<sp/>value)</highlight></codeline>
<codeline lineno="240"><highlight class="normal">{</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(counter)</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0:</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nrf_csr_write(VPRCSR_NORDIC_CNT0,<sp/>(uint32_t)value);</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>1:</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nrf_csr_write(VPRCSR_NORDIC_CNT1,<sp/>(uint32_t)value);</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrfx__glue_1ga9698a3f6b6bea455d2b54a79e514ee36" kindref="member">NRFX_ASSERT</ref>(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="253"><highlight class="normal">}</highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint16_t<sp/><ref refid="group__nrf__vpr__csr__vtim__hal_1ga5c3bec2fd505d2b0fa3d9b82b63cbe5c" kindref="member">nrf_vpr_csr_vtim_simple_counter_top_get</ref>(uint8_t<sp/>counter)</highlight></codeline>
<codeline lineno="256"><highlight class="normal">{</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(counter)</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0:</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(nrf_csr_read(VPRCSR_NORDIC_CNTTOP)<sp/>&amp;<sp/>VPRCSR_NORDIC_CNTTOP_CNT0RELOAD_Msk)</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;<sp/>VPRCSR_NORDIC_CNTTOP_CNT0RELOAD_Pos;</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>1:</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(nrf_csr_read(VPRCSR_NORDIC_CNTTOP)<sp/>&amp;<sp/>VPRCSR_NORDIC_CNTTOP_CNT1RELOAD_Msk)</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;<sp/>VPRCSR_NORDIC_CNTTOP_CNT1RELOAD_Pos;</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="268"><highlight class="normal">}</highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__vpr__csr__vtim__hal_1ga1b2214cebfa609766a3e3e6cef4b95fa" kindref="member">nrf_vpr_csr_vtim_simple_counter_top_set</ref>(uint8_t<sp/>counter,<sp/>uint16_t<sp/>value)</highlight></codeline>
<codeline lineno="271"><highlight class="normal">{</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>reg;</highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(counter)</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0:</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reg<sp/>=<sp/>nrf_csr_read(VPRCSR_NORDIC_CNTTOP);</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reg<sp/>&amp;=<sp/>~VPRCSR_NORDIC_CNTTOP_CNT0RELOAD_Msk;</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reg<sp/>|=<sp/>value<sp/>&lt;&lt;<sp/>VPRCSR_NORDIC_CNTTOP_CNT0RELOAD_Pos;</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nrf_csr_write(VPRCSR_NORDIC_CNTTOP,<sp/>reg);</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>1:</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reg<sp/>=<sp/>nrf_csr_read(VPRCSR_NORDIC_CNTTOP);</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reg<sp/>&amp;=<sp/>~VPRCSR_NORDIC_CNTTOP_CNT1RELOAD_Msk;</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reg<sp/>|=<sp/>value<sp/>&lt;&lt;<sp/>VPRCSR_NORDIC_CNTTOP_CNT1RELOAD_Pos;</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nrf_csr_write(VPRCSR_NORDIC_CNTTOP,<sp/>reg);</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrfx__glue_1ga9698a3f6b6bea455d2b54a79e514ee36" kindref="member">NRFX_ASSERT</ref>(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="292"><highlight class="normal">}</highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__vpr__csr__vtim__hal_1ga53f8a2f942e663c3d3e03672903a92c3" kindref="member">nrf_vpr_csr_vtim_simple_counter_add_set</ref>(uint8_t<sp/>counter,<sp/>uint16_t<sp/>value)</highlight></codeline>
<codeline lineno="295"><highlight class="normal">{</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(counter)</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0:</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nrf_csr_write(VPRCSR_NORDIC_CNTADD0,<sp/>value);</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>1:</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nrf_csr_write(VPRCSR_NORDIC_CNTADD1,<sp/>value);</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrfx__glue_1ga9698a3f6b6bea455d2b54a79e514ee36" kindref="member">NRFX_ASSERT</ref>(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="308"><highlight class="normal">}</highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__vpr__csr__vtim__hal_1ga8718b4ab442cc0e2b015b2e5be38f42f" kindref="member">nrf_vpr_csr_vtim_simple_wait_set</ref>(uint8_t<sp/>counter,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>write,<sp/>uint16_t<sp/>value)</highlight></codeline>
<codeline lineno="311"><highlight class="normal">{</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(counter)</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0:</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nrf_csr_write(VPRCSR_NORDIC_WAIT0,</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((write<sp/>?<sp/>VPRCSR_NORDIC_WAIT0_WRITEDATA_WRITE<sp/>:</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VPRCSR_NORDIC_WAIT0_WRITEDATA_WAIT)</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>VPRCSR_NORDIC_WAIT0_WRITEDATA_Pos)<sp/>|</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(value<sp/>&lt;&lt;<sp/>VPRCSR_NORDIC_WAIT0_DATA_Pos));</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>1:</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nrf_csr_write(VPRCSR_NORDIC_WAIT1,</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((write<sp/>?<sp/>VPRCSR_NORDIC_WAIT1_WRITEDATA_WRITE<sp/>:</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VPRCSR_NORDIC_WAIT1_WRITEDATA_WAIT)</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>VPRCSR_NORDIC_WAIT1_WRITEDATA_Pos)<sp/>|</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(value<sp/>&lt;&lt;<sp/>VPRCSR_NORDIC_WAIT1_DATA_Pos));</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrfx__glue_1ga9698a3f6b6bea455d2b54a79e514ee36" kindref="member">NRFX_ASSERT</ref>(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="332"><highlight class="normal">}</highlight></codeline>
<codeline lineno="333"><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__vpr__csr__vtim__hal_1gaf3607a5b62a3a728290876910b009b35" kindref="member">nrf_vpr_csr_vtim_combined_counter_get</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="335"><highlight class="normal">{</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>nrf_csr_read(VPRCSR_NORDIC_CNT);</highlight></codeline>
<codeline lineno="337"><highlight class="normal">}</highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__vpr__csr__vtim__hal_1ga7673387755512daba1a04e43199e2f25" kindref="member">nrf_vpr_csr_vtim_combined_counter_set</ref>(uint32_t<sp/>value)</highlight></codeline>
<codeline lineno="340"><highlight class="normal">{</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/>nrf_csr_write(VPRCSR_NORDIC_CNT,<sp/>value);</highlight></codeline>
<codeline lineno="342"><highlight class="normal">}</highlight></codeline>
<codeline lineno="343"><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__vpr__csr__vtim__hal_1gab0ceb55587900ff6125aaa732e39dfc9" kindref="member">nrf_vpr_csr_vtim_combined_counter_top_get</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="345"><highlight class="normal">{</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>nrf_csr_read(VPRCSR_NORDIC_CNTTOP);</highlight></codeline>
<codeline lineno="347"><highlight class="normal">}</highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__vpr__csr__vtim__hal_1gaddf46ec2a8e7ce0ef97607357b1fdfc1" kindref="member">nrf_vpr_csr_vtim_combined_counter_top_set</ref>(uint32_t<sp/>value)</highlight></codeline>
<codeline lineno="350"><highlight class="normal">{</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/>nrf_csr_write(VPRCSR_NORDIC_CNTTOP,<sp/>value);</highlight></codeline>
<codeline lineno="352"><highlight class="normal">}</highlight></codeline>
<codeline lineno="353"><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__vpr__csr__vtim__hal_1gaef3038fbcfb1904556d3dac3f2de3cdc" kindref="member">nrf_vpr_csr_vtim_combined_counter_add_set</ref>(uint32_t<sp/>value)</highlight></codeline>
<codeline lineno="355"><highlight class="normal">{</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/>nrf_csr_write(VPRCSR_NORDIC_CNTADD,<sp/>value);</highlight></codeline>
<codeline lineno="357"><highlight class="normal">}</highlight></codeline>
<codeline lineno="358"><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__vpr__csr__vtim__hal_1ga79beb8fd665e11d66c1f96832694b574" kindref="member">nrf_vpr_csr_vtim_combined_wait_trigger</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="360"><highlight class="normal">{</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Writing<sp/>any<sp/>value<sp/>will<sp/>trigger<sp/>wait.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/>nrf_csr_write(VPRCSR_NORDIC_WAIT,<sp/>VPRCSR_NORDIC_WAIT_VAL_Msk);</highlight></codeline>
<codeline lineno="363"><highlight class="normal">}</highlight></codeline>
<codeline lineno="364"><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRF_DECLARE_ONLY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="367"><highlight class="comment">/**<sp/>@}<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal">}</highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRF_VPR_CSR_VTIM_H__</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="hal/nrf_vpr_csr_vtim.h"/>
  </compounddef>
</doxygen>
