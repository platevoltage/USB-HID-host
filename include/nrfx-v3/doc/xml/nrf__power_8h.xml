<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="nrf__power_8h" kind="file" language="C++">
    <compoundname>nrf_power.h</compoundname>
    <includes local="no">nrfx.h</includes>
    <includes local="no">nrf_erratas.h</includes>
    <includedby refid="nrfx__power_8h" local="no">drivers/include/nrfx_power.h</includedby>
    <includedby refid="nrfx__reset__reason_8h" local="no">helpers/nrfx_reset_reason.h</includedby>
    <incdepgraph>
      <node id="1">
        <label>hal/nrf_power.h</label>
        <link refid="nrf__power_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>nrf_erratas.h</label>
      </node>
      <node id="2">
        <label>nrfx.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="structnrf__power__abb__config__t" prot="public">nrf_power_abb_config_t</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__nrf__power__hal_1ga08e69b53d59a64c1c3c04253b7077b0b" prot="public" static="no">
        <name>NRF_POWER_HAS_CONST_LATENCY</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Symbol indicating whether Constant Latency mode is present. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_power.h" line="53" column="9" bodyfile="hal/nrf_power.h" bodystart="53" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__power__hal_1gabf3db35f80983fedc55ae62fc1f3b36a" prot="public" static="no">
        <name>NRF_POWER_HAS_LOW_POWER</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Symbol indicating whether Low-Power mode is present. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_power.h" line="60" column="9" bodyfile="hal/nrf_power.h" bodystart="60" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__power__hal_1gac59f7ef1aa519359d536ede541d3a123" prot="public" static="no">
        <name>NRF_POWER_HAS_SLEEPEVT</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Symbol indicating whether sleep events are present. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_power.h" line="67" column="9" bodyfile="hal/nrf_power.h" bodystart="67" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__power__hal_1gafd2601d87d1bd114ab912a336a84e73f" prot="public" static="no">
        <name>NRF_POWER_HAS_USBREG</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Symbol indicating whether the POWER peripheral controls the USB regulator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_power.h" line="74" column="9" bodyfile="hal/nrf_power.h" bodystart="74" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__power__hal_1gac9e29c06df7e789c14e08904b20f5c2b" prot="public" static="no">
        <name>NRF_POWER_HAS_DCDCEN_VDDH</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Symbol indicating whether DCDCEN for REG0 is present. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_power.h" line="81" column="9" bodyfile="hal/nrf_power.h" bodystart="81" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__power__hal_1ga94f77a5af727c67f6239358dfd4854aa" prot="public" static="no">
        <name>NRF_POWER_HAS_DCDCEN</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Symbol indicating whether DCDCEN for REG1 is present. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_power.h" line="88" column="9" bodyfile="hal/nrf_power.h" bodystart="88" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__power__hal_1gadbe4d08348308cc5adfb488efabc7e75" prot="public" static="no">
        <name>NRF_POWER_HAS_POFWARN</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Symbol indicating whether power failure event is present. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_power.h" line="95" column="9" bodyfile="hal/nrf_power.h" bodystart="95" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__power__hal_1ga6eb31a9e51433ccc5153f13836262413" prot="public" static="no">
        <name>NRF_POWER_HAS_POFCON</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Symbol indicating whether power failure comparator is present. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_power.h" line="102" column="9" bodyfile="hal/nrf_power.h" bodystart="102" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__power__hal_1ga91da3b2902ebfface225894862947d61" prot="public" static="no">
        <name>NRF_POWER_HAS_POFCON_VDDH</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Symbol indicating whether power failure comparator for VDDH is present. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_power.h" line="109" column="9" bodyfile="hal/nrf_power.h" bodystart="109" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__power__hal_1gafb6d47e6eeec0e4c768d14a5d47a7d7d" prot="public" static="no">
        <name>NRF_POWER_HAS_RESETREAS</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Symbol indicating whether RESETREAS register is present in POWER. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_power.h" line="116" column="9" bodyfile="hal/nrf_power.h" bodystart="116" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__power__hal_1ga147a56d724fc87b7dd9f01163bda04d0" prot="public" static="no">
        <name>NRF_POWER_HAS_RESETREAS_CTRLAP</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Symbol indicating whether RESETREAS CTRLAP is present. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_power.h" line="123" column="9" bodyfile="hal/nrf_power.h" bodystart="123" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__power__hal_1ga8b404ebd7180cbc61fc10051b484347f" prot="public" static="no">
        <name>NRF_POWER_HAS_RESETREAS_LPCOMP</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Symbol indicating whether RESETREAS LPCOMP is present. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_power.h" line="130" column="9" bodyfile="hal/nrf_power.h" bodystart="130" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__power__hal_1ga3ebb915c2530c98c6ef0553b04d8339d" prot="public" static="no">
        <name>NRF_POWER_HAS_RESETREAS_NFC</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Symbol indicating whether RESETREAS NFC is present. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_power.h" line="137" column="9" bodyfile="hal/nrf_power.h" bodystart="137" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__power__hal_1ga860ae57ae991dc714952f708b1bb8c0d" prot="public" static="no">
        <name>NRF_POWER_HAS_RESETREAS_VBUS</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Symbol indicating whether RESETREAS VBUS is present. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_power.h" line="144" column="9" bodyfile="hal/nrf_power.h" bodystart="144" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__power__hal_1ga2adc2361652f04ec80a5d76016f930f9" prot="public" static="no">
        <name>NRF_POWER_HAS_MAINREGSTATUS</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Symbol indicating whether MAINREGSTATUS register is present. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_power.h" line="151" column="9" bodyfile="hal/nrf_power.h" bodystart="151" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__power__hal_1gab8b4080818e5c37e22c0fc4653d3dd7a" prot="public" static="no">
        <name>NRF_POWER_HAS_GPREGRET</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Symbol indicating whether GPREGRET register is present. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_power.h" line="158" column="9" bodyfile="hal/nrf_power.h" bodystart="158" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__power__hal_1ga2089d59f882f579e34a7a384ddb35054" prot="public" static="no">
        <name>NRF_POWER_HAS_GPREGRET_ARRAY</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Symbol indicating whether GPREGRET register is treated as an array. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_power.h" line="165" column="9" bodyfile="hal/nrf_power.h" bodystart="165" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__power__hal_1ga52b5b62ea8d1a83e05650e9ec5df42af" prot="public" static="no">
        <name>NRFX_POWER_GPREGRET_COUNT</name>
        <initializer>POWER_GPREGRET_MaxCount</initializer>
        <briefdescription>
<para>Size of GPREGRET register when defined as array. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_power.h" line="172" column="9" bodyfile="hal/nrf_power.h" bodystart="172" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__power__hal_1ga7e93c6ce1e6ea02f3dca3ebe9e464199" prot="public" static="no">
        <name>NRF_POWER_HAS_SEMAPHORE</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Symbol indicating whether semaphore for regulator voltage scaling procedure is present. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_power.h" line="179" column="9" bodyfile="hal/nrf_power.h" bodystart="179" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__power__hal_1gadd9d0775ca19e151088353fdb3e4f9bf" prot="public" static="no">
        <name>NRF_POWER_HAS_VREG_UPDATE_TASK_EVENT</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Symbol indicating whether task and event responsible for updating voltage regulators configuration are present. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_power.h" line="187" column="9" bodyfile="hal/nrf_power.h" bodystart="187" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__power__hal_1ga9564ee71fc917dda7503c072d3b06d9c" prot="public" static="no">
        <name>NRF_POWER_HAS_VREG_CONFIG</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Symbol indicating whether voltage regulators are configurable. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_power.h" line="194" column="9" bodyfile="hal/nrf_power.h" bodystart="194" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__power__hal_1ga29c81b7bd5a63e199322f6576f9f2361" prot="public" static="no">
        <name>NRF_POWER_HAS_ABB</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Symbol indicating whether the Adaptive Body Biasing (ABB) domains are present. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_power.h" line="201" column="9" bodyfile="hal/nrf_power.h" bodystart="201" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__power__hal_1ga96609a8fa044e676cb275f15c79be693" prot="public" static="no">
        <name>NRF_POWER_HAS_BLOCK_MODES</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Symbol indicating whether the power block modes are present. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_power.h" line="208" column="9" bodyfile="hal/nrf_power.h" bodystart="208" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__power__hal_1ga3050c661fec6f0d747c962a3bfc83ffc" prot="public" static="no">
        <name>NRF_POWER_HAS_BILS</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Symbol indicating whether the Built-in Leakage Sensors (BILS) are present. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_power.h" line="215" column="9" bodyfile="hal/nrf_power.h" bodystart="215" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__power__hal_1ga2fe6ddd9b3c4e0dadd63b2886b7b7059" prot="public" static="no">
        <name>NRF_POWER_HAS_PMIC</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Symbol indicating whether the Power Management IC (PMIC) is present. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_power.h" line="222" column="9" bodyfile="hal/nrf_power.h" bodystart="222" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__power__hal_1ga9879807e3b60c07f3e96b99d9c3384e3" prot="public" static="no">
        <name>NRF_POWER_EVENTS_ABB_LOCK_COUNT</name>
        <initializer>POWER_EVENTS_ABBLOCK_MaxCount</initializer>
        <briefdescription>
<para>Symbol specifying the maximum number of available <computeroutput>ABB_LOCK</computeroutput> events. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_power.h" line="229" column="9" bodyfile="hal/nrf_power.h" bodystart="229" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="group__nrf__power__hal_1ga6452fff919765c34921624d3e73eb650" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_power_task_t</name>
        <enumvalue id="group__nrf__power__hal_1gga6452fff919765c34921624d3e73eb650a062b62dabcbfb45746e9830a70b6b83a" prot="public">
          <name>NRF_POWER_TASK_CONSTLAT</name>
          <initializer>= offsetof(NRF_POWER_Type, TASKS_CONSTLAT)</initializer>
          <briefdescription>
<para>Enable constant latency mode. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__power__hal_1gga6452fff919765c34921624d3e73eb650a540df20769f7db1e8afd7792e4d7f141" prot="public">
          <name>NRF_POWER_TASK_LOWPWR</name>
          <initializer>= offsetof(NRF_POWER_Type, TASKS_LOWPWR)</initializer>
          <briefdescription>
<para>Enable low-power mode (variable latency). </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__power__hal_1gga6452fff919765c34921624d3e73eb650a800275d1dc85fdd95f61ee2e6f2da206" prot="public">
          <name>NRF_POWER_TASK_SEMAPHORE_ACQUIRE</name>
          <initializer>= offsetof(NRF_POWER_Type, TASKS_SEMAPHORE.ACQUIRE)</initializer>
          <briefdescription>
<para>Acquire the semaphore for regulator voltage scaling procedure. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__power__hal_1gga6452fff919765c34921624d3e73eb650ace1261739a5b058bc9388b031eb63a63" prot="public">
          <name>NRF_POWER_TASK_SEMAPHORE_RELEASE</name>
          <initializer>= offsetof(NRF_POWER_Type, TASKS_SEMAPHORE.RELEASE)</initializer>
          <briefdescription>
<para>Release the semaphore for regulator voltage scaling procedure. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__power__hal_1gga6452fff919765c34921624d3e73eb650a2b29ab3fd70cf71adb8f47f1385b0f06" prot="public">
          <name>NRF_POWER_TASK_REGULATOR_UPDATE</name>
          <initializer>= offsetof(NRF_POWER_Type, TASKS_REGUPDATE)</initializer>
          <briefdescription>
<para>Update the regulator configuration. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>POWER tasks. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_power.h" line="233" column="1" bodyfile="hal/nrf_power.h" bodystart="234" bodyend="248"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__power__hal_1ga64bec8dee5aca9c1cd233b251da21ab4" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_power_event_t</name>
        <enumvalue id="group__nrf__power__hal_1gga64bec8dee5aca9c1cd233b251da21ab4ac6ea1490a7ac382f2caf0f12060258a9" prot="public">
          <name>NRF_POWER_EVENT_POFWARN</name>
          <initializer>= offsetof(NRF_POWER_Type, EVENTS_POFWARN)</initializer>
          <briefdescription>
<para>Power failure warning. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__power__hal_1gga64bec8dee5aca9c1cd233b251da21ab4a288d0c0b2c57d50c5783c2b8a9532db5" prot="public">
          <name>NRF_POWER_EVENT_SLEEPENTER</name>
          <initializer>= offsetof(NRF_POWER_Type, EVENTS_SLEEPENTER)</initializer>
          <briefdescription>
<para>CPU entered WFI/WFE sleep mode. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__power__hal_1gga64bec8dee5aca9c1cd233b251da21ab4a6aa5ab7fd5b034d2860a19dece927422" prot="public">
          <name>NRF_POWER_EVENT_SLEEPEXIT</name>
          <initializer>= offsetof(NRF_POWER_Type, EVENTS_SLEEPEXIT)</initializer>
          <briefdescription>
<para>CPU exited WFI/WFE sleep mode. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__power__hal_1gga64bec8dee5aca9c1cd233b251da21ab4abc91dc94f7acf392347ada35592d47d0" prot="public">
          <name>NRF_POWER_EVENT_USBDETECTED</name>
          <initializer>= offsetof(NRF_POWER_Type, EVENTS_USBDETECTED)</initializer>
          <briefdescription>
<para>Voltage supply detected on VBUS. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__power__hal_1gga64bec8dee5aca9c1cd233b251da21ab4a539ed9f98231b4adc01816c711aef3c7" prot="public">
          <name>NRF_POWER_EVENT_USBREMOVED</name>
          <initializer>= offsetof(NRF_POWER_Type, EVENTS_USBREMOVED)</initializer>
          <briefdescription>
<para>Voltage supply removed from VBUS. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__power__hal_1gga64bec8dee5aca9c1cd233b251da21ab4a47d7cba1a39dda183bdfa7e38fad6fb1" prot="public">
          <name>NRF_POWER_EVENT_USBPWRRDY</name>
          <initializer>= offsetof(NRF_POWER_Type, EVENTS_USBPWRRDY)</initializer>
          <briefdescription>
<para>USB 3.3 V supply ready. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__power__hal_1gga64bec8dee5aca9c1cd233b251da21ab4adbdbfbab81a1e6a126b65900993a9688" prot="public">
          <name>NRF_POWER_EVENT_SEMAPHORE_ACQUIRED</name>
          <initializer>= offsetof(NRF_POWER_Type, EVENTS_SEMAPHORE.ACQUIRED)</initializer>
          <briefdescription>
<para>Acquired the semaphore for regulator voltage scaling procedure. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__power__hal_1gga64bec8dee5aca9c1cd233b251da21ab4a21638cfc653af6990d8daf191e816c74" prot="public">
          <name>NRF_POWER_EVENT_SEMAPHORE_RELEASED</name>
          <initializer>= offsetof(NRF_POWER_Type, EVENTS_SEMAPHORE.RELEASED)</initializer>
          <briefdescription>
<para>Released the semaphore for regulator voltage scaling procedure. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__power__hal_1gga64bec8dee5aca9c1cd233b251da21ab4ad9a788bc7fb97f7676bf1766ae87c8b0" prot="public">
          <name>NRF_POWER_EVENT_REGULATOR_UPDATED</name>
          <initializer>= offsetof(NRF_POWER_Type, EVENTS_REGUPDATED)</initializer>
          <briefdescription>
<para>Updated the regulator configuration. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__power__hal_1gga64bec8dee5aca9c1cd233b251da21ab4afd6de432ab388de78370cc6abf4b73bc" prot="public">
          <name>NRF_POWER_EVENT_ABB_LOCK_0</name>
          <initializer>= offsetof(NRF_POWER_Type, EVENTS_ABBLOCK[0])</initializer>
          <briefdescription>
<para>ABB lock for the ABB domain 0. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__power__hal_1gga64bec8dee5aca9c1cd233b251da21ab4ad548d560388c34031d766a4e4f5e868d" prot="public">
          <name>NRF_POWER_EVENT_ABB_LOCK_1</name>
          <initializer>= offsetof(NRF_POWER_Type, EVENTS_ABBLOCK[1])</initializer>
          <briefdescription>
<para>ABB lock for the ABB domain 1. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>POWER events. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_power.h" line="251" column="1" bodyfile="hal/nrf_power.h" bodystart="252" bodyend="276"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__power__hal_1ga92ca4cddecad24911ab7c8be411ced69" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_power_int_mask_t</name>
        <enumvalue id="group__nrf__power__hal_1gga92ca4cddecad24911ab7c8be411ced69abf3bfe5d950be312aa854513a18aeabd" prot="public">
          <name>NRF_POWER_INT_POFWARN_MASK</name>
          <initializer>= POWER_INTENSET_POFWARN_Msk</initializer>
          <briefdescription>
<para>Write &apos;1&apos; to enable interrupt for POFWARN event. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__power__hal_1gga92ca4cddecad24911ab7c8be411ced69a3e2677809ae7bf10daa820030f2cc442" prot="public">
          <name>NRF_POWER_INT_SLEEPENTER_MASK</name>
          <initializer>= POWER_INTENSET_SLEEPENTER_Msk</initializer>
          <briefdescription>
<para>Write &apos;1&apos; to enable interrupt for SLEEPENTER event. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__power__hal_1gga92ca4cddecad24911ab7c8be411ced69a37f88f7f49dbc11ab2881aec913f826c" prot="public">
          <name>NRF_POWER_INT_SLEEPEXIT_MASK</name>
          <initializer>= POWER_INTENSET_SLEEPEXIT_Msk</initializer>
          <briefdescription>
<para>Write &apos;1&apos; to enable interrupt for SLEEPEXIT event. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__power__hal_1gga92ca4cddecad24911ab7c8be411ced69a458c1b4030e7743c0818bbd5385d18f4" prot="public">
          <name>NRF_POWER_INT_USBDETECTED_MASK</name>
          <initializer>= POWER_INTENSET_USBDETECTED_Msk</initializer>
          <briefdescription>
<para>Write &apos;1&apos; to enable interrupt for USBDETECTED event. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__power__hal_1gga92ca4cddecad24911ab7c8be411ced69a99797b92f3db56e84797af2653748849" prot="public">
          <name>NRF_POWER_INT_USBREMOVED_MASK</name>
          <initializer>= POWER_INTENSET_USBREMOVED_Msk</initializer>
          <briefdescription>
<para>Write &apos;1&apos; to enable interrupt for USBREMOVED event. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__power__hal_1gga92ca4cddecad24911ab7c8be411ced69ab9a098b3bde8361843b0adecf8297706" prot="public">
          <name>NRF_POWER_INT_USBPWRRDY_MASK</name>
          <initializer>= POWER_INTENSET_USBPWRRDY_Msk</initializer>
          <briefdescription>
<para>Write &apos;1&apos; to enable interrupt for USBPWRRDY event. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__power__hal_1gga92ca4cddecad24911ab7c8be411ced69ab7cba048407f08c5ae0b4b5733500d1e" prot="public">
          <name>NRF_POWER_INT_SEMAPHORE_ACQUIRED</name>
          <initializer>= POWER_INTEN_SEMAPHOREACQUIRED_Msk</initializer>
          <briefdescription>
<para>Write &apos;1&apos; to enable interrupt for SEMAPHORE_ACQUIRED event. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__power__hal_1gga92ca4cddecad24911ab7c8be411ced69a00cf19f13fedf80804d8d4ddc94e5b59" prot="public">
          <name>NRF_POWER_INT_SEMAPHORE_RELEASED</name>
          <initializer>= POWER_INTEN_SEMAPHORERELEASED_Msk</initializer>
          <briefdescription>
<para>Write &apos;1&apos; to enable interrupt for SEMAPHORE_RELEASED event. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__power__hal_1gga92ca4cddecad24911ab7c8be411ced69af3edb402cb486b11bc0886b2f47c041b" prot="public">
          <name>NRF_POWER_INT_REGULATOR_UPDATED</name>
          <initializer>= POWER_INTEN_REGUPDATED_Msk</initializer>
          <briefdescription>
<para>Write &apos;1&apos; to enable interrupt for REGULATOR_UPDATED event. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__power__hal_1gga92ca4cddecad24911ab7c8be411ced69aaa186e05343b95e0f8c22cfc1dc9f1b8" prot="public">
          <name>NRF_POWER_INT_ABB_LOCK_0</name>
          <initializer>= POWER_INTEN_ABBLOCK0_Msk</initializer>
          <briefdescription>
<para>Write &apos;1&apos; to enable interrupt for ABB_LOCK_0 event. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__power__hal_1gga92ca4cddecad24911ab7c8be411ced69a05945f71b8da1253191d5faceca1cc63" prot="public">
          <name>NRF_POWER_INT_ABB_LOCK_1</name>
          <initializer>= POWER_INTEN_ABBLOCK1_Msk</initializer>
          <briefdescription>
<para>Write &apos;1&apos; to enable interrupt for ABB_LOCK_1 event. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>POWER interrupts. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_power.h" line="279" column="1" bodyfile="hal/nrf_power.h" bodystart="280" bodyend="304"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__power__hal_1ga3febba1780ce498df7e0f03ac2b7c30b" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_power_resetreas_mask_t</name>
        <enumvalue id="group__nrf__power__hal_1gga3febba1780ce498df7e0f03ac2b7c30ba0c011b629cdd2402f51ccfbddc9a6d14" prot="public">
          <name>NRF_POWER_RESETREAS_RESETPIN_MASK</name>
          <initializer>= POWER_RESETREAS_RESETPIN_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Bit mask of RESETPIN field. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__power__hal_1gga3febba1780ce498df7e0f03ac2b7c30bab9b34a328e8ced38d6e04fe39acae295" prot="public">
          <name>NRF_POWER_RESETREAS_DOG_MASK</name>
          <initializer>= POWER_RESETREAS_DOG_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Bit mask of DOG field. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__power__hal_1gga3febba1780ce498df7e0f03ac2b7c30ba649469b18203dc461e7153a0ef33bf71" prot="public">
          <name>NRF_POWER_RESETREAS_SREQ_MASK</name>
          <initializer>= POWER_RESETREAS_SREQ_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Bit mask of SREQ field. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__power__hal_1gga3febba1780ce498df7e0f03ac2b7c30bab3f481364015c004fe0facc63b0b058e" prot="public">
          <name>NRF_POWER_RESETREAS_LOCKUP_MASK</name>
          <initializer>= POWER_RESETREAS_LOCKUP_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Bit mask of LOCKUP field. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__power__hal_1gga3febba1780ce498df7e0f03ac2b7c30ba5c46ebb1f07e9f6257c1bc152b1c622e" prot="public">
          <name>NRF_POWER_RESETREAS_OFF_MASK</name>
          <initializer>= POWER_RESETREAS_OFF_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Bit mask of OFF field. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__power__hal_1gga3febba1780ce498df7e0f03ac2b7c30ba63a5e9b614f06eb8a3462a4fe3ec06e4" prot="public">
          <name>NRF_POWER_RESETREAS_LPCOMP_MASK</name>
          <initializer>= POWER_RESETREAS_LPCOMP_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Bit mask of LPCOMP field. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__power__hal_1gga3febba1780ce498df7e0f03ac2b7c30bae4228ae63436d9069eb4c55895e4ed65" prot="public">
          <name>NRF_POWER_RESETREAS_DIF_MASK</name>
          <initializer>= POWER_RESETREAS_DIF_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Bit mask of DIF field. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__power__hal_1gga3febba1780ce498df7e0f03ac2b7c30bab7bbe8e6c82cd042c384b66b3f249898" prot="public">
          <name>NRF_POWER_RESETREAS_NFC_MASK</name>
          <initializer>= POWER_RESETREAS_NFC_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Bit mask of NFC field. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__power__hal_1gga3febba1780ce498df7e0f03ac2b7c30bae6a771f904bdbc5e866b0b8daa8ec36a" prot="public">
          <name>NRF_POWER_RESETREAS_VBUS_MASK</name>
          <initializer>= POWER_RESETREAS_VBUS_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Bit mask of VBUS field. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__power__hal_1gga3febba1780ce498df7e0f03ac2b7c30baf66181df2fefaf89ef84c72cddd05911" prot="public">
          <name>NRF_POWER_RESETREAS_CTRLAP_MASK</name>
          <initializer>= POWER_RESETREAS_CTRLAP_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Bit mask of CTRLAP field. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Reset reason. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_power.h" line="308" column="1" bodyfile="hal/nrf_power.h" bodystart="309" bodyend="328"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__power__hal_1ga85664e3b3bd3a99f8c8ef1fdbb1e2496" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_power_usbregstatus_mask_t</name>
        <enumvalue id="group__nrf__power__hal_1gga85664e3b3bd3a99f8c8ef1fdbb1e2496afd9eddec83b650949f6e68e9419cf244" prot="public">
          <name>NRF_POWER_USBREGSTATUS_VBUSDETECT_MASK</name>
          <initializer>= POWER_USBREGSTATUS_VBUSDETECT_Msk</initializer>
          <briefdescription>
<para>USB detected or removed. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__power__hal_1gga85664e3b3bd3a99f8c8ef1fdbb1e2496a876fbf69774a0135f3b9a79897f7b7fd" prot="public">
          <name>NRF_POWER_USBREGSTATUS_OUTPUTRDY_MASK</name>
          <initializer>= POWER_USBREGSTATUS_OUTPUTRDY_Msk</initializer>
          <briefdescription>
<para>USB 3.3 V supply ready. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>USBREGSTATUS register bit masks. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__nrf__power__hal_1ga7e5fad60a4dce6da9602068fd5fd9c28" kindref="member">nrf_power_usbregstatus_get</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_power.h" line="337" column="1" bodyfile="hal/nrf_power.h" bodystart="338" bodyend="341"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__power__hal_1gaaf5443f9755d50c1e2d07a51990ba665" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_power_ramblock_t</name>
        <enumvalue id="group__nrf__power__hal_1ggaaf5443f9755d50c1e2d07a51990ba665afc4cb3e4426ebe3aca6d9527a2237541" prot="public">
          <name>NRF_POWER_RAMBLOCK0</name>
          <initializer>= POWER_RAMSTATUS_RAMBLOCK0_Pos</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__power__hal_1ggaaf5443f9755d50c1e2d07a51990ba665aff2bf3cc5f305b3093a58248380c4dab" prot="public">
          <name>NRF_POWER_RAMBLOCK1</name>
          <initializer>= POWER_RAMSTATUS_RAMBLOCK1_Pos</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__power__hal_1ggaaf5443f9755d50c1e2d07a51990ba665abf87687d9f39354b0ab707b34c6a0779" prot="public">
          <name>NRF_POWER_RAMBLOCK2</name>
          <initializer>= POWER_RAMSTATUS_RAMBLOCK2_Pos</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__power__hal_1ggaaf5443f9755d50c1e2d07a51990ba665a4be71bc04b43568e610ac80d06c0fcce" prot="public">
          <name>NRF_POWER_RAMBLOCK3</name>
          <initializer>= POWER_RAMSTATUS_RAMBLOCK3_Pos</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Numbers of RAM blocks. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__nrf__power__hal_1ga0e1c55ee096228d2e71662a099cb61c4" kindref="member">nrf_power_ramblock_mask_t</ref> </para>
</simplesect>
<simplesect kind="note"><para>RAM blocks must be used in nRF51. In newer SoCs, RAM is divided into segments and this functionality is not supported. See the PS for mapping between the internal RAM and RAM blocks, because this mapping is not 1:1, and functions related to old style blocks must not be used. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_power.h" line="355" column="1" bodyfile="hal/nrf_power.h" bodystart="356" bodyend="365"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__power__hal_1ga0e1c55ee096228d2e71662a099cb61c4" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_power_ramblock_mask_t</name>
        <enumvalue id="group__nrf__power__hal_1gga0e1c55ee096228d2e71662a099cb61c4a8098befc6d01884f5bcf8211c59f7bc5" prot="public">
          <name>NRF_POWER_RAMBLOCK0_MASK</name>
          <initializer>= POWER_RAMSTATUS_RAMBLOCK0_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__power__hal_1gga0e1c55ee096228d2e71662a099cb61c4ac72c19aa5956a813a0658035b02ee660" prot="public">
          <name>NRF_POWER_RAMBLOCK1_MASK</name>
          <initializer>= POWER_RAMSTATUS_RAMBLOCK1_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__power__hal_1gga0e1c55ee096228d2e71662a099cb61c4a16411423d1f0ebff32014171004dd67d" prot="public">
          <name>NRF_POWER_RAMBLOCK2_MASK</name>
          <initializer>= POWER_RAMSTATUS_RAMBLOCK2_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__power__hal_1gga0e1c55ee096228d2e71662a099cb61c4a77eb69cd525ba2e7a99ac52f0d55f11b" prot="public">
          <name>NRF_POWER_RAMBLOCK3_MASK</name>
          <initializer>= POWER_RAMSTATUS_RAMBLOCK3_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Masks of RAM blocks. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__nrf__power__hal_1gaaf5443f9755d50c1e2d07a51990ba665" kindref="member">nrf_power_ramblock_t</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_power.h" line="372" column="1" bodyfile="hal/nrf_power.h" bodystart="373" bodyend="382"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__power__hal_1ga79872e2ebbcedf5ca759ef232c797157" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_power_onoffram_t</name>
        <enumvalue id="group__nrf__power__hal_1gga79872e2ebbcedf5ca759ef232c797157ae24d7fe63dfb6c1816b2ca3c763b7451" prot="public">
          <name>NRF_POWER_ONRAM0</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Keep RAM block 0 ON or OFF in System ON mode. <linebreak/>
 </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__power__hal_1gga79872e2ebbcedf5ca759ef232c797157a3ba15e28f0e63be320d2d5ca1268609a" prot="public">
          <name>NRF_POWER_OFFRAM0</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Keep retention on RAM block 0 when RAM block is switched OFF. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__power__hal_1gga79872e2ebbcedf5ca759ef232c797157a662451909ea9b79b063c310fd59f8d1b" prot="public">
          <name>NRF_POWER_ONRAM1</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Keep RAM block 1 ON or OFF in System ON mode. <linebreak/>
 </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__power__hal_1gga79872e2ebbcedf5ca759ef232c797157ad8ec70b345f01d11d77a87977bdc1824" prot="public">
          <name>NRF_POWER_OFFRAM1</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Keep retention on RAM block 1 when RAM block is switched OFF. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__power__hal_1gga79872e2ebbcedf5ca759ef232c797157a3ff3329bc8a7c39d897f796011695126" prot="public">
          <name>NRF_POWER_ONRAM2</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Keep RAM block 2 ON or OFF in System ON mode. <linebreak/>
 </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__power__hal_1gga79872e2ebbcedf5ca759ef232c797157a15bb7629e501dbcf0b691117bc893d41" prot="public">
          <name>NRF_POWER_OFFRAM2</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Keep retention on RAM block 2 when RAM block is switched OFF. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__power__hal_1gga79872e2ebbcedf5ca759ef232c797157afd83ec10ce9e56363b29e9deb88441e3" prot="public">
          <name>NRF_POWER_ONRAM3</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Keep RAM block 3 ON or OFF in System ON mode. <linebreak/>
 </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__power__hal_1gga79872e2ebbcedf5ca759ef232c797157ae47bcf8105e1db8991fb5996e06e8ca5" prot="public">
          <name>NRF_POWER_OFFRAM3</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Keep retention on RAM block 3 when RAM block is switched OFF. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>RAM power state position of the bits. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__nrf__power__hal_1gac71371d7bb39ba729cb7ed9dfbfe0e49" kindref="member">nrf_power_onoffram_mask_t</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_power.h" line="390" column="1" bodyfile="hal/nrf_power.h" bodystart="391" bodyend="400"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__power__hal_1gac71371d7bb39ba729cb7ed9dfbfe0e49" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_power_onoffram_mask_t</name>
        <enumvalue id="group__nrf__power__hal_1ggac71371d7bb39ba729cb7ed9dfbfe0e49abc2b6e2fe11e81ffec3ed2b5e83200cc" prot="public">
          <name>NRF_POWER_ONRAM0_MASK</name>
          <initializer>= 1U &lt;&lt; NRF_POWER_ONRAM0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Keep RAM block 0 ON or OFF in System ON mode. <linebreak/>
 </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__power__hal_1ggac71371d7bb39ba729cb7ed9dfbfe0e49ac0a57e493dcb64e19ccb6bf4f51f597a" prot="public">
          <name>NRF_POWER_OFFRAM0_MASK</name>
          <initializer>= 1U &lt;&lt; NRF_POWER_OFFRAM0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Keep retention on RAM block 0 when RAM block is switched OFF. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__power__hal_1ggac71371d7bb39ba729cb7ed9dfbfe0e49a30de72fd80fdd497ff4a3a0f6c4520b1" prot="public">
          <name>NRF_POWER_ONRAM1_MASK</name>
          <initializer>= 1U &lt;&lt; NRF_POWER_ONRAM1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Keep RAM block 1 ON or OFF in System ON mode. <linebreak/>
 </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__power__hal_1ggac71371d7bb39ba729cb7ed9dfbfe0e49a4698a342ef014ac79ac29df0e63e7ff6" prot="public">
          <name>NRF_POWER_OFFRAM1_MASK</name>
          <initializer>= 1U &lt;&lt; NRF_POWER_OFFRAM1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Keep retention on RAM block 1 when RAM block is switched OFF. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__power__hal_1ggac71371d7bb39ba729cb7ed9dfbfe0e49a087fa8e393343d8d848d4f8be9fb5fae" prot="public">
          <name>NRF_POWER_ONRAM2_MASK</name>
          <initializer>= 1U &lt;&lt; NRF_POWER_ONRAM2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Keep RAM block 2 ON or OFF in System ON mode. <linebreak/>
 </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__power__hal_1ggac71371d7bb39ba729cb7ed9dfbfe0e49a27af6b2a0a2f94d84f0acc5a643bdc50" prot="public">
          <name>NRF_POWER_OFFRAM2_MASK</name>
          <initializer>= 1U &lt;&lt; NRF_POWER_OFFRAM2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Keep retention on RAM block 2 when RAM block is switched OFF. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__power__hal_1ggac71371d7bb39ba729cb7ed9dfbfe0e49a12fb3a32cecf39f4f021de13da092dbb" prot="public">
          <name>NRF_POWER_ONRAM3_MASK</name>
          <initializer>= 1U &lt;&lt; NRF_POWER_ONRAM3</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Keep RAM block 3 ON or OFF in System ON mode. <linebreak/>
 </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__power__hal_1ggac71371d7bb39ba729cb7ed9dfbfe0e49ab4d72c52323e7197966211355ba5f186" prot="public">
          <name>NRF_POWER_OFFRAM3_MASK</name>
          <initializer>= 1U &lt;&lt; NRF_POWER_OFFRAM3</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Keep retention on RAM block 3 when RAM block is switched OFF. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>RAM power state bit masks. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__nrf__power__hal_1ga79872e2ebbcedf5ca759ef232c797157" kindref="member">nrf_power_onoffram_t</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_power.h" line="407" column="1" bodyfile="hal/nrf_power.h" bodystart="408" bodyend="417"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__power__hal_1gacc0f863f34d48f5975564a11975dda2e" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_power_pof_thr_t</name>
        <enumvalue id="group__nrf__power__hal_1ggacc0f863f34d48f5975564a11975dda2eab4fb7ea911008ae039ffe54b21c235aa" prot="public">
          <name>NRF_POWER_POFTHR_V21</name>
          <initializer>= POWER_POFCON_THRESHOLD_V21</initializer>
          <briefdescription>
<para>Set threshold to 2.1 V. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__power__hal_1ggacc0f863f34d48f5975564a11975dda2ea83ebb6ec6ba81f72446761838931d4fd" prot="public">
          <name>NRF_POWER_POFTHR_V23</name>
          <initializer>= POWER_POFCON_THRESHOLD_V23</initializer>
          <briefdescription>
<para>Set threshold to 2.3 V. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__power__hal_1ggacc0f863f34d48f5975564a11975dda2ea387664457c4e47fcb4f070ca655e8c9c" prot="public">
          <name>NRF_POWER_POFTHR_V25</name>
          <initializer>= POWER_POFCON_THRESHOLD_V25</initializer>
          <briefdescription>
<para>Set threshold to 2.5 V. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__power__hal_1ggacc0f863f34d48f5975564a11975dda2ea5b9897d77046971bc191c7cf3caa610a" prot="public">
          <name>NRF_POWER_POFTHR_V27</name>
          <initializer>= POWER_POFCON_THRESHOLD_V27</initializer>
          <briefdescription>
<para>Set threshold to 2.7 V. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__power__hal_1ggacc0f863f34d48f5975564a11975dda2ea99ec1985ccd5ddcf31777fc93eeb0783" prot="public">
          <name>NRF_POWER_POFTHR_V17</name>
          <initializer>= POWER_POFCON_THRESHOLD_V17</initializer>
          <briefdescription>
<para>Set threshold to 1.7 V. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__power__hal_1ggacc0f863f34d48f5975564a11975dda2ea3555fddf55feea0c57b3054130770d7c" prot="public">
          <name>NRF_POWER_POFTHR_V18</name>
          <initializer>= POWER_POFCON_THRESHOLD_V18</initializer>
          <briefdescription>
<para>Set threshold to 1.8 V. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__power__hal_1ggacc0f863f34d48f5975564a11975dda2ea60b0ce9856d3beed4e88d00006d40bea" prot="public">
          <name>NRF_POWER_POFTHR_V19</name>
          <initializer>= POWER_POFCON_THRESHOLD_V19</initializer>
          <briefdescription>
<para>Set threshold to 1.9 V. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__power__hal_1ggacc0f863f34d48f5975564a11975dda2ea7dadc6f82fd855039f4b21f8aab9e949" prot="public">
          <name>NRF_POWER_POFTHR_V20</name>
          <initializer>= POWER_POFCON_THRESHOLD_V20</initializer>
          <briefdescription>
<para>Set threshold to 2.0 V. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__power__hal_1ggacc0f863f34d48f5975564a11975dda2eae486a7dba0fa0834eea448ec6dd549f9" prot="public">
          <name>NRF_POWER_POFTHR_V22</name>
          <initializer>= POWER_POFCON_THRESHOLD_V22</initializer>
          <briefdescription>
<para>Set threshold to 2.2 V. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__power__hal_1ggacc0f863f34d48f5975564a11975dda2eae7f11fb1ae3fd597665b51fa8f6af931" prot="public">
          <name>NRF_POWER_POFTHR_V24</name>
          <initializer>= POWER_POFCON_THRESHOLD_V24</initializer>
          <briefdescription>
<para>Set threshold to 2.4 V. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__power__hal_1ggacc0f863f34d48f5975564a11975dda2eaaebdd649455c76291d55255322d8f6f1" prot="public">
          <name>NRF_POWER_POFTHR_V26</name>
          <initializer>= POWER_POFCON_THRESHOLD_V26</initializer>
          <briefdescription>
<para>Set threshold to 2.6 V. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__power__hal_1ggacc0f863f34d48f5975564a11975dda2ea136e921768387320a7a6ee8dc6531cfb" prot="public">
          <name>NRF_POWER_POFTHR_V28</name>
          <initializer>= POWER_POFCON_THRESHOLD_V28</initializer>
          <briefdescription>
<para>Set threshold to 2.8 V. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Power failure comparator thresholds. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_power.h" line="421" column="1" bodyfile="hal/nrf_power.h" bodystart="422" bodyend="437"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__power__hal_1ga3dfa1a1f6a6daaab25b7a47bbf42969b" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_power_pof_thrvddh_t</name>
        <enumvalue id="group__nrf__power__hal_1gga3dfa1a1f6a6daaab25b7a47bbf42969ba7934d5246e85ddc1ec655d99e0f75292" prot="public">
          <name>NRF_POWER_POFTHRVDDH_V27</name>
          <initializer>= POWER_POFCON_THRESHOLDVDDH_V27</initializer>
          <briefdescription>
<para>Set threshold to 2.7 V. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__power__hal_1gga3dfa1a1f6a6daaab25b7a47bbf42969ba27699fc0bd1b6829b5241976f8e7c113" prot="public">
          <name>NRF_POWER_POFTHRVDDH_V28</name>
          <initializer>= POWER_POFCON_THRESHOLDVDDH_V28</initializer>
          <briefdescription>
<para>Set threshold to 2.8 V. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__power__hal_1gga3dfa1a1f6a6daaab25b7a47bbf42969ba6eb9dd6d51c0b831b5c8849729718655" prot="public">
          <name>NRF_POWER_POFTHRVDDH_V29</name>
          <initializer>= POWER_POFCON_THRESHOLDVDDH_V29</initializer>
          <briefdescription>
<para>Set threshold to 2.9 V. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__power__hal_1gga3dfa1a1f6a6daaab25b7a47bbf42969bacf04f386c6124777f02ee7f500c27409" prot="public">
          <name>NRF_POWER_POFTHRVDDH_V30</name>
          <initializer>= POWER_POFCON_THRESHOLDVDDH_V30</initializer>
          <briefdescription>
<para>Set threshold to 3.0 V. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__power__hal_1gga3dfa1a1f6a6daaab25b7a47bbf42969bac136478d76f44580707d61a6e0fda84d" prot="public">
          <name>NRF_POWER_POFTHRVDDH_V31</name>
          <initializer>= POWER_POFCON_THRESHOLDVDDH_V31</initializer>
          <briefdescription>
<para>Set threshold to 3.1 V. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__power__hal_1gga3dfa1a1f6a6daaab25b7a47bbf42969ba9725ae80a1f953c09de76c375b9c2758" prot="public">
          <name>NRF_POWER_POFTHRVDDH_V32</name>
          <initializer>= POWER_POFCON_THRESHOLDVDDH_V32</initializer>
          <briefdescription>
<para>Set threshold to 3.2 V. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__power__hal_1gga3dfa1a1f6a6daaab25b7a47bbf42969ba67b2c8e8308fec5da4676d3d18472b1d" prot="public">
          <name>NRF_POWER_POFTHRVDDH_V33</name>
          <initializer>= POWER_POFCON_THRESHOLDVDDH_V33</initializer>
          <briefdescription>
<para>Set threshold to 3.3 V. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__power__hal_1gga3dfa1a1f6a6daaab25b7a47bbf42969baf52f0aec993bd958b56e74e33503a72f" prot="public">
          <name>NRF_POWER_POFTHRVDDH_V34</name>
          <initializer>= POWER_POFCON_THRESHOLDVDDH_V34</initializer>
          <briefdescription>
<para>Set threshold to 3.4 V. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__power__hal_1gga3dfa1a1f6a6daaab25b7a47bbf42969ba7512614787226109d413efd0ba1f63a2" prot="public">
          <name>NRF_POWER_POFTHRVDDH_V35</name>
          <initializer>= POWER_POFCON_THRESHOLDVDDH_V35</initializer>
          <briefdescription>
<para>Set threshold to 3.5 V. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__power__hal_1gga3dfa1a1f6a6daaab25b7a47bbf42969ba3efcb0659676e7338b05a7120d78b3a5" prot="public">
          <name>NRF_POWER_POFTHRVDDH_V36</name>
          <initializer>= POWER_POFCON_THRESHOLDVDDH_V36</initializer>
          <briefdescription>
<para>Set threshold to 3.6 V. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__power__hal_1gga3dfa1a1f6a6daaab25b7a47bbf42969ba8a969eb365d007944cff79e9ba217327" prot="public">
          <name>NRF_POWER_POFTHRVDDH_V37</name>
          <initializer>= POWER_POFCON_THRESHOLDVDDH_V37</initializer>
          <briefdescription>
<para>Set threshold to 3.7 V. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__power__hal_1gga3dfa1a1f6a6daaab25b7a47bbf42969bac18a9d0ec5d834c0cc0228aa0f863d9c" prot="public">
          <name>NRF_POWER_POFTHRVDDH_V38</name>
          <initializer>= POWER_POFCON_THRESHOLDVDDH_V38</initializer>
          <briefdescription>
<para>Set threshold to 3.8 V. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__power__hal_1gga3dfa1a1f6a6daaab25b7a47bbf42969baa5bd3b3654da5d8b9f122cb5d9232dd5" prot="public">
          <name>NRF_POWER_POFTHRVDDH_V39</name>
          <initializer>= POWER_POFCON_THRESHOLDVDDH_V39</initializer>
          <briefdescription>
<para>Set threshold to 3.9 V. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__power__hal_1gga3dfa1a1f6a6daaab25b7a47bbf42969baa74de8068a1a09ca205c798edc010a0e" prot="public">
          <name>NRF_POWER_POFTHRVDDH_V40</name>
          <initializer>= POWER_POFCON_THRESHOLDVDDH_V40</initializer>
          <briefdescription>
<para>Set threshold to 4.0 V. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__power__hal_1gga3dfa1a1f6a6daaab25b7a47bbf42969baa8e1f9b85bdaa6acff1a499277a34914" prot="public">
          <name>NRF_POWER_POFTHRVDDH_V41</name>
          <initializer>= POWER_POFCON_THRESHOLDVDDH_V41</initializer>
          <briefdescription>
<para>Set threshold to 4.1 V. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__power__hal_1gga3dfa1a1f6a6daaab25b7a47bbf42969ba002f035a3609c980a52aa7b56df26cb5" prot="public">
          <name>NRF_POWER_POFTHRVDDH_V42</name>
          <initializer>= POWER_POFCON_THRESHOLDVDDH_V42</initializer>
          <briefdescription>
<para>Set threshold to 4.2 V. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Power failure comparator thresholds for VDDH. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_power.h" line="442" column="1" bodyfile="hal/nrf_power.h" bodystart="443" bodyend="460"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__power__hal_1ga4c4e3a1505af5d72f3ccd16cf986abd8" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_power_mainregstatus_t</name>
        <enumvalue id="group__nrf__power__hal_1gga4c4e3a1505af5d72f3ccd16cf986abd8a8006a2c2e410e14a49b0d3b1fbf9674a" prot="public">
          <name>NRF_POWER_MAINREGSTATUS_NORMAL</name>
          <initializer>= POWER_MAINREGSTATUS_MAINREGSTATUS_Normal</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Normal voltage mode. Voltage supplied on VDD. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__power__hal_1gga4c4e3a1505af5d72f3ccd16cf986abd8a09b8037fd8116a5c9b3ef25cb0d7bdd0" prot="public">
          <name>NRF_POWER_MAINREGSTATUS_HIGH</name>
          <initializer>= POWER_MAINREGSTATUS_MAINREGSTATUS_High</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>High voltage mode. Voltage supplied on VDDH. <linebreak/>
 </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Main regulator status. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_power.h" line="465" column="1" bodyfile="hal/nrf_power.h" bodystart="466" bodyend="469"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__power__hal_1gabf0b57b293efd9bb767ce02642468bb6" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_power_rampower_t</name>
        <enumvalue id="group__nrf__power__hal_1ggabf0b57b293efd9bb767ce02642468bb6a648dea53144b50dedf4b2d445c93837b" prot="public">
          <name>NRF_POWER_RAMPOWER_S0POWER</name>
          <initializer>= POWER_RAM_POWER_S0POWER_Pos</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Keep RAM section S0 ON in System ON mode </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__power__hal_1ggabf0b57b293efd9bb767ce02642468bb6a5c000059cef3c7efb86c90c0207d2d2b" prot="public">
          <name>NRF_POWER_RAMPOWER_S1POWER</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Keep RAM section S1 ON in System ON mode. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__power__hal_1ggabf0b57b293efd9bb767ce02642468bb6acbc8cbbd0874199b6910db607ff57a4a" prot="public">
          <name>NRF_POWER_RAMPOWER_S2POWER</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Keep RAM section S2 ON in System ON mode. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__power__hal_1ggabf0b57b293efd9bb767ce02642468bb6a59cece43916bf0cf384237545cde1366" prot="public">
          <name>NRF_POWER_RAMPOWER_S3POWER</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Keep RAM section S3 ON in System ON mode. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__power__hal_1ggabf0b57b293efd9bb767ce02642468bb6ad5c208f4a432c222cf0c201a7faa32f3" prot="public">
          <name>NRF_POWER_RAMPOWER_S4POWER</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Keep RAM section S4 ON in System ON mode. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__power__hal_1ggabf0b57b293efd9bb767ce02642468bb6af87fb55107f8ad629c0ba53aef3bbfe4" prot="public">
          <name>NRF_POWER_RAMPOWER_S5POWER</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Keep RAM section S5 ON in System ON mode. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__power__hal_1ggabf0b57b293efd9bb767ce02642468bb6aa1826b606b5c3095ca567129990459be" prot="public">
          <name>NRF_POWER_RAMPOWER_S6POWER</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Keep RAM section S6 ON in System ON mode. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__power__hal_1ggabf0b57b293efd9bb767ce02642468bb6a221df67d390ea81a608e311e93fd6d99" prot="public">
          <name>NRF_POWER_RAMPOWER_S7POWER</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Keep RAM section S7 ON in System ON mode. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__power__hal_1ggabf0b57b293efd9bb767ce02642468bb6ade558d13e58cb693c8942066cc772e4a" prot="public">
          <name>NRF_POWER_RAMPOWER_S8POWER</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Keep RAM section S8 ON in System ON mode. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__power__hal_1ggabf0b57b293efd9bb767ce02642468bb6a01bdfd60f33e77b51995f35f7097e22e" prot="public">
          <name>NRF_POWER_RAMPOWER_S9POWER</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Keep RAM section S9 ON in System ON mode. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__power__hal_1ggabf0b57b293efd9bb767ce02642468bb6ac801ca448acfb540f1cbedd6a42d6c18" prot="public">
          <name>NRF_POWER_RAMPOWER_S10POWER</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Keep RAM section S10 ON in System ON mode. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__power__hal_1ggabf0b57b293efd9bb767ce02642468bb6aac1039d720317486be085ae0572c430c" prot="public">
          <name>NRF_POWER_RAMPOWER_S11POWER</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Keep RAM section S11 ON in System ON mode. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__power__hal_1ggabf0b57b293efd9bb767ce02642468bb6ac685dd3a872befce358f70ddbe3be35c" prot="public">
          <name>NRF_POWER_RAMPOWER_S12POWER</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Keep RAM section S12 ON in System ON mode. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__power__hal_1ggabf0b57b293efd9bb767ce02642468bb6aee2f0a1c8debf881fb861bf72927842c" prot="public">
          <name>NRF_POWER_RAMPOWER_S13POWER</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Keep RAM section S13 ON in System ON mode. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__power__hal_1ggabf0b57b293efd9bb767ce02642468bb6a4ad508bc768c83e2b9bcf2babb8bcf54" prot="public">
          <name>NRF_POWER_RAMPOWER_S14POWER</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Keep RAM section S14 ON in System ON mode. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__power__hal_1ggabf0b57b293efd9bb767ce02642468bb6a291dd7d57b8f90d27d2c01c3b4400f54" prot="public">
          <name>NRF_POWER_RAMPOWER_S15POWER</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Keep RAM section S15 ON in System ON mode. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__power__hal_1ggabf0b57b293efd9bb767ce02642468bb6ab8fb5ccdff912df210c8aee7cf9dd632" prot="public">
          <name>NRF_POWER_RAMPOWER_S0RETENTION</name>
          <initializer>= POWER_RAM_POWER_S0RETENTION_Pos</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Keep section retention in OFF mode when section is OFF </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__power__hal_1ggabf0b57b293efd9bb767ce02642468bb6aae354d750466bdc390dbc53194ad4deb" prot="public">
          <name>NRF_POWER_RAMPOWER_S1RETENTION</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Keep section retention in OFF mode when section is OFF. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__power__hal_1ggabf0b57b293efd9bb767ce02642468bb6a08d4386366d77dd3f023ce97c5a1e6fd" prot="public">
          <name>NRF_POWER_RAMPOWER_S2RETENTION</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Keep section retention in OFF mode when section is OFF. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__power__hal_1ggabf0b57b293efd9bb767ce02642468bb6a49b95be7ec78c3a93fac242d75b289ec" prot="public">
          <name>NRF_POWER_RAMPOWER_S3RETENTION</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Keep section retention in OFF mode when section is OFF. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__power__hal_1ggabf0b57b293efd9bb767ce02642468bb6a3f7213b1c28661b3017a8ab02fff5d97" prot="public">
          <name>NRF_POWER_RAMPOWER_S4RETENTION</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Keep section retention in OFF mode when section is OFF. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__power__hal_1ggabf0b57b293efd9bb767ce02642468bb6a98f279feb85459e88bbc98ebd233b0b1" prot="public">
          <name>NRF_POWER_RAMPOWER_S5RETENTION</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Keep section retention in OFF mode when section is OFF. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__power__hal_1ggabf0b57b293efd9bb767ce02642468bb6a308e34b19fd38e8541206a896ae27262" prot="public">
          <name>NRF_POWER_RAMPOWER_S6RETENTION</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Keep section retention in OFF mode when section is OFF. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__power__hal_1ggabf0b57b293efd9bb767ce02642468bb6a2b3189806fa74681f4ca8463a620e401" prot="public">
          <name>NRF_POWER_RAMPOWER_S7RETENTION</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Keep section retention in OFF mode when section is OFF. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__power__hal_1ggabf0b57b293efd9bb767ce02642468bb6a3b1bdcfd59c89c2262bf3986831bfe19" prot="public">
          <name>NRF_POWER_RAMPOWER_S8RETENTION</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Keep section retention in OFF mode when section is OFF. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__power__hal_1ggabf0b57b293efd9bb767ce02642468bb6a3d40e9d1bbc3ea1da94fe417902ce1c0" prot="public">
          <name>NRF_POWER_RAMPOWER_S9RETENTION</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Keep section retention in OFF mode when section is OFF. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__power__hal_1ggabf0b57b293efd9bb767ce02642468bb6aafe26f4a98f9782d82f352d7bbf43e61" prot="public">
          <name>NRF_POWER_RAMPOWER_S10RETENTION</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Keep section retention in OFF mode when section is OFF. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__power__hal_1ggabf0b57b293efd9bb767ce02642468bb6ad1bf734b02377064b27a3ce491a205d3" prot="public">
          <name>NRF_POWER_RAMPOWER_S11RETENTION</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Keep section retention in OFF mode when section is OFF. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__power__hal_1ggabf0b57b293efd9bb767ce02642468bb6aa5fcc931a8283a69fd8481fa56db894b" prot="public">
          <name>NRF_POWER_RAMPOWER_S12RETENTION</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Keep section retention in OFF mode when section is OFF. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__power__hal_1ggabf0b57b293efd9bb767ce02642468bb6aee2ec8e2f96f1d036b5433d927652a94" prot="public">
          <name>NRF_POWER_RAMPOWER_S13RETENTION</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Keep section retention in OFF mode when section is OFF. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__power__hal_1ggabf0b57b293efd9bb767ce02642468bb6acf9c6fe30a23b27cd0dc2636f644e4a3" prot="public">
          <name>NRF_POWER_RAMPOWER_S14RETENTION</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Keep section retention in OFF mode when section is OFF. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__power__hal_1ggabf0b57b293efd9bb767ce02642468bb6a24f6c5f7bf0633dc63c417913132ddbb" prot="public">
          <name>NRF_POWER_RAMPOWER_S15RETENTION</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Keep section retention in OFF mode when section is OFF. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Bit positions for RAMPOWER register. </para>
        </briefdescription>
        <detaileddescription>
<para>All possible bits described, even if they are not used in selected MCU. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_power.h" line="478" column="1" bodyfile="hal/nrf_power.h" bodystart="479" bodyend="515"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__power__hal_1ga487eca5d7c2a0af37a3c50cfb03c6b56" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_power_rampower_mask_t</name>
        <enumvalue id="group__nrf__power__hal_1gga487eca5d7c2a0af37a3c50cfb03c6b56a5d46900bc88da70ce19d48eab284977d" prot="public">
          <name>NRF_POWER_RAMPOWER_S0POWER_MASK</name>
          <initializer>= 1UL &lt;&lt; NRF_POWER_RAMPOWER_S0POWER</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__power__hal_1gga487eca5d7c2a0af37a3c50cfb03c6b56a01ebf19f5ae2b559e9a3cbad032b049e" prot="public">
          <name>NRF_POWER_RAMPOWER_S1POWER_MASK</name>
          <initializer>= 1UL &lt;&lt; NRF_POWER_RAMPOWER_S1POWER</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__power__hal_1gga487eca5d7c2a0af37a3c50cfb03c6b56a13422fe81852216d3111f06a557ef218" prot="public">
          <name>NRF_POWER_RAMPOWER_S2POWER_MASK</name>
          <initializer>= 1UL &lt;&lt; NRF_POWER_RAMPOWER_S2POWER</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__power__hal_1gga487eca5d7c2a0af37a3c50cfb03c6b56a34391563327130d1de2d6dabdec6a437" prot="public">
          <name>NRF_POWER_RAMPOWER_S3POWER_MASK</name>
          <initializer>= 1UL &lt;&lt; NRF_POWER_RAMPOWER_S3POWER</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__power__hal_1gga487eca5d7c2a0af37a3c50cfb03c6b56a27d28cb25ec16f6452812480a07d7e1f" prot="public">
          <name>NRF_POWER_RAMPOWER_S4POWER_MASK</name>
          <initializer>= 1UL &lt;&lt; NRF_POWER_RAMPOWER_S4POWER</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__power__hal_1gga487eca5d7c2a0af37a3c50cfb03c6b56a03c0995c32802387fe3e08e4827e9eba" prot="public">
          <name>NRF_POWER_RAMPOWER_S5POWER_MASK</name>
          <initializer>= 1UL &lt;&lt; NRF_POWER_RAMPOWER_S5POWER</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__power__hal_1gga487eca5d7c2a0af37a3c50cfb03c6b56a65dc454862f12d69932d6e8e282b6c38" prot="public">
          <name>NRF_POWER_RAMPOWER_S7POWER_MASK</name>
          <initializer>= 1UL &lt;&lt; NRF_POWER_RAMPOWER_S7POWER</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__power__hal_1gga487eca5d7c2a0af37a3c50cfb03c6b56a934432155870c55fb5113097990b335a" prot="public">
          <name>NRF_POWER_RAMPOWER_S8POWER_MASK</name>
          <initializer>= 1UL &lt;&lt; NRF_POWER_RAMPOWER_S8POWER</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__power__hal_1gga487eca5d7c2a0af37a3c50cfb03c6b56a3e7f498590e43db00f55d4e0abc325a7" prot="public">
          <name>NRF_POWER_RAMPOWER_S9POWER_MASK</name>
          <initializer>= 1UL &lt;&lt; NRF_POWER_RAMPOWER_S9POWER</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__power__hal_1gga487eca5d7c2a0af37a3c50cfb03c6b56a3f3c4efaad3bf35e1173f19bae1ba10f" prot="public">
          <name>NRF_POWER_RAMPOWER_S10POWER_MASK</name>
          <initializer>= 1UL &lt;&lt; NRF_POWER_RAMPOWER_S10POWER</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__power__hal_1gga487eca5d7c2a0af37a3c50cfb03c6b56a95a2039ffef33fa6f8442d2ac2af2f13" prot="public">
          <name>NRF_POWER_RAMPOWER_S11POWER_MASK</name>
          <initializer>= 1UL &lt;&lt; NRF_POWER_RAMPOWER_S11POWER</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__power__hal_1gga487eca5d7c2a0af37a3c50cfb03c6b56a8b1bfce24221f814b92b3367600bd686" prot="public">
          <name>NRF_POWER_RAMPOWER_S12POWER_MASK</name>
          <initializer>= 1UL &lt;&lt; NRF_POWER_RAMPOWER_S12POWER</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__power__hal_1gga487eca5d7c2a0af37a3c50cfb03c6b56a97071c85303091d9a369bcdb8cbd02ef" prot="public">
          <name>NRF_POWER_RAMPOWER_S13POWER_MASK</name>
          <initializer>= 1UL &lt;&lt; NRF_POWER_RAMPOWER_S13POWER</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__power__hal_1gga487eca5d7c2a0af37a3c50cfb03c6b56ad7b2c324089686817d8911c5fff82833" prot="public">
          <name>NRF_POWER_RAMPOWER_S14POWER_MASK</name>
          <initializer>= 1UL &lt;&lt; NRF_POWER_RAMPOWER_S14POWER</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__power__hal_1gga487eca5d7c2a0af37a3c50cfb03c6b56a19860cc44ce7ae05510030ac0c00437f" prot="public">
          <name>NRF_POWER_RAMPOWER_S15POWER_MASK</name>
          <initializer>= 1UL &lt;&lt; NRF_POWER_RAMPOWER_S15POWER</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__power__hal_1gga487eca5d7c2a0af37a3c50cfb03c6b56ad623a7ecee888fbdf7e91a96841a624b" prot="public">
          <name>NRF_POWER_RAMPOWER_S0RETENTION_MASK</name>
          <initializer>= 1UL &lt;&lt; NRF_POWER_RAMPOWER_S0RETENTION</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__power__hal_1gga487eca5d7c2a0af37a3c50cfb03c6b56adad01be1174ce85971124b3b183f0ba6" prot="public">
          <name>NRF_POWER_RAMPOWER_S1RETENTION_MASK</name>
          <initializer>= 1UL &lt;&lt; NRF_POWER_RAMPOWER_S1RETENTION</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__power__hal_1gga487eca5d7c2a0af37a3c50cfb03c6b56a4cd3463584e09e4d18ae9a4004b354db" prot="public">
          <name>NRF_POWER_RAMPOWER_S2RETENTION_MASK</name>
          <initializer>= 1UL &lt;&lt; NRF_POWER_RAMPOWER_S2RETENTION</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__power__hal_1gga487eca5d7c2a0af37a3c50cfb03c6b56a422e25f3ba526dd5283426933531f023" prot="public">
          <name>NRF_POWER_RAMPOWER_S3RETENTION_MASK</name>
          <initializer>= 1UL &lt;&lt; NRF_POWER_RAMPOWER_S3RETENTION</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__power__hal_1gga487eca5d7c2a0af37a3c50cfb03c6b56a50dee96b008fa017a85686983bf0c13b" prot="public">
          <name>NRF_POWER_RAMPOWER_S4RETENTION_MASK</name>
          <initializer>= 1UL &lt;&lt; NRF_POWER_RAMPOWER_S4RETENTION</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__power__hal_1gga487eca5d7c2a0af37a3c50cfb03c6b56a1952ce358f2ad0f8f0f14a7d71e6ae09" prot="public">
          <name>NRF_POWER_RAMPOWER_S5RETENTION_MASK</name>
          <initializer>= 1UL &lt;&lt; NRF_POWER_RAMPOWER_S5RETENTION</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__power__hal_1gga487eca5d7c2a0af37a3c50cfb03c6b56a7697395ebe4b7fc7639c8d0ca2dba106" prot="public">
          <name>NRF_POWER_RAMPOWER_S7RETENTION_MASK</name>
          <initializer>= 1UL &lt;&lt; NRF_POWER_RAMPOWER_S7RETENTION</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__power__hal_1gga487eca5d7c2a0af37a3c50cfb03c6b56ae9fba6e5336b524463023831ce98a1b5" prot="public">
          <name>NRF_POWER_RAMPOWER_S8RETENTION_MASK</name>
          <initializer>= 1UL &lt;&lt; NRF_POWER_RAMPOWER_S8RETENTION</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__power__hal_1gga487eca5d7c2a0af37a3c50cfb03c6b56a210f4fa84a900479699fbdec7ef90f31" prot="public">
          <name>NRF_POWER_RAMPOWER_S9RETENTION_MASK</name>
          <initializer>= 1UL &lt;&lt; NRF_POWER_RAMPOWER_S9RETENTION</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__power__hal_1gga487eca5d7c2a0af37a3c50cfb03c6b56a7621be13ad4150dafdaa4a8901e76bc9" prot="public">
          <name>NRF_POWER_RAMPOWER_S10RETENTION_MASK</name>
          <initializer>= 1UL &lt;&lt; NRF_POWER_RAMPOWER_S10RETENTION</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__power__hal_1gga487eca5d7c2a0af37a3c50cfb03c6b56a94937ec6e98730db36c7b0a19c4fcef7" prot="public">
          <name>NRF_POWER_RAMPOWER_S11RETENTION_MASK</name>
          <initializer>= 1UL &lt;&lt; NRF_POWER_RAMPOWER_S11RETENTION</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__power__hal_1gga487eca5d7c2a0af37a3c50cfb03c6b56aed1db4f0c01222072ad43cdaeb63031e" prot="public">
          <name>NRF_POWER_RAMPOWER_S12RETENTION_MASK</name>
          <initializer>= 1UL &lt;&lt; NRF_POWER_RAMPOWER_S12RETENTION</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__power__hal_1gga487eca5d7c2a0af37a3c50cfb03c6b56afdf1989a1fdddbfc5f34229299455fe7" prot="public">
          <name>NRF_POWER_RAMPOWER_S13RETENTION_MASK</name>
          <initializer>= 1UL &lt;&lt; NRF_POWER_RAMPOWER_S13RETENTION</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__power__hal_1gga487eca5d7c2a0af37a3c50cfb03c6b56ae503ce0b5c5629e46881999c9a7baf10" prot="public">
          <name>NRF_POWER_RAMPOWER_S14RETENTION_MASK</name>
          <initializer>= 1UL &lt;&lt; NRF_POWER_RAMPOWER_S14RETENTION</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__power__hal_1gga487eca5d7c2a0af37a3c50cfb03c6b56a4db24f9739236342a23a8d95e8e90149" prot="public">
          <name>NRF_POWER_RAMPOWER_S15RETENTION_MASK</name>
          <initializer>= (int)(1UL &lt;&lt; NRF_POWER_RAMPOWER_S15RETENTION)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Bit masks for RAMPOWER register. </para>
        </briefdescription>
        <detaileddescription>
<para>All possible bits described, even if they are not used in selected MCU. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_power.h" line="522" column="1" bodyfile="hal/nrf_power.h" bodystart="523" bodyend="555"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__power__hal_1ga770cecdacf3a854d13aa2d53e1c29bee" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_power_vreg_mask_t</name>
        <enumvalue id="group__nrf__power__hal_1gga770cecdacf3a854d13aa2d53e1c29beeab5ba3b8dcdf7fef981727796e7a151fe" prot="public">
          <name>NRF_POWER_VREG_1V8_MASK</name>
          <initializer>= POWER_REGCONFIG_VREG1V8_Msk</initializer>
          <briefdescription>
<para>1.8 V regulator. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__power__hal_1gga770cecdacf3a854d13aa2d53e1c29beea7b585e09bbbfe9e6b73ca37a2d29cce2" prot="public">
          <name>NRF_POWER_VREG_1V0_MASK</name>
          <initializer>= POWER_REGCONFIG_VREG1V0_Msk</initializer>
          <briefdescription>
<para>1.0 V regulator. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__power__hal_1gga770cecdacf3a854d13aa2d53e1c29beea0e9636d7e1bbf9237d841ffd559647b5" prot="public">
          <name>NRF_POWER_VREG_0V8_MASK</name>
          <initializer>= POWER_REGCONFIG_VREG0V8_Msk</initializer>
          <briefdescription>
<para>0.8 V regulator. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__power__hal_1gga770cecdacf3a854d13aa2d53e1c29beea34630dd759ecc318688f91be8ce760c2" prot="public">
          <name>NRF_POWER_VREG_VS_MASK</name>
          <initializer>= POWER_REGCONFIG_VREGVS_Msk</initializer>
          <briefdescription>
<para>Voltage scaled regulator. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__power__hal_1gga770cecdacf3a854d13aa2d53e1c29beea6a9e21fb1d91b0b39f86637d0626eced" prot="public">
          <name>NRF_POWER_VREG_MAIN1V8_MASK</name>
          <initializer>= POWER_REGCONFIG_VREGMAIN1V8_Msk</initializer>
          <briefdescription>
<para>1.8 V rail at VREGMAIN regulator. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__power__hal_1gga770cecdacf3a854d13aa2d53e1c29beeaa42f1e6b419f56c7008fb4e3ce7ab10c" prot="public">
          <name>NRF_POWER_VREG_MAIN1V0_MASK</name>
          <initializer>= POWER_REGCONFIG_VREGMAIN1V0_Msk</initializer>
          <briefdescription>
<para>1.0 V rail at VREGMAIN regulator. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__power__hal_1gga770cecdacf3a854d13aa2d53e1c29beea402b6aff94036c87bb1fb1a04b283b5f" prot="public">
          <name>NRF_POWER_VREG_MAINVS_MASK</name>
          <initializer>= POWER_REGCONFIG_VREGMAINVS_Msk</initializer>
          <briefdescription>
<para>Voltage scaled rail at VREGMAIN regulator. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__power__hal_1gga770cecdacf3a854d13aa2d53e1c29beeaf875e55d3b413f7d761d39753d089002" prot="public">
          <name>NRF_POWER_VREG_FORCE_MASK</name>
          <initializer>= POWER_REGCONFIG_FORCE_Msk</initializer>
          <briefdescription>
<para>Force the regulator enable configuration. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>POWER voltage regulators bit masks. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_power.h" line="560" column="1" bodyfile="hal/nrf_power.h" bodystart="561" bodyend="570"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__power__hal_1ga53430096d68829bab78b99e6a7758e3d" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_power_op_point_t</name>
        <enumvalue id="group__nrf__power__hal_1gga53430096d68829bab78b99e6a7758e3da719d1fe5b5aa4d12b42facb1f93e04b7" prot="public">
          <name>NRF_POWER_OP_POINT_0V4</name>
          <initializer>= POWER_ABB_OPPOINT_OPPOINT_OpPoint0V4</initializer>
          <briefdescription>
<para>Operating point 0.4 V. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__power__hal_1gga53430096d68829bab78b99e6a7758e3da1dfaf0667d9d89b486ff57ab3ef87de4" prot="public">
          <name>NRF_POWER_OP_POINT_0V5</name>
          <initializer>= POWER_ABB_OPPOINT_OPPOINT_OpPoint0V5</initializer>
          <briefdescription>
<para>Operating point 0.5 V. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__power__hal_1gga53430096d68829bab78b99e6a7758e3daf1b2eacf036656fbda755e44e06e9114" prot="public">
          <name>NRF_POWER_OP_POINT_0V6</name>
          <initializer>= POWER_ABB_OPPOINT_OPPOINT_OpPoint0V6</initializer>
          <briefdescription>
<para>Operating point 0.6 V. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__power__hal_1gga53430096d68829bab78b99e6a7758e3daeb0c6a34948bc85eb4727e0a10a6166f" prot="public">
          <name>NRF_POWER_OP_POINT_0V8</name>
          <initializer>= POWER_ABB_OPPOINT_OPPOINT_OpPoint0V8</initializer>
          <briefdescription>
<para>Operating point 0.8 V. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>POWER operating points for ABB domain. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_power.h" line="575" column="1" bodyfile="hal/nrf_power.h" bodystart="576" bodyend="581"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__power__hal_1ga1d59f7f076924c43c551ebbee116f209" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_power_override_value_t</name>
        <enumvalue id="group__nrf__power__hal_1gga1d59f7f076924c43c551ebbee116f209a07bc006fcf22bbca6377b28476b81551" prot="public">
          <name>NRF_POWER_OVERRIDE_VALUE_POWER_DOWN</name>
          <initializer>= POWER_ABB_OPPOINT_ABBPWROVERRIDEVAL_PowerDown</initializer>
          <briefdescription>
<para>ABB analog macro powered down. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__power__hal_1gga1d59f7f076924c43c551ebbee116f209ae9b84bc3c8163985e23f6c8fbbf99342" prot="public">
          <name>NRF_POWER_OVERRIDE_VALUE_POWER_UP</name>
          <initializer>= POWER_ABB_OPPOINT_ABBPWROVERRIDEVAL_PowerUp</initializer>
          <briefdescription>
<para>ABB analog macro powered up. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>POWER operating points for ABB domain. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_power.h" line="584" column="1" bodyfile="hal/nrf_power.h" bodystart="585" bodyend="588"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__nrf__power__hal_1gad6ed3d641631f14b0484485fd051ef51" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_power_task_trigger</definition>
        <argsstring>(NRF_POWER_Type *p_reg, nrf_power_task_t task)</argsstring>
        <name>nrf_power_task_trigger</name>
        <param>
          <type>NRF_POWER_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__power__hal_1ga6452fff919765c34921624d3e73eb650" kindref="member">nrf_power_task_t</ref></type>
          <declname>task</declname>
        </param>
        <briefdescription>
<para>Function for activating a specific POWER task. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">task</parametername>
</parameternamelist>
<parameterdescription>
<para>Task. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_power.h" line="1220" column="24" bodyfile="hal/nrf_power.h" bodystart="1220" bodyend="1223" declfile="hal/nrf_power.h" declline="606" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__power__hal_1gac67343a2c966a797945d3d447e8d4458" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_power_task_address_get</definition>
        <argsstring>(NRF_POWER_Type const *p_reg, nrf_power_task_t task)</argsstring>
        <name>nrf_power_task_address_get</name>
        <param>
          <type>NRF_POWER_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__power__hal_1ga6452fff919765c34921624d3e73eb650" kindref="member">nrf_power_task_t</ref></type>
          <declname>task</declname>
        </param>
        <briefdescription>
<para>Function for returning the address of a specific POWER task register. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">task</parametername>
</parameternamelist>
<parameterdescription>
<para>Task.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Task address. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_power.h" line="1225" column="28" bodyfile="hal/nrf_power.h" bodystart="1225" bodyend="1229" declfile="hal/nrf_power.h" declline="616" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__power__hal_1ga456bf19c1d3c0411e33af18fa037481c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_power_event_clear</definition>
        <argsstring>(NRF_POWER_Type *p_reg, nrf_power_event_t event)</argsstring>
        <name>nrf_power_event_clear</name>
        <param>
          <type>NRF_POWER_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__power__hal_1ga64bec8dee5aca9c1cd233b251da21ab4" kindref="member">nrf_power_event_t</ref></type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>Function for clearing a specific event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_power.h" line="1231" column="24" bodyfile="hal/nrf_power.h" bodystart="1231" bodyend="1235" declfile="hal/nrf_power.h" declline="625" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__power__hal_1ga29b2e7267a49a0d04b1f3bf4edc101e8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE bool</type>
        <definition>NRF_STATIC_INLINE bool nrf_power_event_check</definition>
        <argsstring>(NRF_POWER_Type const *p_reg, nrf_power_event_t event)</argsstring>
        <name>nrf_power_event_check</name>
        <param>
          <type>NRF_POWER_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__power__hal_1ga64bec8dee5aca9c1cd233b251da21ab4" kindref="member">nrf_power_event_t</ref></type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>Function for retrieving the state of the POWER event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event to be checked.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>The event has been generated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>The event has not been generated. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_power.h" line="1237" column="24" bodyfile="hal/nrf_power.h" bodystart="1237" bodyend="1240" declfile="hal/nrf_power.h" declline="636" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__power__hal_1ga399be233fc8bfd540739e61c552a0bf4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE bool</type>
        <definition>NRF_STATIC_INLINE bool nrf_power_event_get_and_clear</definition>
        <argsstring>(NRF_POWER_Type *p_reg, nrf_power_event_t event)</argsstring>
        <name>nrf_power_event_get_and_clear</name>
        <param>
          <type>NRF_POWER_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__power__hal_1ga64bec8dee5aca9c1cd233b251da21ab4" kindref="member">nrf_power_event_t</ref></type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>Function for getting and clearing the state of specific event. </para>
        </briefdescription>
        <detaileddescription>
<para>This function checks the state of the event and clears it.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>The event was set. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>The event was not set. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_power.h" line="1242" column="24" bodyfile="hal/nrf_power.h" bodystart="1242" bodyend="1251" declfile="hal/nrf_power.h" declline="649" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__power__hal_1gabe16d110629d651d4bd714bb5f9e915f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_power_event_address_get</definition>
        <argsstring>(NRF_POWER_Type const *p_reg, nrf_power_event_t event)</argsstring>
        <name>nrf_power_event_address_get</name>
        <param>
          <type>NRF_POWER_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__power__hal_1ga64bec8dee5aca9c1cd233b251da21ab4" kindref="member">nrf_power_event_t</ref></type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>Function for returning the address of a specific POWER event register. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Address. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_power.h" line="1253" column="28" bodyfile="hal/nrf_power.h" bodystart="1253" bodyend="1257" declfile="hal/nrf_power.h" declline="660" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__power__hal_1gab853a595fd79cd1d1019cdd22a30d2fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_power_int_enable</definition>
        <argsstring>(NRF_POWER_Type *p_reg, uint32_t mask)</argsstring>
        <name>nrf_power_int_enable</name>
        <param>
          <type>NRF_POWER_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Function for enabling selected interrupts. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of interrupts to be enabled. Use <ref refid="group__nrf__power__hal_1ga92ca4cddecad24911ab7c8be411ced69" kindref="member">nrf_power_int_mask_t</ref> values for bit masking. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_power.h" line="1259" column="24" bodyfile="hal/nrf_power.h" bodystart="1259" bodyend="1262" declfile="hal/nrf_power.h" declline="670" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__power__hal_1gae488f7aab5a977eca67b729098246f48" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_power_int_enable_check</definition>
        <argsstring>(NRF_POWER_Type const *p_reg, uint32_t mask)</argsstring>
        <name>nrf_power_int_enable_check</name>
        <param>
          <type>NRF_POWER_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Function for checking if the specified interrupts are enabled. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of interrupts to be checked. Use <ref refid="group__nrf__power__hal_1ga92ca4cddecad24911ab7c8be411ced69" kindref="member">nrf_power_int_mask_t</ref> values for bit masking.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Mask of enabled interrupts. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_power.h" line="1264" column="28" bodyfile="hal/nrf_power.h" bodystart="1264" bodyend="1267" declfile="hal/nrf_power.h" declline="681" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__power__hal_1gacc0a9e5e2e5d03b960d723d6ddeb1380" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_power_int_enable_get</definition>
        <argsstring>(NRF_POWER_Type const *p_reg)</argsstring>
        <name>nrf_power_int_enable_get</name>
        <param>
          <type>NRF_POWER_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for retrieving the information about enabled interrupts. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The flags of enabled interrupts. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_power.h" line="1269" column="28" bodyfile="hal/nrf_power.h" bodystart="1269" bodyend="1272" declfile="hal/nrf_power.h" declline="690" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__power__hal_1ga2a420ae01a7fa45da69afe710154891d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_power_int_disable</definition>
        <argsstring>(NRF_POWER_Type *p_reg, uint32_t mask)</argsstring>
        <name>nrf_power_int_disable</name>
        <param>
          <type>NRF_POWER_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Function for disabling selected interrupts. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of interrupts to be disabled. Use <ref refid="group__nrf__power__hal_1ga92ca4cddecad24911ab7c8be411ced69" kindref="member">nrf_power_int_mask_t</ref> values for bit masking. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_power.h" line="1274" column="24" bodyfile="hal/nrf_power.h" bodystart="1274" bodyend="1277" declfile="hal/nrf_power.h" declline="699" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__power__hal_1ga283b45cae85cd27280003f1b550ea077" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_power_subscribe_set</definition>
        <argsstring>(NRF_POWER_Type *p_reg, nrf_power_task_t task, uint8_t channel)</argsstring>
        <name>nrf_power_subscribe_set</name>
        <param>
          <type>NRF_POWER_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__power__hal_1ga6452fff919765c34921624d3e73eb650" kindref="member">nrf_power_task_t</ref></type>
          <declname>task</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>channel</declname>
        </param>
        <briefdescription>
<para>Function for setting the subscribe configuration for a given POWER task. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">task</parametername>
</parameternamelist>
<parameterdescription>
<para>Task for which to set the configuration. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">channel</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel through which to subscribe events. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_power.h" line="710" column="24" declfile="hal/nrf_power.h" declline="710" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__power__hal_1ga4967e295c49be7edc371ac01c3922889" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_power_subscribe_clear</definition>
        <argsstring>(NRF_POWER_Type *p_reg, nrf_power_task_t task)</argsstring>
        <name>nrf_power_subscribe_clear</name>
        <param>
          <type>NRF_POWER_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__power__hal_1ga6452fff919765c34921624d3e73eb650" kindref="member">nrf_power_task_t</ref></type>
          <declname>task</declname>
        </param>
        <briefdescription>
<para>Function for clearing the subscribe configuration for a given POWER task. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">task</parametername>
</parameternamelist>
<parameterdescription>
<para>Task for which to clear the configuration. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_power.h" line="721" column="24" declfile="hal/nrf_power.h" declline="721" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__power__hal_1gabcd34095e7c5603eb949b320308f3b9b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_power_publish_set</definition>
        <argsstring>(NRF_POWER_Type *p_reg, nrf_power_event_t event, uint8_t channel)</argsstring>
        <name>nrf_power_publish_set</name>
        <param>
          <type>NRF_POWER_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__power__hal_1ga64bec8dee5aca9c1cd233b251da21ab4" kindref="member">nrf_power_event_t</ref></type>
          <declname>event</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>channel</declname>
        </param>
        <briefdescription>
<para>Function for setting the publish configuration for a given POWER event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event for which to set the configuration. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">channel</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel through which to publish the event. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_power.h" line="731" column="24" declfile="hal/nrf_power.h" declline="731" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__power__hal_1ga2583429f3cb12dba3479fcbdd028ca8f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_power_publish_clear</definition>
        <argsstring>(NRF_POWER_Type *p_reg, nrf_power_event_t event)</argsstring>
        <name>nrf_power_publish_clear</name>
        <param>
          <type>NRF_POWER_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__power__hal_1ga64bec8dee5aca9c1cd233b251da21ab4" kindref="member">nrf_power_event_t</ref></type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>Function for clearing the publish configuration for a given POWER event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event for which to clear the configuration. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_power.h" line="742" column="24" declfile="hal/nrf_power.h" declline="742" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__power__hal_1gaad306f69122fdd920fbf4c7e87745222" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_power_resetreas_get</definition>
        <argsstring>(NRF_POWER_Type const *p_reg)</argsstring>
        <name>nrf_power_resetreas_get</name>
        <param>
          <type>NRF_POWER_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting the reset reason bitmask. </para>
        </briefdescription>
        <detaileddescription>
<para>This function returns the reset reason bitmask. Unless cleared, the RESETREAS register is cumulative. A field is cleared by writing &apos;1&apos; to it (see <ref refid="group__nrf__power__hal_1ga47102dd335c0ecb520ed0cd70c7dc143" kindref="member">nrf_power_resetreas_clear</ref>). If none of the reset sources is flagged, the chip was reset from the on-chip reset generator, which indicates a power-on-reset or a brown out reset.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The mask of reset reasons constructed with <ref refid="group__nrf__power__hal_1ga3febba1780ce498df7e0f03ac2b7c30b" kindref="member">nrf_power_resetreas_mask_t</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_power.h" line="1308" column="28" bodyfile="hal/nrf_power.h" bodystart="1308" bodyend="1311" declfile="hal/nrf_power.h" declline="760" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__power__hal_1ga47102dd335c0ecb520ed0cd70c7dc143" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_power_resetreas_clear</definition>
        <argsstring>(NRF_POWER_Type *p_reg, uint32_t mask)</argsstring>
        <name>nrf_power_resetreas_clear</name>
        <param>
          <type>NRF_POWER_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Function for clearing the selected reset reason field. </para>
        </briefdescription>
        <detaileddescription>
<para>This function clears the selected reset reason field.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>The mask constructed from <ref refid="group__nrf__power__hal_1ga3febba1780ce498df7e0f03ac2b7c30b" kindref="member">nrf_power_resetreas_mask_t</ref> enumerator values.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="group__nrf__power__hal_1gaad306f69122fdd920fbf4c7e87745222" kindref="member">nrf_power_resetreas_get</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_power.h" line="1313" column="24" bodyfile="hal/nrf_power.h" bodystart="1313" bodyend="1316" declfile="hal/nrf_power.h" declline="772" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__power__hal_1gac7a0dd99ee51b1f040a2f9845fd31cea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE bool</type>
        <definition>NRF_STATIC_INLINE bool nrf_power_powerstatus_get</definition>
        <argsstring>(NRF_POWER_Type const *p_reg)</argsstring>
        <name>nrf_power_powerstatus_get</name>
        <param>
          <type>NRF_POWER_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting power status of the LTE Modem domain. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>The LTE Modem domain is powered on. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>The LTE Modem domain is powered off. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_power.h" line="784" column="24" declfile="hal/nrf_power.h" declline="784" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__power__hal_1ga2ef11c1ac5edea30bcd95716ee8a2cec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_power_ramstatus_get</definition>
        <argsstring>(NRF_POWER_Type const *p_reg)</argsstring>
        <name>nrf_power_ramstatus_get</name>
        <param>
          <type>NRF_POWER_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting the RAMSTATUS register. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Value with bits set according to the masks in <ref refid="group__nrf__power__hal_1ga0e1c55ee096228d2e71662a099cb61c4" kindref="member">nrf_power_ramblock_mask_t</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_power.h" line="795" column="28" declfile="hal/nrf_power.h" declline="795" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__power__hal_1ga1447b9e52caebb0ecf092a90544ecbe6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_power_pofcon_set</definition>
        <argsstring>(NRF_POWER_Type *p_reg, bool enable, nrf_power_pof_thr_t thr)</argsstring>
        <name>nrf_power_pofcon_set</name>
        <param>
          <type>NRF_POWER_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>enable</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__power__hal_1gacc0f863f34d48f5975564a11975dda2e" kindref="member">nrf_power_pof_thr_t</ref></type>
          <declname>thr</declname>
        </param>
        <briefdescription>
<para>Function for setting the power failure comparator configuration. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">enable</parametername>
</parameternamelist>
<parameterdescription>
<para>True if the power failure comparator is to be enabled, false otherwise. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">thr</parametername>
</parameternamelist>
<parameterdescription>
<para>Voltage threshold value. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_power.h" line="1349" column="24" bodyfile="hal/nrf_power.h" bodystart="1349" bodyend="1369" declfile="hal/nrf_power.h" declline="820" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__power__hal_1ga2aab621e2142289fe639fdec013dfe3f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE <ref refid="group__nrf__power__hal_1gacc0f863f34d48f5975564a11975dda2e" kindref="member">nrf_power_pof_thr_t</ref></type>
        <definition>NRF_STATIC_INLINE nrf_power_pof_thr_t nrf_power_pofcon_get</definition>
        <argsstring>(NRF_POWER_Type const *p_reg, bool *p_enabled)</argsstring>
        <name>nrf_power_pofcon_get</name>
        <param>
          <type>NRF_POWER_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>bool *</type>
          <declname>p_enabled</declname>
        </param>
        <briefdescription>
<para>Function for getting the power failure comparator configuration. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">p_enabled</parametername>
</parameternamelist>
<parameterdescription>
<para>Function sets this boolean variable to true if power failure comparator is enabled. The pointer can be NULL if we do not need this information.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Threshold setting for power failure comparator. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_power.h" line="1371" column="39" bodyfile="hal/nrf_power.h" bodystart="1371" bodyend="1382" declfile="hal/nrf_power.h" declline="834" declcolumn="39"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__power__hal_1ga570aa25425f8bebefc433bd031e7f080" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_power_pofcon_vddh_set</definition>
        <argsstring>(NRF_POWER_Type *p_reg, nrf_power_pof_thrvddh_t thr)</argsstring>
        <name>nrf_power_pofcon_vddh_set</name>
        <param>
          <type>NRF_POWER_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__power__hal_1ga3dfa1a1f6a6daaab25b7a47bbf42969b" kindref="member">nrf_power_pof_thrvddh_t</ref></type>
          <declname>thr</declname>
        </param>
        <briefdescription>
<para>Function for setting the VDDH power failure comparator threshold. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">thr</parametername>
</parameternamelist>
<parameterdescription>
<para>Threshold to be set. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_power.h" line="1386" column="24" bodyfile="hal/nrf_power.h" bodystart="1386" bodyend="1394" declfile="hal/nrf_power.h" declline="845" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__power__hal_1ga91a4e59a0eef52900085ee9e3001f74c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE <ref refid="group__nrf__power__hal_1ga3dfa1a1f6a6daaab25b7a47bbf42969b" kindref="member">nrf_power_pof_thrvddh_t</ref></type>
        <definition>NRF_STATIC_INLINE nrf_power_pof_thrvddh_t nrf_power_pofcon_vddh_get</definition>
        <argsstring>(NRF_POWER_Type const *p_reg)</argsstring>
        <name>nrf_power_pofcon_vddh_get</name>
        <param>
          <type>NRF_POWER_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting the VDDH power failure comparator threshold. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>VDDH threshold currently configured. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_power.h" line="1396" column="43" bodyfile="hal/nrf_power.h" bodystart="1396" bodyend="1400" declfile="hal/nrf_power.h" declline="855" declcolumn="43"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__power__hal_1ga29711581b57c9223bb2286d39690ef65" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_power_gpregret_set</definition>
        <argsstring>(NRF_POWER_Type *p_reg, uint32_t reg_num, uint32_t val)</argsstring>
        <name>nrf_power_gpregret_set</name>
        <param>
          <type>NRF_POWER_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>reg_num</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Function for setting the general purpose retention register. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">reg_num</parametername>
</parameternamelist>
<parameterdescription>
<para>General purpose retention register number. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">val</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to be set in the register. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_power.h" line="1404" column="24" bodyfile="hal/nrf_power.h" bodystart="1404" bodyend="1433" declfile="hal/nrf_power.h" declline="866" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__power__hal_1ga91bbc3e3c6803e42e95b48903dd2b030" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_power_gpregret_get</definition>
        <argsstring>(NRF_POWER_Type const *p_reg, uint32_t reg_num)</argsstring>
        <name>nrf_power_gpregret_get</name>
        <param>
          <type>NRF_POWER_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>reg_num</declname>
        </param>
        <briefdescription>
<para>Function for getting general purpose retention register. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">reg_num</parametername>
</parameternamelist>
<parameterdescription>
<para>General purpose retention register number.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Value from the register. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_power.h" line="1435" column="28" bodyfile="hal/nrf_power.h" bodystart="1435" bodyend="1460" declfile="hal/nrf_power.h" declline="878" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__power__hal_1ga6b3e6f1754daf543262eb6d4233be975" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_power_dcdcen_set</definition>
        <argsstring>(NRF_POWER_Type *p_reg, bool enable)</argsstring>
        <name>nrf_power_dcdcen_set</name>
        <param>
          <type>NRF_POWER_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>enable</declname>
        </param>
        <briefdescription>
<para>Enable or disable DCDC converter. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>If the device consist of high voltage power input (VDDH), this setting will relate to the converter on low voltage side (1.3 V output).</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">enable</parametername>
</parameternamelist>
<parameterdescription>
<para>True if DCDC converter is to be enabled, false otherwise. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_power.h" line="1464" column="24" bodyfile="hal/nrf_power.h" bodystart="1464" bodyend="1468" declfile="hal/nrf_power.h" declline="891" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__power__hal_1gab625f43f64efc077da3b502786346400" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE bool</type>
        <definition>NRF_STATIC_INLINE bool nrf_power_dcdcen_get</definition>
        <argsstring>(NRF_POWER_Type const *p_reg)</argsstring>
        <name>nrf_power_dcdcen_get</name>
        <param>
          <type>NRF_POWER_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting the state of the DCDC converter. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>If the device consist of high voltage power input (VDDH), this setting will relate to the converter on low voltage side (1.3 V output).</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>Converter is enabled. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>Converter is disabled. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_power.h" line="1470" column="24" bodyfile="hal/nrf_power.h" bodystart="1470" bodyend="1475" declfile="hal/nrf_power.h" declline="904" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__power__hal_1ga5d09133631495b690df29a092a6057a4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_power_rampower_mask_on</definition>
        <argsstring>(NRF_POWER_Type *p_reg, uint8_t block, uint32_t section_mask)</argsstring>
        <name>nrf_power_rampower_mask_on</name>
        <param>
          <type>NRF_POWER_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>block</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>section_mask</declname>
        </param>
        <briefdescription>
<para>Turn ON sections in the selected RAM block. </para>
        </briefdescription>
        <detaileddescription>
<para>This function turns ON several sections in one block and also block retention.</para>
<para><simplesect kind="see"><para><ref refid="group__nrf__power__hal_1ga487eca5d7c2a0af37a3c50cfb03c6b56" kindref="member">nrf_power_rampower_mask_t</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__nrf__power__hal_1gaee6c27678fe7f87ea8bc778c706245e6" kindref="member">nrf_power_rampower_mask_off</ref></para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">block</parametername>
</parameternamelist>
<parameterdescription>
<para>RAM block index. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">section_mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of the sections created by merging <ref refid="group__nrf__power__hal_1ga487eca5d7c2a0af37a3c50cfb03c6b56" kindref="member">nrf_power_rampower_mask_t</ref> flags. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_power.h" line="921" column="24" declfile="hal/nrf_power.h" declline="921" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__power__hal_1gaee6c27678fe7f87ea8bc778c706245e6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_power_rampower_mask_off</definition>
        <argsstring>(NRF_POWER_Type *p_reg, uint8_t block, uint32_t section_mask)</argsstring>
        <name>nrf_power_rampower_mask_off</name>
        <param>
          <type>NRF_POWER_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>block</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>section_mask</declname>
        </param>
        <briefdescription>
<para>Turn ON sections in the selected RAM block. </para>
        </briefdescription>
        <detaileddescription>
<para>This function turns OFF several sections in one block and also block retention.</para>
<para><simplesect kind="see"><para><ref refid="group__nrf__power__hal_1ga487eca5d7c2a0af37a3c50cfb03c6b56" kindref="member">nrf_power_rampower_mask_t</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__nrf__power__hal_1gaee6c27678fe7f87ea8bc778c706245e6" kindref="member">nrf_power_rampower_mask_off</ref></para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">block</parametername>
</parameternamelist>
<parameterdescription>
<para>RAM block index. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">section_mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of the sections created by merging <ref refid="group__nrf__power__hal_1ga487eca5d7c2a0af37a3c50cfb03c6b56" kindref="member">nrf_power_rampower_mask_t</ref> flags. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_power.h" line="938" column="24" declfile="hal/nrf_power.h" declline="938" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__power__hal_1gac2435b18ef4c25f807b1fce2eb7bb50d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_power_rampower_mask_get</definition>
        <argsstring>(NRF_POWER_Type const *p_reg, uint8_t block)</argsstring>
        <name>nrf_power_rampower_mask_get</name>
        <param>
          <type>NRF_POWER_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>block</declname>
        </param>
        <briefdescription>
<para>Function for getting the ON mask and retention sections in the selected RAM block. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">block</parametername>
</parameternamelist>
<parameterdescription>
<para>RAM block index.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Mask of sections state composed from <ref refid="group__nrf__power__hal_1ga487eca5d7c2a0af37a3c50cfb03c6b56" kindref="member">nrf_power_rampower_mask_t</ref> flags. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_power.h" line="950" column="28" declfile="hal/nrf_power.h" declline="950" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__power__hal_1ga16853affef979cdc62291b811f25cc46" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_power_dcdcen_vddh_set</definition>
        <argsstring>(NRF_POWER_Type *p_reg, bool enable)</argsstring>
        <name>nrf_power_dcdcen_vddh_set</name>
        <param>
          <type>NRF_POWER_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>enable</declname>
        </param>
        <briefdescription>
<para>Function for enabling or disabling the DCDC converter on VDDH. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">enable</parametername>
</parameternamelist>
<parameterdescription>
<para>True if DCDC converter on VDDH is to be enabled, false otherwise. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_power.h" line="1500" column="24" bodyfile="hal/nrf_power.h" bodystart="1500" bodyend="1509" declfile="hal/nrf_power.h" declline="960" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__power__hal_1gaa4132dcc882fb84520a8046ab88f8e8f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE bool</type>
        <definition>NRF_STATIC_INLINE bool nrf_power_dcdcen_vddh_get</definition>
        <argsstring>(NRF_POWER_Type const *p_reg)</argsstring>
        <name>nrf_power_dcdcen_vddh_get</name>
        <param>
          <type>NRF_POWER_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting the state of DCDC converter on VDDH. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>Converter is enabled. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>Converter is disabled. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_power.h" line="1511" column="24" bodyfile="hal/nrf_power.h" bodystart="1511" bodyend="1516" declfile="hal/nrf_power.h" declline="970" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__power__hal_1ga835338600525d9f90b302fd45b66b417" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE <ref refid="group__nrf__power__hal_1ga4c4e3a1505af5d72f3ccd16cf986abd8" kindref="member">nrf_power_mainregstatus_t</ref></type>
        <definition>NRF_STATIC_INLINE nrf_power_mainregstatus_t nrf_power_mainregstatus_get</definition>
        <argsstring>(NRF_POWER_Type const *p_reg)</argsstring>
        <name>nrf_power_mainregstatus_get</name>
        <param>
          <type>NRF_POWER_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting the main supply status. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The current main supply status. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_power.h" line="1521" column="27" bodyfile="hal/nrf_power.h" bodystart="1521" bodyend="1526" declfile="hal/nrf_power.h" declline="982" declcolumn="27"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__power__hal_1ga7e5fad60a4dce6da9602068fd5fd9c28" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_power_usbregstatus_get</definition>
        <argsstring>(NRF_POWER_Type const *p_reg)</argsstring>
        <name>nrf_power_usbregstatus_get</name>
        <param>
          <type>NRF_POWER_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting the whole USBREGSTATUS register. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The USBREGSTATUS register value. Use <ref refid="group__nrf__power__hal_1ga85664e3b3bd3a99f8c8ef1fdbb1e2496" kindref="member">nrf_power_usbregstatus_mask_t</ref> values for bit masking.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__nrf__power__hal_1gad3a706ce20f081231917ebb96d8d43db" kindref="member">nrf_power_usbregstatus_vbusdet_get</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__nrf__power__hal_1gad6fd5ec05e096da4231aa53d77ba03da" kindref="member">nrf_power_usbregstatus_outrdy_get</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_power.h" line="1530" column="28" bodyfile="hal/nrf_power.h" bodystart="1530" bodyend="1533" declfile="hal/nrf_power.h" declline="997" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__power__hal_1gad3a706ce20f081231917ebb96d8d43db" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE bool</type>
        <definition>NRF_STATIC_INLINE bool nrf_power_usbregstatus_vbusdet_get</definition>
        <argsstring>(NRF_POWER_Type const *p_reg)</argsstring>
        <name>nrf_power_usbregstatus_vbusdet_get</name>
        <param>
          <type>NRF_POWER_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting the VBUS input detection status. </para>
        </briefdescription>
        <detaileddescription>
<para>USBDETECTED and USBREMOVED events are derived from this information</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>VBUS voltage below valid threshold. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>VBUS voltage above valid threshold.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="group__nrf__power__hal_1ga7e5fad60a4dce6da9602068fd5fd9c28" kindref="member">nrf_power_usbregstatus_get</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_power.h" line="1535" column="24" bodyfile="hal/nrf_power.h" bodystart="1535" bodyend="1538" declfile="hal/nrf_power.h" declline="1011" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__power__hal_1gad6fd5ec05e096da4231aa53d77ba03da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE bool</type>
        <definition>NRF_STATIC_INLINE bool nrf_power_usbregstatus_outrdy_get</definition>
        <argsstring>(NRF_POWER_Type const *p_reg)</argsstring>
        <name>nrf_power_usbregstatus_outrdy_get</name>
        <param>
          <type>NRF_POWER_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting the state of the elapsed time for the USB supply output settling. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>USBREG output settling time not elapsed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>USBREG output settling time elapsed (same information as USBPWRRDY event).</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="group__nrf__power__hal_1ga7e5fad60a4dce6da9602068fd5fd9c28" kindref="member">nrf_power_usbregstatus_get</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_power.h" line="1540" column="24" bodyfile="hal/nrf_power.h" bodystart="1540" bodyend="1543" declfile="hal/nrf_power.h" declline="1024" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__power__hal_1gaaa1f3fb61935c73926fb3cfb83bac042" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE bool</type>
        <definition>NRF_STATIC_INLINE bool nrf_power_abb_busy_check</definition>
        <argsstring>(NRF_POWER_Type const *p_reg, uint8_t domain_idx)</argsstring>
        <name>nrf_power_abb_busy_check</name>
        <param>
          <type>NRF_POWER_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>domain_idx</declname>
        </param>
        <briefdescription>
<para>Function for checking whether the specified ABB domain is busy. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">domain_idx</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of ABB domain.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>The ABB is busy with applying the new operating point. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>The ABB is ready to accept the new operating point. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_power.h" line="1547" column="24" bodyfile="hal/nrf_power.h" bodystart="1547" bodyend="1551" declfile="hal/nrf_power.h" declline="1037" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__power__hal_1ga7992c27e5e710edda444097fd8ef2099" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_power_abb_config_set</definition>
        <argsstring>(NRF_POWER_Type *p_reg, uint8_t domain_idx, nrf_power_abb_config_t const *p_config)</argsstring>
        <name>nrf_power_abb_config_set</name>
        <param>
          <type>NRF_POWER_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>domain_idx</declname>
        </param>
        <param>
          <type><ref refid="structnrf__power__abb__config__t" kindref="compound">nrf_power_abb_config_t</ref> const *</type>
          <declname>p_config</declname>
        </param>
        <briefdescription>
<para>Function for setting configuration of the operating point for the specified ABB domain. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">domain_idx</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of ABB domain. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">p_config</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure with configuration to be set. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_power.h" line="1553" column="24" bodyfile="hal/nrf_power.h" bodystart="1553" bodyend="1567" declfile="hal/nrf_power.h" declline="1046" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__power__hal_1gac98f9ae23cc84e516d248647a7b56e4b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_power_abb_config_get</definition>
        <argsstring>(NRF_POWER_Type const *p_reg, uint8_t domain_idx, nrf_power_abb_config_t *p_config)</argsstring>
        <name>nrf_power_abb_config_get</name>
        <param>
          <type>NRF_POWER_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>domain_idx</declname>
        </param>
        <param>
          <type><ref refid="structnrf__power__abb__config__t" kindref="compound">nrf_power_abb_config_t</ref> *</type>
          <declname>p_config</declname>
        </param>
        <briefdescription>
<para>Function for getting configuration of the operating point for the specified ABB domain. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">domain_idx</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of ABB domain. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">p_config</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure with configuration to be set. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_power.h" line="1569" column="24" bodyfile="hal/nrf_power.h" bodystart="1569" bodyend="1586" declfile="hal/nrf_power.h" declline="1057" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__power__hal_1ga98b1b5ac9785863d7ebc67531f6d8dda" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_power_abb_force_lock_set</definition>
        <argsstring>(NRF_POWER_Type *p_reg, uint8_t domain_idx, bool enable)</argsstring>
        <name>nrf_power_abb_force_lock_set</name>
        <param>
          <type>NRF_POWER_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>domain_idx</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>enable</declname>
        </param>
        <briefdescription>
<para>Function for setting the force lock for the specified ABB domain. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">domain_idx</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of ABB domain. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">enable</parametername>
</parameternamelist>
<parameterdescription>
<para>True if force lock is to be enabled, false otherwise. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_power.h" line="1588" column="24" bodyfile="hal/nrf_power.h" bodystart="1588" bodyend="1596" declfile="hal/nrf_power.h" declline="1068" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__power__hal_1gad2c4e7e6386a510e255b7ac070438c37" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE bool</type>
        <definition>NRF_STATIC_INLINE bool nrf_power_abb_force_lock_check</definition>
        <argsstring>(NRF_POWER_Type const *p_reg, uint8_t domain_idx)</argsstring>
        <name>nrf_power_abb_force_lock_check</name>
        <param>
          <type>NRF_POWER_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>domain_idx</declname>
        </param>
        <briefdescription>
<para>Function for checking if the force lock for the specified ABB domain is enabled. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">domain_idx</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of ABB domain whose status is checked.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>Force lock is enabled. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>Force lock is disabled. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_power.h" line="1598" column="24" bodyfile="hal/nrf_power.h" bodystart="1598" bodyend="1603" declfile="hal/nrf_power.h" declline="1081" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__power__hal_1ga56ade568e3417a77400bbd51d016a402" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_power_vreg_enable</definition>
        <argsstring>(NRF_POWER_Type *p_reg, uint32_t mask)</argsstring>
        <name>nrf_power_vreg_enable</name>
        <param>
          <type>NRF_POWER_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Function for enabling specified voltage regulator. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of voltage regulators to be enabled. Use <ref refid="group__nrf__power__hal_1ga770cecdacf3a854d13aa2d53e1c29bee" kindref="member">nrf_power_vreg_mask_t</ref> values for bit masking. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_power.h" line="1607" column="24" bodyfile="hal/nrf_power.h" bodystart="1607" bodyend="1610" declfile="hal/nrf_power.h" declline="1093" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__power__hal_1gafdd761e3bce5be804bc875f9a275b268" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_power_vreg_disable</definition>
        <argsstring>(NRF_POWER_Type *p_reg, uint32_t mask)</argsstring>
        <name>nrf_power_vreg_disable</name>
        <param>
          <type>NRF_POWER_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Function for disabling specified voltage regulator. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of voltage regulators to be disabled. Use <ref refid="group__nrf__power__hal_1ga770cecdacf3a854d13aa2d53e1c29bee" kindref="member">nrf_power_vreg_mask_t</ref> values for bit masking. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_power.h" line="1612" column="24" bodyfile="hal/nrf_power.h" bodystart="1612" bodyend="1615" declfile="hal/nrf_power.h" declline="1102" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__power__hal_1ga0880cea17453a393c231d0284acd9452" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_power_vreg_enable_check</definition>
        <argsstring>(NRF_POWER_Type const *p_reg, uint32_t mask)</argsstring>
        <name>nrf_power_vreg_enable_check</name>
        <param>
          <type>NRF_POWER_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Function for checking if the specified voltage regulator is enabled. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of voltage regulator to be checked. Use <ref refid="group__nrf__power__hal_1ga770cecdacf3a854d13aa2d53e1c29bee" kindref="member">nrf_power_vreg_mask_t</ref> values for bit masking.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Mask of enabled voltage regulators. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_power.h" line="1617" column="28" bodyfile="hal/nrf_power.h" bodystart="1617" bodyend="1620" declfile="hal/nrf_power.h" declline="1113" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__power__hal_1ga25fdf5a67c48bc521919771381d52979" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_power_ulp_mode_set</definition>
        <argsstring>(NRF_POWER_Type *p_reg, bool enable)</argsstring>
        <name>nrf_power_ulp_mode_set</name>
        <param>
          <type>NRF_POWER_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>enable</declname>
        </param>
        <briefdescription>
<para>Function for setting the Ultra Low Power (ULP) mode. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Going into ULP mode is allowed only if this mode is enabled - otherwise it is blocked. If the ULV mode is blocked, the ULP mode is also blocked.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">enable</parametername>
</parameternamelist>
<parameterdescription>
<para>True if ULP mode is to be enabled, false otherwise. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_power.h" line="1624" column="24" bodyfile="hal/nrf_power.h" bodystart="1624" bodyend="1629" declfile="hal/nrf_power.h" declline="1126" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__power__hal_1gaf710827004768a3a31e57dda8ed2ca2f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE bool</type>
        <definition>NRF_STATIC_INLINE bool nrf_power_ulp_mode_check</definition>
        <argsstring>(NRF_POWER_Type const *p_reg)</argsstring>
        <name>nrf_power_ulp_mode_check</name>
        <param>
          <type>NRF_POWER_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for checking if the ULP mode is enabled. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Going into ULP mode is allowed only if this mode is enabled - otherwise it is blocked. If the ULV mode is blocked, the ULP mode is also blocked.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>ULP mode is enabled. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>ULP mode is disabled. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_power.h" line="1631" column="24" bodyfile="hal/nrf_power.h" bodystart="1631" bodyend="1635" declfile="hal/nrf_power.h" declline="1139" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__power__hal_1ga2a19d58b3104c5ade48f1804f2f89cee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_power_ulv_mode_set</definition>
        <argsstring>(NRF_POWER_Type *p_reg, bool enable)</argsstring>
        <name>nrf_power_ulv_mode_set</name>
        <param>
          <type>NRF_POWER_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>enable</declname>
        </param>
        <briefdescription>
<para>Function for setting the Ultra Low Voltage (ULV) mode. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Going into ULP mode is allowed only if this mode is enabled - otherwise it is blocked. If the ULV mode is blocked, the ULP mode is also blocked.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">enable</parametername>
</parameternamelist>
<parameterdescription>
<para>True if ULV mode is to be enabled, false otherwise. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_power.h" line="1637" column="24" bodyfile="hal/nrf_power.h" bodystart="1637" bodyend="1642" declfile="hal/nrf_power.h" declline="1150" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__power__hal_1ga1673cd7086ce57ced3ad7191d40f0307" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE bool</type>
        <definition>NRF_STATIC_INLINE bool nrf_power_ulv_mode_check</definition>
        <argsstring>(NRF_POWER_Type const *p_reg)</argsstring>
        <name>nrf_power_ulv_mode_check</name>
        <param>
          <type>NRF_POWER_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for checking if the ULV mode is enabled. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Going into ULP mode is allowed only if this mode is enabled - otherwise it is blocked. If the ULV mode is blocked, the ULP mode is also blocked.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>ULV mode is enabled. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>ULV mode is disabled. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_power.h" line="1644" column="24" bodyfile="hal/nrf_power.h" bodystart="1644" bodyend="1648" declfile="hal/nrf_power.h" declline="1163" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__power__hal_1ga2b3c763f09b5552d478919075157c036" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE bool</type>
        <definition>NRF_STATIC_INLINE bool nrf_power_sem_status_get</definition>
        <argsstring>(NRF_POWER_Type const *p_reg)</argsstring>
        <name>nrf_power_sem_status_get</name>
        <param>
          <type>NRF_POWER_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting the POWER semaphore status. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>Semaphore is acquired. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>Semaphore is released. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_power.h" line="1652" column="24" bodyfile="hal/nrf_power.h" bodystart="1652" bodyend="1656" declfile="hal/nrf_power.h" declline="1175" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__power__hal_1ga9366872b258b831ee37bcbdfec023b3e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_power_bils_set</definition>
        <argsstring>(NRF_POWER_Type *p_reg, bool enable)</argsstring>
        <name>nrf_power_bils_set</name>
        <param>
          <type>NRF_POWER_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>enable</declname>
        </param>
        <briefdescription>
<para>Function for setting BILS instances. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">enable</parametername>
</parameternamelist>
<parameterdescription>
<para>True if all configured BILS instances are to be enabled, false otherwise. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_power.h" line="1660" column="24" bodyfile="hal/nrf_power.h" bodystart="1660" bodyend="1665" declfile="hal/nrf_power.h" declline="1185" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__power__hal_1gadfe7f82b5a96d1408c2e9a5e00c53b90" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE bool</type>
        <definition>NRF_STATIC_INLINE bool nrf_power_bils_check</definition>
        <argsstring>(NRF_POWER_Type const *p_reg)</argsstring>
        <name>nrf_power_bils_check</name>
        <param>
          <type>NRF_POWER_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for checking if BILS instances are enabled. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>All configured BILS instances are enabled. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>All BILS instances are disabled. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_power.h" line="1667" column="24" bodyfile="hal/nrf_power.h" bodystart="1667" bodyend="1671" declfile="hal/nrf_power.h" declline="1195" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__power__hal_1ga891d262e69cb4fac63a9758aa36c63c0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_power_pmic_set</definition>
        <argsstring>(NRF_POWER_Type *p_reg, bool enable)</argsstring>
        <name>nrf_power_pmic_set</name>
        <param>
          <type>NRF_POWER_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>enable</declname>
        </param>
        <briefdescription>
<para>Function for setting the PMIC interface. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">enable</parametername>
</parameternamelist>
<parameterdescription>
<para>True if PMIC interface is to be enabled, false otherwise. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_power.h" line="1675" column="24" bodyfile="hal/nrf_power.h" bodystart="1675" bodyend="1680" declfile="hal/nrf_power.h" declline="1205" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__power__hal_1ga20683794648d38a852df13e15f4b0f3c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE bool</type>
        <definition>NRF_STATIC_INLINE bool nrf_power_pmic_check</definition>
        <argsstring>(NRF_POWER_Type const *p_reg)</argsstring>
        <name>nrf_power_pmic_check</name>
        <param>
          <type>NRF_POWER_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for checking if the PMIC interface is enabled. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>PMIC interface is enabled. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>PMIC interface is disabled. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_power.h" line="1682" column="24" bodyfile="hal/nrf_power.h" bodystart="1682" bodyend="1686" declfile="hal/nrf_power.h" declline="1215" declcolumn="24"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2017<sp/>-<sp/>2024,<sp/>Nordic<sp/>Semiconductor<sp/>ASA</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>All<sp/>rights<sp/>reserved.</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>SPDX-License-Identifier:<sp/>BSD-3-Clause</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions<sp/>are<sp/>met:</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>1.<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright<sp/>notice,<sp/>this</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>2.<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the<sp/>distribution.</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/>3.<sp/>Neither<sp/>the<sp/>name<sp/>of<sp/>the<sp/>copyright<sp/>holder<sp/>nor<sp/>the<sp/>names<sp/>of<sp/>its</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>contributors<sp/>may<sp/>be<sp/>used<sp/>to<sp/>endorse<sp/>or<sp/>promote<sp/>products<sp/>derived<sp/>from<sp/>this</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>software<sp/>without<sp/>specific<sp/>prior<sp/>written<sp/>permission.</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>COPYRIGHT<sp/>HOLDERS<sp/>AND<sp/>CONTRIBUTORS<sp/>&quot;AS<sp/>IS&quot;</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/>AND<sp/>ANY<sp/>EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>THE</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*<sp/>ARE<sp/>DISCLAIMED.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>COPYRIGHT<sp/>HOLDER<sp/>OR<sp/>CONTRIBUTORS<sp/>BE</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,<sp/>SPECIAL,<sp/>EXEMPLARY,<sp/>OR</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>PROCUREMENT<sp/>OF</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>*<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,<sp/>DATA,<sp/>OR<sp/>PROFITS;<sp/>OR<sp/>BUSINESS</highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/>*<sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY<sp/>THEORY<sp/>OF<sp/>LIABILITY,<sp/>WHETHER<sp/>IN</highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/>*<sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR<sp/>OTHERWISE)</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/>*<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE<sp/>OF<sp/>THIS<sp/>SOFTWARE,<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/>*<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight></codeline>
<codeline lineno="32"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>NRF_POWER_H__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_POWER_H__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;nrfx.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;nrf_erratas.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="44"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="45"><highlight class="comment"><sp/>*<sp/>@defgroup<sp/>nrf_power_hal<sp/>POWER<sp/>HAL</highlight></codeline>
<codeline lineno="46"><highlight class="comment"><sp/>*<sp/>@{</highlight></codeline>
<codeline lineno="47"><highlight class="comment"><sp/>*<sp/>@ingroup<sp/>nrf_power</highlight></codeline>
<codeline lineno="48"><highlight class="comment"><sp/>*<sp/>@brief<sp/><sp/><sp/>Hardware<sp/>access<sp/>layer<sp/>for<sp/>managing<sp/>the<sp/>POWER<sp/>peripheral.</highlight></codeline>
<codeline lineno="49"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(POWER_TASKS_CONSTLAT_TASKS_CONSTLAT_Msk)<sp/>||<sp/>defined(NRF51)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="52"><highlight class="comment">/**<sp/>@brief<sp/>Symbol<sp/>indicating<sp/>whether<sp/>Constant<sp/>Latency<sp/>mode<sp/>is<sp/>present.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_POWER_HAS_CONST_LATENCY<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_POWER_HAS_CONST_LATENCY<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(POWER_TASKS_LOWPWR_TASKS_LOWPWR_Msk)<sp/>||<sp/>defined(NRF51)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="59"><highlight class="comment">/**<sp/>@brief<sp/>Symbol<sp/>indicating<sp/>whether<sp/>Low-Power<sp/>mode<sp/>is<sp/>present.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_POWER_HAS_LOW_POWER<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_POWER_HAS_LOW_POWER<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(POWER_INTENSET_SLEEPENTER_Msk)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="66"><highlight class="comment">/**<sp/>@brief<sp/>Symbol<sp/>indicating<sp/>whether<sp/>sleep<sp/>events<sp/>are<sp/>present.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_POWER_HAS_SLEEPEVT<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_POWER_HAS_SLEEPEVT<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(POWER_USBREGSTATUS_VBUSDETECT_Msk)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="73"><highlight class="comment">/**<sp/>@brief<sp/>Symbol<sp/>indicating<sp/>whether<sp/>the<sp/>POWER<sp/>peripheral<sp/>controls<sp/>the<sp/>USB<sp/>regulator.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_POWER_HAS_USBREG<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_POWER_HAS_USBREG<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(POWER_DCDCEN0_DCDCEN_Msk)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="80"><highlight class="comment">/**<sp/>@brief<sp/>Symbol<sp/>indicating<sp/>whether<sp/>DCDCEN<sp/>for<sp/>REG0<sp/>is<sp/>present.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_POWER_HAS_DCDCEN_VDDH<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_POWER_HAS_DCDCEN_VDDH<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(POWER_DCDCEN_DCDCEN_Msk)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="87"><highlight class="comment">/**<sp/>@brief<sp/>Symbol<sp/>indicating<sp/>whether<sp/>DCDCEN<sp/>for<sp/>REG1<sp/>is<sp/>present.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_POWER_HAS_DCDCEN<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_POWER_HAS_DCDCEN<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(POWER_INTENSET_POFWARN_Msk)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="94"><highlight class="comment">/**<sp/>@brief<sp/>Symbol<sp/>indicating<sp/>whether<sp/>power<sp/>failure<sp/>event<sp/>is<sp/>present.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_POWER_HAS_POFWARN<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_POWER_HAS_POFWARN<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(POWER_POFCON_THRESHOLD_Msk)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="101"><highlight class="comment">/**<sp/>@brief<sp/>Symbol<sp/>indicating<sp/>whether<sp/>power<sp/>failure<sp/>comparator<sp/>is<sp/>present.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_POWER_HAS_POFCON<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_POWER_HAS_POFCON<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(POWER_POFCON_THRESHOLDVDDH_Msk)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="108"><highlight class="comment">/**<sp/>@brief<sp/>Symbol<sp/>indicating<sp/>whether<sp/>power<sp/>failure<sp/>comparator<sp/>for<sp/>VDDH<sp/>is<sp/>present.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_POWER_HAS_POFCON_VDDH<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_POWER_HAS_POFCON_VDDH<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(POWER_RESETREAS_RESETPIN_Msk)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="115"><highlight class="comment">/**<sp/>@brief<sp/>Symbol<sp/>indicating<sp/>whether<sp/>RESETREAS<sp/>register<sp/>is<sp/>present<sp/>in<sp/>POWER<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_POWER_HAS_RESETREAS<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_POWER_HAS_RESETREAS<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(POWER_RESETREAS_CTRLAP_Msk)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="122"><highlight class="comment">/**<sp/>@brief<sp/>Symbol<sp/>indicating<sp/>whether<sp/>RESETREAS<sp/>CTRLAP<sp/>is<sp/>present.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_POWER_HAS_RESETREAS_CTRLAP<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_POWER_HAS_RESETREAS_CTRLAP<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(POWER_RESETREAS_LPCOMP_Msk)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="129"><highlight class="comment">/**<sp/>@brief<sp/>Symbol<sp/>indicating<sp/>whether<sp/>RESETREAS<sp/>LPCOMP<sp/>is<sp/>present.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_POWER_HAS_RESETREAS_LPCOMP<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_POWER_HAS_RESETREAS_LPCOMP<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(POWER_RESETREAS_NFC_Msk)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="136"><highlight class="comment">/**<sp/>@brief<sp/>Symbol<sp/>indicating<sp/>whether<sp/>RESETREAS<sp/>NFC<sp/>is<sp/>present.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_POWER_HAS_RESETREAS_NFC<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_POWER_HAS_RESETREAS_NFC<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(POWER_RESETREAS_VBUS_Msk)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="143"><highlight class="comment">/**<sp/>@brief<sp/>Symbol<sp/>indicating<sp/>whether<sp/>RESETREAS<sp/>VBUS<sp/>is<sp/>present.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_POWER_HAS_RESETREAS_VBUS<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_POWER_HAS_RESETREAS_VBUS<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(POWER_MAINREGSTATUS_MAINREGSTATUS_Msk)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="150"><highlight class="comment">/**<sp/>@brief<sp/>Symbol<sp/>indicating<sp/>whether<sp/>MAINREGSTATUS<sp/>register<sp/>is<sp/>present.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_POWER_HAS_MAINREGSTATUS<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_POWER_HAS_MAINREGSTATUS<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(POWER_GPREGRET_GPREGRET_Msk)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="157"><highlight class="comment">/**<sp/>@brief<sp/>Symbol<sp/>indicating<sp/>whether<sp/>GPREGRET<sp/>register<sp/>is<sp/>present.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_POWER_HAS_GPREGRET<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_POWER_HAS_GPREGRET<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(!defined(POWER_GPREGRET2_GPREGRET_Msk)<sp/>&amp;&amp;<sp/>!defined(NRF51))<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="164"><highlight class="comment">/**<sp/>@brief<sp/>Symbol<sp/>indicating<sp/>whether<sp/>GPREGRET<sp/>register<sp/>is<sp/>treated<sp/>as<sp/>an<sp/>array.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_POWER_HAS_GPREGRET_ARRAY<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_POWER_HAS_GPREGRET_ARRAY<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_POWER_HAS_GPREGRET_ARRAY<sp/>&amp;&amp;<sp/>defined(POWER_GPREGRET_MaxCount)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="171"><highlight class="comment">/**<sp/>@brief<sp/>Size<sp/>of<sp/>GPREGRET<sp/>register<sp/>when<sp/>defined<sp/>as<sp/>array.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRFX_POWER_GPREGRET_COUNT<sp/>POWER_GPREGRET_MaxCount</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>NRF_POWER_HAS_GPREGRET_ARRAY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRFX_POWER_GPREGRET_COUNT<sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(POWER_TASKS_SEMAPHORE_ACQUIRE_ACQUIRE_Msk)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="178"><highlight class="comment">/**<sp/>@brief<sp/>Symbol<sp/>indicating<sp/>whether<sp/>semaphore<sp/>for<sp/>regulator<sp/>voltage<sp/>scaling<sp/>procedure<sp/>is<sp/>present.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_POWER_HAS_SEMAPHORE<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_POWER_HAS_SEMAPHORE<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(defined(POWER_TASKS_REGUPDATE_TASKS_REGUPDATE_Msk)<sp/>&amp;&amp;<sp/>\</highlight></codeline>
<codeline lineno="185"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>defined(POWER_EVENTS_REGUPDATED_EVENTS_REGUPDATED_Msk))<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="186"><highlight class="comment">/**<sp/>@brief<sp/>Symbol<sp/>indicating<sp/>whether<sp/>task<sp/>and<sp/>event<sp/>responsible<sp/>for<sp/>updating<sp/>voltage<sp/>regulators<sp/>configuration<sp/>are<sp/>present.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_POWER_HAS_VREG_UPDATE_TASK_EVENT<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_POWER_HAS_VREG_UPDATE_TASK_EVENT<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(POWER_REGCONFIG_VREG1V8_Msk)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="193"><highlight class="comment">/**<sp/>@brief<sp/>Symbol<sp/>indicating<sp/>whether<sp/>voltage<sp/>regulators<sp/>are<sp/>configurable.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_POWER_HAS_VREG_CONFIG<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_POWER_HAS_VREG_CONFIG<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(POWER_EVENTS_ABBLOCK_EVENTS_ABBLOCK_Msk)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="200"><highlight class="comment">/**<sp/>@brief<sp/>Symbol<sp/>indicating<sp/>whether<sp/>the<sp/>Adaptive<sp/>Body<sp/>Biasing<sp/>(ABB)<sp/>domains<sp/>are<sp/>present.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_POWER_HAS_ABB<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_POWER_HAS_ABB<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(POWER_BLOCKULPMODE_BLOCK_Msk)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="207"><highlight class="comment">/**<sp/>@brief<sp/>Symbol<sp/>indicating<sp/>whether<sp/>the<sp/>power<sp/>block<sp/>modes<sp/>are<sp/>present.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_POWER_HAS_BLOCK_MODES<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_POWER_HAS_BLOCK_MODES<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(POWER_BILSENABLE_ENABLE_Msk)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="214"><highlight class="comment">/**<sp/>@brief<sp/>Symbol<sp/>indicating<sp/>whether<sp/>the<sp/>Built-in<sp/>Leakage<sp/>Sensors<sp/>(BILS)<sp/>are<sp/>present.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_POWER_HAS_BILS<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_POWER_HAS_BILS<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(POWER_PMICENABLE_ENABLE_Msk)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="221"><highlight class="comment">/**<sp/>@brief<sp/>Symbol<sp/>indicating<sp/>whether<sp/>the<sp/>Power<sp/>Management<sp/>IC<sp/>(PMIC)<sp/>is<sp/>present.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_POWER_HAS_PMIC<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_POWER_HAS_PMIC<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_POWER_HAS_ABB</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="228"><highlight class="comment">/**<sp/>@brief<sp/>Symbol<sp/>specifying<sp/>the<sp/>maximum<sp/>number<sp/>of<sp/>available<sp/>@p<sp/>ABB_LOCK<sp/>events.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_POWER_EVENTS_ABB_LOCK_COUNT<sp/>POWER_EVENTS_ABBLOCK_MaxCount</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="232"><highlight class="comment">/**<sp/>@brief<sp/>POWER<sp/>tasks.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal">{</highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_POWER_HAS_CONST_LATENCY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__power__hal_1gga6452fff919765c34921624d3e73eb650a062b62dabcbfb45746e9830a70b6b83a" kindref="member">NRF_POWER_TASK_CONSTLAT</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_POWER_Type,<sp/>TASKS_CONSTLAT),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Enable<sp/>constant<sp/>latency<sp/>mode.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_POWER_HAS_LOW_POWER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__power__hal_1gga6452fff919765c34921624d3e73eb650a540df20769f7db1e8afd7792e4d7f141" kindref="member">NRF_POWER_TASK_LOWPWR</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_POWER_Type,<sp/>TASKS_LOWPWR),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Enable<sp/>low-power<sp/>mode<sp/>(variable<sp/>latency).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_POWER_HAS_SEMAPHORE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__power__hal_1gga6452fff919765c34921624d3e73eb650a800275d1dc85fdd95f61ee2e6f2da206" kindref="member">NRF_POWER_TASK_SEMAPHORE_ACQUIRE</ref><sp/>=<sp/>offsetof(NRF_POWER_Type,<sp/>TASKS_SEMAPHORE.ACQUIRE),<sp/></highlight><highlight class="comment">///&lt;<sp/>Acquire<sp/>the<sp/>semaphore<sp/>for<sp/>regulator<sp/>voltage<sp/>scaling<sp/>procedure.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__power__hal_1gga6452fff919765c34921624d3e73eb650ace1261739a5b058bc9388b031eb63a63" kindref="member">NRF_POWER_TASK_SEMAPHORE_RELEASE</ref><sp/>=<sp/>offsetof(NRF_POWER_Type,<sp/>TASKS_SEMAPHORE.RELEASE),<sp/></highlight><highlight class="comment">///&lt;<sp/>Release<sp/>the<sp/>semaphore<sp/>for<sp/>regulator<sp/>voltage<sp/>scaling<sp/>procedure.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_POWER_HAS_VREG_UPDATE_TASK_EVENT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__power__hal_1gga6452fff919765c34921624d3e73eb650a2b29ab3fd70cf71adb8f47f1385b0f06" kindref="member">NRF_POWER_TASK_REGULATOR_UPDATE</ref><sp/><sp/>=<sp/>offsetof(NRF_POWER_Type,<sp/>TASKS_REGUPDATE),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Update<sp/>the<sp/>regulator<sp/>configuration.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal">}<sp/><ref refid="group__nrf__power__hal_1ga6452fff919765c34921624d3e73eb650" kindref="member">nrf_power_task_t</ref>;</highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="250"><highlight class="comment">/**<sp/>@brief<sp/>POWER<sp/>events.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal">{</highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_POWER_HAS_POFWARN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__power__hal_1gga64bec8dee5aca9c1cd233b251da21ab4ac6ea1490a7ac382f2caf0f12060258a9" kindref="member">NRF_POWER_EVENT_POFWARN</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_POWER_Type,<sp/>EVENTS_POFWARN),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Power<sp/>failure<sp/>warning.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_POWER_HAS_SLEEPEVT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__power__hal_1gga64bec8dee5aca9c1cd233b251da21ab4a288d0c0b2c57d50c5783c2b8a9532db5" kindref="member">NRF_POWER_EVENT_SLEEPENTER</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_POWER_Type,<sp/>EVENTS_SLEEPENTER),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>CPU<sp/>entered<sp/>WFI/WFE<sp/>sleep<sp/>mode.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__power__hal_1gga64bec8dee5aca9c1cd233b251da21ab4a6aa5ab7fd5b034d2860a19dece927422" kindref="member">NRF_POWER_EVENT_SLEEPEXIT</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_POWER_Type,<sp/>EVENTS_SLEEPEXIT),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>CPU<sp/>exited<sp/>WFI/WFE<sp/>sleep<sp/>mode.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_POWER_HAS_USBREG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__power__hal_1gga64bec8dee5aca9c1cd233b251da21ab4abc91dc94f7acf392347ada35592d47d0" kindref="member">NRF_POWER_EVENT_USBDETECTED</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_POWER_Type,<sp/>EVENTS_USBDETECTED),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Voltage<sp/>supply<sp/>detected<sp/>on<sp/>VBUS.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__power__hal_1gga64bec8dee5aca9c1cd233b251da21ab4a539ed9f98231b4adc01816c711aef3c7" kindref="member">NRF_POWER_EVENT_USBREMOVED</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_POWER_Type,<sp/>EVENTS_USBREMOVED),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Voltage<sp/>supply<sp/>removed<sp/>from<sp/>VBUS.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__power__hal_1gga64bec8dee5aca9c1cd233b251da21ab4a47d7cba1a39dda183bdfa7e38fad6fb1" kindref="member">NRF_POWER_EVENT_USBPWRRDY</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_POWER_Type,<sp/>EVENTS_USBPWRRDY),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>USB<sp/>3.3<sp/>V<sp/>supply<sp/>ready.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_POWER_HAS_SEMAPHORE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__power__hal_1gga64bec8dee5aca9c1cd233b251da21ab4adbdbfbab81a1e6a126b65900993a9688" kindref="member">NRF_POWER_EVENT_SEMAPHORE_ACQUIRED</ref><sp/>=<sp/>offsetof(NRF_POWER_Type,<sp/>EVENTS_SEMAPHORE.ACQUIRED),<sp/></highlight><highlight class="comment">///&lt;<sp/>Acquired<sp/>the<sp/>semaphore<sp/>for<sp/>regulator<sp/>voltage<sp/>scaling<sp/>procedure.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__power__hal_1gga64bec8dee5aca9c1cd233b251da21ab4a21638cfc653af6990d8daf191e816c74" kindref="member">NRF_POWER_EVENT_SEMAPHORE_RELEASED</ref><sp/>=<sp/>offsetof(NRF_POWER_Type,<sp/>EVENTS_SEMAPHORE.RELEASED),<sp/></highlight><highlight class="comment">///&lt;<sp/>Released<sp/>the<sp/>semaphore<sp/>for<sp/>regulator<sp/>voltage<sp/>scaling<sp/>procedure.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_POWER_HAS_VREG_UPDATE_TASK_EVENT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__power__hal_1gga64bec8dee5aca9c1cd233b251da21ab4ad9a788bc7fb97f7676bf1766ae87c8b0" kindref="member">NRF_POWER_EVENT_REGULATOR_UPDATED</ref><sp/><sp/>=<sp/>offsetof(NRF_POWER_Type,<sp/>EVENTS_REGUPDATED),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Updated<sp/>the<sp/>regulator<sp/>configuration.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_POWER_HAS_ABB</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__power__hal_1gga64bec8dee5aca9c1cd233b251da21ab4afd6de432ab388de78370cc6abf4b73bc" kindref="member">NRF_POWER_EVENT_ABB_LOCK_0</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_POWER_Type,<sp/>EVENTS_ABBLOCK[0]),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>ABB<sp/>lock<sp/>for<sp/>the<sp/>ABB<sp/>domain<sp/>0.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__power__hal_1gga64bec8dee5aca9c1cd233b251da21ab4ad548d560388c34031d766a4e4f5e868d" kindref="member">NRF_POWER_EVENT_ABB_LOCK_1</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_POWER_Type,<sp/>EVENTS_ABBLOCK[1]),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>ABB<sp/>lock<sp/>for<sp/>the<sp/>ABB<sp/>domain<sp/>1.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal">}<sp/><ref refid="group__nrf__power__hal_1ga64bec8dee5aca9c1cd233b251da21ab4" kindref="member">nrf_power_event_t</ref>;</highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="278"><highlight class="comment">/**<sp/>@brief<sp/>POWER<sp/>interrupts.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal">{</highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_POWER_HAS_POFWARN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__power__hal_1gga92ca4cddecad24911ab7c8be411ced69abf3bfe5d950be312aa854513a18aeabd" kindref="member">NRF_POWER_INT_POFWARN_MASK</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>POWER_INTENSET_POFWARN_Msk,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Write<sp/>&apos;1&apos;<sp/>to<sp/>enable<sp/>interrupt<sp/>for<sp/>POFWARN<sp/>event.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_POWER_HAS_SLEEPEVT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__power__hal_1gga92ca4cddecad24911ab7c8be411ced69a3e2677809ae7bf10daa820030f2cc442" kindref="member">NRF_POWER_INT_SLEEPENTER_MASK</ref><sp/><sp/><sp/><sp/>=<sp/>POWER_INTENSET_SLEEPENTER_Msk,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Write<sp/>&apos;1&apos;<sp/>to<sp/>enable<sp/>interrupt<sp/>for<sp/>SLEEPENTER<sp/>event.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__power__hal_1gga92ca4cddecad24911ab7c8be411ced69a37f88f7f49dbc11ab2881aec913f826c" kindref="member">NRF_POWER_INT_SLEEPEXIT_MASK</ref><sp/><sp/><sp/><sp/><sp/>=<sp/>POWER_INTENSET_SLEEPEXIT_Msk,<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Write<sp/>&apos;1&apos;<sp/>to<sp/>enable<sp/>interrupt<sp/>for<sp/>SLEEPEXIT<sp/>event.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_POWER_HAS_USBREG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__power__hal_1gga92ca4cddecad24911ab7c8be411ced69a458c1b4030e7743c0818bbd5385d18f4" kindref="member">NRF_POWER_INT_USBDETECTED_MASK</ref><sp/><sp/><sp/>=<sp/>POWER_INTENSET_USBDETECTED_Msk,<sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Write<sp/>&apos;1&apos;<sp/>to<sp/>enable<sp/>interrupt<sp/>for<sp/>USBDETECTED<sp/>event.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__power__hal_1gga92ca4cddecad24911ab7c8be411ced69a99797b92f3db56e84797af2653748849" kindref="member">NRF_POWER_INT_USBREMOVED_MASK</ref><sp/><sp/><sp/><sp/>=<sp/>POWER_INTENSET_USBREMOVED_Msk,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Write<sp/>&apos;1&apos;<sp/>to<sp/>enable<sp/>interrupt<sp/>for<sp/>USBREMOVED<sp/>event.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__power__hal_1gga92ca4cddecad24911ab7c8be411ced69ab9a098b3bde8361843b0adecf8297706" kindref="member">NRF_POWER_INT_USBPWRRDY_MASK</ref><sp/><sp/><sp/><sp/><sp/>=<sp/>POWER_INTENSET_USBPWRRDY_Msk,<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Write<sp/>&apos;1&apos;<sp/>to<sp/>enable<sp/>interrupt<sp/>for<sp/>USBPWRRDY<sp/>event.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_POWER_HAS_SEMAPHORE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__power__hal_1gga92ca4cddecad24911ab7c8be411ced69ab7cba048407f08c5ae0b4b5733500d1e" kindref="member">NRF_POWER_INT_SEMAPHORE_ACQUIRED</ref><sp/>=<sp/>POWER_INTEN_SEMAPHOREACQUIRED_Msk,<sp/></highlight><highlight class="comment">///&lt;<sp/>Write<sp/>&apos;1&apos;<sp/>to<sp/>enable<sp/>interrupt<sp/>for<sp/>SEMAPHORE_ACQUIRED<sp/>event.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__power__hal_1gga92ca4cddecad24911ab7c8be411ced69a00cf19f13fedf80804d8d4ddc94e5b59" kindref="member">NRF_POWER_INT_SEMAPHORE_RELEASED</ref><sp/>=<sp/>POWER_INTEN_SEMAPHORERELEASED_Msk,<sp/></highlight><highlight class="comment">///&lt;<sp/>Write<sp/>&apos;1&apos;<sp/>to<sp/>enable<sp/>interrupt<sp/>for<sp/>SEMAPHORE_RELEASED<sp/>event.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_POWER_HAS_VREG_UPDATE_TASK_EVENT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__power__hal_1gga92ca4cddecad24911ab7c8be411ced69af3edb402cb486b11bc0886b2f47c041b" kindref="member">NRF_POWER_INT_REGULATOR_UPDATED</ref><sp/><sp/>=<sp/>POWER_INTEN_REGUPDATED_Msk,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Write<sp/>&apos;1&apos;<sp/>to<sp/>enable<sp/>interrupt<sp/>for<sp/>REGULATOR_UPDATED<sp/>event.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_POWER_HAS_ABB</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__power__hal_1gga92ca4cddecad24911ab7c8be411ced69aaa186e05343b95e0f8c22cfc1dc9f1b8" kindref="member">NRF_POWER_INT_ABB_LOCK_0</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>POWER_INTEN_ABBLOCK0_Msk,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Write<sp/>&apos;1&apos;<sp/>to<sp/>enable<sp/>interrupt<sp/>for<sp/>ABB_LOCK_0<sp/>event.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__power__hal_1gga92ca4cddecad24911ab7c8be411ced69a05945f71b8da1253191d5faceca1cc63" kindref="member">NRF_POWER_INT_ABB_LOCK_1</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>POWER_INTEN_ABBLOCK1_Msk,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Write<sp/>&apos;1&apos;<sp/>to<sp/>enable<sp/>interrupt<sp/>for<sp/>ABB_LOCK_1<sp/>event.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal">}<sp/><ref refid="group__nrf__power__hal_1ga92ca4cddecad24911ab7c8be411ced69" kindref="member">nrf_power_int_mask_t</ref>;</highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="306"><highlight class="comment">/**<sp/>@brief<sp/>Reset<sp/>reason.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_POWER_HAS_RESETREAS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal">{</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__power__hal_1gga3febba1780ce498df7e0f03ac2b7c30ba0c011b629cdd2402f51ccfbddc9a6d14" kindref="member">NRF_POWER_RESETREAS_RESETPIN_MASK</ref><sp/>=<sp/>POWER_RESETREAS_RESETPIN_Msk,<sp/></highlight><highlight class="comment">/**&lt;<sp/>Bit<sp/>mask<sp/>of<sp/>RESETPIN<sp/>field.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__power__hal_1gga3febba1780ce498df7e0f03ac2b7c30bab9b34a328e8ced38d6e04fe39acae295" kindref="member">NRF_POWER_RESETREAS_DOG_MASK</ref><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>POWER_RESETREAS_DOG_Msk<sp/><sp/><sp/><sp/><sp/>,<sp/></highlight><highlight class="comment">/**&lt;<sp/>Bit<sp/>mask<sp/>of<sp/>DOG<sp/>field.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__power__hal_1gga3febba1780ce498df7e0f03ac2b7c30ba649469b18203dc461e7153a0ef33bf71" kindref="member">NRF_POWER_RESETREAS_SREQ_MASK</ref><sp/><sp/><sp/><sp/><sp/>=<sp/>POWER_RESETREAS_SREQ_Msk<sp/><sp/><sp/><sp/>,<sp/></highlight><highlight class="comment">/**&lt;<sp/>Bit<sp/>mask<sp/>of<sp/>SREQ<sp/>field.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__power__hal_1gga3febba1780ce498df7e0f03ac2b7c30bab3f481364015c004fe0facc63b0b058e" kindref="member">NRF_POWER_RESETREAS_LOCKUP_MASK</ref><sp/><sp/><sp/>=<sp/>POWER_RESETREAS_LOCKUP_Msk<sp/><sp/>,<sp/></highlight><highlight class="comment">/**&lt;<sp/>Bit<sp/>mask<sp/>of<sp/>LOCKUP<sp/>field.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__power__hal_1gga3febba1780ce498df7e0f03ac2b7c30ba5c46ebb1f07e9f6257c1bc152b1c622e" kindref="member">NRF_POWER_RESETREAS_OFF_MASK</ref><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>POWER_RESETREAS_OFF_Msk<sp/><sp/><sp/><sp/><sp/>,<sp/></highlight><highlight class="comment">/**&lt;<sp/>Bit<sp/>mask<sp/>of<sp/>OFF<sp/>field.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_POWER_HAS_RESETREAS_LPCOMP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__power__hal_1gga3febba1780ce498df7e0f03ac2b7c30ba63a5e9b614f06eb8a3462a4fe3ec06e4" kindref="member">NRF_POWER_RESETREAS_LPCOMP_MASK</ref><sp/><sp/><sp/>=<sp/>POWER_RESETREAS_LPCOMP_Msk<sp/><sp/>,<sp/></highlight><highlight class="comment">/**&lt;<sp/>Bit<sp/>mask<sp/>of<sp/>LPCOMP<sp/>field.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__power__hal_1gga3febba1780ce498df7e0f03ac2b7c30bae4228ae63436d9069eb4c55895e4ed65" kindref="member">NRF_POWER_RESETREAS_DIF_MASK</ref><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>POWER_RESETREAS_DIF_Msk<sp/><sp/><sp/><sp/><sp/>,<sp/></highlight><highlight class="comment">/**&lt;<sp/>Bit<sp/>mask<sp/>of<sp/>DIF<sp/>field.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_POWER_HAS_RESETREAS_NFC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__power__hal_1gga3febba1780ce498df7e0f03ac2b7c30bab7bbe8e6c82cd042c384b66b3f249898" kindref="member">NRF_POWER_RESETREAS_NFC_MASK</ref><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>POWER_RESETREAS_NFC_Msk<sp/><sp/><sp/><sp/><sp/>,<sp/></highlight><highlight class="comment">/**&lt;<sp/>Bit<sp/>mask<sp/>of<sp/>NFC<sp/>field.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_POWER_HAS_RESETREAS_VBUS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__power__hal_1gga3febba1780ce498df7e0f03ac2b7c30bae6a771f904bdbc5e866b0b8daa8ec36a" kindref="member">NRF_POWER_RESETREAS_VBUS_MASK</ref><sp/><sp/><sp/><sp/><sp/>=<sp/>POWER_RESETREAS_VBUS_Msk<sp/><sp/><sp/><sp/>,<sp/></highlight><highlight class="comment">/**&lt;<sp/>Bit<sp/>mask<sp/>of<sp/>VBUS<sp/>field.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_POWER_HAS_RESETREAS_CTRLAP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__power__hal_1gga3febba1780ce498df7e0f03ac2b7c30baf66181df2fefaf89ef84c72cddd05911" kindref="member">NRF_POWER_RESETREAS_CTRLAP_MASK</ref><sp/><sp/><sp/>=<sp/>POWER_RESETREAS_CTRLAP_Msk<sp/><sp/>,<sp/></highlight><highlight class="comment">/**&lt;<sp/>Bit<sp/>mask<sp/>of<sp/>CTRLAP<sp/>field.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal">}<sp/><ref refid="group__nrf__power__hal_1ga3febba1780ce498df7e0f03ac2b7c30b" kindref="member">nrf_power_resetreas_mask_t</ref>;</highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRF_POWER_HAS_RESETREAS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_POWER_HAS_USBREG</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="332"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="333"><highlight class="comment"><sp/>*<sp/>@brief<sp/>USBREGSTATUS<sp/>register<sp/>bit<sp/>masks</highlight></codeline>
<codeline lineno="334"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="335"><highlight class="comment"><sp/>*<sp/>@sa<sp/>nrf_power_usbregstatus_get</highlight></codeline>
<codeline lineno="336"><highlight class="comment"><sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal">{</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__power__hal_1gga85664e3b3bd3a99f8c8ef1fdbb1e2496afd9eddec83b650949f6e68e9419cf244" kindref="member">NRF_POWER_USBREGSTATUS_VBUSDETECT_MASK</ref><sp/>=<sp/>POWER_USBREGSTATUS_VBUSDETECT_Msk,<sp/></highlight><highlight class="comment">///&lt;<sp/>USB<sp/>detected<sp/>or<sp/>removed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__power__hal_1gga85664e3b3bd3a99f8c8ef1fdbb1e2496a876fbf69774a0135f3b9a79897f7b7fd" kindref="member">NRF_POWER_USBREGSTATUS_OUTPUTRDY_MASK</ref><sp/><sp/>=<sp/>POWER_USBREGSTATUS_OUTPUTRDY_Msk<sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>USB<sp/>3.3<sp/>V<sp/>supply<sp/>ready.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal">}<sp/><ref refid="group__nrf__power__hal_1ga85664e3b3bd3a99f8c8ef1fdbb1e2496" kindref="member">nrf_power_usbregstatus_mask_t</ref>;</highlight></codeline>
<codeline lineno="342"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRF_POWER_HAS_USBREG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(POWER_RAMSTATUS_RAMBLOCK0_Msk)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="345"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="346"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Numbers<sp/>of<sp/>RAM<sp/>blocks</highlight></codeline>
<codeline lineno="347"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="348"><highlight class="comment"><sp/>*<sp/>@sa<sp/>nrf_power_ramblock_mask_t</highlight></codeline>
<codeline lineno="349"><highlight class="comment"><sp/>*<sp/>@note</highlight></codeline>
<codeline lineno="350"><highlight class="comment"><sp/>*<sp/>RAM<sp/>blocks<sp/>must<sp/>be<sp/>used<sp/>in<sp/>nRF51.</highlight></codeline>
<codeline lineno="351"><highlight class="comment"><sp/>*<sp/>In<sp/>newer<sp/>SoCs,<sp/>RAM<sp/>is<sp/>divided<sp/>into<sp/>segments<sp/>and<sp/>this<sp/>functionality<sp/>is<sp/>not<sp/>supported.</highlight></codeline>
<codeline lineno="352"><highlight class="comment"><sp/>*<sp/>See<sp/>the<sp/>PS<sp/>for<sp/>mapping<sp/>between<sp/>the<sp/>internal<sp/>RAM<sp/>and<sp/>RAM<sp/>blocks,<sp/>because<sp/>this</highlight></codeline>
<codeline lineno="353"><highlight class="comment"><sp/>*<sp/>mapping<sp/>is<sp/>not<sp/>1:1,<sp/>and<sp/>functions<sp/>related<sp/>to<sp/>old<sp/>style<sp/>blocks<sp/>must<sp/>not<sp/>be<sp/>used.</highlight></codeline>
<codeline lineno="354"><highlight class="comment"><sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal">{</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/>NRF_POWER_RAMBLOCK0<sp/>=<sp/>POWER_RAMSTATUS_RAMBLOCK0_Pos,</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/>NRF_POWER_RAMBLOCK1<sp/>=<sp/>POWER_RAMSTATUS_RAMBLOCK1_Pos,</highlight></codeline>
<codeline lineno="359"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(POWER_RAMSTATUS_RAMBLOCK2_Pos)<sp/>||<sp/><sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/>NRF_POWER_RAMBLOCK2<sp/>=<sp/>POWER_RAMSTATUS_RAMBLOCK2_Pos,</highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(POWER_RAMSTATUS_RAMBLOCK3_Pos)<sp/>||<sp/><sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/>NRF_POWER_RAMBLOCK3<sp/>=<sp/>POWER_RAMSTATUS_RAMBLOCK3_Pos</highlight></codeline>
<codeline lineno="364"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal">}<sp/><ref refid="group__nrf__power__hal_1gaaf5443f9755d50c1e2d07a51990ba665" kindref="member">nrf_power_ramblock_t</ref>;</highlight></codeline>
<codeline lineno="366"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="367"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="368"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Masks<sp/>of<sp/>RAM<sp/>blocks.</highlight></codeline>
<codeline lineno="369"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="370"><highlight class="comment"><sp/>*<sp/>@sa<sp/>nrf_power_ramblock_t</highlight></codeline>
<codeline lineno="371"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal">{</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/>NRF_POWER_RAMBLOCK0_MASK<sp/>=<sp/>POWER_RAMSTATUS_RAMBLOCK0_Msk,</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/>NRF_POWER_RAMBLOCK1_MASK<sp/>=<sp/>POWER_RAMSTATUS_RAMBLOCK1_Msk,</highlight></codeline>
<codeline lineno="376"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(POWER_RAMSTATUS_RAMBLOCK2_Msk)<sp/>||<sp/><sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/>NRF_POWER_RAMBLOCK2_MASK<sp/>=<sp/>POWER_RAMSTATUS_RAMBLOCK2_Msk,</highlight></codeline>
<codeline lineno="378"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(POWER_RAMSTATUS_RAMBLOCK3_Msk)<sp/>||<sp/><sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/>NRF_POWER_RAMBLOCK3_MASK<sp/>=<sp/>POWER_RAMSTATUS_RAMBLOCK3_Msk</highlight></codeline>
<codeline lineno="381"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal">}<sp/><ref refid="group__nrf__power__hal_1ga0e1c55ee096228d2e71662a099cb61c4" kindref="member">nrf_power_ramblock_mask_t</ref>;</highlight></codeline>
<codeline lineno="383"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>defined(POWER_RAMSTATUS_RAMBLOCK0_Msk)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="385"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="386"><highlight class="comment"><sp/>*<sp/>@brief<sp/>RAM<sp/>power<sp/>state<sp/>position<sp/>of<sp/>the<sp/>bits</highlight></codeline>
<codeline lineno="387"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="388"><highlight class="comment"><sp/>*<sp/>@sa<sp/>nrf_power_onoffram_mask_t</highlight></codeline>
<codeline lineno="389"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal">{</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__power__hal_1gga79872e2ebbcedf5ca759ef232c797157ae24d7fe63dfb6c1816b2ca3c763b7451" kindref="member">NRF_POWER_ONRAM0</ref>,<sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Keep<sp/>RAM<sp/>block<sp/>0<sp/>ON<sp/>or<sp/>OFF<sp/>in<sp/>System<sp/>ON<sp/>mode.<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__power__hal_1gga79872e2ebbcedf5ca759ef232c797157a3ba15e28f0e63be320d2d5ca1268609a" kindref="member">NRF_POWER_OFFRAM0</ref>,<sp/></highlight><highlight class="comment">/**&lt;<sp/>Keep<sp/>retention<sp/>on<sp/>RAM<sp/>block<sp/>0<sp/>when<sp/>RAM<sp/>block<sp/>is<sp/>switched<sp/>OFF.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__power__hal_1gga79872e2ebbcedf5ca759ef232c797157a662451909ea9b79b063c310fd59f8d1b" kindref="member">NRF_POWER_ONRAM1</ref>,<sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Keep<sp/>RAM<sp/>block<sp/>1<sp/>ON<sp/>or<sp/>OFF<sp/>in<sp/>System<sp/>ON<sp/>mode.<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__power__hal_1gga79872e2ebbcedf5ca759ef232c797157ad8ec70b345f01d11d77a87977bdc1824" kindref="member">NRF_POWER_OFFRAM1</ref>,<sp/></highlight><highlight class="comment">/**&lt;<sp/>Keep<sp/>retention<sp/>on<sp/>RAM<sp/>block<sp/>1<sp/>when<sp/>RAM<sp/>block<sp/>is<sp/>switched<sp/>OFF.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__power__hal_1gga79872e2ebbcedf5ca759ef232c797157a3ff3329bc8a7c39d897f796011695126" kindref="member">NRF_POWER_ONRAM2</ref>,<sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Keep<sp/>RAM<sp/>block<sp/>2<sp/>ON<sp/>or<sp/>OFF<sp/>in<sp/>System<sp/>ON<sp/>mode.<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__power__hal_1gga79872e2ebbcedf5ca759ef232c797157a15bb7629e501dbcf0b691117bc893d41" kindref="member">NRF_POWER_OFFRAM2</ref>,<sp/></highlight><highlight class="comment">/**&lt;<sp/>Keep<sp/>retention<sp/>on<sp/>RAM<sp/>block<sp/>2<sp/>when<sp/>RAM<sp/>block<sp/>is<sp/>switched<sp/>OFF.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__power__hal_1gga79872e2ebbcedf5ca759ef232c797157afd83ec10ce9e56363b29e9deb88441e3" kindref="member">NRF_POWER_ONRAM3</ref>,<sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Keep<sp/>RAM<sp/>block<sp/>3<sp/>ON<sp/>or<sp/>OFF<sp/>in<sp/>System<sp/>ON<sp/>mode.<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__power__hal_1gga79872e2ebbcedf5ca759ef232c797157ae47bcf8105e1db8991fb5996e06e8ca5" kindref="member">NRF_POWER_OFFRAM3</ref>,<sp/></highlight><highlight class="comment">/**&lt;<sp/>Keep<sp/>retention<sp/>on<sp/>RAM<sp/>block<sp/>3<sp/>when<sp/>RAM<sp/>block<sp/>is<sp/>switched<sp/>OFF.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal">}<ref refid="group__nrf__power__hal_1ga79872e2ebbcedf5ca759ef232c797157" kindref="member">nrf_power_onoffram_t</ref>;</highlight></codeline>
<codeline lineno="401"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="402"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="403"><highlight class="comment"><sp/>*<sp/>@brief<sp/>RAM<sp/>power<sp/>state<sp/>bit<sp/>masks</highlight></codeline>
<codeline lineno="404"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="405"><highlight class="comment"><sp/>*<sp/>@sa<sp/>nrf_power_onoffram_t</highlight></codeline>
<codeline lineno="406"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="408"><highlight class="normal">{</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__power__hal_1ggac71371d7bb39ba729cb7ed9dfbfe0e49abc2b6e2fe11e81ffec3ed2b5e83200cc" kindref="member">NRF_POWER_ONRAM0_MASK</ref><sp/><sp/>=<sp/>1U<sp/>&lt;&lt;<sp/><ref refid="group__nrf__power__hal_1gga79872e2ebbcedf5ca759ef232c797157ae24d7fe63dfb6c1816b2ca3c763b7451" kindref="member">NRF_POWER_ONRAM0</ref>,<sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Keep<sp/>RAM<sp/>block<sp/>0<sp/>ON<sp/>or<sp/>OFF<sp/>in<sp/>System<sp/>ON<sp/>mode.<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__power__hal_1ggac71371d7bb39ba729cb7ed9dfbfe0e49ac0a57e493dcb64e19ccb6bf4f51f597a" kindref="member">NRF_POWER_OFFRAM0_MASK</ref><sp/>=<sp/>1U<sp/>&lt;&lt;<sp/><ref refid="group__nrf__power__hal_1gga79872e2ebbcedf5ca759ef232c797157a3ba15e28f0e63be320d2d5ca1268609a" kindref="member">NRF_POWER_OFFRAM0</ref>,<sp/></highlight><highlight class="comment">/**&lt;<sp/>Keep<sp/>retention<sp/>on<sp/>RAM<sp/>block<sp/>0<sp/>when<sp/>RAM<sp/>block<sp/>is<sp/>switched<sp/>OFF.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__power__hal_1ggac71371d7bb39ba729cb7ed9dfbfe0e49a30de72fd80fdd497ff4a3a0f6c4520b1" kindref="member">NRF_POWER_ONRAM1_MASK</ref><sp/><sp/>=<sp/>1U<sp/>&lt;&lt;<sp/><ref refid="group__nrf__power__hal_1gga79872e2ebbcedf5ca759ef232c797157a662451909ea9b79b063c310fd59f8d1b" kindref="member">NRF_POWER_ONRAM1</ref>,<sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Keep<sp/>RAM<sp/>block<sp/>1<sp/>ON<sp/>or<sp/>OFF<sp/>in<sp/>System<sp/>ON<sp/>mode.<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__power__hal_1ggac71371d7bb39ba729cb7ed9dfbfe0e49a4698a342ef014ac79ac29df0e63e7ff6" kindref="member">NRF_POWER_OFFRAM1_MASK</ref><sp/>=<sp/>1U<sp/>&lt;&lt;<sp/><ref refid="group__nrf__power__hal_1gga79872e2ebbcedf5ca759ef232c797157ad8ec70b345f01d11d77a87977bdc1824" kindref="member">NRF_POWER_OFFRAM1</ref>,<sp/></highlight><highlight class="comment">/**&lt;<sp/>Keep<sp/>retention<sp/>on<sp/>RAM<sp/>block<sp/>1<sp/>when<sp/>RAM<sp/>block<sp/>is<sp/>switched<sp/>OFF.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__power__hal_1ggac71371d7bb39ba729cb7ed9dfbfe0e49a087fa8e393343d8d848d4f8be9fb5fae" kindref="member">NRF_POWER_ONRAM2_MASK</ref><sp/><sp/>=<sp/>1U<sp/>&lt;&lt;<sp/><ref refid="group__nrf__power__hal_1gga79872e2ebbcedf5ca759ef232c797157a3ff3329bc8a7c39d897f796011695126" kindref="member">NRF_POWER_ONRAM2</ref>,<sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Keep<sp/>RAM<sp/>block<sp/>2<sp/>ON<sp/>or<sp/>OFF<sp/>in<sp/>System<sp/>ON<sp/>mode.<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__power__hal_1ggac71371d7bb39ba729cb7ed9dfbfe0e49a27af6b2a0a2f94d84f0acc5a643bdc50" kindref="member">NRF_POWER_OFFRAM2_MASK</ref><sp/>=<sp/>1U<sp/>&lt;&lt;<sp/><ref refid="group__nrf__power__hal_1gga79872e2ebbcedf5ca759ef232c797157a15bb7629e501dbcf0b691117bc893d41" kindref="member">NRF_POWER_OFFRAM2</ref>,<sp/></highlight><highlight class="comment">/**&lt;<sp/>Keep<sp/>retention<sp/>on<sp/>RAM<sp/>block<sp/>2<sp/>when<sp/>RAM<sp/>block<sp/>is<sp/>switched<sp/>OFF.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__power__hal_1ggac71371d7bb39ba729cb7ed9dfbfe0e49a12fb3a32cecf39f4f021de13da092dbb" kindref="member">NRF_POWER_ONRAM3_MASK</ref><sp/><sp/>=<sp/>1U<sp/>&lt;&lt;<sp/><ref refid="group__nrf__power__hal_1gga79872e2ebbcedf5ca759ef232c797157afd83ec10ce9e56363b29e9deb88441e3" kindref="member">NRF_POWER_ONRAM3</ref>,<sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Keep<sp/>RAM<sp/>block<sp/>3<sp/>ON<sp/>or<sp/>OFF<sp/>in<sp/>System<sp/>ON<sp/>mode.<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__power__hal_1ggac71371d7bb39ba729cb7ed9dfbfe0e49ab4d72c52323e7197966211355ba5f186" kindref="member">NRF_POWER_OFFRAM3_MASK</ref><sp/>=<sp/>1U<sp/>&lt;&lt;<sp/><ref refid="group__nrf__power__hal_1gga79872e2ebbcedf5ca759ef232c797157ae47bcf8105e1db8991fb5996e06e8ca5" kindref="member">NRF_POWER_OFFRAM3</ref>,<sp/></highlight><highlight class="comment">/**&lt;<sp/>Keep<sp/>retention<sp/>on<sp/>RAM<sp/>block<sp/>3<sp/>when<sp/>RAM<sp/>block<sp/>is<sp/>switched<sp/>OFF.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="417"><highlight class="normal">}<ref refid="group__nrf__power__hal_1gac71371d7bb39ba729cb7ed9dfbfe0e49" kindref="member">nrf_power_onoffram_mask_t</ref>;</highlight></codeline>
<codeline lineno="418"><highlight class="normal"></highlight></codeline>
<codeline lineno="419"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_POWER_HAS_POFCON</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="420"><highlight class="comment">/**<sp/>@brief<sp/>Power<sp/>failure<sp/>comparator<sp/>thresholds.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="normal">{</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__power__hal_1ggacc0f863f34d48f5975564a11975dda2eab4fb7ea911008ae039ffe54b21c235aa" kindref="member">NRF_POWER_POFTHR_V21</ref><sp/>=<sp/>POWER_POFCON_THRESHOLD_V21,<sp/></highlight><highlight class="comment">///&lt;<sp/>Set<sp/>threshold<sp/>to<sp/>2.1<sp/>V.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__power__hal_1ggacc0f863f34d48f5975564a11975dda2ea83ebb6ec6ba81f72446761838931d4fd" kindref="member">NRF_POWER_POFTHR_V23</ref><sp/>=<sp/>POWER_POFCON_THRESHOLD_V23,<sp/></highlight><highlight class="comment">///&lt;<sp/>Set<sp/>threshold<sp/>to<sp/>2.3<sp/>V.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__power__hal_1ggacc0f863f34d48f5975564a11975dda2ea387664457c4e47fcb4f070ca655e8c9c" kindref="member">NRF_POWER_POFTHR_V25</ref><sp/>=<sp/>POWER_POFCON_THRESHOLD_V25,<sp/></highlight><highlight class="comment">///&lt;<sp/>Set<sp/>threshold<sp/>to<sp/>2.5<sp/>V.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__power__hal_1ggacc0f863f34d48f5975564a11975dda2ea5b9897d77046971bc191c7cf3caa610a" kindref="member">NRF_POWER_POFTHR_V27</ref><sp/>=<sp/>POWER_POFCON_THRESHOLD_V27,<sp/></highlight><highlight class="comment">///&lt;<sp/>Set<sp/>threshold<sp/>to<sp/>2.7<sp/>V.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="427"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(POWER_POFCON_THRESHOLD_V17)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__power__hal_1ggacc0f863f34d48f5975564a11975dda2ea99ec1985ccd5ddcf31777fc93eeb0783" kindref="member">NRF_POWER_POFTHR_V17</ref><sp/>=<sp/>POWER_POFCON_THRESHOLD_V17,<sp/></highlight><highlight class="comment">///&lt;<sp/>Set<sp/>threshold<sp/>to<sp/>1.7<sp/>V.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__power__hal_1ggacc0f863f34d48f5975564a11975dda2ea3555fddf55feea0c57b3054130770d7c" kindref="member">NRF_POWER_POFTHR_V18</ref><sp/>=<sp/>POWER_POFCON_THRESHOLD_V18,<sp/></highlight><highlight class="comment">///&lt;<sp/>Set<sp/>threshold<sp/>to<sp/>1.8<sp/>V.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__power__hal_1ggacc0f863f34d48f5975564a11975dda2ea60b0ce9856d3beed4e88d00006d40bea" kindref="member">NRF_POWER_POFTHR_V19</ref><sp/>=<sp/>POWER_POFCON_THRESHOLD_V19,<sp/></highlight><highlight class="comment">///&lt;<sp/>Set<sp/>threshold<sp/>to<sp/>1.9<sp/>V.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__power__hal_1ggacc0f863f34d48f5975564a11975dda2ea7dadc6f82fd855039f4b21f8aab9e949" kindref="member">NRF_POWER_POFTHR_V20</ref><sp/>=<sp/>POWER_POFCON_THRESHOLD_V20,<sp/></highlight><highlight class="comment">///&lt;<sp/>Set<sp/>threshold<sp/>to<sp/>2.0<sp/>V.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__power__hal_1ggacc0f863f34d48f5975564a11975dda2eae486a7dba0fa0834eea448ec6dd549f9" kindref="member">NRF_POWER_POFTHR_V22</ref><sp/>=<sp/>POWER_POFCON_THRESHOLD_V22,<sp/></highlight><highlight class="comment">///&lt;<sp/>Set<sp/>threshold<sp/>to<sp/>2.2<sp/>V.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__power__hal_1ggacc0f863f34d48f5975564a11975dda2eae7f11fb1ae3fd597665b51fa8f6af931" kindref="member">NRF_POWER_POFTHR_V24</ref><sp/>=<sp/>POWER_POFCON_THRESHOLD_V24,<sp/></highlight><highlight class="comment">///&lt;<sp/>Set<sp/>threshold<sp/>to<sp/>2.4<sp/>V.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__power__hal_1ggacc0f863f34d48f5975564a11975dda2eaaebdd649455c76291d55255322d8f6f1" kindref="member">NRF_POWER_POFTHR_V26</ref><sp/>=<sp/>POWER_POFCON_THRESHOLD_V26,<sp/></highlight><highlight class="comment">///&lt;<sp/>Set<sp/>threshold<sp/>to<sp/>2.6<sp/>V.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__power__hal_1ggacc0f863f34d48f5975564a11975dda2ea136e921768387320a7a6ee8dc6531cfb" kindref="member">NRF_POWER_POFTHR_V28</ref><sp/>=<sp/>POWER_POFCON_THRESHOLD_V28,<sp/></highlight><highlight class="comment">///&lt;<sp/>Set<sp/>threshold<sp/>to<sp/>2.8<sp/>V.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="436"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>defined(POWER_POFCON_THRESHOLD_V17)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="437"><highlight class="normal">}<sp/><ref refid="group__nrf__power__hal_1gacc0f863f34d48f5975564a11975dda2e" kindref="member">nrf_power_pof_thr_t</ref>;</highlight></codeline>
<codeline lineno="438"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRF_POWER_HAS_POFCON</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="439"><highlight class="normal"></highlight></codeline>
<codeline lineno="440"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_POWER_HAS_POFCON_VDDH</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="441"><highlight class="comment">/**<sp/>@brief<sp/>Power<sp/>failure<sp/>comparator<sp/>thresholds<sp/>for<sp/>VDDH.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="442"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="443"><highlight class="normal">{</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__power__hal_1gga3dfa1a1f6a6daaab25b7a47bbf42969ba7934d5246e85ddc1ec655d99e0f75292" kindref="member">NRF_POWER_POFTHRVDDH_V27</ref><sp/>=<sp/>POWER_POFCON_THRESHOLDVDDH_V27,<sp/></highlight><highlight class="comment">///&lt;<sp/>Set<sp/>threshold<sp/>to<sp/>2.7<sp/>V.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__power__hal_1gga3dfa1a1f6a6daaab25b7a47bbf42969ba27699fc0bd1b6829b5241976f8e7c113" kindref="member">NRF_POWER_POFTHRVDDH_V28</ref><sp/>=<sp/>POWER_POFCON_THRESHOLDVDDH_V28,<sp/></highlight><highlight class="comment">///&lt;<sp/>Set<sp/>threshold<sp/>to<sp/>2.8<sp/>V.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__power__hal_1gga3dfa1a1f6a6daaab25b7a47bbf42969ba6eb9dd6d51c0b831b5c8849729718655" kindref="member">NRF_POWER_POFTHRVDDH_V29</ref><sp/>=<sp/>POWER_POFCON_THRESHOLDVDDH_V29,<sp/></highlight><highlight class="comment">///&lt;<sp/>Set<sp/>threshold<sp/>to<sp/>2.9<sp/>V.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__power__hal_1gga3dfa1a1f6a6daaab25b7a47bbf42969bacf04f386c6124777f02ee7f500c27409" kindref="member">NRF_POWER_POFTHRVDDH_V30</ref><sp/>=<sp/>POWER_POFCON_THRESHOLDVDDH_V30,<sp/></highlight><highlight class="comment">///&lt;<sp/>Set<sp/>threshold<sp/>to<sp/>3.0<sp/>V.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__power__hal_1gga3dfa1a1f6a6daaab25b7a47bbf42969bac136478d76f44580707d61a6e0fda84d" kindref="member">NRF_POWER_POFTHRVDDH_V31</ref><sp/>=<sp/>POWER_POFCON_THRESHOLDVDDH_V31,<sp/></highlight><highlight class="comment">///&lt;<sp/>Set<sp/>threshold<sp/>to<sp/>3.1<sp/>V.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__power__hal_1gga3dfa1a1f6a6daaab25b7a47bbf42969ba9725ae80a1f953c09de76c375b9c2758" kindref="member">NRF_POWER_POFTHRVDDH_V32</ref><sp/>=<sp/>POWER_POFCON_THRESHOLDVDDH_V32,<sp/></highlight><highlight class="comment">///&lt;<sp/>Set<sp/>threshold<sp/>to<sp/>3.2<sp/>V.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__power__hal_1gga3dfa1a1f6a6daaab25b7a47bbf42969ba67b2c8e8308fec5da4676d3d18472b1d" kindref="member">NRF_POWER_POFTHRVDDH_V33</ref><sp/>=<sp/>POWER_POFCON_THRESHOLDVDDH_V33,<sp/></highlight><highlight class="comment">///&lt;<sp/>Set<sp/>threshold<sp/>to<sp/>3.3<sp/>V.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__power__hal_1gga3dfa1a1f6a6daaab25b7a47bbf42969baf52f0aec993bd958b56e74e33503a72f" kindref="member">NRF_POWER_POFTHRVDDH_V34</ref><sp/>=<sp/>POWER_POFCON_THRESHOLDVDDH_V34,<sp/></highlight><highlight class="comment">///&lt;<sp/>Set<sp/>threshold<sp/>to<sp/>3.4<sp/>V.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__power__hal_1gga3dfa1a1f6a6daaab25b7a47bbf42969ba7512614787226109d413efd0ba1f63a2" kindref="member">NRF_POWER_POFTHRVDDH_V35</ref><sp/>=<sp/>POWER_POFCON_THRESHOLDVDDH_V35,<sp/></highlight><highlight class="comment">///&lt;<sp/>Set<sp/>threshold<sp/>to<sp/>3.5<sp/>V.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__power__hal_1gga3dfa1a1f6a6daaab25b7a47bbf42969ba3efcb0659676e7338b05a7120d78b3a5" kindref="member">NRF_POWER_POFTHRVDDH_V36</ref><sp/>=<sp/>POWER_POFCON_THRESHOLDVDDH_V36,<sp/></highlight><highlight class="comment">///&lt;<sp/>Set<sp/>threshold<sp/>to<sp/>3.6<sp/>V.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__power__hal_1gga3dfa1a1f6a6daaab25b7a47bbf42969ba8a969eb365d007944cff79e9ba217327" kindref="member">NRF_POWER_POFTHRVDDH_V37</ref><sp/>=<sp/>POWER_POFCON_THRESHOLDVDDH_V37,<sp/></highlight><highlight class="comment">///&lt;<sp/>Set<sp/>threshold<sp/>to<sp/>3.7<sp/>V.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__power__hal_1gga3dfa1a1f6a6daaab25b7a47bbf42969bac18a9d0ec5d834c0cc0228aa0f863d9c" kindref="member">NRF_POWER_POFTHRVDDH_V38</ref><sp/>=<sp/>POWER_POFCON_THRESHOLDVDDH_V38,<sp/></highlight><highlight class="comment">///&lt;<sp/>Set<sp/>threshold<sp/>to<sp/>3.8<sp/>V.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__power__hal_1gga3dfa1a1f6a6daaab25b7a47bbf42969baa5bd3b3654da5d8b9f122cb5d9232dd5" kindref="member">NRF_POWER_POFTHRVDDH_V39</ref><sp/>=<sp/>POWER_POFCON_THRESHOLDVDDH_V39,<sp/></highlight><highlight class="comment">///&lt;<sp/>Set<sp/>threshold<sp/>to<sp/>3.9<sp/>V.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__power__hal_1gga3dfa1a1f6a6daaab25b7a47bbf42969baa74de8068a1a09ca205c798edc010a0e" kindref="member">NRF_POWER_POFTHRVDDH_V40</ref><sp/>=<sp/>POWER_POFCON_THRESHOLDVDDH_V40,<sp/></highlight><highlight class="comment">///&lt;<sp/>Set<sp/>threshold<sp/>to<sp/>4.0<sp/>V.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__power__hal_1gga3dfa1a1f6a6daaab25b7a47bbf42969baa8e1f9b85bdaa6acff1a499277a34914" kindref="member">NRF_POWER_POFTHRVDDH_V41</ref><sp/>=<sp/>POWER_POFCON_THRESHOLDVDDH_V41,<sp/></highlight><highlight class="comment">///&lt;<sp/>Set<sp/>threshold<sp/>to<sp/>4.1<sp/>V.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__power__hal_1gga3dfa1a1f6a6daaab25b7a47bbf42969ba002f035a3609c980a52aa7b56df26cb5" kindref="member">NRF_POWER_POFTHRVDDH_V42</ref><sp/>=<sp/>POWER_POFCON_THRESHOLDVDDH_V42,<sp/></highlight><highlight class="comment">///&lt;<sp/>Set<sp/>threshold<sp/>to<sp/>4.2<sp/>V.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="460"><highlight class="normal">}<sp/><ref refid="group__nrf__power__hal_1ga3dfa1a1f6a6daaab25b7a47bbf42969b" kindref="member">nrf_power_pof_thrvddh_t</ref>;</highlight></codeline>
<codeline lineno="461"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRF_POWER_HAS_POFCON_VDDH</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="462"><highlight class="normal"></highlight></codeline>
<codeline lineno="463"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_POWER_HAS_MAINREGSTATUS</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="464"><highlight class="comment">/**<sp/>@brief<sp/>Main<sp/>regulator<sp/>status.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="465"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="466"><highlight class="normal">{</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__power__hal_1gga4c4e3a1505af5d72f3ccd16cf986abd8a8006a2c2e410e14a49b0d3b1fbf9674a" kindref="member">NRF_POWER_MAINREGSTATUS_NORMAL</ref><sp/>=<sp/>POWER_MAINREGSTATUS_MAINREGSTATUS_Normal,<sp/></highlight><highlight class="comment">/**&lt;<sp/>Normal<sp/>voltage<sp/>mode.<sp/>Voltage<sp/>supplied<sp/>on<sp/>VDD.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__power__hal_1gga4c4e3a1505af5d72f3ccd16cf986abd8a09b8037fd8116a5c9b3ef25cb0d7bdd0" kindref="member">NRF_POWER_MAINREGSTATUS_HIGH</ref><sp/><sp/><sp/>=<sp/>POWER_MAINREGSTATUS_MAINREGSTATUS_High<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>High<sp/>voltage<sp/>mode.<sp/>Voltage<sp/>supplied<sp/>on<sp/>VDDH.<sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="469"><highlight class="normal">}<sp/><ref refid="group__nrf__power__hal_1ga4c4e3a1505af5d72f3ccd16cf986abd8" kindref="member">nrf_power_mainregstatus_t</ref>;</highlight></codeline>
<codeline lineno="470"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="471"><highlight class="normal"></highlight></codeline>
<codeline lineno="472"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(POWER_RAM_POWER_S0POWER_Msk)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="473"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="474"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Bit<sp/>positions<sp/>for<sp/>RAMPOWER<sp/>register</highlight></codeline>
<codeline lineno="475"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="476"><highlight class="comment"><sp/>*<sp/>All<sp/>possible<sp/>bits<sp/>described,<sp/>even<sp/>if<sp/>they<sp/>are<sp/>not<sp/>used<sp/>in<sp/>selected<sp/>MCU.</highlight></codeline>
<codeline lineno="477"><highlight class="comment"><sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="478"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="479"><highlight class="normal">{</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="480"><highlight class="comment"><sp/><sp/><sp/><sp/>/**<sp/>Keep<sp/>RAM<sp/>section<sp/>S0<sp/>ON<sp/>in<sp/>System<sp/>ON<sp/>mode<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__power__hal_1ggabf0b57b293efd9bb767ce02642468bb6a648dea53144b50dedf4b2d445c93837b" kindref="member">NRF_POWER_RAMPOWER_S0POWER</ref><sp/>=<sp/>POWER_RAM_POWER_S0POWER_Pos,</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__power__hal_1ggabf0b57b293efd9bb767ce02642468bb6a5c000059cef3c7efb86c90c0207d2d2b" kindref="member">NRF_POWER_RAMPOWER_S1POWER</ref>,<sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Keep<sp/>RAM<sp/>section<sp/>S1<sp/>ON<sp/>in<sp/>System<sp/>ON<sp/>mode.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__power__hal_1ggabf0b57b293efd9bb767ce02642468bb6acbc8cbbd0874199b6910db607ff57a4a" kindref="member">NRF_POWER_RAMPOWER_S2POWER</ref>,<sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Keep<sp/>RAM<sp/>section<sp/>S2<sp/>ON<sp/>in<sp/>System<sp/>ON<sp/>mode.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__power__hal_1ggabf0b57b293efd9bb767ce02642468bb6a59cece43916bf0cf384237545cde1366" kindref="member">NRF_POWER_RAMPOWER_S3POWER</ref>,<sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Keep<sp/>RAM<sp/>section<sp/>S3<sp/>ON<sp/>in<sp/>System<sp/>ON<sp/>mode.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__power__hal_1ggabf0b57b293efd9bb767ce02642468bb6ad5c208f4a432c222cf0c201a7faa32f3" kindref="member">NRF_POWER_RAMPOWER_S4POWER</ref>,<sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Keep<sp/>RAM<sp/>section<sp/>S4<sp/>ON<sp/>in<sp/>System<sp/>ON<sp/>mode.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__power__hal_1ggabf0b57b293efd9bb767ce02642468bb6af87fb55107f8ad629c0ba53aef3bbfe4" kindref="member">NRF_POWER_RAMPOWER_S5POWER</ref>,<sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Keep<sp/>RAM<sp/>section<sp/>S5<sp/>ON<sp/>in<sp/>System<sp/>ON<sp/>mode.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__power__hal_1ggabf0b57b293efd9bb767ce02642468bb6aa1826b606b5c3095ca567129990459be" kindref="member">NRF_POWER_RAMPOWER_S6POWER</ref>,<sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Keep<sp/>RAM<sp/>section<sp/>S6<sp/>ON<sp/>in<sp/>System<sp/>ON<sp/>mode.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__power__hal_1ggabf0b57b293efd9bb767ce02642468bb6a221df67d390ea81a608e311e93fd6d99" kindref="member">NRF_POWER_RAMPOWER_S7POWER</ref>,<sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Keep<sp/>RAM<sp/>section<sp/>S7<sp/>ON<sp/>in<sp/>System<sp/>ON<sp/>mode.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__power__hal_1ggabf0b57b293efd9bb767ce02642468bb6ade558d13e58cb693c8942066cc772e4a" kindref="member">NRF_POWER_RAMPOWER_S8POWER</ref>,<sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Keep<sp/>RAM<sp/>section<sp/>S8<sp/>ON<sp/>in<sp/>System<sp/>ON<sp/>mode.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__power__hal_1ggabf0b57b293efd9bb767ce02642468bb6a01bdfd60f33e77b51995f35f7097e22e" kindref="member">NRF_POWER_RAMPOWER_S9POWER</ref>,<sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Keep<sp/>RAM<sp/>section<sp/>S9<sp/>ON<sp/>in<sp/>System<sp/>ON<sp/>mode.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__power__hal_1ggabf0b57b293efd9bb767ce02642468bb6ac801ca448acfb540f1cbedd6a42d6c18" kindref="member">NRF_POWER_RAMPOWER_S10POWER</ref>,<sp/></highlight><highlight class="comment">/**&lt;<sp/>Keep<sp/>RAM<sp/>section<sp/>S10<sp/>ON<sp/>in<sp/>System<sp/>ON<sp/>mode.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__power__hal_1ggabf0b57b293efd9bb767ce02642468bb6aac1039d720317486be085ae0572c430c" kindref="member">NRF_POWER_RAMPOWER_S11POWER</ref>,<sp/></highlight><highlight class="comment">/**&lt;<sp/>Keep<sp/>RAM<sp/>section<sp/>S11<sp/>ON<sp/>in<sp/>System<sp/>ON<sp/>mode.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__power__hal_1ggabf0b57b293efd9bb767ce02642468bb6ac685dd3a872befce358f70ddbe3be35c" kindref="member">NRF_POWER_RAMPOWER_S12POWER</ref>,<sp/></highlight><highlight class="comment">/**&lt;<sp/>Keep<sp/>RAM<sp/>section<sp/>S12<sp/>ON<sp/>in<sp/>System<sp/>ON<sp/>mode.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__power__hal_1ggabf0b57b293efd9bb767ce02642468bb6aee2f0a1c8debf881fb861bf72927842c" kindref="member">NRF_POWER_RAMPOWER_S13POWER</ref>,<sp/></highlight><highlight class="comment">/**&lt;<sp/>Keep<sp/>RAM<sp/>section<sp/>S13<sp/>ON<sp/>in<sp/>System<sp/>ON<sp/>mode.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__power__hal_1ggabf0b57b293efd9bb767ce02642468bb6a4ad508bc768c83e2b9bcf2babb8bcf54" kindref="member">NRF_POWER_RAMPOWER_S14POWER</ref>,<sp/></highlight><highlight class="comment">/**&lt;<sp/>Keep<sp/>RAM<sp/>section<sp/>S14<sp/>ON<sp/>in<sp/>System<sp/>ON<sp/>mode.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__power__hal_1ggabf0b57b293efd9bb767ce02642468bb6a291dd7d57b8f90d27d2c01c3b4400f54" kindref="member">NRF_POWER_RAMPOWER_S15POWER</ref>,<sp/></highlight><highlight class="comment">/**&lt;<sp/>Keep<sp/>RAM<sp/>section<sp/>S15<sp/>ON<sp/>in<sp/>System<sp/>ON<sp/>mode.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="497"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="498"><highlight class="comment"><sp/><sp/><sp/><sp/>/**<sp/>Keep<sp/>section<sp/>retention<sp/>in<sp/>OFF<sp/>mode<sp/>when<sp/>section<sp/>is<sp/>OFF<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__power__hal_1ggabf0b57b293efd9bb767ce02642468bb6ab8fb5ccdff912df210c8aee7cf9dd632" kindref="member">NRF_POWER_RAMPOWER_S0RETENTION</ref><sp/>=<sp/>POWER_RAM_POWER_S0RETENTION_Pos,</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__power__hal_1ggabf0b57b293efd9bb767ce02642468bb6aae354d750466bdc390dbc53194ad4deb" kindref="member">NRF_POWER_RAMPOWER_S1RETENTION</ref>,<sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Keep<sp/>section<sp/>retention<sp/>in<sp/>OFF<sp/>mode<sp/>when<sp/>section<sp/>is<sp/>OFF.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__power__hal_1ggabf0b57b293efd9bb767ce02642468bb6a08d4386366d77dd3f023ce97c5a1e6fd" kindref="member">NRF_POWER_RAMPOWER_S2RETENTION</ref>,<sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Keep<sp/>section<sp/>retention<sp/>in<sp/>OFF<sp/>mode<sp/>when<sp/>section<sp/>is<sp/>OFF.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__power__hal_1ggabf0b57b293efd9bb767ce02642468bb6a49b95be7ec78c3a93fac242d75b289ec" kindref="member">NRF_POWER_RAMPOWER_S3RETENTION</ref>,<sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Keep<sp/>section<sp/>retention<sp/>in<sp/>OFF<sp/>mode<sp/>when<sp/>section<sp/>is<sp/>OFF.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__power__hal_1ggabf0b57b293efd9bb767ce02642468bb6a3f7213b1c28661b3017a8ab02fff5d97" kindref="member">NRF_POWER_RAMPOWER_S4RETENTION</ref>,<sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Keep<sp/>section<sp/>retention<sp/>in<sp/>OFF<sp/>mode<sp/>when<sp/>section<sp/>is<sp/>OFF.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__power__hal_1ggabf0b57b293efd9bb767ce02642468bb6a98f279feb85459e88bbc98ebd233b0b1" kindref="member">NRF_POWER_RAMPOWER_S5RETENTION</ref>,<sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Keep<sp/>section<sp/>retention<sp/>in<sp/>OFF<sp/>mode<sp/>when<sp/>section<sp/>is<sp/>OFF.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__power__hal_1ggabf0b57b293efd9bb767ce02642468bb6a308e34b19fd38e8541206a896ae27262" kindref="member">NRF_POWER_RAMPOWER_S6RETENTION</ref>,<sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Keep<sp/>section<sp/>retention<sp/>in<sp/>OFF<sp/>mode<sp/>when<sp/>section<sp/>is<sp/>OFF.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__power__hal_1ggabf0b57b293efd9bb767ce02642468bb6a2b3189806fa74681f4ca8463a620e401" kindref="member">NRF_POWER_RAMPOWER_S7RETENTION</ref>,<sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Keep<sp/>section<sp/>retention<sp/>in<sp/>OFF<sp/>mode<sp/>when<sp/>section<sp/>is<sp/>OFF.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__power__hal_1ggabf0b57b293efd9bb767ce02642468bb6a3b1bdcfd59c89c2262bf3986831bfe19" kindref="member">NRF_POWER_RAMPOWER_S8RETENTION</ref>,<sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Keep<sp/>section<sp/>retention<sp/>in<sp/>OFF<sp/>mode<sp/>when<sp/>section<sp/>is<sp/>OFF.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__power__hal_1ggabf0b57b293efd9bb767ce02642468bb6a3d40e9d1bbc3ea1da94fe417902ce1c0" kindref="member">NRF_POWER_RAMPOWER_S9RETENTION</ref>,<sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Keep<sp/>section<sp/>retention<sp/>in<sp/>OFF<sp/>mode<sp/>when<sp/>section<sp/>is<sp/>OFF.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__power__hal_1ggabf0b57b293efd9bb767ce02642468bb6aafe26f4a98f9782d82f352d7bbf43e61" kindref="member">NRF_POWER_RAMPOWER_S10RETENTION</ref>,<sp/></highlight><highlight class="comment">/**&lt;<sp/>Keep<sp/>section<sp/>retention<sp/>in<sp/>OFF<sp/>mode<sp/>when<sp/>section<sp/>is<sp/>OFF.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__power__hal_1ggabf0b57b293efd9bb767ce02642468bb6ad1bf734b02377064b27a3ce491a205d3" kindref="member">NRF_POWER_RAMPOWER_S11RETENTION</ref>,<sp/></highlight><highlight class="comment">/**&lt;<sp/>Keep<sp/>section<sp/>retention<sp/>in<sp/>OFF<sp/>mode<sp/>when<sp/>section<sp/>is<sp/>OFF.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__power__hal_1ggabf0b57b293efd9bb767ce02642468bb6aa5fcc931a8283a69fd8481fa56db894b" kindref="member">NRF_POWER_RAMPOWER_S12RETENTION</ref>,<sp/></highlight><highlight class="comment">/**&lt;<sp/>Keep<sp/>section<sp/>retention<sp/>in<sp/>OFF<sp/>mode<sp/>when<sp/>section<sp/>is<sp/>OFF.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__power__hal_1ggabf0b57b293efd9bb767ce02642468bb6aee2ec8e2f96f1d036b5433d927652a94" kindref="member">NRF_POWER_RAMPOWER_S13RETENTION</ref>,<sp/></highlight><highlight class="comment">/**&lt;<sp/>Keep<sp/>section<sp/>retention<sp/>in<sp/>OFF<sp/>mode<sp/>when<sp/>section<sp/>is<sp/>OFF.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__power__hal_1ggabf0b57b293efd9bb767ce02642468bb6acf9c6fe30a23b27cd0dc2636f644e4a3" kindref="member">NRF_POWER_RAMPOWER_S14RETENTION</ref>,<sp/></highlight><highlight class="comment">/**&lt;<sp/>Keep<sp/>section<sp/>retention<sp/>in<sp/>OFF<sp/>mode<sp/>when<sp/>section<sp/>is<sp/>OFF.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__power__hal_1ggabf0b57b293efd9bb767ce02642468bb6a24f6c5f7bf0633dc63c417913132ddbb" kindref="member">NRF_POWER_RAMPOWER_S15RETENTION</ref>,<sp/></highlight><highlight class="comment">/**&lt;<sp/>Keep<sp/>section<sp/>retention<sp/>in<sp/>OFF<sp/>mode<sp/>when<sp/>section<sp/>is<sp/>OFF.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="515"><highlight class="normal">}<sp/><ref refid="group__nrf__power__hal_1gabf0b57b293efd9bb767ce02642468bb6" kindref="member">nrf_power_rampower_t</ref>;</highlight></codeline>
<codeline lineno="516"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="517"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="518"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Bit<sp/>masks<sp/>for<sp/>RAMPOWER<sp/>register</highlight></codeline>
<codeline lineno="519"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="520"><highlight class="comment"><sp/>*<sp/>All<sp/>possible<sp/>bits<sp/>described,<sp/>even<sp/>if<sp/>they<sp/>are<sp/>not<sp/>used<sp/>in<sp/>selected<sp/>MCU.</highlight></codeline>
<codeline lineno="521"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="522"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="523"><highlight class="normal">{</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/>NRF_POWER_RAMPOWER_S0POWER_MASK<sp/><sp/>=<sp/>1UL<sp/>&lt;&lt;<sp/><ref refid="group__nrf__power__hal_1ggabf0b57b293efd9bb767ce02642468bb6a648dea53144b50dedf4b2d445c93837b" kindref="member">NRF_POWER_RAMPOWER_S0POWER</ref><sp/>,</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/>NRF_POWER_RAMPOWER_S1POWER_MASK<sp/><sp/>=<sp/>1UL<sp/>&lt;&lt;<sp/><ref refid="group__nrf__power__hal_1ggabf0b57b293efd9bb767ce02642468bb6a5c000059cef3c7efb86c90c0207d2d2b" kindref="member">NRF_POWER_RAMPOWER_S1POWER</ref><sp/>,</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/>NRF_POWER_RAMPOWER_S2POWER_MASK<sp/><sp/>=<sp/>1UL<sp/>&lt;&lt;<sp/><ref refid="group__nrf__power__hal_1ggabf0b57b293efd9bb767ce02642468bb6acbc8cbbd0874199b6910db607ff57a4a" kindref="member">NRF_POWER_RAMPOWER_S2POWER</ref><sp/>,</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/>NRF_POWER_RAMPOWER_S3POWER_MASK<sp/><sp/>=<sp/>1UL<sp/>&lt;&lt;<sp/><ref refid="group__nrf__power__hal_1ggabf0b57b293efd9bb767ce02642468bb6a59cece43916bf0cf384237545cde1366" kindref="member">NRF_POWER_RAMPOWER_S3POWER</ref><sp/>,</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/>NRF_POWER_RAMPOWER_S4POWER_MASK<sp/><sp/>=<sp/>1UL<sp/>&lt;&lt;<sp/><ref refid="group__nrf__power__hal_1ggabf0b57b293efd9bb767ce02642468bb6ad5c208f4a432c222cf0c201a7faa32f3" kindref="member">NRF_POWER_RAMPOWER_S4POWER</ref><sp/>,</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/>NRF_POWER_RAMPOWER_S5POWER_MASK<sp/><sp/>=<sp/>1UL<sp/>&lt;&lt;<sp/><ref refid="group__nrf__power__hal_1ggabf0b57b293efd9bb767ce02642468bb6af87fb55107f8ad629c0ba53aef3bbfe4" kindref="member">NRF_POWER_RAMPOWER_S5POWER</ref><sp/>,</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/>NRF_POWER_RAMPOWER_S7POWER_MASK<sp/><sp/>=<sp/>1UL<sp/>&lt;&lt;<sp/><ref refid="group__nrf__power__hal_1ggabf0b57b293efd9bb767ce02642468bb6a221df67d390ea81a608e311e93fd6d99" kindref="member">NRF_POWER_RAMPOWER_S7POWER</ref><sp/>,</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/>NRF_POWER_RAMPOWER_S8POWER_MASK<sp/><sp/>=<sp/>1UL<sp/>&lt;&lt;<sp/><ref refid="group__nrf__power__hal_1ggabf0b57b293efd9bb767ce02642468bb6ade558d13e58cb693c8942066cc772e4a" kindref="member">NRF_POWER_RAMPOWER_S8POWER</ref><sp/>,</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/>NRF_POWER_RAMPOWER_S9POWER_MASK<sp/><sp/>=<sp/>1UL<sp/>&lt;&lt;<sp/><ref refid="group__nrf__power__hal_1ggabf0b57b293efd9bb767ce02642468bb6a01bdfd60f33e77b51995f35f7097e22e" kindref="member">NRF_POWER_RAMPOWER_S9POWER</ref><sp/>,</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/>NRF_POWER_RAMPOWER_S10POWER_MASK<sp/>=<sp/>1UL<sp/>&lt;&lt;<sp/><ref refid="group__nrf__power__hal_1ggabf0b57b293efd9bb767ce02642468bb6ac801ca448acfb540f1cbedd6a42d6c18" kindref="member">NRF_POWER_RAMPOWER_S10POWER</ref>,</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/>NRF_POWER_RAMPOWER_S11POWER_MASK<sp/>=<sp/>1UL<sp/>&lt;&lt;<sp/><ref refid="group__nrf__power__hal_1ggabf0b57b293efd9bb767ce02642468bb6aac1039d720317486be085ae0572c430c" kindref="member">NRF_POWER_RAMPOWER_S11POWER</ref>,</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/>NRF_POWER_RAMPOWER_S12POWER_MASK<sp/>=<sp/>1UL<sp/>&lt;&lt;<sp/><ref refid="group__nrf__power__hal_1ggabf0b57b293efd9bb767ce02642468bb6ac685dd3a872befce358f70ddbe3be35c" kindref="member">NRF_POWER_RAMPOWER_S12POWER</ref>,</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/>NRF_POWER_RAMPOWER_S13POWER_MASK<sp/>=<sp/>1UL<sp/>&lt;&lt;<sp/><ref refid="group__nrf__power__hal_1ggabf0b57b293efd9bb767ce02642468bb6aee2f0a1c8debf881fb861bf72927842c" kindref="member">NRF_POWER_RAMPOWER_S13POWER</ref>,</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/>NRF_POWER_RAMPOWER_S14POWER_MASK<sp/>=<sp/>1UL<sp/>&lt;&lt;<sp/><ref refid="group__nrf__power__hal_1ggabf0b57b293efd9bb767ce02642468bb6a4ad508bc768c83e2b9bcf2babb8bcf54" kindref="member">NRF_POWER_RAMPOWER_S14POWER</ref>,</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/>NRF_POWER_RAMPOWER_S15POWER_MASK<sp/>=<sp/>1UL<sp/>&lt;&lt;<sp/><ref refid="group__nrf__power__hal_1ggabf0b57b293efd9bb767ce02642468bb6a291dd7d57b8f90d27d2c01c3b4400f54" kindref="member">NRF_POWER_RAMPOWER_S15POWER</ref>,</highlight></codeline>
<codeline lineno="539"><highlight class="normal"></highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/>NRF_POWER_RAMPOWER_S0RETENTION_MASK<sp/><sp/>=<sp/>1UL<sp/>&lt;&lt;<sp/><ref refid="group__nrf__power__hal_1ggabf0b57b293efd9bb767ce02642468bb6ab8fb5ccdff912df210c8aee7cf9dd632" kindref="member">NRF_POWER_RAMPOWER_S0RETENTION</ref><sp/>,</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/>NRF_POWER_RAMPOWER_S1RETENTION_MASK<sp/><sp/>=<sp/>1UL<sp/>&lt;&lt;<sp/><ref refid="group__nrf__power__hal_1ggabf0b57b293efd9bb767ce02642468bb6aae354d750466bdc390dbc53194ad4deb" kindref="member">NRF_POWER_RAMPOWER_S1RETENTION</ref><sp/>,</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/>NRF_POWER_RAMPOWER_S2RETENTION_MASK<sp/><sp/>=<sp/>1UL<sp/>&lt;&lt;<sp/><ref refid="group__nrf__power__hal_1ggabf0b57b293efd9bb767ce02642468bb6a08d4386366d77dd3f023ce97c5a1e6fd" kindref="member">NRF_POWER_RAMPOWER_S2RETENTION</ref><sp/>,</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/>NRF_POWER_RAMPOWER_S3RETENTION_MASK<sp/><sp/>=<sp/>1UL<sp/>&lt;&lt;<sp/><ref refid="group__nrf__power__hal_1ggabf0b57b293efd9bb767ce02642468bb6a49b95be7ec78c3a93fac242d75b289ec" kindref="member">NRF_POWER_RAMPOWER_S3RETENTION</ref><sp/>,</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/>NRF_POWER_RAMPOWER_S4RETENTION_MASK<sp/><sp/>=<sp/>1UL<sp/>&lt;&lt;<sp/><ref refid="group__nrf__power__hal_1ggabf0b57b293efd9bb767ce02642468bb6a3f7213b1c28661b3017a8ab02fff5d97" kindref="member">NRF_POWER_RAMPOWER_S4RETENTION</ref><sp/>,</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/>NRF_POWER_RAMPOWER_S5RETENTION_MASK<sp/><sp/>=<sp/>1UL<sp/>&lt;&lt;<sp/><ref refid="group__nrf__power__hal_1ggabf0b57b293efd9bb767ce02642468bb6a98f279feb85459e88bbc98ebd233b0b1" kindref="member">NRF_POWER_RAMPOWER_S5RETENTION</ref><sp/>,</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/>NRF_POWER_RAMPOWER_S7RETENTION_MASK<sp/><sp/>=<sp/>1UL<sp/>&lt;&lt;<sp/><ref refid="group__nrf__power__hal_1ggabf0b57b293efd9bb767ce02642468bb6a2b3189806fa74681f4ca8463a620e401" kindref="member">NRF_POWER_RAMPOWER_S7RETENTION</ref><sp/>,</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/>NRF_POWER_RAMPOWER_S8RETENTION_MASK<sp/><sp/>=<sp/>1UL<sp/>&lt;&lt;<sp/><ref refid="group__nrf__power__hal_1ggabf0b57b293efd9bb767ce02642468bb6a3b1bdcfd59c89c2262bf3986831bfe19" kindref="member">NRF_POWER_RAMPOWER_S8RETENTION</ref><sp/>,</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/>NRF_POWER_RAMPOWER_S9RETENTION_MASK<sp/><sp/>=<sp/>1UL<sp/>&lt;&lt;<sp/><ref refid="group__nrf__power__hal_1ggabf0b57b293efd9bb767ce02642468bb6a3d40e9d1bbc3ea1da94fe417902ce1c0" kindref="member">NRF_POWER_RAMPOWER_S9RETENTION</ref><sp/>,</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/>NRF_POWER_RAMPOWER_S10RETENTION_MASK<sp/>=<sp/>1UL<sp/>&lt;&lt;<sp/><ref refid="group__nrf__power__hal_1ggabf0b57b293efd9bb767ce02642468bb6aafe26f4a98f9782d82f352d7bbf43e61" kindref="member">NRF_POWER_RAMPOWER_S10RETENTION</ref>,</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/>NRF_POWER_RAMPOWER_S11RETENTION_MASK<sp/>=<sp/>1UL<sp/>&lt;&lt;<sp/><ref refid="group__nrf__power__hal_1ggabf0b57b293efd9bb767ce02642468bb6ad1bf734b02377064b27a3ce491a205d3" kindref="member">NRF_POWER_RAMPOWER_S11RETENTION</ref>,</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/>NRF_POWER_RAMPOWER_S12RETENTION_MASK<sp/>=<sp/>1UL<sp/>&lt;&lt;<sp/><ref refid="group__nrf__power__hal_1ggabf0b57b293efd9bb767ce02642468bb6aa5fcc931a8283a69fd8481fa56db894b" kindref="member">NRF_POWER_RAMPOWER_S12RETENTION</ref>,</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/>NRF_POWER_RAMPOWER_S13RETENTION_MASK<sp/>=<sp/>1UL<sp/>&lt;&lt;<sp/><ref refid="group__nrf__power__hal_1ggabf0b57b293efd9bb767ce02642468bb6aee2ec8e2f96f1d036b5433d927652a94" kindref="member">NRF_POWER_RAMPOWER_S13RETENTION</ref>,</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/>NRF_POWER_RAMPOWER_S14RETENTION_MASK<sp/>=<sp/>1UL<sp/>&lt;&lt;<sp/><ref refid="group__nrf__power__hal_1ggabf0b57b293efd9bb767ce02642468bb6acf9c6fe30a23b27cd0dc2636f644e4a3" kindref="member">NRF_POWER_RAMPOWER_S14RETENTION</ref>,</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/>NRF_POWER_RAMPOWER_S15RETENTION_MASK<sp/>=<sp/>(int)(1UL<sp/>&lt;&lt;<sp/><ref refid="group__nrf__power__hal_1ggabf0b57b293efd9bb767ce02642468bb6a24f6c5f7bf0633dc63c417913132ddbb" kindref="member">NRF_POWER_RAMPOWER_S15RETENTION</ref>),</highlight></codeline>
<codeline lineno="555"><highlight class="normal">}<sp/><ref refid="group__nrf__power__hal_1ga487eca5d7c2a0af37a3c50cfb03c6b56" kindref="member">nrf_power_rampower_mask_t</ref>;</highlight></codeline>
<codeline lineno="556"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>defined(POWER_RAM_POWER_S0POWER_Msk)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="557"><highlight class="normal"></highlight></codeline>
<codeline lineno="558"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_POWER_HAS_VREG_CONFIG</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="559"><highlight class="comment">/**<sp/>@brief<sp/>POWER<sp/>voltage<sp/>regulators<sp/>bit<sp/>masks.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="560"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="561"><highlight class="normal">{</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__power__hal_1gga770cecdacf3a854d13aa2d53e1c29beeab5ba3b8dcdf7fef981727796e7a151fe" kindref="member">NRF_POWER_VREG_1V8_MASK</ref><sp/><sp/><sp/><sp/><sp/>=<sp/>POWER_REGCONFIG_VREG1V8_Msk,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>1.8<sp/>V<sp/>regulator.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__power__hal_1gga770cecdacf3a854d13aa2d53e1c29beea7b585e09bbbfe9e6b73ca37a2d29cce2" kindref="member">NRF_POWER_VREG_1V0_MASK</ref><sp/><sp/><sp/><sp/><sp/>=<sp/>POWER_REGCONFIG_VREG1V0_Msk,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>1.0<sp/>V<sp/>regulator.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__power__hal_1gga770cecdacf3a854d13aa2d53e1c29beea0e9636d7e1bbf9237d841ffd559647b5" kindref="member">NRF_POWER_VREG_0V8_MASK</ref><sp/><sp/><sp/><sp/><sp/>=<sp/>POWER_REGCONFIG_VREG0V8_Msk,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>0.8<sp/>V<sp/>regulator.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__power__hal_1gga770cecdacf3a854d13aa2d53e1c29beea34630dd759ecc318688f91be8ce760c2" kindref="member">NRF_POWER_VREG_VS_MASK</ref><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>POWER_REGCONFIG_VREGVS_Msk,<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Voltage<sp/>scaled<sp/>regulator.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__power__hal_1gga770cecdacf3a854d13aa2d53e1c29beea6a9e21fb1d91b0b39f86637d0626eced" kindref="member">NRF_POWER_VREG_MAIN1V8_MASK</ref><sp/>=<sp/>POWER_REGCONFIG_VREGMAIN1V8_Msk,<sp/></highlight><highlight class="comment">///&lt;<sp/>1.8<sp/>V<sp/>rail<sp/>at<sp/>VREGMAIN<sp/>regulator.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__power__hal_1gga770cecdacf3a854d13aa2d53e1c29beeaa42f1e6b419f56c7008fb4e3ce7ab10c" kindref="member">NRF_POWER_VREG_MAIN1V0_MASK</ref><sp/>=<sp/>POWER_REGCONFIG_VREGMAIN1V0_Msk,<sp/></highlight><highlight class="comment">///&lt;<sp/>1.0<sp/>V<sp/>rail<sp/>at<sp/>VREGMAIN<sp/>regulator.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__power__hal_1gga770cecdacf3a854d13aa2d53e1c29beea402b6aff94036c87bb1fb1a04b283b5f" kindref="member">NRF_POWER_VREG_MAINVS_MASK</ref><sp/><sp/>=<sp/>POWER_REGCONFIG_VREGMAINVS_Msk,<sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Voltage<sp/>scaled<sp/>rail<sp/>at<sp/>VREGMAIN<sp/>regulator.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__power__hal_1gga770cecdacf3a854d13aa2d53e1c29beeaf875e55d3b413f7d761d39753d089002" kindref="member">NRF_POWER_VREG_FORCE_MASK</ref><sp/><sp/><sp/>=<sp/>POWER_REGCONFIG_FORCE_Msk,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Force<sp/>the<sp/>regulator<sp/>enable<sp/>configuration.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="570"><highlight class="normal">}<sp/><ref refid="group__nrf__power__hal_1ga770cecdacf3a854d13aa2d53e1c29bee" kindref="member">nrf_power_vreg_mask_t</ref>;</highlight></codeline>
<codeline lineno="571"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRF_POWER_HAS_VREG_CONFIG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="572"><highlight class="normal"></highlight></codeline>
<codeline lineno="573"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_POWER_HAS_ABB</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="574"><highlight class="comment">/**<sp/>@brief<sp/>POWER<sp/>operating<sp/>points<sp/>for<sp/>ABB<sp/>domain.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="575"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="576"><highlight class="normal">{</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__power__hal_1gga53430096d68829bab78b99e6a7758e3da719d1fe5b5aa4d12b42facb1f93e04b7" kindref="member">NRF_POWER_OP_POINT_0V4</ref><sp/>=<sp/>POWER_ABB_OPPOINT_OPPOINT_OpPoint0V4,<sp/></highlight><highlight class="comment">///&lt;<sp/>Operating<sp/>point<sp/>0.4<sp/>V.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__power__hal_1gga53430096d68829bab78b99e6a7758e3da1dfaf0667d9d89b486ff57ab3ef87de4" kindref="member">NRF_POWER_OP_POINT_0V5</ref><sp/>=<sp/>POWER_ABB_OPPOINT_OPPOINT_OpPoint0V5,<sp/></highlight><highlight class="comment">///&lt;<sp/>Operating<sp/>point<sp/>0.5<sp/>V.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__power__hal_1gga53430096d68829bab78b99e6a7758e3daf1b2eacf036656fbda755e44e06e9114" kindref="member">NRF_POWER_OP_POINT_0V6</ref><sp/>=<sp/>POWER_ABB_OPPOINT_OPPOINT_OpPoint0V6,<sp/></highlight><highlight class="comment">///&lt;<sp/>Operating<sp/>point<sp/>0.6<sp/>V.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__power__hal_1gga53430096d68829bab78b99e6a7758e3daeb0c6a34948bc85eb4727e0a10a6166f" kindref="member">NRF_POWER_OP_POINT_0V8</ref><sp/>=<sp/>POWER_ABB_OPPOINT_OPPOINT_OpPoint0V8,<sp/></highlight><highlight class="comment">///&lt;<sp/>Operating<sp/>point<sp/>0.8<sp/>V.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="581"><highlight class="normal">}<sp/><ref refid="group__nrf__power__hal_1ga53430096d68829bab78b99e6a7758e3d" kindref="member">nrf_power_op_point_t</ref>;</highlight></codeline>
<codeline lineno="582"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="583"><highlight class="comment">/**<sp/>@brief<sp/>POWER<sp/>operating<sp/>points<sp/>for<sp/>ABB<sp/>domain.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="584"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="585"><highlight class="normal">{</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__power__hal_1gga1d59f7f076924c43c551ebbee116f209a07bc006fcf22bbca6377b28476b81551" kindref="member">NRF_POWER_OVERRIDE_VALUE_POWER_DOWN</ref><sp/>=<sp/>POWER_ABB_OPPOINT_ABBPWROVERRIDEVAL_PowerDown,<sp/></highlight><highlight class="comment">///&lt;<sp/>ABB<sp/>analog<sp/>macro<sp/>powered<sp/>down.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__power__hal_1gga1d59f7f076924c43c551ebbee116f209ae9b84bc3c8163985e23f6c8fbbf99342" kindref="member">NRF_POWER_OVERRIDE_VALUE_POWER_UP</ref><sp/><sp/><sp/>=<sp/>POWER_ABB_OPPOINT_ABBPWROVERRIDEVAL_PowerUp,<sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>ABB<sp/>analog<sp/>macro<sp/>powered<sp/>up.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="588"><highlight class="normal">}<sp/><ref refid="group__nrf__power__hal_1ga1d59f7f076924c43c551ebbee116f209" kindref="member">nrf_power_override_value_t</ref>;</highlight></codeline>
<codeline lineno="589"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="590"><highlight class="comment">/**<sp/>@brief<sp/>POWER<sp/>operating<sp/>point<sp/>for<sp/>ABB<sp/>domain<sp/>structure.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="591" refid="structnrf__power__abb__config__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="592"><highlight class="normal">{</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__power__hal_1ga53430096d68829bab78b99e6a7758e3d" kindref="member">nrf_power_op_point_t</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>op_point;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>ABB<sp/>operating<sp/>point.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__power__hal_1ga1d59f7f076924c43c551ebbee116f209" kindref="member">nrf_power_override_value_t</ref><sp/>override_value;<sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Override<sp/>value<sp/>of<sp/>ABB<sp/>analog<sp/>macro<sp/>powerup<sp/>signal.</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="595"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/**&lt;<sp/>Value<sp/>is<sp/>applied<sp/>only<sp/>if<sp/>@p<sp/>override_enable<sp/>is<sp/>enabled.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>override_enable;<sp/></highlight><highlight class="comment">///&lt;<sp/>True<sp/>if<sp/>the<sp/>override<sp/>of<sp/>ABB<sp/>analog<sp/>macro<sp/>signal<sp/>is<sp/>to<sp/>be<sp/>applied,<sp/>false<sp/>otherwise.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="597"><highlight class="normal">}<sp/><ref refid="structnrf__power__abb__config__t" kindref="compound">nrf_power_abb_config_t</ref>;</highlight></codeline>
<codeline lineno="598"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRF_POWER_HAS_ABB</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="599"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="600"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="601"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>activating<sp/>a<sp/>specific<sp/>POWER<sp/>task.</highlight></codeline>
<codeline lineno="602"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="603"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="604"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>task<sp/><sp/>Task.</highlight></codeline>
<codeline lineno="605"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="606"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__power__hal_1gad6ed3d641631f14b0484485fd051ef51" kindref="member">nrf_power_task_trigger</ref>(NRF_POWER_Type<sp/>*<sp/>p_reg,<sp/><ref refid="group__nrf__power__hal_1ga6452fff919765c34921624d3e73eb650" kindref="member">nrf_power_task_t</ref><sp/>task);</highlight></codeline>
<codeline lineno="607"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="608"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="609"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>returning<sp/>the<sp/>address<sp/>of<sp/>a<sp/>specific<sp/>POWER<sp/>task<sp/>register.</highlight></codeline>
<codeline lineno="610"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="611"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="612"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>task<sp/><sp/>Task.</highlight></codeline>
<codeline lineno="613"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="614"><highlight class="comment"><sp/>*<sp/>@return<sp/>Task<sp/>address.</highlight></codeline>
<codeline lineno="615"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="616"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__power__hal_1gac67343a2c966a797945d3d447e8d4458" kindref="member">nrf_power_task_address_get</ref>(NRF_POWER_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__power__hal_1ga6452fff919765c34921624d3e73eb650" kindref="member">nrf_power_task_t</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>task);</highlight></codeline>
<codeline lineno="618"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="619"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="620"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>clearing<sp/>a<sp/>specific<sp/>event.</highlight></codeline>
<codeline lineno="621"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="622"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="623"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>event<sp/>Event.</highlight></codeline>
<codeline lineno="624"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="625"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__power__hal_1ga456bf19c1d3c0411e33af18fa037481c" kindref="member">nrf_power_event_clear</ref>(NRF_POWER_Type<sp/>*<sp/>p_reg,<sp/><ref refid="group__nrf__power__hal_1ga64bec8dee5aca9c1cd233b251da21ab4" kindref="member">nrf_power_event_t</ref><sp/>event);</highlight></codeline>
<codeline lineno="626"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="627"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="628"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>retrieving<sp/>the<sp/>state<sp/>of<sp/>the<sp/>POWER<sp/>event.</highlight></codeline>
<codeline lineno="629"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="630"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="631"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>event<sp/>Event<sp/>to<sp/>be<sp/>checked.</highlight></codeline>
<codeline lineno="632"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="633"><highlight class="comment"><sp/>*<sp/>@retval<sp/>true<sp/><sp/>The<sp/>event<sp/>has<sp/>been<sp/>generated.</highlight></codeline>
<codeline lineno="634"><highlight class="comment"><sp/>*<sp/>@retval<sp/>false<sp/>The<sp/>event<sp/>has<sp/>not<sp/>been<sp/>generated.</highlight></codeline>
<codeline lineno="635"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="636"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrf__power__hal_1ga29b2e7267a49a0d04b1f3bf4edc101e8" kindref="member">nrf_power_event_check</ref>(NRF_POWER_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,<sp/><ref refid="group__nrf__power__hal_1ga64bec8dee5aca9c1cd233b251da21ab4" kindref="member">nrf_power_event_t</ref><sp/>event);</highlight></codeline>
<codeline lineno="637"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="638"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="639"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>and<sp/>clearing<sp/>the<sp/>state<sp/>of<sp/>specific<sp/>event</highlight></codeline>
<codeline lineno="640"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="641"><highlight class="comment"><sp/>*<sp/>This<sp/>function<sp/>checks<sp/>the<sp/>state<sp/>of<sp/>the<sp/>event<sp/>and<sp/>clears<sp/>it.</highlight></codeline>
<codeline lineno="642"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="643"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="644"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>event<sp/>Event.</highlight></codeline>
<codeline lineno="645"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="646"><highlight class="comment"><sp/>*<sp/>@retval<sp/>true<sp/><sp/>The<sp/>event<sp/>was<sp/>set.</highlight></codeline>
<codeline lineno="647"><highlight class="comment"><sp/>*<sp/>@retval<sp/>false<sp/>The<sp/>event<sp/>was<sp/>not<sp/>set.</highlight></codeline>
<codeline lineno="648"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="649"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrf__power__hal_1ga399be233fc8bfd540739e61c552a0bf4" kindref="member">nrf_power_event_get_and_clear</ref>(NRF_POWER_Type<sp/>*<sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__power__hal_1ga64bec8dee5aca9c1cd233b251da21ab4" kindref="member">nrf_power_event_t</ref><sp/>event);</highlight></codeline>
<codeline lineno="651"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="652"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="653"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>returning<sp/>the<sp/>address<sp/>of<sp/>a<sp/>specific<sp/>POWER<sp/>event<sp/>register.</highlight></codeline>
<codeline lineno="654"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="655"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="656"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>event<sp/>Event.</highlight></codeline>
<codeline lineno="657"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="658"><highlight class="comment"><sp/>*<sp/>@return<sp/>Address.</highlight></codeline>
<codeline lineno="659"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="660"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__power__hal_1gabe16d110629d651d4bd714bb5f9e915f" kindref="member">nrf_power_event_address_get</ref>(NRF_POWER_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__power__hal_1ga64bec8dee5aca9c1cd233b251da21ab4" kindref="member">nrf_power_event_t</ref><sp/><sp/><sp/><sp/><sp/><sp/>event);</highlight></codeline>
<codeline lineno="662"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="663"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="664"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>enabling<sp/>selected<sp/>interrupts.</highlight></codeline>
<codeline lineno="665"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="666"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="667"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>mask<sp/><sp/>Mask<sp/>of<sp/>interrupts<sp/>to<sp/>be<sp/>enabled.</highlight></codeline>
<codeline lineno="668"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Use<sp/>@ref<sp/>nrf_power_int_mask_t<sp/>values<sp/>for<sp/>bit<sp/>masking.</highlight></codeline>
<codeline lineno="669"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="670"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__power__hal_1gab853a595fd79cd1d1019cdd22a30d2fe" kindref="member">nrf_power_int_enable</ref>(NRF_POWER_Type<sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>mask);</highlight></codeline>
<codeline lineno="671"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="672"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="673"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>checking<sp/>if<sp/>the<sp/>specified<sp/>interrupts<sp/>are<sp/>enabled.</highlight></codeline>
<codeline lineno="674"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="675"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="676"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>mask<sp/><sp/>Mask<sp/>of<sp/>interrupts<sp/>to<sp/>be<sp/>checked.</highlight></codeline>
<codeline lineno="677"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Use<sp/>@ref<sp/>nrf_power_int_mask_t<sp/>values<sp/>for<sp/>bit<sp/>masking.</highlight></codeline>
<codeline lineno="678"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="679"><highlight class="comment"><sp/>*<sp/>@return<sp/>Mask<sp/>of<sp/>enabled<sp/>interrupts.</highlight></codeline>
<codeline lineno="680"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="681"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__power__hal_1gae488f7aab5a977eca67b729098246f48" kindref="member">nrf_power_int_enable_check</ref>(NRF_POWER_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>mask);</highlight></codeline>
<codeline lineno="682"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="683"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="684"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>retrieving<sp/>the<sp/>information<sp/>about<sp/>enabled<sp/>interrupts.</highlight></codeline>
<codeline lineno="685"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="686"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="687"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="688"><highlight class="comment"><sp/>*<sp/>@return<sp/>The<sp/>flags<sp/>of<sp/>enabled<sp/>interrupts.</highlight></codeline>
<codeline lineno="689"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="690"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__power__hal_1gacc0a9e5e2e5d03b960d723d6ddeb1380" kindref="member">nrf_power_int_enable_get</ref>(NRF_POWER_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="691"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="692"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="693"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>disabling<sp/>selected<sp/>interrupts.</highlight></codeline>
<codeline lineno="694"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="695"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="696"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>mask<sp/><sp/>Mask<sp/>of<sp/>interrupts<sp/>to<sp/>be<sp/>disabled.</highlight></codeline>
<codeline lineno="697"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Use<sp/>@ref<sp/>nrf_power_int_mask_t<sp/>values<sp/>for<sp/>bit<sp/>masking.</highlight></codeline>
<codeline lineno="698"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="699"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__power__hal_1ga2a420ae01a7fa45da69afe710154891d" kindref="member">nrf_power_int_disable</ref>(NRF_POWER_Type<sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>mask);</highlight></codeline>
<codeline lineno="700"><highlight class="normal"></highlight></codeline>
<codeline lineno="701"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(DPPI_PRESENT)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="702"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="703"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>the<sp/>subscribe<sp/>configuration<sp/>for<sp/>a<sp/>given</highlight></codeline>
<codeline lineno="704"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>POWER<sp/>task.</highlight></codeline>
<codeline lineno="705"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="706"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="707"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>task<sp/><sp/><sp/><sp/>Task<sp/>for<sp/>which<sp/>to<sp/>set<sp/>the<sp/>configuration.</highlight></codeline>
<codeline lineno="708"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>channel<sp/>Channel<sp/>through<sp/>which<sp/>to<sp/>subscribe<sp/>events.</highlight></codeline>
<codeline lineno="709"><highlight class="comment"><sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="710"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__power__hal_1ga283b45cae85cd27280003f1b550ea077" kindref="member">nrf_power_subscribe_set</ref>(NRF_POWER_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__power__hal_1ga6452fff919765c34921624d3e73eb650" kindref="member">nrf_power_task_t</ref><sp/>task,</highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>channel);</highlight></codeline>
<codeline lineno="713"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="714"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="715"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>clearing<sp/>the<sp/>subscribe<sp/>configuration<sp/>for<sp/>a<sp/>given</highlight></codeline>
<codeline lineno="716"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>POWER<sp/>task.</highlight></codeline>
<codeline lineno="717"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="718"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="719"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>task<sp/><sp/>Task<sp/>for<sp/>which<sp/>to<sp/>clear<sp/>the<sp/>configuration.</highlight></codeline>
<codeline lineno="720"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="721"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__power__hal_1ga4967e295c49be7edc371ac01c3922889" kindref="member">nrf_power_subscribe_clear</ref>(NRF_POWER_Type<sp/>*<sp/>p_reg,<sp/><ref refid="group__nrf__power__hal_1ga6452fff919765c34921624d3e73eb650" kindref="member">nrf_power_task_t</ref><sp/>task);</highlight></codeline>
<codeline lineno="722"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="723"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="724"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>the<sp/>publish<sp/>configuration<sp/>for<sp/>a<sp/>given</highlight></codeline>
<codeline lineno="725"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>POWER<sp/>event.</highlight></codeline>
<codeline lineno="726"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="727"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="728"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>event<sp/><sp/><sp/>Event<sp/>for<sp/>which<sp/>to<sp/>set<sp/>the<sp/>configuration.</highlight></codeline>
<codeline lineno="729"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>channel<sp/>Channel<sp/>through<sp/>which<sp/>to<sp/>publish<sp/>the<sp/>event.</highlight></codeline>
<codeline lineno="730"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="731"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__power__hal_1gabcd34095e7c5603eb949b320308f3b9b" kindref="member">nrf_power_publish_set</ref>(NRF_POWER_Type<sp/>*<sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__power__hal_1ga64bec8dee5aca9c1cd233b251da21ab4" kindref="member">nrf_power_event_t</ref><sp/>event,</highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>channel);</highlight></codeline>
<codeline lineno="734"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="735"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="736"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>clearing<sp/>the<sp/>publish<sp/>configuration<sp/>for<sp/>a<sp/>given</highlight></codeline>
<codeline lineno="737"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>POWER<sp/>event.</highlight></codeline>
<codeline lineno="738"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="739"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="740"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>event<sp/>Event<sp/>for<sp/>which<sp/>to<sp/>clear<sp/>the<sp/>configuration.</highlight></codeline>
<codeline lineno="741"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="742"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__power__hal_1ga2583429f3cb12dba3479fcbdd028ca8f" kindref="member">nrf_power_publish_clear</ref>(NRF_POWER_Type<sp/>*<sp/>p_reg,<sp/><ref refid="group__nrf__power__hal_1ga64bec8dee5aca9c1cd233b251da21ab4" kindref="member">nrf_power_event_t</ref><sp/>event);</highlight></codeline>
<codeline lineno="743"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>defined(DPPI_PRESENT)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="744"><highlight class="normal"></highlight></codeline>
<codeline lineno="745"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_POWER_HAS_RESETREAS</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="746"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="747"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>the<sp/>reset<sp/>reason<sp/>bitmask.</highlight></codeline>
<codeline lineno="748"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="749"><highlight class="comment"><sp/>*<sp/>This<sp/>function<sp/>returns<sp/>the<sp/>reset<sp/>reason<sp/>bitmask.</highlight></codeline>
<codeline lineno="750"><highlight class="comment"><sp/>*<sp/>Unless<sp/>cleared,<sp/>the<sp/>RESETREAS<sp/>register<sp/>is<sp/>cumulative.</highlight></codeline>
<codeline lineno="751"><highlight class="comment"><sp/>*<sp/>A<sp/>field<sp/>is<sp/>cleared<sp/>by<sp/>writing<sp/>&apos;1&apos;<sp/>to<sp/>it<sp/>(see<sp/>@ref<sp/>nrf_power_resetreas_clear).</highlight></codeline>
<codeline lineno="752"><highlight class="comment"><sp/>*<sp/>If<sp/>none<sp/>of<sp/>the<sp/>reset<sp/>sources<sp/>is<sp/>flagged,</highlight></codeline>
<codeline lineno="753"><highlight class="comment"><sp/>*<sp/>the<sp/>chip<sp/>was<sp/>reset<sp/>from<sp/>the<sp/>on-chip<sp/>reset<sp/>generator,</highlight></codeline>
<codeline lineno="754"><highlight class="comment"><sp/>*<sp/>which<sp/>indicates<sp/>a<sp/>power-on-reset<sp/>or<sp/>a<sp/>brown<sp/>out<sp/>reset.</highlight></codeline>
<codeline lineno="755"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="756"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="757"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="758"><highlight class="comment"><sp/>*<sp/>@return<sp/>The<sp/>mask<sp/>of<sp/>reset<sp/>reasons<sp/>constructed<sp/>with<sp/>@ref<sp/>nrf_power_resetreas_mask_t.</highlight></codeline>
<codeline lineno="759"><highlight class="comment"><sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="760"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__power__hal_1gaad306f69122fdd920fbf4c7e87745222" kindref="member">nrf_power_resetreas_get</ref>(NRF_POWER_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="761"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="762"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="763"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>clearing<sp/>the<sp/>selected<sp/>reset<sp/>reason<sp/>field.</highlight></codeline>
<codeline lineno="764"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="765"><highlight class="comment"><sp/>*<sp/>This<sp/>function<sp/>clears<sp/>the<sp/>selected<sp/>reset<sp/>reason<sp/>field.</highlight></codeline>
<codeline lineno="766"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="767"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="768"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>mask<sp/><sp/>The<sp/>mask<sp/>constructed<sp/>from<sp/>@ref<sp/>nrf_power_resetreas_mask_t<sp/>enumerator<sp/>values.</highlight></codeline>
<codeline lineno="769"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="770"><highlight class="comment"><sp/>*<sp/>@sa<sp/>nrf_power_resetreas_get</highlight></codeline>
<codeline lineno="771"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="772"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__power__hal_1ga47102dd335c0ecb520ed0cd70c7dc143" kindref="member">nrf_power_resetreas_clear</ref>(NRF_POWER_Type<sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>mask);</highlight></codeline>
<codeline lineno="773"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRF_POWER_HAS_RESETREAS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="774"><highlight class="normal"></highlight></codeline>
<codeline lineno="775"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(POWER_POWERSTATUS_LTEMODEM_Msk)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="776"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="777"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>power<sp/>status<sp/>of<sp/>the<sp/>LTE<sp/>Modem<sp/>domain.</highlight></codeline>
<codeline lineno="778"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="779"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="780"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="781"><highlight class="comment"><sp/>*<sp/>@retval<sp/>true<sp/><sp/>The<sp/>LTE<sp/>Modem<sp/>domain<sp/>is<sp/>powered<sp/>on.</highlight></codeline>
<codeline lineno="782"><highlight class="comment"><sp/>*<sp/>@retval<sp/>false<sp/>The<sp/>LTE<sp/>Modem<sp/>domain<sp/>is<sp/>powered<sp/>off.</highlight></codeline>
<codeline lineno="783"><highlight class="comment"><sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="784"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrf__power__hal_1gac7a0dd99ee51b1f040a2f9845fd31cea" kindref="member">nrf_power_powerstatus_get</ref>(NRF_POWER_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="785"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="786"><highlight class="normal"></highlight></codeline>
<codeline lineno="787"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(POWER_RAMSTATUS_RAMBLOCK0_Msk)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="788"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="789"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>the<sp/>RAMSTATUS<sp/>register.</highlight></codeline>
<codeline lineno="790"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="791"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="792"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="793"><highlight class="comment"><sp/>*<sp/>@return<sp/>Value<sp/>with<sp/>bits<sp/>set<sp/>according<sp/>to<sp/>the<sp/>masks<sp/>in<sp/>@ref<sp/>nrf_power_ramblock_mask_t.</highlight></codeline>
<codeline lineno="794"><highlight class="comment"><sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="795"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__power__hal_1ga2ef11c1ac5edea30bcd95716ee8a2cec" kindref="member">nrf_power_ramstatus_get</ref>(NRF_POWER_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="796"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>defined(POWER_RAMSTATUS_RAMBLOCK0_Msk)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="797"><highlight class="normal"></highlight></codeline>
<codeline lineno="798"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(POWER_SYSTEMOFF_SYSTEMOFF_Enter)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="799"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="800"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>going<sp/>into<sp/>System<sp/>OFF<sp/>mode.</highlight></codeline>
<codeline lineno="801"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="802"><highlight class="comment"><sp/>*<sp/>This<sp/>function<sp/>puts<sp/>the<sp/>CPU<sp/>in<sp/>System<sp/>OFF<sp/>mode.</highlight></codeline>
<codeline lineno="803"><highlight class="comment"><sp/>*<sp/>The<sp/>only<sp/>way<sp/>to<sp/>wake<sp/>up<sp/>the<sp/>CPU<sp/>is<sp/>by<sp/>reset.</highlight></codeline>
<codeline lineno="804"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="805"><highlight class="comment"><sp/>*<sp/>@note<sp/>This<sp/>function<sp/>never<sp/>returns.</highlight></codeline>
<codeline lineno="806"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="807"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="808"><highlight class="comment"><sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="809"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>nrf_power_system_off(NRF_POWER_Type<sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="810"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>defined(POWER_SYSTEMOFF_SYSTEMOFF_Enter)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="811"><highlight class="normal"></highlight></codeline>
<codeline lineno="812"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_POWER_HAS_POFCON</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="813"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="814"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>the<sp/>power<sp/>failure<sp/>comparator<sp/>configuration.</highlight></codeline>
<codeline lineno="815"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="816"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="817"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>enable<sp/>True<sp/>if<sp/>the<sp/>power<sp/>failure<sp/>comparator<sp/>is<sp/>to<sp/>be<sp/>enabled,<sp/>false<sp/>otherwise.</highlight></codeline>
<codeline lineno="818"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>thr<sp/><sp/><sp/><sp/>Voltage<sp/>threshold<sp/>value.</highlight></codeline>
<codeline lineno="819"><highlight class="comment"><sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="820"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__power__hal_1ga1447b9e52caebb0ecf092a90544ecbe6" kindref="member">nrf_power_pofcon_set</ref>(NRF_POWER_Type<sp/>*<sp/><sp/><sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>enable,</highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__power__hal_1gacc0f863f34d48f5975564a11975dda2e" kindref="member">nrf_power_pof_thr_t</ref><sp/>thr);</highlight></codeline>
<codeline lineno="823"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="824"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="825"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>the<sp/>power<sp/>failure<sp/>comparator<sp/>configuration.</highlight></codeline>
<codeline lineno="826"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="827"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/><sp/>p_reg<sp/><sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="828"><highlight class="comment"><sp/>*<sp/>@param[out]<sp/>p_enabled<sp/>Function<sp/>sets<sp/>this<sp/>boolean<sp/>variable<sp/>to<sp/>true</highlight></codeline>
<codeline lineno="829"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>power<sp/>failure<sp/>comparator<sp/>is<sp/>enabled.</highlight></codeline>
<codeline lineno="830"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>pointer<sp/>can<sp/>be<sp/>NULL<sp/>if<sp/>we<sp/>do<sp/>not<sp/>need<sp/>this<sp/>information.</highlight></codeline>
<codeline lineno="831"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="832"><highlight class="comment"><sp/>*<sp/>@return<sp/>Threshold<sp/>setting<sp/>for<sp/>power<sp/>failure<sp/>comparator.</highlight></codeline>
<codeline lineno="833"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="834"><highlight class="normal">NRF_STATIC_INLINE<sp/><ref refid="group__nrf__power__hal_1gacc0f863f34d48f5975564a11975dda2e" kindref="member">nrf_power_pof_thr_t</ref><sp/><ref refid="group__nrf__power__hal_1ga2aab621e2142289fe639fdec013dfe3f" kindref="member">nrf_power_pofcon_get</ref>(NRF_POWER_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_enabled);</highlight></codeline>
<codeline lineno="836"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRF_POWER_HAS_POFCON</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="837"><highlight class="normal"></highlight></codeline>
<codeline lineno="838"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_POWER_HAS_POFCON_VDDH</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="839"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="840"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>the<sp/>VDDH<sp/>power<sp/>failure<sp/>comparator<sp/>threshold.</highlight></codeline>
<codeline lineno="841"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="842"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="843"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>thr<sp/><sp/><sp/>Threshold<sp/>to<sp/>be<sp/>set.</highlight></codeline>
<codeline lineno="844"><highlight class="comment"><sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="845"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__power__hal_1ga570aa25425f8bebefc433bd031e7f080" kindref="member">nrf_power_pofcon_vddh_set</ref>(NRF_POWER_Type<sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__power__hal_1ga3dfa1a1f6a6daaab25b7a47bbf42969b" kindref="member">nrf_power_pof_thrvddh_t</ref><sp/>thr);</highlight></codeline>
<codeline lineno="847"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="848"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="849"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>the<sp/>VDDH<sp/>power<sp/>failure<sp/>comparator<sp/>threshold.</highlight></codeline>
<codeline lineno="850"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="851"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="852"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="853"><highlight class="comment"><sp/>*<sp/>@return<sp/>VDDH<sp/>threshold<sp/>currently<sp/>configured.</highlight></codeline>
<codeline lineno="854"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="855"><highlight class="normal">NRF_STATIC_INLINE<sp/><ref refid="group__nrf__power__hal_1ga3dfa1a1f6a6daaab25b7a47bbf42969b" kindref="member">nrf_power_pof_thrvddh_t</ref><sp/><ref refid="group__nrf__power__hal_1ga91a4e59a0eef52900085ee9e3001f74c" kindref="member">nrf_power_pofcon_vddh_get</ref>(NRF_POWER_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="856"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRF_POWER_HAS_POFCON_VDDH</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="857"><highlight class="normal"></highlight></codeline>
<codeline lineno="858"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_POWER_HAS_GPREGRET</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="859"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="860"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>the<sp/>general<sp/>purpose<sp/>retention<sp/>register.</highlight></codeline>
<codeline lineno="861"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="862"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="863"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>reg_num<sp/>General<sp/>purpose<sp/>retention<sp/>register<sp/>number.</highlight></codeline>
<codeline lineno="864"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>val<sp/><sp/><sp/><sp/><sp/>Value<sp/>to<sp/>be<sp/>set<sp/>in<sp/>the<sp/>register.</highlight></codeline>
<codeline lineno="865"><highlight class="comment"><sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="866"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__power__hal_1ga29711581b57c9223bb2286d39690ef65" kindref="member">nrf_power_gpregret_set</ref>(NRF_POWER_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="867"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reg_num,</highlight></codeline>
<codeline lineno="868"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>val);</highlight></codeline>
<codeline lineno="869"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="870"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="871"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>general<sp/>purpose<sp/>retention<sp/>register.</highlight></codeline>
<codeline lineno="872"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="873"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="874"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>reg_num<sp/>General<sp/>purpose<sp/>retention<sp/>register<sp/>number.</highlight></codeline>
<codeline lineno="875"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="876"><highlight class="comment"><sp/>*<sp/>@return<sp/>Value<sp/>from<sp/>the<sp/>register.</highlight></codeline>
<codeline lineno="877"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="878"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__power__hal_1ga91bbc3e3c6803e42e95b48903dd2b030" kindref="member">nrf_power_gpregret_get</ref>(NRF_POWER_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>reg_num);</highlight></codeline>
<codeline lineno="879"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRF_POWER_HAS_GPREGRET</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="880"><highlight class="normal"></highlight></codeline>
<codeline lineno="881"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_POWER_HAS_DCDCEN</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="882"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="883"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Enable<sp/>or<sp/>disable<sp/>DCDC<sp/>converter</highlight></codeline>
<codeline lineno="884"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="885"><highlight class="comment"><sp/>*<sp/>@note<sp/>If<sp/>the<sp/>device<sp/>consist<sp/>of<sp/>high<sp/>voltage<sp/>power<sp/>input<sp/>(VDDH),<sp/>this<sp/>setting</highlight></codeline>
<codeline lineno="886"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>will<sp/>relate<sp/>to<sp/>the<sp/>converter<sp/>on<sp/>low<sp/>voltage<sp/>side<sp/>(1.3<sp/>V<sp/>output).</highlight></codeline>
<codeline lineno="887"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="888"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="889"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>enable<sp/>True<sp/>if<sp/>DCDC<sp/>converter<sp/>is<sp/>to<sp/>be<sp/>enabled,<sp/>false<sp/>otherwise.</highlight></codeline>
<codeline lineno="890"><highlight class="comment"><sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="891"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__power__hal_1ga6b3e6f1754daf543262eb6d4233be975" kindref="member">nrf_power_dcdcen_set</ref>(NRF_POWER_Type<sp/>*<sp/>p_reg,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>enable);</highlight></codeline>
<codeline lineno="892"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="893"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="894"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>the<sp/>state<sp/>of<sp/>the<sp/>DCDC<sp/>converter.</highlight></codeline>
<codeline lineno="895"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="896"><highlight class="comment"><sp/>*<sp/>@note<sp/>If<sp/>the<sp/>device<sp/>consist<sp/>of<sp/>high<sp/>voltage<sp/>power<sp/>input<sp/>(VDDH),<sp/>this<sp/>setting</highlight></codeline>
<codeline lineno="897"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>will<sp/>relate<sp/>to<sp/>the<sp/>converter<sp/>on<sp/>low<sp/>voltage<sp/>side<sp/>(1.3<sp/>V<sp/>output).</highlight></codeline>
<codeline lineno="898"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="899"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="900"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="901"><highlight class="comment"><sp/>*<sp/>@retval<sp/>true<sp/><sp/>Converter<sp/>is<sp/>enabled.</highlight></codeline>
<codeline lineno="902"><highlight class="comment"><sp/>*<sp/>@retval<sp/>false<sp/>Converter<sp/>is<sp/>disabled.</highlight></codeline>
<codeline lineno="903"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="904"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrf__power__hal_1gab625f43f64efc077da3b502786346400" kindref="member">nrf_power_dcdcen_get</ref>(NRF_POWER_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="905"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRF_POWER_HAS_DCDCEN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="906"><highlight class="normal"></highlight></codeline>
<codeline lineno="907"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(POWER_RAM_POWER_S0POWER_Msk)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="908"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="909"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Turn<sp/>ON<sp/>sections<sp/>in<sp/>the<sp/>selected<sp/>RAM<sp/>block.</highlight></codeline>
<codeline lineno="910"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="911"><highlight class="comment"><sp/>*<sp/>This<sp/>function<sp/>turns<sp/>ON<sp/>several<sp/>sections<sp/>in<sp/>one<sp/>block<sp/>and<sp/>also<sp/>block<sp/>retention.</highlight></codeline>
<codeline lineno="912"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="913"><highlight class="comment"><sp/>*<sp/>@sa<sp/>nrf_power_rampower_mask_t</highlight></codeline>
<codeline lineno="914"><highlight class="comment"><sp/>*<sp/>@sa<sp/>nrf_power_rampower_mask_off</highlight></codeline>
<codeline lineno="915"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="916"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="917"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>block<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RAM<sp/>block<sp/>index.</highlight></codeline>
<codeline lineno="918"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>section_mask<sp/>Mask<sp/>of<sp/>the<sp/>sections<sp/>created<sp/>by<sp/>merging</highlight></codeline>
<codeline lineno="919"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>@ref<sp/>nrf_power_rampower_mask_t<sp/>flags.</highlight></codeline>
<codeline lineno="920"><highlight class="comment"><sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="921"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__power__hal_1ga5d09133631495b690df29a092a6057a4" kindref="member">nrf_power_rampower_mask_on</ref>(NRF_POWER_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="922"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>block,</highlight></codeline>
<codeline lineno="923"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>section_mask);</highlight></codeline>
<codeline lineno="924"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="925"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="926"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Turn<sp/>ON<sp/>sections<sp/>in<sp/>the<sp/>selected<sp/>RAM<sp/>block.</highlight></codeline>
<codeline lineno="927"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="928"><highlight class="comment"><sp/>*<sp/>This<sp/>function<sp/>turns<sp/>OFF<sp/>several<sp/>sections<sp/>in<sp/>one<sp/>block<sp/>and<sp/>also<sp/>block<sp/>retention.</highlight></codeline>
<codeline lineno="929"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="930"><highlight class="comment"><sp/>*<sp/>@sa<sp/>nrf_power_rampower_mask_t</highlight></codeline>
<codeline lineno="931"><highlight class="comment"><sp/>*<sp/>@sa<sp/>nrf_power_rampower_mask_off</highlight></codeline>
<codeline lineno="932"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="933"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="934"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>block<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RAM<sp/>block<sp/>index.</highlight></codeline>
<codeline lineno="935"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>section_mask<sp/>Mask<sp/>of<sp/>the<sp/>sections<sp/>created<sp/>by<sp/>merging</highlight></codeline>
<codeline lineno="936"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>@ref<sp/>nrf_power_rampower_mask_t<sp/>flags.</highlight></codeline>
<codeline lineno="937"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="938"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__power__hal_1gaee6c27678fe7f87ea8bc778c706245e6" kindref="member">nrf_power_rampower_mask_off</ref>(NRF_POWER_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="939"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>block,</highlight></codeline>
<codeline lineno="940"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>section_mask);</highlight></codeline>
<codeline lineno="941"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="942"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="943"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>the<sp/>ON<sp/>mask<sp/>and<sp/>retention<sp/>sections<sp/>in<sp/>the<sp/>selected<sp/>RAM<sp/>block.</highlight></codeline>
<codeline lineno="944"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="945"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="946"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>block<sp/>RAM<sp/>block<sp/>index.</highlight></codeline>
<codeline lineno="947"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="948"><highlight class="comment"><sp/>*<sp/>@return<sp/>Mask<sp/>of<sp/>sections<sp/>state<sp/>composed<sp/>from<sp/>@ref<sp/>nrf_power_rampower_mask_t<sp/>flags.</highlight></codeline>
<codeline lineno="949"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="950"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__power__hal_1gac2435b18ef4c25f807b1fce2eb7bb50d" kindref="member">nrf_power_rampower_mask_get</ref>(NRF_POWER_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,<sp/>uint8_t<sp/>block);</highlight></codeline>
<codeline lineno="951"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>defined(POWER_RAM_POWER_S0POWER_Msk)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="952"><highlight class="normal"></highlight></codeline>
<codeline lineno="953"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_POWER_HAS_DCDCEN_VDDH</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="954"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="955"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>enabling<sp/>or<sp/>disabling<sp/>the<sp/>DCDC<sp/>converter<sp/>on<sp/>VDDH.</highlight></codeline>
<codeline lineno="956"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="957"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="958"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>enable<sp/>True<sp/>if<sp/>DCDC<sp/>converter<sp/>on<sp/>VDDH<sp/>is<sp/>to<sp/>be<sp/>enabled,<sp/>false<sp/>otherwise.</highlight></codeline>
<codeline lineno="959"><highlight class="comment"><sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="960"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__power__hal_1ga16853affef979cdc62291b811f25cc46" kindref="member">nrf_power_dcdcen_vddh_set</ref>(NRF_POWER_Type<sp/>*<sp/>p_reg,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>enable);</highlight></codeline>
<codeline lineno="961"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="962"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="963"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>the<sp/>state<sp/>of<sp/>DCDC<sp/>converter<sp/>on<sp/>VDDH.</highlight></codeline>
<codeline lineno="964"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="965"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="966"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="967"><highlight class="comment"><sp/>*<sp/>@retval<sp/>true<sp/><sp/>Converter<sp/>is<sp/>enabled.</highlight></codeline>
<codeline lineno="968"><highlight class="comment"><sp/>*<sp/>@retval<sp/>false<sp/>Converter<sp/>is<sp/>disabled.</highlight></codeline>
<codeline lineno="969"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="970"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrf__power__hal_1gaa4132dcc882fb84520a8046ab88f8e8f" kindref="member">nrf_power_dcdcen_vddh_get</ref>(NRF_POWER_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="971"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRF_POWER_HAS_DCDCEN_VDDH</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="972"><highlight class="normal"></highlight></codeline>
<codeline lineno="973"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_POWER_HAS_MAINREGSTATUS</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="974"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="975"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>the<sp/>main<sp/>supply<sp/>status.</highlight></codeline>
<codeline lineno="976"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="977"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="978"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="979"><highlight class="comment"><sp/>*<sp/>@return<sp/>The<sp/>current<sp/>main<sp/>supply<sp/>status.</highlight></codeline>
<codeline lineno="980"><highlight class="comment"><sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="981"><highlight class="normal">NRF_STATIC_INLINE</highlight></codeline>
<codeline lineno="982"><highlight class="normal"><ref refid="group__nrf__power__hal_1ga4c4e3a1505af5d72f3ccd16cf986abd8" kindref="member">nrf_power_mainregstatus_t</ref><sp/><ref refid="group__nrf__power__hal_1ga835338600525d9f90b302fd45b66b417" kindref="member">nrf_power_mainregstatus_get</ref>(NRF_POWER_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="983"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRF_POWER_HAS_MAINREGSTATUS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="984"><highlight class="normal"></highlight></codeline>
<codeline lineno="985"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_POWER_HAS_USBREG</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="986"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="987"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>the<sp/>whole<sp/>USBREGSTATUS<sp/>register.</highlight></codeline>
<codeline lineno="988"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="989"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="990"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="991"><highlight class="comment"><sp/>*<sp/>@return<sp/>The<sp/>USBREGSTATUS<sp/>register<sp/>value.</highlight></codeline>
<codeline lineno="992"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Use<sp/>@ref<sp/>nrf_power_usbregstatus_mask_t<sp/>values<sp/>for<sp/>bit<sp/>masking.</highlight></codeline>
<codeline lineno="993"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="994"><highlight class="comment"><sp/>*<sp/>@sa<sp/>nrf_power_usbregstatus_vbusdet_get</highlight></codeline>
<codeline lineno="995"><highlight class="comment"><sp/>*<sp/>@sa<sp/>nrf_power_usbregstatus_outrdy_get</highlight></codeline>
<codeline lineno="996"><highlight class="comment"><sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="997"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__power__hal_1ga7e5fad60a4dce6da9602068fd5fd9c28" kindref="member">nrf_power_usbregstatus_get</ref>(NRF_POWER_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="998"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="999"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="1000"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>the<sp/>VBUS<sp/>input<sp/>detection<sp/>status.</highlight></codeline>
<codeline lineno="1001"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1002"><highlight class="comment"><sp/>*<sp/>USBDETECTED<sp/>and<sp/>USBREMOVED<sp/>events<sp/>are<sp/>derived<sp/>from<sp/>this<sp/>information</highlight></codeline>
<codeline lineno="1003"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1004"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="1005"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1006"><highlight class="comment"><sp/>*<sp/>@retval<sp/>false<sp/>VBUS<sp/>voltage<sp/>below<sp/>valid<sp/>threshold.</highlight></codeline>
<codeline lineno="1007"><highlight class="comment"><sp/>*<sp/>@retval<sp/>true<sp/><sp/>VBUS<sp/>voltage<sp/>above<sp/>valid<sp/>threshold.</highlight></codeline>
<codeline lineno="1008"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1009"><highlight class="comment"><sp/>*<sp/>@sa<sp/>nrf_power_usbregstatus_get</highlight></codeline>
<codeline lineno="1010"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1011"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrf__power__hal_1gad3a706ce20f081231917ebb96d8d43db" kindref="member">nrf_power_usbregstatus_vbusdet_get</ref>(NRF_POWER_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="1012"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1013"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="1014"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>the<sp/>state<sp/>of<sp/>the<sp/>elapsed<sp/>time<sp/>for<sp/>the<sp/>USB<sp/>supply<sp/>output<sp/>settling.</highlight></codeline>
<codeline lineno="1015"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1016"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="1017"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1018"><highlight class="comment"><sp/>*<sp/>@retval<sp/>false<sp/>USBREG<sp/>output<sp/>settling<sp/>time<sp/>not<sp/>elapsed.</highlight></codeline>
<codeline lineno="1019"><highlight class="comment"><sp/>*<sp/>@retval<sp/>true<sp/><sp/>USBREG<sp/>output<sp/>settling<sp/>time<sp/>elapsed</highlight></codeline>
<codeline lineno="1020"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(same<sp/>information<sp/>as<sp/>USBPWRRDY<sp/>event).</highlight></codeline>
<codeline lineno="1021"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1022"><highlight class="comment"><sp/>*<sp/>@sa<sp/>nrf_power_usbregstatus_get</highlight></codeline>
<codeline lineno="1023"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1024"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrf__power__hal_1gad6fd5ec05e096da4231aa53d77ba03da" kindref="member">nrf_power_usbregstatus_outrdy_get</ref>(NRF_POWER_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="1025"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRF_POWER_HAS_USBREG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1026"><highlight class="normal"></highlight></codeline>
<codeline lineno="1027"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_POWER_HAS_ABB</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1028"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="1029"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>checking<sp/>whether<sp/>the<sp/>specified<sp/>ABB<sp/>domain<sp/>is<sp/>busy.</highlight></codeline>
<codeline lineno="1030"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1031"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/><sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="1032"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>domain_idx<sp/>Index<sp/>of<sp/>ABB<sp/>domain.</highlight></codeline>
<codeline lineno="1033"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1034"><highlight class="comment"><sp/>*<sp/>@retval<sp/>true<sp/><sp/>The<sp/>ABB<sp/>is<sp/>busy<sp/>with<sp/>applying<sp/>the<sp/>new<sp/>operating<sp/>point.</highlight></codeline>
<codeline lineno="1035"><highlight class="comment"><sp/>*<sp/>@retval<sp/>false<sp/>The<sp/>ABB<sp/>is<sp/>ready<sp/>to<sp/>accept<sp/>the<sp/>new<sp/>operating<sp/>point.</highlight></codeline>
<codeline lineno="1036"><highlight class="comment"><sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1037"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrf__power__hal_1gaaa1f3fb61935c73926fb3cfb83bac042" kindref="member">nrf_power_abb_busy_check</ref>(NRF_POWER_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,<sp/>uint8_t<sp/>domain_idx);</highlight></codeline>
<codeline lineno="1038"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1039"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="1040"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>configuration<sp/>of<sp/>the<sp/>operating<sp/>point<sp/>for<sp/>the<sp/>specified<sp/>ABB<sp/>domain.</highlight></codeline>
<codeline lineno="1041"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1042"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/><sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="1043"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>domain_idx<sp/>Index<sp/>of<sp/>ABB<sp/>domain.</highlight></codeline>
<codeline lineno="1044"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_config<sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>with<sp/>configuration<sp/>to<sp/>be<sp/>set.</highlight></codeline>
<codeline lineno="1045"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1046"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__power__hal_1ga7992c27e5e710edda444097fd8ef2099" kindref="member">nrf_power_abb_config_set</ref>(NRF_POWER_Type<sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="1047"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>domain_idx,</highlight></codeline>
<codeline lineno="1048"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structnrf__power__abb__config__t" kindref="compound">nrf_power_abb_config_t</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_config);</highlight></codeline>
<codeline lineno="1049"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1050"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="1051"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>configuration<sp/>of<sp/>the<sp/>operating<sp/>point<sp/>for<sp/>the<sp/>specified<sp/>ABB<sp/>domain.</highlight></codeline>
<codeline lineno="1052"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1053"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/><sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="1054"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>domain_idx<sp/>Index<sp/>of<sp/>ABB<sp/>domain.</highlight></codeline>
<codeline lineno="1055"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_config<sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>with<sp/>configuration<sp/>to<sp/>be<sp/>set.</highlight></codeline>
<codeline lineno="1056"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1057"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__power__hal_1gac98f9ae23cc84e516d248647a7b56e4b" kindref="member">nrf_power_abb_config_get</ref>(NRF_POWER_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/><sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="1058"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>domain_idx,</highlight></codeline>
<codeline lineno="1059"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structnrf__power__abb__config__t" kindref="compound">nrf_power_abb_config_t</ref><sp/>*<sp/>p_config);</highlight></codeline>
<codeline lineno="1060"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1061"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="1062"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>the<sp/>force<sp/>lock<sp/>for<sp/>the<sp/>specified<sp/>ABB<sp/>domain.</highlight></codeline>
<codeline lineno="1063"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1064"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/><sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="1065"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>domain_idx<sp/>Index<sp/>of<sp/>ABB<sp/>domain.</highlight></codeline>
<codeline lineno="1066"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>enable<sp/><sp/><sp/><sp/><sp/>True<sp/>if<sp/>force<sp/>lock<sp/>is<sp/>to<sp/>be<sp/>enabled,<sp/>false<sp/>otherwise.</highlight></codeline>
<codeline lineno="1067"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1068"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__power__hal_1ga98b1b5ac9785863d7ebc67531f6d8dda" kindref="member">nrf_power_abb_force_lock_set</ref>(NRF_POWER_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="1069"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>domain_idx,</highlight></codeline>
<codeline lineno="1070"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>enable);</highlight></codeline>
<codeline lineno="1071"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1072"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="1073"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>checking<sp/>if<sp/>the<sp/>force<sp/>lock<sp/>for<sp/>the<sp/>specified<sp/>ABB<sp/>domain<sp/>is<sp/>enabled.</highlight></codeline>
<codeline lineno="1074"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1075"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/><sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="1076"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>domain_idx<sp/>Index<sp/>of<sp/>ABB<sp/>domain<sp/>whose<sp/>status<sp/>is<sp/>checked.</highlight></codeline>
<codeline lineno="1077"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1078"><highlight class="comment"><sp/>*<sp/>@retval<sp/>true<sp/><sp/>Force<sp/>lock<sp/>is<sp/>enabled.</highlight></codeline>
<codeline lineno="1079"><highlight class="comment"><sp/>*<sp/>@retval<sp/>false<sp/>Force<sp/>lock<sp/>is<sp/>disabled.</highlight></codeline>
<codeline lineno="1080"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1081"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrf__power__hal_1gad2c4e7e6386a510e255b7ac070438c37" kindref="member">nrf_power_abb_force_lock_check</ref>(NRF_POWER_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="1082"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>domain_idx);</highlight></codeline>
<codeline lineno="1083"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRF_POWER_HAS_ABB</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1084"><highlight class="normal"></highlight></codeline>
<codeline lineno="1085"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_POWER_HAS_VREG_CONFIG</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1086"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="1087"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>enabling<sp/>specified<sp/>voltage<sp/>regulator.</highlight></codeline>
<codeline lineno="1088"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1089"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="1090"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>mask<sp/><sp/>Mask<sp/>of<sp/>voltage<sp/>regulators<sp/>to<sp/>be<sp/>enabled.</highlight></codeline>
<codeline lineno="1091"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Use<sp/>@ref<sp/>nrf_power_vreg_mask_t<sp/>values<sp/>for<sp/>bit<sp/>masking.</highlight></codeline>
<codeline lineno="1092"><highlight class="comment"><sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1093"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__power__hal_1ga56ade568e3417a77400bbd51d016a402" kindref="member">nrf_power_vreg_enable</ref>(NRF_POWER_Type<sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>mask);</highlight></codeline>
<codeline lineno="1094"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1095"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="1096"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>disabling<sp/>specified<sp/>voltage<sp/>regulator.</highlight></codeline>
<codeline lineno="1097"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1098"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="1099"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>mask<sp/><sp/>Mask<sp/>of<sp/>voltage<sp/>regulators<sp/>to<sp/>be<sp/>disabled.</highlight></codeline>
<codeline lineno="1100"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Use<sp/>@ref<sp/>nrf_power_vreg_mask_t<sp/>values<sp/>for<sp/>bit<sp/>masking.</highlight></codeline>
<codeline lineno="1101"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1102"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__power__hal_1gafdd761e3bce5be804bc875f9a275b268" kindref="member">nrf_power_vreg_disable</ref>(NRF_POWER_Type<sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>mask);</highlight></codeline>
<codeline lineno="1103"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1104"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="1105"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>checking<sp/>if<sp/>the<sp/>specified<sp/>voltage<sp/>regulator<sp/>is<sp/>enabled.</highlight></codeline>
<codeline lineno="1106"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1107"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="1108"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>mask<sp/><sp/>Mask<sp/>of<sp/>voltage<sp/>regulator<sp/>to<sp/>be<sp/>checked.</highlight></codeline>
<codeline lineno="1109"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Use<sp/>@ref<sp/>nrf_power_vreg_mask_t<sp/>values<sp/>for<sp/>bit<sp/>masking.</highlight></codeline>
<codeline lineno="1110"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1111"><highlight class="comment"><sp/>*<sp/>@return<sp/>Mask<sp/>of<sp/>enabled<sp/>voltage<sp/>regulators.</highlight></codeline>
<codeline lineno="1112"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1113"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__power__hal_1ga0880cea17453a393c231d0284acd9452" kindref="member">nrf_power_vreg_enable_check</ref>(NRF_POWER_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>mask);</highlight></codeline>
<codeline lineno="1114"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRF_POWER_HAS_VREG_CONFIG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1115"><highlight class="normal"></highlight></codeline>
<codeline lineno="1116"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_POWER_HAS_BLOCK_MODES</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1117"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="1118"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>the<sp/>Ultra<sp/>Low<sp/>Power<sp/>(ULP)<sp/>mode.</highlight></codeline>
<codeline lineno="1119"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1120"><highlight class="comment"><sp/>*<sp/>@note<sp/>Going<sp/>into<sp/>ULP<sp/>mode<sp/>is<sp/>allowed<sp/>only<sp/>if<sp/>this<sp/>mode<sp/>is<sp/>enabled<sp/>-<sp/>otherwise<sp/>it<sp/>is<sp/>blocked.</highlight></codeline>
<codeline lineno="1121"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>If<sp/>the<sp/>ULV<sp/>mode<sp/>is<sp/>blocked,<sp/>the<sp/>ULP<sp/>mode<sp/>is<sp/>also<sp/>blocked.</highlight></codeline>
<codeline lineno="1122"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1123"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="1124"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>enable<sp/>True<sp/>if<sp/>ULP<sp/>mode<sp/>is<sp/>to<sp/>be<sp/>enabled,<sp/>false<sp/>otherwise.</highlight></codeline>
<codeline lineno="1125"><highlight class="comment"><sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1126"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__power__hal_1ga25fdf5a67c48bc521919771381d52979" kindref="member">nrf_power_ulp_mode_set</ref>(NRF_POWER_Type<sp/>*<sp/>p_reg,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>enable);</highlight></codeline>
<codeline lineno="1127"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1128"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="1129"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>checking<sp/>if<sp/>the<sp/>ULP<sp/>mode<sp/>is<sp/>enabled.</highlight></codeline>
<codeline lineno="1130"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1131"><highlight class="comment"><sp/>*<sp/>@note<sp/>Going<sp/>into<sp/>ULP<sp/>mode<sp/>is<sp/>allowed<sp/>only<sp/>if<sp/>this<sp/>mode<sp/>is<sp/>enabled<sp/>-<sp/>otherwise<sp/>it<sp/>is<sp/>blocked.</highlight></codeline>
<codeline lineno="1132"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>If<sp/>the<sp/>ULV<sp/>mode<sp/>is<sp/>blocked,<sp/>the<sp/>ULP<sp/>mode<sp/>is<sp/>also<sp/>blocked.</highlight></codeline>
<codeline lineno="1133"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1134"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="1135"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1136"><highlight class="comment"><sp/>*<sp/>@retval<sp/>true<sp/><sp/>ULP<sp/>mode<sp/>is<sp/>enabled.</highlight></codeline>
<codeline lineno="1137"><highlight class="comment"><sp/>*<sp/>@retval<sp/>false<sp/>ULP<sp/>mode<sp/>is<sp/>disabled.</highlight></codeline>
<codeline lineno="1138"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1139"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrf__power__hal_1gaf710827004768a3a31e57dda8ed2ca2f" kindref="member">nrf_power_ulp_mode_check</ref>(NRF_POWER_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="1140"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1141"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="1142"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>the<sp/>Ultra<sp/>Low<sp/>Voltage<sp/>(ULV)<sp/>mode.</highlight></codeline>
<codeline lineno="1143"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1144"><highlight class="comment"><sp/>*<sp/>@note<sp/>Going<sp/>into<sp/>ULP<sp/>mode<sp/>is<sp/>allowed<sp/>only<sp/>if<sp/>this<sp/>mode<sp/>is<sp/>enabled<sp/>-<sp/>otherwise<sp/>it<sp/>is<sp/>blocked.</highlight></codeline>
<codeline lineno="1145"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>If<sp/>the<sp/>ULV<sp/>mode<sp/>is<sp/>blocked,<sp/>the<sp/>ULP<sp/>mode<sp/>is<sp/>also<sp/>blocked.</highlight></codeline>
<codeline lineno="1146"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1147"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="1148"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>enable<sp/>True<sp/>if<sp/>ULV<sp/>mode<sp/>is<sp/>to<sp/>be<sp/>enabled,<sp/>false<sp/>otherwise.</highlight></codeline>
<codeline lineno="1149"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1150"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__power__hal_1ga2a19d58b3104c5ade48f1804f2f89cee" kindref="member">nrf_power_ulv_mode_set</ref>(NRF_POWER_Type<sp/>*<sp/>p_reg,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>enable);</highlight></codeline>
<codeline lineno="1151"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1152"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="1153"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>checking<sp/>if<sp/>the<sp/>ULV<sp/>mode<sp/>is<sp/>enabled.</highlight></codeline>
<codeline lineno="1154"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1155"><highlight class="comment"><sp/>*<sp/>@note<sp/>Going<sp/>into<sp/>ULP<sp/>mode<sp/>is<sp/>allowed<sp/>only<sp/>if<sp/>this<sp/>mode<sp/>is<sp/>enabled<sp/>-<sp/>otherwise<sp/>it<sp/>is<sp/>blocked.</highlight></codeline>
<codeline lineno="1156"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>If<sp/>the<sp/>ULV<sp/>mode<sp/>is<sp/>blocked,<sp/>the<sp/>ULP<sp/>mode<sp/>is<sp/>also<sp/>blocked.</highlight></codeline>
<codeline lineno="1157"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1158"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="1159"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1160"><highlight class="comment"><sp/>*<sp/>@retval<sp/>true<sp/><sp/>ULV<sp/>mode<sp/>is<sp/>enabled.</highlight></codeline>
<codeline lineno="1161"><highlight class="comment"><sp/>*<sp/>@retval<sp/>false<sp/>ULV<sp/>mode<sp/>is<sp/>disabled.</highlight></codeline>
<codeline lineno="1162"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1163"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrf__power__hal_1ga1673cd7086ce57ced3ad7191d40f0307" kindref="member">nrf_power_ulv_mode_check</ref>(NRF_POWER_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="1164"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRF_POWER_HAS_BLOCK_MODES</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1165"><highlight class="normal"></highlight></codeline>
<codeline lineno="1166"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_POWER_HAS_SEMAPHORE</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1167"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="1168"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>the<sp/>POWER<sp/>semaphore<sp/>status.</highlight></codeline>
<codeline lineno="1169"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1170"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="1171"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1172"><highlight class="comment"><sp/>*<sp/>@retval<sp/>true<sp/><sp/>Semaphore<sp/>is<sp/>acquired.</highlight></codeline>
<codeline lineno="1173"><highlight class="comment"><sp/>*<sp/>@retval<sp/>false<sp/>Semaphore<sp/>is<sp/>released.</highlight></codeline>
<codeline lineno="1174"><highlight class="comment"><sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1175"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrf__power__hal_1ga2b3c763f09b5552d478919075157c036" kindref="member">nrf_power_sem_status_get</ref>(NRF_POWER_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="1176"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRF_POWER_HAS_SEMAPHORE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1177"><highlight class="normal"></highlight></codeline>
<codeline lineno="1178"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_POWER_HAS_BILS</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1179"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="1180"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>BILS<sp/>instances.</highlight></codeline>
<codeline lineno="1181"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1182"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="1183"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>enable<sp/>True<sp/>if<sp/>all<sp/>configured<sp/>BILS<sp/>instances<sp/>are<sp/>to<sp/>be<sp/>enabled,<sp/>false<sp/>otherwise.</highlight></codeline>
<codeline lineno="1184"><highlight class="comment"><sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1185"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__power__hal_1ga9366872b258b831ee37bcbdfec023b3e" kindref="member">nrf_power_bils_set</ref>(NRF_POWER_Type<sp/>*<sp/>p_reg,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>enable);</highlight></codeline>
<codeline lineno="1186"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1187"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="1188"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>checking<sp/>if<sp/>BILS<sp/>instances<sp/>are<sp/>enabled.</highlight></codeline>
<codeline lineno="1189"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1190"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="1191"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1192"><highlight class="comment"><sp/>*<sp/>@retval<sp/>true<sp/><sp/>All<sp/>configured<sp/>BILS<sp/>instances<sp/>are<sp/>enabled.</highlight></codeline>
<codeline lineno="1193"><highlight class="comment"><sp/>*<sp/>@retval<sp/>false<sp/>All<sp/>BILS<sp/>instances<sp/>are<sp/>disabled.</highlight></codeline>
<codeline lineno="1194"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1195"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrf__power__hal_1gadfe7f82b5a96d1408c2e9a5e00c53b90" kindref="member">nrf_power_bils_check</ref>(NRF_POWER_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="1196"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRF_POWER_HAS_BILS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1197"><highlight class="normal"></highlight></codeline>
<codeline lineno="1198"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_POWER_HAS_PMIC</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1199"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="1200"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>the<sp/>PMIC<sp/>interface.</highlight></codeline>
<codeline lineno="1201"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1202"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="1203"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>enable<sp/>True<sp/>if<sp/>PMIC<sp/>interface<sp/>is<sp/>to<sp/>be<sp/>enabled,<sp/>false<sp/>otherwise.</highlight></codeline>
<codeline lineno="1204"><highlight class="comment"><sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1205"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__power__hal_1ga891d262e69cb4fac63a9758aa36c63c0" kindref="member">nrf_power_pmic_set</ref>(NRF_POWER_Type<sp/>*<sp/>p_reg,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>enable);</highlight></codeline>
<codeline lineno="1206"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1207"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="1208"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>checking<sp/>if<sp/>the<sp/>PMIC<sp/>interface<sp/>is<sp/>enabled.</highlight></codeline>
<codeline lineno="1209"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1210"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="1211"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1212"><highlight class="comment"><sp/>*<sp/>@retval<sp/>true<sp/><sp/>PMIC<sp/>interface<sp/>is<sp/>enabled.</highlight></codeline>
<codeline lineno="1213"><highlight class="comment"><sp/>*<sp/>@retval<sp/>false<sp/>PMIC<sp/>interface<sp/>is<sp/>disabled.</highlight></codeline>
<codeline lineno="1214"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1215"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrf__power__hal_1ga20683794648d38a852df13e15f4b0f3c" kindref="member">nrf_power_pmic_check</ref>(NRF_POWER_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="1216"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRF_POWER_HAS_PMIC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1217"><highlight class="normal"></highlight></codeline>
<codeline lineno="1218"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>NRF_DECLARE_ONLY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1219"><highlight class="normal"></highlight></codeline>
<codeline lineno="1220"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__power__hal_1gad6ed3d641631f14b0484485fd051ef51" kindref="member">nrf_power_task_trigger</ref>(NRF_POWER_Type<sp/>*<sp/>p_reg,<sp/><ref refid="group__nrf__power__hal_1ga6452fff919765c34921624d3e73eb650" kindref="member">nrf_power_task_t</ref><sp/>task)</highlight></codeline>
<codeline lineno="1221"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1222"><highlight class="normal"><sp/><sp/><sp/><sp/>*((</highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint32_t<sp/>*)((uint8_t<sp/>*)p_reg<sp/>+<sp/>(uint32_t)task))<sp/>=<sp/>0x1UL;</highlight></codeline>
<codeline lineno="1223"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1224"><highlight class="normal"></highlight></codeline>
<codeline lineno="1225"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__power__hal_1gac67343a2c966a797945d3d447e8d4458" kindref="member">nrf_power_task_address_get</ref>(NRF_POWER_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="1226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__power__hal_1ga6452fff919765c34921624d3e73eb650" kindref="member">nrf_power_task_t</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>task)</highlight></codeline>
<codeline lineno="1227"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1228"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((uint32_t)p_reg<sp/>+<sp/>(uint32_t)task);</highlight></codeline>
<codeline lineno="1229"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1230"><highlight class="normal"></highlight></codeline>
<codeline lineno="1231"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__power__hal_1ga456bf19c1d3c0411e33af18fa037481c" kindref="member">nrf_power_event_clear</ref>(NRF_POWER_Type<sp/>*<sp/>p_reg,<sp/><ref refid="group__nrf__power__hal_1ga64bec8dee5aca9c1cd233b251da21ab4" kindref="member">nrf_power_event_t</ref><sp/>event)</highlight></codeline>
<codeline lineno="1232"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1233"><highlight class="normal"><sp/><sp/><sp/><sp/>*((</highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint32_t<sp/>*)((uint8_t<sp/>*)p_reg<sp/>+<sp/>(uint32_t)event))<sp/>=<sp/>0x0UL;</highlight></codeline>
<codeline lineno="1234"><highlight class="normal"><sp/><sp/><sp/><sp/>nrf_event_readback((uint8_t<sp/>*)p_reg<sp/>+<sp/>(uint32_t)event);</highlight></codeline>
<codeline lineno="1235"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1236"><highlight class="normal"></highlight></codeline>
<codeline lineno="1237"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrf__power__hal_1ga29b2e7267a49a0d04b1f3bf4edc101e8" kindref="member">nrf_power_event_check</ref>(NRF_POWER_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,<sp/><ref refid="group__nrf__power__hal_1ga64bec8dee5aca9c1cd233b251da21ab4" kindref="member">nrf_power_event_t</ref><sp/>event)</highlight></codeline>
<codeline lineno="1238"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1239"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>nrf_event_check(p_reg,<sp/>event);</highlight></codeline>
<codeline lineno="1240"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1241"><highlight class="normal"></highlight></codeline>
<codeline lineno="1242"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrf__power__hal_1ga399be233fc8bfd540739e61c552a0bf4" kindref="member">nrf_power_event_get_and_clear</ref>(NRF_POWER_Type<sp/>*<sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="1243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__power__hal_1ga64bec8dee5aca9c1cd233b251da21ab4" kindref="member">nrf_power_event_t</ref><sp/>event)</highlight></codeline>
<codeline lineno="1244"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1245"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ret<sp/>=<sp/><ref refid="group__nrf__power__hal_1ga29b2e7267a49a0d04b1f3bf4edc101e8" kindref="member">nrf_power_event_check</ref>(p_reg,<sp/>event);</highlight></codeline>
<codeline lineno="1246"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ret)</highlight></codeline>
<codeline lineno="1247"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__power__hal_1ga456bf19c1d3c0411e33af18fa037481c" kindref="member">nrf_power_event_clear</ref>(p_reg,<sp/>event);</highlight></codeline>
<codeline lineno="1249"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1250"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="1251"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1252"><highlight class="normal"></highlight></codeline>
<codeline lineno="1253"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__power__hal_1gabe16d110629d651d4bd714bb5f9e915f" kindref="member">nrf_power_event_address_get</ref>(NRF_POWER_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="1254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__power__hal_1ga64bec8dee5aca9c1cd233b251da21ab4" kindref="member">nrf_power_event_t</ref><sp/><sp/><sp/><sp/><sp/><sp/>event)</highlight></codeline>
<codeline lineno="1255"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1256"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((uint32_t)p_reg<sp/>+<sp/>(uint32_t)event);</highlight></codeline>
<codeline lineno="1257"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1258"><highlight class="normal"></highlight></codeline>
<codeline lineno="1259"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__power__hal_1gab853a595fd79cd1d1019cdd22a30d2fe" kindref="member">nrf_power_int_enable</ref>(NRF_POWER_Type<sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>mask)</highlight></codeline>
<codeline lineno="1260"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1261"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;INTENSET<sp/>=<sp/>mask;</highlight></codeline>
<codeline lineno="1262"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1263"><highlight class="normal"></highlight></codeline>
<codeline lineno="1264"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__power__hal_1gae488f7aab5a977eca67b729098246f48" kindref="member">nrf_power_int_enable_check</ref>(NRF_POWER_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>mask)</highlight></codeline>
<codeline lineno="1265"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1266"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p_reg-&gt;INTENSET<sp/>&amp;<sp/>mask;</highlight></codeline>
<codeline lineno="1267"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1268"><highlight class="normal"></highlight></codeline>
<codeline lineno="1269"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__power__hal_1gacc0a9e5e2e5d03b960d723d6ddeb1380" kindref="member">nrf_power_int_enable_get</ref>(NRF_POWER_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="1270"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1271"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p_reg-&gt;INTENSET;</highlight></codeline>
<codeline lineno="1272"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1273"><highlight class="normal"></highlight></codeline>
<codeline lineno="1274"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__power__hal_1ga2a420ae01a7fa45da69afe710154891d" kindref="member">nrf_power_int_disable</ref>(NRF_POWER_Type<sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>mask)</highlight></codeline>
<codeline lineno="1275"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1276"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;INTENCLR<sp/>=<sp/>mask;</highlight></codeline>
<codeline lineno="1277"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1278"><highlight class="normal"></highlight></codeline>
<codeline lineno="1279"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(DPPI_PRESENT)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1280"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__power__hal_1ga283b45cae85cd27280003f1b550ea077" kindref="member">nrf_power_subscribe_set</ref>(NRF_POWER_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="1281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__power__hal_1ga6452fff919765c34921624d3e73eb650" kindref="member">nrf_power_task_t</ref><sp/>task,</highlight></codeline>
<codeline lineno="1282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>channel)</highlight></codeline>
<codeline lineno="1283"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1284"><highlight class="normal"><sp/><sp/><sp/><sp/>*((</highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint32_t<sp/>*)<sp/>((uint8_t<sp/>*)<sp/>p_reg<sp/>+<sp/>(uint32_t)<sp/>task<sp/>+<sp/>0x80uL))<sp/>=</highlight></codeline>
<codeline lineno="1285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)channel<sp/>|<sp/>NRF_SUBSCRIBE_PUBLISH_ENABLE);</highlight></codeline>
<codeline lineno="1286"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1287"><highlight class="normal"></highlight></codeline>
<codeline lineno="1288"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__power__hal_1ga4967e295c49be7edc371ac01c3922889" kindref="member">nrf_power_subscribe_clear</ref>(NRF_POWER_Type<sp/>*<sp/>p_reg,<sp/><ref refid="group__nrf__power__hal_1ga6452fff919765c34921624d3e73eb650" kindref="member">nrf_power_task_t</ref><sp/>task)</highlight></codeline>
<codeline lineno="1289"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1290"><highlight class="normal"><sp/><sp/><sp/><sp/>*((</highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint32_t<sp/>*)<sp/>((uint8_t<sp/>*)<sp/>p_reg<sp/>+<sp/>(uint32_t)<sp/>task<sp/>+<sp/>0x80uL))<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1291"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1292"><highlight class="normal"></highlight></codeline>
<codeline lineno="1293"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__power__hal_1gabcd34095e7c5603eb949b320308f3b9b" kindref="member">nrf_power_publish_set</ref>(NRF_POWER_Type<sp/>*<sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="1294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__power__hal_1ga64bec8dee5aca9c1cd233b251da21ab4" kindref="member">nrf_power_event_t</ref><sp/>event,</highlight></codeline>
<codeline lineno="1295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>channel)</highlight></codeline>
<codeline lineno="1296"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1297"><highlight class="normal"><sp/><sp/><sp/><sp/>*((</highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint32_t<sp/>*)<sp/>((uint8_t<sp/>*)<sp/>p_reg<sp/>+<sp/>(uint32_t)<sp/>event<sp/>+<sp/>0x80uL))<sp/>=</highlight></codeline>
<codeline lineno="1298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)channel<sp/>|<sp/>NRF_SUBSCRIBE_PUBLISH_ENABLE);</highlight></codeline>
<codeline lineno="1299"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1300"><highlight class="normal"></highlight></codeline>
<codeline lineno="1301"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__power__hal_1ga2583429f3cb12dba3479fcbdd028ca8f" kindref="member">nrf_power_publish_clear</ref>(NRF_POWER_Type<sp/>*<sp/>p_reg,<sp/><ref refid="group__nrf__power__hal_1ga64bec8dee5aca9c1cd233b251da21ab4" kindref="member">nrf_power_event_t</ref><sp/>event)</highlight></codeline>
<codeline lineno="1302"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1303"><highlight class="normal"><sp/><sp/><sp/><sp/>*((</highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint32_t<sp/>*)<sp/>((uint8_t<sp/>*)<sp/>p_reg<sp/>+<sp/>(uint32_t)<sp/>event<sp/>+<sp/>0x80uL))<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1304"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1305"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>defined(DPPI_PRESENT)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1306"><highlight class="normal"></highlight></codeline>
<codeline lineno="1307"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_POWER_HAS_RESETREAS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1308"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__power__hal_1gaad306f69122fdd920fbf4c7e87745222" kindref="member">nrf_power_resetreas_get</ref>(NRF_POWER_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="1309"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1310"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p_reg-&gt;RESETREAS;</highlight></codeline>
<codeline lineno="1311"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1312"><highlight class="normal"></highlight></codeline>
<codeline lineno="1313"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__power__hal_1ga47102dd335c0ecb520ed0cd70c7dc143" kindref="member">nrf_power_resetreas_clear</ref>(NRF_POWER_Type<sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>mask)</highlight></codeline>
<codeline lineno="1314"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1315"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;RESETREAS<sp/>=<sp/>mask;</highlight></codeline>
<codeline lineno="1316"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1317"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRF_POWER_HAS_RESETREAS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1318"><highlight class="normal"></highlight></codeline>
<codeline lineno="1319"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(POWER_POWERSTATUS_LTEMODEM_Msk)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1320"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrf__power__hal_1gac7a0dd99ee51b1f040a2f9845fd31cea" kindref="member">nrf_power_powerstatus_get</ref>(NRF_POWER_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="1321"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1322"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(p_reg-&gt;POWERSTATUS<sp/>&amp;<sp/>POWER_POWERSTATUS_LTEMODEM_Msk)<sp/>==</highlight></codeline>
<codeline lineno="1323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(POWER_POWERSTATUS_LTEMODEM_ON<sp/>&lt;&lt;<sp/>POWER_POWERSTATUS_LTEMODEM_Pos);</highlight></codeline>
<codeline lineno="1324"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1325"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>(POWER_POWERSTATUS_LTEMODEM_Msk)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1326"><highlight class="normal"></highlight></codeline>
<codeline lineno="1327"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(POWER_RAMSTATUS_RAMBLOCK0_Msk)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1328"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__power__hal_1ga2ef11c1ac5edea30bcd95716ee8a2cec" kindref="member">nrf_power_ramstatus_get</ref>(NRF_POWER_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="1329"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1330"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p_reg-&gt;RAMSTATUS;</highlight></codeline>
<codeline lineno="1331"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1332"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>defined(POWER_RAMSTATUS_RAMBLOCK0_Msk)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1333"><highlight class="normal"></highlight></codeline>
<codeline lineno="1334"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(POWER_SYSTEMOFF_SYSTEMOFF_Enter)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1335"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>nrf_power_system_off(NRF_POWER_Type<sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="1336"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1337"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;SYSTEMOFF<sp/>=<sp/>POWER_SYSTEMOFF_SYSTEMOFF_Enter;</highlight></codeline>
<codeline lineno="1338"><highlight class="normal"><sp/><sp/><sp/><sp/>__DSB();</highlight></codeline>
<codeline lineno="1339"><highlight class="normal"></highlight></codeline>
<codeline lineno="1340"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Solution<sp/>for<sp/>simulated<sp/>System<sp/>OFF<sp/>in<sp/>debug<sp/>mode<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1341"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">true</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1342"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__WFE();</highlight></codeline>
<codeline lineno="1344"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1345"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1346"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>defined(POWER_SYSTEMOFF_SYSTEMOFF_Enter)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1347"><highlight class="normal"></highlight></codeline>
<codeline lineno="1348"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_POWER_HAS_POFCON</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1349"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__power__hal_1ga1447b9e52caebb0ecf092a90544ecbe6" kindref="member">nrf_power_pofcon_set</ref>(NRF_POWER_Type<sp/>*<sp/><sp/><sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="1350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>enable,</highlight></codeline>
<codeline lineno="1351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__power__hal_1gacc0f863f34d48f5975564a11975dda2e" kindref="member">nrf_power_pof_thr_t</ref><sp/>thr)</highlight></codeline>
<codeline lineno="1352"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1353"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__glue_1ga9698a3f6b6bea455d2b54a79e514ee36" kindref="member">NRFX_ASSERT</ref>(thr<sp/>==<sp/>(thr<sp/>&amp;<sp/>(POWER_POFCON_THRESHOLD_Msk<sp/>&gt;&gt;<sp/>POWER_POFCON_THRESHOLD_Pos)));</highlight></codeline>
<codeline lineno="1354"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_POWER_HAS_POFCON_VDDH</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1355"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>pofcon<sp/>=<sp/>p_reg-&gt;POFCON;</highlight></codeline>
<codeline lineno="1356"><highlight class="normal"><sp/><sp/><sp/><sp/>pofcon<sp/>&amp;=<sp/>~(POWER_POFCON_THRESHOLD_Msk<sp/>|<sp/>POWER_POFCON_POF_Msk);</highlight></codeline>
<codeline lineno="1357"><highlight class="normal"><sp/><sp/><sp/><sp/>pofcon<sp/>|=</highlight></codeline>
<codeline lineno="1358"><highlight class="normal"></highlight><highlight class="preprocessor">#else<sp/></highlight><highlight class="comment">//<sp/>NRF_POWER_HAS_POFCON_VDDH</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1359"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;POFCON<sp/>=</highlight></codeline>
<codeline lineno="1360"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(((uint32_t)thr)<sp/>&lt;&lt;<sp/>POWER_POFCON_THRESHOLD_Pos)<sp/>|</highlight></codeline>
<codeline lineno="1362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(enable<sp/>?</highlight></codeline>
<codeline lineno="1363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(POWER_POFCON_POF_Enabled<sp/>&lt;&lt;<sp/>POWER_POFCON_POF_Pos)</highlight></codeline>
<codeline lineno="1364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:</highlight></codeline>
<codeline lineno="1365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(POWER_POFCON_POF_Disabled<sp/>&lt;&lt;<sp/>POWER_POFCON_POF_Pos));</highlight></codeline>
<codeline lineno="1366"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_POWER_HAS_POFCON_VDDH</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1367"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;POFCON<sp/>=<sp/>pofcon;</highlight></codeline>
<codeline lineno="1368"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1369"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1370"><highlight class="normal"></highlight></codeline>
<codeline lineno="1371"><highlight class="normal">NRF_STATIC_INLINE<sp/><ref refid="group__nrf__power__hal_1gacc0f863f34d48f5975564a11975dda2e" kindref="member">nrf_power_pof_thr_t</ref><sp/><ref refid="group__nrf__power__hal_1ga2aab621e2142289fe639fdec013dfe3f" kindref="member">nrf_power_pofcon_get</ref>(NRF_POWER_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="1372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_enabled)</highlight></codeline>
<codeline lineno="1373"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1374"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>pofcon<sp/>=<sp/>p_reg-&gt;POFCON;</highlight></codeline>
<codeline lineno="1375"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(NULL<sp/>!=<sp/>p_enabled)</highlight></codeline>
<codeline lineno="1376"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*p_enabled)<sp/>=<sp/>((pofcon<sp/>&amp;<sp/>POWER_POFCON_POF_Msk)<sp/>&gt;&gt;<sp/>POWER_POFCON_POF_Pos)</highlight></codeline>
<codeline lineno="1378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>==<sp/>POWER_POFCON_POF_Enabled;</highlight></codeline>
<codeline lineno="1379"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1380"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="group__nrf__power__hal_1gacc0f863f34d48f5975564a11975dda2e" kindref="member">nrf_power_pof_thr_t</ref>)((pofcon<sp/>&amp;<sp/>POWER_POFCON_THRESHOLD_Msk)<sp/>&gt;&gt;</highlight></codeline>
<codeline lineno="1381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>POWER_POFCON_THRESHOLD_Pos);</highlight></codeline>
<codeline lineno="1382"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1383"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRF_POWER_HAS_POFCON</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1384"><highlight class="normal"></highlight></codeline>
<codeline lineno="1385"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_POWER_HAS_POFCON_VDDH</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1386"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__power__hal_1ga570aa25425f8bebefc433bd031e7f080" kindref="member">nrf_power_pofcon_vddh_set</ref>(NRF_POWER_Type<sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="1387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__power__hal_1ga3dfa1a1f6a6daaab25b7a47bbf42969b" kindref="member">nrf_power_pof_thrvddh_t</ref><sp/>thr)</highlight></codeline>
<codeline lineno="1388"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1389"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__glue_1ga9698a3f6b6bea455d2b54a79e514ee36" kindref="member">NRFX_ASSERT</ref>(thr<sp/>==<sp/>(thr<sp/>&amp;<sp/>(POWER_POFCON_THRESHOLDVDDH_Msk<sp/>&gt;&gt;<sp/>POWER_POFCON_THRESHOLDVDDH_Pos)));</highlight></codeline>
<codeline lineno="1390"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>pofcon<sp/>=<sp/>p_reg-&gt;POFCON;</highlight></codeline>
<codeline lineno="1391"><highlight class="normal"><sp/><sp/><sp/><sp/>pofcon<sp/>&amp;=<sp/>~POWER_POFCON_THRESHOLDVDDH_Msk;</highlight></codeline>
<codeline lineno="1392"><highlight class="normal"><sp/><sp/><sp/><sp/>pofcon<sp/>|=<sp/>(((uint32_t)thr)<sp/>&lt;&lt;<sp/>POWER_POFCON_THRESHOLDVDDH_Pos);</highlight></codeline>
<codeline lineno="1393"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;POFCON<sp/>=<sp/>pofcon;</highlight></codeline>
<codeline lineno="1394"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1395"><highlight class="normal"></highlight></codeline>
<codeline lineno="1396"><highlight class="normal">NRF_STATIC_INLINE<sp/><ref refid="group__nrf__power__hal_1ga3dfa1a1f6a6daaab25b7a47bbf42969b" kindref="member">nrf_power_pof_thrvddh_t</ref><sp/><ref refid="group__nrf__power__hal_1ga91a4e59a0eef52900085ee9e3001f74c" kindref="member">nrf_power_pofcon_vddh_get</ref>(NRF_POWER_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="1397"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1398"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="group__nrf__power__hal_1ga3dfa1a1f6a6daaab25b7a47bbf42969b" kindref="member">nrf_power_pof_thrvddh_t</ref>)((p_reg-&gt;POFCON<sp/>&amp;<sp/>POWER_POFCON_THRESHOLDVDDH_Msk)<sp/>&gt;&gt;</highlight></codeline>
<codeline lineno="1399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>POWER_POFCON_THRESHOLDVDDH_Pos);</highlight></codeline>
<codeline lineno="1400"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1401"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRF_POWER_HAS_POFCON_VDDH</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1402"><highlight class="normal"></highlight></codeline>
<codeline lineno="1403"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_POWER_HAS_GPREGRET</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1404"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__power__hal_1ga29711581b57c9223bb2286d39690ef65" kindref="member">nrf_power_gpregret_set</ref>(NRF_POWER_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="1405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reg_num,</highlight></codeline>
<codeline lineno="1406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>val)</highlight></codeline>
<codeline lineno="1407"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1408"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_POWER_HAS_GPREGRET_ARRAY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1409"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__glue_1ga9698a3f6b6bea455d2b54a79e514ee36" kindref="member">NRFX_ASSERT</ref>(reg_num<sp/>&lt;<sp/><ref refid="group__nrf__power__hal_1ga52b5b62ea8d1a83e05650e9ec5df42af" kindref="member">NRFX_POWER_GPREGRET_COUNT</ref>);</highlight></codeline>
<codeline lineno="1410"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(POWER_GPREGRET2_GPREGRET_Msk)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1411"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__glue_1ga9698a3f6b6bea455d2b54a79e514ee36" kindref="member">NRFX_ASSERT</ref>(reg_num<sp/>&lt;<sp/>2);</highlight></codeline>
<codeline lineno="1412"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1413"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__glue_1ga9698a3f6b6bea455d2b54a79e514ee36" kindref="member">NRFX_ASSERT</ref>(reg_num<sp/>&lt;<sp/>1);</highlight></codeline>
<codeline lineno="1414"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1415"><highlight class="normal"></highlight></codeline>
<codeline lineno="1416"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_POWER_HAS_GPREGRET_ARRAY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1417"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;GPREGRET[reg_num]<sp/>=<sp/>(val<sp/>&amp;<sp/>POWER_GPREGRET_GPREGRET_Msk)<sp/>&lt;&lt;<sp/>POWER_GPREGRET_GPREGRET_Pos;</highlight></codeline>
<codeline lineno="1418"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1419"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(reg_num)</highlight></codeline>
<codeline lineno="1420"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0:</highlight></codeline>
<codeline lineno="1422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_reg-&gt;GPREGRET<sp/>=<sp/>(val<sp/>&amp;<sp/>POWER_GPREGRET_GPREGRET_Msk)<sp/>&lt;&lt;<sp/>POWER_GPREGRET_GPREGRET_Pos;</highlight></codeline>
<codeline lineno="1423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1424"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(POWER_GPREGRET2_GPREGRET_Msk)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>1:</highlight></codeline>
<codeline lineno="1426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_reg-&gt;GPREGRET2<sp/>=<sp/>(val<sp/>&amp;<sp/>POWER_GPREGRET2_GPREGRET_Msk)<sp/>&lt;&lt;<sp/>POWER_GPREGRET2_GPREGRET_Pos;</highlight></codeline>
<codeline lineno="1427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1428"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1431"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1432"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1433"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1434"><highlight class="normal"></highlight></codeline>
<codeline lineno="1435"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__power__hal_1ga91bbc3e3c6803e42e95b48903dd2b030" kindref="member">nrf_power_gpregret_get</ref>(NRF_POWER_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>reg_num)</highlight></codeline>
<codeline lineno="1436"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1437"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_POWER_HAS_GPREGRET_ARRAY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1438"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__glue_1ga9698a3f6b6bea455d2b54a79e514ee36" kindref="member">NRFX_ASSERT</ref>(reg_num<sp/>&lt;<sp/><ref refid="group__nrf__power__hal_1ga52b5b62ea8d1a83e05650e9ec5df42af" kindref="member">NRFX_POWER_GPREGRET_COUNT</ref>);</highlight></codeline>
<codeline lineno="1439"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(POWER_GPREGRET2_GPREGRET_Msk)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1440"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__glue_1ga9698a3f6b6bea455d2b54a79e514ee36" kindref="member">NRFX_ASSERT</ref>(reg_num<sp/>&lt;<sp/>2);</highlight></codeline>
<codeline lineno="1441"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1442"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__glue_1ga9698a3f6b6bea455d2b54a79e514ee36" kindref="member">NRFX_ASSERT</ref>(reg_num<sp/>&lt;<sp/>1);</highlight></codeline>
<codeline lineno="1443"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1444"><highlight class="normal"></highlight></codeline>
<codeline lineno="1445"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_POWER_HAS_GPREGRET_ARRAY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1446"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p_reg-&gt;GPREGRET[reg_num];</highlight></codeline>
<codeline lineno="1447"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1448"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(reg_num)</highlight></codeline>
<codeline lineno="1449"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0:</highlight></codeline>
<codeline lineno="1451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p_reg-&gt;GPREGRET;</highlight></codeline>
<codeline lineno="1452"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(POWER_GPREGRET2_GPREGRET_Msk)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>1:</highlight></codeline>
<codeline lineno="1454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p_reg-&gt;GPREGRET2;</highlight></codeline>
<codeline lineno="1455"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1458"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1459"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1460"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1461"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRF_POWER_HAS_GPREGRET</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1462"><highlight class="normal"></highlight></codeline>
<codeline lineno="1463"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_POWER_HAS_DCDCEN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1464"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__power__hal_1ga6b3e6f1754daf543262eb6d4233be975" kindref="member">nrf_power_dcdcen_set</ref>(NRF_POWER_Type<sp/>*<sp/>p_reg,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>enable)</highlight></codeline>
<codeline lineno="1465"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1466"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;DCDCEN<sp/>=<sp/>(enable<sp/>?<sp/>POWER_DCDCEN_DCDCEN_Enabled<sp/>:<sp/>POWER_DCDCEN_DCDCEN_Disabled)<sp/>&lt;&lt;</highlight></codeline>
<codeline lineno="1467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>POWER_DCDCEN_DCDCEN_Pos;</highlight></codeline>
<codeline lineno="1468"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1469"><highlight class="normal"></highlight></codeline>
<codeline lineno="1470"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrf__power__hal_1gab625f43f64efc077da3b502786346400" kindref="member">nrf_power_dcdcen_get</ref>(NRF_POWER_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="1471"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1472"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(p_reg-&gt;DCDCEN<sp/>&amp;<sp/>POWER_DCDCEN_DCDCEN_Msk)</highlight></codeline>
<codeline lineno="1473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>==</highlight></codeline>
<codeline lineno="1474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(POWER_DCDCEN_DCDCEN_Enabled<sp/>&lt;&lt;<sp/>POWER_DCDCEN_DCDCEN_Pos);</highlight></codeline>
<codeline lineno="1475"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1476"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRF_POWER_HAS_DCDCEN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1477"><highlight class="normal"></highlight></codeline>
<codeline lineno="1478"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(POWER_RAM_POWER_S0POWER_Msk)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1479"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__power__hal_1ga5d09133631495b690df29a092a6057a4" kindref="member">nrf_power_rampower_mask_on</ref>(NRF_POWER_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="1480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>block,</highlight></codeline>
<codeline lineno="1481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>section_mask)</highlight></codeline>
<codeline lineno="1482"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1483"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;RAM[block].POWERSET<sp/>=<sp/>section_mask;</highlight></codeline>
<codeline lineno="1484"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1485"><highlight class="normal"></highlight></codeline>
<codeline lineno="1486"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__power__hal_1gaee6c27678fe7f87ea8bc778c706245e6" kindref="member">nrf_power_rampower_mask_off</ref>(NRF_POWER_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="1487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>block,</highlight></codeline>
<codeline lineno="1488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>section_mask)</highlight></codeline>
<codeline lineno="1489"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1490"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;RAM[block].POWERCLR<sp/>=<sp/>section_mask;</highlight></codeline>
<codeline lineno="1491"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1492"><highlight class="normal"></highlight></codeline>
<codeline lineno="1493"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__power__hal_1gac2435b18ef4c25f807b1fce2eb7bb50d" kindref="member">nrf_power_rampower_mask_get</ref>(NRF_POWER_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,<sp/>uint8_t<sp/>block)</highlight></codeline>
<codeline lineno="1494"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1495"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p_reg-&gt;RAM[block].POWER;</highlight></codeline>
<codeline lineno="1496"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1497"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>defined(POWER_RAM_POWER_S0POWER_Msk)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1498"><highlight class="normal"></highlight></codeline>
<codeline lineno="1499"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_POWER_HAS_DCDCEN_VDDH</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1500"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__power__hal_1ga16853affef979cdc62291b811f25cc46" kindref="member">nrf_power_dcdcen_vddh_set</ref>(NRF_POWER_Type<sp/>*<sp/>p_reg,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>enable)</highlight></codeline>
<codeline lineno="1501"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1502"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(enable<sp/>&amp;&amp;<sp/>nrf52_errata_197())</highlight></codeline>
<codeline lineno="1503"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Workaround<sp/>for<sp/>anomaly<sp/>197<sp/>&quot;POWER:<sp/>DCDC<sp/>of<sp/>REG0<sp/>not<sp/>functional&quot;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*(</highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint32_t<sp/>*)0x40000638ul<sp/>=<sp/>1ul;</highlight></codeline>
<codeline lineno="1506"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1507"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;DCDCEN0<sp/>=<sp/>(enable<sp/>?<sp/>POWER_DCDCEN0_DCDCEN_Enabled<sp/>:<sp/>POWER_DCDCEN0_DCDCEN_Disabled)<sp/>&lt;&lt;</highlight></codeline>
<codeline lineno="1508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>POWER_DCDCEN0_DCDCEN_Pos;</highlight></codeline>
<codeline lineno="1509"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1510"><highlight class="normal"></highlight></codeline>
<codeline lineno="1511"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrf__power__hal_1gaa4132dcc882fb84520a8046ab88f8e8f" kindref="member">nrf_power_dcdcen_vddh_get</ref>(NRF_POWER_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="1512"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1513"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(p_reg-&gt;DCDCEN0<sp/>&amp;<sp/>POWER_DCDCEN0_DCDCEN_Msk)</highlight></codeline>
<codeline lineno="1514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>==</highlight></codeline>
<codeline lineno="1515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(POWER_DCDCEN0_DCDCEN_Enabled<sp/>&lt;&lt;<sp/>POWER_DCDCEN0_DCDCEN_Pos);</highlight></codeline>
<codeline lineno="1516"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1517"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRF_POWER_HAS_DCDCEN_VDDH</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1518"><highlight class="normal"></highlight></codeline>
<codeline lineno="1519"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_POWER_HAS_MAINREGSTATUS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1520"><highlight class="normal">NRF_STATIC_INLINE</highlight></codeline>
<codeline lineno="1521"><highlight class="normal"><ref refid="group__nrf__power__hal_1ga4c4e3a1505af5d72f3ccd16cf986abd8" kindref="member">nrf_power_mainregstatus_t</ref><sp/><ref refid="group__nrf__power__hal_1ga835338600525d9f90b302fd45b66b417" kindref="member">nrf_power_mainregstatus_get</ref>(NRF_POWER_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="1522"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1523"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="group__nrf__power__hal_1ga4c4e3a1505af5d72f3ccd16cf986abd8" kindref="member">nrf_power_mainregstatus_t</ref>)(((p_reg-&gt;MAINREGSTATUS)<sp/>&amp;</highlight></codeline>
<codeline lineno="1524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>POWER_MAINREGSTATUS_MAINREGSTATUS_Msk)<sp/>&gt;&gt;</highlight></codeline>
<codeline lineno="1525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>POWER_MAINREGSTATUS_MAINREGSTATUS_Pos);</highlight></codeline>
<codeline lineno="1526"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1527"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRF_POWER_HAS_MAINREGSTATUS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1528"><highlight class="normal"></highlight></codeline>
<codeline lineno="1529"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_POWER_HAS_USBREG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1530"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__power__hal_1ga7e5fad60a4dce6da9602068fd5fd9c28" kindref="member">nrf_power_usbregstatus_get</ref>(NRF_POWER_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="1531"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1532"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p_reg-&gt;USBREGSTATUS;</highlight></codeline>
<codeline lineno="1533"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1534"><highlight class="normal"></highlight></codeline>
<codeline lineno="1535"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrf__power__hal_1gad3a706ce20f081231917ebb96d8d43db" kindref="member">nrf_power_usbregstatus_vbusdet_get</ref>(NRF_POWER_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="1536"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1537"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="group__nrf__power__hal_1ga7e5fad60a4dce6da9602068fd5fd9c28" kindref="member">nrf_power_usbregstatus_get</ref>(p_reg)<sp/>&amp;<sp/><ref refid="group__nrf__power__hal_1gga85664e3b3bd3a99f8c8ef1fdbb1e2496afd9eddec83b650949f6e68e9419cf244" kindref="member">NRF_POWER_USBREGSTATUS_VBUSDETECT_MASK</ref>)<sp/>!=<sp/>0;</highlight></codeline>
<codeline lineno="1538"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1539"><highlight class="normal"></highlight></codeline>
<codeline lineno="1540"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrf__power__hal_1gad6fd5ec05e096da4231aa53d77ba03da" kindref="member">nrf_power_usbregstatus_outrdy_get</ref>(NRF_POWER_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="1541"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1542"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="group__nrf__power__hal_1ga7e5fad60a4dce6da9602068fd5fd9c28" kindref="member">nrf_power_usbregstatus_get</ref>(p_reg)<sp/>&amp;<sp/><ref refid="group__nrf__power__hal_1gga85664e3b3bd3a99f8c8ef1fdbb1e2496a876fbf69774a0135f3b9a79897f7b7fd" kindref="member">NRF_POWER_USBREGSTATUS_OUTPUTRDY_MASK</ref>)<sp/>!=<sp/>0;</highlight></codeline>
<codeline lineno="1543"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1544"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRF_POWER_HAS_USBREG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1545"><highlight class="normal"></highlight></codeline>
<codeline lineno="1546"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_POWER_HAS_ABB</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1547"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrf__power__hal_1gaaa1f3fb61935c73926fb3cfb83bac042" kindref="member">nrf_power_abb_busy_check</ref>(NRF_POWER_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,<sp/>uint8_t<sp/>domain_idx)</highlight></codeline>
<codeline lineno="1548"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1549"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((p_reg-&gt;ABB[domain_idx].STATUS<sp/>&amp;<sp/>POWER_ABB_STATUS_STATUS_Msk)<sp/>==</highlight></codeline>
<codeline lineno="1550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(POWER_ABB_STATUS_STATUS_Busy<sp/>&lt;&lt;<sp/>POWER_ABB_STATUS_STATUS_Pos));</highlight></codeline>
<codeline lineno="1551"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1552"><highlight class="normal"></highlight></codeline>
<codeline lineno="1553"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__power__hal_1ga7992c27e5e710edda444097fd8ef2099" kindref="member">nrf_power_abb_config_set</ref>(NRF_POWER_Type<sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="1554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>domain_idx,</highlight></codeline>
<codeline lineno="1555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structnrf__power__abb__config__t" kindref="compound">nrf_power_abb_config_t</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_config)</highlight></codeline>
<codeline lineno="1556"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1557"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;ABB[domain_idx].OPPOINT<sp/>=<sp/>((p_config-&gt;<ref refid="structnrf__power__abb__config__t_1a2f53ee6a153e9c6005ecacd4fc9e8580" kindref="member">op_point</ref><sp/>&lt;&lt;</highlight></codeline>
<codeline lineno="1558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>POWER_ABB_OPPOINT_OPPOINT_Pos)<sp/>&amp;</highlight></codeline>
<codeline lineno="1559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>POWER_ABB_OPPOINT_OPPOINT_Msk)<sp/>|</highlight></codeline>
<codeline lineno="1560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((p_config-&gt;<ref refid="structnrf__power__abb__config__t_1a850529c85d2dcc8e4aa4533256dc8d89" kindref="member">override_value</ref><sp/>&lt;&lt;</highlight></codeline>
<codeline lineno="1561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>POWER_ABB_OPPOINT_ABBPWROVERRIDEVAL_Pos)<sp/>&amp;</highlight></codeline>
<codeline lineno="1562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>POWER_ABB_OPPOINT_ABBPWROVERRIDEVAL_Msk)<sp/>|</highlight></codeline>
<codeline lineno="1563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((p_config-&gt;<ref refid="structnrf__power__abb__config__t_1a34c43a62a563f97d93aae917284e2d22" kindref="member">override_enable</ref><sp/>?</highlight></codeline>
<codeline lineno="1564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>POWER_ABB_OPPOINT_ABBPWROVERRIDEEN_Enabled<sp/>:</highlight></codeline>
<codeline lineno="1565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>POWER_ABB_OPPOINT_ABBPWROVERRIDEEN_Disabled)<sp/>&lt;&lt;</highlight></codeline>
<codeline lineno="1566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>POWER_ABB_OPPOINT_ABBPWROVERRIDEEN_Pos);</highlight></codeline>
<codeline lineno="1567"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1568"><highlight class="normal"></highlight></codeline>
<codeline lineno="1569"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__power__hal_1gac98f9ae23cc84e516d248647a7b56e4b" kindref="member">nrf_power_abb_config_get</ref>(NRF_POWER_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/><sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="1570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>domain_idx,</highlight></codeline>
<codeline lineno="1571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structnrf__power__abb__config__t" kindref="compound">nrf_power_abb_config_t</ref><sp/>*<sp/>p_config)</highlight></codeline>
<codeline lineno="1572"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1573"><highlight class="normal"><sp/><sp/><sp/><sp/>p_config-&gt;<ref refid="structnrf__power__abb__config__t_1a2f53ee6a153e9c6005ecacd4fc9e8580" kindref="member">op_point</ref><sp/>=<sp/>(<ref refid="group__nrf__power__hal_1ga53430096d68829bab78b99e6a7758e3d" kindref="member">nrf_power_op_point_t</ref>)((p_reg-&gt;ABB[domain_idx].OPPOINT<sp/>&amp;</highlight></codeline>
<codeline lineno="1574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>POWER_ABB_OPPOINT_OPPOINT_Msk)<sp/>&gt;&gt;</highlight></codeline>
<codeline lineno="1575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>POWER_ABB_OPPOINT_OPPOINT_Pos);</highlight></codeline>
<codeline lineno="1576"><highlight class="normal"></highlight></codeline>
<codeline lineno="1577"><highlight class="normal"><sp/><sp/><sp/><sp/>p_config-&gt;<ref refid="structnrf__power__abb__config__t_1a850529c85d2dcc8e4aa4533256dc8d89" kindref="member">override_value</ref><sp/>=<sp/>(<ref refid="group__nrf__power__hal_1ga1d59f7f076924c43c551ebbee116f209" kindref="member">nrf_power_override_value_t</ref>)</highlight></codeline>
<codeline lineno="1578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((p_reg-&gt;ABB[domain_idx].OPPOINT<sp/>&amp;</highlight></codeline>
<codeline lineno="1579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>POWER_ABB_OPPOINT_ABBPWROVERRIDEVAL_Msk)<sp/>&gt;&gt;</highlight></codeline>
<codeline lineno="1580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>POWER_ABB_OPPOINT_ABBPWROVERRIDEVAL_Pos);</highlight></codeline>
<codeline lineno="1581"><highlight class="normal"></highlight></codeline>
<codeline lineno="1582"><highlight class="normal"><sp/><sp/><sp/><sp/>p_config-&gt;<ref refid="structnrf__power__abb__config__t_1a34c43a62a563f97d93aae917284e2d22" kindref="member">override_enable</ref><sp/>=<sp/>((p_reg-&gt;ABB[domain_idx].OPPOINT<sp/>&amp;</highlight></codeline>
<codeline lineno="1583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>POWER_ABB_OPPOINT_ABBPWROVERRIDEEN_Msk)<sp/>==</highlight></codeline>
<codeline lineno="1584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(POWER_ABB_OPPOINT_ABBPWROVERRIDEEN_Enabled<sp/>&lt;&lt;</highlight></codeline>
<codeline lineno="1585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>POWER_ABB_OPPOINT_ABBPWROVERRIDEEN_Pos));</highlight></codeline>
<codeline lineno="1586"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1587"><highlight class="normal"></highlight></codeline>
<codeline lineno="1588"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__power__hal_1ga98b1b5ac9785863d7ebc67531f6d8dda" kindref="member">nrf_power_abb_force_lock_set</ref>(NRF_POWER_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="1589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>domain_idx,</highlight></codeline>
<codeline lineno="1590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>enable)</highlight></codeline>
<codeline lineno="1591"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1592"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;ABB[domain_idx].FORCELOCK<sp/>=<sp/>((enable<sp/>?</highlight></codeline>
<codeline lineno="1593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>POWER_ABB_FORCELOCK_ENABLE_Enabled<sp/>:</highlight></codeline>
<codeline lineno="1594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>POWER_ABB_FORCELOCK_ENABLE_Disabled)<sp/>&lt;&lt;</highlight></codeline>
<codeline lineno="1595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>POWER_ABB_FORCELOCK_ENABLE_Pos);</highlight></codeline>
<codeline lineno="1596"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1597"><highlight class="normal"></highlight></codeline>
<codeline lineno="1598"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrf__power__hal_1gad2c4e7e6386a510e255b7ac070438c37" kindref="member">nrf_power_abb_force_lock_check</ref>(NRF_POWER_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="1599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>domain_idx)</highlight></codeline>
<codeline lineno="1600"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1601"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(p_reg-&gt;ABB[domain_idx].FORCELOCK<sp/>&amp;<sp/>POWER_ABB_FORCELOCK_ENABLE_Msk)<sp/>==</highlight></codeline>
<codeline lineno="1602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(POWER_ABB_FORCELOCK_ENABLE_Enabled<sp/>&lt;&lt;<sp/>POWER_ABB_FORCELOCK_ENABLE_Pos);</highlight></codeline>
<codeline lineno="1603"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1604"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRF_POWER_HAS_ABB</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1605"><highlight class="normal"></highlight></codeline>
<codeline lineno="1606"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_POWER_HAS_VREG_CONFIG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1607"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__power__hal_1ga56ade568e3417a77400bbd51d016a402" kindref="member">nrf_power_vreg_enable</ref>(NRF_POWER_Type<sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>mask)</highlight></codeline>
<codeline lineno="1608"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1609"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;REGCONFIG<sp/>=<sp/>mask;</highlight></codeline>
<codeline lineno="1610"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1611"><highlight class="normal"></highlight></codeline>
<codeline lineno="1612"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__power__hal_1gafdd761e3bce5be804bc875f9a275b268" kindref="member">nrf_power_vreg_disable</ref>(NRF_POWER_Type<sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>mask)</highlight></codeline>
<codeline lineno="1613"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1614"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;REGCONFIG<sp/>=<sp/>~mask;</highlight></codeline>
<codeline lineno="1615"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1616"><highlight class="normal"></highlight></codeline>
<codeline lineno="1617"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__power__hal_1ga0880cea17453a393c231d0284acd9452" kindref="member">nrf_power_vreg_enable_check</ref>(NRF_POWER_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>mask)</highlight></codeline>
<codeline lineno="1618"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1619"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p_reg-&gt;REGCONFIG<sp/>&amp;<sp/>mask;</highlight></codeline>
<codeline lineno="1620"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1621"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRF_POWER_HAS_VREG_CONFIG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1622"><highlight class="normal"></highlight></codeline>
<codeline lineno="1623"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_POWER_HAS_BLOCK_MODES</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1624"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__power__hal_1ga25fdf5a67c48bc521919771381d52979" kindref="member">nrf_power_ulp_mode_set</ref>(NRF_POWER_Type<sp/>*<sp/>p_reg,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>enable)</highlight></codeline>
<codeline lineno="1625"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1626"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;BLOCKULPMODE<sp/>=<sp/>(enable<sp/>?<sp/>POWER_BLOCKULPMODE_BLOCK_Allowed<sp/>:</highlight></codeline>
<codeline lineno="1627"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>POWER_BLOCKULPMODE_BLOCK_Blocked)<sp/>&lt;&lt;</highlight></codeline>
<codeline lineno="1628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>POWER_BLOCKULPMODE_BLOCK_Pos;</highlight></codeline>
<codeline lineno="1629"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1630"><highlight class="normal"></highlight></codeline>
<codeline lineno="1631"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrf__power__hal_1gaf710827004768a3a31e57dda8ed2ca2f" kindref="member">nrf_power_ulp_mode_check</ref>(NRF_POWER_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="1632"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1633"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(p_reg-&gt;BLOCKULPMODE<sp/>&amp;<sp/>POWER_BLOCKULPMODE_BLOCK_Msk)<sp/>==</highlight></codeline>
<codeline lineno="1634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(POWER_BLOCKULPMODE_BLOCK_Allowed<sp/>&lt;&lt;<sp/>POWER_BLOCKULPMODE_BLOCK_Pos);</highlight></codeline>
<codeline lineno="1635"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1636"><highlight class="normal"></highlight></codeline>
<codeline lineno="1637"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__power__hal_1ga2a19d58b3104c5ade48f1804f2f89cee" kindref="member">nrf_power_ulv_mode_set</ref>(NRF_POWER_Type<sp/>*<sp/>p_reg,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>enable)</highlight></codeline>
<codeline lineno="1638"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1639"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;BLOCKULVMODE<sp/>=<sp/>(enable<sp/>?<sp/>POWER_BLOCKULVMODE_BLOCK_Allowed<sp/>:</highlight></codeline>
<codeline lineno="1640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>POWER_BLOCKULVMODE_BLOCK_Blocked)<sp/>&lt;&lt;</highlight></codeline>
<codeline lineno="1641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>POWER_BLOCKULVMODE_BLOCK_Pos;</highlight></codeline>
<codeline lineno="1642"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1643"><highlight class="normal"></highlight></codeline>
<codeline lineno="1644"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrf__power__hal_1ga1673cd7086ce57ced3ad7191d40f0307" kindref="member">nrf_power_ulv_mode_check</ref>(NRF_POWER_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="1645"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1646"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(p_reg-&gt;BLOCKULVMODE<sp/>&amp;<sp/>POWER_BLOCKULVMODE_BLOCK_Msk)<sp/>==</highlight></codeline>
<codeline lineno="1647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(POWER_BLOCKULVMODE_BLOCK_Allowed<sp/>&lt;&lt;<sp/>POWER_BLOCKULVMODE_BLOCK_Pos);</highlight></codeline>
<codeline lineno="1648"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1649"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRF_POWER_HAS_BLOCK_MODES</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1650"><highlight class="normal"></highlight></codeline>
<codeline lineno="1651"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_POWER_HAS_SEMAPHORE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1652"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrf__power__hal_1ga2b3c763f09b5552d478919075157c036" kindref="member">nrf_power_sem_status_get</ref>(NRF_POWER_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="1653"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1654"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(p_reg-&gt;SEMAPHORESTATUS<sp/>&amp;<sp/>POWER_SEMAPHORESTATUS_STATUS_Msk)<sp/>==</highlight></codeline>
<codeline lineno="1655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(POWER_SEMAPHORESTATUS_STATUS_Acquired<sp/>&lt;&lt;<sp/>POWER_SEMAPHORESTATUS_STATUS_Pos);</highlight></codeline>
<codeline lineno="1656"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1657"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRF_POWER_HAS_SEMAPHORE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1658"><highlight class="normal"></highlight></codeline>
<codeline lineno="1659"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_POWER_HAS_BILS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1660"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__power__hal_1ga9366872b258b831ee37bcbdfec023b3e" kindref="member">nrf_power_bils_set</ref>(NRF_POWER_Type<sp/>*<sp/>p_reg,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>enable)</highlight></codeline>
<codeline lineno="1661"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1662"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;BILSENABLE<sp/>=<sp/>(enable<sp/>?<sp/>POWER_BILSENABLE_ENABLE_Enabled<sp/>:</highlight></codeline>
<codeline lineno="1663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>POWER_BILSENABLE_ENABLE_Disabled)<sp/>&lt;&lt;</highlight></codeline>
<codeline lineno="1664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>POWER_BILSENABLE_ENABLE_Pos;</highlight></codeline>
<codeline lineno="1665"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1666"><highlight class="normal"></highlight></codeline>
<codeline lineno="1667"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrf__power__hal_1gadfe7f82b5a96d1408c2e9a5e00c53b90" kindref="member">nrf_power_bils_check</ref>(NRF_POWER_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="1668"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1669"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(p_reg-&gt;BILSENABLE<sp/>&amp;<sp/>POWER_BILSENABLE_ENABLE_Msk)<sp/>==</highlight></codeline>
<codeline lineno="1670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(POWER_BILSENABLE_ENABLE_Enabled<sp/>&lt;&lt;<sp/>POWER_BILSENABLE_ENABLE_Pos);</highlight></codeline>
<codeline lineno="1671"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1672"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRF_POWER_HAS_BILS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1673"><highlight class="normal"></highlight></codeline>
<codeline lineno="1674"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_POWER_HAS_PMIC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1675"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__power__hal_1ga891d262e69cb4fac63a9758aa36c63c0" kindref="member">nrf_power_pmic_set</ref>(NRF_POWER_Type<sp/>*<sp/>p_reg,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>enable)</highlight></codeline>
<codeline lineno="1676"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1677"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;PMICENABLE<sp/>=<sp/>(enable<sp/>?<sp/>POWER_PMICENABLE_ENABLE_Enabled<sp/>:</highlight></codeline>
<codeline lineno="1678"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>POWER_PMICENABLE_ENABLE_Disabled)<sp/>&lt;&lt;</highlight></codeline>
<codeline lineno="1679"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>POWER_PMICENABLE_ENABLE_Pos;</highlight></codeline>
<codeline lineno="1680"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1681"><highlight class="normal"></highlight></codeline>
<codeline lineno="1682"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrf__power__hal_1ga20683794648d38a852df13e15f4b0f3c" kindref="member">nrf_power_pmic_check</ref>(NRF_POWER_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="1683"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1684"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(p_reg-&gt;PMICENABLE<sp/>&amp;<sp/>POWER_PMICENABLE_ENABLE_Msk)<sp/>==</highlight></codeline>
<codeline lineno="1685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(POWER_PMICENABLE_ENABLE_Enabled<sp/>&lt;&lt;<sp/>POWER_PMICENABLE_ENABLE_Pos);</highlight></codeline>
<codeline lineno="1686"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1687"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRF_POWER_HAS_PMIC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1688"><highlight class="normal"></highlight></codeline>
<codeline lineno="1689"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRF_DECLARE_ONLY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1690"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1691"><highlight class="comment">/**<sp/>@}<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1692"><highlight class="normal"></highlight></codeline>
<codeline lineno="1693"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1694"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1695"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1696"><highlight class="normal"></highlight></codeline>
<codeline lineno="1697"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRF_POWER_H__</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="hal/nrf_power.h"/>
  </compounddef>
</doxygen>
