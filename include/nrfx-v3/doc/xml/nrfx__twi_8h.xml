<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="nrfx__twi_8h" kind="file" language="C++">
    <compoundname>nrfx_twi.h</compoundname>
    <includes local="no">nrfx.h</includes>
    <includes refid="nrfx__twi__twim_8h" local="no">nrfx_twi_twim.h</includes>
    <includes refid="nrf__twi_8h" local="no">hal/nrf_twi.h</includes>
    <incdepgraph>
      <node id="1">
        <label>drivers/include/nrfx_twi.h</label>
        <link refid="nrfx__twi_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>nrfx.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="structnrfx__twi__t" prot="public">nrfx_twi_t</innerclass>
    <innerclass refid="structnrfx__twi__config__t" prot="public">nrfx_twi_config_t</innerclass>
    <innerclass refid="structnrfx__twi__xfer__desc__t" prot="public">nrfx_twi_xfer_desc_t</innerclass>
    <innerclass refid="structnrfx__twi__evt__t" prot="public">nrfx_twi_evt_t</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__nrfx__twi_1ga17d7bcc8bc35e3fabf8aa077f957330e" prot="public" static="no">
        <name>NRFX_TWI_INSTANCE</name>
        <param><defname>id</defname></param>
        <initializer>{                                                           \
    .p_twi        = <ref refid="group__nrfx__utils_1ga5ea61d0994f6fb1ab5ed59d44f6a7ce9" kindref="member">NRFX_CONCAT</ref>(NRF_, TWI, id),             \
    .drv_inst_idx = <ref refid="group__nrfx__utils_1ga5ea61d0994f6fb1ab5ed59d44f6a7ce9" kindref="member">NRFX_CONCAT</ref>(NRFX_TWI, id, _INST_IDX),   \
}</initializer>
        <briefdescription>
<para>Macro for creating a TWI master driver instance. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/include/nrfx_twi.h" line="62" column="9" bodyfile="drivers/include/nrfx_twi.h" bodystart="62" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrfx__twi_1ga06897416b475f64c397f6ac2aa0cd51b" prot="public" static="no">
        <name>NRFX_TWI_DEFAULT_CONFIG</name>
        <param><defname>_pin_scl</defname></param>
        <param><defname>_pin_sda</defname></param>
        <initializer>{                                                                \
    .scl                = _pin_scl,                              \
    .sda                = _pin_sda,                              \
    .frequency          = <ref refid="group__nrf__twi__hal_1gga4366397176d6e463a2e594be0d996a61a07af2ed5e83d9bd35903d51792856fa9" kindref="member">NRF_TWI_FREQ_100K</ref>,                     \
    .interrupt_priority = <ref refid="group__nrfx__twi__config_1ga761563262c363158ae7620f7a2f36b5a" kindref="member">NRFX_TWI_DEFAULT_CONFIG_IRQ_PRIORITY</ref>,  \
    .hold_bus_uninit    = false,                                 \
}</initializer>
        <briefdescription>
<para>TWI master driver instance default configuration. </para>
        </briefdescription>
        <detaileddescription>
<para>This configuration sets up TWI with the following options:<itemizedlist>
<listitem><para>clock frequency: 100 kHz</para>
</listitem><listitem><para>disable bus holding after uninit</para>
</listitem></itemizedlist>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">_pin_scl</parametername>
</parameternamelist>
<parameterdescription>
<para>SCL pin. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">_pin_sda</parametername>
</parameternamelist>
<parameterdescription>
<para>SDA pin. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/include/nrfx_twi.h" line="110" column="9" bodyfile="drivers/include/nrfx_twi.h" bodystart="110" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrfx__twi_1gaff494666514193a68dbb7b43b4da256d" prot="public" static="no">
        <name>NRFX_TWI_FLAG_NO_XFER_EVT_HANDLER</name>
        <initializer>(1UL &lt;&lt; 2)</initializer>
        <briefdescription>
<para>Flag indicating that the interrupt after each transfer will be suppressed, and the event handler will not be called. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/include/nrfx_twi.h" line="120" column="9" bodyfile="drivers/include/nrfx_twi.h" bodystart="120" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrfx__twi_1ga3c919cd69c51f64039324fda37da1a29" prot="public" static="no">
        <name>NRFX_TWI_FLAG_TX_NO_STOP</name>
        <initializer>(1UL &lt;&lt; 5)</initializer>
        <briefdescription>
<para>Flag indicating that the TX transfer will not end with a stop condition. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/include/nrfx_twi.h" line="122" column="9" bodyfile="drivers/include/nrfx_twi.h" bodystart="122" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrfx__twi_1ga5684cab698a35c770a78854e348c2408" prot="public" static="no">
        <name>NRFX_TWI_FLAG_SUSPEND</name>
        <initializer>(1UL &lt;&lt; 6)</initializer>
        <briefdescription>
<para>Flag indicating that the transfer will be suspended. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/include/nrfx_twi.h" line="124" column="9" bodyfile="drivers/include/nrfx_twi.h" bodystart="124" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrfx__twi_1gaa9406d59abbc1f914a47edcb573ef683" prot="public" static="no">
        <name>NRFX_TWI_XFER_DESC_TX</name>
        <param><defname>addr</defname></param>
        <param><defname>p_data</defname></param>
        <param><defname>length</defname></param>
        <initializer>{                                                   \
    .type             = <ref refid="group__nrfx__twi_1ggaf227c5ab481c56715097ba08a0ae2baca212037ca48f014677c8d9efd647fd72a" kindref="member">NRFX_TWI_XFER_TX</ref>,           \
    .address          = (addr),                     \
    .primary_length   = (length),                   \
    .secondary_length = 0,                          \
    .p_primary_buf    = (p_data),                   \
    .p_secondary_buf  = NULL,                       \
}</initializer>
        <briefdescription>
<para>Macro for setting the TX transfer descriptor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/include/nrfx_twi.h" line="158" column="9" bodyfile="drivers/include/nrfx_twi.h" bodystart="158" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrfx__twi_1ga9496c7354553841d40495f025f626dcf" prot="public" static="no">
        <name>NRFX_TWI_XFER_DESC_RX</name>
        <param><defname>addr</defname></param>
        <param><defname>p_data</defname></param>
        <param><defname>length</defname></param>
        <initializer>{                                                   \
    .type             = <ref refid="group__nrfx__twi_1ggaf227c5ab481c56715097ba08a0ae2bacac11390a9257b1036b10cd77eaee53e2a" kindref="member">NRFX_TWI_XFER_RX</ref>,           \
    .address          = (addr),                     \
    .primary_length   = (length),                   \
    .secondary_length = 0,                          \
    .p_primary_buf    = (p_data),                   \
    .p_secondary_buf  = NULL,                       \
}</initializer>
        <briefdescription>
<para>Macro for setting the RX transfer descriptor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/include/nrfx_twi.h" line="169" column="9" bodyfile="drivers/include/nrfx_twi.h" bodystart="169" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrfx__twi_1ga55f782b6a418104c143b4aafb2648e4a" prot="public" static="no">
        <name>NRFX_TWI_XFER_DESC_TXRX</name>
        <param><defname>addr</defname></param>
        <param><defname>p_tx</defname></param>
        <param><defname>tx_len</defname></param>
        <param><defname>p_rx</defname></param>
        <param><defname>rx_len</defname></param>
        <initializer>{                                                                 \
    .type             = <ref refid="group__nrfx__twi_1ggaf227c5ab481c56715097ba08a0ae2baca8339203b38c17da2f0793f02661b0e83" kindref="member">NRFX_TWI_XFER_TXRX</ref>,                       \
    .address          = (addr),                                   \
    .primary_length   = (tx_len),                                 \
    .secondary_length = (rx_len),                                 \
    .p_primary_buf    = (p_tx),                                   \
    .p_secondary_buf  = (p_rx),                                   \
}</initializer>
        <briefdescription>
<para>Macro for setting the TX-RX transfer descriptor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/include/nrfx_twi.h" line="180" column="9" bodyfile="drivers/include/nrfx_twi.h" bodystart="180" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrfx__twi_1gae5c32acc87146cdd3de969ad60085e08" prot="public" static="no">
        <name>NRFX_TWI_XFER_DESC_TXTX</name>
        <param><defname>addr</defname></param>
        <param><defname>p_tx</defname></param>
        <param><defname>tx_len</defname></param>
        <param><defname>p_tx2</defname></param>
        <param><defname>tx_len2</defname></param>
        <initializer>{                                                                   \
    .type             = <ref refid="group__nrfx__twi_1ggaf227c5ab481c56715097ba08a0ae2baca81c31707f88003a02ccc7fcd7beb0e1c" kindref="member">NRFX_TWI_XFER_TXTX</ref>,                         \
    .address          = (addr),                                     \
    .primary_length   = (tx_len),                                   \
    .secondary_length = (tx_len2),                                  \
    .p_primary_buf    = (p_tx),                                     \
    .p_secondary_buf  = (p_tx2),                                    \
}</initializer>
        <briefdescription>
<para>Macro for setting the TX-TX transfer descriptor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/include/nrfx_twi.h" line="191" column="9" bodyfile="drivers/include/nrfx_twi.h" bodystart="191" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrfx__twi_1ga4b21ab166f6bbf178c291c00bdecc16b" prot="public" static="no">
        <name>NRFX_TWI_INST_HANDLER_GET</name>
        <param><defname>idx</defname></param>
        <initializer><ref refid="group__nrfx__common_1gaa78d21b07d22f7a4bfbd1feda51ef1f4" kindref="member">NRFX_CONCAT_3</ref>(nrfx_twi_, idx, _irq_handler)</initializer>
        <briefdescription>
<para>Macro returning TWI interrupt handler. </para>
        </briefdescription>
        <detaileddescription>
<para>param[in] idx TWI index.</para>
<para><simplesect kind="return"><para>Interrupt handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/include/nrfx_twi.h" line="380" column="9" bodyfile="drivers/include/nrfx_twi.h" bodystart="380" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="group__nrfx__twi_1ga7aa1ed323e67b973f5dcfe80fe21e7f4" prot="public" static="no" strong="no">
        <type></type>
        <name>nrfx_twi_evt_type_t</name>
        <enumvalue id="group__nrfx__twi_1gga7aa1ed323e67b973f5dcfe80fe21e7f4a6f50db79773a3ca43f8d78c4a7064510" prot="public">
          <name>NRFX_TWI_EVT_DONE</name>
          <briefdescription>
<para>Transfer completed event. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrfx__twi_1gga7aa1ed323e67b973f5dcfe80fe21e7f4a3ab204968c724cc0467715bdcd1f152c" prot="public">
          <name>NRFX_TWI_EVT_ADDRESS_NACK</name>
          <briefdescription>
<para>Error event: NACK received after sending the address. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrfx__twi_1gga7aa1ed323e67b973f5dcfe80fe21e7f4a4fa4f698d6c60e5a032f953ff2be61d2" prot="public">
          <name>NRFX_TWI_EVT_DATA_NACK</name>
          <briefdescription>
<para>Error event: NACK received after sending a data byte. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrfx__twi_1gga7aa1ed323e67b973f5dcfe80fe21e7f4a219f33b07b265bf3b2fc3a19043774d9" prot="public">
          <name>NRFX_TWI_EVT_OVERRUN</name>
          <briefdescription>
<para>Error event: The unread data is replaced by new data. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrfx__twi_1gga7aa1ed323e67b973f5dcfe80fe21e7f4a47b8c8e31248fe102b0166f9afcb5de0" prot="public">
          <name>NRFX_TWI_EVT_BUS_ERROR</name>
          <briefdescription>
<para>Error event: An unexpected transition occurred on the bus. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>TWI master driver event types. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/include/nrfx_twi.h" line="127" column="1" bodyfile="drivers/include/nrfx_twi.h" bodystart="128" bodyend="134"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrfx__twi_1gaf227c5ab481c56715097ba08a0ae2bac" prot="public" static="no" strong="no">
        <type></type>
        <name>nrfx_twi_xfer_type_t</name>
        <enumvalue id="group__nrfx__twi_1ggaf227c5ab481c56715097ba08a0ae2baca212037ca48f014677c8d9efd647fd72a" prot="public">
          <name>NRFX_TWI_XFER_TX</name>
          <briefdescription>
<para>TX transfer. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrfx__twi_1ggaf227c5ab481c56715097ba08a0ae2bacac11390a9257b1036b10cd77eaee53e2a" prot="public">
          <name>NRFX_TWI_XFER_RX</name>
          <briefdescription>
<para>RX transfer. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrfx__twi_1ggaf227c5ab481c56715097ba08a0ae2baca8339203b38c17da2f0793f02661b0e83" prot="public">
          <name>NRFX_TWI_XFER_TXRX</name>
          <briefdescription>
<para>TX transfer followed by RX transfer with repeated start. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrfx__twi_1ggaf227c5ab481c56715097ba08a0ae2baca81c31707f88003a02ccc7fcd7beb0e1c" prot="public">
          <name>NRFX_TWI_XFER_TXTX</name>
          <briefdescription>
<para>TX transfer followed by TX transfer with repeated start. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>TWI master driver transfer types. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/include/nrfx_twi.h" line="137" column="1" bodyfile="drivers/include/nrfx_twi.h" bodystart="138" bodyend="143"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group__nrfx__twi_1ga8124b21b85a7fdd038ca11e8a65f35ba" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* nrfx_twi_evt_handler_t) (nrfx_twi_evt_t const *p_event, void *p_context)</definition>
        <argsstring>)(nrfx_twi_evt_t const *p_event, void *p_context)</argsstring>
        <name>nrfx_twi_evt_handler_t</name>
        <briefdescription>
<para>TWI event handler prototype. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/include/nrfx_twi.h" line="209" column="9" bodyfile="drivers/include/nrfx_twi.h" bodystart="209" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__nrfx__twi_1gaf88045a2dfe68bb08f9f340b1cf46e78" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__nrfx__error__codes_1ga2449720f8fa17b22243218068459a24b" kindref="member">nrfx_err_t</ref></type>
        <definition>nrfx_err_t nrfx_twi_init</definition>
        <argsstring>(nrfx_twi_t const *p_instance, nrfx_twi_config_t const *p_config, nrfx_twi_evt_handler_t event_handler, void *p_context)</argsstring>
        <name>nrfx_twi_init</name>
        <param>
          <type><ref refid="structnrfx__twi__t" kindref="compound">nrfx_twi_t</ref> const *</type>
          <declname>p_instance</declname>
        </param>
        <param>
          <type><ref refid="structnrfx__twi__config__t" kindref="compound">nrfx_twi_config_t</ref> const *</type>
          <declname>p_config</declname>
        </param>
        <param>
          <type><ref refid="group__nrfx__twi_1ga8124b21b85a7fdd038ca11e8a65f35ba" kindref="member">nrfx_twi_evt_handler_t</ref></type>
          <declname>event_handler</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>p_context</declname>
        </param>
        <briefdescription>
<para>Function for initializing the TWI driver instance. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_instance</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the driver instance structure. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">p_config</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure with the initial configuration. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">event_handler</parametername>
</parameternamelist>
<parameterdescription>
<para>Event handler provided by the user. If NULL, blocking mode is enabled. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">p_context</parametername>
</parameternamelist>
<parameterdescription>
<para>Context passed to event handler.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>NRFX_SUCCESS</parametername>
</parameternamelist>
<parameterdescription>
<para>Initialization is successful. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NRFX_ERROR_ALREADY</parametername>
</parameternamelist>
<parameterdescription>
<para>The driver is already initialized. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NRFX_ERROR_INVALID_STATE</parametername>
</parameternamelist>
<parameterdescription>
<para>The driver is already initialized. Deprecated - use <ref refid="group__nrfx__error__codes_1gga2449720f8fa17b22243218068459a24badc3fc33e8a7dc8b9a9547fe07b437efd" kindref="member">NRFX_ERROR_ALREADY</ref> instead. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NRFX_ERROR_BUSY</parametername>
</parameternamelist>
<parameterdescription>
<para>Some other peripheral with the same instance ID is already in use. This is possible only if <ref refid="group__nrfx__prs" kindref="compound">Peripheral Resource Sharing (PRS)</ref> module is enabled. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/include/nrfx_twi.h" line="229" column="12" declfile="drivers/include/nrfx_twi.h" declline="229" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfx__twi_1gaca8c7ed413224911dd989f525eca75c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__nrfx__error__codes_1ga2449720f8fa17b22243218068459a24b" kindref="member">nrfx_err_t</ref></type>
        <definition>nrfx_err_t nrfx_twi_reconfigure</definition>
        <argsstring>(nrfx_twi_t const *p_instance, nrfx_twi_config_t const *p_config)</argsstring>
        <name>nrfx_twi_reconfigure</name>
        <param>
          <type><ref refid="structnrfx__twi__t" kindref="compound">nrfx_twi_t</ref> const *</type>
          <declname>p_instance</declname>
        </param>
        <param>
          <type><ref refid="structnrfx__twi__config__t" kindref="compound">nrfx_twi_config_t</ref> const *</type>
          <declname>p_config</declname>
        </param>
        <briefdescription>
<para>Function for reconfiguring the TWI instance. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_instance</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the driver instance structure. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">p_config</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure with the configuration.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>NRFX_SUCCESS</parametername>
</parameternamelist>
<parameterdescription>
<para>Reconfiguration was successful. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NRFX_ERROR_BUSY</parametername>
</parameternamelist>
<parameterdescription>
<para>The driver is during transaction. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NRFX_ERROR_INVALID_STATE</parametername>
</parameternamelist>
<parameterdescription>
<para>The driver is uninitialized. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/include/nrfx_twi.h" line="244" column="12" declfile="drivers/include/nrfx_twi.h" declline="244" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfx__twi_1ga504295f2b045ce9cd57e91b335721da8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nrfx_twi_uninit</definition>
        <argsstring>(nrfx_twi_t const *p_instance)</argsstring>
        <name>nrfx_twi_uninit</name>
        <param>
          <type><ref refid="structnrfx__twi__t" kindref="compound">nrfx_twi_t</ref> const *</type>
          <declname>p_instance</declname>
        </param>
        <briefdescription>
<para>Function for uninitializing the TWI instance. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_instance</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the driver instance structure. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/include/nrfx_twi.h" line="252" column="6" declfile="drivers/include/nrfx_twi.h" declline="252" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfx__twi_1ga74f9c2116576ef7e29d2bc6a08d53643" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool nrfx_twi_init_check</definition>
        <argsstring>(nrfx_twi_t const *p_instance)</argsstring>
        <name>nrfx_twi_init_check</name>
        <param>
          <type><ref refid="structnrfx__twi__t" kindref="compound">nrfx_twi_t</ref> const *</type>
          <declname>p_instance</declname>
        </param>
        <briefdescription>
<para>Function for checking if the TWI driver instance is initialized. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_instance</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the driver instance structure.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>Instance is already initialized. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>Instance is not initialized. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/include/nrfx_twi.h" line="262" column="6" declfile="drivers/include/nrfx_twi.h" declline="262" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfx__twi_1ga3eed30998bb2f651f6db3725ef3c81bb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nrfx_twi_enable</definition>
        <argsstring>(nrfx_twi_t const *p_instance)</argsstring>
        <name>nrfx_twi_enable</name>
        <param>
          <type><ref refid="structnrfx__twi__t" kindref="compound">nrfx_twi_t</ref> const *</type>
          <declname>p_instance</declname>
        </param>
        <briefdescription>
<para>Function for enabling the TWI instance. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_instance</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the driver instance structure. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/include/nrfx_twi.h" line="269" column="6" declfile="drivers/include/nrfx_twi.h" declline="269" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfx__twi_1gac3e0d49b07922c82a6ad35f2c5ed3a63" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nrfx_twi_disable</definition>
        <argsstring>(nrfx_twi_t const *p_instance)</argsstring>
        <name>nrfx_twi_disable</name>
        <param>
          <type><ref refid="structnrfx__twi__t" kindref="compound">nrfx_twi_t</ref> const *</type>
          <declname>p_instance</declname>
        </param>
        <briefdescription>
<para>Function for disabling the TWI instance. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_instance</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the driver instance structure. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/include/nrfx_twi.h" line="276" column="6" declfile="drivers/include/nrfx_twi.h" declline="276" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfx__twi_1ga5c9b6d700f27de583917838647057658" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__nrfx__error__codes_1ga2449720f8fa17b22243218068459a24b" kindref="member">nrfx_err_t</ref></type>
        <definition>nrfx_err_t nrfx_twi_xfer</definition>
        <argsstring>(nrfx_twi_t const *p_instance, nrfx_twi_xfer_desc_t const *p_xfer_desc, uint32_t flags)</argsstring>
        <name>nrfx_twi_xfer</name>
        <param>
          <type><ref refid="structnrfx__twi__t" kindref="compound">nrfx_twi_t</ref> const *</type>
          <declname>p_instance</declname>
        </param>
        <param>
          <type><ref refid="structnrfx__twi__xfer__desc__t" kindref="compound">nrfx_twi_xfer_desc_t</ref> const *</type>
          <declname>p_xfer_desc</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>flags</declname>
        </param>
        <briefdescription>
<para>Function for performing a TWI transfer. </para>
        </briefdescription>
        <detaileddescription>
<para>The following transfer types can be configured (<ref refid="structnrfx__twi__xfer__desc__t_1a3959af41675fdabe42c9207ce0bc6963" kindref="member">nrfx_twi_xfer_desc_t::type</ref>):<itemizedlist>
<listitem><para><ref refid="group__nrfx__twi_1ggaf227c5ab481c56715097ba08a0ae2baca8339203b38c17da2f0793f02661b0e83" kindref="member">NRFX_TWI_XFER_TXRX</ref> - Write operation followed by a read operation (without STOP condition in between).</para>
</listitem><listitem><para><ref refid="group__nrfx__twi_1ggaf227c5ab481c56715097ba08a0ae2baca81c31707f88003a02ccc7fcd7beb0e1c" kindref="member">NRFX_TWI_XFER_TXTX</ref> - Write operation followed by a write operation (without STOP condition in between).</para>
</listitem><listitem><para><ref refid="group__nrfx__twi_1ggaf227c5ab481c56715097ba08a0ae2baca212037ca48f014677c8d9efd647fd72a" kindref="member">NRFX_TWI_XFER_TX</ref> - Write operation (with or without STOP condition).</para>
</listitem><listitem><para><ref refid="group__nrfx__twi_1ggaf227c5ab481c56715097ba08a0ae2bacac11390a9257b1036b10cd77eaee53e2a" kindref="member">NRFX_TWI_XFER_RX</ref> - Read operation (with STOP condition).</para>
</listitem></itemizedlist>
</para>
<para><simplesect kind="note"><para>TX-RX and TX-TX transfers are supported only in non-blocking mode.</para>
</simplesect>
Additional options are provided using the flags parameter:<itemizedlist>
<listitem><para><ref refid="group__nrfx__twi_1gaff494666514193a68dbb7b43b4da256d" kindref="member">NRFX_TWI_FLAG_NO_XFER_EVT_HANDLER</ref> - No user event handler after transfer completion. In most cases, this also means no interrupt at the end of the transfer.</para>
</listitem><listitem><para><ref refid="group__nrfx__twi_1ga3c919cd69c51f64039324fda37da1a29" kindref="member">NRFX_TWI_FLAG_TX_NO_STOP</ref> - No stop condition after TX transfer.</para>
</listitem><listitem><para><ref refid="group__nrfx__twi_1ga5684cab698a35c770a78854e348c2408" kindref="member">NRFX_TWI_FLAG_SUSPEND</ref> - Transfer will be suspended. This allows for combining multiple transfers into one transaction. Only transactions with the same direction can be combined. To finish the transaction, call the function without this flag.</para>
</listitem></itemizedlist>
</para>
<para><simplesect kind="note"><para>Some flag combinations are invalid:<itemizedlist>
<listitem><para><ref refid="group__nrfx__twi_1ga3c919cd69c51f64039324fda37da1a29" kindref="member">NRFX_TWI_FLAG_TX_NO_STOP</ref> with <ref refid="structnrfx__twi__xfer__desc__t_1a3959af41675fdabe42c9207ce0bc6963" kindref="member">nrfx_twi_xfer_desc_t::type</ref> different than <ref refid="group__nrfx__twi_1ggaf227c5ab481c56715097ba08a0ae2baca212037ca48f014677c8d9efd647fd72a" kindref="member">NRFX_TWI_XFER_TX</ref></para>
</listitem></itemizedlist>
</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_instance</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the driver instance structure. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">p_xfer_desc</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the transfer descriptor. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">flags</parametername>
</parameternamelist>
<parameterdescription>
<para>Transfer options (0 for default settings).</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>NRFX_SUCCESS</parametername>
</parameternamelist>
<parameterdescription>
<para>The procedure is successful. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NRFX_ERROR_BUSY</parametername>
</parameternamelist>
<parameterdescription>
<para>The driver is not ready for a new transfer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NRFX_ERROR_NOT_SUPPORTED</parametername>
</parameternamelist>
<parameterdescription>
<para>The provided parameters are not supported. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NRFX_ERROR_INTERNAL</parametername>
</parameternamelist>
<parameterdescription>
<para>An unexpected transition occurred on the bus. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NRFX_ERROR_INVALID_STATE</parametername>
</parameternamelist>
<parameterdescription>
<para>Other direction of transaction is suspended on the bus. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NRFX_ERROR_DRV_TWI_ERR_OVERRUN</parametername>
</parameternamelist>
<parameterdescription>
<para>The unread data is replaced by new data (TXRX and RX) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NRFX_ERROR_DRV_TWI_ERR_ANACK</parametername>
</parameternamelist>
<parameterdescription>
<para>Negative acknowledgement (NACK) is received after sending the address in polling mode. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NRFX_ERROR_DRV_TWI_ERR_DNACK</parametername>
</parameternamelist>
<parameterdescription>
<para>Negative acknowledgement (NACK) is received after sending a data byte in polling mode. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/include/nrfx_twi.h" line="314" column="12" declfile="drivers/include/nrfx_twi.h" declline="314" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfx__twi_1ga7ad4c5f8afa8fc13a02a0a67a024c67e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool nrfx_twi_is_busy</definition>
        <argsstring>(nrfx_twi_t const *p_instance)</argsstring>
        <name>nrfx_twi_is_busy</name>
        <param>
          <type><ref refid="structnrfx__twi__t" kindref="compound">nrfx_twi_t</ref> const *</type>
          <declname>p_instance</declname>
        </param>
        <briefdescription>
<para>Function for checking the TWI driver state. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_instance</parametername>
</parameternamelist>
<parameterdescription>
<para>TWI instance.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>The TWI driver is currently busy performing a transfer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>The TWI driver is ready for a new transfer. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/include/nrfx_twi.h" line="326" column="6" declfile="drivers/include/nrfx_twi.h" declline="326" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfx__twi_1gae8fb5691723bce5cce250e78aa9c14aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t nrfx_twi_data_count_get</definition>
        <argsstring>(nrfx_twi_t const *p_instance)</argsstring>
        <name>nrfx_twi_data_count_get</name>
        <param>
          <type><ref refid="structnrfx__twi__t" kindref="compound">nrfx_twi_t</ref> const *</type>
          <declname>p_instance</declname>
        </param>
        <briefdescription>
<para>Function for getting the transferred data count. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_instance</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the driver instance structure.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Data count. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/include/nrfx_twi.h" line="335" column="8" declfile="drivers/include/nrfx_twi.h" declline="335" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfx__twi_1ga7e850f6480a6d7ff7cd430da75679922" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t nrfx_twi_stopped_event_get</definition>
        <argsstring>(nrfx_twi_t const *p_instance)</argsstring>
        <name>nrfx_twi_stopped_event_get</name>
        <param>
          <type><ref refid="structnrfx__twi__t" kindref="compound">nrfx_twi_t</ref> const *</type>
          <declname>p_instance</declname>
        </param>
        <briefdescription>
<para>Function for returning the address of a STOPPED TWI event. </para>
        </briefdescription>
        <detaileddescription>
<para>A STOPPED event can be used to detect the end of a transfer if the <ref refid="group__nrfx__twi_1gaff494666514193a68dbb7b43b4da256d" kindref="member">NRFX_TWI_FLAG_NO_XFER_EVT_HANDLER</ref> option is used.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_instance</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the driver instance structure.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>STOPPED event address. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/include/nrfx_twi.h" line="347" column="10" declfile="drivers/include/nrfx_twi.h" declline="347" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfx__twi_1ga1666c4226c3dea9c82abcc11c80ed850" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRFX_STATIC_INLINE <ref refid="group__nrfx__error__codes_1ga2449720f8fa17b22243218068459a24b" kindref="member">nrfx_err_t</ref></type>
        <definition>NRFX_STATIC_INLINE nrfx_err_t nrfx_twi_bus_recover</definition>
        <argsstring>(uint32_t scl_pin, uint32_t sda_pin)</argsstring>
        <name>nrfx_twi_bus_recover</name>
        <param>
          <type>uint32_t</type>
          <declname>scl_pin</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>sda_pin</declname>
        </param>
        <briefdescription>
<para>Function for recovering the bus. </para>
        </briefdescription>
        <detaileddescription>
<para>This function checks if the bus is not stuck because of a slave holding the SDA line in the low state, and if needed it performs required number of pulses on the SCL line to make the slave release the SDA line. Finally, the function generates a STOP condition on the bus to put it into a known state.</para>
<para><simplesect kind="note"><para>This function can be used only if the TWI driver is uninitialized.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">scl_pin</parametername>
</parameternamelist>
<parameterdescription>
<para>SCL pin number. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">sda_pin</parametername>
</parameternamelist>
<parameterdescription>
<para>SDA pin number.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>NRFX_SUCCESS</parametername>
</parameternamelist>
<parameterdescription>
<para>Bus recovery was successful. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NRFX_ERROR_INTERNAL</parametername>
</parameternamelist>
<parameterdescription>
<para>Bus recovery failed. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/include/nrfx_twi.h" line="367" column="31" bodyfile="drivers/include/nrfx_twi.h" bodystart="367" bodyend="370" declfile="drivers/include/nrfx_twi.h" declline="364" declcolumn="31"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2015<sp/>-<sp/>2024,<sp/>Nordic<sp/>Semiconductor<sp/>ASA</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>All<sp/>rights<sp/>reserved.</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>SPDX-License-Identifier:<sp/>BSD-3-Clause</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions<sp/>are<sp/>met:</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>1.<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright<sp/>notice,<sp/>this</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>2.<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the<sp/>distribution.</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/>3.<sp/>Neither<sp/>the<sp/>name<sp/>of<sp/>the<sp/>copyright<sp/>holder<sp/>nor<sp/>the<sp/>names<sp/>of<sp/>its</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>contributors<sp/>may<sp/>be<sp/>used<sp/>to<sp/>endorse<sp/>or<sp/>promote<sp/>products<sp/>derived<sp/>from<sp/>this</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>software<sp/>without<sp/>specific<sp/>prior<sp/>written<sp/>permission.</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>COPYRIGHT<sp/>HOLDERS<sp/>AND<sp/>CONTRIBUTORS<sp/>&quot;AS<sp/>IS&quot;</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/>AND<sp/>ANY<sp/>EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>THE</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*<sp/>ARE<sp/>DISCLAIMED.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>COPYRIGHT<sp/>HOLDER<sp/>OR<sp/>CONTRIBUTORS<sp/>BE</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,<sp/>SPECIAL,<sp/>EXEMPLARY,<sp/>OR</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>PROCUREMENT<sp/>OF</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>*<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,<sp/>DATA,<sp/>OR<sp/>PROFITS;<sp/>OR<sp/>BUSINESS</highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/>*<sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY<sp/>THEORY<sp/>OF<sp/>LIABILITY,<sp/>WHETHER<sp/>IN</highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/>*<sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR<sp/>OTHERWISE)</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/>*<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE<sp/>OF<sp/>THIS<sp/>SOFTWARE,<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/>*<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight></codeline>
<codeline lineno="32"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>NRFX_TWI_H__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRFX_TWI_H__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;nrfx.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;nrfx_twi_twim.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;hal/nrf_twi.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="45"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="46"><highlight class="comment"><sp/>*<sp/>@defgroup<sp/>nrfx_twi<sp/>TWI<sp/>driver</highlight></codeline>
<codeline lineno="47"><highlight class="comment"><sp/>*<sp/>@{</highlight></codeline>
<codeline lineno="48"><highlight class="comment"><sp/>*<sp/>@ingroup<sp/>nrf_twi</highlight></codeline>
<codeline lineno="49"><highlight class="comment"><sp/>*<sp/>@brief<sp/><sp/><sp/>Two<sp/>Wire<sp/>Interface<sp/>master<sp/>(TWI)<sp/>peripheral<sp/>driver.</highlight></codeline>
<codeline lineno="50"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="52"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="53"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Structure<sp/>for<sp/>the<sp/>TWI<sp/>master<sp/>driver<sp/>instance.</highlight></codeline>
<codeline lineno="54"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55" refid="structnrfx__twi__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal">{</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/>NRF_TWI_Type<sp/>*<sp/>p_twi;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Pointer<sp/>to<sp/>a<sp/>structure<sp/>with<sp/>TWI<sp/>registers.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>drv_inst_idx;<sp/></highlight><highlight class="comment">///&lt;<sp/>Index<sp/>of<sp/>the<sp/>driver<sp/>instance.<sp/>For<sp/>internal<sp/>use<sp/>only.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal">}<sp/><ref refid="structnrfx__twi__t" kindref="compound">nrfx_twi_t</ref>;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="61"><highlight class="comment">/**<sp/>@brief<sp/>Macro<sp/>for<sp/>creating<sp/>a<sp/>TWI<sp/>master<sp/>driver<sp/>instance.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRFX_TWI_INSTANCE(id)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="63"><highlight class="preprocessor">{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="64"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>.p_twi<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>NRFX_CONCAT(NRF_,<sp/>TWI,<sp/>id),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="65"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>.drv_inst_idx<sp/>=<sp/>NRFX_CONCAT(NRFX_TWI,<sp/>id,<sp/>_INST_IDX),<sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="66"><highlight class="preprocessor">}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>__NRFX_DOXYGEN__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>List<sp/>all<sp/>enabled<sp/>driver<sp/>instances<sp/>(in<sp/>the<sp/>format<sp/>NRFX_\&lt;instance_name\&gt;_INST_IDX).<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__common_1ga97a94e1334c4262979cb718e0f5e6cec" kindref="member">NRFX_INSTANCE_ENUM_LIST</ref>(TWI)</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>NRFX_TWI_ENABLED_COUNT</highlight></codeline>
<codeline lineno="73"><highlight class="normal">};</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="76"><highlight class="comment">/**<sp/>@brief<sp/>Structure<sp/>for<sp/>the<sp/>configuration<sp/>of<sp/>the<sp/>TWI<sp/>master<sp/>driver<sp/>instance.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77" refid="structnrfx__twi__config__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal">{</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scl;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>SCL<sp/>pin<sp/>number.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sda;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>SDA<sp/>pin<sp/>number.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__twi__hal_1ga4366397176d6e463a2e594be0d996a61" kindref="member">nrf_twi_frequency_t</ref><sp/>frequency;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>TWI<sp/>frequency.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>interrupt_priority;<sp/></highlight><highlight class="comment">///&lt;<sp/>Interrupt<sp/>priority.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hold_bus_uninit;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Hold<sp/>pull<sp/>up<sp/>state<sp/>on<sp/>GPIO<sp/>pins<sp/>after<sp/>uninit.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>skip_gpio_cfg;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Skip<sp/>GPIO<sp/>configuration<sp/>of<sp/>pins.</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="85"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/**&lt;<sp/>When<sp/>set<sp/>to<sp/>true,<sp/>the<sp/>driver<sp/>does<sp/>not<sp/>modify</highlight></codeline>
<codeline lineno="86"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>any<sp/>GPIO<sp/>parameters<sp/>of<sp/>the<sp/>used<sp/>pins.<sp/>Those</highlight></codeline>
<codeline lineno="87"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>parameters<sp/>are<sp/>supposed<sp/>to<sp/>be<sp/>configured</highlight></codeline>
<codeline lineno="88"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>externally<sp/>before<sp/>the<sp/>driver<sp/>is<sp/>initialized.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>skip_psel_cfg;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Skip<sp/>pin<sp/>selection<sp/>configuration.</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="90"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/**&lt;<sp/>When<sp/>set<sp/>to<sp/>true,<sp/>the<sp/>driver<sp/>does<sp/>not<sp/>modify</highlight></codeline>
<codeline lineno="91"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>pin<sp/>select<sp/>registers<sp/>in<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="92"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>Those<sp/>registers<sp/>are<sp/>supposed<sp/>to<sp/>be<sp/>set<sp/>up</highlight></codeline>
<codeline lineno="93"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>externally<sp/>before<sp/>the<sp/>driver<sp/>is<sp/>initialized.</highlight></codeline>
<codeline lineno="94"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>@note<sp/>When<sp/>both<sp/>GPIO<sp/>configuration<sp/>and<sp/>pin</highlight></codeline>
<codeline lineno="95"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>selection<sp/>are<sp/>to<sp/>be<sp/>skipped,<sp/>the<sp/>structure</highlight></codeline>
<codeline lineno="96"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>fields<sp/>that<sp/>specify<sp/>pins<sp/>can<sp/>be<sp/>omitted,</highlight></codeline>
<codeline lineno="97"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>as<sp/>they<sp/>are<sp/>ignored<sp/>anyway.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal">}<sp/><ref refid="structnrfx__twi__config__t" kindref="compound">nrfx_twi_config_t</ref>;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="100"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="101"><highlight class="comment"><sp/>*<sp/>@brief<sp/>TWI<sp/>master<sp/>driver<sp/>instance<sp/>default<sp/>configuration.</highlight></codeline>
<codeline lineno="102"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="103"><highlight class="comment"><sp/>*<sp/>This<sp/>configuration<sp/>sets<sp/>up<sp/>TWI<sp/>with<sp/>the<sp/>following<sp/>options:</highlight></codeline>
<codeline lineno="104"><highlight class="comment"><sp/>*<sp/>-<sp/>clock<sp/>frequency:<sp/>100<sp/>kHz</highlight></codeline>
<codeline lineno="105"><highlight class="comment"><sp/>*<sp/>-<sp/>disable<sp/>bus<sp/>holding<sp/>after<sp/>uninit</highlight></codeline>
<codeline lineno="106"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="107"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>_pin_scl<sp/>SCL<sp/>pin.</highlight></codeline>
<codeline lineno="108"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>_pin_sda<sp/>SDA<sp/>pin.</highlight></codeline>
<codeline lineno="109"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRFX_TWI_DEFAULT_CONFIG(_pin_scl,<sp/>_pin_sda)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="111"><highlight class="preprocessor">{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="112"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>.scl<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>_pin_scl,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="113"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>.sda<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>_pin_sda,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="114"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>.frequency<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>NRF_TWI_FREQ_100K,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="115"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>.interrupt_priority<sp/>=<sp/>NRFX_TWI_DEFAULT_CONFIG_IRQ_PRIORITY,<sp/><sp/>\</highlight></codeline>
<codeline lineno="116"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>.hold_bus_uninit<sp/><sp/><sp/><sp/>=<sp/>false,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="117"><highlight class="preprocessor">}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="119"><highlight class="comment">/**<sp/>@brief<sp/>Flag<sp/>indicating<sp/>that<sp/>the<sp/>interrupt<sp/>after<sp/>each<sp/>transfer<sp/>will<sp/>be<sp/>suppressed,<sp/>and<sp/>the<sp/>event<sp/>handler<sp/>will<sp/>not<sp/>be<sp/>called.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRFX_TWI_FLAG_NO_XFER_EVT_HANDLER<sp/>(1UL<sp/>&lt;&lt;<sp/>2)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="121"><highlight class="comment">/**<sp/>@brief<sp/>Flag<sp/>indicating<sp/>that<sp/>the<sp/>TX<sp/>transfer<sp/>will<sp/>not<sp/>end<sp/>with<sp/>a<sp/>stop<sp/>condition.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRFX_TWI_FLAG_TX_NO_STOP<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(1UL<sp/>&lt;&lt;<sp/>5)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="123"><highlight class="comment">/**<sp/>@brief<sp/>Flag<sp/>indicating<sp/>that<sp/>the<sp/>transfer<sp/>will<sp/>be<sp/>suspended.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRFX_TWI_FLAG_SUSPEND<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(1UL<sp/>&lt;&lt;<sp/>6)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="126"><highlight class="comment">/**<sp/>@brief<sp/>TWI<sp/>master<sp/>driver<sp/>event<sp/>types.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal">{</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__twi_1gga7aa1ed323e67b973f5dcfe80fe21e7f4a6f50db79773a3ca43f8d78c4a7064510" kindref="member">NRFX_TWI_EVT_DONE</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Transfer<sp/>completed<sp/>event.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__twi_1gga7aa1ed323e67b973f5dcfe80fe21e7f4a3ab204968c724cc0467715bdcd1f152c" kindref="member">NRFX_TWI_EVT_ADDRESS_NACK</ref>,<sp/></highlight><highlight class="comment">///&lt;<sp/>Error<sp/>event:<sp/>NACK<sp/>received<sp/>after<sp/>sending<sp/>the<sp/>address.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__twi_1gga7aa1ed323e67b973f5dcfe80fe21e7f4a4fa4f698d6c60e5a032f953ff2be61d2" kindref="member">NRFX_TWI_EVT_DATA_NACK</ref>,<sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Error<sp/>event:<sp/>NACK<sp/>received<sp/>after<sp/>sending<sp/>a<sp/>data<sp/>byte.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__twi_1gga7aa1ed323e67b973f5dcfe80fe21e7f4a219f33b07b265bf3b2fc3a19043774d9" kindref="member">NRFX_TWI_EVT_OVERRUN</ref>,<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Error<sp/>event:<sp/>The<sp/>unread<sp/>data<sp/>is<sp/>replaced<sp/>by<sp/>new<sp/>data.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__twi_1gga7aa1ed323e67b973f5dcfe80fe21e7f4a47b8c8e31248fe102b0166f9afcb5de0" kindref="member">NRFX_TWI_EVT_BUS_ERROR</ref><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Error<sp/>event:<sp/>An<sp/>unexpected<sp/>transition<sp/>occurred<sp/>on<sp/>the<sp/>bus.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal">}<sp/><ref refid="group__nrfx__twi_1ga7aa1ed323e67b973f5dcfe80fe21e7f4" kindref="member">nrfx_twi_evt_type_t</ref>;</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="136"><highlight class="comment">/**<sp/>@brief<sp/>TWI<sp/>master<sp/>driver<sp/>transfer<sp/>types.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal">{</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__twi_1ggaf227c5ab481c56715097ba08a0ae2baca212037ca48f014677c8d9efd647fd72a" kindref="member">NRFX_TWI_XFER_TX</ref>,<sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>TX<sp/>transfer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__twi_1ggaf227c5ab481c56715097ba08a0ae2bacac11390a9257b1036b10cd77eaee53e2a" kindref="member">NRFX_TWI_XFER_RX</ref>,<sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>RX<sp/>transfer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__twi_1ggaf227c5ab481c56715097ba08a0ae2baca8339203b38c17da2f0793f02661b0e83" kindref="member">NRFX_TWI_XFER_TXRX</ref>,<sp/></highlight><highlight class="comment">///&lt;<sp/>TX<sp/>transfer<sp/>followed<sp/>by<sp/>RX<sp/>transfer<sp/>with<sp/>repeated<sp/>start.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__twi_1ggaf227c5ab481c56715097ba08a0ae2baca81c31707f88003a02ccc7fcd7beb0e1c" kindref="member">NRFX_TWI_XFER_TXTX</ref><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>TX<sp/>transfer<sp/>followed<sp/>by<sp/>TX<sp/>transfer<sp/>with<sp/>repeated<sp/>start.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal">}<sp/><ref refid="group__nrfx__twi_1gaf227c5ab481c56715097ba08a0ae2bac" kindref="member">nrfx_twi_xfer_type_t</ref>;</highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="145"><highlight class="comment">/**<sp/>@brief<sp/>Structure<sp/>for<sp/>a<sp/>TWI<sp/>transfer<sp/>descriptor.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="146" refid="structnrfx__twi__xfer__desc__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal">{</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__twi_1gaf227c5ab481c56715097ba08a0ae2bac" kindref="member">nrfx_twi_xfer_type_t</ref><sp/><sp/><sp/><sp/>type;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Type<sp/>of<sp/>transfer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>address;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Slave<sp/>address.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>primary_length;<sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Number<sp/>of<sp/>bytes<sp/>transferred.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>secondary_length;<sp/></highlight><highlight class="comment">///&lt;<sp/>Number<sp/>of<sp/>bytes<sp/>transferred.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_primary_buf;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Pointer<sp/>to<sp/>transferred<sp/>data.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_secondary_buf;<sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Pointer<sp/>to<sp/>transferred<sp/>data.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal">}<sp/><ref refid="structnrfx__twi__xfer__desc__t" kindref="compound">nrfx_twi_xfer_desc_t</ref>;</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="157"><highlight class="comment">/**<sp/>@brief<sp/>Macro<sp/>for<sp/>setting<sp/>the<sp/>TX<sp/>transfer<sp/>descriptor.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRFX_TWI_XFER_DESC_TX(addr,<sp/>p_data,<sp/>length)<sp/>\</highlight></codeline>
<codeline lineno="159"><highlight class="preprocessor">{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="160"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>.type<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>NRFX_TWI_XFER_TX,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="161"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>.address<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>(addr),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="162"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>.primary_length<sp/><sp/><sp/>=<sp/>(length),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="163"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>.secondary_length<sp/>=<sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="164"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>.p_primary_buf<sp/><sp/><sp/><sp/>=<sp/>(p_data),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="165"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>.p_secondary_buf<sp/><sp/>=<sp/>NULL,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="166"><highlight class="preprocessor">}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="168"><highlight class="comment">/**<sp/>@brief<sp/>Macro<sp/>for<sp/>setting<sp/>the<sp/>RX<sp/>transfer<sp/>descriptor.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRFX_TWI_XFER_DESC_RX(addr,<sp/>p_data,<sp/>length)<sp/>\</highlight></codeline>
<codeline lineno="170"><highlight class="preprocessor">{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="171"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>.type<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>NRFX_TWI_XFER_RX,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="172"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>.address<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>(addr),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="173"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>.primary_length<sp/><sp/><sp/>=<sp/>(length),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="174"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>.secondary_length<sp/>=<sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="175"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>.p_primary_buf<sp/><sp/><sp/><sp/>=<sp/>(p_data),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="176"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>.p_secondary_buf<sp/><sp/>=<sp/>NULL,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="177"><highlight class="preprocessor">}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="179"><highlight class="comment">/**<sp/>@brief<sp/>Macro<sp/>for<sp/>setting<sp/>the<sp/>TX-RX<sp/>transfer<sp/>descriptor.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRFX_TWI_XFER_DESC_TXRX(addr,<sp/>p_tx,<sp/>tx_len,<sp/>p_rx,<sp/>rx_len)<sp/>\</highlight></codeline>
<codeline lineno="181"><highlight class="preprocessor">{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="182"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>.type<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>NRFX_TWI_XFER_TXRX,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="183"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>.address<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>(addr),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="184"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>.primary_length<sp/><sp/><sp/>=<sp/>(tx_len),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="185"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>.secondary_length<sp/>=<sp/>(rx_len),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="186"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>.p_primary_buf<sp/><sp/><sp/><sp/>=<sp/>(p_tx),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="187"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>.p_secondary_buf<sp/><sp/>=<sp/>(p_rx),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="188"><highlight class="preprocessor">}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="190"><highlight class="comment">/**<sp/>@brief<sp/>Macro<sp/>for<sp/>setting<sp/>the<sp/>TX-TX<sp/>transfer<sp/>descriptor.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRFX_TWI_XFER_DESC_TXTX(addr,<sp/>p_tx,<sp/>tx_len,<sp/>p_tx2,<sp/>tx_len2)<sp/>\</highlight></codeline>
<codeline lineno="192"><highlight class="preprocessor">{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="193"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>.type<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>NRFX_TWI_XFER_TXTX,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="194"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>.address<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>(addr),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="195"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>.primary_length<sp/><sp/><sp/>=<sp/>(tx_len),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="196"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>.secondary_length<sp/>=<sp/>(tx_len2),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="197"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>.p_primary_buf<sp/><sp/><sp/><sp/>=<sp/>(p_tx),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="198"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>.p_secondary_buf<sp/><sp/>=<sp/>(p_tx2),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="199"><highlight class="preprocessor">}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="201"><highlight class="comment">/**<sp/>@brief<sp/>Structure<sp/>for<sp/>a<sp/>TWI<sp/>event.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="202" refid="structnrfx__twi__evt__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal">{</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__twi_1ga7aa1ed323e67b973f5dcfe80fe21e7f4" kindref="member">nrfx_twi_evt_type_t</ref><sp/><sp/>type;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Event<sp/>type.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structnrfx__twi__xfer__desc__t" kindref="compound">nrfx_twi_xfer_desc_t</ref><sp/>xfer_desc;<sp/></highlight><highlight class="comment">///&lt;<sp/>Transfer<sp/>details.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal">}<sp/><ref refid="structnrfx__twi__evt__t" kindref="compound">nrfx_twi_evt_t</ref>;</highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="208"><highlight class="comment">/**<sp/>@brief<sp/>TWI<sp/>event<sp/>handler<sp/>prototype.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(*<sp/><ref refid="group__nrfx__twi_1ga8124b21b85a7fdd038ca11e8a65f35ba" kindref="member">nrfx_twi_evt_handler_t</ref>)(<ref refid="structnrfx__twi__evt__t" kindref="compound">nrfx_twi_evt_t</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_event,</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_context);</highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="212"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="213"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>initializing<sp/>the<sp/>TWI<sp/>driver<sp/>instance.</highlight></codeline>
<codeline lineno="214"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="215"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_instance<sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>driver<sp/>instance<sp/>structure.</highlight></codeline>
<codeline lineno="216"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_config<sp/><sp/><sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>with<sp/>the<sp/>initial<sp/>configuration.</highlight></codeline>
<codeline lineno="217"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>event_handler<sp/>Event<sp/>handler<sp/>provided<sp/>by<sp/>the<sp/>user.<sp/>If<sp/>NULL,<sp/>blocking<sp/>mode<sp/>is<sp/>enabled.</highlight></codeline>
<codeline lineno="218"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_context<sp/><sp/><sp/><sp/><sp/>Context<sp/>passed<sp/>to<sp/>event<sp/>handler.</highlight></codeline>
<codeline lineno="219"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="220"><highlight class="comment"><sp/>*<sp/>@retval<sp/>NRFX_SUCCESS<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Initialization<sp/>is<sp/>successful.</highlight></codeline>
<codeline lineno="221"><highlight class="comment"><sp/>*<sp/>@retval<sp/>NRFX_ERROR_ALREADY<sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>driver<sp/>is<sp/>already<sp/>initialized.</highlight></codeline>
<codeline lineno="222"><highlight class="comment"><sp/>*<sp/>@retval<sp/>NRFX_ERROR_INVALID_STATE<sp/>The<sp/>driver<sp/>is<sp/>already<sp/>initialized.</highlight></codeline>
<codeline lineno="223"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Deprecated<sp/>-<sp/>use<sp/>@ref<sp/>NRFX_ERROR_ALREADY<sp/>instead.</highlight></codeline>
<codeline lineno="224"><highlight class="comment"><sp/>*<sp/>@retval<sp/>NRFX_ERROR_BUSY<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Some<sp/>other<sp/>peripheral<sp/>with<sp/>the<sp/>same</highlight></codeline>
<codeline lineno="225"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>instance<sp/>ID<sp/>is<sp/>already<sp/>in<sp/>use.<sp/>This<sp/>is</highlight></codeline>
<codeline lineno="226"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>possible<sp/>only<sp/>if<sp/>@ref<sp/>nrfx_prs<sp/>module</highlight></codeline>
<codeline lineno="227"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is<sp/>enabled.</highlight></codeline>
<codeline lineno="228"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"><ref refid="group__nrfx__error__codes_1ga2449720f8fa17b22243218068459a24b" kindref="member">nrfx_err_t</ref><sp/><ref refid="group__nrfx__twi_1gaf88045a2dfe68bb08f9f340b1cf46e78" kindref="member">nrfx_twi_init</ref>(<ref refid="structnrfx__twi__t" kindref="compound">nrfx_twi_t</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_instance,</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structnrfx__twi__config__t" kindref="compound">nrfx_twi_config_t</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_config,</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrfx__twi_1ga8124b21b85a7fdd038ca11e8a65f35ba" kindref="member">nrfx_twi_evt_handler_t</ref><sp/><sp/><sp/><sp/>event_handler,</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_context);</highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="234"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="235"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>reconfiguring<sp/>the<sp/>TWI<sp/>instance.</highlight></codeline>
<codeline lineno="236"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="237"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_instance<sp/>Pointer<sp/>to<sp/>the<sp/>driver<sp/>instance<sp/>structure.</highlight></codeline>
<codeline lineno="238"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_config<sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>with<sp/>the<sp/>configuration.</highlight></codeline>
<codeline lineno="239"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="240"><highlight class="comment"><sp/>*<sp/>@retval<sp/>NRFX_SUCCESS<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Reconfiguration<sp/>was<sp/>successful.</highlight></codeline>
<codeline lineno="241"><highlight class="comment"><sp/>*<sp/>@retval<sp/>NRFX_ERROR_BUSY<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>driver<sp/>is<sp/>during<sp/>transaction.</highlight></codeline>
<codeline lineno="242"><highlight class="comment"><sp/>*<sp/>@retval<sp/>NRFX_ERROR_INVALID_STATE<sp/>The<sp/>driver<sp/>is<sp/>uninitialized.</highlight></codeline>
<codeline lineno="243"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"><ref refid="group__nrfx__error__codes_1ga2449720f8fa17b22243218068459a24b" kindref="member">nrfx_err_t</ref><sp/><ref refid="group__nrfx__twi_1gaca8c7ed413224911dd989f525eca75c2" kindref="member">nrfx_twi_reconfigure</ref>(<ref refid="structnrfx__twi__t" kindref="compound">nrfx_twi_t</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_instance,</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structnrfx__twi__config__t" kindref="compound">nrfx_twi_config_t</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_config);</highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="247"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="248"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>uninitializing<sp/>the<sp/>TWI<sp/>instance.</highlight></codeline>
<codeline lineno="249"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="250"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_instance<sp/>Pointer<sp/>to<sp/>the<sp/>driver<sp/>instance<sp/>structure.</highlight></codeline>
<codeline lineno="251"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrfx__twi_1ga504295f2b045ce9cd57e91b335721da8" kindref="member">nrfx_twi_uninit</ref>(<ref refid="structnrfx__twi__t" kindref="compound">nrfx_twi_t</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_instance);</highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="254"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="255"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>checking<sp/>if<sp/>the<sp/>TWI<sp/>driver<sp/>instance<sp/>is<sp/>initialized.</highlight></codeline>
<codeline lineno="256"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="257"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_instance<sp/>Pointer<sp/>to<sp/>the<sp/>driver<sp/>instance<sp/>structure.</highlight></codeline>
<codeline lineno="258"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="259"><highlight class="comment"><sp/>*<sp/>@retval<sp/>true<sp/><sp/>Instance<sp/>is<sp/>already<sp/>initialized.</highlight></codeline>
<codeline lineno="260"><highlight class="comment"><sp/>*<sp/>@retval<sp/>false<sp/>Instance<sp/>is<sp/>not<sp/>initialized.</highlight></codeline>
<codeline lineno="261"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrfx__twi_1ga74f9c2116576ef7e29d2bc6a08d53643" kindref="member">nrfx_twi_init_check</ref>(<ref refid="structnrfx__twi__t" kindref="compound">nrfx_twi_t</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_instance);</highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="264"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="265"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>enabling<sp/>the<sp/>TWI<sp/>instance.</highlight></codeline>
<codeline lineno="266"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="267"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_instance<sp/>Pointer<sp/>to<sp/>the<sp/>driver<sp/>instance<sp/>structure.</highlight></codeline>
<codeline lineno="268"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrfx__twi_1ga3eed30998bb2f651f6db3725ef3c81bb" kindref="member">nrfx_twi_enable</ref>(<ref refid="structnrfx__twi__t" kindref="compound">nrfx_twi_t</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_instance);</highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="271"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="272"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>disabling<sp/>the<sp/>TWI<sp/>instance.</highlight></codeline>
<codeline lineno="273"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="274"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_instance<sp/>Pointer<sp/>to<sp/>the<sp/>driver<sp/>instance<sp/>structure.</highlight></codeline>
<codeline lineno="275"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrfx__twi_1gac3e0d49b07922c82a6ad35f2c5ed3a63" kindref="member">nrfx_twi_disable</ref>(<ref refid="structnrfx__twi__t" kindref="compound">nrfx_twi_t</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_instance);</highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="278"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="279"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>performing<sp/>a<sp/>TWI<sp/>transfer.</highlight></codeline>
<codeline lineno="280"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="281"><highlight class="comment"><sp/>*<sp/>The<sp/>following<sp/>transfer<sp/>types<sp/>can<sp/>be<sp/>configured<sp/>(@ref<sp/>nrfx_twi_xfer_desc_t.type):</highlight></codeline>
<codeline lineno="282"><highlight class="comment"><sp/>*<sp/>-<sp/>@ref<sp/>NRFX_TWI_XFER_TXRX<sp/>-<sp/>Write<sp/>operation<sp/>followed<sp/>by<sp/>a<sp/>read<sp/>operation<sp/>(without<sp/>STOP<sp/>condition<sp/>in<sp/>between).</highlight></codeline>
<codeline lineno="283"><highlight class="comment"><sp/>*<sp/>-<sp/>@ref<sp/>NRFX_TWI_XFER_TXTX<sp/>-<sp/>Write<sp/>operation<sp/>followed<sp/>by<sp/>a<sp/>write<sp/>operation<sp/>(without<sp/>STOP<sp/>condition<sp/>in<sp/>between).</highlight></codeline>
<codeline lineno="284"><highlight class="comment"><sp/>*<sp/>-<sp/>@ref<sp/>NRFX_TWI_XFER_TX<sp/>-<sp/>Write<sp/>operation<sp/>(with<sp/>or<sp/>without<sp/>STOP<sp/>condition).</highlight></codeline>
<codeline lineno="285"><highlight class="comment"><sp/>*<sp/>-<sp/>@ref<sp/>NRFX_TWI_XFER_RX<sp/>-<sp/>Read<sp/>operation<sp/><sp/>(with<sp/>STOP<sp/>condition).</highlight></codeline>
<codeline lineno="286"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="287"><highlight class="comment"><sp/>*<sp/>@note<sp/>TX-RX<sp/>and<sp/>TX-TX<sp/>transfers<sp/>are<sp/>supported<sp/>only<sp/>in<sp/>non-blocking<sp/>mode.</highlight></codeline>
<codeline lineno="288"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="289"><highlight class="comment"><sp/>*<sp/>Additional<sp/>options<sp/>are<sp/>provided<sp/>using<sp/>the<sp/>flags<sp/>parameter:</highlight></codeline>
<codeline lineno="290"><highlight class="comment"><sp/>*<sp/>-<sp/>@ref<sp/>NRFX_TWI_FLAG_NO_XFER_EVT_HANDLER<sp/>-<sp/>No<sp/>user<sp/>event<sp/>handler<sp/>after<sp/>transfer<sp/>completion.<sp/>In<sp/>most<sp/>cases,<sp/>this<sp/>also<sp/>means<sp/>no<sp/>interrupt<sp/>at<sp/>the<sp/>end<sp/>of<sp/>the<sp/>transfer.</highlight></codeline>
<codeline lineno="291"><highlight class="comment"><sp/>*<sp/>-<sp/>@ref<sp/>NRFX_TWI_FLAG_TX_NO_STOP<sp/>-<sp/>No<sp/>stop<sp/>condition<sp/>after<sp/>TX<sp/>transfer.</highlight></codeline>
<codeline lineno="292"><highlight class="comment"><sp/>*<sp/>-<sp/>@ref<sp/>NRFX_TWI_FLAG_SUSPEND<sp/>-<sp/>Transfer<sp/>will<sp/>be<sp/>suspended.<sp/>This<sp/>allows<sp/>for<sp/>combining<sp/>multiple<sp/>transfers<sp/>into<sp/>one<sp/>transaction.</highlight></codeline>
<codeline lineno="293"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Only<sp/>transactions<sp/>with<sp/>the<sp/>same<sp/>direction<sp/>can<sp/>be<sp/>combined.<sp/>To<sp/>finish<sp/>the<sp/>transaction,<sp/>call<sp/>the<sp/>function<sp/>without<sp/>this<sp/>flag.</highlight></codeline>
<codeline lineno="294"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="295"><highlight class="comment"><sp/>*<sp/>@note</highlight></codeline>
<codeline lineno="296"><highlight class="comment"><sp/>*<sp/>Some<sp/>flag<sp/>combinations<sp/>are<sp/>invalid:</highlight></codeline>
<codeline lineno="297"><highlight class="comment"><sp/>*<sp/>-<sp/>@ref<sp/>NRFX_TWI_FLAG_TX_NO_STOP<sp/>with<sp/>@ref<sp/>nrfx_twi_xfer_desc_t.type<sp/>different<sp/>than<sp/>@ref<sp/>NRFX_TWI_XFER_TX</highlight></codeline>
<codeline lineno="298"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="299"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_instance<sp/><sp/>Pointer<sp/>to<sp/>the<sp/>driver<sp/>instance<sp/>structure.</highlight></codeline>
<codeline lineno="300"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_xfer_desc<sp/>Pointer<sp/>to<sp/>the<sp/>transfer<sp/>descriptor.</highlight></codeline>
<codeline lineno="301"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>flags<sp/><sp/><sp/><sp/><sp/><sp/><sp/>Transfer<sp/>options<sp/>(0<sp/>for<sp/>default<sp/>settings).</highlight></codeline>
<codeline lineno="302"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="303"><highlight class="comment"><sp/>*<sp/>@retval<sp/>NRFX_SUCCESS<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>procedure<sp/>is<sp/>successful.</highlight></codeline>
<codeline lineno="304"><highlight class="comment"><sp/>*<sp/>@retval<sp/>NRFX_ERROR_BUSY<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>driver<sp/>is<sp/>not<sp/>ready<sp/>for<sp/>a<sp/>new<sp/>transfer.</highlight></codeline>
<codeline lineno="305"><highlight class="comment"><sp/>*<sp/>@retval<sp/>NRFX_ERROR_NOT_SUPPORTED<sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>provided<sp/>parameters<sp/>are<sp/>not<sp/>supported.</highlight></codeline>
<codeline lineno="306"><highlight class="comment"><sp/>*<sp/>@retval<sp/>NRFX_ERROR_INTERNAL<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>An<sp/>unexpected<sp/>transition<sp/>occurred<sp/>on<sp/>the<sp/>bus.</highlight></codeline>
<codeline lineno="307"><highlight class="comment"><sp/>*<sp/>@retval<sp/>NRFX_ERROR_INVALID_STATE<sp/><sp/><sp/><sp/><sp/><sp/><sp/>Other<sp/>direction<sp/>of<sp/>transaction<sp/>is<sp/>suspended<sp/>on<sp/>the<sp/>bus.</highlight></codeline>
<codeline lineno="308"><highlight class="comment"><sp/>*<sp/>@retval<sp/>NRFX_ERROR_DRV_TWI_ERR_OVERRUN<sp/>The<sp/>unread<sp/>data<sp/>is<sp/>replaced<sp/>by<sp/>new<sp/>data<sp/>(TXRX<sp/>and<sp/>RX)</highlight></codeline>
<codeline lineno="309"><highlight class="comment"><sp/>*<sp/>@retval<sp/>NRFX_ERROR_DRV_TWI_ERR_ANACK<sp/><sp/><sp/>Negative<sp/>acknowledgement<sp/>(NACK)<sp/>is<sp/>received<sp/>after<sp/>sending</highlight></codeline>
<codeline lineno="310"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>address<sp/>in<sp/>polling<sp/>mode.</highlight></codeline>
<codeline lineno="311"><highlight class="comment"><sp/>*<sp/>@retval<sp/>NRFX_ERROR_DRV_TWI_ERR_DNACK<sp/><sp/><sp/>Negative<sp/>acknowledgement<sp/>(NACK)<sp/>is<sp/>received<sp/>after<sp/>sending</highlight></codeline>
<codeline lineno="312"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a<sp/>data<sp/>byte<sp/>in<sp/>polling<sp/>mode.</highlight></codeline>
<codeline lineno="313"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"><ref refid="group__nrfx__error__codes_1ga2449720f8fa17b22243218068459a24b" kindref="member">nrfx_err_t</ref><sp/><ref refid="group__nrfx__twi_1ga5c9b6d700f27de583917838647057658" kindref="member">nrfx_twi_xfer</ref>(<ref refid="structnrfx__twi__t" kindref="compound">nrfx_twi_t</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_instance,</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structnrfx__twi__xfer__desc__t" kindref="compound">nrfx_twi_xfer_desc_t</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_xfer_desc,</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>flags);</highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="318"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="319"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>checking<sp/>the<sp/>TWI<sp/>driver<sp/>state.</highlight></codeline>
<codeline lineno="320"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="321"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_instance<sp/>TWI<sp/>instance.</highlight></codeline>
<codeline lineno="322"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="323"><highlight class="comment"><sp/>*<sp/>@retval<sp/>true<sp/><sp/>The<sp/>TWI<sp/>driver<sp/>is<sp/>currently<sp/>busy<sp/>performing<sp/>a<sp/>transfer.</highlight></codeline>
<codeline lineno="324"><highlight class="comment"><sp/>*<sp/>@retval<sp/>false<sp/>The<sp/>TWI<sp/>driver<sp/>is<sp/>ready<sp/>for<sp/>a<sp/>new<sp/>transfer.</highlight></codeline>
<codeline lineno="325"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrfx__twi_1ga7ad4c5f8afa8fc13a02a0a67a024c67e" kindref="member">nrfx_twi_is_busy</ref>(<ref refid="structnrfx__twi__t" kindref="compound">nrfx_twi_t</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_instance);</highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="328"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="329"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>the<sp/>transferred<sp/>data<sp/>count.</highlight></codeline>
<codeline lineno="330"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="331"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_instance<sp/>Pointer<sp/>to<sp/>the<sp/>driver<sp/>instance<sp/>structure.</highlight></codeline>
<codeline lineno="332"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="333"><highlight class="comment"><sp/>*<sp/>@return<sp/>Data<sp/>count.</highlight></codeline>
<codeline lineno="334"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="group__nrfx__twi_1gae8fb5691723bce5cce250e78aa9c14aa" kindref="member">nrfx_twi_data_count_get</ref>(<ref refid="structnrfx__twi__t" kindref="compound">nrfx_twi_t</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_instance);</highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="337"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="338"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>returning<sp/>the<sp/>address<sp/>of<sp/>a<sp/>STOPPED<sp/>TWI<sp/>event.</highlight></codeline>
<codeline lineno="339"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="340"><highlight class="comment"><sp/>*<sp/>A<sp/>STOPPED<sp/>event<sp/>can<sp/>be<sp/>used<sp/>to<sp/>detect<sp/>the<sp/>end<sp/>of<sp/>a<sp/>transfer<sp/>if<sp/>the<sp/>@ref<sp/>NRFX_TWI_FLAG_NO_XFER_EVT_HANDLER</highlight></codeline>
<codeline lineno="341"><highlight class="comment"><sp/>*<sp/>option<sp/>is<sp/>used.</highlight></codeline>
<codeline lineno="342"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="343"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_instance<sp/>Pointer<sp/>to<sp/>the<sp/>driver<sp/>instance<sp/>structure.</highlight></codeline>
<codeline lineno="344"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="345"><highlight class="comment"><sp/>*<sp/>@return<sp/>STOPPED<sp/>event<sp/>address.</highlight></codeline>
<codeline lineno="346"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal">uint32_t<sp/><ref refid="group__nrfx__twi_1ga7e850f6480a6d7ff7cd430da75679922" kindref="member">nrfx_twi_stopped_event_get</ref>(<ref refid="structnrfx__twi__t" kindref="compound">nrfx_twi_t</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_instance);</highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="349"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="350"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>recovering<sp/>the<sp/>bus.</highlight></codeline>
<codeline lineno="351"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="352"><highlight class="comment"><sp/>*<sp/>This<sp/>function<sp/>checks<sp/>if<sp/>the<sp/>bus<sp/>is<sp/>not<sp/>stuck<sp/>because<sp/>of<sp/>a<sp/>slave<sp/>holding<sp/>the<sp/>SDA<sp/>line<sp/>in<sp/>the<sp/>low<sp/>state,</highlight></codeline>
<codeline lineno="353"><highlight class="comment"><sp/>*<sp/>and<sp/>if<sp/>needed<sp/>it<sp/>performs<sp/>required<sp/>number<sp/>of<sp/>pulses<sp/>on<sp/>the<sp/>SCL<sp/>line<sp/>to<sp/>make<sp/>the<sp/>slave<sp/>release<sp/>the<sp/>SDA<sp/>line.</highlight></codeline>
<codeline lineno="354"><highlight class="comment"><sp/>*<sp/>Finally,<sp/>the<sp/>function<sp/>generates<sp/>a<sp/>STOP<sp/>condition<sp/>on<sp/>the<sp/>bus<sp/>to<sp/>put<sp/>it<sp/>into<sp/>a<sp/>known<sp/>state.</highlight></codeline>
<codeline lineno="355"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="356"><highlight class="comment"><sp/>*<sp/>@note<sp/>This<sp/>function<sp/>can<sp/>be<sp/>used<sp/>only<sp/>if<sp/>the<sp/>TWI<sp/>driver<sp/>is<sp/>uninitialized.</highlight></codeline>
<codeline lineno="357"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="358"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>scl_pin<sp/>SCL<sp/>pin<sp/>number.</highlight></codeline>
<codeline lineno="359"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>sda_pin<sp/>SDA<sp/>pin<sp/>number.</highlight></codeline>
<codeline lineno="360"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="361"><highlight class="comment"><sp/>*<sp/>@retval<sp/>NRFX_SUCCESS<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Bus<sp/>recovery<sp/>was<sp/>successful.</highlight></codeline>
<codeline lineno="362"><highlight class="comment"><sp/>*<sp/>@retval<sp/>NRFX_ERROR_INTERNAL<sp/>Bus<sp/>recovery<sp/>failed.</highlight></codeline>
<codeline lineno="363"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal">NRFX_STATIC_INLINE<sp/><ref refid="group__nrfx__error__codes_1ga2449720f8fa17b22243218068459a24b" kindref="member">nrfx_err_t</ref><sp/><ref refid="group__nrfx__twi_1ga1666c4226c3dea9c82abcc11c80ed850" kindref="member">nrfx_twi_bus_recover</ref>(uint32_t<sp/>scl_pin,<sp/>uint32_t<sp/>sda_pin);</highlight></codeline>
<codeline lineno="365"><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>NRFX_DECLARE_ONLY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal">NRFX_STATIC_INLINE<sp/><ref refid="group__nrfx__error__codes_1ga2449720f8fa17b22243218068459a24b" kindref="member">nrfx_err_t</ref><sp/><ref refid="group__nrfx__twi_1ga1666c4226c3dea9c82abcc11c80ed850" kindref="member">nrfx_twi_bus_recover</ref>(uint32_t<sp/>scl_pin,<sp/>uint32_t<sp/>sda_pin)</highlight></codeline>
<codeline lineno="368"><highlight class="normal">{</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>nrfx_twi_twim_bus_recover(scl_pin,<sp/>sda_pin);</highlight></codeline>
<codeline lineno="370"><highlight class="normal">}</highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="373"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="374"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Macro<sp/>returning<sp/>TWI<sp/>interrupt<sp/>handler.</highlight></codeline>
<codeline lineno="375"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="376"><highlight class="comment"><sp/>*<sp/>param[in]<sp/>idx<sp/>TWI<sp/>index.</highlight></codeline>
<codeline lineno="377"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="378"><highlight class="comment"><sp/>*<sp/>@return<sp/>Interrupt<sp/>handler.</highlight></codeline>
<codeline lineno="379"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="380"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRFX_TWI_INST_HANDLER_GET(idx)<sp/>NRFX_CONCAT_3(nrfx_twi_,<sp/>idx,<sp/>_irq_handler)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="382"><highlight class="comment">/**<sp/>@}<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="385"><highlight class="comment"><sp/>*<sp/>Declare<sp/>interrupt<sp/>handlers<sp/>for<sp/>all<sp/>enabled<sp/>driver<sp/>instances<sp/>in<sp/>the<sp/>following<sp/>format:</highlight></codeline>
<codeline lineno="386"><highlight class="comment"><sp/>*<sp/>nrfx_\&lt;periph_name\&gt;_\&lt;idx\&gt;_irq_handler<sp/>(for<sp/>example,<sp/>nrfx_twi_0_irq_handler).</highlight></codeline>
<codeline lineno="387"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="388"><highlight class="comment"><sp/>*<sp/>A<sp/>specific<sp/>interrupt<sp/>handler<sp/>for<sp/>the<sp/>driver<sp/>instance<sp/>can<sp/>be<sp/>retrieved<sp/>by<sp/>using</highlight></codeline>
<codeline lineno="389"><highlight class="comment"><sp/>*<sp/>the<sp/>NRFX_TWI_INST_HANDLER_GET<sp/>macro.</highlight></codeline>
<codeline lineno="390"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="391"><highlight class="comment"><sp/>*<sp/>Here<sp/>is<sp/>a<sp/>sample<sp/>of<sp/>using<sp/>the<sp/>NRFX_TWI_INST_HANDLER_GET<sp/>macro<sp/>to<sp/>map<sp/>an<sp/>interrupt<sp/>handler</highlight></codeline>
<codeline lineno="392"><highlight class="comment"><sp/>*<sp/>in<sp/>a<sp/>Zephyr<sp/>application:</highlight></codeline>
<codeline lineno="393"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="394"><highlight class="comment"><sp/>*<sp/>IRQ_CONNECT(NRFX_IRQ_NUMBER_GET(NRF_TWI_INST_GET(\&lt;instance_index\&gt;)),<sp/>\&lt;priority\&gt;,</highlight></codeline>
<codeline lineno="395"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NRFX_TWI_INST_HANDLER_GET(\&lt;instance_index\&gt;),<sp/>0,<sp/>0);</highlight></codeline>
<codeline lineno="396"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal"><ref refid="group__nrfx__common_1gae3bda8e976c1f0e657e9260af2def0ef" kindref="member">NRFX_INSTANCE_IRQ_HANDLERS_DECLARE</ref>(TWI,<sp/>twi)</highlight></codeline>
<codeline lineno="398"><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal">}</highlight></codeline>
<codeline lineno="401"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRFX_TWI_H__</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="drivers/include/nrfx_twi.h"/>
  </compounddef>
</doxygen>
