<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="nrf__rtc_8h" kind="file" language="C++">
    <compoundname>nrf_rtc.h</compoundname>
    <includes local="no">nrfx.h</includes>
    <includedby refid="nrfy__rtc_8h" local="no">haly/nrfy_rtc.h</includedby>
    <incdepgraph>
      <node id="1">
        <label>hal/nrf_rtc.h</label>
        <link refid="nrf__rtc_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>nrfx.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__nrf__rtc__hal_1ga845c5007908d5cbb8f4ee482ec386f7e" prot="public" static="no">
        <name>NRF_RTC_INST_GET</name>
        <param><defname>idx</defname></param>
        <initializer><ref refid="group__nrfx__utils_1ga5ea61d0994f6fb1ab5ed59d44f6a7ce9" kindref="member">NRFX_CONCAT</ref>(NRF_, RTC, idx)</initializer>
        <briefdescription>
<para>Macro getting pointer to the structure of registers of the RTC peripheral. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">idx</parametername>
</parameternamelist>
<parameterdescription>
<para>RTC instance index.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to the structure of registers of the RTC peripheral. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_rtc.h" line="62" column="9" bodyfile="hal/nrf_rtc.h" bodystart="62" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__rtc__hal_1ga50661eb9bf555e2b93734014aa76f9bb" prot="public" static="no">
        <name>NRF_RTC_CC_CHANNEL_COUNT</name>
        <param><defname>id</defname></param>
        <initializer><ref refid="group__nrfx__common_1gaa78d21b07d22f7a4bfbd1feda51ef1f4" kindref="member">NRFX_CONCAT_3</ref>(RTC, id, _CC_NUM)</initializer>
        <briefdescription>
<para>Macro for getting the number of compare channels available in a given RTC instance. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_rtc.h" line="65" column="9" bodyfile="hal/nrf_rtc.h" bodystart="65" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__rtc__hal_1ga1c44d09a5e97d86530691a734b035332" prot="public" static="no">
        <name>NRF_RTC_CC_COUNT_MAX</name>
        <initializer><ref refid="group__nrfx__common_1gafbf1f8a50035b7d9f6c1cc1155ed1989" kindref="member">NRFX_ARRAY_SIZE</ref>(((NRF_RTC_Type*)0)-&gt;EVENTS_COMPARE)</initializer>
        <briefdescription>
<para>Symbol specifying maximum number of available compare channels. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_rtc.h" line="68" column="9" bodyfile="hal/nrf_rtc.h" bodystart="68" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__rtc__hal_1ga84c5095022be1e656b834e7321cbfdfb" prot="public" static="no">
        <name>NRF_RTC_COUNTER_MAX</name>
        <initializer>RTC_COUNTER_COUNTER_Msk</initializer>
        <briefdescription>
<para>Maximum value of the RTC counter. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_rtc.h" line="71" column="9" bodyfile="hal/nrf_rtc.h" bodystart="71" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__rtc__hal_1ga449c07d418df082cc0420d9f6d97e92c" prot="public" static="no">
        <name>NRF_RTC_INPUT_FREQ</name>
        <initializer>32768</initializer>
        <briefdescription>
<para>Input frequency of the RTC instance. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_rtc.h" line="74" column="9" bodyfile="hal/nrf_rtc.h" bodystart="74" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__rtc__hal_1ga2cf5178522f721973cfc33e89a750e2e" prot="public" static="no">
        <name>NRF_RTC_FREQ_TO_PRESCALER</name>
        <param><defname>FREQ</defname></param>
        <initializer>(uint16_t)(((<ref refid="group__nrf__rtc__hal_1ga449c07d418df082cc0420d9f6d97e92c" kindref="member">NRF_RTC_INPUT_FREQ</ref>) / (FREQ)) - 1)</initializer>
        <briefdescription>
<para>Macro for converting expected frequency to prescaler setting. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_rtc.h" line="77" column="9" bodyfile="hal/nrf_rtc.h" bodystart="77" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__rtc__hal_1gaa85867a3321a6528b0a78e31f92b6a33" prot="public" static="no">
        <name>NRF_RTC_WRAP</name>
        <param><defname>val</defname></param>
        <initializer>((val) &amp; RTC_COUNTER_COUNTER_Msk)</initializer>
        <briefdescription>
<para>Macro for trimming values to the RTC bit width. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_rtc.h" line="80" column="9" bodyfile="hal/nrf_rtc.h" bodystart="80" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__rtc__hal_1ga4c18f026b4beaf079b7249c0b4f3833a" prot="public" static="no">
        <name>NRF_RTC_CHANNEL_INT_MASK</name>
        <param><defname>ch</defname></param>
        <initializer>((uint32_t)(<ref refid="group__nrf__rtc__hal_1gga22211dc20a5c2f6cf1b43039d2bae4a3acb0d6d71f2dcb78604936e1ba924ab9b" kindref="member">NRF_RTC_INT_COMPARE0_MASK</ref>) &lt;&lt; (ch))</initializer>
        <briefdescription>
<para>Macro for creating the interrupt bitmask for the specified compare channel. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_rtc.h" line="83" column="9" bodyfile="hal/nrf_rtc.h" bodystart="83" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__rtc__hal_1gafb5ebd2d9e6dbfdfadda09227f3b17d3" prot="public" static="no">
        <name>NRF_RTC_ALL_CHANNELS_INT_MASK</name>
        <initializer>    ((uint32_t)(((1 &lt;&lt; <ref refid="group__nrf__rtc__hal_1ga1c44d09a5e97d86530691a734b035332" kindref="member">NRF_RTC_CC_COUNT_MAX</ref>) - 1) &lt;&lt; RTC_INTENSET_COMPARE0_Pos))</initializer>
        <briefdescription>
<para>Macro for creating the interrupt bitmask for all compare channels. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_rtc.h" line="86" column="9" bodyfile="hal/nrf_rtc.h" bodystart="86" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__rtc__hal_1ga1698ae28d2c10c81101dc0d41a52d043" prot="public" static="no">
        <name>NRF_RTC_CHANNEL_EVENT_ADDR</name>
        <param><defname>ch</defname></param>
        <initializer>    (<ref refid="group__nrf__rtc__hal_1gaeefe46b9280fd5e11516b4148b9c5950" kindref="member">nrf_rtc_event_t</ref>)((<ref refid="group__nrf__rtc__hal_1ggaeefe46b9280fd5e11516b4148b9c5950aed2f00b3d07e65411e4b63982efd2e07" kindref="member">NRF_RTC_EVENT_COMPARE_0</ref>) + (ch) * sizeof(uint32_t))</initializer>
        <briefdescription>
<para>Macro for obtaining the compare event for the specified channel. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_rtc.h" line="90" column="9" bodyfile="hal/nrf_rtc.h" bodystart="90" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="group__nrf__rtc__hal_1gab1bbbc39c6dac153baf61aeae33c4274" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_rtc_task_t</name>
        <enumvalue id="group__nrf__rtc__hal_1ggab1bbbc39c6dac153baf61aeae33c4274a2a8ffc1fb20f19a5b14826564e5d03e5" prot="public">
          <name>NRF_RTC_TASK_START</name>
          <initializer>= offsetof(NRF_RTC_Type,TASKS_START)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Start. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__rtc__hal_1ggab1bbbc39c6dac153baf61aeae33c4274a6dbaa4bbd6d58e079767f0309239eec1" prot="public">
          <name>NRF_RTC_TASK_STOP</name>
          <initializer>= offsetof(NRF_RTC_Type,TASKS_STOP)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Stop. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__rtc__hal_1ggab1bbbc39c6dac153baf61aeae33c4274a0b5cbfbb54397b0ec8ea8fb73f4a7bc0" prot="public">
          <name>NRF_RTC_TASK_CLEAR</name>
          <initializer>= offsetof(NRF_RTC_Type,TASKS_CLEAR)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Clear. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__rtc__hal_1ggab1bbbc39c6dac153baf61aeae33c4274a4cda1feac46eb1092cad53e9abe1a3d2" prot="public">
          <name>NRF_RTC_TASK_TRIGGER_OVERFLOW</name>
          <initializer>= offsetof(NRF_RTC_Type,TASKS_TRIGOVRFLW)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Trigger overflow. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__rtc__hal_1ggab1bbbc39c6dac153baf61aeae33c4274a500cbb77177a4f236e3d94a710bcbb48" prot="public">
          <name>NRF_RTC_TASK_CAPTURE_0</name>
          <initializer>= offsetof(NRF_RTC_Type,TASKS_CAPTURE[0])</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Capture the counter value on channel 0. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__rtc__hal_1ggab1bbbc39c6dac153baf61aeae33c4274a75ece93d72daf272e45895e0c29102cc" prot="public">
          <name>NRF_RTC_TASK_CAPTURE_1</name>
          <initializer>= offsetof(NRF_RTC_Type,TASKS_CAPTURE[1])</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Capture the counter value on channel 1. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__rtc__hal_1ggab1bbbc39c6dac153baf61aeae33c4274aeda291fc479b7454aee56e0ab6301804" prot="public">
          <name>NRF_RTC_TASK_CAPTURE_2</name>
          <initializer>= offsetof(NRF_RTC_Type,TASKS_CAPTURE[2])</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Capture the counter value on channel 2. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__rtc__hal_1ggab1bbbc39c6dac153baf61aeae33c4274a62e9e4c41b7d1406a91541ef21e247e9" prot="public">
          <name>NRF_RTC_TASK_CAPTURE_3</name>
          <initializer>= offsetof(NRF_RTC_Type,TASKS_CAPTURE[3])</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Capture the counter value on channel 3. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>RTC tasks. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_rtc.h" line="94" column="1" bodyfile="hal/nrf_rtc.h" bodystart="95" bodyend="106"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__rtc__hal_1gaeefe46b9280fd5e11516b4148b9c5950" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_rtc_event_t</name>
        <enumvalue id="group__nrf__rtc__hal_1ggaeefe46b9280fd5e11516b4148b9c5950a1c477c236900018c2dec4265129739c7" prot="public">
          <name>NRF_RTC_EVENT_TICK</name>
          <initializer>= offsetof(NRF_RTC_Type,EVENTS_TICK)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Tick event. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__rtc__hal_1ggaeefe46b9280fd5e11516b4148b9c5950acca3da90aab0fc0950facce3d9c60b9c" prot="public">
          <name>NRF_RTC_EVENT_OVERFLOW</name>
          <initializer>= offsetof(NRF_RTC_Type,EVENTS_OVRFLW)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Overflow event. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__rtc__hal_1ggaeefe46b9280fd5e11516b4148b9c5950aed2f00b3d07e65411e4b63982efd2e07" prot="public">
          <name>NRF_RTC_EVENT_COMPARE_0</name>
          <initializer>= offsetof(NRF_RTC_Type,EVENTS_COMPARE[0])</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Compare 0 event. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__rtc__hal_1ggaeefe46b9280fd5e11516b4148b9c5950a4910d903ba14a05187dedfcc842ef26a" prot="public">
          <name>NRF_RTC_EVENT_COMPARE_1</name>
          <initializer>= offsetof(NRF_RTC_Type,EVENTS_COMPARE[1])</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Compare 1 event. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__rtc__hal_1ggaeefe46b9280fd5e11516b4148b9c5950a913f4348d8da28f6253ffcca803ed937" prot="public">
          <name>NRF_RTC_EVENT_COMPARE_2</name>
          <initializer>= offsetof(NRF_RTC_Type,EVENTS_COMPARE[2])</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Compare 2 event. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__rtc__hal_1ggaeefe46b9280fd5e11516b4148b9c5950af7b99708af83d76a4d4b59116f328bbc" prot="public">
          <name>NRF_RTC_EVENT_COMPARE_3</name>
          <initializer>= offsetof(NRF_RTC_Type,EVENTS_COMPARE[3])</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Compare 3 event. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>RTC events. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_rtc.h" line="109" column="1" bodyfile="hal/nrf_rtc.h" bodystart="110" bodyend="117"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__rtc__hal_1ga22211dc20a5c2f6cf1b43039d2bae4a3" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_rtc_int_t</name>
        <enumvalue id="group__nrf__rtc__hal_1gga22211dc20a5c2f6cf1b43039d2bae4a3ab01e1e883741734b5cac05c92efc952e" prot="public">
          <name>NRF_RTC_INT_TICK_MASK</name>
          <initializer>= RTC_INTENSET_TICK_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>RTC interrupt from tick event. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__rtc__hal_1gga22211dc20a5c2f6cf1b43039d2bae4a3a18c66e1dcbc43cd4c82a6f5d0fb8d922" prot="public">
          <name>NRF_RTC_INT_OVERFLOW_MASK</name>
          <initializer>= RTC_INTENSET_OVRFLW_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>RTC interrupt from overflow event. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__rtc__hal_1gga22211dc20a5c2f6cf1b43039d2bae4a3acb0d6d71f2dcb78604936e1ba924ab9b" prot="public">
          <name>NRF_RTC_INT_COMPARE0_MASK</name>
          <initializer>= RTC_INTENSET_COMPARE0_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>RTC interrupt from compare event on channel 0. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__rtc__hal_1gga22211dc20a5c2f6cf1b43039d2bae4a3af842e26d22b97607c1b778c4119b82a6" prot="public">
          <name>NRF_RTC_INT_COMPARE1_MASK</name>
          <initializer>= RTC_INTENSET_COMPARE1_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>RTC interrupt from compare event on channel 1. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__rtc__hal_1gga22211dc20a5c2f6cf1b43039d2bae4a3adf3bfc6e4f76ed0ecb3b1784d3dad2e0" prot="public">
          <name>NRF_RTC_INT_COMPARE2_MASK</name>
          <initializer>= RTC_INTENSET_COMPARE2_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>RTC interrupt from compare event on channel 2. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__rtc__hal_1gga22211dc20a5c2f6cf1b43039d2bae4a3a04d8a6817769b5b2b231b7ebfcde893c" prot="public">
          <name>NRF_RTC_INT_COMPARE3_MASK</name>
          <initializer>= RTC_INTENSET_COMPARE3_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>RTC interrupt from compare event on channel 3. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>RTC interrupts. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_rtc.h" line="120" column="1" bodyfile="hal/nrf_rtc.h" bodystart="121" bodyend="128"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__nrf__rtc__hal_1ga0ddee0d5275bca0f2cfe4f6f576ae971" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_rtc_cc_set</definition>
        <argsstring>(NRF_RTC_Type *p_reg, uint32_t ch, uint32_t cc_val)</argsstring>
        <name>nrf_rtc_cc_set</name>
        <param>
          <type>NRF_RTC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>ch</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>cc_val</declname>
        </param>
        <briefdescription>
<para>Function for setting a compare value for a channel. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">ch</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">cc_val</parametername>
</parameternamelist>
<parameterdescription>
<para>Compare value to be set. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_rtc.h" line="337" column="25" bodyfile="hal/nrf_rtc.h" bodystart="337" bodyend="340" declfile="hal/nrf_rtc.h" declline="137" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__rtc__hal_1gab51551ec4c50f927741b8743c5d024e6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_rtc_cc_get</definition>
        <argsstring>(NRF_RTC_Type const *p_reg, uint32_t ch)</argsstring>
        <name>nrf_rtc_cc_get</name>
        <param>
          <type>NRF_RTC_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>ch</declname>
        </param>
        <briefdescription>
<para>Function for returning the compare value for a channel. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">ch</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>COMPARE[ch] value. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_rtc.h" line="342" column="29" bodyfile="hal/nrf_rtc.h" bodystart="342" bodyend="345" declfile="hal/nrf_rtc.h" declline="147" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__rtc__hal_1gad6af9273ab338cdf8fe96c6db58a2dea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_rtc_int_enable</definition>
        <argsstring>(NRF_RTC_Type *p_reg, uint32_t mask)</argsstring>
        <name>nrf_rtc_int_enable</name>
        <param>
          <type>NRF_RTC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Function for enabling interrupts. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of interrupts to be enabled. Use <ref refid="group__nrf__rtc__hal_1ga22211dc20a5c2f6cf1b43039d2bae4a3" kindref="member">nrf_rtc_int_t</ref> values for bit masking. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_rtc.h" line="347" column="24" bodyfile="hal/nrf_rtc.h" bodystart="347" bodyend="350" declfile="hal/nrf_rtc.h" declline="156" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__rtc__hal_1gad130c842bf01659e6dc7462b9760a7a0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_rtc_int_disable</definition>
        <argsstring>(NRF_RTC_Type *p_reg, uint32_t mask)</argsstring>
        <name>nrf_rtc_int_disable</name>
        <param>
          <type>NRF_RTC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Function for disabling interrupts. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of interrupts to be disabled. Use <ref refid="group__nrf__rtc__hal_1ga22211dc20a5c2f6cf1b43039d2bae4a3" kindref="member">nrf_rtc_int_t</ref> values for bit masking. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_rtc.h" line="352" column="24" bodyfile="hal/nrf_rtc.h" bodystart="352" bodyend="355" declfile="hal/nrf_rtc.h" declline="165" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__rtc__hal_1ga54f0ed1f010737c489d47305a8cd2f5e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_rtc_int_enable_check</definition>
        <argsstring>(NRF_RTC_Type const *p_reg, uint32_t mask)</argsstring>
        <name>nrf_rtc_int_enable_check</name>
        <param>
          <type>NRF_RTC_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Function for checking if the specified interrupts are enabled. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of interrupts to be checked. Use <ref refid="group__nrf__rtc__hal_1ga22211dc20a5c2f6cf1b43039d2bae4a3" kindref="member">nrf_rtc_int_t</ref> values for bit masking.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Mask of enabled interrupts. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_rtc.h" line="357" column="28" bodyfile="hal/nrf_rtc.h" bodystart="357" bodyend="360" declfile="hal/nrf_rtc.h" declline="176" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__rtc__hal_1ga0a9fb7692ee3cc4d4db4c906c910f939" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_rtc_subscribe_set</definition>
        <argsstring>(NRF_RTC_Type *p_reg, nrf_rtc_task_t task, uint8_t channel)</argsstring>
        <name>nrf_rtc_subscribe_set</name>
        <param>
          <type>NRF_RTC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__rtc__hal_1gab1bbbc39c6dac153baf61aeae33c4274" kindref="member">nrf_rtc_task_t</ref></type>
          <declname>task</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>channel</declname>
        </param>
        <briefdescription>
<para>Function for setting the subscribe configuration for a given RTC task. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">task</parametername>
</parameternamelist>
<parameterdescription>
<para>Task for which to set the configuration. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">channel</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel through which to subscribe events. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_rtc.h" line="187" column="24" declfile="hal/nrf_rtc.h" declline="187" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__rtc__hal_1ga0cba66d123812f658c21b439a8c6507a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_rtc_subscribe_clear</definition>
        <argsstring>(NRF_RTC_Type *p_reg, nrf_rtc_task_t task)</argsstring>
        <name>nrf_rtc_subscribe_clear</name>
        <param>
          <type>NRF_RTC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__rtc__hal_1gab1bbbc39c6dac153baf61aeae33c4274" kindref="member">nrf_rtc_task_t</ref></type>
          <declname>task</declname>
        </param>
        <briefdescription>
<para>Function for clearing the subscribe configuration for a given RTC task. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">task</parametername>
</parameternamelist>
<parameterdescription>
<para>Task for which to clear the configuration. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_rtc.h" line="198" column="24" declfile="hal/nrf_rtc.h" declline="198" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__rtc__hal_1gacd5b442ea8c0e5b27448173d4e1b95c6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_rtc_publish_set</definition>
        <argsstring>(NRF_RTC_Type *p_reg, nrf_rtc_event_t event, uint8_t channel)</argsstring>
        <name>nrf_rtc_publish_set</name>
        <param>
          <type>NRF_RTC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__rtc__hal_1gaeefe46b9280fd5e11516b4148b9c5950" kindref="member">nrf_rtc_event_t</ref></type>
          <declname>event</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>channel</declname>
        </param>
        <briefdescription>
<para>Function for setting the publish configuration for a given RTC event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event for which to set the configuration. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">channel</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel through which to publish the event. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_rtc.h" line="209" column="24" declfile="hal/nrf_rtc.h" declline="209" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__rtc__hal_1ga72d8505d504e069bcc8f13d76c04e6bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_rtc_publish_clear</definition>
        <argsstring>(NRF_RTC_Type *p_reg, nrf_rtc_event_t event)</argsstring>
        <name>nrf_rtc_publish_clear</name>
        <param>
          <type>NRF_RTC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__rtc__hal_1gaeefe46b9280fd5e11516b4148b9c5950" kindref="member">nrf_rtc_event_t</ref></type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>Function for clearing the publish configuration for a given RTC event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event for which to clear the configuration. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_rtc.h" line="220" column="24" declfile="hal/nrf_rtc.h" declline="220" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__rtc__hal_1ga5e1fe7f9ef4db1709615fe03e2efa8e0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE bool</type>
        <definition>NRF_STATIC_INLINE bool nrf_rtc_event_check</definition>
        <argsstring>(NRF_RTC_Type const *p_reg, nrf_rtc_event_t event)</argsstring>
        <name>nrf_rtc_event_check</name>
        <param>
          <type>NRF_RTC_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__rtc__hal_1gaeefe46b9280fd5e11516b4148b9c5950" kindref="member">nrf_rtc_event_t</ref></type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>Function for retrieving the state of the RTC event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event to be checked.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>The event has been generated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>The event has not been generated. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_rtc.h" line="392" column="24" bodyfile="hal/nrf_rtc.h" bodystart="392" bodyend="395" declfile="hal/nrf_rtc.h" declline="233" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__rtc__hal_1ga85931a1c79936b8b9631db120abb6f6b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_rtc_event_clear</definition>
        <argsstring>(NRF_RTC_Type *p_reg, nrf_rtc_event_t event)</argsstring>
        <name>nrf_rtc_event_clear</name>
        <param>
          <type>NRF_RTC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__rtc__hal_1gaeefe46b9280fd5e11516b4148b9c5950" kindref="member">nrf_rtc_event_t</ref></type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>Function for clearing an event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event to be cleared. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_rtc.h" line="397" column="24" bodyfile="hal/nrf_rtc.h" bodystart="397" bodyend="401" declfile="hal/nrf_rtc.h" declline="241" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__rtc__hal_1ga94f1765ff25dba1cf532dd028083df57" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get</definition>
        <argsstring>(NRF_RTC_Type const *p_reg)</argsstring>
        <name>nrf_rtc_counter_get</name>
        <param>
          <type>NRF_RTC_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for returning a counter value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Counter value. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_rtc.h" line="403" column="28" bodyfile="hal/nrf_rtc.h" bodystart="403" bodyend="406" declfile="hal/nrf_rtc.h" declline="250" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__rtc__hal_1ga51a966cd31e5bf8efff527c125f05d34" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_rtc_prescaler_set</definition>
        <argsstring>(NRF_RTC_Type *p_reg, uint32_t val)</argsstring>
        <name>nrf_rtc_prescaler_set</name>
        <param>
          <type>NRF_RTC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Function for setting a prescaler value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">val</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to set the prescaler to. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_rtc.h" line="408" column="24" bodyfile="hal/nrf_rtc.h" bodystart="408" bodyend="412" declfile="hal/nrf_rtc.h" declline="258" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__rtc__hal_1ga835df54d91ef4be4ce13ebe7c02f65a5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_rtc_prescaler_get</definition>
        <argsstring>(NRF_RTC_Type const *p_reg)</argsstring>
        <name>nrf_rtc_prescaler_get</name>
        <param>
          <type>NRF_RTC_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting a prescaler value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Prescaler value. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_rtc.h" line="414" column="28" bodyfile="hal/nrf_rtc.h" bodystart="414" bodyend="417" declfile="hal/nrf_rtc.h" declline="267" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__rtc__hal_1ga0252904094c2b3aa9f436d7d041003c0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_rtc_event_address_get</definition>
        <argsstring>(NRF_RTC_Type const *p_reg, nrf_rtc_event_t event)</argsstring>
        <name>nrf_rtc_event_address_get</name>
        <param>
          <type>NRF_RTC_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__rtc__hal_1gaeefe46b9280fd5e11516b4148b9c5950" kindref="member">nrf_rtc_event_t</ref></type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>Function for returning the address of an event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>Requested event.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Address of the requested event register. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_rtc.h" line="419" column="28" bodyfile="hal/nrf_rtc.h" bodystart="419" bodyend="423" declfile="hal/nrf_rtc.h" declline="277" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__rtc__hal_1gae2b77d53b0f995a2e7096448328b7c94" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_rtc_task_address_get</definition>
        <argsstring>(NRF_RTC_Type const *p_reg, nrf_rtc_task_t task)</argsstring>
        <name>nrf_rtc_task_address_get</name>
        <param>
          <type>NRF_RTC_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__rtc__hal_1gab1bbbc39c6dac153baf61aeae33c4274" kindref="member">nrf_rtc_task_t</ref></type>
          <declname>task</declname>
        </param>
        <briefdescription>
<para>Function for returning the address of a task. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">task</parametername>
</parameternamelist>
<parameterdescription>
<para>Requested task.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Address of the requested task register. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_rtc.h" line="425" column="28" bodyfile="hal/nrf_rtc.h" bodystart="425" bodyend="429" declfile="hal/nrf_rtc.h" declline="288" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__rtc__hal_1gaef77cbf9bd54e1fbe5f77de68bb4663e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE <ref refid="group__nrf__rtc__hal_1gab1bbbc39c6dac153baf61aeae33c4274" kindref="member">nrf_rtc_task_t</ref></type>
        <definition>NRF_STATIC_INLINE nrf_rtc_task_t nrf_rtc_capture_task_get</definition>
        <argsstring>(uint8_t index)</argsstring>
        <name>nrf_rtc_capture_task_get</name>
        <param>
          <type>uint8_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Function for getting the CAPTURE task associated with the specified capture channel. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">index</parametername>
</parameternamelist>
<parameterdescription>
<para>Capture channel index.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Requested CAPTURE task. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_rtc.h" line="299" column="34" declfile="hal/nrf_rtc.h" declline="299" declcolumn="34"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__rtc__hal_1gafb9b9a19cc60e799c435eaed3f2e80dd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_rtc_task_trigger</definition>
        <argsstring>(NRF_RTC_Type *p_reg, nrf_rtc_task_t task)</argsstring>
        <name>nrf_rtc_task_trigger</name>
        <param>
          <type>NRF_RTC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__rtc__hal_1gab1bbbc39c6dac153baf61aeae33c4274" kindref="member">nrf_rtc_task_t</ref></type>
          <declname>task</declname>
        </param>
        <briefdescription>
<para>Function for starting a task. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">task</parametername>
</parameternamelist>
<parameterdescription>
<para>Requested task. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_rtc.h" line="438" column="24" bodyfile="hal/nrf_rtc.h" bodystart="438" bodyend="441" declfile="hal/nrf_rtc.h" declline="308" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__rtc__hal_1gad5816bf6bcbd14f045ec35779d585648" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_rtc_event_enable</definition>
        <argsstring>(NRF_RTC_Type *p_reg, uint32_t mask)</argsstring>
        <name>nrf_rtc_event_enable</name>
        <param>
          <type>NRF_RTC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Function for enabling events. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of event flags to be enabled. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_rtc.h" line="443" column="24" bodyfile="hal/nrf_rtc.h" bodystart="443" bodyend="446" declfile="hal/nrf_rtc.h" declline="316" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__rtc__hal_1gaf96421035fab2c51b511c1864e60087b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_rtc_event_disable</definition>
        <argsstring>(NRF_RTC_Type *p_reg, uint32_t mask)</argsstring>
        <name>nrf_rtc_event_disable</name>
        <param>
          <type>NRF_RTC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Function for disabling an event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of event flags to be disabled. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_rtc.h" line="448" column="24" bodyfile="hal/nrf_rtc.h" bodystart="448" bodyend="451" declfile="hal/nrf_rtc.h" declline="324" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__rtc__hal_1ga80ae914b2998960a51f69c6194c2658a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE <ref refid="group__nrf__rtc__hal_1gaeefe46b9280fd5e11516b4148b9c5950" kindref="member">nrf_rtc_event_t</ref></type>
        <definition>NRF_STATIC_INLINE nrf_rtc_event_t nrf_rtc_compare_event_get</definition>
        <argsstring>(uint8_t index)</argsstring>
        <name>nrf_rtc_compare_event_get</name>
        <param>
          <type>uint8_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Function for getting the COMPARE event associated with the specified compare channel. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">index</parametername>
</parameternamelist>
<parameterdescription>
<para>Compare channel index.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Requested COMPARE event. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_rtc.h" line="453" column="35" bodyfile="hal/nrf_rtc.h" bodystart="453" bodyend="456" declfile="hal/nrf_rtc.h" declline="333" declcolumn="35"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2014<sp/>-<sp/>2024,<sp/>Nordic<sp/>Semiconductor<sp/>ASA</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>All<sp/>rights<sp/>reserved.</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>SPDX-License-Identifier:<sp/>BSD-3-Clause</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions<sp/>are<sp/>met:</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>1.<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright<sp/>notice,<sp/>this</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>2.<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the<sp/>distribution.</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/>3.<sp/>Neither<sp/>the<sp/>name<sp/>of<sp/>the<sp/>copyright<sp/>holder<sp/>nor<sp/>the<sp/>names<sp/>of<sp/>its</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>contributors<sp/>may<sp/>be<sp/>used<sp/>to<sp/>endorse<sp/>or<sp/>promote<sp/>products<sp/>derived<sp/>from<sp/>this</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>software<sp/>without<sp/>specific<sp/>prior<sp/>written<sp/>permission.</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>COPYRIGHT<sp/>HOLDERS<sp/>AND<sp/>CONTRIBUTORS<sp/>&quot;AS<sp/>IS&quot;</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/>AND<sp/>ANY<sp/>EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>THE</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*<sp/>ARE<sp/>DISCLAIMED.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>COPYRIGHT<sp/>HOLDER<sp/>OR<sp/>CONTRIBUTORS<sp/>BE</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,<sp/>SPECIAL,<sp/>EXEMPLARY,<sp/>OR</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>PROCUREMENT<sp/>OF</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>*<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,<sp/>DATA,<sp/>OR<sp/>PROFITS;<sp/>OR<sp/>BUSINESS</highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/>*<sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY<sp/>THEORY<sp/>OF<sp/>LIABILITY,<sp/>WHETHER<sp/>IN</highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/>*<sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR<sp/>OTHERWISE)</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/>*<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE<sp/>OF<sp/>THIS<sp/>SOFTWARE,<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/>*<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight></codeline>
<codeline lineno="32"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>NRF_RTC_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_RTC_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;nrfx.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(NRF_RTC0)<sp/>&amp;&amp;<sp/>defined(NRF_RTC)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_RTC0<sp/><sp/><sp/><sp/>NRF_RTC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>RTC0_CC_NUM<sp/>RTC_CC_NUM</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="48"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="49"><highlight class="comment"><sp/>*<sp/>@defgroup<sp/>nrf_rtc_hal<sp/>RTC<sp/>HAL</highlight></codeline>
<codeline lineno="50"><highlight class="comment"><sp/>*<sp/>@{</highlight></codeline>
<codeline lineno="51"><highlight class="comment"><sp/>*<sp/>@ingroup<sp/>nrf_rtc</highlight></codeline>
<codeline lineno="52"><highlight class="comment"><sp/>*<sp/>@brief<sp/><sp/><sp/>Hardware<sp/>access<sp/>layer<sp/>for<sp/>managing<sp/>the<sp/>Real<sp/>Time<sp/>Counter<sp/>(RTC)<sp/>peripheral.</highlight></codeline>
<codeline lineno="53"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="55"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="56"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Macro<sp/>getting<sp/>pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>RTC<sp/>peripheral.</highlight></codeline>
<codeline lineno="57"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="58"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>idx<sp/>RTC<sp/>instance<sp/>index.</highlight></codeline>
<codeline lineno="59"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="60"><highlight class="comment"><sp/>*<sp/>@return<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>RTC<sp/>peripheral.</highlight></codeline>
<codeline lineno="61"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_RTC_INST_GET(idx)<sp/>NRFX_CONCAT(NRF_,<sp/>RTC,<sp/>idx)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="64"><highlight class="comment">/**<sp/>@brief<sp/>Macro<sp/>for<sp/>getting<sp/>the<sp/>number<sp/>of<sp/>compare<sp/>channels<sp/>available<sp/>in<sp/>a<sp/>given<sp/>RTC<sp/>instance.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_RTC_CC_CHANNEL_COUNT(id)<sp/><sp/>NRFX_CONCAT_3(RTC,<sp/>id,<sp/>_CC_NUM)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="67"><highlight class="comment">/**<sp/>@brief<sp/>Symbol<sp/>specifying<sp/>maximum<sp/>number<sp/>of<sp/>available<sp/>compare<sp/>channels.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_RTC_CC_COUNT_MAX<sp/>NRFX_ARRAY_SIZE(((NRF_RTC_Type*)0)-&gt;EVENTS_COMPARE)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="70"><highlight class="comment">/**<sp/>@brief<sp/>Maximum<sp/>value<sp/>of<sp/>the<sp/>RTC<sp/>counter.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_RTC_COUNTER_MAX<sp/>RTC_COUNTER_COUNTER_Msk</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="73"><highlight class="comment">/**<sp/>@brief<sp/>Input<sp/>frequency<sp/>of<sp/>the<sp/>RTC<sp/>instance.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_RTC_INPUT_FREQ<sp/>32768</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="76"><highlight class="comment">/**<sp/>@brief<sp/>Macro<sp/>for<sp/>converting<sp/>expected<sp/>frequency<sp/>to<sp/>prescaler<sp/>setting.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_RTC_FREQ_TO_PRESCALER(FREQ)<sp/>(uint16_t)(((NRF_RTC_INPUT_FREQ)<sp/>/<sp/>(FREQ))<sp/>-<sp/>1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="79"><highlight class="comment">/**<sp/>@brief<sp/>Macro<sp/>for<sp/>trimming<sp/>values<sp/>to<sp/>the<sp/>RTC<sp/>bit<sp/>width.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_RTC_WRAP(val)<sp/>((val)<sp/>&amp;<sp/>RTC_COUNTER_COUNTER_Msk)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="82"><highlight class="comment">/**<sp/>@brief<sp/>Macro<sp/>for<sp/>creating<sp/>the<sp/>interrupt<sp/>bitmask<sp/>for<sp/>the<sp/>specified<sp/>compare<sp/>channel.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_RTC_CHANNEL_INT_MASK(ch)<sp/><sp/><sp/><sp/>((uint32_t)(NRF_RTC_INT_COMPARE0_MASK)<sp/>&lt;&lt;<sp/>(ch))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="85"><highlight class="comment">/**<sp/>@brief<sp/>Macro<sp/>for<sp/>creating<sp/>the<sp/>interrupt<sp/>bitmask<sp/>for<sp/>all<sp/>compare<sp/>channels<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_RTC_ALL_CHANNELS_INT_MASK<sp/>\</highlight></codeline>
<codeline lineno="87"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>((uint32_t)(((1<sp/>&lt;&lt;<sp/>NRF_RTC_CC_COUNT_MAX)<sp/>-<sp/>1)<sp/>&lt;&lt;<sp/>RTC_INTENSET_COMPARE0_Pos))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="89"><highlight class="comment">/**<sp/>@brief<sp/>Macro<sp/>for<sp/>obtaining<sp/>the<sp/>compare<sp/>event<sp/>for<sp/>the<sp/>specified<sp/>channel.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_RTC_CHANNEL_EVENT_ADDR(ch)<sp/>\</highlight></codeline>
<codeline lineno="91"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>(nrf_rtc_event_t)((NRF_RTC_EVENT_COMPARE_0)<sp/>+<sp/>(ch)<sp/>*<sp/>sizeof(uint32_t))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="93"><highlight class="comment">/**<sp/>@brief<sp/>RTC<sp/>tasks.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal">{</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__rtc__hal_1ggab1bbbc39c6dac153baf61aeae33c4274a2a8ffc1fb20f19a5b14826564e5d03e5" kindref="member">NRF_RTC_TASK_START</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_RTC_Type,TASKS_START),<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Start.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__rtc__hal_1ggab1bbbc39c6dac153baf61aeae33c4274a6dbaa4bbd6d58e079767f0309239eec1" kindref="member">NRF_RTC_TASK_STOP</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_RTC_Type,TASKS_STOP),<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Stop.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__rtc__hal_1ggab1bbbc39c6dac153baf61aeae33c4274a0b5cbfbb54397b0ec8ea8fb73f4a7bc0" kindref="member">NRF_RTC_TASK_CLEAR</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_RTC_Type,TASKS_CLEAR),<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Clear.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__rtc__hal_1ggab1bbbc39c6dac153baf61aeae33c4274a4cda1feac46eb1092cad53e9abe1a3d2" kindref="member">NRF_RTC_TASK_TRIGGER_OVERFLOW</ref><sp/>=<sp/>offsetof(NRF_RTC_Type,TASKS_TRIGOVRFLW),<sp/></highlight><highlight class="comment">/**&lt;<sp/>Trigger<sp/>overflow.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(RTC_TASKS_CAPTURE_TASKS_CAPTURE_Msk)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__rtc__hal_1ggab1bbbc39c6dac153baf61aeae33c4274a500cbb77177a4f236e3d94a710bcbb48" kindref="member">NRF_RTC_TASK_CAPTURE_0</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_RTC_Type,TASKS_CAPTURE[0]),<sp/></highlight><highlight class="comment">/**&lt;<sp/>Capture<sp/>the<sp/>counter<sp/>value<sp/>on<sp/>channel<sp/>0.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__rtc__hal_1ggab1bbbc39c6dac153baf61aeae33c4274a75ece93d72daf272e45895e0c29102cc" kindref="member">NRF_RTC_TASK_CAPTURE_1</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_RTC_Type,TASKS_CAPTURE[1]),<sp/></highlight><highlight class="comment">/**&lt;<sp/>Capture<sp/>the<sp/>counter<sp/>value<sp/>on<sp/>channel<sp/>1.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__rtc__hal_1ggab1bbbc39c6dac153baf61aeae33c4274aeda291fc479b7454aee56e0ab6301804" kindref="member">NRF_RTC_TASK_CAPTURE_2</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_RTC_Type,TASKS_CAPTURE[2]),<sp/></highlight><highlight class="comment">/**&lt;<sp/>Capture<sp/>the<sp/>counter<sp/>value<sp/>on<sp/>channel<sp/>2.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__rtc__hal_1ggab1bbbc39c6dac153baf61aeae33c4274a62e9e4c41b7d1406a91541ef21e247e9" kindref="member">NRF_RTC_TASK_CAPTURE_3</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_RTC_Type,TASKS_CAPTURE[3]),<sp/></highlight><highlight class="comment">/**&lt;<sp/>Capture<sp/>the<sp/>counter<sp/>value<sp/>on<sp/>channel<sp/>3.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal">}<sp/><ref refid="group__nrf__rtc__hal_1gab1bbbc39c6dac153baf61aeae33c4274" kindref="member">nrf_rtc_task_t</ref>;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="108"><highlight class="comment">/**<sp/>@brief<sp/>RTC<sp/>events.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal">{</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__rtc__hal_1ggaeefe46b9280fd5e11516b4148b9c5950a1c477c236900018c2dec4265129739c7" kindref="member">NRF_RTC_EVENT_TICK</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_RTC_Type,EVENTS_TICK),<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Tick<sp/>event.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__rtc__hal_1ggaeefe46b9280fd5e11516b4148b9c5950acca3da90aab0fc0950facce3d9c60b9c" kindref="member">NRF_RTC_EVENT_OVERFLOW</ref><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_RTC_Type,EVENTS_OVRFLW),<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Overflow<sp/>event.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__rtc__hal_1ggaeefe46b9280fd5e11516b4148b9c5950aed2f00b3d07e65411e4b63982efd2e07" kindref="member">NRF_RTC_EVENT_COMPARE_0</ref><sp/><sp/><sp/>=<sp/>offsetof(NRF_RTC_Type,EVENTS_COMPARE[0]),<sp/></highlight><highlight class="comment">/**&lt;<sp/>Compare<sp/>0<sp/>event.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__rtc__hal_1ggaeefe46b9280fd5e11516b4148b9c5950a4910d903ba14a05187dedfcc842ef26a" kindref="member">NRF_RTC_EVENT_COMPARE_1</ref><sp/><sp/><sp/>=<sp/>offsetof(NRF_RTC_Type,EVENTS_COMPARE[1]),<sp/></highlight><highlight class="comment">/**&lt;<sp/>Compare<sp/>1<sp/>event.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__rtc__hal_1ggaeefe46b9280fd5e11516b4148b9c5950a913f4348d8da28f6253ffcca803ed937" kindref="member">NRF_RTC_EVENT_COMPARE_2</ref><sp/><sp/><sp/>=<sp/>offsetof(NRF_RTC_Type,EVENTS_COMPARE[2]),<sp/></highlight><highlight class="comment">/**&lt;<sp/>Compare<sp/>2<sp/>event.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__rtc__hal_1ggaeefe46b9280fd5e11516b4148b9c5950af7b99708af83d76a4d4b59116f328bbc" kindref="member">NRF_RTC_EVENT_COMPARE_3</ref><sp/><sp/><sp/>=<sp/>offsetof(NRF_RTC_Type,EVENTS_COMPARE[3])<sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Compare<sp/>3<sp/>event.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal">}<sp/><ref refid="group__nrf__rtc__hal_1gaeefe46b9280fd5e11516b4148b9c5950" kindref="member">nrf_rtc_event_t</ref>;</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="119"><highlight class="comment">/**<sp/>@brief<sp/>RTC<sp/>interrupts.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal">{</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__rtc__hal_1gga22211dc20a5c2f6cf1b43039d2bae4a3ab01e1e883741734b5cac05c92efc952e" kindref="member">NRF_RTC_INT_TICK_MASK</ref><sp/><sp/><sp/><sp/><sp/>=<sp/>RTC_INTENSET_TICK_Msk,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>RTC<sp/>interrupt<sp/>from<sp/>tick<sp/>event.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__rtc__hal_1gga22211dc20a5c2f6cf1b43039d2bae4a3a18c66e1dcbc43cd4c82a6f5d0fb8d922" kindref="member">NRF_RTC_INT_OVERFLOW_MASK</ref><sp/>=<sp/>RTC_INTENSET_OVRFLW_Msk,<sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>RTC<sp/>interrupt<sp/>from<sp/>overflow<sp/>event.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__rtc__hal_1gga22211dc20a5c2f6cf1b43039d2bae4a3acb0d6d71f2dcb78604936e1ba924ab9b" kindref="member">NRF_RTC_INT_COMPARE0_MASK</ref><sp/>=<sp/>RTC_INTENSET_COMPARE0_Msk,<sp/></highlight><highlight class="comment">/**&lt;<sp/>RTC<sp/>interrupt<sp/>from<sp/>compare<sp/>event<sp/>on<sp/>channel<sp/>0.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__rtc__hal_1gga22211dc20a5c2f6cf1b43039d2bae4a3af842e26d22b97607c1b778c4119b82a6" kindref="member">NRF_RTC_INT_COMPARE1_MASK</ref><sp/>=<sp/>RTC_INTENSET_COMPARE1_Msk,<sp/></highlight><highlight class="comment">/**&lt;<sp/>RTC<sp/>interrupt<sp/>from<sp/>compare<sp/>event<sp/>on<sp/>channel<sp/>1.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__rtc__hal_1gga22211dc20a5c2f6cf1b43039d2bae4a3adf3bfc6e4f76ed0ecb3b1784d3dad2e0" kindref="member">NRF_RTC_INT_COMPARE2_MASK</ref><sp/>=<sp/>RTC_INTENSET_COMPARE2_Msk,<sp/></highlight><highlight class="comment">/**&lt;<sp/>RTC<sp/>interrupt<sp/>from<sp/>compare<sp/>event<sp/>on<sp/>channel<sp/>2.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__rtc__hal_1gga22211dc20a5c2f6cf1b43039d2bae4a3a04d8a6817769b5b2b231b7ebfcde893c" kindref="member">NRF_RTC_INT_COMPARE3_MASK</ref><sp/>=<sp/>RTC_INTENSET_COMPARE3_Msk<sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>RTC<sp/>interrupt<sp/>from<sp/>compare<sp/>event<sp/>on<sp/>channel<sp/>3.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal">}<sp/><ref refid="group__nrf__rtc__hal_1ga22211dc20a5c2f6cf1b43039d2bae4a3" kindref="member">nrf_rtc_int_t</ref>;</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="130"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="131"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>a<sp/>compare<sp/>value<sp/>for<sp/>a<sp/>channel.</highlight></codeline>
<codeline lineno="132"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="133"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="134"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>ch<sp/><sp/><sp/><sp/><sp/>Channel.</highlight></codeline>
<codeline lineno="135"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>cc_val<sp/>Compare<sp/>value<sp/>to<sp/>be<sp/>set.</highlight></codeline>
<codeline lineno="136"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__rtc__hal_1ga0ddee0d5275bca0f2cfe4f6f576ae971" kindref="member">nrf_rtc_cc_set</ref>(NRF_RTC_Type<sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>ch,<sp/>uint32_t<sp/>cc_val);</highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="139"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="140"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>returning<sp/>the<sp/>compare<sp/>value<sp/>for<sp/>a<sp/>channel.</highlight></codeline>
<codeline lineno="141"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="142"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="143"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>ch<sp/><sp/><sp/><sp/>Channel.</highlight></codeline>
<codeline lineno="144"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="145"><highlight class="comment"><sp/>*<sp/>@return<sp/>COMPARE[ch]<sp/>value.</highlight></codeline>
<codeline lineno="146"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__rtc__hal_1gab51551ec4c50f927741b8743c5d024e6" kindref="member">nrf_rtc_cc_get</ref>(NRF_RTC_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>ch);</highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="149"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="150"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>enabling<sp/>interrupts.</highlight></codeline>
<codeline lineno="151"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="152"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="153"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>mask<sp/><sp/>Mask<sp/>of<sp/>interrupts<sp/>to<sp/>be<sp/>enabled.</highlight></codeline>
<codeline lineno="154"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Use<sp/>@ref<sp/>nrf_rtc_int_t<sp/>values<sp/>for<sp/>bit<sp/>masking.</highlight></codeline>
<codeline lineno="155"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__rtc__hal_1gad6af9273ab338cdf8fe96c6db58a2dea" kindref="member">nrf_rtc_int_enable</ref>(NRF_RTC_Type<sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>mask);</highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="158"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="159"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>disabling<sp/>interrupts.</highlight></codeline>
<codeline lineno="160"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="161"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="162"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>mask<sp/><sp/>Mask<sp/>of<sp/>interrupts<sp/>to<sp/>be<sp/>disabled.</highlight></codeline>
<codeline lineno="163"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Use<sp/>@ref<sp/>nrf_rtc_int_t<sp/>values<sp/>for<sp/>bit<sp/>masking.</highlight></codeline>
<codeline lineno="164"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__rtc__hal_1gad130c842bf01659e6dc7462b9760a7a0" kindref="member">nrf_rtc_int_disable</ref>(NRF_RTC_Type<sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>mask);</highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="167"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="168"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>checking<sp/>if<sp/>the<sp/>specified<sp/>interrupts<sp/>are<sp/>enabled.</highlight></codeline>
<codeline lineno="169"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="170"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="171"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>mask<sp/><sp/>Mask<sp/>of<sp/>interrupts<sp/>to<sp/>be<sp/>checked.</highlight></codeline>
<codeline lineno="172"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Use<sp/>@ref<sp/>nrf_rtc_int_t<sp/>values<sp/>for<sp/>bit<sp/>masking.</highlight></codeline>
<codeline lineno="173"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="174"><highlight class="comment"><sp/>*<sp/>@return<sp/>Mask<sp/>of<sp/>enabled<sp/>interrupts.</highlight></codeline>
<codeline lineno="175"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__rtc__hal_1ga54f0ed1f010737c489d47305a8cd2f5e" kindref="member">nrf_rtc_int_enable_check</ref>(NRF_RTC_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>mask);</highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(DPPI_PRESENT)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="179"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="180"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>the<sp/>subscribe<sp/>configuration<sp/>for<sp/>a<sp/>given</highlight></codeline>
<codeline lineno="181"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RTC<sp/>task.</highlight></codeline>
<codeline lineno="182"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="183"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="184"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>task<sp/><sp/><sp/><sp/>Task<sp/>for<sp/>which<sp/>to<sp/>set<sp/>the<sp/>configuration.</highlight></codeline>
<codeline lineno="185"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>channel<sp/>Channel<sp/>through<sp/>which<sp/>to<sp/>subscribe<sp/>events.</highlight></codeline>
<codeline lineno="186"><highlight class="comment"><sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__rtc__hal_1ga0a9fb7692ee3cc4d4db4c906c910f939" kindref="member">nrf_rtc_subscribe_set</ref>(NRF_RTC_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__rtc__hal_1gab1bbbc39c6dac153baf61aeae33c4274" kindref="member">nrf_rtc_task_t</ref><sp/>task,</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>channel);</highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="191"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="192"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>clearing<sp/>the<sp/>subscribe<sp/>configuration<sp/>for<sp/>a<sp/>given</highlight></codeline>
<codeline lineno="193"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RTC<sp/>task.</highlight></codeline>
<codeline lineno="194"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="195"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="196"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>task<sp/><sp/>Task<sp/>for<sp/>which<sp/>to<sp/>clear<sp/>the<sp/>configuration.</highlight></codeline>
<codeline lineno="197"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__rtc__hal_1ga0cba66d123812f658c21b439a8c6507a" kindref="member">nrf_rtc_subscribe_clear</ref>(NRF_RTC_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__rtc__hal_1gab1bbbc39c6dac153baf61aeae33c4274" kindref="member">nrf_rtc_task_t</ref><sp/>task);</highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="201"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="202"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>the<sp/>publish<sp/>configuration<sp/>for<sp/>a<sp/>given</highlight></codeline>
<codeline lineno="203"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RTC<sp/>event.</highlight></codeline>
<codeline lineno="204"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="205"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="206"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>event<sp/><sp/><sp/>Event<sp/>for<sp/>which<sp/>to<sp/>set<sp/>the<sp/>configuration.</highlight></codeline>
<codeline lineno="207"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>channel<sp/>Channel<sp/>through<sp/>which<sp/>to<sp/>publish<sp/>the<sp/>event.</highlight></codeline>
<codeline lineno="208"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__rtc__hal_1gacd5b442ea8c0e5b27448173d4e1b95c6" kindref="member">nrf_rtc_publish_set</ref>(NRF_RTC_Type<sp/>*<sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__rtc__hal_1gaeefe46b9280fd5e11516b4148b9c5950" kindref="member">nrf_rtc_event_t</ref><sp/>event,</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>channel);</highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="213"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="214"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>clearing<sp/>the<sp/>publish<sp/>configuration<sp/>for<sp/>a<sp/>given</highlight></codeline>
<codeline lineno="215"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RTC<sp/>event.</highlight></codeline>
<codeline lineno="216"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="217"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="218"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>event<sp/>Event<sp/>for<sp/>which<sp/>to<sp/>clear<sp/>the<sp/>configuration.</highlight></codeline>
<codeline lineno="219"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__rtc__hal_1ga72d8505d504e069bcc8f13d76c04e6bc" kindref="member">nrf_rtc_publish_clear</ref>(NRF_RTC_Type<sp/>*<sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__rtc__hal_1gaeefe46b9280fd5e11516b4148b9c5950" kindref="member">nrf_rtc_event_t</ref><sp/>event);</highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>defined(DPPI_PRESENT)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="224"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="225"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>retrieving<sp/>the<sp/>state<sp/>of<sp/>the<sp/>RTC<sp/>event.</highlight></codeline>
<codeline lineno="226"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="227"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="228"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>event<sp/>Event<sp/>to<sp/>be<sp/>checked.</highlight></codeline>
<codeline lineno="229"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="230"><highlight class="comment"><sp/>*<sp/>@retval<sp/>true<sp/><sp/>The<sp/>event<sp/>has<sp/>been<sp/>generated.</highlight></codeline>
<codeline lineno="231"><highlight class="comment"><sp/>*<sp/>@retval<sp/>false<sp/>The<sp/>event<sp/>has<sp/>not<sp/>been<sp/>generated.</highlight></codeline>
<codeline lineno="232"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrf__rtc__hal_1ga5e1fe7f9ef4db1709615fe03e2efa8e0" kindref="member">nrf_rtc_event_check</ref>(NRF_RTC_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,<sp/><ref refid="group__nrf__rtc__hal_1gaeefe46b9280fd5e11516b4148b9c5950" kindref="member">nrf_rtc_event_t</ref><sp/>event);</highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="235"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="236"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>clearing<sp/>an<sp/>event.</highlight></codeline>
<codeline lineno="237"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="238"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="239"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>event<sp/>Event<sp/>to<sp/>be<sp/>cleared.</highlight></codeline>
<codeline lineno="240"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__rtc__hal_1ga85931a1c79936b8b9631db120abb6f6b" kindref="member">nrf_rtc_event_clear</ref>(NRF_RTC_Type<sp/>*<sp/>p_reg,<sp/><ref refid="group__nrf__rtc__hal_1gaeefe46b9280fd5e11516b4148b9c5950" kindref="member">nrf_rtc_event_t</ref><sp/>event);</highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="243"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="244"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>returning<sp/>a<sp/>counter<sp/>value.</highlight></codeline>
<codeline lineno="245"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="246"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="247"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="248"><highlight class="comment"><sp/>*<sp/>@return<sp/>Counter<sp/>value.</highlight></codeline>
<codeline lineno="249"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__rtc__hal_1ga94f1765ff25dba1cf532dd028083df57" kindref="member">nrf_rtc_counter_get</ref>(NRF_RTC_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="252"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="253"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>a<sp/>prescaler<sp/>value.</highlight></codeline>
<codeline lineno="254"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="255"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="256"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>val<sp/><sp/><sp/>Value<sp/>to<sp/>set<sp/>the<sp/>prescaler<sp/>to.</highlight></codeline>
<codeline lineno="257"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__rtc__hal_1ga51a966cd31e5bf8efff527c125f05d34" kindref="member">nrf_rtc_prescaler_set</ref>(NRF_RTC_Type<sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>val);</highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="260"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="261"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>a<sp/>prescaler<sp/>value.</highlight></codeline>
<codeline lineno="262"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="263"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="264"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="265"><highlight class="comment"><sp/>*<sp/>@return<sp/>Prescaler<sp/>value.</highlight></codeline>
<codeline lineno="266"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__rtc__hal_1ga835df54d91ef4be4ce13ebe7c02f65a5" kindref="member">nrf_rtc_prescaler_get</ref>(NRF_RTC_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="269"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="270"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>returning<sp/>the<sp/>address<sp/>of<sp/>an<sp/>event.</highlight></codeline>
<codeline lineno="271"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="272"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="273"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>event<sp/>Requested<sp/>event.</highlight></codeline>
<codeline lineno="274"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="275"><highlight class="comment"><sp/>*<sp/>@return<sp/>Address<sp/>of<sp/>the<sp/>requested<sp/>event<sp/>register.</highlight></codeline>
<codeline lineno="276"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__rtc__hal_1ga0252904094c2b3aa9f436d7d041003c0" kindref="member">nrf_rtc_event_address_get</ref>(NRF_RTC_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__rtc__hal_1gaeefe46b9280fd5e11516b4148b9c5950" kindref="member">nrf_rtc_event_t</ref><sp/><sp/><sp/><sp/><sp/><sp/>event);</highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="280"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="281"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>returning<sp/>the<sp/>address<sp/>of<sp/>a<sp/>task.</highlight></codeline>
<codeline lineno="282"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="283"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="284"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>task<sp/><sp/>Requested<sp/>task.</highlight></codeline>
<codeline lineno="285"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="286"><highlight class="comment"><sp/>*<sp/>@return<sp/>Address<sp/>of<sp/>the<sp/>requested<sp/>task<sp/>register.</highlight></codeline>
<codeline lineno="287"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__rtc__hal_1gae2b77d53b0f995a2e7096448328b7c94" kindref="member">nrf_rtc_task_address_get</ref>(NRF_RTC_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__rtc__hal_1gab1bbbc39c6dac153baf61aeae33c4274" kindref="member">nrf_rtc_task_t</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>task);</highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(RTC_TASKS_CAPTURE_TASKS_CAPTURE_Msk)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="292"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="293"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>the<sp/>CAPTURE<sp/>task<sp/>associated<sp/>with<sp/>the<sp/>specified<sp/>capture<sp/>channel.</highlight></codeline>
<codeline lineno="294"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="295"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>index<sp/>Capture<sp/>channel<sp/>index.</highlight></codeline>
<codeline lineno="296"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="297"><highlight class="comment"><sp/>*<sp/>@return<sp/>Requested<sp/>CAPTURE<sp/>task.</highlight></codeline>
<codeline lineno="298"><highlight class="comment"><sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal">NRF_STATIC_INLINE<sp/><ref refid="group__nrf__rtc__hal_1gab1bbbc39c6dac153baf61aeae33c4274" kindref="member">nrf_rtc_task_t</ref><sp/><ref refid="group__nrf__rtc__hal_1gaef77cbf9bd54e1fbe5f77de68bb4663e" kindref="member">nrf_rtc_capture_task_get</ref>(uint8_t<sp/>index);</highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="302"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="303"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>starting<sp/>a<sp/>task.</highlight></codeline>
<codeline lineno="304"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="305"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="306"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>task<sp/><sp/>Requested<sp/>task.</highlight></codeline>
<codeline lineno="307"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__rtc__hal_1gafb9b9a19cc60e799c435eaed3f2e80dd" kindref="member">nrf_rtc_task_trigger</ref>(NRF_RTC_Type<sp/>*<sp/>p_reg,<sp/><ref refid="group__nrf__rtc__hal_1gab1bbbc39c6dac153baf61aeae33c4274" kindref="member">nrf_rtc_task_t</ref><sp/>task);</highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="310"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="311"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>enabling<sp/>events.</highlight></codeline>
<codeline lineno="312"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="313"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="314"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>mask<sp/><sp/>Mask<sp/>of<sp/>event<sp/>flags<sp/>to<sp/>be<sp/>enabled.</highlight></codeline>
<codeline lineno="315"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__rtc__hal_1gad5816bf6bcbd14f045ec35779d585648" kindref="member">nrf_rtc_event_enable</ref>(NRF_RTC_Type<sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>mask);</highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="318"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="319"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>disabling<sp/>an<sp/>event.</highlight></codeline>
<codeline lineno="320"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="321"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="322"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>mask<sp/><sp/>Mask<sp/>of<sp/>event<sp/>flags<sp/>to<sp/>be<sp/>disabled.</highlight></codeline>
<codeline lineno="323"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__rtc__hal_1gaf96421035fab2c51b511c1864e60087b" kindref="member">nrf_rtc_event_disable</ref>(NRF_RTC_Type<sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>mask);</highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="326"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="327"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>the<sp/>COMPARE<sp/>event<sp/>associated<sp/>with<sp/>the<sp/>specified<sp/>compare<sp/>channel.</highlight></codeline>
<codeline lineno="328"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="329"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>index<sp/>Compare<sp/>channel<sp/>index.</highlight></codeline>
<codeline lineno="330"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="331"><highlight class="comment"><sp/>*<sp/>@return<sp/>Requested<sp/>COMPARE<sp/>event.</highlight></codeline>
<codeline lineno="332"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal">NRF_STATIC_INLINE<sp/><ref refid="group__nrf__rtc__hal_1gaeefe46b9280fd5e11516b4148b9c5950" kindref="member">nrf_rtc_event_t</ref><sp/><ref refid="group__nrf__rtc__hal_1ga80ae914b2998960a51f69c6194c2658a" kindref="member">nrf_rtc_compare_event_get</ref>(uint8_t<sp/>index);</highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>NRF_DECLARE_ONLY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal">NRF_STATIC_INLINE<sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__rtc__hal_1ga0ddee0d5275bca0f2cfe4f6f576ae971" kindref="member">nrf_rtc_cc_set</ref>(NRF_RTC_Type<sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>ch,<sp/>uint32_t<sp/>cc_val)</highlight></codeline>
<codeline lineno="338"><highlight class="normal">{</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;CC[ch]<sp/>=<sp/>cc_val;</highlight></codeline>
<codeline lineno="340"><highlight class="normal">}</highlight></codeline>
<codeline lineno="341"><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal">NRF_STATIC_INLINE<sp/><sp/>uint32_t<sp/><ref refid="group__nrf__rtc__hal_1gab51551ec4c50f927741b8743c5d024e6" kindref="member">nrf_rtc_cc_get</ref>(NRF_RTC_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>ch)</highlight></codeline>
<codeline lineno="343"><highlight class="normal">{</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p_reg-&gt;CC[ch];</highlight></codeline>
<codeline lineno="345"><highlight class="normal">}</highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__rtc__hal_1gad6af9273ab338cdf8fe96c6db58a2dea" kindref="member">nrf_rtc_int_enable</ref>(NRF_RTC_Type<sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>mask)</highlight></codeline>
<codeline lineno="348"><highlight class="normal">{</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;INTENSET<sp/>=<sp/>mask;</highlight></codeline>
<codeline lineno="350"><highlight class="normal">}</highlight></codeline>
<codeline lineno="351"><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__rtc__hal_1gad130c842bf01659e6dc7462b9760a7a0" kindref="member">nrf_rtc_int_disable</ref>(NRF_RTC_Type<sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>mask)</highlight></codeline>
<codeline lineno="353"><highlight class="normal">{</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;INTENCLR<sp/>=<sp/>mask;</highlight></codeline>
<codeline lineno="355"><highlight class="normal">}</highlight></codeline>
<codeline lineno="356"><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__rtc__hal_1ga54f0ed1f010737c489d47305a8cd2f5e" kindref="member">nrf_rtc_int_enable_check</ref>(NRF_RTC_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>mask)</highlight></codeline>
<codeline lineno="358"><highlight class="normal">{</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p_reg-&gt;INTENSET<sp/>&amp;<sp/>mask;</highlight></codeline>
<codeline lineno="360"><highlight class="normal">}</highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(DPPI_PRESENT)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__rtc__hal_1ga0a9fb7692ee3cc4d4db4c906c910f939" kindref="member">nrf_rtc_subscribe_set</ref>(NRF_RTC_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__rtc__hal_1gab1bbbc39c6dac153baf61aeae33c4274" kindref="member">nrf_rtc_task_t</ref><sp/>task,</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>channel)</highlight></codeline>
<codeline lineno="366"><highlight class="normal">{</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/>*((</highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint32_t<sp/>*)<sp/>((uint8_t<sp/>*)<sp/>p_reg<sp/>+<sp/>(uint32_t)<sp/>task<sp/>+<sp/>0x80uL))<sp/>=</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)channel<sp/>|<sp/>NRF_SUBSCRIBE_PUBLISH_ENABLE);</highlight></codeline>
<codeline lineno="369"><highlight class="normal">}</highlight></codeline>
<codeline lineno="370"><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__rtc__hal_1ga0cba66d123812f658c21b439a8c6507a" kindref="member">nrf_rtc_subscribe_clear</ref>(NRF_RTC_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__rtc__hal_1gab1bbbc39c6dac153baf61aeae33c4274" kindref="member">nrf_rtc_task_t</ref><sp/>task)</highlight></codeline>
<codeline lineno="373"><highlight class="normal">{</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/>*((</highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint32_t<sp/>*)<sp/>((uint8_t<sp/>*)<sp/>p_reg<sp/>+<sp/>(uint32_t)<sp/>task<sp/>+<sp/>0x80uL))<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="375"><highlight class="normal">}</highlight></codeline>
<codeline lineno="376"><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__rtc__hal_1gacd5b442ea8c0e5b27448173d4e1b95c6" kindref="member">nrf_rtc_publish_set</ref>(NRF_RTC_Type<sp/>*<sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__rtc__hal_1gaeefe46b9280fd5e11516b4148b9c5950" kindref="member">nrf_rtc_event_t</ref><sp/>event,</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>channel)</highlight></codeline>
<codeline lineno="380"><highlight class="normal">{</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/>*((</highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint32_t<sp/>*)<sp/>((uint8_t<sp/>*)<sp/>p_reg<sp/>+<sp/>(uint32_t)<sp/>event<sp/>+<sp/>0x80uL))<sp/>=</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)channel<sp/>|<sp/>NRF_SUBSCRIBE_PUBLISH_ENABLE);</highlight></codeline>
<codeline lineno="383"><highlight class="normal">}</highlight></codeline>
<codeline lineno="384"><highlight class="normal"></highlight></codeline>
<codeline lineno="385"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__rtc__hal_1ga72d8505d504e069bcc8f13d76c04e6bc" kindref="member">nrf_rtc_publish_clear</ref>(NRF_RTC_Type<sp/>*<sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__rtc__hal_1gaeefe46b9280fd5e11516b4148b9c5950" kindref="member">nrf_rtc_event_t</ref><sp/>event)</highlight></codeline>
<codeline lineno="387"><highlight class="normal">{</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/>*((</highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint32_t<sp/>*)<sp/>((uint8_t<sp/>*)<sp/>p_reg<sp/>+<sp/>(uint32_t)<sp/>event<sp/>+<sp/>0x80uL))<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="389"><highlight class="normal">}</highlight></codeline>
<codeline lineno="390"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>defined(DPPI_PRESENT)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrf__rtc__hal_1ga5e1fe7f9ef4db1709615fe03e2efa8e0" kindref="member">nrf_rtc_event_check</ref>(NRF_RTC_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,<sp/><ref refid="group__nrf__rtc__hal_1gaeefe46b9280fd5e11516b4148b9c5950" kindref="member">nrf_rtc_event_t</ref><sp/>event)</highlight></codeline>
<codeline lineno="393"><highlight class="normal">{</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>nrf_event_check(p_reg,<sp/>event);</highlight></codeline>
<codeline lineno="395"><highlight class="normal">}</highlight></codeline>
<codeline lineno="396"><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__rtc__hal_1ga85931a1c79936b8b9631db120abb6f6b" kindref="member">nrf_rtc_event_clear</ref>(NRF_RTC_Type<sp/>*<sp/>p_reg,<sp/><ref refid="group__nrf__rtc__hal_1gaeefe46b9280fd5e11516b4148b9c5950" kindref="member">nrf_rtc_event_t</ref><sp/>event)</highlight></codeline>
<codeline lineno="398"><highlight class="normal">{</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/>*((</highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint32_t<sp/>*)((uint8_t<sp/>*)p_reg<sp/>+<sp/>(uint32_t)event))<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/>nrf_event_readback((uint8_t<sp/>*)p_reg<sp/>+<sp/>(uint32_t)event);</highlight></codeline>
<codeline lineno="401"><highlight class="normal">}</highlight></codeline>
<codeline lineno="402"><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__rtc__hal_1ga94f1765ff25dba1cf532dd028083df57" kindref="member">nrf_rtc_counter_get</ref>(NRF_RTC_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="404"><highlight class="normal">{</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p_reg-&gt;COUNTER;</highlight></codeline>
<codeline lineno="406"><highlight class="normal">}</highlight></codeline>
<codeline lineno="407"><highlight class="normal"></highlight></codeline>
<codeline lineno="408"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__rtc__hal_1ga51a966cd31e5bf8efff527c125f05d34" kindref="member">nrf_rtc_prescaler_set</ref>(NRF_RTC_Type<sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>val)</highlight></codeline>
<codeline lineno="409"><highlight class="normal">{</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__glue_1ga9698a3f6b6bea455d2b54a79e514ee36" kindref="member">NRFX_ASSERT</ref>(val<sp/>&lt;=<sp/>(RTC_PRESCALER_PRESCALER_Msk<sp/>&gt;&gt;<sp/>RTC_PRESCALER_PRESCALER_Pos));</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;PRESCALER<sp/>=<sp/>val;</highlight></codeline>
<codeline lineno="412"><highlight class="normal">}</highlight></codeline>
<codeline lineno="413"><highlight class="normal"></highlight></codeline>
<codeline lineno="414"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__rtc__hal_1ga835df54d91ef4be4ce13ebe7c02f65a5" kindref="member">nrf_rtc_prescaler_get</ref>(NRF_RTC_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="415"><highlight class="normal">{</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p_reg-&gt;PRESCALER;</highlight></codeline>
<codeline lineno="417"><highlight class="normal">}</highlight></codeline>
<codeline lineno="418"><highlight class="normal"></highlight></codeline>
<codeline lineno="419"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__rtc__hal_1ga0252904094c2b3aa9f436d7d041003c0" kindref="member">nrf_rtc_event_address_get</ref>(NRF_RTC_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__rtc__hal_1gaeefe46b9280fd5e11516b4148b9c5950" kindref="member">nrf_rtc_event_t</ref><sp/><sp/><sp/><sp/><sp/><sp/>event)</highlight></codeline>
<codeline lineno="421"><highlight class="normal">{</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(uint32_t)p_reg<sp/>+<sp/>event;</highlight></codeline>
<codeline lineno="423"><highlight class="normal">}</highlight></codeline>
<codeline lineno="424"><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__rtc__hal_1gae2b77d53b0f995a2e7096448328b7c94" kindref="member">nrf_rtc_task_address_get</ref>(NRF_RTC_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__rtc__hal_1gab1bbbc39c6dac153baf61aeae33c4274" kindref="member">nrf_rtc_task_t</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>task)</highlight></codeline>
<codeline lineno="427"><highlight class="normal">{</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(uint32_t)p_reg<sp/>+<sp/>task;</highlight></codeline>
<codeline lineno="429"><highlight class="normal">}</highlight></codeline>
<codeline lineno="430"><highlight class="normal"></highlight></codeline>
<codeline lineno="431"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(RTC_TASKS_CAPTURE_TASKS_CAPTURE_Msk)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="432"><highlight class="normal">NRF_STATIC_INLINE<sp/><ref refid="group__nrf__rtc__hal_1gab1bbbc39c6dac153baf61aeae33c4274" kindref="member">nrf_rtc_task_t</ref><sp/><ref refid="group__nrf__rtc__hal_1gaef77cbf9bd54e1fbe5f77de68bb4663e" kindref="member">nrf_rtc_capture_task_get</ref>(uint8_t<sp/>index)</highlight></codeline>
<codeline lineno="433"><highlight class="normal">{</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="group__nrf__rtc__hal_1gab1bbbc39c6dac153baf61aeae33c4274" kindref="member">nrf_rtc_task_t</ref>)<ref refid="group__nrfx__common_1gaf356c97c2527d9ac57b04dd9f12fc9d3" kindref="member">NRFX_OFFSETOF</ref>(NRF_RTC_Type,<sp/>TASKS_CAPTURE[index]);</highlight></codeline>
<codeline lineno="435"><highlight class="normal">}</highlight></codeline>
<codeline lineno="436"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="437"><highlight class="normal"></highlight></codeline>
<codeline lineno="438"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__rtc__hal_1gafb9b9a19cc60e799c435eaed3f2e80dd" kindref="member">nrf_rtc_task_trigger</ref>(NRF_RTC_Type<sp/>*<sp/>p_reg,<sp/><ref refid="group__nrf__rtc__hal_1gab1bbbc39c6dac153baf61aeae33c4274" kindref="member">nrf_rtc_task_t</ref><sp/>task)</highlight></codeline>
<codeline lineno="439"><highlight class="normal">{</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/>*(__IO<sp/>uint32_t<sp/>*)((uint32_t)p_reg<sp/>+<sp/>task)<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="441"><highlight class="normal">}</highlight></codeline>
<codeline lineno="442"><highlight class="normal"></highlight></codeline>
<codeline lineno="443"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__rtc__hal_1gad5816bf6bcbd14f045ec35779d585648" kindref="member">nrf_rtc_event_enable</ref>(NRF_RTC_Type<sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>mask)</highlight></codeline>
<codeline lineno="444"><highlight class="normal">{</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;EVTENSET<sp/>=<sp/>mask;</highlight></codeline>
<codeline lineno="446"><highlight class="normal">}</highlight></codeline>
<codeline lineno="447"><highlight class="normal"></highlight></codeline>
<codeline lineno="448"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__rtc__hal_1gaf96421035fab2c51b511c1864e60087b" kindref="member">nrf_rtc_event_disable</ref>(NRF_RTC_Type<sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>mask)</highlight></codeline>
<codeline lineno="449"><highlight class="normal">{</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;EVTENCLR<sp/>=<sp/>mask;</highlight></codeline>
<codeline lineno="451"><highlight class="normal">}</highlight></codeline>
<codeline lineno="452"><highlight class="normal"></highlight></codeline>
<codeline lineno="453"><highlight class="normal">NRF_STATIC_INLINE<sp/><ref refid="group__nrf__rtc__hal_1gaeefe46b9280fd5e11516b4148b9c5950" kindref="member">nrf_rtc_event_t</ref><sp/><ref refid="group__nrf__rtc__hal_1ga80ae914b2998960a51f69c6194c2658a" kindref="member">nrf_rtc_compare_event_get</ref>(uint8_t<sp/>index)</highlight></codeline>
<codeline lineno="454"><highlight class="normal">{</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="group__nrf__rtc__hal_1gaeefe46b9280fd5e11516b4148b9c5950" kindref="member">nrf_rtc_event_t</ref>)<ref refid="group__nrfx__common_1gaf356c97c2527d9ac57b04dd9f12fc9d3" kindref="member">NRFX_OFFSETOF</ref>(NRF_RTC_Type,<sp/>EVENTS_COMPARE[index]);</highlight></codeline>
<codeline lineno="456"><highlight class="normal">}</highlight></codeline>
<codeline lineno="457"><highlight class="normal"></highlight></codeline>
<codeline lineno="458"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRF_DECLARE_ONLY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="459"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="460"><highlight class="comment">/**<sp/>@}<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="461"><highlight class="normal"></highlight></codeline>
<codeline lineno="462"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="463"><highlight class="normal">}</highlight></codeline>
<codeline lineno="464"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="465"><highlight class="normal"></highlight></codeline>
<codeline lineno="466"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">/*<sp/>NRF_RTC_H<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="hal/nrf_rtc.h"/>
  </compounddef>
</doxygen>
