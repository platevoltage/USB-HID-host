<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="nrf__aar_8h" kind="file" language="C++">
    <compoundname>nrf_aar.h</compoundname>
    <includes local="no">nrfx.h</includes>
    <incdepgraph>
      <node id="1">
        <label>hal/nrf_aar.h</label>
        <link refid="nrf__aar_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>nrfx.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__nrf__aar__hal_1ga5175eca6ff261ad2ae2fb379e156a726" prot="public" static="no">
        <name>NRF_AAR_HAS_ERROR</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Presence of the ERROR event and ERRORSTATUS register. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_aar.h" line="56" column="9" bodyfile="hal/nrf_aar.h" bodystart="56" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__aar__hal_1ga9f386917359e9ba7ba75beeab01c6c4e" prot="public" static="no">
        <name>NRF_AAR_HAS_OUT_AMOUNT</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Presence of the OUT.AMOUNT register. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_aar.h" line="63" column="9" bodyfile="hal/nrf_aar.h" bodystart="63" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__aar__hal_1ga23eb4f8760495d6e41c36811f6eef78d" prot="public" static="no">
        <name>NRF_AAR_HAS_NIRK</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Presence of the NIRK register. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_aar.h" line="70" column="9" bodyfile="hal/nrf_aar.h" bodystart="70" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__aar__hal_1gab062fb25cdfe935d4af2b2f9eaac2be7" prot="public" static="no">
        <name>NRF_AAR_HAS_IRKPTR</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Presence of the IRKPTR register. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_aar.h" line="77" column="9" bodyfile="hal/nrf_aar.h" bodystart="77" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__aar__hal_1gac66d5bc051b9f5aed375effe6be32bdb" prot="public" static="no">
        <name>NRF_AAR_HAS_IN_PTR</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Presence of the IN.PTR register. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_aar.h" line="84" column="9" bodyfile="hal/nrf_aar.h" bodystart="84" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__aar__hal_1gab1690bfc510121cf80aee7894f9bd0b0" prot="public" static="no">
        <name>NRF_AAR_HAS_OUT_PTR</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Presence of the OUT.PTR register. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_aar.h" line="91" column="9" bodyfile="hal/nrf_aar.h" bodystart="91" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__aar__hal_1gaf7d9d00edadfeed10d305ce652519d58" prot="public" static="no">
        <name>NRF_AAR_HAS_ADDRPTR</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Presence of the ADDRPTR register. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_aar.h" line="98" column="9" bodyfile="hal/nrf_aar.h" bodystart="98" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__aar__hal_1gac4dd74c9360d954ae4b2809fce4f0230" prot="public" static="no">
        <name>NRF_AAR_HAS_SCRATCHPTR</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Presence of the SCRATCHPTR register. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_aar.h" line="105" column="9" bodyfile="hal/nrf_aar.h" bodystart="105" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__aar__hal_1gab2b0f58c6547b20786574c24f8aef575" prot="public" static="no">
        <name>NRF_AAR_HAS_STATUS</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Presence of the STATUS register. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_aar.h" line="112" column="9" bodyfile="hal/nrf_aar.h" bodystart="112" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__aar__hal_1ga52bc239969a37281f49a63b1aa35b60a" prot="public" static="no">
        <name>NRF_AAR_HAS_MAXRESOLVED</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Presence of the MAXRESOLVED register. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_aar.h" line="119" column="9" bodyfile="hal/nrf_aar.h" bodystart="119" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="group__nrf__aar__hal_1ga2b54270a6027e295674d60c738609b8c" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_aar_event_t</name>
        <enumvalue id="group__nrf__aar__hal_1gga2b54270a6027e295674d60c738609b8ca0e2231f6d0a859130c04e7f2b76c7d7e" prot="public">
          <name>NRF_AAR_EVENT_END</name>
          <initializer>= offsetof(NRF_AAR_Type, EVENTS_END)</initializer>
          <briefdescription>
<para>Address resolution procedure complete. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__aar__hal_1gga2b54270a6027e295674d60c738609b8ca379c6777cca6702bbc827ab22fdab76f" prot="public">
          <name>NRF_AAR_EVENT_RESOLVED</name>
          <initializer>= offsetof(NRF_AAR_Type, EVENTS_RESOLVED)</initializer>
          <briefdescription>
<para>Address resolved. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__aar__hal_1gga2b54270a6027e295674d60c738609b8ca675d8a43b78697afe41e2f7c73ed6ebb" prot="public">
          <name>NRF_AAR_EVENT_NOTRESOLVED</name>
          <initializer>= offsetof(NRF_AAR_Type, EVENTS_NOTRESOLVED)</initializer>
          <briefdescription>
<para>Address not resolved. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__aar__hal_1gga2b54270a6027e295674d60c738609b8ca6a254513062c852b324a9679b1e26955" prot="public">
          <name>NRF_AAR_EVENT_ERROR</name>
          <initializer>= offsetof(NRF_AAR_Type, EVENTS_ERROR)</initializer>
          <briefdescription>
<para>Address resolution procedure aborted due to STOP task or error. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>AAR events. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_aar.h" line="125" column="1" bodyfile="hal/nrf_aar.h" bodystart="126" bodyend="133"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__aar__hal_1gaa08e4573c93fb1cb5931737b86cbedec" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_aar_int_mask_t</name>
        <enumvalue id="group__nrf__aar__hal_1ggaa08e4573c93fb1cb5931737b86cbedeca2ade652a1cbe1fcd12a730ec221a6761" prot="public">
          <name>NRF_AAR_INT_END_MASK</name>
          <initializer>= AAR_INTENSET_END_Msk</initializer>
          <briefdescription>
<para>Interrupt on END event. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__aar__hal_1ggaa08e4573c93fb1cb5931737b86cbedeca448a400112ea26f6a85e2be874f35821" prot="public">
          <name>NRF_AAR_INT_RESOLVED_MASK</name>
          <initializer>= AAR_INTENSET_RESOLVED_Msk</initializer>
          <briefdescription>
<para>Interrupt on RESOLVED event. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__aar__hal_1ggaa08e4573c93fb1cb5931737b86cbedeca903d2e0b632846dbf65f7cc84bf94c3b" prot="public">
          <name>NRF_AAR_INT_NOTRESOLVED_MASK</name>
          <initializer>= AAR_INTENSET_NOTRESOLVED_Msk</initializer>
          <briefdescription>
<para>Interrupt on NOTRESOLVED event. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__aar__hal_1ggaa08e4573c93fb1cb5931737b86cbedecac6ff4d52d9c4ee20a00603f07a6f1715" prot="public">
          <name>NRF_AAR_INT_ERROR_MASK</name>
          <initializer>= AAR_INTENSET_ERROR_Msk</initializer>
          <briefdescription>
<para>Interrupt on NOTRESOLVED event. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>AAR interrupts. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_aar.h" line="136" column="1" bodyfile="hal/nrf_aar.h" bodystart="137" bodyend="144"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__aar__hal_1ga73565be5f5b07fec07c83af843e8935c" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_aar_error_t</name>
        <enumvalue id="group__nrf__aar__hal_1gga73565be5f5b07fec07c83af843e8935ca3060e11746f2d02975e0af4b5c682552" prot="public">
          <name>NRF_AAR_ERROR_NO_ERROR</name>
          <initializer>= AAR_ERRORSTATUS_ERRORSTATUS_NoError</initializer>
          <briefdescription>
<para>No errors have occurred. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__aar__hal_1gga73565be5f5b07fec07c83af843e8935ca8528804de3c4afa169b7c7acb49f8746" prot="public">
          <name>NRF_AAR_ERROR_PREMATURE_INPTR_END</name>
          <initializer>= AAR_ERRORSTATUS_ERRORSTATUS_PrematureInptrEnd</initializer>
          <briefdescription>
<para>End of INPTR job list before data structure was read. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__aar__hal_1gga73565be5f5b07fec07c83af843e8935ca3f069a050f2590eb500cb8669bcba795" prot="public">
          <name>NRF_AAR_ERROR_PREMATURE_OUTPTR_END</name>
          <initializer>= AAR_ERRORSTATUS_ERRORSTATUS_PrematureOutptrEnd</initializer>
          <briefdescription>
<para>End of OUTPTR job list before data structure was read. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__aar__hal_1gga73565be5f5b07fec07c83af843e8935ca27ac2446c1c4bb77d5652c7d2a81623e" prot="public">
          <name>NRF_AAR_ERROR_DMA_ERROR</name>
          <initializer>= AAR_ERRORSTATUS_ERRORSTATUS_DmaError</initializer>
          <briefdescription>
<para>Bus error during DMA access. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>AAR error status when ERROR event is generated. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_aar.h" line="148" column="1" bodyfile="hal/nrf_aar.h" bodystart="149" bodyend="154"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__aar__hal_1gace9552a8a9e5cd9853dc1f9a812926cc" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_aar_task_t</name>
        <enumvalue id="group__nrf__aar__hal_1ggace9552a8a9e5cd9853dc1f9a812926ccaeb82da7f2387762e820b3a147290fcd3" prot="public">
          <name>NRF_AAR_TASK_START</name>
          <initializer>= offsetof(NRF_AAR_Type, TASKS_START)</initializer>
          <briefdescription>
<para>Start address resolution procedure. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__aar__hal_1ggace9552a8a9e5cd9853dc1f9a812926cca494d5c0047ec7e3edb43463943289f23" prot="public">
          <name>NRF_AAR_TASK_STOP</name>
          <initializer>= offsetof(NRF_AAR_Type, TASKS_STOP)</initializer>
          <briefdescription>
<para>Stop address resolution procedure. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>AAR tasks. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_aar.h" line="158" column="1" bodyfile="hal/nrf_aar.h" bodystart="159" bodyend="162"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__nrf__aar__hal_1ga5dc9b2b7fb4504cea33740bb0e8e917c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE bool</type>
        <definition>NRF_STATIC_INLINE bool nrf_aar_event_check</definition>
        <argsstring>(NRF_AAR_Type const *p_reg, nrf_aar_event_t event)</argsstring>
        <name>nrf_aar_event_check</name>
        <param>
          <type>NRF_AAR_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__aar__hal_1ga2b54270a6027e295674d60c738609b8c" kindref="member">nrf_aar_event_t</ref></type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>Function for retrieving the state of the AAR event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event to be checked.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>Event is set. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>Event is not set. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_aar.h" line="504" column="24" bodyfile="hal/nrf_aar.h" bodystart="504" bodyend="508" declfile="hal/nrf_aar.h" declline="173" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__aar__hal_1gafba8d400db7ac564766c6ed2f9f074c9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_aar_event_clear</definition>
        <argsstring>(NRF_AAR_Type *p_reg, nrf_aar_event_t event)</argsstring>
        <name>nrf_aar_event_clear</name>
        <param>
          <type>NRF_AAR_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__aar__hal_1ga2b54270a6027e295674d60c738609b8c" kindref="member">nrf_aar_event_t</ref></type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>Function for clearing the specified AAR event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event to be cleared. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_aar.h" line="510" column="24" bodyfile="hal/nrf_aar.h" bodystart="510" bodyend="515" declfile="hal/nrf_aar.h" declline="182" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__aar__hal_1ga4557d62c32944dd45f7e2306dc61b336" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_aar_event_address_get</definition>
        <argsstring>(NRF_AAR_Type const *p_reg, nrf_aar_event_t event)</argsstring>
        <name>nrf_aar_event_address_get</name>
        <param>
          <type>NRF_AAR_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__aar__hal_1ga2b54270a6027e295674d60c738609b8c" kindref="member">nrf_aar_event_t</ref></type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>Function for getting the address of the specified AAR event register. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event to get the address of.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Address of the specified event register. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_aar.h" line="517" column="28" bodyfile="hal/nrf_aar.h" bodystart="517" bodyend="521" declfile="hal/nrf_aar.h" declline="193" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__aar__hal_1gafcfd45b54e0e162e21b753b378ea5134" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_aar_int_enable</definition>
        <argsstring>(NRF_AAR_Type *p_reg, uint32_t mask)</argsstring>
        <name>nrf_aar_int_enable</name>
        <param>
          <type>NRF_AAR_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Function for enabling the specified interrupts. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of interrupts to be enabled. Use <ref refid="group__nrf__aar__hal_1gaa08e4573c93fb1cb5931737b86cbedec" kindref="member">nrf_aar_int_mask_t</ref> values for bit masking. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_aar.h" line="523" column="24" bodyfile="hal/nrf_aar.h" bodystart="523" bodyend="526" declfile="hal/nrf_aar.h" declline="203" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__aar__hal_1ga9bf9334598fa260004b2f2081b2c60c4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_aar_int_enable_check</definition>
        <argsstring>(NRF_AAR_Type const *p_reg, uint32_t mask)</argsstring>
        <name>nrf_aar_int_enable_check</name>
        <param>
          <type>NRF_AAR_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Function for checking if the specified interrupts are enabled. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of interrupts to be checked. Use <ref refid="group__nrf__aar__hal_1gaa08e4573c93fb1cb5931737b86cbedec" kindref="member">nrf_aar_int_mask_t</ref> values for bit masking.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Mask of enabled interrupts. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_aar.h" line="528" column="28" bodyfile="hal/nrf_aar.h" bodystart="528" bodyend="531" declfile="hal/nrf_aar.h" declline="214" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__aar__hal_1ga5cd5bdde6b43bcf58cc4f74f24161b06" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_aar_int_disable</definition>
        <argsstring>(NRF_AAR_Type *p_reg, uint32_t mask)</argsstring>
        <name>nrf_aar_int_disable</name>
        <param>
          <type>NRF_AAR_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Function for disabling the specified interrupts. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of interrupts to be disabled. Use <ref refid="group__nrf__aar__hal_1gaa08e4573c93fb1cb5931737b86cbedec" kindref="member">nrf_aar_int_mask_t</ref> values for bit masking. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_aar.h" line="533" column="24" bodyfile="hal/nrf_aar.h" bodystart="533" bodyend="536" declfile="hal/nrf_aar.h" declline="223" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__aar__hal_1ga8152c8424b3de78734910a501130739a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_aar_task_trigger</definition>
        <argsstring>(NRF_AAR_Type *p_reg, nrf_aar_task_t task)</argsstring>
        <name>nrf_aar_task_trigger</name>
        <param>
          <type>NRF_AAR_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__aar__hal_1gace9552a8a9e5cd9853dc1f9a812926cc" kindref="member">nrf_aar_task_t</ref></type>
          <declname>task</declname>
        </param>
        <briefdescription>
<para>Function for starting an AAR task. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">task</parametername>
</parameternamelist>
<parameterdescription>
<para>Task to be activated. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_aar.h" line="538" column="24" bodyfile="hal/nrf_aar.h" bodystart="538" bodyend="541" declfile="hal/nrf_aar.h" declline="231" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__aar__hal_1gaf01f522277a44a52833e7c3b26046380" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_aar_task_address_get</definition>
        <argsstring>(NRF_AAR_Type const *p_reg, nrf_aar_task_t task)</argsstring>
        <name>nrf_aar_task_address_get</name>
        <param>
          <type>NRF_AAR_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__aar__hal_1gace9552a8a9e5cd9853dc1f9a812926cc" kindref="member">nrf_aar_task_t</ref></type>
          <declname>task</declname>
        </param>
        <briefdescription>
<para>Function for getting the address of a specific AAR task register. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">task</parametername>
</parameternamelist>
<parameterdescription>
<para>Requested AAR task.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Address of the specified task register. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_aar.h" line="543" column="28" bodyfile="hal/nrf_aar.h" bodystart="543" bodyend="547" declfile="hal/nrf_aar.h" declline="241" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__aar__hal_1ga66f5c0b8a07c6657ac35cbe9199e0c8e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_aar_enable</definition>
        <argsstring>(NRF_AAR_Type *p_reg)</argsstring>
        <name>nrf_aar_enable</name>
        <param>
          <type>NRF_AAR_Type *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for enabling AAR. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_aar.h" line="549" column="24" bodyfile="hal/nrf_aar.h" bodystart="549" bodyend="552" declfile="hal/nrf_aar.h" declline="249" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__aar__hal_1gabb95489d544efb64c12d7fac5fdacdd0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_aar_disable</definition>
        <argsstring>(NRF_AAR_Type *p_reg)</argsstring>
        <name>nrf_aar_disable</name>
        <param>
          <type>NRF_AAR_Type *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for disabling AAR. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_aar.h" line="554" column="24" bodyfile="hal/nrf_aar.h" bodystart="554" bodyend="557" declfile="hal/nrf_aar.h" declline="256" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__aar__hal_1ga9e011e3c4e540cf571bf908416ac6b08" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE <ref refid="group__nrf__aar__hal_1ga73565be5f5b07fec07c83af843e8935c" kindref="member">nrf_aar_error_t</ref></type>
        <definition>NRF_STATIC_INLINE nrf_aar_error_t nrf_aar_error_get</definition>
        <argsstring>(NRF_AAR_Type const *p_reg)</argsstring>
        <name>nrf_aar_error_get</name>
        <param>
          <type>NRF_AAR_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting the error status when ERROR event is generated. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>Error</parametername>
</parameternamelist>
<parameterdescription>
<para>status when the ERROR event is generated. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_aar.h" line="615" column="35" bodyfile="hal/nrf_aar.h" bodystart="615" bodyend="618" declfile="hal/nrf_aar.h" declline="266" declcolumn="35"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__aar__hal_1gaf8e565588af75d32c5d339d3d6812801" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_aar_irk_pointer_set</definition>
        <argsstring>(NRF_AAR_Type *p_reg, uint8_t const *irk_ptr)</argsstring>
        <name>nrf_aar_irk_pointer_set</name>
        <param>
          <type>NRF_AAR_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint8_t const *</type>
          <declname>irk_ptr</declname>
        </param>
        <briefdescription>
<para>Function for setting the pointer to the Identity Resolving Keys (IRK) data structure. </para>
        </briefdescription>
        <detaileddescription>
<para>The size of the provided data structure must correspond to the number of keys available. Each key occupies 16 bytes.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">irk_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the IRK data structure. Must point to the Data RAM region.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="group__nrf__aar__hal_1gac0099d874679a6cddd8304a28852391b" kindref="member">nrf_aar_irk_number_set</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_aar.h" line="560" column="24" bodyfile="hal/nrf_aar.h" bodystart="560" bodyend="563" declfile="hal/nrf_aar.h" declline="281" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__aar__hal_1ga36a92e5ba9e029bf2e3e2331cf99ff99" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint8_t const *</type>
        <definition>NRF_STATIC_INLINE uint8_t const  * nrf_aar_irk_pointer_get</definition>
        <argsstring>(NRF_AAR_Type const *p_reg)</argsstring>
        <name>nrf_aar_irk_pointer_get</name>
        <param>
          <type>NRF_AAR_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting the pointer to the Identity Resolving Keys data structure. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to the IRK data structure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_aar.h" line="565" column="34" bodyfile="hal/nrf_aar.h" bodystart="565" bodyend="568" declfile="hal/nrf_aar.h" declline="291" declcolumn="34"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__aar__hal_1gac0099d874679a6cddd8304a28852391b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_aar_irk_number_set</definition>
        <argsstring>(NRF_AAR_Type *p_reg, uint8_t irk_num)</argsstring>
        <name>nrf_aar_irk_number_set</name>
        <param>
          <type>NRF_AAR_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>irk_num</declname>
        </param>
        <briefdescription>
<para>Function for setting the number of keys available in the Identity Resolving Keys data structure. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">irk_num</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of keys available in the IRK data structure. Maximum is 16. Must correspond to the size of the provided IRK data structure.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="group__nrf__aar__hal_1gaf8e565588af75d32c5d339d3d6812801" kindref="member">nrf_aar_irk_pointer_set</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_aar.h" line="572" column="24" bodyfile="hal/nrf_aar.h" bodystart="572" bodyend="575" declfile="hal/nrf_aar.h" declline="305" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__aar__hal_1ga0e2860ce4079237a304d095b5eb5db31" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint8_t</type>
        <definition>NRF_STATIC_INLINE uint8_t nrf_aar_irk_number_get</definition>
        <argsstring>(NRF_AAR_Type const *p_reg)</argsstring>
        <name>nrf_aar_irk_number_get</name>
        <param>
          <type>NRF_AAR_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting the number of keys available in the Identity Resolving Keys data structure. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Number of keys in the IRK data structure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_aar.h" line="577" column="27" bodyfile="hal/nrf_aar.h" bodystart="577" bodyend="580" declfile="hal/nrf_aar.h" declline="315" declcolumn="27"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__aar__hal_1gabab7b798632a61578d9782aa2bd8d761" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_aar_maxresolved_set</definition>
        <argsstring>(NRF_AAR_Type *p_reg, uint16_t maxresolved)</argsstring>
        <name>nrf_aar_maxresolved_set</name>
        <param>
          <type>NRF_AAR_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>maxresolved</declname>
        </param>
        <briefdescription>
<para>Function for setting maximum number of Identity Resolving Keys to resolve. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">maxresolved</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum number of Identity Resolving Keys to resolve.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="group__nrf__aar__hal_1gaf8e565588af75d32c5d339d3d6812801" kindref="member">nrf_aar_irk_pointer_set</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_aar.h" line="622" column="24" bodyfile="hal/nrf_aar.h" bodystart="622" bodyend="625" declfile="hal/nrf_aar.h" declline="327" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__aar__hal_1gab83173f5dc636802e1a13b62b2fe22c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint16_t</type>
        <definition>NRF_STATIC_INLINE uint16_t nrf_aar_maxresolved_get</definition>
        <argsstring>(NRF_AAR_Type const *p_reg)</argsstring>
        <name>nrf_aar_maxresolved_get</name>
        <param>
          <type>NRF_AAR_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting maximum number of Identity Resolving Keys to resolve. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Maximum number of Identity Resolving Keys to resolve. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_aar.h" line="627" column="28" bodyfile="hal/nrf_aar.h" bodystart="627" bodyend="630" declfile="hal/nrf_aar.h" declline="336" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__aar__hal_1gad809805df5a951cb32fb417e8a322328" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_aar_addr_pointer_set</definition>
        <argsstring>(NRF_AAR_Type *p_reg, uint8_t const *addr_ptr)</argsstring>
        <name>nrf_aar_addr_pointer_set</name>
        <param>
          <type>NRF_AAR_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint8_t const *</type>
          <declname>addr_ptr</declname>
        </param>
        <briefdescription>
<para>Function for setting the pointer to the resolvable address. </para>
        </briefdescription>
        <detaileddescription>
<para>The resolvable address must consist of 6 bytes.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">addr_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the address to resolve using the available IRK keys. Must point to the Data RAM region. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_aar.h" line="584" column="24" bodyfile="hal/nrf_aar.h" bodystart="584" bodyend="587" declfile="hal/nrf_aar.h" declline="349" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__aar__hal_1gabc02cea551747babb2c8237a9151adb0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint8_t const *</type>
        <definition>NRF_STATIC_INLINE uint8_t const  * nrf_aar_addr_pointer_get</definition>
        <argsstring>(NRF_AAR_Type const *p_reg)</argsstring>
        <name>nrf_aar_addr_pointer_get</name>
        <param>
          <type>NRF_AAR_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting the pointer to the resolvable address. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to the address to resolve. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_aar.h" line="589" column="34" bodyfile="hal/nrf_aar.h" bodystart="589" bodyend="592" declfile="hal/nrf_aar.h" declline="358" declcolumn="34"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__aar__hal_1gabb40485b0656ab175de43a53fffdf19c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_aar_out_ptr_set</definition>
        <argsstring>(NRF_AAR_Type *p_reg, nrf_vdma_job_t const *p_job)</argsstring>
        <name>nrf_aar_out_ptr_set</name>
        <param>
          <type>NRF_AAR_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="structnrf__vdma__job__t" kindref="compound">nrf_vdma_job_t</ref> const *</type>
          <declname>p_job</declname>
        </param>
        <briefdescription>
<para>Function for setting the pointer to a job list containing description to store resolved addresses. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">p_job</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a job list. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_aar.h" line="647" column="24" bodyfile="hal/nrf_aar.h" bodystart="647" bodyend="651" declfile="hal/nrf_aar.h" declline="369" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__aar__hal_1gaa91491ea81c0ba19b80da0ac5c6873e2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE <ref refid="structnrf__vdma__job__t" kindref="compound">nrf_vdma_job_t</ref> *</type>
        <definition>NRF_STATIC_INLINE nrf_vdma_job_t * nrf_aar_out_ptr_get</definition>
        <argsstring>(NRF_AAR_Type const *p_reg)</argsstring>
        <name>nrf_aar_out_ptr_get</name>
        <param>
          <type>NRF_AAR_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting the pointer to a job list containing description to store resolved addresses. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to the job list. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_aar.h" line="653" column="35" bodyfile="hal/nrf_aar.h" bodystart="653" bodyend="656" declfile="hal/nrf_aar.h" declline="380" declcolumn="35"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__aar__hal_1ga05f842e5a390c892a661becfa305423f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_aar_in_ptr_set</definition>
        <argsstring>(NRF_AAR_Type *p_reg, nrf_vdma_job_t const *p_job)</argsstring>
        <name>nrf_aar_in_ptr_set</name>
        <param>
          <type>NRF_AAR_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="structnrf__vdma__job__t" kindref="compound">nrf_vdma_job_t</ref> const *</type>
          <declname>p_job</declname>
        </param>
        <briefdescription>
<para>Function for setting the pointer to a job list containing both the Hash and Prand parts of the private resolvable address (DEVICEADDR) field from the Bluetooth packet, and a number of Identity Resolving Keys (IRK). </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">p_job</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a job list. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_aar.h" line="634" column="24" bodyfile="hal/nrf_aar.h" bodystart="634" bodyend="638" declfile="hal/nrf_aar.h" declline="392" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__aar__hal_1gaf2db45a7d81712eedb4d884146edc0e1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE <ref refid="structnrf__vdma__job__t" kindref="compound">nrf_vdma_job_t</ref> *</type>
        <definition>NRF_STATIC_INLINE nrf_vdma_job_t * nrf_aar_in_ptr_get</definition>
        <argsstring>(NRF_AAR_Type const *p_reg)</argsstring>
        <name>nrf_aar_in_ptr_get</name>
        <param>
          <type>NRF_AAR_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting the pointer to a job list containing both the Hash and Prand parts of the private resolvable address (DEVICEADDR) field from the Bluetooth packet, and a number of Identity Resolving Keys (IRK). </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to the job list. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_aar.h" line="640" column="35" bodyfile="hal/nrf_aar.h" bodystart="640" bodyend="643" declfile="hal/nrf_aar.h" declline="404" declcolumn="35"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__aar__hal_1ga56141db149988fbee43b694d7001b826" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_aar_out_amount_get</definition>
        <argsstring>(NRF_AAR_Type const *p_reg)</argsstring>
        <name>nrf_aar_out_amount_get</name>
        <param>
          <type>NRF_AAR_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting number of bytes available in the output data, not including the job list structure. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Number of bytes available in the output data. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_aar.h" line="660" column="28" bodyfile="hal/nrf_aar.h" bodystart="660" bodyend="663" declfile="hal/nrf_aar.h" declline="416" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__aar__hal_1gaa8422987f69cc49148b03120e6453bca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_aar_scratch_pointer_set</definition>
        <argsstring>(NRF_AAR_Type *p_reg, uint8_t *scratch_ptr)</argsstring>
        <name>nrf_aar_scratch_pointer_set</name>
        <param>
          <type>NRF_AAR_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>scratch_ptr</declname>
        </param>
        <briefdescription>
<para>Function for setting the pointer to the scratch data area. </para>
        </briefdescription>
        <detaileddescription>
<para>The scratch data area is used for temporary storage during the address resolution procedure. A space of minimum 3 bytes must be reserved for the scratch data area.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">scratch_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the scratch data area. Must point to the Data RAM region. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_aar.h" line="596" column="24" bodyfile="hal/nrf_aar.h" bodystart="596" bodyend="599" declfile="hal/nrf_aar.h" declline="429" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__aar__hal_1gaec8e079caf49e764291fc438ce1d35f1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint8_t *</type>
        <definition>NRF_STATIC_INLINE uint8_t * nrf_aar_scratch_pointer_get</definition>
        <argsstring>(NRF_AAR_Type const *p_reg)</argsstring>
        <name>nrf_aar_scratch_pointer_get</name>
        <param>
          <type>NRF_AAR_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting the pointer to the scratch data area. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to the scratch data area. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_aar.h" line="601" column="28" bodyfile="hal/nrf_aar.h" bodystart="601" bodyend="604" declfile="hal/nrf_aar.h" declline="438" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__aar__hal_1ga418c1cb662b244e4a325394de935b1e3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint8_t</type>
        <definition>NRF_STATIC_INLINE uint8_t nrf_aar_resolution_status_get</definition>
        <argsstring>(NRF_AAR_Type const *p_reg)</argsstring>
        <name>nrf_aar_resolution_status_get</name>
        <param>
          <type>NRF_AAR_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting the index of the Identity Resolving Key that was used the last time an address was resolved. </para>
        </briefdescription>
        <detaileddescription>
<para>This function can be used to get the IRK index that matched the resolvable address, provided that <ref refid="group__nrf__aar__hal_1gga2b54270a6027e295674d60c738609b8ca379c6777cca6702bbc827ab22fdab76f" kindref="member">NRF_AAR_EVENT_RESOLVED</ref> occured. Otherwise, it will return the index of the last IRK stored in the IRK data structure.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The index of the IRK that was used the last time an address was resolved. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_aar.h" line="608" column="27" bodyfile="hal/nrf_aar.h" bodystart="608" bodyend="611" declfile="hal/nrf_aar.h" declline="454" declcolumn="27"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__aar__hal_1ga781416b1fa504ba1b2dd52b1c7852208" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_aar_subscribe_set</definition>
        <argsstring>(NRF_AAR_Type *p_reg, nrf_aar_task_t task, uint8_t channel)</argsstring>
        <name>nrf_aar_subscribe_set</name>
        <param>
          <type>NRF_AAR_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__aar__hal_1gace9552a8a9e5cd9853dc1f9a812926cc" kindref="member">nrf_aar_task_t</ref></type>
          <declname>task</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>channel</declname>
        </param>
        <briefdescription>
<para>Function for setting the subscribe configuration for a given AAR task. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">task</parametername>
</parameternamelist>
<parameterdescription>
<para>Task for which to set the configuration. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">channel</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel through which to subscribe events. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_aar.h" line="466" column="24" declfile="hal/nrf_aar.h" declline="466" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__aar__hal_1gad11996805d9487a5daf5822987b926eb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_aar_subscribe_clear</definition>
        <argsstring>(NRF_AAR_Type *p_reg, nrf_aar_task_t task)</argsstring>
        <name>nrf_aar_subscribe_clear</name>
        <param>
          <type>NRF_AAR_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__aar__hal_1gace9552a8a9e5cd9853dc1f9a812926cc" kindref="member">nrf_aar_task_t</ref></type>
          <declname>task</declname>
        </param>
        <briefdescription>
<para>Function for clearing the subscribe configuration for a given AAR task. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">task</parametername>
</parameternamelist>
<parameterdescription>
<para>Task for which to clear the configuration. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_aar.h" line="477" column="24" declfile="hal/nrf_aar.h" declline="477" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__aar__hal_1gaeab128354f4b38f8b1faedf7aaa97f44" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_aar_publish_set</definition>
        <argsstring>(NRF_AAR_Type *p_reg, nrf_aar_event_t event, uint8_t channel)</argsstring>
        <name>nrf_aar_publish_set</name>
        <param>
          <type>NRF_AAR_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__aar__hal_1ga2b54270a6027e295674d60c738609b8c" kindref="member">nrf_aar_event_t</ref></type>
          <declname>event</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>channel</declname>
        </param>
        <briefdescription>
<para>Function for setting the publish configuration for a given AAR event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event for which to set the configuration. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">channel</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel through which to publish the event. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_aar.h" line="488" column="24" declfile="hal/nrf_aar.h" declline="488" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__aar__hal_1ga08deaa821f25ff3f015473c70235c2f5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_aar_publish_clear</definition>
        <argsstring>(NRF_AAR_Type *p_reg, nrf_aar_event_t event)</argsstring>
        <name>nrf_aar_publish_clear</name>
        <param>
          <type>NRF_AAR_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__aar__hal_1ga2b54270a6027e295674d60c738609b8c" kindref="member">nrf_aar_event_t</ref></type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>Function for clearing the publish configuration for a given AAR event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event for which to clear the configuration. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_aar.h" line="499" column="24" declfile="hal/nrf_aar.h" declline="499" declcolumn="24"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2019<sp/>-<sp/>2024,<sp/>Nordic<sp/>Semiconductor<sp/>ASA</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>All<sp/>rights<sp/>reserved.</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>SPDX-License-Identifier:<sp/>BSD-3-Clause</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions<sp/>are<sp/>met:</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>1.<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright<sp/>notice,<sp/>this</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>2.<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the<sp/>distribution.</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/>3.<sp/>Neither<sp/>the<sp/>name<sp/>of<sp/>the<sp/>copyright<sp/>holder<sp/>nor<sp/>the<sp/>names<sp/>of<sp/>its</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>contributors<sp/>may<sp/>be<sp/>used<sp/>to<sp/>endorse<sp/>or<sp/>promote<sp/>products<sp/>derived<sp/>from<sp/>this</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>software<sp/>without<sp/>specific<sp/>prior<sp/>written<sp/>permission.</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>COPYRIGHT<sp/>HOLDERS<sp/>AND<sp/>CONTRIBUTORS<sp/>&quot;AS<sp/>IS&quot;</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/>AND<sp/>ANY<sp/>EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>THE</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*<sp/>ARE<sp/>DISCLAIMED.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>COPYRIGHT<sp/>HOLDER<sp/>OR<sp/>CONTRIBUTORS<sp/>BE</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,<sp/>SPECIAL,<sp/>EXEMPLARY,<sp/>OR</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>PROCUREMENT<sp/>OF</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>*<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,<sp/>DATA,<sp/>OR<sp/>PROFITS;<sp/>OR<sp/>BUSINESS</highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/>*<sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY<sp/>THEORY<sp/>OF<sp/>LIABILITY,<sp/>WHETHER<sp/>IN</highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/>*<sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR<sp/>OTHERWISE)</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/>*<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE<sp/>OF<sp/>THIS<sp/>SOFTWARE,<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/>*<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight></codeline>
<codeline lineno="32"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>NRF_AAR_H__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_AAR_H__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;nrfx.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>EASYVDMA_PRESENT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;helpers/nrf_vdma.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="46"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="47"><highlight class="comment"><sp/>*<sp/>@defgroup<sp/>nrf_aar_hal<sp/>AAR<sp/>HAL</highlight></codeline>
<codeline lineno="48"><highlight class="comment"><sp/>*<sp/>@{</highlight></codeline>
<codeline lineno="49"><highlight class="comment"><sp/>*<sp/>@ingroup<sp/>nrf_aar</highlight></codeline>
<codeline lineno="50"><highlight class="comment"><sp/>*<sp/>@brief<sp/><sp/><sp/>Hardware<sp/>access<sp/>layer<sp/>for<sp/>managing<sp/>the<sp/>Accelerated<sp/>Address<sp/>Resolver<sp/>(AAR)<sp/>peripheral.</highlight></codeline>
<codeline lineno="51"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(AAR_EVENTS_ERROR_EVENTS_ERROR_Msk)<sp/>||<sp/>defined(AAR_INTENSET_ERROR_Msk)<sp/>||<sp/>\</highlight></codeline>
<codeline lineno="54"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>defined(AAR_ERRORSTATUS_ERRORSTATUS_Msk)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="55"><highlight class="comment">/**<sp/>@brief<sp/>Presence<sp/>of<sp/>the<sp/>ERROR<sp/>event<sp/>and<sp/>ERRORSTATUS<sp/>register.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_AAR_HAS_ERROR<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_AAR_HAS_ERROR<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(AAR_OUT_AMOUNT_AMOUNT_Msk)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="62"><highlight class="comment">/**<sp/>@brief<sp/>Presence<sp/>of<sp/>the<sp/>OUT.AMOUNT<sp/>register.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_AAR_HAS_OUT_AMOUNT<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_AAR_HAS_OUT_AMOUNT<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(AAR_NIRK_NIRK_Msk)<sp/>||<sp/>defined(NRF51)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="69"><highlight class="comment">/**<sp/>@brief<sp/>Presence<sp/>of<sp/>the<sp/>NIRK<sp/>register.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_AAR_HAS_NIRK<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_AAR_HAS_NIRK<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(AAR_IRKPTR_IRKPTR_Msk)<sp/>||<sp/>defined(NRF51)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="76"><highlight class="comment">/**<sp/>@brief<sp/>Presence<sp/>of<sp/>the<sp/>IRKPTR<sp/>register.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_AAR_HAS_IRKPTR<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_AAR_HAS_IRKPTR<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(AAR_IN_PTR_PTR_Msk)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="83"><highlight class="comment">/**<sp/>@brief<sp/>Presence<sp/>of<sp/>the<sp/>IN.PTR<sp/>register.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_AAR_HAS_IN_PTR<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_AAR_HAS_IN_PTR<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(AAR_OUT_PTR_PTR_Msk)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="90"><highlight class="comment">/**<sp/>@brief<sp/>Presence<sp/>of<sp/>the<sp/>OUT.PTR<sp/>register.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_AAR_HAS_OUT_PTR<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_AAR_HAS_OUT_PTR<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(AAR_ADDRPTR_ADDRPTR_Msk)<sp/>||<sp/>defined(NRF51)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="97"><highlight class="comment">/**<sp/>@brief<sp/>Presence<sp/>of<sp/>the<sp/>ADDRPTR<sp/>register.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_AAR_HAS_ADDRPTR<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_AAR_HAS_ADDRPTR<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(AAR_SCRATCHPTR_SCRATCHPTR_Msk)<sp/>||<sp/>defined(NRF51)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="104"><highlight class="comment">/**<sp/>@brief<sp/>Presence<sp/>of<sp/>the<sp/>SCRATCHPTR<sp/>register.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_AAR_HAS_SCRATCHPTR<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_AAR_HAS_SCRATCHPTR<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(AAR_STATUS_STATUS_Msk)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="111"><highlight class="comment">/**<sp/>@brief<sp/>Presence<sp/>of<sp/>the<sp/>STATUS<sp/>register.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_AAR_HAS_STATUS<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_AAR_HAS_STATUS<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(AAR_MAXRESOLVED_MAXRESOLVED_Msk)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="118"><highlight class="comment">/**<sp/>@brief<sp/>Presence<sp/>of<sp/>the<sp/>MAXRESOLVED<sp/>register.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_AAR_HAS_MAXRESOLVED<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_AAR_HAS_MAXRESOLVED<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="124"><highlight class="comment">/**<sp/>@brief<sp/>AAR<sp/>events.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal">{</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__aar__hal_1gga2b54270a6027e295674d60c738609b8ca0e2231f6d0a859130c04e7f2b76c7d7e" kindref="member">NRF_AAR_EVENT_END</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_AAR_Type,<sp/>EVENTS_END),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Address<sp/>resolution<sp/>procedure<sp/>complete.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__aar__hal_1gga2b54270a6027e295674d60c738609b8ca379c6777cca6702bbc827ab22fdab76f" kindref="member">NRF_AAR_EVENT_RESOLVED</ref><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_AAR_Type,<sp/>EVENTS_RESOLVED),<sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Address<sp/>resolved.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__aar__hal_1gga2b54270a6027e295674d60c738609b8ca675d8a43b78697afe41e2f7c73ed6ebb" kindref="member">NRF_AAR_EVENT_NOTRESOLVED</ref><sp/>=<sp/>offsetof(NRF_AAR_Type,<sp/>EVENTS_NOTRESOLVED),<sp/></highlight><highlight class="comment">///&lt;<sp/>Address<sp/>not<sp/>resolved.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_AAR_HAS_ERROR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__aar__hal_1gga2b54270a6027e295674d60c738609b8ca6a254513062c852b324a9679b1e26955" kindref="member">NRF_AAR_EVENT_ERROR</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_AAR_Type,<sp/>EVENTS_ERROR),<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Address<sp/>resolution<sp/>procedure<sp/>aborted<sp/>due<sp/>to<sp/>STOP<sp/>task<sp/>or<sp/>error.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal">}<sp/><ref refid="group__nrf__aar__hal_1ga2b54270a6027e295674d60c738609b8c" kindref="member">nrf_aar_event_t</ref>;</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="135"><highlight class="comment">/**<sp/>@brief<sp/>AAR<sp/>interrupts.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal">{</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__aar__hal_1ggaa08e4573c93fb1cb5931737b86cbedeca2ade652a1cbe1fcd12a730ec221a6761" kindref="member">NRF_AAR_INT_END_MASK</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>AAR_INTENSET_END_Msk,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Interrupt<sp/>on<sp/>END<sp/>event.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__aar__hal_1ggaa08e4573c93fb1cb5931737b86cbedeca448a400112ea26f6a85e2be874f35821" kindref="member">NRF_AAR_INT_RESOLVED_MASK</ref><sp/><sp/><sp/><sp/>=<sp/>AAR_INTENSET_RESOLVED_Msk,<sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Interrupt<sp/>on<sp/>RESOLVED<sp/>event.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__aar__hal_1ggaa08e4573c93fb1cb5931737b86cbedeca903d2e0b632846dbf65f7cc84bf94c3b" kindref="member">NRF_AAR_INT_NOTRESOLVED_MASK</ref><sp/>=<sp/>AAR_INTENSET_NOTRESOLVED_Msk,<sp/></highlight><highlight class="comment">///&lt;<sp/>Interrupt<sp/>on<sp/>NOTRESOLVED<sp/>event.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_AAR_HAS_ERROR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__aar__hal_1ggaa08e4573c93fb1cb5931737b86cbedecac6ff4d52d9c4ee20a00603f07a6f1715" kindref="member">NRF_AAR_INT_ERROR_MASK</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>AAR_INTENSET_ERROR_Msk,<sp/></highlight><highlight class="comment">///&lt;<sp/>Interrupt<sp/>on<sp/>NOTRESOLVED<sp/>event.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal">}<sp/><ref refid="group__nrf__aar__hal_1gaa08e4573c93fb1cb5931737b86cbedec" kindref="member">nrf_aar_int_mask_t</ref>;</highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_AAR_HAS_ERROR</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="147"><highlight class="comment">/**<sp/>@brief<sp/>AAR<sp/>error<sp/>status<sp/>when<sp/>ERROR<sp/>event<sp/>is<sp/>generated.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal">{</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__aar__hal_1gga73565be5f5b07fec07c83af843e8935ca3060e11746f2d02975e0af4b5c682552" kindref="member">NRF_AAR_ERROR_NO_ERROR</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>AAR_ERRORSTATUS_ERRORSTATUS_NoError,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>No<sp/>errors<sp/>have<sp/>occurred.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__aar__hal_1gga73565be5f5b07fec07c83af843e8935ca8528804de3c4afa169b7c7acb49f8746" kindref="member">NRF_AAR_ERROR_PREMATURE_INPTR_END</ref><sp/><sp/>=<sp/>AAR_ERRORSTATUS_ERRORSTATUS_PrematureInptrEnd,<sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>End<sp/>of<sp/>INPTR<sp/>job<sp/>list<sp/>before<sp/>data<sp/>structure<sp/>was<sp/>read.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__aar__hal_1gga73565be5f5b07fec07c83af843e8935ca3f069a050f2590eb500cb8669bcba795" kindref="member">NRF_AAR_ERROR_PREMATURE_OUTPTR_END</ref><sp/>=<sp/>AAR_ERRORSTATUS_ERRORSTATUS_PrematureOutptrEnd,<sp/></highlight><highlight class="comment">///&lt;<sp/>End<sp/>of<sp/>OUTPTR<sp/>job<sp/>list<sp/>before<sp/>data<sp/>structure<sp/>was<sp/>read.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__aar__hal_1gga73565be5f5b07fec07c83af843e8935ca27ac2446c1c4bb77d5652c7d2a81623e" kindref="member">NRF_AAR_ERROR_DMA_ERROR</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>AAR_ERRORSTATUS_ERRORSTATUS_DmaError,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Bus<sp/>error<sp/>during<sp/>DMA<sp/>access.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal">}<sp/><ref refid="group__nrf__aar__hal_1ga73565be5f5b07fec07c83af843e8935c" kindref="member">nrf_aar_error_t</ref>;</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="157"><highlight class="comment">/**<sp/>@brief<sp/>AAR<sp/>tasks.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal">{</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__aar__hal_1ggace9552a8a9e5cd9853dc1f9a812926ccaeb82da7f2387762e820b3a147290fcd3" kindref="member">NRF_AAR_TASK_START</ref><sp/>=<sp/>offsetof(NRF_AAR_Type,<sp/>TASKS_START),<sp/></highlight><highlight class="comment">///&lt;<sp/>Start<sp/>address<sp/>resolution<sp/>procedure.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__aar__hal_1ggace9552a8a9e5cd9853dc1f9a812926cca494d5c0047ec7e3edb43463943289f23" kindref="member">NRF_AAR_TASK_STOP</ref><sp/><sp/>=<sp/>offsetof(NRF_AAR_Type,<sp/>TASKS_STOP),<sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Stop<sp/>address<sp/>resolution<sp/>procedure.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal">}<sp/><ref refid="group__nrf__aar__hal_1gace9552a8a9e5cd9853dc1f9a812926cc" kindref="member">nrf_aar_task_t</ref>;</highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="164"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="165"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>retrieving<sp/>the<sp/>state<sp/>of<sp/>the<sp/>AAR<sp/>event.</highlight></codeline>
<codeline lineno="166"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="167"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="168"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>event<sp/>Event<sp/>to<sp/>be<sp/>checked.</highlight></codeline>
<codeline lineno="169"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="170"><highlight class="comment"><sp/>*<sp/>@retval<sp/>true<sp/><sp/>Event<sp/>is<sp/>set.</highlight></codeline>
<codeline lineno="171"><highlight class="comment"><sp/>*<sp/>@retval<sp/>false<sp/>Event<sp/>is<sp/>not<sp/>set.</highlight></codeline>
<codeline lineno="172"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrf__aar__hal_1ga5dc9b2b7fb4504cea33740bb0e8e917c" kindref="member">nrf_aar_event_check</ref>(NRF_AAR_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__aar__hal_1ga2b54270a6027e295674d60c738609b8c" kindref="member">nrf_aar_event_t</ref><sp/><sp/><sp/><sp/><sp/><sp/>event);</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="176"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="177"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>clearing<sp/>the<sp/>specified<sp/>AAR<sp/>event.</highlight></codeline>
<codeline lineno="178"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="179"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="180"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>event<sp/>Event<sp/>to<sp/>be<sp/>cleared.</highlight></codeline>
<codeline lineno="181"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__aar__hal_1gafba8d400db7ac564766c6ed2f9f074c9" kindref="member">nrf_aar_event_clear</ref>(NRF_AAR_Type<sp/>*<sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__aar__hal_1ga2b54270a6027e295674d60c738609b8c" kindref="member">nrf_aar_event_t</ref><sp/>event);</highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="185"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="186"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>the<sp/>address<sp/>of<sp/>the<sp/>specified<sp/>AAR<sp/>event<sp/>register.</highlight></codeline>
<codeline lineno="187"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="188"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="189"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>event<sp/>Event<sp/>to<sp/>get<sp/>the<sp/>address<sp/>of.</highlight></codeline>
<codeline lineno="190"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="191"><highlight class="comment"><sp/>*<sp/>@return<sp/>Address<sp/>of<sp/>the<sp/>specified<sp/>event<sp/>register.</highlight></codeline>
<codeline lineno="192"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__aar__hal_1ga4557d62c32944dd45f7e2306dc61b336" kindref="member">nrf_aar_event_address_get</ref>(NRF_AAR_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__aar__hal_1ga2b54270a6027e295674d60c738609b8c" kindref="member">nrf_aar_event_t</ref><sp/><sp/><sp/><sp/><sp/><sp/>event);</highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="196"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="197"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>enabling<sp/>the<sp/>specified<sp/>interrupts.</highlight></codeline>
<codeline lineno="198"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="199"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="200"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>mask<sp/><sp/>Mask<sp/>of<sp/>interrupts<sp/>to<sp/>be<sp/>enabled.</highlight></codeline>
<codeline lineno="201"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Use<sp/>@ref<sp/>nrf_aar_int_mask_t<sp/>values<sp/>for<sp/>bit<sp/>masking.</highlight></codeline>
<codeline lineno="202"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__aar__hal_1gafcfd45b54e0e162e21b753b378ea5134" kindref="member">nrf_aar_int_enable</ref>(NRF_AAR_Type<sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>mask);</highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="205"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="206"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>checking<sp/>if<sp/>the<sp/>specified<sp/>interrupts<sp/>are<sp/>enabled.</highlight></codeline>
<codeline lineno="207"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="208"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="209"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>mask<sp/><sp/>Mask<sp/>of<sp/>interrupts<sp/>to<sp/>be<sp/>checked.</highlight></codeline>
<codeline lineno="210"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Use<sp/>@ref<sp/>nrf_aar_int_mask_t<sp/>values<sp/>for<sp/>bit<sp/>masking.</highlight></codeline>
<codeline lineno="211"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="212"><highlight class="comment"><sp/>*<sp/>@return<sp/>Mask<sp/>of<sp/>enabled<sp/>interrupts.</highlight></codeline>
<codeline lineno="213"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__aar__hal_1ga9bf9334598fa260004b2f2081b2c60c4" kindref="member">nrf_aar_int_enable_check</ref>(NRF_AAR_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>mask);</highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="216"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="217"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>disabling<sp/>the<sp/>specified<sp/>interrupts.</highlight></codeline>
<codeline lineno="218"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="219"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="220"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>mask<sp/><sp/>Mask<sp/>of<sp/>interrupts<sp/>to<sp/>be<sp/>disabled.</highlight></codeline>
<codeline lineno="221"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Use<sp/>@ref<sp/>nrf_aar_int_mask_t<sp/>values<sp/>for<sp/>bit<sp/>masking.</highlight></codeline>
<codeline lineno="222"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__aar__hal_1ga5cd5bdde6b43bcf58cc4f74f24161b06" kindref="member">nrf_aar_int_disable</ref>(NRF_AAR_Type<sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>mask);</highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="225"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="226"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>starting<sp/>an<sp/>AAR<sp/>task.</highlight></codeline>
<codeline lineno="227"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="228"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="229"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>task<sp/><sp/>Task<sp/>to<sp/>be<sp/>activated.</highlight></codeline>
<codeline lineno="230"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__aar__hal_1ga8152c8424b3de78734910a501130739a" kindref="member">nrf_aar_task_trigger</ref>(NRF_AAR_Type<sp/>*<sp/>p_reg,<sp/><ref refid="group__nrf__aar__hal_1gace9552a8a9e5cd9853dc1f9a812926cc" kindref="member">nrf_aar_task_t</ref><sp/>task);</highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="233"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="234"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>the<sp/>address<sp/>of<sp/>a<sp/>specific<sp/>AAR<sp/>task<sp/>register.</highlight></codeline>
<codeline lineno="235"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="236"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="237"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>task<sp/><sp/>Requested<sp/>AAR<sp/>task.</highlight></codeline>
<codeline lineno="238"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="239"><highlight class="comment"><sp/>*<sp/>@return<sp/>Address<sp/>of<sp/>the<sp/>specified<sp/>task<sp/>register.</highlight></codeline>
<codeline lineno="240"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__aar__hal_1gaf01f522277a44a52833e7c3b26046380" kindref="member">nrf_aar_task_address_get</ref>(NRF_AAR_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__aar__hal_1gace9552a8a9e5cd9853dc1f9a812926cc" kindref="member">nrf_aar_task_t</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>task);</highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="244"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="245"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>enabling<sp/>AAR.</highlight></codeline>
<codeline lineno="246"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="247"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="248"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__aar__hal_1ga66f5c0b8a07c6657ac35cbe9199e0c8e" kindref="member">nrf_aar_enable</ref>(NRF_AAR_Type<sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="251"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="252"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>disabling<sp/>AAR.</highlight></codeline>
<codeline lineno="253"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="254"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="255"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__aar__hal_1gabb95489d544efb64c12d7fac5fdacdd0" kindref="member">nrf_aar_disable</ref>(NRF_AAR_Type<sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_AAR_HAS_ERROR</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="259"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="260"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>the<sp/>error<sp/>status<sp/>when<sp/>ERROR<sp/>event<sp/>is<sp/>generated.</highlight></codeline>
<codeline lineno="261"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="262"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="263"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="264"><highlight class="comment"><sp/>*<sp/>@retval<sp/>Error<sp/>status<sp/>when<sp/>the<sp/>ERROR<sp/>event<sp/>is<sp/>generated.</highlight></codeline>
<codeline lineno="265"><highlight class="comment"><sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal">NRF_STATIC_INLINE<sp/><ref refid="group__nrf__aar__hal_1ga73565be5f5b07fec07c83af843e8935c" kindref="member">nrf_aar_error_t</ref><sp/><ref refid="group__nrf__aar__hal_1ga9e011e3c4e540cf571bf908416ac6b08" kindref="member">nrf_aar_error_get</ref>(NRF_AAR_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRF_AAR_HAS_ERROR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_AAR_HAS_IRKPTR</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="270"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="271"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>the<sp/>pointer<sp/>to<sp/>the<sp/>Identity<sp/>Resolving<sp/>Keys<sp/>(IRK)<sp/>data<sp/>structure.</highlight></codeline>
<codeline lineno="272"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="273"><highlight class="comment"><sp/>*<sp/>The<sp/>size<sp/>of<sp/>the<sp/>provided<sp/>data<sp/>structure<sp/>must<sp/>correspond<sp/>to<sp/>the<sp/>number<sp/>of<sp/>keys<sp/>available.</highlight></codeline>
<codeline lineno="274"><highlight class="comment"><sp/>*<sp/>Each<sp/>key<sp/>occupies<sp/>16<sp/>bytes.</highlight></codeline>
<codeline lineno="275"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="276"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="277"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>irk_ptr<sp/>Pointer<sp/>to<sp/>the<sp/>IRK<sp/>data<sp/>structure.<sp/>Must<sp/>point<sp/>to<sp/>the<sp/>Data<sp/>RAM<sp/>region.</highlight></codeline>
<codeline lineno="278"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="279"><highlight class="comment"><sp/>*<sp/>@sa<sp/>nrf_aar_irk_number_set</highlight></codeline>
<codeline lineno="280"><highlight class="comment"><sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__aar__hal_1gaf8e565588af75d32c5d339d3d6812801" kindref="member">nrf_aar_irk_pointer_set</ref>(NRF_AAR_Type<sp/>*<sp/>p_reg,<sp/>uint8_t<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>irk_ptr);</highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="283"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="284"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>the<sp/>pointer<sp/>to<sp/>the<sp/>Identity<sp/>Resolving<sp/>Keys</highlight></codeline>
<codeline lineno="285"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data<sp/>structure.</highlight></codeline>
<codeline lineno="286"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="287"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="288"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="289"><highlight class="comment"><sp/>*<sp/>@return<sp/>Pointer<sp/>to<sp/>the<sp/>IRK<sp/>data<sp/>structure.</highlight></codeline>
<codeline lineno="290"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint8_t<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/><ref refid="group__nrf__aar__hal_1ga36a92e5ba9e029bf2e3e2331cf99ff99" kindref="member">nrf_aar_irk_pointer_get</ref>(NRF_AAR_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRF_AAR_HAS_IRKPTR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_AAR_HAS_NIRK</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="295"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="296"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>the<sp/>number<sp/>of<sp/>keys<sp/>available<sp/>in<sp/>the<sp/>Identity<sp/>Resolving<sp/>Keys</highlight></codeline>
<codeline lineno="297"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data<sp/>structure.</highlight></codeline>
<codeline lineno="298"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="299"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="300"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>irk_num<sp/>Number<sp/>of<sp/>keys<sp/>available<sp/>in<sp/>the<sp/>IRK<sp/>data<sp/>structure.<sp/>Maximum<sp/>is<sp/>16.</highlight></codeline>
<codeline lineno="301"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Must<sp/>correspond<sp/>to<sp/>the<sp/>size<sp/>of<sp/>the<sp/>provided<sp/>IRK<sp/>data<sp/>structure.</highlight></codeline>
<codeline lineno="302"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="303"><highlight class="comment"><sp/>*<sp/>@sa<sp/>nrf_aar_irk_pointer_set</highlight></codeline>
<codeline lineno="304"><highlight class="comment"><sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__aar__hal_1gac0099d874679a6cddd8304a28852391b" kindref="member">nrf_aar_irk_number_set</ref>(NRF_AAR_Type<sp/>*<sp/>p_reg,<sp/>uint8_t<sp/>irk_num);</highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="307"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="308"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>the<sp/>number<sp/>of<sp/>keys<sp/>available<sp/>in<sp/>the<sp/>Identity<sp/>Resolving<sp/>Keys</highlight></codeline>
<codeline lineno="309"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data<sp/>structure.</highlight></codeline>
<codeline lineno="310"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="311"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="312"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="313"><highlight class="comment"><sp/>*<sp/>@return<sp/>Number<sp/>of<sp/>keys<sp/>in<sp/>the<sp/>IRK<sp/>data<sp/>structure.</highlight></codeline>
<codeline lineno="314"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint8_t<sp/><ref refid="group__nrf__aar__hal_1ga0e2860ce4079237a304d095b5eb5db31" kindref="member">nrf_aar_irk_number_get</ref>(NRF_AAR_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="316"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRF_AAR_HAS_NIRK</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_AAR_HAS_MAXRESOLVED</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="319"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="320"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>maximum<sp/>number<sp/>of<sp/>Identity<sp/>Resolving<sp/>Keys<sp/>to<sp/>resolve.</highlight></codeline>
<codeline lineno="321"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="322"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/><sp/><sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="323"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>maxresolved<sp/>Maximum<sp/>number<sp/>of<sp/>Identity<sp/>Resolving<sp/>Keys<sp/>to<sp/>resolve.</highlight></codeline>
<codeline lineno="324"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="325"><highlight class="comment"><sp/>*<sp/>@sa<sp/>nrf_aar_irk_pointer_set</highlight></codeline>
<codeline lineno="326"><highlight class="comment"><sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__aar__hal_1gabab7b798632a61578d9782aa2bd8d761" kindref="member">nrf_aar_maxresolved_set</ref>(NRF_AAR_Type<sp/>*<sp/>p_reg,<sp/>uint16_t<sp/>maxresolved);</highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="329"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="330"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>maximum<sp/>number<sp/>of<sp/>Identity<sp/>Resolving<sp/>Keys<sp/>to<sp/>resolve.</highlight></codeline>
<codeline lineno="331"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="332"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="333"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="334"><highlight class="comment"><sp/>*<sp/>@return<sp/>Maximum<sp/>number<sp/>of<sp/>Identity<sp/>Resolving<sp/>Keys<sp/>to<sp/>resolve.</highlight></codeline>
<codeline lineno="335"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint16_t<sp/><ref refid="group__nrf__aar__hal_1gab83173f5dc636802e1a13b62b2fe22c5" kindref="member">nrf_aar_maxresolved_get</ref>(NRF_AAR_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_AAR_HAS_ADDRPTR</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="340"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="341"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>the<sp/>pointer<sp/>to<sp/>the<sp/>resolvable<sp/>address.</highlight></codeline>
<codeline lineno="342"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="343"><highlight class="comment"><sp/>*<sp/>The<sp/>resolvable<sp/>address<sp/>must<sp/>consist<sp/>of<sp/>6<sp/>bytes.</highlight></codeline>
<codeline lineno="344"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="345"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="346"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>addr_ptr<sp/>Pointer<sp/>to<sp/>the<sp/>address<sp/>to<sp/>resolve<sp/>using<sp/>the<sp/>available<sp/>IRK<sp/>keys.</highlight></codeline>
<codeline lineno="347"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Must<sp/>point<sp/>to<sp/>the<sp/>Data<sp/>RAM<sp/>region.</highlight></codeline>
<codeline lineno="348"><highlight class="comment"><sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__aar__hal_1gad809805df5a951cb32fb417e8a322328" kindref="member">nrf_aar_addr_pointer_set</ref>(NRF_AAR_Type<sp/>*<sp/>p_reg,<sp/>uint8_t<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>addr_ptr);</highlight></codeline>
<codeline lineno="350"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="351"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="352"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>the<sp/>pointer<sp/>to<sp/>the<sp/>resolvable<sp/>address.</highlight></codeline>
<codeline lineno="353"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="354"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="355"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="356"><highlight class="comment"><sp/>*<sp/>@return<sp/>Pointer<sp/>to<sp/>the<sp/>address<sp/>to<sp/>resolve.</highlight></codeline>
<codeline lineno="357"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint8_t<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/><ref refid="group__nrf__aar__hal_1gabc02cea551747babb2c8237a9151adb0" kindref="member">nrf_aar_addr_pointer_get</ref>(NRF_AAR_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="359"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRF_AAR_HAS_ADDRPTR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_AAR_HAS_OUT_PTR</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="362"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="363"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>the<sp/>pointer<sp/>to<sp/>a<sp/>job<sp/>list<sp/>containing<sp/>description<sp/>to<sp/>store</highlight></codeline>
<codeline lineno="364"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>resolved<sp/>addresses.</highlight></codeline>
<codeline lineno="365"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="366"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="367"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_job<sp/>Pointer<sp/>to<sp/>a<sp/>job<sp/>list.</highlight></codeline>
<codeline lineno="368"><highlight class="comment"><sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__aar__hal_1gabb40485b0656ab175de43a53fffdf19c" kindref="member">nrf_aar_out_ptr_set</ref>(NRF_AAR_Type<sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structnrf__vdma__job__t" kindref="compound">nrf_vdma_job_t</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_job);</highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="372"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="373"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>the<sp/>pointer<sp/>to<sp/>a<sp/>job<sp/>list<sp/>containing<sp/>description<sp/>to<sp/>store</highlight></codeline>
<codeline lineno="374"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>resolved<sp/>addresses.</highlight></codeline>
<codeline lineno="375"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="376"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="377"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="378"><highlight class="comment"><sp/>*<sp/>@return<sp/>Pointer<sp/>to<sp/>the<sp/>job<sp/>list.</highlight></codeline>
<codeline lineno="379"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="380"><highlight class="normal">NRF_STATIC_INLINE<sp/><ref refid="structnrf__vdma__job__t" kindref="compound">nrf_vdma_job_t</ref><sp/>*<sp/><ref refid="group__nrf__aar__hal_1gaa91491ea81c0ba19b80da0ac5c6873e2" kindref="member">nrf_aar_out_ptr_get</ref>(NRF_AAR_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="381"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRF_AAR_HAS_OUT_PTR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_AAR_HAS_IN_PTR</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="384"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="385"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>the<sp/>pointer<sp/>to<sp/>a<sp/>job<sp/>list<sp/>containing<sp/>both<sp/></highlight></codeline>
<codeline lineno="386"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>Hash<sp/>and<sp/>Prand<sp/>parts<sp/>of<sp/>the<sp/>private<sp/>resolvable<sp/>address<sp/>(DEVICEADDR)<sp/></highlight></codeline>
<codeline lineno="387"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>field<sp/>from<sp/>the<sp/>Bluetooth<sp/>packet,<sp/>and<sp/>a<sp/>number<sp/>of<sp/>Identity<sp/>Resolving<sp/>Keys<sp/>(IRK).</highlight></codeline>
<codeline lineno="388"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="389"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="390"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_job<sp/>Pointer<sp/>to<sp/>a<sp/>job<sp/>list.</highlight></codeline>
<codeline lineno="391"><highlight class="comment"><sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__aar__hal_1ga05f842e5a390c892a661becfa305423f" kindref="member">nrf_aar_in_ptr_set</ref>(NRF_AAR_Type<sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structnrf__vdma__job__t" kindref="compound">nrf_vdma_job_t</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_job);</highlight></codeline>
<codeline lineno="394"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="395"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="396"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>the<sp/>pointer<sp/>to<sp/>a<sp/>job<sp/>list<sp/>containing<sp/>both<sp/></highlight></codeline>
<codeline lineno="397"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>Hash<sp/>and<sp/>Prand<sp/>parts<sp/>of<sp/>the<sp/>private<sp/>resolvable<sp/>address<sp/>(DEVICEADDR)<sp/></highlight></codeline>
<codeline lineno="398"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>field<sp/>from<sp/>the<sp/>Bluetooth<sp/>packet,<sp/>and<sp/>a<sp/>number<sp/>of<sp/>Identity<sp/>Resolving<sp/>Keys<sp/>(IRK).</highlight></codeline>
<codeline lineno="399"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="400"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="401"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="402"><highlight class="comment"><sp/>*<sp/>@return<sp/>Pointer<sp/>to<sp/>the<sp/>job<sp/>list.</highlight></codeline>
<codeline lineno="403"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="404"><highlight class="normal">NRF_STATIC_INLINE<sp/><ref refid="structnrf__vdma__job__t" kindref="compound">nrf_vdma_job_t</ref><sp/>*<sp/><ref refid="group__nrf__aar__hal_1gaf2db45a7d81712eedb4d884146edc0e1" kindref="member">nrf_aar_in_ptr_get</ref>(NRF_AAR_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="405"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRF_AAR_HAS_IN_PTR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_AAR_HAS_OUT_AMOUNT</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="408"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="409"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>number<sp/>of<sp/>bytes<sp/>available<sp/>in<sp/>the<sp/>output<sp/>data,</highlight></codeline>
<codeline lineno="410"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>not<sp/>including<sp/>the<sp/>job<sp/>list<sp/>structure.</highlight></codeline>
<codeline lineno="411"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="412"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="413"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="414"><highlight class="comment"><sp/>*<sp/>@return<sp/>Number<sp/>of<sp/>bytes<sp/>available<sp/>in<sp/>the<sp/>output<sp/>data.</highlight></codeline>
<codeline lineno="415"><highlight class="comment"><sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="416"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__aar__hal_1ga56141db149988fbee43b694d7001b826" kindref="member">nrf_aar_out_amount_get</ref>(NRF_AAR_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="417"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRF_AAR_HAS_OUT_AMOUNT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="normal"></highlight></codeline>
<codeline lineno="419"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_AAR_HAS_SCRATCHPTR</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="420"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="421"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>the<sp/>pointer<sp/>to<sp/>the<sp/>scratch<sp/>data<sp/>area.</highlight></codeline>
<codeline lineno="422"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="423"><highlight class="comment"><sp/>*<sp/>The<sp/>scratch<sp/>data<sp/>area<sp/>is<sp/>used<sp/>for<sp/>temporary<sp/>storage<sp/>during<sp/>the<sp/>address<sp/>resolution<sp/>procedure.</highlight></codeline>
<codeline lineno="424"><highlight class="comment"><sp/>*<sp/>A<sp/>space<sp/>of<sp/>minimum<sp/>3<sp/>bytes<sp/>must<sp/>be<sp/>reserved<sp/>for<sp/>the<sp/>scratch<sp/>data<sp/>area.</highlight></codeline>
<codeline lineno="425"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="426"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/><sp/><sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="427"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>scratch_ptr<sp/>Pointer<sp/>to<sp/>the<sp/>scratch<sp/>data<sp/>area.<sp/>Must<sp/>point<sp/>to<sp/>the<sp/>Data<sp/>RAM<sp/>region.</highlight></codeline>
<codeline lineno="428"><highlight class="comment"><sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="429"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__aar__hal_1gaa8422987f69cc49148b03120e6453bca" kindref="member">nrf_aar_scratch_pointer_set</ref>(NRF_AAR_Type<sp/>*<sp/>p_reg,<sp/>uint8_t<sp/>*<sp/>scratch_ptr);</highlight></codeline>
<codeline lineno="430"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="431"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="432"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>the<sp/>pointer<sp/>to<sp/>the<sp/>scratch<sp/>data<sp/>area.</highlight></codeline>
<codeline lineno="433"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="434"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="435"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="436"><highlight class="comment"><sp/>*<sp/>@return<sp/>Pointer<sp/>to<sp/>the<sp/>scratch<sp/>data<sp/>area.</highlight></codeline>
<codeline lineno="437"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="438"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint8_t<sp/>*<sp/><ref refid="group__nrf__aar__hal_1gaec8e079caf49e764291fc438ce1d35f1" kindref="member">nrf_aar_scratch_pointer_get</ref>(NRF_AAR_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="439"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRF_AAR_HAS_SCRATCHPTR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="440"><highlight class="normal"></highlight></codeline>
<codeline lineno="441"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_AAR_HAS_STATUS</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="442"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="443"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>the<sp/>index<sp/>of<sp/>the<sp/>Identity<sp/>Resolving<sp/>Key<sp/>that<sp/>was<sp/>used</highlight></codeline>
<codeline lineno="444"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>last<sp/>time<sp/>an<sp/>address<sp/>was<sp/>resolved.</highlight></codeline>
<codeline lineno="445"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="446"><highlight class="comment"><sp/>*<sp/>This<sp/>function<sp/>can<sp/>be<sp/>used<sp/>to<sp/>get<sp/>the<sp/>IRK<sp/>index<sp/>that<sp/>matched<sp/>the<sp/>resolvable<sp/>address,</highlight></codeline>
<codeline lineno="447"><highlight class="comment"><sp/>*<sp/>provided<sp/>that<sp/>@ref<sp/>NRF_AAR_EVENT_RESOLVED<sp/>occured.<sp/>Otherwise,<sp/>it<sp/>will<sp/>return</highlight></codeline>
<codeline lineno="448"><highlight class="comment"><sp/>*<sp/>the<sp/>index<sp/>of<sp/>the<sp/>last<sp/>IRK<sp/>stored<sp/>in<sp/>the<sp/>IRK<sp/>data<sp/>structure.</highlight></codeline>
<codeline lineno="449"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="450"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="451"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="452"><highlight class="comment"><sp/>*<sp/>@return<sp/>The<sp/>index<sp/>of<sp/>the<sp/>IRK<sp/>that<sp/>was<sp/>used<sp/>the<sp/>last<sp/>time<sp/>an<sp/>address<sp/>was<sp/>resolved.</highlight></codeline>
<codeline lineno="453"><highlight class="comment"><sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="454"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint8_t<sp/><ref refid="group__nrf__aar__hal_1ga418c1cb662b244e4a325394de935b1e3" kindref="member">nrf_aar_resolution_status_get</ref>(NRF_AAR_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="455"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRF_AAR_HAS_STATUS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="456"><highlight class="normal"></highlight></codeline>
<codeline lineno="457"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(DPPI_PRESENT)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="458"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="459"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>the<sp/>subscribe<sp/>configuration<sp/>for<sp/>a<sp/>given</highlight></codeline>
<codeline lineno="460"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AAR<sp/>task.</highlight></codeline>
<codeline lineno="461"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="462"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="463"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>task<sp/><sp/><sp/><sp/>Task<sp/>for<sp/>which<sp/>to<sp/>set<sp/>the<sp/>configuration.</highlight></codeline>
<codeline lineno="464"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>channel<sp/>Channel<sp/>through<sp/>which<sp/>to<sp/>subscribe<sp/>events.</highlight></codeline>
<codeline lineno="465"><highlight class="comment"><sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="466"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__aar__hal_1ga781416b1fa504ba1b2dd52b1c7852208" kindref="member">nrf_aar_subscribe_set</ref>(NRF_AAR_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__aar__hal_1gace9552a8a9e5cd9853dc1f9a812926cc" kindref="member">nrf_aar_task_t</ref><sp/>task,</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>channel);</highlight></codeline>
<codeline lineno="469"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="470"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="471"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>clearing<sp/>the<sp/>subscribe<sp/>configuration<sp/>for<sp/>a<sp/>given</highlight></codeline>
<codeline lineno="472"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AAR<sp/>task.</highlight></codeline>
<codeline lineno="473"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="474"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="475"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>task<sp/><sp/>Task<sp/>for<sp/>which<sp/>to<sp/>clear<sp/>the<sp/>configuration.</highlight></codeline>
<codeline lineno="476"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="477"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__aar__hal_1gad11996805d9487a5daf5822987b926eb" kindref="member">nrf_aar_subscribe_clear</ref>(NRF_AAR_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__aar__hal_1gace9552a8a9e5cd9853dc1f9a812926cc" kindref="member">nrf_aar_task_t</ref><sp/>task);</highlight></codeline>
<codeline lineno="479"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="480"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="481"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>the<sp/>publish<sp/>configuration<sp/>for<sp/>a<sp/>given</highlight></codeline>
<codeline lineno="482"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AAR<sp/>event.</highlight></codeline>
<codeline lineno="483"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="484"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="485"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>event<sp/><sp/><sp/>Event<sp/>for<sp/>which<sp/>to<sp/>set<sp/>the<sp/>configuration.</highlight></codeline>
<codeline lineno="486"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>channel<sp/>Channel<sp/>through<sp/>which<sp/>to<sp/>publish<sp/>the<sp/>event.</highlight></codeline>
<codeline lineno="487"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="488"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__aar__hal_1gaeab128354f4b38f8b1faedf7aaa97f44" kindref="member">nrf_aar_publish_set</ref>(NRF_AAR_Type<sp/>*<sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__aar__hal_1ga2b54270a6027e295674d60c738609b8c" kindref="member">nrf_aar_event_t</ref><sp/>event,</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>channel);</highlight></codeline>
<codeline lineno="491"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="492"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="493"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>clearing<sp/>the<sp/>publish<sp/>configuration<sp/>for<sp/>a<sp/>given</highlight></codeline>
<codeline lineno="494"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AAR<sp/>event.</highlight></codeline>
<codeline lineno="495"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="496"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="497"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>event<sp/>Event<sp/>for<sp/>which<sp/>to<sp/>clear<sp/>the<sp/>configuration.</highlight></codeline>
<codeline lineno="498"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="499"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__aar__hal_1ga08deaa821f25ff3f015473c70235c2f5" kindref="member">nrf_aar_publish_clear</ref>(NRF_AAR_Type<sp/>*<sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__aar__hal_1ga2b54270a6027e295674d60c738609b8c" kindref="member">nrf_aar_event_t</ref><sp/>event);</highlight></codeline>
<codeline lineno="501"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>defined(DPPI_PRESENT)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="502"><highlight class="normal"></highlight></codeline>
<codeline lineno="503"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>NRF_DECLARE_ONLY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="504"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrf__aar__hal_1ga5dc9b2b7fb4504cea33740bb0e8e917c" kindref="member">nrf_aar_event_check</ref>(NRF_AAR_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__aar__hal_1ga2b54270a6027e295674d60c738609b8c" kindref="member">nrf_aar_event_t</ref><sp/><sp/><sp/><sp/><sp/><sp/>aar_event)</highlight></codeline>
<codeline lineno="506"><highlight class="normal">{</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>nrf_event_check(p_reg,<sp/>aar_event);</highlight></codeline>
<codeline lineno="508"><highlight class="normal">}</highlight></codeline>
<codeline lineno="509"><highlight class="normal"></highlight></codeline>
<codeline lineno="510"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__aar__hal_1gafba8d400db7ac564766c6ed2f9f074c9" kindref="member">nrf_aar_event_clear</ref>(NRF_AAR_Type<sp/>*<sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__aar__hal_1ga2b54270a6027e295674d60c738609b8c" kindref="member">nrf_aar_event_t</ref><sp/>aar_event)</highlight></codeline>
<codeline lineno="512"><highlight class="normal">{</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/>*((</highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint32_t<sp/>*)((uint8_t<sp/>*)p_reg<sp/>+<sp/>(uint32_t)aar_event))<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/>nrf_event_readback((uint8_t<sp/>*)p_reg<sp/>+<sp/>(uint32_t)aar_event);</highlight></codeline>
<codeline lineno="515"><highlight class="normal">}</highlight></codeline>
<codeline lineno="516"><highlight class="normal"></highlight></codeline>
<codeline lineno="517"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__aar__hal_1ga4557d62c32944dd45f7e2306dc61b336" kindref="member">nrf_aar_event_address_get</ref>(NRF_AAR_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__aar__hal_1ga2b54270a6027e295674d60c738609b8c" kindref="member">nrf_aar_event_t</ref><sp/><sp/><sp/><sp/><sp/><sp/>aar_event)</highlight></codeline>
<codeline lineno="519"><highlight class="normal">{</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>nrf_task_event_address_get(p_reg,<sp/>aar_event);</highlight></codeline>
<codeline lineno="521"><highlight class="normal">}</highlight></codeline>
<codeline lineno="522"><highlight class="normal"></highlight></codeline>
<codeline lineno="523"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__aar__hal_1gafcfd45b54e0e162e21b753b378ea5134" kindref="member">nrf_aar_int_enable</ref>(NRF_AAR_Type<sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>mask)</highlight></codeline>
<codeline lineno="524"><highlight class="normal">{</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;INTENSET<sp/>=<sp/>mask;</highlight></codeline>
<codeline lineno="526"><highlight class="normal">}</highlight></codeline>
<codeline lineno="527"><highlight class="normal"></highlight></codeline>
<codeline lineno="528"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__aar__hal_1ga9bf9334598fa260004b2f2081b2c60c4" kindref="member">nrf_aar_int_enable_check</ref>(NRF_AAR_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>mask)</highlight></codeline>
<codeline lineno="529"><highlight class="normal">{</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p_reg-&gt;INTENSET<sp/>&amp;<sp/>mask;</highlight></codeline>
<codeline lineno="531"><highlight class="normal">}</highlight></codeline>
<codeline lineno="532"><highlight class="normal"></highlight></codeline>
<codeline lineno="533"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__aar__hal_1ga5cd5bdde6b43bcf58cc4f74f24161b06" kindref="member">nrf_aar_int_disable</ref>(NRF_AAR_Type<sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>mask)</highlight></codeline>
<codeline lineno="534"><highlight class="normal">{</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;INTENCLR<sp/>=<sp/>mask;</highlight></codeline>
<codeline lineno="536"><highlight class="normal">}</highlight></codeline>
<codeline lineno="537"><highlight class="normal"></highlight></codeline>
<codeline lineno="538"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__aar__hal_1ga8152c8424b3de78734910a501130739a" kindref="member">nrf_aar_task_trigger</ref>(NRF_AAR_Type<sp/>*<sp/>p_reg,<sp/><ref refid="group__nrf__aar__hal_1gace9552a8a9e5cd9853dc1f9a812926cc" kindref="member">nrf_aar_task_t</ref><sp/>task)</highlight></codeline>
<codeline lineno="539"><highlight class="normal">{</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/>*(</highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint32_t<sp/>*)((uint8_t<sp/>*)p_reg<sp/>+<sp/>(uint32_t)task)<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="541"><highlight class="normal">}</highlight></codeline>
<codeline lineno="542"><highlight class="normal"></highlight></codeline>
<codeline lineno="543"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__aar__hal_1gaf01f522277a44a52833e7c3b26046380" kindref="member">nrf_aar_task_address_get</ref>(NRF_AAR_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__aar__hal_1gace9552a8a9e5cd9853dc1f9a812926cc" kindref="member">nrf_aar_task_t</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>task)</highlight></codeline>
<codeline lineno="545"><highlight class="normal">{</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>nrf_task_event_address_get(p_reg,<sp/>task);</highlight></codeline>
<codeline lineno="547"><highlight class="normal">}</highlight></codeline>
<codeline lineno="548"><highlight class="normal"></highlight></codeline>
<codeline lineno="549"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__aar__hal_1ga66f5c0b8a07c6657ac35cbe9199e0c8e" kindref="member">nrf_aar_enable</ref>(NRF_AAR_Type<sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="550"><highlight class="normal">{</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;ENABLE<sp/>=<sp/>AAR_ENABLE_ENABLE_Enabled<sp/>&lt;&lt;<sp/>AAR_ENABLE_ENABLE_Pos;</highlight></codeline>
<codeline lineno="552"><highlight class="normal">}</highlight></codeline>
<codeline lineno="553"><highlight class="normal"></highlight></codeline>
<codeline lineno="554"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__aar__hal_1gabb95489d544efb64c12d7fac5fdacdd0" kindref="member">nrf_aar_disable</ref>(NRF_AAR_Type<sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="555"><highlight class="normal">{</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;ENABLE<sp/>=<sp/>AAR_ENABLE_ENABLE_Disabled<sp/>&lt;&lt;<sp/>AAR_ENABLE_ENABLE_Pos;</highlight></codeline>
<codeline lineno="557"><highlight class="normal">}</highlight></codeline>
<codeline lineno="558"><highlight class="normal"></highlight></codeline>
<codeline lineno="559"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_AAR_HAS_IRKPTR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="560"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__aar__hal_1gaf8e565588af75d32c5d339d3d6812801" kindref="member">nrf_aar_irk_pointer_set</ref>(NRF_AAR_Type<sp/>*<sp/>p_reg,<sp/>uint8_t<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>irk_ptr)</highlight></codeline>
<codeline lineno="561"><highlight class="normal">{</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;IRKPTR<sp/>=<sp/>(uint32_t)irk_ptr;</highlight></codeline>
<codeline lineno="563"><highlight class="normal">}</highlight></codeline>
<codeline lineno="564"><highlight class="normal"></highlight></codeline>
<codeline lineno="565"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint8_t<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/><ref refid="group__nrf__aar__hal_1ga36a92e5ba9e029bf2e3e2331cf99ff99" kindref="member">nrf_aar_irk_pointer_get</ref>(NRF_AAR_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="566"><highlight class="normal">{</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(uint8_t<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*)(p_reg-&gt;IRKPTR);</highlight></codeline>
<codeline lineno="568"><highlight class="normal">}</highlight></codeline>
<codeline lineno="569"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRF_AAR_HAS_IRKPTR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="570"><highlight class="normal"></highlight></codeline>
<codeline lineno="571"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_AAR_HAS_NIRK</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="572"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__aar__hal_1gac0099d874679a6cddd8304a28852391b" kindref="member">nrf_aar_irk_number_set</ref>(NRF_AAR_Type<sp/>*<sp/>p_reg,<sp/>uint8_t<sp/>irk_num)</highlight></codeline>
<codeline lineno="573"><highlight class="normal">{</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;NIRK<sp/>=<sp/>irk_num;</highlight></codeline>
<codeline lineno="575"><highlight class="normal">}</highlight></codeline>
<codeline lineno="576"><highlight class="normal"></highlight></codeline>
<codeline lineno="577"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint8_t<sp/><ref refid="group__nrf__aar__hal_1ga0e2860ce4079237a304d095b5eb5db31" kindref="member">nrf_aar_irk_number_get</ref>(NRF_AAR_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="578"><highlight class="normal">{</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(uint8_t)(p_reg-&gt;NIRK);</highlight></codeline>
<codeline lineno="580"><highlight class="normal">}</highlight></codeline>
<codeline lineno="581"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRF_AAR_HAS_NIRK</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="582"><highlight class="normal"></highlight></codeline>
<codeline lineno="583"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_AAR_HAS_ADDRPTR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="584"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__aar__hal_1gad809805df5a951cb32fb417e8a322328" kindref="member">nrf_aar_addr_pointer_set</ref>(NRF_AAR_Type<sp/>*<sp/>p_reg,<sp/>uint8_t<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>addr_ptr)</highlight></codeline>
<codeline lineno="585"><highlight class="normal">{</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;ADDRPTR<sp/>=<sp/>(uint32_t)addr_ptr;</highlight></codeline>
<codeline lineno="587"><highlight class="normal">}</highlight></codeline>
<codeline lineno="588"><highlight class="normal"></highlight></codeline>
<codeline lineno="589"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint8_t<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/><ref refid="group__nrf__aar__hal_1gabc02cea551747babb2c8237a9151adb0" kindref="member">nrf_aar_addr_pointer_get</ref>(NRF_AAR_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="590"><highlight class="normal">{</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(uint8_t<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*)(p_reg-&gt;ADDRPTR);</highlight></codeline>
<codeline lineno="592"><highlight class="normal">}</highlight></codeline>
<codeline lineno="593"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRF_AAR_HAS_ADDRPTR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="594"><highlight class="normal"></highlight></codeline>
<codeline lineno="595"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_AAR_HAS_SCRATCHPTR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="596"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__aar__hal_1gaa8422987f69cc49148b03120e6453bca" kindref="member">nrf_aar_scratch_pointer_set</ref>(NRF_AAR_Type<sp/>*<sp/>p_reg,<sp/>uint8_t<sp/>*<sp/>scratch_ptr)</highlight></codeline>
<codeline lineno="597"><highlight class="normal">{</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;SCRATCHPTR<sp/>=<sp/>(uint32_t)scratch_ptr;</highlight></codeline>
<codeline lineno="599"><highlight class="normal">}</highlight></codeline>
<codeline lineno="600"><highlight class="normal"></highlight></codeline>
<codeline lineno="601"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint8_t<sp/>*<sp/><ref refid="group__nrf__aar__hal_1gaec8e079caf49e764291fc438ce1d35f1" kindref="member">nrf_aar_scratch_pointer_get</ref>(NRF_AAR_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="602"><highlight class="normal">{</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(uint8_t<sp/>*)(p_reg-&gt;SCRATCHPTR);</highlight></codeline>
<codeline lineno="604"><highlight class="normal">}</highlight></codeline>
<codeline lineno="605"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRF_AAR_HAS_SCRATCHPTR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="606"><highlight class="normal"></highlight></codeline>
<codeline lineno="607"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_AAR_HAS_STATUS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="608"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint8_t<sp/><ref refid="group__nrf__aar__hal_1ga418c1cb662b244e4a325394de935b1e3" kindref="member">nrf_aar_resolution_status_get</ref>(NRF_AAR_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="609"><highlight class="normal">{</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(uint8_t)(p_reg-&gt;STATUS);</highlight></codeline>
<codeline lineno="611"><highlight class="normal">}</highlight></codeline>
<codeline lineno="612"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRF_AAR_HAS_STATUS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="613"><highlight class="normal"></highlight></codeline>
<codeline lineno="614"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_AAR_HAS_ERROR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="615"><highlight class="normal">NRF_STATIC_INLINE<sp/><ref refid="group__nrf__aar__hal_1ga73565be5f5b07fec07c83af843e8935c" kindref="member">nrf_aar_error_t</ref><sp/><ref refid="group__nrf__aar__hal_1ga9e011e3c4e540cf571bf908416ac6b08" kindref="member">nrf_aar_error_get</ref>(NRF_AAR_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="616"><highlight class="normal">{</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="group__nrf__aar__hal_1ga73565be5f5b07fec07c83af843e8935c" kindref="member">nrf_aar_error_t</ref>)(p_reg-&gt;ERRORSTATUS);</highlight></codeline>
<codeline lineno="618"><highlight class="normal">}</highlight></codeline>
<codeline lineno="619"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRF_AAR_HAS_ERROR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="620"><highlight class="normal"></highlight></codeline>
<codeline lineno="621"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_AAR_HAS_MAXRESOLVED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="622"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__aar__hal_1gabab7b798632a61578d9782aa2bd8d761" kindref="member">nrf_aar_maxresolved_set</ref>(NRF_AAR_Type<sp/>*<sp/>p_reg,<sp/>uint16_t<sp/>maxresolved)</highlight></codeline>
<codeline lineno="623"><highlight class="normal">{</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;MAXRESOLVED<sp/>=<sp/>maxresolved;</highlight></codeline>
<codeline lineno="625"><highlight class="normal">}</highlight></codeline>
<codeline lineno="626"><highlight class="normal"></highlight></codeline>
<codeline lineno="627"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint16_t<sp/><ref refid="group__nrf__aar__hal_1gab83173f5dc636802e1a13b62b2fe22c5" kindref="member">nrf_aar_maxresolved_get</ref>(NRF_AAR_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="628"><highlight class="normal">{</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(uint16_t)(p_reg-&gt;MAXRESOLVED);</highlight></codeline>
<codeline lineno="630"><highlight class="normal">}</highlight></codeline>
<codeline lineno="631"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRF_AAR_HAS_MAXRESOLVED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="632"><highlight class="normal"></highlight></codeline>
<codeline lineno="633"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_AAR_HAS_IN_PTR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="634"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__aar__hal_1ga05f842e5a390c892a661becfa305423f" kindref="member">nrf_aar_in_ptr_set</ref>(NRF_AAR_Type<sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structnrf__vdma__job__t" kindref="compound">nrf_vdma_job_t</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_job)</highlight></codeline>
<codeline lineno="636"><highlight class="normal">{</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;IN.PTR<sp/>=<sp/>(uint32_t)p_job;</highlight></codeline>
<codeline lineno="638"><highlight class="normal">}</highlight></codeline>
<codeline lineno="639"><highlight class="normal"></highlight></codeline>
<codeline lineno="640"><highlight class="normal">NRF_STATIC_INLINE<sp/><ref refid="structnrf__vdma__job__t" kindref="compound">nrf_vdma_job_t</ref><sp/>*<sp/><ref refid="group__nrf__aar__hal_1gaf2db45a7d81712eedb4d884146edc0e1" kindref="member">nrf_aar_in_ptr_get</ref>(NRF_AAR_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="641"><highlight class="normal">{</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structnrf__vdma__job__t" kindref="compound">nrf_vdma_job_t</ref><sp/>*)(p_reg-&gt;IN.PTR);</highlight></codeline>
<codeline lineno="643"><highlight class="normal">}</highlight></codeline>
<codeline lineno="644"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRF_AAR_HAS_IN_PTR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="645"><highlight class="normal"></highlight></codeline>
<codeline lineno="646"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_AAR_HAS_OUT_PTR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="647"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__aar__hal_1gabb40485b0656ab175de43a53fffdf19c" kindref="member">nrf_aar_out_ptr_set</ref>(NRF_AAR_Type<sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structnrf__vdma__job__t" kindref="compound">nrf_vdma_job_t</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_job)</highlight></codeline>
<codeline lineno="649"><highlight class="normal">{</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;OUT.PTR<sp/>=<sp/>(uint32_t)p_job;</highlight></codeline>
<codeline lineno="651"><highlight class="normal">}</highlight></codeline>
<codeline lineno="652"><highlight class="normal"></highlight></codeline>
<codeline lineno="653"><highlight class="normal">NRF_STATIC_INLINE<sp/><ref refid="structnrf__vdma__job__t" kindref="compound">nrf_vdma_job_t</ref><sp/>*<sp/><ref refid="group__nrf__aar__hal_1gaa91491ea81c0ba19b80da0ac5c6873e2" kindref="member">nrf_aar_out_ptr_get</ref>(NRF_AAR_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="654"><highlight class="normal">{</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structnrf__vdma__job__t" kindref="compound">nrf_vdma_job_t</ref><sp/>*)(p_reg-&gt;OUT.PTR);</highlight></codeline>
<codeline lineno="656"><highlight class="normal">}</highlight></codeline>
<codeline lineno="657"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRF_AAR_HAS_OUT_PTR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="658"><highlight class="normal"></highlight></codeline>
<codeline lineno="659"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_AAR_HAS_OUT_AMOUNT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="660"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__aar__hal_1ga56141db149988fbee43b694d7001b826" kindref="member">nrf_aar_out_amount_get</ref>(NRF_AAR_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="661"><highlight class="normal">{</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p_reg-&gt;OUT.AMOUNT;</highlight></codeline>
<codeline lineno="663"><highlight class="normal">}</highlight></codeline>
<codeline lineno="664"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRF_AAR_HAS_OUT_AMOUNT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="665"><highlight class="normal"></highlight></codeline>
<codeline lineno="666"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(DPPI_PRESENT)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="667"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__aar__hal_1ga781416b1fa504ba1b2dd52b1c7852208" kindref="member">nrf_aar_subscribe_set</ref>(NRF_AAR_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__aar__hal_1gace9552a8a9e5cd9853dc1f9a812926cc" kindref="member">nrf_aar_task_t</ref><sp/>task,</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>channel)</highlight></codeline>
<codeline lineno="670"><highlight class="normal">{</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/>*((</highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint32_t<sp/>*)<sp/>((uint8_t<sp/>*)<sp/>p_reg<sp/>+<sp/>(uint32_t)<sp/>task<sp/>+<sp/>0x80uL))<sp/>=</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)channel<sp/>|<sp/>NRF_SUBSCRIBE_PUBLISH_ENABLE);</highlight></codeline>
<codeline lineno="673"><highlight class="normal">}</highlight></codeline>
<codeline lineno="674"><highlight class="normal"></highlight></codeline>
<codeline lineno="675"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__aar__hal_1gad11996805d9487a5daf5822987b926eb" kindref="member">nrf_aar_subscribe_clear</ref>(NRF_AAR_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__aar__hal_1gace9552a8a9e5cd9853dc1f9a812926cc" kindref="member">nrf_aar_task_t</ref><sp/>task)</highlight></codeline>
<codeline lineno="677"><highlight class="normal">{</highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/><sp/>*((</highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint32_t<sp/>*)<sp/>((uint8_t<sp/>*)<sp/>p_reg<sp/>+<sp/>(uint32_t)<sp/>task<sp/>+<sp/>0x80uL))<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="679"><highlight class="normal">}</highlight></codeline>
<codeline lineno="680"><highlight class="normal"></highlight></codeline>
<codeline lineno="681"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__aar__hal_1gaeab128354f4b38f8b1faedf7aaa97f44" kindref="member">nrf_aar_publish_set</ref>(NRF_AAR_Type<sp/>*<sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__aar__hal_1ga2b54270a6027e295674d60c738609b8c" kindref="member">nrf_aar_event_t</ref><sp/>event,</highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>channel)</highlight></codeline>
<codeline lineno="684"><highlight class="normal">{</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/><sp/>*((</highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint32_t<sp/>*)<sp/>((uint8_t<sp/>*)<sp/>p_reg<sp/>+<sp/>(uint32_t)<sp/>event<sp/>+<sp/>0x80uL))<sp/>=</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)channel<sp/>|<sp/>NRF_SUBSCRIBE_PUBLISH_ENABLE);</highlight></codeline>
<codeline lineno="687"><highlight class="normal">}</highlight></codeline>
<codeline lineno="688"><highlight class="normal"></highlight></codeline>
<codeline lineno="689"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__aar__hal_1ga08deaa821f25ff3f015473c70235c2f5" kindref="member">nrf_aar_publish_clear</ref>(NRF_AAR_Type<sp/>*<sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__aar__hal_1ga2b54270a6027e295674d60c738609b8c" kindref="member">nrf_aar_event_t</ref><sp/>event)</highlight></codeline>
<codeline lineno="691"><highlight class="normal">{</highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><sp/><sp/>*((</highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint32_t<sp/>*)<sp/>((uint8_t<sp/>*)<sp/>p_reg<sp/>+<sp/>(uint32_t)<sp/>event<sp/>+<sp/>0x80uL))<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="693"><highlight class="normal">}</highlight></codeline>
<codeline lineno="694"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>defined(DPPI_PRESENT)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="695"><highlight class="normal"></highlight></codeline>
<codeline lineno="696"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRF_DECLARE_ONLY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="697"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="698"><highlight class="comment">/**<sp/>@}<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="699"><highlight class="normal"></highlight></codeline>
<codeline lineno="700"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="701"><highlight class="normal">}</highlight></codeline>
<codeline lineno="702"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="703"><highlight class="normal"></highlight></codeline>
<codeline lineno="704"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRF_AAR_H__</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="hal/nrf_aar.h"/>
  </compounddef>
</doxygen>
