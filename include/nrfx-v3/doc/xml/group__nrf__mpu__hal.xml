<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="group__nrf__mpu__hal" kind="group">
    <compoundname>nrf_mpu_hal</compoundname>
    <title>MPU HAL</title>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__nrf__mpu__hal_1ga93d152d70dfc682a0d501514cd980c78" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_mpu_region0_ram_size_set</definition>
        <argsstring>(NRF_MPU_Type *p_reg, uint32_t size)</argsstring>
        <name>nrf_mpu_region0_ram_size_set</name>
        <param>
          <type>NRF_MPU_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Function for setting the size of the RAM region 0. </para>
        </briefdescription>
        <detaileddescription>
<para>When memory protection is enabled, the Memory Protection Unit enforces runtime protection and readback protection of resources classified as region 0. See the product specification for more information.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">size</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the RAM region 0, in bytes. Must be word-aligned. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_mpu.h" line="125" column="24" bodyfile="hal/nrf_mpu.h" bodystart="125" bodyend="129" declfile="hal/nrf_mpu.h" declline="69" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__mpu__hal_1gaa31b8148c5fe5d70f1cc7d11dc3b792a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_mpu_region0_peripherals_set</definition>
        <argsstring>(NRF_MPU_Type *p_reg, uint32_t peripheral_mask)</argsstring>
        <name>nrf_mpu_region0_peripherals_set</name>
        <param>
          <type>NRF_MPU_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>peripheral_mask</declname>
        </param>
        <briefdescription>
<para>Function for configuring specified peripherals in the memory region 0. </para>
        </briefdescription>
        <detaileddescription>
<para>When the memory protection is enabled, the Memory Protection Unit enforces runtime protection and readback protection of resources classified as region 0. See the product specification for more information.</para>
<para>After reset, all peripherals are configured as <emphasis>not</emphasis> assigned to region 0.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">peripheral_mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask that specifies peripherals to be configured in the memory region 0. Compose this mask using <ref refid="group__nrf__mpu__hal_1gad836aa58b1a81a9811d19cdd97ef6145" kindref="member">NRF_MPU_PERIPHERAL_MASK_GET</ref> macro. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_mpu.h" line="131" column="24" bodyfile="hal/nrf_mpu.h" bodystart="131" bodyend="135" declfile="hal/nrf_mpu.h" declline="84" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__mpu__hal_1ga065b9889a5d0e39ab0b3a5be7537e773" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_mpu_region0_peripherals_get</definition>
        <argsstring>(NRF_MPU_Type const *p_reg)</argsstring>
        <name>nrf_mpu_region0_peripherals_get</name>
        <param>
          <type>NRF_MPU_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting the bitmask that specifies peripherals configured in the memory region 0. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Bitmask representing peripherals configured in region 0. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_mpu.h" line="137" column="28" bodyfile="hal/nrf_mpu.h" bodystart="137" bodyend="140" declfile="hal/nrf_mpu.h" declline="94" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__mpu__hal_1ga2b9e498a8fcb11297bf6b819d9e16ccf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_mpu_nvm_blocks_protection_enable</definition>
        <argsstring>(NRF_MPU_Type *p_reg, uint8_t group_idx, uint32_t block_mask)</argsstring>
        <name>nrf_mpu_nvm_blocks_protection_enable</name>
        <param>
          <type>NRF_MPU_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>group_idx</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>block_mask</declname>
        </param>
        <briefdescription>
<para>Function for enabling protection for specified non-volatile memory blocks. </para>
        </briefdescription>
        <detaileddescription>
<para>Blocks are arranged into groups of 32 blocks each. Each block size is 4 kB. Any attempt to write or erase a protected block will result in hard fault. The memory block protection can be disabled only by resetting the device.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">group_idx</parametername>
</parameternamelist>
<parameterdescription>
<para>Non-volatile memory group containing memory blocks to protect. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">block_mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Non-volatile memory blocks to protect. Each bit in bitmask represents one memory block in the specified group. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_mpu.h" line="142" column="24" bodyfile="hal/nrf_mpu.h" bodystart="142" bodyend="160" declfile="hal/nrf_mpu.h" declline="108" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__mpu__hal_1gae216fa9689dcdcb7e2ed22a4766a6318" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_mpu_nvm_protection_in_debug_set</definition>
        <argsstring>(NRF_MPU_Type *p_reg, bool enable)</argsstring>
        <name>nrf_mpu_nvm_protection_in_debug_set</name>
        <param>
          <type>NRF_MPU_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>enable</declname>
        </param>
        <briefdescription>
<para>Function for setting the non-volatile memory (NVM) protection during debug. </para>
        </briefdescription>
        <detaileddescription>
<para>NVM protection during debug is disabled by default.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">enable</parametername>
</parameternamelist>
<parameterdescription>
<para>True if NVM protection during debug is to be enabled, false otherwise. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_mpu.h" line="162" column="24" bodyfile="hal/nrf_mpu.h" bodystart="162" bodyend="167" declfile="hal/nrf_mpu.h" declline="120" declcolumn="24"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__nrf__mpu__hal_1gad836aa58b1a81a9811d19cdd97ef6145" prot="public" static="no">
        <name>NRF_MPU_PERIPHERAL_MASK_GET</name>
        <param><defname>base_addr</defname></param>
        <initializer>(1UL &lt;&lt; <ref refid="group__nrfx__common_1gabb3f39c8950fb847210fe0dd03b4d85c" kindref="member">NRFX_PERIPHERAL_ID_GET</ref>(base_addr))</initializer>
        <briefdescription>
<para>Macro for getting MPU region configuration mask for the specified peripheral. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">base_addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Peripheral base address.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>MPU configuration mask for the specified peripheral. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_mpu.h" line="57" column="9" bodyfile="hal/nrf_mpu.h" bodystart="57" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Hardware access layer for managing the Memory Protection Unit (MPU) peripheral. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
