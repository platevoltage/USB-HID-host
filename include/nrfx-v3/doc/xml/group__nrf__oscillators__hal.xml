<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="group__nrf__oscillators__hal" kind="group">
    <compoundname>nrf_oscillators_hal</compoundname>
    <title>OSCILLATORS HAL</title>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="group__nrf__oscillators__hal_1gaa04c05f15e5bf501a093ded4de3b8f76" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_oscillators_hfxo_clock_quality_t</name>
        <enumvalue id="group__nrf__oscillators__hal_1ggaa04c05f15e5bf501a093ded4de3b8f76a66b53e5a9c2b8daa0e0edaad0d806a76" prot="public">
          <name>NRF_OSCILLATORS_HFXO_CLOCK_QUALITY_NONE</name>
          <initializer>= OSCILLATORS_XOSC32M_CLOCKQUALITY_INDICATOR_NoStatus</initializer>
          <briefdescription>
<para>Clock XOSC32M status is not defined. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__oscillators__hal_1ggaa04c05f15e5bf501a093ded4de3b8f76adec4bfc16525df27e3f5434101be8d56" prot="public">
          <name>NRF_OSCILLATORS_HFXO_CLOCK_QUALITY_STARTING</name>
          <initializer>= OSCILLATORS_XOSC32M_CLOCKQUALITY_INDICATOR_Starting</initializer>
          <briefdescription>
<para>Clock XOSC32M has started but has not yet reached the specified frequency tolerance requirement fTOL_HFXO. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__oscillators__hal_1ggaa04c05f15e5bf501a093ded4de3b8f76a76c35686f8e3f0c8522fd275ceb40557" prot="public">
          <name>NRF_OSCILLATORS_HFXO_CLOCK_QUALITY_STARTED</name>
          <initializer>= OSCILLATORS_XOSC32M_CLOCKQUALITY_INDICATOR_Started</initializer>
          <briefdescription>
<para>Clock XOSC32M has started and is operating with the specified frequency tolerance requirement fTOL_HFXO. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>HFXO clock quality indicator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_oscillators.h" line="118" column="1" bodyfile="hal/nrf_oscillators.h" bodystart="119" bodyend="123"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__oscillators__hal_1gaab0b531c47d93dee7fed8c5e3b09fe7d" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_oscillators_pll_freq_t</name>
        <enumvalue id="group__nrf__oscillators__hal_1ggaab0b531c47d93dee7fed8c5e3b09fe7da2aa2cf107f1e08e99305b2fb1f0fe512" prot="public">
          <name>NRF_OSCILLATORS_PLL_FREQ_64M</name>
          <initializer>= OSCILLATORS_PLL_FREQ_FREQ_CK64M</initializer>
          <briefdescription>
<para>PLL 64 MHz frequency. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__oscillators__hal_1ggaab0b531c47d93dee7fed8c5e3b09fe7dae792b8e18a3ecc457fe12fc6e758f78a" prot="public">
          <name>NRF_OSCILLATORS_PLL_FREQ_128M</name>
          <initializer>= OSCILLATORS_PLL_FREQ_FREQ_CK128M</initializer>
          <briefdescription>
<para>PLL 128 MHz frequency. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>PLL frequencies. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_oscillators.h" line="128" column="1" bodyfile="hal/nrf_oscillators.h" bodystart="129" bodyend="132"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group__nrf__oscillators__hal_1gaa5acaa88c6acb9bd9ef6aa7532802dab" prot="public" static="no">
        <type>uint32_t</type>
        <definition>typedef uint32_t nrf_oscillators_lfxo_cap_t</definition>
        <argsstring></argsstring>
        <name>nrf_oscillators_lfxo_cap_t</name>
        <briefdescription>
<para>LFXO capacitance type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_oscillators.h" line="137" column="18" bodyfile="hal/nrf_oscillators.h" bodystart="137" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__nrf__oscillators__hal_1gaa8dc167eb6dbfbcc7606d9c0a747b2fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE <ref refid="group__nrf__oscillators__hal_1gaa04c05f15e5bf501a093ded4de3b8f76" kindref="member">nrf_oscillators_hfxo_clock_quality_t</ref></type>
        <definition>NRF_STATIC_INLINE nrf_oscillators_hfxo_clock_quality_t nrf_oscillators_hfxo_clock_quality_get</definition>
        <argsstring>(NRF_OSCILLATORS_Type *p_reg)</argsstring>
        <name>nrf_oscillators_hfxo_clock_quality_get</name>
        <param>
          <type>NRF_OSCILLATORS_Type *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for reading HFXO clock quality indicator. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Clock quality indicator value. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_oscillators.h" line="228" column="1" bodyfile="hal/nrf_oscillators.h" bodystart="228" bodyend="231" declfile="hal/nrf_oscillators.h" declline="164" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__oscillators__hal_1gaa3c30fc5ed67b0402d265839b7297a67" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_oscillators_pll_freq_set</definition>
        <argsstring>(NRF_OSCILLATORS_Type *p_reg, nrf_oscillators_pll_freq_t freq)</argsstring>
        <name>nrf_oscillators_pll_freq_set</name>
        <param>
          <type>NRF_OSCILLATORS_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__oscillators__hal_1gaab0b531c47d93dee7fed8c5e3b09fe7d" kindref="member">nrf_oscillators_pll_freq_t</ref></type>
          <declname>freq</declname>
        </param>
        <briefdescription>
<para>Function for setting PLL frequency. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">freq</parametername>
</parameternamelist>
<parameterdescription>
<para>New PLL frequency. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_oscillators.h" line="235" column="24" bodyfile="hal/nrf_oscillators.h" bodystart="235" bodyend="239" declfile="hal/nrf_oscillators.h" declline="174" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__oscillators__hal_1gae266bb2beffdc7da1fe9d2d0d9dbf064" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE <ref refid="group__nrf__oscillators__hal_1gaab0b531c47d93dee7fed8c5e3b09fe7d" kindref="member">nrf_oscillators_pll_freq_t</ref></type>
        <definition>NRF_STATIC_INLINE nrf_oscillators_pll_freq_t nrf_oscillators_pll_freq_get</definition>
        <argsstring>(NRF_OSCILLATORS_Type *p_reg)</argsstring>
        <name>nrf_oscillators_pll_freq_get</name>
        <param>
          <type>NRF_OSCILLATORS_Type *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting PLL frequency. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Current PLL frequency value. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_oscillators.h" line="242" column="28" bodyfile="hal/nrf_oscillators.h" bodystart="242" bodyend="245" declfile="hal/nrf_oscillators.h" declline="185" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__oscillators__hal_1ga1537df377a5c3231d5b6bc059a64abe7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_oscillators_lfxo_bypass_set</definition>
        <argsstring>(NRF_OSCILLATORS_Type *p_reg, bool enable)</argsstring>
        <name>nrf_oscillators_lfxo_bypass_set</name>
        <param>
          <type>NRF_OSCILLATORS_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>enable</declname>
        </param>
        <briefdescription>
<para>Function for enabling or disabling the bypass of LFXO with external clock source. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">enable</parametername>
</parameternamelist>
<parameterdescription>
<para>True if bypass is to be enabled (use with rail-to-rail external source). False if bypass is to be disabled (use with xtal or low-swing external source). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_oscillators.h" line="249" column="24" bodyfile="hal/nrf_oscillators.h" bodystart="249" bodyend="253" declfile="hal/nrf_oscillators.h" declline="196" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__oscillators__hal_1gae73a67c4d38865b984c94bbda581bf1a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_oscillators_lfxo_cap_set</definition>
        <argsstring>(NRF_OSCILLATORS_Type *p_reg, nrf_oscillators_lfxo_cap_t cap)</argsstring>
        <name>nrf_oscillators_lfxo_cap_set</name>
        <param>
          <type>NRF_OSCILLATORS_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__oscillators__hal_1gaa5acaa88c6acb9bd9ef6aa7532802dab" kindref="member">nrf_oscillators_lfxo_cap_t</ref></type>
          <declname>cap</declname>
        </param>
        <briefdescription>
<para>Function for configuring the internal capacitors of LFXO. </para>
        </briefdescription>
        <detaileddescription>
<para>For SoCs other than nRF5340, to calculate the correct <computeroutput>cap_value</computeroutput>, use <ref refid="group__nrf__oscillators__hal_1ga047947a0533ce531b37b6df2933660ab" kindref="member">OSCILLATORS_LFXO_CAP_CALCULATE</ref> macro.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">cap</parametername>
</parameternamelist>
<parameterdescription>
<para>Capacitors configuration. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_oscillators.h" line="256" column="24" bodyfile="hal/nrf_oscillators.h" bodystart="256" bodyend="260" declfile="hal/nrf_oscillators.h" declline="207" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__oscillators__hal_1gaae87839f39625fa0b38180fe64275411" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_oscillators_hfxo_cap_set</definition>
        <argsstring>(NRF_OSCILLATORS_Type *p_reg, bool enable, uint32_t cap_value)</argsstring>
        <name>nrf_oscillators_hfxo_cap_set</name>
        <param>
          <type>NRF_OSCILLATORS_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>enable</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>cap_value</declname>
        </param>
        <briefdescription>
<para>Function for configuring the internal capacitors of HFXO. </para>
        </briefdescription>
        <detaileddescription>
<para>To calculate the correct <computeroutput>cap_value</computeroutput>, use <ref refid="group__nrf__oscillators__hal_1ga79f80061ebde376cf9327d37d9a86f09" kindref="member">OSCILLATORS_HFXO_CAP_CALCULATE</ref> macro.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">enable</parametername>
</parameternamelist>
<parameterdescription>
<para>True if internal capacitors are to be enabled, false otherwise. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">cap_value</parametername>
</parameternamelist>
<parameterdescription>
<para>Value representing capacitance, calculated using provided equation. Ignored when internal capacitors are disabled. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_oscillators.h" line="262" column="24" bodyfile="hal/nrf_oscillators.h" bodystart="262" bodyend="274" declfile="hal/nrf_oscillators.h" declline="220" declcolumn="24"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__nrf__oscillators__hal_1ga266b6c424a0a02f5d99b4f92deefd24a" prot="public" static="no">
        <name>NRF_OSCILLATORS_HAS_PLL</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Symbol indicating whether PLL is present. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_oscillators.h" line="52" column="9" bodyfile="hal/nrf_oscillators.h" bodystart="52" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__oscillators__hal_1gad13423d5764a830e57599cbc3a38d6d0" prot="public" static="no">
        <name>NRF_OSCILLATORS_HAS_CLOCK_QUALITY_IND</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Symbol indicating whether clock quality indicator is present. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_oscillators.h" line="59" column="9" bodyfile="hal/nrf_oscillators.h" bodystart="59" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__oscillators__hal_1ga1747abe0e09891aebbf82f615be84b06" prot="public" static="no">
        <name>NRF_OSCILLATORS_HAS_LFXO_CAP_AS_INT_VALUE</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Symbol indicating whether configuration of internal capacitor using integer value is present. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_oscillators.h" line="66" column="9" bodyfile="hal/nrf_oscillators.h" bodystart="66" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__oscillators__hal_1ga50df05bf362666b1863ed5a43d06cb8c" prot="public" static="no">
        <name>NRF_OSCILLATORS_HAS_LFXO_BYPASS</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Symbol indicating whether LFXO bypass is present. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_oscillators.h" line="73" column="9" bodyfile="hal/nrf_oscillators.h" bodystart="73" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__oscillators__hal_1ga79f80061ebde376cf9327d37d9a86f09" prot="public" static="no">
        <name>OSCILLATORS_HFXO_CAP_CALCULATE</name>
        <param><defname>p_ficr_reg</defname></param>
        <param><defname>cap_val</defname></param>
        <initializer>    ((((p_ficr_reg-&gt;XOSC32MTRIM &amp; FICR_XOSC32MTRIM_SLOPE_Msk) \
       &lt;&lt; FICR_XOSC32MTRIM_SLOPE_Pos) / 16 + 1) *             \
     (cap_val * 2 - 14) +                                     \
     ((p_ficr_reg-&gt;XOSC32MTRIM &amp; FICR_XOSC32MTRIM_OFFSET_Msk) \
       &lt;&lt; FICR_XOSC32MTRIM_OFFSET_Pos))</initializer>
        <briefdescription>
<para>Macro for calculating HFXO internal capacitor value. </para>
        </briefdescription>
        <detaileddescription>
<para>Depending on the SoC used, a range of capacitance of internal capacitors is as follows:<itemizedlist>
<listitem><para>From 7 pF to 20 pF in 0.5 pF steps for nRF5340.</para>
</listitem><listitem><para>From 4 pF to 17 pF in 0.25 pF steps for other SoCs. This macro should be used to calculate argument&apos;s value for <ref refid="group__nrf__oscillators__hal_1gaae87839f39625fa0b38180fe64275411" kindref="member">nrf_oscillators_hfxo_cap_set</ref> function. </para>
</listitem></itemizedlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_oscillators.h" line="87" column="9" bodyfile="hal/nrf_oscillators.h" bodystart="87" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__oscillators__hal_1ga047947a0533ce531b37b6df2933660ab" prot="public" static="no">
        <name>OSCILLATORS_LFXO_CAP_CALCULATE</name>
        <param><defname>p_ficr_reg</defname></param>
        <param><defname>cap_val</defname></param>
        <initializer>    ((((cap_val - 4) * (((p_ficr_reg-&gt;XOSC32KTRIM &amp; FICR_XOSC32KTRIM_SLOPE_Msk) \
                          &lt;&lt; FICR_XOSC32KTRIM_SLOPE_Pos)) + 392) &gt;&gt; 3 +         \
      ((p_ficr_reg-&gt;XOSC32KTRIM &amp; FICR_XOSC32KTRIM_OFFSET_Msk)                  \
       &lt;&lt; FICR_XOSC32KTRIM_OFFSET_Pos)) &gt;&gt; 6)</initializer>
        <briefdescription>
<para>Macro for calculating LFXO internal capacitor value. </para>
        </briefdescription>
        <detaileddescription>
<para>The capacitance of internal capacitors ranges from 4 pF to 18 pF in 0.5 pF steps. This macro should be used to calculate argument&apos;s value for <ref refid="group__nrf__oscillators__hal_1gae73a67c4d38865b984c94bbda581bf1a" kindref="member">nrf_oscillators_lfxo_cap_set</ref> function. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_oscillators.h" line="109" column="9" bodyfile="hal/nrf_oscillators.h" bodystart="109" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__oscillators__hal_1ga8580045a95f733471538a551ba78ab26" prot="public" static="no">
        <name>NRF_OSCILLATORS_LFXO_CAP_EXTERNAL</name>
        <initializer>((<ref refid="group__nrf__oscillators__hal_1gaa5acaa88c6acb9bd9ef6aa7532802dab" kindref="member">nrf_oscillators_lfxo_cap_t</ref>)0)</initializer>
        <briefdescription>
<para>Symbol specifying usage of external capacitors. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_oscillators.h" line="140" column="9" bodyfile="hal/nrf_oscillators.h" bodystart="140" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Hardware access layer for managing the OSCILLATORS peripheral. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
