<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="group__nrfx__rtc" kind="group">
    <compoundname>nrfx_rtc</compoundname>
    <title>RTC driver</title>
    <innerclass refid="structnrfx__rtc__t" prot="public">nrfx_rtc_t</innerclass>
    <innerclass refid="structnrfx__rtc__config__t" prot="public">nrfx_rtc_config_t</innerclass>
    <innergroup refid="group__nrfx__rtc__config">RTC peripheral driver configuration</innergroup>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="group__nrfx__rtc_1ga4235cc0d8ffbe4453d42d2a345c2ced5" prot="public" static="no" strong="no">
        <type></type>
        <name>nrfx_rtc_int_type_t</name>
        <enumvalue id="group__nrfx__rtc_1gga4235cc0d8ffbe4453d42d2a345c2ced5a5b83680bf4d0cafdf204c7d33e8971ac" prot="public">
          <name>NRFX_RTC_INT_COMPARE0</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Interrupt from COMPARE0 event. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrfx__rtc_1gga4235cc0d8ffbe4453d42d2a345c2ced5a88db73142b250f39f262e301712c0712" prot="public">
          <name>NRFX_RTC_INT_COMPARE1</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Interrupt from COMPARE1 event. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrfx__rtc_1gga4235cc0d8ffbe4453d42d2a345c2ced5a98cdd375c955be7d9bd4a847a09e537b" prot="public">
          <name>NRFX_RTC_INT_COMPARE2</name>
          <initializer>= 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Interrupt from COMPARE2 event. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrfx__rtc_1gga4235cc0d8ffbe4453d42d2a345c2ced5a8ae4c31081fbef867ac09153af515e88" prot="public">
          <name>NRFX_RTC_INT_COMPARE3</name>
          <initializer>= 3</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Interrupt from COMPARE3 event. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrfx__rtc_1gga4235cc0d8ffbe4453d42d2a345c2ced5a8b1326e59ee3b632c3fd1a03ce00c481" prot="public">
          <name>NRFX_RTC_INT_TICK</name>
          <initializer>= 4</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Interrupt from TICK event. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrfx__rtc_1gga4235cc0d8ffbe4453d42d2a345c2ced5add44ed0fbf8aa2f9accae77a56b4e3b0" prot="public">
          <name>NRFX_RTC_INT_OVERFLOW</name>
          <initializer>= 5</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Interrupt from OVERFLOW event. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>RTC driver interrupt types. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/include/nrfx_rtc.h" line="55" column="1" bodyfile="drivers/include/nrfx_rtc.h" bodystart="56" bodyend="63"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group__nrfx__rtc_1ga2d9917b3a91377543e41316107291c73" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* nrfx_rtc_handler_t) (nrfx_rtc_int_type_t int_type)</definition>
        <argsstring>)(nrfx_rtc_int_type_t int_type)</argsstring>
        <name>nrfx_rtc_handler_t</name>
        <briefdescription>
<para>RTC driver instance handler type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/include/nrfx_rtc.h" line="115" column="9" bodyfile="drivers/include/nrfx_rtc.h" bodystart="115" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__nrfx__rtc_1ga9a8b57294384f1fcef9b15469ea192aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__nrfx__error__codes_1ga2449720f8fa17b22243218068459a24b" kindref="member">nrfx_err_t</ref></type>
        <definition>nrfx_err_t nrfx_rtc_init</definition>
        <argsstring>(nrfx_rtc_t const *p_instance, nrfx_rtc_config_t const *p_config, nrfx_rtc_handler_t handler)</argsstring>
        <name>nrfx_rtc_init</name>
        <param>
          <type><ref refid="structnrfx__rtc__t" kindref="compound">nrfx_rtc_t</ref> const *</type>
          <declname>p_instance</declname>
        </param>
        <param>
          <type><ref refid="structnrfx__rtc__config__t" kindref="compound">nrfx_rtc_config_t</ref> const *</type>
          <declname>p_config</declname>
        </param>
        <param>
          <type><ref refid="group__nrfx__rtc_1ga2d9917b3a91377543e41316107291c73" kindref="member">nrfx_rtc_handler_t</ref></type>
          <declname>handler</declname>
        </param>
        <briefdescription>
<para>Function for initializing the RTC driver instance. </para>
        </briefdescription>
        <detaileddescription>
<para>After initialization, the instance is in power off state.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_instance</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the driver instance structure. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">p_config</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure with the initial configuration. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">handler</parametername>
</parameternamelist>
<parameterdescription>
<para>Event handler provided by the user. Must not be NULL.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>NRFX_SUCCESS</parametername>
</parameternamelist>
<parameterdescription>
<para>Successfully initialized. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NRFX_ERROR_ALREADY</parametername>
</parameternamelist>
<parameterdescription>
<para>The driver is already initialized. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NRFX_ERROR_INVALID_STATE</parametername>
</parameternamelist>
<parameterdescription>
<para>The driver is already initialized. Deprecated - use <ref refid="group__nrfx__error__codes_1gga2449720f8fa17b22243218068459a24badc3fc33e8a7dc8b9a9547fe07b437efd" kindref="member">NRFX_ERROR_ALREADY</ref> instead. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/include/nrfx_rtc.h" line="132" column="12" declfile="drivers/include/nrfx_rtc.h" declline="132" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfx__rtc_1ga406f0d972cb6323ce417636aad7f5047" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nrfx_rtc_uninit</definition>
        <argsstring>(nrfx_rtc_t const *p_instance)</argsstring>
        <name>nrfx_rtc_uninit</name>
        <param>
          <type><ref refid="structnrfx__rtc__t" kindref="compound">nrfx_rtc_t</ref> const *</type>
          <declname>p_instance</declname>
        </param>
        <briefdescription>
<para>Function for uninitializing the RTC driver instance. </para>
        </briefdescription>
        <detaileddescription>
<para>After uninitialization, the instance is in idle state. The hardware should return to the state before initialization.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_instance</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the driver instance structure. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/include/nrfx_rtc.h" line="144" column="6" declfile="drivers/include/nrfx_rtc.h" declline="144" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfx__rtc_1ga101ec3c43d224e8980c962fe07a72b9d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool nrfx_rtc_init_check</definition>
        <argsstring>(nrfx_rtc_t const *p_instance)</argsstring>
        <name>nrfx_rtc_init_check</name>
        <param>
          <type><ref refid="structnrfx__rtc__t" kindref="compound">nrfx_rtc_t</ref> const *</type>
          <declname>p_instance</declname>
        </param>
        <briefdescription>
<para>Function for checking if the RTC driver instance is initialized. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_instance</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the driver instance structure.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>Instance is already initialized. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>Instance is not initialized. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/include/nrfx_rtc.h" line="154" column="6" declfile="drivers/include/nrfx_rtc.h" declline="154" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfx__rtc_1ga1f667371c73922bd4cf93f4e3af14ef3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nrfx_rtc_enable</definition>
        <argsstring>(nrfx_rtc_t const *p_instance)</argsstring>
        <name>nrfx_rtc_enable</name>
        <param>
          <type><ref refid="structnrfx__rtc__t" kindref="compound">nrfx_rtc_t</ref> const *</type>
          <declname>p_instance</declname>
        </param>
        <briefdescription>
<para>Function for enabling the RTC driver instance. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_instance</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the driver instance structure. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/include/nrfx_rtc.h" line="161" column="6" declfile="drivers/include/nrfx_rtc.h" declline="161" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfx__rtc_1ga448bc09b25c098582dd07b471ea89c1c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nrfx_rtc_disable</definition>
        <argsstring>(nrfx_rtc_t const *p_instance)</argsstring>
        <name>nrfx_rtc_disable</name>
        <param>
          <type><ref refid="structnrfx__rtc__t" kindref="compound">nrfx_rtc_t</ref> const *</type>
          <declname>p_instance</declname>
        </param>
        <briefdescription>
<para>Function for disabling the RTC driver instance. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_instance</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the driver instance structure. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/include/nrfx_rtc.h" line="168" column="6" declfile="drivers/include/nrfx_rtc.h" declline="168" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfx__rtc_1ga9504c08d2acf713e87c9b9f2fe01aae1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__nrfx__error__codes_1ga2449720f8fa17b22243218068459a24b" kindref="member">nrfx_err_t</ref></type>
        <definition>nrfx_err_t nrfx_rtc_cc_set</definition>
        <argsstring>(nrfx_rtc_t const *p_instance, uint32_t channel, uint32_t val, bool enable_irq)</argsstring>
        <name>nrfx_rtc_cc_set</name>
        <param>
          <type><ref refid="structnrfx__rtc__t" kindref="compound">nrfx_rtc_t</ref> const *</type>
          <declname>p_instance</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>channel</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>val</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>enable_irq</declname>
        </param>
        <briefdescription>
<para>Function for setting a compare channel. </para>
        </briefdescription>
        <detaileddescription>
<para>The function powers on the instance if the instance was in power off state.</para>
<para>The driver is not entering a critical section when configuring RTC, which means that it can be preempted for a certain amount of time. When the driver was preempted and the value to be set is short in time, there is a risk that the driver sets a compare value that is behind. In this case, if the reliable mode is enabled for the specified instance, the risk is handled. However, to detect if the requested value is behind, this mode makes the following assumptions:<itemizedlist>
<listitem><para>The maximum preemption time in ticks (8-bit value) is known and is less than 7.7 ms (for prescaler = 0, RTC frequency 32 kHz).</para>
</listitem><listitem><para>The requested absolute compare value is not bigger than (0x00FFFFFF)-tick_latency. It is the user&apos;s responsibility to ensure this.</para>
</listitem></itemizedlist>
</para>
<para><simplesect kind="warning"><para>Once the compare event is received, corresponding compare channel will be disabled before executing event handler provided by the user.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_instance</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the driver instance structure. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">channel</parametername>
</parameternamelist>
<parameterdescription>
<para>One of the channels of the instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">val</parametername>
</parameternamelist>
<parameterdescription>
<para>Absolute value to be set in the compare register. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">enable_irq</parametername>
</parameternamelist>
<parameterdescription>
<para>True to enable the interrupt. False to disable the interrupt.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>NRFX_SUCCESS</parametername>
</parameternamelist>
<parameterdescription>
<para>The procedure is successful. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NRFX_ERROR_TIMEOUT</parametername>
</parameternamelist>
<parameterdescription>
<para>The compare is not set because the request value is behind the current counter value. This error can only be reported if the reliable mode is enabled. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/include/nrfx_rtc.h" line="199" column="12" declfile="drivers/include/nrfx_rtc.h" declline="199" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfx__rtc_1gab5cb54f053d45d8089d61577bcaa474c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__nrfx__error__codes_1ga2449720f8fa17b22243218068459a24b" kindref="member">nrfx_err_t</ref></type>
        <definition>nrfx_err_t nrfx_rtc_cc_disable</definition>
        <argsstring>(nrfx_rtc_t const *p_instance, uint32_t channel)</argsstring>
        <name>nrfx_rtc_cc_disable</name>
        <param>
          <type><ref refid="structnrfx__rtc__t" kindref="compound">nrfx_rtc_t</ref> const *</type>
          <declname>p_instance</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>channel</declname>
        </param>
        <briefdescription>
<para>Function for disabling a channel. </para>
        </briefdescription>
        <detaileddescription>
<para>This function disables channel events and channel interrupts.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_instance</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the driver instance structure. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">channel</parametername>
</parameternamelist>
<parameterdescription>
<para>One of the channels of the instance.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>NRFX_SUCCESS</parametername>
</parameternamelist>
<parameterdescription>
<para>The procedure is successful. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NRFX_ERROR_TIMEOUT</parametername>
</parameternamelist>
<parameterdescription>
<para>Interrupt is pending on the requested channel. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/include/nrfx_rtc.h" line="215" column="12" declfile="drivers/include/nrfx_rtc.h" declline="215" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfx__rtc_1gadc8789d8f82bc95a20d74b42d560b691" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nrfx_rtc_tick_enable</definition>
        <argsstring>(nrfx_rtc_t const *p_instance, bool enable_irq)</argsstring>
        <name>nrfx_rtc_tick_enable</name>
        <param>
          <type><ref refid="structnrfx__rtc__t" kindref="compound">nrfx_rtc_t</ref> const *</type>
          <declname>p_instance</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>enable_irq</declname>
        </param>
        <briefdescription>
<para>Function for enabling the TICK event. </para>
        </briefdescription>
        <detaileddescription>
<para>This function enables the tick event and optionally the interrupt.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_instance</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the driver instance structure. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">enable_irq</parametername>
</parameternamelist>
<parameterdescription>
<para>True to enable the interrupt. False to disable the interrupt. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/include/nrfx_rtc.h" line="225" column="6" declfile="drivers/include/nrfx_rtc.h" declline="225" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfx__rtc_1gae0be2ec1d09a2237c6f88b0571a0783b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nrfx_rtc_tick_disable</definition>
        <argsstring>(nrfx_rtc_t const *p_instance)</argsstring>
        <name>nrfx_rtc_tick_disable</name>
        <param>
          <type><ref refid="structnrfx__rtc__t" kindref="compound">nrfx_rtc_t</ref> const *</type>
          <declname>p_instance</declname>
        </param>
        <briefdescription>
<para>Function for disabling the TICK event. </para>
        </briefdescription>
        <detaileddescription>
<para>This function disables the TICK event and interrupt.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_instance</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the driver instance structure. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/include/nrfx_rtc.h" line="234" column="6" declfile="drivers/include/nrfx_rtc.h" declline="234" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfx__rtc_1ga8510ad2c704fdd55d15a5b29a95a5f02" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nrfx_rtc_overflow_enable</definition>
        <argsstring>(nrfx_rtc_t const *p_instance, bool enable_irq)</argsstring>
        <name>nrfx_rtc_overflow_enable</name>
        <param>
          <type><ref refid="structnrfx__rtc__t" kindref="compound">nrfx_rtc_t</ref> const *</type>
          <declname>p_instance</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>enable_irq</declname>
        </param>
        <briefdescription>
<para>Function for enabling overflow. </para>
        </briefdescription>
        <detaileddescription>
<para>This function enables the overflow event and optionally the interrupt.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_instance</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the driver instance structure. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">enable_irq</parametername>
</parameternamelist>
<parameterdescription>
<para>True to enable the interrupt. False to disable the interrupt. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/include/nrfx_rtc.h" line="244" column="6" declfile="drivers/include/nrfx_rtc.h" declline="244" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfx__rtc_1ga31427da83dc1ad0d464c9ed53d4fb7dd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nrfx_rtc_overflow_disable</definition>
        <argsstring>(nrfx_rtc_t const *p_instance)</argsstring>
        <name>nrfx_rtc_overflow_disable</name>
        <param>
          <type><ref refid="structnrfx__rtc__t" kindref="compound">nrfx_rtc_t</ref> const *</type>
          <declname>p_instance</declname>
        </param>
        <briefdescription>
<para>Function for disabling overflow. </para>
        </briefdescription>
        <detaileddescription>
<para>This function disables the overflow event and interrupt.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_instance</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the driver instance structure. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/include/nrfx_rtc.h" line="253" column="6" declfile="drivers/include/nrfx_rtc.h" declline="253" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfx__rtc_1gaca28f8f39558db4396a4de4bcd9ef954" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t nrfx_rtc_max_ticks_get</definition>
        <argsstring>(nrfx_rtc_t const *p_instance)</argsstring>
        <name>nrfx_rtc_max_ticks_get</name>
        <param>
          <type><ref refid="structnrfx__rtc__t" kindref="compound">nrfx_rtc_t</ref> const *</type>
          <declname>p_instance</declname>
        </param>
        <briefdescription>
<para>Function for getting the maximum relative tick value that can be set in the compare channel. </para>
        </briefdescription>
        <detaileddescription>
<para>When a stack (for example SoftDevice) is used and it occupies high priority interrupts, the application code can be interrupted at any moment for a certain period of time. If the reliable mode is enabled, the provided maximum latency is taken into account and the return value is smaller than the RTC counter resolution. If the reliable mode is disabled, the return value equals the counter resolution.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_instance</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the driver instance structure.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Maximum ticks value. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/include/nrfx_rtc.h" line="268" column="10" declfile="drivers/include/nrfx_rtc.h" declline="268" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfx__rtc_1ga565adfe56c6b5e28ffba007c5961fdc9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRFX_STATIC_INLINE void</type>
        <definition>NRFX_STATIC_INLINE void nrfx_rtc_int_disable</definition>
        <argsstring>(nrfx_rtc_t const *p_instance, uint32_t *p_mask)</argsstring>
        <name>nrfx_rtc_int_disable</name>
        <param>
          <type><ref refid="structnrfx__rtc__t" kindref="compound">nrfx_rtc_t</ref> const *</type>
          <declname>p_instance</declname>
        </param>
        <param>
          <type>uint32_t *</type>
          <declname>p_mask</declname>
        </param>
        <briefdescription>
<para>Function for disabling all instance interrupts. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_instance</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the driver instance structure. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">p_mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the location where the mask is filled. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/include/nrfx_rtc.h" line="330" column="25" bodyfile="drivers/include/nrfx_rtc.h" bodystart="330" bodyend="337" declfile="drivers/include/nrfx_rtc.h" declline="276" declcolumn="25"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfx__rtc_1gac6abe05f2debbd0607c5253b0f1146cd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRFX_STATIC_INLINE void</type>
        <definition>NRFX_STATIC_INLINE void nrfx_rtc_int_enable</definition>
        <argsstring>(nrfx_rtc_t const *p_instance, uint32_t mask)</argsstring>
        <name>nrfx_rtc_int_enable</name>
        <param>
          <type><ref refid="structnrfx__rtc__t" kindref="compound">nrfx_rtc_t</ref> const *</type>
          <declname>p_instance</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Function for enabling instance interrupts. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_instance</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the driver instance structure. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of interrupts to enable. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/include/nrfx_rtc.h" line="339" column="25" bodyfile="drivers/include/nrfx_rtc.h" bodystart="339" bodyend="342" declfile="drivers/include/nrfx_rtc.h" declline="285" declcolumn="25"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfx__rtc_1ga89f03e135536c76e3d8f447e365da2d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRFX_STATIC_INLINE uint32_t</type>
        <definition>NRFX_STATIC_INLINE uint32_t nrfx_rtc_counter_get</definition>
        <argsstring>(nrfx_rtc_t const *p_instance)</argsstring>
        <name>nrfx_rtc_counter_get</name>
        <param>
          <type><ref refid="structnrfx__rtc__t" kindref="compound">nrfx_rtc_t</ref> const *</type>
          <declname>p_instance</declname>
        </param>
        <briefdescription>
<para>Function for retrieving the current counter value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_instance</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the driver instance structure.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Counter value. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/include/nrfx_rtc.h" line="344" column="29" bodyfile="drivers/include/nrfx_rtc.h" bodystart="344" bodyend="347" declfile="drivers/include/nrfx_rtc.h" declline="294" declcolumn="29"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfx__rtc_1ga2fadb1b4019e277b9bc3eab16b11dfe8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRFX_STATIC_INLINE void</type>
        <definition>NRFX_STATIC_INLINE void nrfx_rtc_counter_clear</definition>
        <argsstring>(nrfx_rtc_t const *p_instance)</argsstring>
        <name>nrfx_rtc_counter_clear</name>
        <param>
          <type><ref refid="structnrfx__rtc__t" kindref="compound">nrfx_rtc_t</ref> const *</type>
          <declname>p_instance</declname>
        </param>
        <briefdescription>
<para>Function for clearing the counter value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_instance</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the driver instance structure. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/include/nrfx_rtc.h" line="349" column="25" bodyfile="drivers/include/nrfx_rtc.h" bodystart="349" bodyend="352" declfile="drivers/include/nrfx_rtc.h" declline="301" declcolumn="25"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfx__rtc_1gab124f08aa8d844f017033c9f51cc1553" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRFX_STATIC_INLINE uint32_t</type>
        <definition>NRFX_STATIC_INLINE uint32_t nrfx_rtc_task_address_get</definition>
        <argsstring>(nrfx_rtc_t const *p_instance, nrf_rtc_task_t task)</argsstring>
        <name>nrfx_rtc_task_address_get</name>
        <param>
          <type><ref refid="structnrfx__rtc__t" kindref="compound">nrfx_rtc_t</ref> const *</type>
          <declname>p_instance</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__rtc__hal_1gab1bbbc39c6dac153baf61aeae33c4274" kindref="member">nrf_rtc_task_t</ref></type>
          <declname>task</declname>
        </param>
        <briefdescription>
<para>Function for returning a requested task address for the RTC driver instance. </para>
        </briefdescription>
        <detaileddescription>
<para>The task address can be used by the PPI module.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_instance</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">task</parametername>
</parameternamelist>
<parameterdescription>
<para>One of the peripheral tasks.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Address of task register. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/include/nrfx_rtc.h" line="354" column="29" bodyfile="drivers/include/nrfx_rtc.h" bodystart="354" bodyend="358" declfile="drivers/include/nrfx_rtc.h" declline="313" declcolumn="29"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfx__rtc_1ga663345fa4209016b8f36e489ce78b948" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRFX_STATIC_INLINE uint32_t</type>
        <definition>NRFX_STATIC_INLINE uint32_t nrfx_rtc_event_address_get</definition>
        <argsstring>(nrfx_rtc_t const *p_instance, nrf_rtc_event_t event)</argsstring>
        <name>nrfx_rtc_event_address_get</name>
        <param>
          <type><ref refid="structnrfx__rtc__t" kindref="compound">nrfx_rtc_t</ref> const *</type>
          <declname>p_instance</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__rtc__hal_1gaeefe46b9280fd5e11516b4148b9c5950" kindref="member">nrf_rtc_event_t</ref></type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>Function for returning a requested event address for the RTC driver instance. </para>
        </briefdescription>
        <detaileddescription>
<para>The event address can be used by the PPI module.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_instance</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the driver instance structure. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>One of the peripheral events.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Address of event register. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/include/nrfx_rtc.h" line="360" column="29" bodyfile="drivers/include/nrfx_rtc.h" bodystart="360" bodyend="364" declfile="drivers/include/nrfx_rtc.h" declline="326" declcolumn="29"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__nrfx__rtc_1ga7b2cc7916d9bf6b1398ca6fcc3d56d4a" prot="public" static="no">
        <name>NRFX_RTC_US_TO_TICKS</name>
        <param><defname>us</defname></param>
        <param><defname>freq</defname></param>
        <initializer>(((us) * (freq)) / 1000000U)</initializer>
        <briefdescription>
<para>Macro for converting microseconds into ticks. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/include/nrfx_rtc.h" line="52" column="9" bodyfile="drivers/include/nrfx_rtc.h" bodystart="52" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrfx__rtc_1gae1ce32a651d4e4a964b870707f4d3e54" prot="public" static="no">
        <name>NRFX_RTC_INSTANCE</name>
        <param><defname>id</defname></param>
        <initializer>{                                                               \
    .p_reg            = <ref refid="group__nrfx__utils_1ga5ea61d0994f6fb1ab5ed59d44f6a7ce9" kindref="member">NRFX_CONCAT</ref>(NRF_, RTC, id),             \
    .instance_id      = <ref refid="group__nrfx__utils_1ga5ea61d0994f6fb1ab5ed59d44f6a7ce9" kindref="member">NRFX_CONCAT</ref>(NRFX_RTC, id, _INST_IDX),   \
    .cc_channel_count = <ref refid="group__nrf__rtc__hal_1ga50661eb9bf555e2b93734014aa76f9bb" kindref="member">NRF_RTC_CC_CHANNEL_COUNT</ref>(id),           \
}</initializer>
        <briefdescription>
<para>Macro for creating an RTC driver instance. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/include/nrfx_rtc.h" line="74" column="9" bodyfile="drivers/include/nrfx_rtc.h" bodystart="74" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrfx__rtc_1gabcc97bc7968dfd9a42dc325a8e9dec60" prot="public" static="no">
        <name>NRFX_RTC_DEFAULT_CONFIG</name>
        <initializer>{                                                                \
    .prescaler          = <ref refid="group__nrf__rtc__hal_1ga2cf5178522f721973cfc33e89a750e2e" kindref="member">NRF_RTC_FREQ_TO_PRESCALER</ref>(32768),      \
    .interrupt_priority = <ref refid="group__nrfx__rtc__config_1ga2a91a11c40d7383fa7abff02bc374eea" kindref="member">NRFX_RTC_DEFAULT_CONFIG_IRQ_PRIORITY</ref>,  \
    .tick_latency       = <ref refid="group__nrfx__rtc_1ga7b2cc7916d9bf6b1398ca6fcc3d56d4a" kindref="member">NRFX_RTC_US_TO_TICKS</ref>(2000, 32768),     \
    .reliable           = false,                                 \
}</initializer>
        <briefdescription>
<para>RTC driver default configuration. </para>
        </briefdescription>
        <detaileddescription>
<para>This configuration sets up RTC with the following options:<itemizedlist>
<listitem><para>frequency 32.768 kHz</para>
</listitem><listitem><para>maximum latency 2000 us</para>
</listitem><listitem><para>reliability checks disabled </para>
</listitem></itemizedlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/include/nrfx_rtc.h" line="106" column="9" bodyfile="drivers/include/nrfx_rtc.h" bodystart="106" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrfx__rtc_1ga593591e081e97f59e391aad2eeb04da4" prot="public" static="no">
        <name>NRFX_RTC_INST_HANDLER_GET</name>
        <param><defname>idx</defname></param>
        <initializer><ref refid="group__nrfx__common_1gaa78d21b07d22f7a4bfbd1feda51ef1f4" kindref="member">NRFX_CONCAT_3</ref>(nrfx_rtc_, idx, _irq_handler)</initializer>
        <briefdescription>
<para>Macro returning RTC interrupt handler. </para>
        </briefdescription>
        <detaileddescription>
<para>param[in] idx RTC index.</para>
<para><simplesect kind="return"><para>Interrupt handler. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/include/nrfx_rtc.h" line="374" column="9" bodyfile="drivers/include/nrfx_rtc.h" bodystart="374" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Real Timer Counter (RTC) peripheral driver. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
