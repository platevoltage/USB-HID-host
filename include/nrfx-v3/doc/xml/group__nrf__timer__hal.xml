<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="group__nrf__timer__hal" kind="group">
    <compoundname>nrf_timer_hal</compoundname>
    <title>TIMER HAL</title>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="group__nrf__timer__hal_1ga1db410e4a6b7e38de383220b20724906" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_timer_task_t</name>
        <enumvalue id="group__nrf__timer__hal_1gga1db410e4a6b7e38de383220b20724906ab2af686e5e4bf199b32a330f009f1ae0" prot="public">
          <name>NRF_TIMER_TASK_START</name>
          <initializer>= offsetof(NRF_TIMER_Type, TASKS_START)</initializer>
          <briefdescription>
<para>Task for starting the timer. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__timer__hal_1gga1db410e4a6b7e38de383220b20724906a171226edb83da69efd7189e0f7593990" prot="public">
          <name>NRF_TIMER_TASK_STOP</name>
          <initializer>= offsetof(NRF_TIMER_Type, TASKS_STOP)</initializer>
          <briefdescription>
<para>Task for stopping the timer. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__timer__hal_1gga1db410e4a6b7e38de383220b20724906a5bde5d2faa0fde13590ffbae0a216650" prot="public">
          <name>NRF_TIMER_TASK_COUNT</name>
          <initializer>= offsetof(NRF_TIMER_Type, TASKS_COUNT)</initializer>
          <briefdescription>
<para>Task for incrementing the timer (in counter mode). </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__timer__hal_1gga1db410e4a6b7e38de383220b20724906ab956c87716b91ed2e00a34056399e384" prot="public">
          <name>NRF_TIMER_TASK_CLEAR</name>
          <initializer>= offsetof(NRF_TIMER_Type, TASKS_CLEAR)</initializer>
          <briefdescription>
<para>Task for resetting the timer value. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__timer__hal_1gga1db410e4a6b7e38de383220b20724906a70ae5a97962ac35439e77e973f8e1aba" prot="public">
          <name>NRF_TIMER_TASK_SHUTDOWN</name>
          <initializer>= offsetof(NRF_TIMER_Type, TASKS_SHUTDOWN)</initializer>
          <briefdescription>
<para>Task for powering off the timer. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__timer__hal_1gga1db410e4a6b7e38de383220b20724906a1596e7e7cea8a8d7017e0c2964f88f4a" prot="public">
          <name>NRF_TIMER_TASK_CAPTURE0</name>
          <initializer>= offsetof(NRF_TIMER_Type, TASKS_CAPTURE[0])</initializer>
          <briefdescription>
<para>Task for capturing the timer value on channel 0. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__timer__hal_1gga1db410e4a6b7e38de383220b20724906aa111674be32dba6853cfad957a3c3c17" prot="public">
          <name>NRF_TIMER_TASK_CAPTURE1</name>
          <initializer>= offsetof(NRF_TIMER_Type, TASKS_CAPTURE[1])</initializer>
          <briefdescription>
<para>Task for capturing the timer value on channel 1. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__timer__hal_1gga1db410e4a6b7e38de383220b20724906ae571cd4149d48b96dcd56d015dd828c6" prot="public">
          <name>NRF_TIMER_TASK_CAPTURE2</name>
          <initializer>= offsetof(NRF_TIMER_Type, TASKS_CAPTURE[2])</initializer>
          <briefdescription>
<para>Task for capturing the timer value on channel 2. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__timer__hal_1gga1db410e4a6b7e38de383220b20724906ac99434e7c1b808007a4052bdb6edae83" prot="public">
          <name>NRF_TIMER_TASK_CAPTURE3</name>
          <initializer>= offsetof(NRF_TIMER_Type, TASKS_CAPTURE[3])</initializer>
          <briefdescription>
<para>Task for capturing the timer value on channel 3. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__timer__hal_1gga1db410e4a6b7e38de383220b20724906aceb184002f93b7dcd65e4601202994c1" prot="public">
          <name>NRF_TIMER_TASK_CAPTURE4</name>
          <initializer>= offsetof(NRF_TIMER_Type, TASKS_CAPTURE[4])</initializer>
          <briefdescription>
<para>Task for capturing the timer value on channel 4. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__timer__hal_1gga1db410e4a6b7e38de383220b20724906a2d5f09f8db223252d69b222a516b0fb6" prot="public">
          <name>NRF_TIMER_TASK_CAPTURE5</name>
          <initializer>= offsetof(NRF_TIMER_Type, TASKS_CAPTURE[5])</initializer>
          <briefdescription>
<para>Task for capturing the timer value on channel 5. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__timer__hal_1gga1db410e4a6b7e38de383220b20724906aac8890bf8407ca05b16cd271e63a3d32" prot="public">
          <name>NRF_TIMER_TASK_CAPTURE6</name>
          <initializer>= offsetof(NRF_TIMER_Type, TASKS_CAPTURE[6])</initializer>
          <briefdescription>
<para>Task for capturing the timer value on channel 6. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__timer__hal_1gga1db410e4a6b7e38de383220b20724906a42923b80df0bde85c4c4c32b0a00ac44" prot="public">
          <name>NRF_TIMER_TASK_CAPTURE7</name>
          <initializer>= offsetof(NRF_TIMER_Type, TASKS_CAPTURE[7])</initializer>
          <briefdescription>
<para>Task for capturing the timer value on channel 7. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Timer tasks. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_timer.h" line="295" column="1" bodyfile="hal/nrf_timer.h" bodystart="296" bodyend="318"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__timer__hal_1ga6c7c835fd175129175fe2c08237af3c3" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_timer_event_t</name>
        <enumvalue id="group__nrf__timer__hal_1gga6c7c835fd175129175fe2c08237af3c3ad00ff73ba0ee5ea626289842ff9a209e" prot="public">
          <name>NRF_TIMER_EVENT_COMPARE0</name>
          <initializer>= offsetof(NRF_TIMER_Type, EVENTS_COMPARE[0])</initializer>
          <briefdescription>
<para>Event from compare channel 0. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__timer__hal_1gga6c7c835fd175129175fe2c08237af3c3af1963f4d77921395beae5cb9cc96e540" prot="public">
          <name>NRF_TIMER_EVENT_COMPARE1</name>
          <initializer>= offsetof(NRF_TIMER_Type, EVENTS_COMPARE[1])</initializer>
          <briefdescription>
<para>Event from compare channel 1. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__timer__hal_1gga6c7c835fd175129175fe2c08237af3c3a59bd12d538b43c38c52d044fddf1264a" prot="public">
          <name>NRF_TIMER_EVENT_COMPARE2</name>
          <initializer>= offsetof(NRF_TIMER_Type, EVENTS_COMPARE[2])</initializer>
          <briefdescription>
<para>Event from compare channel 2. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__timer__hal_1gga6c7c835fd175129175fe2c08237af3c3a62f321a35d357f116681bcefc956ab9d" prot="public">
          <name>NRF_TIMER_EVENT_COMPARE3</name>
          <initializer>= offsetof(NRF_TIMER_Type, EVENTS_COMPARE[3])</initializer>
          <briefdescription>
<para>Event from compare channel 3. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__timer__hal_1gga6c7c835fd175129175fe2c08237af3c3ad3ec1e6e7389be59d8621a643278a3d0" prot="public">
          <name>NRF_TIMER_EVENT_COMPARE4</name>
          <initializer>= offsetof(NRF_TIMER_Type, EVENTS_COMPARE[4])</initializer>
          <briefdescription>
<para>Event from compare channel 4. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__timer__hal_1gga6c7c835fd175129175fe2c08237af3c3a2373cf69bfaf2c43e9dcdd0cf45778fd" prot="public">
          <name>NRF_TIMER_EVENT_COMPARE5</name>
          <initializer>= offsetof(NRF_TIMER_Type, EVENTS_COMPARE[5])</initializer>
          <briefdescription>
<para>Event from compare channel 5. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__timer__hal_1gga6c7c835fd175129175fe2c08237af3c3a60747bf50f6bb4a3231bac181cd0b44e" prot="public">
          <name>NRF_TIMER_EVENT_COMPARE6</name>
          <initializer>= offsetof(NRF_TIMER_Type, EVENTS_COMPARE[6])</initializer>
          <briefdescription>
<para>Event from compare channel 6. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__timer__hal_1gga6c7c835fd175129175fe2c08237af3c3ad2db8124628821dce60a420ffd6af577" prot="public">
          <name>NRF_TIMER_EVENT_COMPARE7</name>
          <initializer>= offsetof(NRF_TIMER_Type, EVENTS_COMPARE[7])</initializer>
          <briefdescription>
<para>Event from compare channel 7. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Timer events. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_timer.h" line="321" column="1" bodyfile="hal/nrf_timer.h" bodystart="322" bodyend="339"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__timer__hal_1ga1dee3ab20f9dfa38bacf2502a8d1688c" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_timer_short_mask_t</name>
        <enumvalue id="group__nrf__timer__hal_1gga1dee3ab20f9dfa38bacf2502a8d1688cae953a4526a33bba2c89e2f240f7957d3" prot="public">
          <name>NRF_TIMER_SHORT_COMPARE0_STOP_MASK</name>
          <initializer>= TIMER_SHORTS_COMPARE0_STOP_Msk</initializer>
          <briefdescription>
<para>Shortcut for stopping the timer based on compare 0. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__timer__hal_1gga1dee3ab20f9dfa38bacf2502a8d1688ca25579236da5e7e307f35bf2472e53a06" prot="public">
          <name>NRF_TIMER_SHORT_COMPARE1_STOP_MASK</name>
          <initializer>= TIMER_SHORTS_COMPARE1_STOP_Msk</initializer>
          <briefdescription>
<para>Shortcut for stopping the timer based on compare 1. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__timer__hal_1gga1dee3ab20f9dfa38bacf2502a8d1688caeb8fbf05e1ecfab4ed6e59068e4edbe5" prot="public">
          <name>NRF_TIMER_SHORT_COMPARE2_STOP_MASK</name>
          <initializer>= TIMER_SHORTS_COMPARE2_STOP_Msk</initializer>
          <briefdescription>
<para>Shortcut for stopping the timer based on compare 2. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__timer__hal_1gga1dee3ab20f9dfa38bacf2502a8d1688ca7da4ad704f6d771c6242169885cff6c9" prot="public">
          <name>NRF_TIMER_SHORT_COMPARE3_STOP_MASK</name>
          <initializer>= TIMER_SHORTS_COMPARE3_STOP_Msk</initializer>
          <briefdescription>
<para>Shortcut for stopping the timer based on compare 3. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__timer__hal_1gga1dee3ab20f9dfa38bacf2502a8d1688ca3fea27648f52abf13cbd79b541cc2fa8" prot="public">
          <name>NRF_TIMER_SHORT_COMPARE4_STOP_MASK</name>
          <initializer>= TIMER_SHORTS_COMPARE4_STOP_Msk</initializer>
          <briefdescription>
<para>Shortcut for stopping the timer based on compare 4. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__timer__hal_1gga1dee3ab20f9dfa38bacf2502a8d1688cadd25209fb55d3053e0fea49fa7bf5a30" prot="public">
          <name>NRF_TIMER_SHORT_COMPARE5_STOP_MASK</name>
          <initializer>= TIMER_SHORTS_COMPARE5_STOP_Msk</initializer>
          <briefdescription>
<para>Shortcut for stopping the timer based on compare 5. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__timer__hal_1gga1dee3ab20f9dfa38bacf2502a8d1688cabe3383ecf928f64cb36b740a213cfa61" prot="public">
          <name>NRF_TIMER_SHORT_COMPARE6_STOP_MASK</name>
          <initializer>= TIMER_SHORTS_COMPARE6_STOP_Msk</initializer>
          <briefdescription>
<para>Shortcut for stopping the timer based on compare 6. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__timer__hal_1gga1dee3ab20f9dfa38bacf2502a8d1688cada6b4270434d037936ad6e37bd515eee" prot="public">
          <name>NRF_TIMER_SHORT_COMPARE7_STOP_MASK</name>
          <initializer>= TIMER_SHORTS_COMPARE7_STOP_Msk</initializer>
          <briefdescription>
<para>Shortcut for stopping the timer based on compare 7. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__timer__hal_1gga1dee3ab20f9dfa38bacf2502a8d1688ca98029953aa61f28bc923ff4ff9ab3a1d" prot="public">
          <name>NRF_TIMER_SHORT_COMPARE0_CLEAR_MASK</name>
          <initializer>= TIMER_SHORTS_COMPARE0_CLEAR_Msk</initializer>
          <briefdescription>
<para>Shortcut for clearing the timer based on compare 0. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__timer__hal_1gga1dee3ab20f9dfa38bacf2502a8d1688caee8d5836b72db83dcaee3c736edcc15a" prot="public">
          <name>NRF_TIMER_SHORT_COMPARE1_CLEAR_MASK</name>
          <initializer>= TIMER_SHORTS_COMPARE1_CLEAR_Msk</initializer>
          <briefdescription>
<para>Shortcut for clearing the timer based on compare 1. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__timer__hal_1gga1dee3ab20f9dfa38bacf2502a8d1688ca957c0d0f913ef652cfeb12b00fbcb16c" prot="public">
          <name>NRF_TIMER_SHORT_COMPARE2_CLEAR_MASK</name>
          <initializer>= TIMER_SHORTS_COMPARE2_CLEAR_Msk</initializer>
          <briefdescription>
<para>Shortcut for clearing the timer based on compare 2. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__timer__hal_1gga1dee3ab20f9dfa38bacf2502a8d1688cac183d1023a358683c0fd9152049c1d2f" prot="public">
          <name>NRF_TIMER_SHORT_COMPARE3_CLEAR_MASK</name>
          <initializer>= TIMER_SHORTS_COMPARE3_CLEAR_Msk</initializer>
          <briefdescription>
<para>Shortcut for clearing the timer based on compare 3. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__timer__hal_1gga1dee3ab20f9dfa38bacf2502a8d1688ca5a6362fd670f3d56124fa70d5ace963f" prot="public">
          <name>NRF_TIMER_SHORT_COMPARE4_CLEAR_MASK</name>
          <initializer>= TIMER_SHORTS_COMPARE4_CLEAR_Msk</initializer>
          <briefdescription>
<para>Shortcut for clearing the timer based on compare 4. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__timer__hal_1gga1dee3ab20f9dfa38bacf2502a8d1688ca7e3d851f156bc34a5bede57f40a68a77" prot="public">
          <name>NRF_TIMER_SHORT_COMPARE5_CLEAR_MASK</name>
          <initializer>= TIMER_SHORTS_COMPARE5_CLEAR_Msk</initializer>
          <briefdescription>
<para>Shortcut for clearing the timer based on compare 5. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__timer__hal_1gga1dee3ab20f9dfa38bacf2502a8d1688caffc6ebbe170e6c6af5594e4a24a6b433" prot="public">
          <name>NRF_TIMER_SHORT_COMPARE6_CLEAR_MASK</name>
          <initializer>= TIMER_SHORTS_COMPARE6_CLEAR_Msk</initializer>
          <briefdescription>
<para>Shortcut for clearing the timer based on compare 6. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__timer__hal_1gga1dee3ab20f9dfa38bacf2502a8d1688ca155ecf8913b698fdb329d6595c869566" prot="public">
          <name>NRF_TIMER_SHORT_COMPARE7_CLEAR_MASK</name>
          <initializer>= TIMER_SHORTS_COMPARE7_CLEAR_Msk</initializer>
          <briefdescription>
<para>Shortcut for clearing the timer based on compare 7. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Types of timer shortcuts. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_timer.h" line="342" column="1" bodyfile="hal/nrf_timer.h" bodystart="343" bodyend="376"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__timer__hal_1ga61044c286dc20ccb08df3988bc57a6f2" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_timer_mode_t</name>
        <enumvalue id="group__nrf__timer__hal_1gga61044c286dc20ccb08df3988bc57a6f2ad7bea280ee3b3c84bd9e89e2dc7f1f41" prot="public">
          <name>NRF_TIMER_MODE_TIMER</name>
          <initializer>= TIMER_MODE_MODE_Timer</initializer>
          <briefdescription>
<para>Timer mode: timer. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__timer__hal_1gga61044c286dc20ccb08df3988bc57a6f2a6cbeb70606627497a974c5f7f0064cc0" prot="public">
          <name>NRF_TIMER_MODE_COUNTER</name>
          <initializer>= TIMER_MODE_MODE_Counter</initializer>
          <briefdescription>
<para>Timer mode: counter. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__timer__hal_1gga61044c286dc20ccb08df3988bc57a6f2ac8924c802962ea8c7ee492403b339388" prot="public">
          <name>NRF_TIMER_MODE_LOW_POWER_COUNTER</name>
          <initializer>= TIMER_MODE_MODE_LowPowerCounter</initializer>
          <briefdescription>
<para>Timer mode: low-power counter. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Timer modes. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_timer.h" line="379" column="1" bodyfile="hal/nrf_timer.h" bodystart="380" bodyend="386"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__timer__hal_1ga567f81d672267a218a5b2f0155be3043" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_timer_bit_width_t</name>
        <enumvalue id="group__nrf__timer__hal_1gga567f81d672267a218a5b2f0155be3043aa6474251dab8733df9c2d6e5c00504b4" prot="public">
          <name>NRF_TIMER_BIT_WIDTH_8</name>
          <initializer>= TIMER_BITMODE_BITMODE_08Bit</initializer>
          <briefdescription>
<para>Timer bit width 8 bit. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__timer__hal_1gga567f81d672267a218a5b2f0155be3043a4c8f9ba039c905e7d207203ad06e8d4d" prot="public">
          <name>NRF_TIMER_BIT_WIDTH_16</name>
          <initializer>= TIMER_BITMODE_BITMODE_16Bit</initializer>
          <briefdescription>
<para>Timer bit width 16 bit. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__timer__hal_1gga567f81d672267a218a5b2f0155be3043a86bf8b22c7433f96a050fdeacbb89d5d" prot="public">
          <name>NRF_TIMER_BIT_WIDTH_24</name>
          <initializer>= TIMER_BITMODE_BITMODE_24Bit</initializer>
          <briefdescription>
<para>Timer bit width 24 bit. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__timer__hal_1gga567f81d672267a218a5b2f0155be3043ab2e052c7b94c85bff69d313c50a630a5" prot="public">
          <name>NRF_TIMER_BIT_WIDTH_32</name>
          <initializer>= TIMER_BITMODE_BITMODE_32Bit</initializer>
          <briefdescription>
<para>Timer bit width 32 bit. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Timer bit width. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_timer.h" line="389" column="1" bodyfile="hal/nrf_timer.h" bodystart="390" bodyend="395"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__timer__hal_1ga28862835cd77a9c8481ed04c7b1918eb" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_timer_frequency_t</name>
        <enumvalue id="group__nrf__timer__hal_1gga28862835cd77a9c8481ed04c7b1918eba91c798f0a0aaf8459805c081168dab56" prot="public">
          <name>NRF_TIMER_FREQ_16MHz</name>
          <initializer>= 0</initializer>
          <briefdescription>
<para>Timer frequency 16 MHz. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__timer__hal_1gga28862835cd77a9c8481ed04c7b1918ebae596ee499f96f4595a47aa7bd0dfa89d" prot="public">
          <name>NRF_TIMER_FREQ_8MHz</name>
          <briefdescription>
<para>Timer frequency 8 MHz. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__timer__hal_1gga28862835cd77a9c8481ed04c7b1918eba25f331254bd4ba10e83f19d3372991ca" prot="public">
          <name>NRF_TIMER_FREQ_4MHz</name>
          <briefdescription>
<para>Timer frequency 4 MHz. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__timer__hal_1gga28862835cd77a9c8481ed04c7b1918eba75544c550c24bafe6cf84486cece8d91" prot="public">
          <name>NRF_TIMER_FREQ_2MHz</name>
          <briefdescription>
<para>Timer frequency 2 MHz. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__timer__hal_1gga28862835cd77a9c8481ed04c7b1918eba6f65deaeeb070e60c8b5bef30638faf6" prot="public">
          <name>NRF_TIMER_FREQ_1MHz</name>
          <briefdescription>
<para>Timer frequency 1 MHz. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__timer__hal_1gga28862835cd77a9c8481ed04c7b1918ebae42c5424d5dd2d69cd9ff64d37ccf09e" prot="public">
          <name>NRF_TIMER_FREQ_500kHz</name>
          <briefdescription>
<para>Timer frequency 500 kHz. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__timer__hal_1gga28862835cd77a9c8481ed04c7b1918eba0e0638388bdf4cfe3d7ec244faa66a2f" prot="public">
          <name>NRF_TIMER_FREQ_250kHz</name>
          <briefdescription>
<para>Timer frequency 250 kHz. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__timer__hal_1gga28862835cd77a9c8481ed04c7b1918eba081b58c48f3689e22550c01da1133037" prot="public">
          <name>NRF_TIMER_FREQ_125kHz</name>
          <briefdescription>
<para>Timer frequency 125 kHz. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__timer__hal_1gga28862835cd77a9c8481ed04c7b1918ebafc1d448cb0ba552a99cf190b74c10dd9" prot="public">
          <name>NRF_TIMER_FREQ_62500Hz</name>
          <briefdescription>
<para>Timer frequency 62500 Hz. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__timer__hal_1gga28862835cd77a9c8481ed04c7b1918eba655fbfee370adade8e7b9c4aae223074" prot="public">
          <name>NRF_TIMER_FREQ_31250Hz</name>
          <briefdescription>
<para>Timer frequency 31250 Hz. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Timer prescalers. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_timer.h" line="398" column="1" bodyfile="hal/nrf_timer.h" bodystart="399" bodyend="410"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__timer__hal_1ga21336e3aff87c90e95f08eff763d91a8" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_timer_cc_channel_t</name>
        <enumvalue id="group__nrf__timer__hal_1gga21336e3aff87c90e95f08eff763d91a8a4aa8e808ba8c07831a11629524c61229" prot="public">
          <name>NRF_TIMER_CC_CHANNEL0</name>
          <initializer>= 0</initializer>
          <briefdescription>
<para>Timer capture/compare channel 0. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__timer__hal_1gga21336e3aff87c90e95f08eff763d91a8addf444442bb72b96874cc391bfd4af08" prot="public">
          <name>NRF_TIMER_CC_CHANNEL1</name>
          <briefdescription>
<para>Timer capture/compare channel 1. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__timer__hal_1gga21336e3aff87c90e95f08eff763d91a8a3e39cb70edb24f15805ac9105adcc9e3" prot="public">
          <name>NRF_TIMER_CC_CHANNEL2</name>
          <briefdescription>
<para>Timer capture/compare channel 2. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__timer__hal_1gga21336e3aff87c90e95f08eff763d91a8a87d5787396b9bca963c2ca9595bce6ab" prot="public">
          <name>NRF_TIMER_CC_CHANNEL3</name>
          <briefdescription>
<para>Timer capture/compare channel 3. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__timer__hal_1gga21336e3aff87c90e95f08eff763d91a8a8ef055e22ea3256b53c653f87b33102b" prot="public">
          <name>NRF_TIMER_CC_CHANNEL4</name>
          <briefdescription>
<para>Timer capture/compare channel 4. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__timer__hal_1gga21336e3aff87c90e95f08eff763d91a8a1f8731bc426b0141221601ad6df51f33" prot="public">
          <name>NRF_TIMER_CC_CHANNEL5</name>
          <briefdescription>
<para>Timer capture/compare channel 5. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__timer__hal_1gga21336e3aff87c90e95f08eff763d91a8a8de0f8a75fd5ea17f8a4f18769f04fc7" prot="public">
          <name>NRF_TIMER_CC_CHANNEL6</name>
          <briefdescription>
<para>Timer capture/compare channel 6. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__timer__hal_1gga21336e3aff87c90e95f08eff763d91a8a603d9b0c68ef2cd8332dedd9b12e9ffc" prot="public">
          <name>NRF_TIMER_CC_CHANNEL7</name>
          <briefdescription>
<para>Timer capture/compare channel 7. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Timer capture/compare channels. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_timer.h" line="413" column="1" bodyfile="hal/nrf_timer.h" bodystart="414" bodyend="431"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__timer__hal_1ga55adb42b75222256195fa003f8c0dc20" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_timer_int_mask_t</name>
        <enumvalue id="group__nrf__timer__hal_1gga55adb42b75222256195fa003f8c0dc20a7c79e9f26e48942dca235affefad9912" prot="public">
          <name>NRF_TIMER_INT_COMPARE0_MASK</name>
          <initializer>= TIMER_INTENSET_COMPARE0_Msk</initializer>
          <briefdescription>
<para>Timer interrupt from compare event on channel 0. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__timer__hal_1gga55adb42b75222256195fa003f8c0dc20a4d31316d8822406ad42cda430705f638" prot="public">
          <name>NRF_TIMER_INT_COMPARE1_MASK</name>
          <initializer>= TIMER_INTENSET_COMPARE1_Msk</initializer>
          <briefdescription>
<para>Timer interrupt from compare event on channel 1. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__timer__hal_1gga55adb42b75222256195fa003f8c0dc20a7f49a5f098147d06ff40ba96f4b08019" prot="public">
          <name>NRF_TIMER_INT_COMPARE2_MASK</name>
          <initializer>= TIMER_INTENSET_COMPARE2_Msk</initializer>
          <briefdescription>
<para>Timer interrupt from compare event on channel 2. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__timer__hal_1gga55adb42b75222256195fa003f8c0dc20ac7d7b7c195cf94a303159820f3543825" prot="public">
          <name>NRF_TIMER_INT_COMPARE3_MASK</name>
          <initializer>= TIMER_INTENSET_COMPARE3_Msk</initializer>
          <briefdescription>
<para>Timer interrupt from compare event on channel 3. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__timer__hal_1gga55adb42b75222256195fa003f8c0dc20a140064126c1ed2d57d6b413c7e7a32f0" prot="public">
          <name>NRF_TIMER_INT_COMPARE4_MASK</name>
          <initializer>= TIMER_INTENSET_COMPARE4_Msk</initializer>
          <briefdescription>
<para>Timer interrupt from compare event on channel 4. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__timer__hal_1gga55adb42b75222256195fa003f8c0dc20a340d6d967dae619c3ea666e8e7070e37" prot="public">
          <name>NRF_TIMER_INT_COMPARE5_MASK</name>
          <initializer>= TIMER_INTENSET_COMPARE5_Msk</initializer>
          <briefdescription>
<para>Timer interrupt from compare event on channel 5. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__timer__hal_1gga55adb42b75222256195fa003f8c0dc20ad275d7d3ed6be95919874e2b7b06a373" prot="public">
          <name>NRF_TIMER_INT_COMPARE6_MASK</name>
          <initializer>= TIMER_INTENSET_COMPARE6_Msk</initializer>
          <briefdescription>
<para>Timer interrupt from compare event on channel 6. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__timer__hal_1gga55adb42b75222256195fa003f8c0dc20ad2655abf66de31b8d58151d24252c956" prot="public">
          <name>NRF_TIMER_INT_COMPARE7_MASK</name>
          <initializer>= TIMER_INTENSET_COMPARE7_Msk</initializer>
          <briefdescription>
<para>Timer interrupt from compare event on channel 7. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Timer interrupts. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_timer.h" line="434" column="1" bodyfile="hal/nrf_timer.h" bodystart="435" bodyend="452"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__nrf__timer__hal_1ga5e804fd21a6351e80e20ed94a95e1745" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_timer_prescaler_set</definition>
        <argsstring>(NRF_TIMER_Type *p_reg, uint32_t prescaler_factor)</argsstring>
        <name>nrf_timer_prescaler_set</name>
        <param>
          <type>NRF_TIMER_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>prescaler_factor</declname>
        </param>
        <briefdescription>
<para>Function for setting the prescaler factor. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Prescaler value is expressed as <formula id="0">$ 2^{prescaler\_factor} $</formula>.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">prescaler_factor</parametername>
</parameternamelist>
<parameterdescription>
<para>Prescaler factor. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_timer.h" line="911" column="24" bodyfile="hal/nrf_timer.h" bodystart="911" bodyend="915" declfile="hal/nrf_timer.h" declline="463" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__timer__hal_1ga8018856d922dc9cd77c5f5b74f533f25" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_timer_prescaler_get</definition>
        <argsstring>(NRF_TIMER_Type const *p_reg)</argsstring>
        <name>nrf_timer_prescaler_get</name>
        <param>
          <type>NRF_TIMER_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for retrieving the prescaler factor. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Prescaler factor. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_timer.h" line="917" column="28" bodyfile="hal/nrf_timer.h" bodystart="917" bodyend="920" declfile="hal/nrf_timer.h" declline="472" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__timer__hal_1gacdcc887e5536df70fb766e2705711b65" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_timer_task_trigger</definition>
        <argsstring>(NRF_TIMER_Type *p_reg, nrf_timer_task_t task)</argsstring>
        <name>nrf_timer_task_trigger</name>
        <param>
          <type>NRF_TIMER_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__timer__hal_1ga1db410e4a6b7e38de383220b20724906" kindref="member">nrf_timer_task_t</ref></type>
          <declname>task</declname>
        </param>
        <briefdescription>
<para>Function for activating the specified timer task. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">task</parametername>
</parameternamelist>
<parameterdescription>
<para>Task to be activated. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_timer.h" line="780" column="24" bodyfile="hal/nrf_timer.h" bodystart="780" bodyend="784" declfile="hal/nrf_timer.h" declline="480" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__timer__hal_1ga2f4e47e68b4d1af3726747f2a34bb581" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_timer_task_address_get</definition>
        <argsstring>(NRF_TIMER_Type const *p_reg, nrf_timer_task_t task)</argsstring>
        <name>nrf_timer_task_address_get</name>
        <param>
          <type>NRF_TIMER_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__timer__hal_1ga1db410e4a6b7e38de383220b20724906" kindref="member">nrf_timer_task_t</ref></type>
          <declname>task</declname>
        </param>
        <briefdescription>
<para>Function for getting the address of the specified timer task register. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">task</parametername>
</parameternamelist>
<parameterdescription>
<para>The specified task.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Address of the specified task register. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_timer.h" line="786" column="28" bodyfile="hal/nrf_timer.h" bodystart="786" bodyend="790" declfile="hal/nrf_timer.h" declline="491" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__timer__hal_1ga46788eabb1ad085616c4796bb609c016" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_timer_event_clear</definition>
        <argsstring>(NRF_TIMER_Type *p_reg, nrf_timer_event_t event)</argsstring>
        <name>nrf_timer_event_clear</name>
        <param>
          <type>NRF_TIMER_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__timer__hal_1ga6c7c835fd175129175fe2c08237af3c3" kindref="member">nrf_timer_event_t</ref></type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>Function for clearing the specified timer event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event to clear. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_timer.h" line="792" column="24" bodyfile="hal/nrf_timer.h" bodystart="792" bodyend="797" declfile="hal/nrf_timer.h" declline="500" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__timer__hal_1ga594ee9df9b86ae535bc4daf1384d5348" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE bool</type>
        <definition>NRF_STATIC_INLINE bool nrf_timer_event_check</definition>
        <argsstring>(NRF_TIMER_Type const *p_reg, nrf_timer_event_t event)</argsstring>
        <name>nrf_timer_event_check</name>
        <param>
          <type>NRF_TIMER_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__timer__hal_1ga6c7c835fd175129175fe2c08237af3c3" kindref="member">nrf_timer_event_t</ref></type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>Function for retrieving the state of the TIMER event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event to be checked.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>The event has been generated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>The event has not been generated. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_timer.h" line="799" column="24" bodyfile="hal/nrf_timer.h" bodystart="799" bodyend="803" declfile="hal/nrf_timer.h" declline="512" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__timer__hal_1ga9ad70342f0808182e18ef591d23b0561" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_timer_event_address_get</definition>
        <argsstring>(NRF_TIMER_Type const *p_reg, nrf_timer_event_t event)</argsstring>
        <name>nrf_timer_event_address_get</name>
        <param>
          <type>NRF_TIMER_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__timer__hal_1ga6c7c835fd175129175fe2c08237af3c3" kindref="member">nrf_timer_event_t</ref></type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>Function for getting the address of the specified timer event register. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>The specified event.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Address of the specified event register. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_timer.h" line="805" column="28" bodyfile="hal/nrf_timer.h" bodystart="805" bodyend="809" declfile="hal/nrf_timer.h" declline="523" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__timer__hal_1ga8efef095c7570c50f519dfe46539db90" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_timer_shorts_enable</definition>
        <argsstring>(NRF_TIMER_Type *p_reg, uint32_t mask)</argsstring>
        <name>nrf_timer_shorts_enable</name>
        <param>
          <type>NRF_TIMER_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Function for enabling the specified shortcuts. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Shortcuts to be enabled. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_timer.h" line="811" column="24" bodyfile="hal/nrf_timer.h" bodystart="811" bodyend="815" declfile="hal/nrf_timer.h" declline="532" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__timer__hal_1ga269330ebccab15e3e819cc2c805629ac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_timer_shorts_disable</definition>
        <argsstring>(NRF_TIMER_Type *p_reg, uint32_t mask)</argsstring>
        <name>nrf_timer_shorts_disable</name>
        <param>
          <type>NRF_TIMER_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Function for disabling the specified shortcuts. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Shortcuts to be disabled. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_timer.h" line="817" column="24" bodyfile="hal/nrf_timer.h" bodystart="817" bodyend="821" declfile="hal/nrf_timer.h" declline="541" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__timer__hal_1ga2d9291fbd5262d1f5a3d755e76d175d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_timer_shorts_set</definition>
        <argsstring>(NRF_TIMER_Type *p_reg, uint32_t mask)</argsstring>
        <name>nrf_timer_shorts_set</name>
        <param>
          <type>NRF_TIMER_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Function for setting the specified shortcuts. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Shortcuts to be set. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_timer.h" line="823" column="24" bodyfile="hal/nrf_timer.h" bodystart="823" bodyend="827" declfile="hal/nrf_timer.h" declline="550" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__timer__hal_1ga470366a9f03a7ad5ce5b4634b4cf81ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE <ref refid="group__nrf__timer__hal_1ga1dee3ab20f9dfa38bacf2502a8d1688c" kindref="member">nrf_timer_short_mask_t</ref></type>
        <definition>NRF_STATIC_INLINE nrf_timer_short_mask_t nrf_timer_short_compare_clear_get</definition>
        <argsstring>(uint8_t channel)</argsstring>
        <name>nrf_timer_short_compare_clear_get</name>
        <param>
          <type>uint8_t</type>
          <declname>channel</declname>
        </param>
        <briefdescription>
<para>Function for getting COMPARE_CLEAR short mask for the specified channel. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">channel</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Short mask. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_timer.h" line="829" column="42" bodyfile="hal/nrf_timer.h" bodystart="829" bodyend="832" declfile="hal/nrf_timer.h" declline="560" declcolumn="42"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__timer__hal_1gac773155b1c68ed77f90f29cb1f3a4e35" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE <ref refid="group__nrf__timer__hal_1ga1dee3ab20f9dfa38bacf2502a8d1688c" kindref="member">nrf_timer_short_mask_t</ref></type>
        <definition>NRF_STATIC_INLINE nrf_timer_short_mask_t nrf_timer_short_compare_stop_get</definition>
        <argsstring>(uint8_t channel)</argsstring>
        <name>nrf_timer_short_compare_stop_get</name>
        <param>
          <type>uint8_t</type>
          <declname>channel</declname>
        </param>
        <briefdescription>
<para>Function for getting COMPARE_STOP short mask for the specified channel. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">channel</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Short mask. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_timer.h" line="834" column="42" bodyfile="hal/nrf_timer.h" bodystart="834" bodyend="837" declfile="hal/nrf_timer.h" declline="569" declcolumn="42"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__timer__hal_1gaca84981e7f515192ffc4cb28ce18e554" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_timer_int_enable</definition>
        <argsstring>(NRF_TIMER_Type *p_reg, uint32_t mask)</argsstring>
        <name>nrf_timer_int_enable</name>
        <param>
          <type>NRF_TIMER_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Function for enabling the specified interrupts. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of interrupts to be enabled. Use <ref refid="group__nrf__timer__hal_1ga55adb42b75222256195fa003f8c0dc20" kindref="member">nrf_timer_int_mask_t</ref> values for bit masking. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_timer.h" line="839" column="24" bodyfile="hal/nrf_timer.h" bodystart="839" bodyend="843" declfile="hal/nrf_timer.h" declline="578" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__timer__hal_1gab26b26a0a091b12491246d4b1f4e65c8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_timer_int_disable</definition>
        <argsstring>(NRF_TIMER_Type *p_reg, uint32_t mask)</argsstring>
        <name>nrf_timer_int_disable</name>
        <param>
          <type>NRF_TIMER_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Function for disabling the specified interrupts. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of interrupts to be disabled. Use <ref refid="group__nrf__timer__hal_1ga55adb42b75222256195fa003f8c0dc20" kindref="member">nrf_timer_int_mask_t</ref> values for bit masking. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_timer.h" line="845" column="24" bodyfile="hal/nrf_timer.h" bodystart="845" bodyend="849" declfile="hal/nrf_timer.h" declline="588" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__timer__hal_1gaa6902537565850e0cfd62fa31a1b9083" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_timer_int_enable_check</definition>
        <argsstring>(NRF_TIMER_Type const *p_reg, uint32_t mask)</argsstring>
        <name>nrf_timer_int_enable_check</name>
        <param>
          <type>NRF_TIMER_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Function for checking if the specified interrupts are enabled. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of interrupts to be checked. Use <ref refid="group__nrf__timer__hal_1ga55adb42b75222256195fa003f8c0dc20" kindref="member">nrf_timer_int_mask_t</ref> values for bit masking.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Mask of enabled interrupts. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_timer.h" line="851" column="28" bodyfile="hal/nrf_timer.h" bodystart="851" bodyend="854" declfile="hal/nrf_timer.h" declline="600" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__timer__hal_1gabcfd966f5844ba4c22476ea36f944bca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_timer_subscribe_set</definition>
        <argsstring>(NRF_TIMER_Type *p_reg, nrf_timer_task_t task, uint8_t channel)</argsstring>
        <name>nrf_timer_subscribe_set</name>
        <param>
          <type>NRF_TIMER_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__timer__hal_1ga1db410e4a6b7e38de383220b20724906" kindref="member">nrf_timer_task_t</ref></type>
          <declname>task</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>channel</declname>
        </param>
        <briefdescription>
<para>Function for setting the subscribe configuration for a given TIMER task. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">task</parametername>
</parameternamelist>
<parameterdescription>
<para>Task for which to set the configuration. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">channel</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel through which to subscribe events. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_timer.h" line="611" column="24" declfile="hal/nrf_timer.h" declline="611" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__timer__hal_1gafce2e496e07c100add401597ad9d82b2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_timer_subscribe_clear</definition>
        <argsstring>(NRF_TIMER_Type *p_reg, nrf_timer_task_t task)</argsstring>
        <name>nrf_timer_subscribe_clear</name>
        <param>
          <type>NRF_TIMER_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__timer__hal_1ga1db410e4a6b7e38de383220b20724906" kindref="member">nrf_timer_task_t</ref></type>
          <declname>task</declname>
        </param>
        <briefdescription>
<para>Function for clearing the subscribe configuration for a given TIMER task. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">task</parametername>
</parameternamelist>
<parameterdescription>
<para>Task for which to clear the configuration. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_timer.h" line="622" column="24" declfile="hal/nrf_timer.h" declline="622" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__timer__hal_1gaa8e16ed891e6014d425b908daabfa498" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_timer_publish_set</definition>
        <argsstring>(NRF_TIMER_Type *p_reg, nrf_timer_event_t event, uint8_t channel)</argsstring>
        <name>nrf_timer_publish_set</name>
        <param>
          <type>NRF_TIMER_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__timer__hal_1ga6c7c835fd175129175fe2c08237af3c3" kindref="member">nrf_timer_event_t</ref></type>
          <declname>event</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>channel</declname>
        </param>
        <briefdescription>
<para>Function for setting the publish configuration for a given TIMER event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event for which to set the configuration. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">channel</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel through which to publish the event. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_timer.h" line="633" column="24" declfile="hal/nrf_timer.h" declline="633" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__timer__hal_1gafef86d00be35fa22765f9823c17fc6f0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_timer_publish_clear</definition>
        <argsstring>(NRF_TIMER_Type *p_reg, nrf_timer_event_t event)</argsstring>
        <name>nrf_timer_publish_clear</name>
        <param>
          <type>NRF_TIMER_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__timer__hal_1ga6c7c835fd175129175fe2c08237af3c3" kindref="member">nrf_timer_event_t</ref></type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>Function for clearing the publish configuration for a given TIMER event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event for which to clear the configuration. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_timer.h" line="644" column="24" declfile="hal/nrf_timer.h" declline="644" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__timer__hal_1ga1c02aebd9fc392af80ea2da5dca7ed61" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_timer_mode_set</definition>
        <argsstring>(NRF_TIMER_Type *p_reg, nrf_timer_mode_t mode)</argsstring>
        <name>nrf_timer_mode_set</name>
        <param>
          <type>NRF_TIMER_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__timer__hal_1ga61044c286dc20ccb08df3988bc57a6f2" kindref="member">nrf_timer_mode_t</ref></type>
          <declname>mode</declname>
        </param>
        <briefdescription>
<para>Function for setting the timer mode. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mode</parametername>
</parameternamelist>
<parameterdescription>
<para>Timer mode. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_timer.h" line="886" column="24" bodyfile="hal/nrf_timer.h" bodystart="886" bodyend="891" declfile="hal/nrf_timer.h" declline="654" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__timer__hal_1gaf0dbbc911f7fbf8952d261da81bb0aff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE <ref refid="group__nrf__timer__hal_1ga61044c286dc20ccb08df3988bc57a6f2" kindref="member">nrf_timer_mode_t</ref></type>
        <definition>NRF_STATIC_INLINE nrf_timer_mode_t nrf_timer_mode_get</definition>
        <argsstring>(NRF_TIMER_Type const *p_reg)</argsstring>
        <name>nrf_timer_mode_get</name>
        <param>
          <type>NRF_TIMER_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for retrieving the timer mode. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Timer mode. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_timer.h" line="893" column="36" bodyfile="hal/nrf_timer.h" bodystart="893" bodyend="896" declfile="hal/nrf_timer.h" declline="664" declcolumn="36"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__timer__hal_1ga1bf04327bb1bcbcafb66be1e0d69da39" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_timer_bit_width_set</definition>
        <argsstring>(NRF_TIMER_Type *p_reg, nrf_timer_bit_width_t bit_width)</argsstring>
        <name>nrf_timer_bit_width_set</name>
        <param>
          <type>NRF_TIMER_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__timer__hal_1ga567f81d672267a218a5b2f0155be3043" kindref="member">nrf_timer_bit_width_t</ref></type>
          <declname>bit_width</declname>
        </param>
        <briefdescription>
<para>Function for setting the timer bit width. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">bit_width</parametername>
</parameternamelist>
<parameterdescription>
<para>Timer bit width. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_timer.h" line="898" column="24" bodyfile="hal/nrf_timer.h" bodystart="898" bodyend="904" declfile="hal/nrf_timer.h" declline="672" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__timer__hal_1gaf2be8f99a56547edd3d37a59b7be2602" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE <ref refid="group__nrf__timer__hal_1ga567f81d672267a218a5b2f0155be3043" kindref="member">nrf_timer_bit_width_t</ref></type>
        <definition>NRF_STATIC_INLINE nrf_timer_bit_width_t nrf_timer_bit_width_get</definition>
        <argsstring>(NRF_TIMER_Type const *p_reg)</argsstring>
        <name>nrf_timer_bit_width_get</name>
        <param>
          <type>NRF_TIMER_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for retrieving the timer bit width. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Timer bit width. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_timer.h" line="906" column="41" bodyfile="hal/nrf_timer.h" bodystart="906" bodyend="909" declfile="hal/nrf_timer.h" declline="682" declcolumn="41"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__timer__hal_1ga8778ec1e21e5a8306d720ab4e69a199b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_timer_cc_set</definition>
        <argsstring>(NRF_TIMER_Type *p_reg, nrf_timer_cc_channel_t cc_channel, uint32_t cc_value)</argsstring>
        <name>nrf_timer_cc_set</name>
        <param>
          <type>NRF_TIMER_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__timer__hal_1ga21336e3aff87c90e95f08eff763d91a8" kindref="member">nrf_timer_cc_channel_t</ref></type>
          <declname>cc_channel</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>cc_value</declname>
        </param>
        <briefdescription>
<para>Function for setting the capture/compare register for the specified channel. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">cc_channel</parametername>
</parameternamelist>
<parameterdescription>
<para>The specified capture/compare channel. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">cc_value</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to write to the capture/compare register. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_timer.h" line="922" column="24" bodyfile="hal/nrf_timer.h" bodystart="922" bodyend="927" declfile="hal/nrf_timer.h" declline="691" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__timer__hal_1ga237a16bb2596cc350a15f741665b7e75" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_timer_cc_get</definition>
        <argsstring>(NRF_TIMER_Type const *p_reg, nrf_timer_cc_channel_t cc_channel)</argsstring>
        <name>nrf_timer_cc_get</name>
        <param>
          <type>NRF_TIMER_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__timer__hal_1ga21336e3aff87c90e95f08eff763d91a8" kindref="member">nrf_timer_cc_channel_t</ref></type>
          <declname>cc_channel</declname>
        </param>
        <briefdescription>
<para>Function for retrieving the capture/compare value for a specified channel. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">cc_channel</parametername>
</parameternamelist>
<parameterdescription>
<para>The specified capture/compare channel.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Value from the specified capture/compare register. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_timer.h" line="929" column="28" bodyfile="hal/nrf_timer.h" bodystart="929" bodyend="933" declfile="hal/nrf_timer.h" declline="703" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__timer__hal_1ga992b4f8249b638159cc2abedcca7ba6a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE <ref refid="group__nrf__timer__hal_1ga1db410e4a6b7e38de383220b20724906" kindref="member">nrf_timer_task_t</ref></type>
        <definition>NRF_STATIC_INLINE nrf_timer_task_t nrf_timer_capture_task_get</definition>
        <argsstring>(uint8_t channel)</argsstring>
        <name>nrf_timer_capture_task_get</name>
        <param>
          <type>uint8_t</type>
          <declname>channel</declname>
        </param>
        <briefdescription>
<para>Function for getting the specified timer capture task. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">channel</parametername>
</parameternamelist>
<parameterdescription>
<para>Capture channel.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Capture task. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_timer.h" line="935" column="36" bodyfile="hal/nrf_timer.h" bodystart="935" bodyend="938" declfile="hal/nrf_timer.h" declline="713" declcolumn="36"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__timer__hal_1ga2e446c45ecb7958a1a15f8f08cdc2c40" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE <ref refid="group__nrf__timer__hal_1ga6c7c835fd175129175fe2c08237af3c3" kindref="member">nrf_timer_event_t</ref></type>
        <definition>NRF_STATIC_INLINE nrf_timer_event_t nrf_timer_compare_event_get</definition>
        <argsstring>(uint8_t channel)</argsstring>
        <name>nrf_timer_compare_event_get</name>
        <param>
          <type>uint8_t</type>
          <declname>channel</declname>
        </param>
        <briefdescription>
<para>Function for getting the specified timer compare event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">channel</parametername>
</parameternamelist>
<parameterdescription>
<para>Compare channel.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Compare event. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_timer.h" line="940" column="37" bodyfile="hal/nrf_timer.h" bodystart="940" bodyend="943" declfile="hal/nrf_timer.h" declline="722" declcolumn="37"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__timer__hal_1gac8210bc33f954ef3dacd78f3aabaf0bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE <ref refid="group__nrf__timer__hal_1ga55adb42b75222256195fa003f8c0dc20" kindref="member">nrf_timer_int_mask_t</ref></type>
        <definition>NRF_STATIC_INLINE nrf_timer_int_mask_t nrf_timer_compare_int_get</definition>
        <argsstring>(uint8_t channel)</argsstring>
        <name>nrf_timer_compare_int_get</name>
        <param>
          <type>uint8_t</type>
          <declname>channel</declname>
        </param>
        <briefdescription>
<para>Function for getting the specified timer compare interrupt. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">channel</parametername>
</parameternamelist>
<parameterdescription>
<para>Compare channel.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Compare interrupt. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_timer.h" line="945" column="40" bodyfile="hal/nrf_timer.h" bodystart="945" bodyend="949" declfile="hal/nrf_timer.h" declline="731" declcolumn="40"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__timer__hal_1ga9b471b98803bcac06bd272feb38ceca5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_timer_us_to_ticks</definition>
        <argsstring>(uint32_t time_us, nrf_timer_frequency_t frequency)</argsstring>
        <name>nrf_timer_us_to_ticks</name>
        <param>
          <type>uint32_t</type>
          <declname>time_us</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__timer__hal_1ga28862835cd77a9c8481ed04c7b1918eb" kindref="member">nrf_timer_frequency_t</ref></type>
          <declname>frequency</declname>
        </param>
        <briefdescription>
<para>Function for calculating the number of timer ticks for a given time (in microseconds) and timer frequency. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">time_us</parametername>
</parameternamelist>
<parameterdescription>
<para>Time in microseconds. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">frequency</parametername>
</parameternamelist>
<parameterdescription>
<para>Timer frequency.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Number of timer ticks. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_timer.h" line="951" column="28" bodyfile="hal/nrf_timer.h" bodystart="951" bodyend="960" declfile="hal/nrf_timer.h" declline="742" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__timer__hal_1ga4f52b3d15736f23db37552fc777a8253" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_timer_ms_to_ticks</definition>
        <argsstring>(uint32_t time_ms, nrf_timer_frequency_t frequency)</argsstring>
        <name>nrf_timer_ms_to_ticks</name>
        <param>
          <type>uint32_t</type>
          <declname>time_ms</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__timer__hal_1ga28862835cd77a9c8481ed04c7b1918eb" kindref="member">nrf_timer_frequency_t</ref></type>
          <declname>frequency</declname>
        </param>
        <briefdescription>
<para>Function for calculating the number of timer ticks for a given time (in milliseconds) and timer frequency. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">time_ms</parametername>
</parameternamelist>
<parameterdescription>
<para>Time in milliseconds. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">frequency</parametername>
</parameternamelist>
<parameterdescription>
<para>Timer frequency.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Number of timer ticks. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_timer.h" line="962" column="28" bodyfile="hal/nrf_timer.h" bodystart="962" bodyend="971" declfile="hal/nrf_timer.h" declline="754" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__timer__hal_1ga5b34388603484fa4043803f1ebca04c0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_timer_one_shot_enable</definition>
        <argsstring>(NRF_TIMER_Type *p_reg, nrf_timer_cc_channel_t cc_channel)</argsstring>
        <name>nrf_timer_one_shot_enable</name>
        <param>
          <type>NRF_TIMER_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__timer__hal_1ga21336e3aff87c90e95f08eff763d91a8" kindref="member">nrf_timer_cc_channel_t</ref></type>
          <declname>cc_channel</declname>
        </param>
        <briefdescription>
<para>Function for enabling one-shot operation for the specified capture/compare channel. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">cc_channel</parametername>
</parameternamelist>
<parameterdescription>
<para>Capture/compare channel. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_timer.h" line="974" column="24" bodyfile="hal/nrf_timer.h" bodystart="974" bodyend="978" declfile="hal/nrf_timer.h" declline="764" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__timer__hal_1ga85ee7ab4a9d8e7368602aa73ef560556" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_timer_one_shot_disable</definition>
        <argsstring>(NRF_TIMER_Type *p_reg, nrf_timer_cc_channel_t cc_channel)</argsstring>
        <name>nrf_timer_one_shot_disable</name>
        <param>
          <type>NRF_TIMER_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__timer__hal_1ga21336e3aff87c90e95f08eff763d91a8" kindref="member">nrf_timer_cc_channel_t</ref></type>
          <declname>cc_channel</declname>
        </param>
        <briefdescription>
<para>Function for disabling one-shot operation for the specified capture/compare channel. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">cc_channel</parametername>
</parameternamelist>
<parameterdescription>
<para>Capture/compare channel. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_timer.h" line="980" column="24" bodyfile="hal/nrf_timer.h" bodystart="980" bodyend="984" declfile="hal/nrf_timer.h" declline="773" declcolumn="24"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__nrf__timer__hal_1ga2e0e97a97cb4193ec2bb6665c1d03ea4" prot="public" static="no">
        <name>NRF_TIMER_INST_GET</name>
        <param><defname>idx</defname></param>
        <initializer><ref refid="group__nrfx__utils_1ga5ea61d0994f6fb1ab5ed59d44f6a7ce9" kindref="member">NRFX_CONCAT</ref>(NRF_, TIMER, idx)</initializer>
        <briefdescription>
<para>Macro getting pointer to the structure of registers of the TIMER peripheral. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">idx</parametername>
</parameternamelist>
<parameterdescription>
<para>TIMER instance index.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to the structure of registers of the TIMER peripheral. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_timer.h" line="57" column="9" bodyfile="hal/nrf_timer.h" bodystart="57" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__timer__hal_1ga1bba9a2d5b5d268daa49f777eb66d89d" prot="public" static="no">
        <name>NRF_TIMER_HAS_CC4</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Symbol indicating whether timer has capture/compare channel 4. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_timer.h" line="61" column="9" bodyfile="hal/nrf_timer.h" bodystart="61" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__timer__hal_1ga5929343e0b043042aeab0c7f68cde351" prot="public" static="no">
        <name>NRF_TIMER_HAS_CC5</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Symbol indicating whether timer has capture/compare channel 5. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_timer.h" line="68" column="9" bodyfile="hal/nrf_timer.h" bodystart="68" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__timer__hal_1ga2b1b0d9c6a68516883ce773fe3a8ec3c" prot="public" static="no">
        <name>NRF_TIMER_HAS_CC6</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Symbol indicating whether timer has capture/compare channel 6. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_timer.h" line="75" column="9" bodyfile="hal/nrf_timer.h" bodystart="75" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__timer__hal_1ga64e0e1c01b3cf4ba27534a35b258bcc9" prot="public" static="no">
        <name>NRF_TIMER_HAS_CC7</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Symbol indicating whether timer has capture/compare channel 7. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_timer.h" line="82" column="9" bodyfile="hal/nrf_timer.h" bodystart="82" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__timer__hal_1gae8beb8e2005eba43128e68ed573212db" prot="public" static="no">
        <name>NRF_TIMER_HAS_LOW_POWER_MODE</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Symbol indicating whether timer supports low power mode. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_timer.h" line="89" column="9" bodyfile="hal/nrf_timer.h" bodystart="89" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__timer__hal_1ga6167b2cca06829969f545c07bf7bee05" prot="public" static="no">
        <name>NRF_TIMER_HAS_ONE_SHOT</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Symbol indicating whether timer supports one-shot operation. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_timer.h" line="96" column="9" bodyfile="hal/nrf_timer.h" bodystart="96" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__timer__hal_1ga73f8bac6d9fc9a98f64f8114e2ce00c0" prot="public" static="no">
        <name>NRF_TIMER_BASE_FREQUENCY_320MHZ</name>
        <initializer>(<ref refid="group__nrfx__common_1ga30e3c68cc0831c3bd64574a0a64439cc" kindref="member">NRFX_MHZ_TO_HZ</ref>(320UL))</initializer>
        <briefdescription>
<para>Base frequency value 320 MHz for TIMER. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_timer.h" line="102" column="9" bodyfile="hal/nrf_timer.h" bodystart="102" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__timer__hal_1ga2e43f129d140d409a491436f7988f923" prot="public" static="no">
        <name>NRF_TIMER_BASE_FREQUENCY_128MHZ</name>
        <initializer>(<ref refid="group__nrfx__common_1ga30e3c68cc0831c3bd64574a0a64439cc" kindref="member">NRFX_MHZ_TO_HZ</ref>(128UL))</initializer>
        <briefdescription>
<para>Base frequency value 128 MHz for TIMER. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_timer.h" line="104" column="9" bodyfile="hal/nrf_timer.h" bodystart="104" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__timer__hal_1gad3ac936a9bc470ab107a28711b1a6a2b" prot="public" static="no">
        <name>NRF_TIMER_BASE_FREQUENCY_64MHZ</name>
        <initializer>(<ref refid="group__nrfx__common_1ga30e3c68cc0831c3bd64574a0a64439cc" kindref="member">NRFX_MHZ_TO_HZ</ref>(64UL))</initializer>
        <briefdescription>
<para>Base frequency value 64 MHz for TIMER. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_timer.h" line="106" column="9" bodyfile="hal/nrf_timer.h" bodystart="106" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__timer__hal_1gac548befeaf0379d5a691eb1fee474197" prot="public" static="no">
        <name>NRF_TIMER_BASE_FREQUENCY_32MHZ</name>
        <initializer>(<ref refid="group__nrfx__common_1ga30e3c68cc0831c3bd64574a0a64439cc" kindref="member">NRFX_MHZ_TO_HZ</ref>(32UL))</initializer>
        <briefdescription>
<para>Base frequency value 32 MHz for TIMER. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_timer.h" line="108" column="9" bodyfile="hal/nrf_timer.h" bodystart="108" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__timer__hal_1ga10dc600fe7ff7d27204f781236a391e1" prot="public" static="no">
        <name>NRF_TIMER_BASE_FREQUENCY_16MHZ</name>
        <initializer>(<ref refid="group__nrfx__common_1ga30e3c68cc0831c3bd64574a0a64439cc" kindref="member">NRFX_MHZ_TO_HZ</ref>(16UL))</initializer>
        <briefdescription>
<para>Base frequency value 16 MHz for TIMER. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_timer.h" line="110" column="9" bodyfile="hal/nrf_timer.h" bodystart="110" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__timer__hal_1ga0206996722160e725012e56ff212f937" prot="public" static="no">
        <name>NRF_TIMER_PRESCALER_MAX</name>
        <initializer>TIMER_PRESCALER_PRESCALER_Max</initializer>
        <briefdescription>
<para>Maximum value of PRESCALER register. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_timer.h" line="114" column="9" bodyfile="hal/nrf_timer.h" bodystart="114" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__timer__hal_1gac1ee97cfd80755ba6774e27396e6ca8d" prot="public" static="no">
        <name>TIMER_MAX_SIZE</name>
        <param><defname>id</defname></param>
        <initializer><ref refid="group__nrfx__common_1gaa78d21b07d22f7a4bfbd1feda51ef1f4" kindref="member">NRFX_CONCAT_3</ref>(TIMER, id, _MAX_SIZE)</initializer>
        <briefdescription>
<para>Macro for getting the maximum bit resolution of the specified timer instance. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">id</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of the specified timer instance.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>Maximum</parametername>
</parameternamelist>
<parameterdescription>
<para>bit resolution of the specified timer instance. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_timer.h" line="126" column="9" bodyfile="hal/nrf_timer.h" bodystart="126" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__timer__hal_1ga36b5cf0a8ef3d8a94269617a2d7170d4" prot="public" static="no">
        <name>TIMER_BIT_WIDTH_MAX</name>
        <param><defname>id</defname></param>
        <param><defname>bit_width</defname></param>
        <initializer>    (<ref refid="group__nrf__timer__hal_1gac1ee97cfd80755ba6774e27396e6ca8d" kindref="member">TIMER_MAX_SIZE</ref>(id) == 8   ? (bit_width == <ref refid="group__nrf__timer__hal_1gga567f81d672267a218a5b2f0155be3043aa6474251dab8733df9c2d6e5c00504b4" kindref="member">NRF_TIMER_BIT_WIDTH_8</ref>)  :  \
    (<ref refid="group__nrf__timer__hal_1gac1ee97cfd80755ba6774e27396e6ca8d" kindref="member">TIMER_MAX_SIZE</ref>(id) == 16  ? (bit_width == <ref refid="group__nrf__timer__hal_1gga567f81d672267a218a5b2f0155be3043aa6474251dab8733df9c2d6e5c00504b4" kindref="member">NRF_TIMER_BIT_WIDTH_8</ref>)  || \
                                 (bit_width == <ref refid="group__nrf__timer__hal_1gga567f81d672267a218a5b2f0155be3043a4c8f9ba039c905e7d207203ad06e8d4d" kindref="member">NRF_TIMER_BIT_WIDTH_16</ref>)  : \
    (<ref refid="group__nrf__timer__hal_1gac1ee97cfd80755ba6774e27396e6ca8d" kindref="member">TIMER_MAX_SIZE</ref>(id) == 24  ? (bit_width == <ref refid="group__nrf__timer__hal_1gga567f81d672267a218a5b2f0155be3043aa6474251dab8733df9c2d6e5c00504b4" kindref="member">NRF_TIMER_BIT_WIDTH_8</ref>)  || \
                                 (bit_width == <ref refid="group__nrf__timer__hal_1gga567f81d672267a218a5b2f0155be3043a4c8f9ba039c905e7d207203ad06e8d4d" kindref="member">NRF_TIMER_BIT_WIDTH_16</ref>) || \
                                 (bit_width == <ref refid="group__nrf__timer__hal_1gga567f81d672267a218a5b2f0155be3043a86bf8b22c7433f96a050fdeacbb89d5d" kindref="member">NRF_TIMER_BIT_WIDTH_24</ref>) :  \
    (<ref refid="group__nrf__timer__hal_1gac1ee97cfd80755ba6774e27396e6ca8d" kindref="member">TIMER_MAX_SIZE</ref>(id) == 32  ? (bit_width == <ref refid="group__nrf__timer__hal_1gga567f81d672267a218a5b2f0155be3043aa6474251dab8733df9c2d6e5c00504b4" kindref="member">NRF_TIMER_BIT_WIDTH_8</ref>)  || \
                                 (bit_width == <ref refid="group__nrf__timer__hal_1gga567f81d672267a218a5b2f0155be3043a4c8f9ba039c905e7d207203ad06e8d4d" kindref="member">NRF_TIMER_BIT_WIDTH_16</ref>) || \
                                 (bit_width == <ref refid="group__nrf__timer__hal_1gga567f81d672267a218a5b2f0155be3043a86bf8b22c7433f96a050fdeacbb89d5d" kindref="member">NRF_TIMER_BIT_WIDTH_24</ref>) || \
                                 (bit_width == <ref refid="group__nrf__timer__hal_1gga567f81d672267a218a5b2f0155be3043ab2e052c7b94c85bff69d313c50a630a5" kindref="member">NRF_TIMER_BIT_WIDTH_32</ref>) :  \
    false))))</initializer>
        <briefdescription>
<para>Macro for validating the correctness of the bit width resolution setting. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">id</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of the specified timer instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">bit_width</parametername>
</parameternamelist>
<parameterdescription>
<para>Bit width resolution value to be checked.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>Timer instance supports the specified bit width resolution value. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>Timer instance does not support the specified bit width resolution value. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_timer.h" line="137" column="9" bodyfile="hal/nrf_timer.h" bodystart="137" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__timer__hal_1gaca75b92f9c105ebc42eed1390fd8dfee" prot="public" static="no">
        <name>NRF_TIMER_IS_BIT_WIDTH_VALID</name>
        <param><defname>p_reg</defname></param>
        <param><defname>bit_width</defname></param>
        <briefdescription>
<para>Macro for checking correctness of bit width configuration for the specified timer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Timer instance register. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">bit_width</parametername>
</parameternamelist>
<parameterdescription>
<para>Bit width resolution value to be checked.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>Timer instance supports the specified bit width resolution value. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>Timer instance does not support the specified bit width resolution value. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_timer.h" line="159" column="9" bodyfile="hal/nrf_timer.h" bodystart="159" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__timer__hal_1ga15223384d2f89ad36b96aada9aab509f" prot="public" static="no">
        <name>NRF_TIMER_IS_320MHZ_TIMER</name>
        <param><defname>p_reg</defname></param>
        <initializer>    (<ref refid="group__nrfx__utils_1ga3759226de0d998545425ded334168058" kindref="member">NRFX_COND_CODE_1</ref>(<ref refid="group__nrfx__common_1ga9cc7f9da377228c1f0b191bd660577af" kindref="member">NRFX_INSTANCE_PRESENT</ref>(TIMER120), (p_reg == NRF_TIMER120), (false)) || \
     <ref refid="group__nrfx__utils_1ga3759226de0d998545425ded334168058" kindref="member">NRFX_COND_CODE_1</ref>(<ref refid="group__nrfx__common_1ga9cc7f9da377228c1f0b191bd660577af" kindref="member">NRFX_INSTANCE_PRESENT</ref>(TIMER121), (p_reg == NRF_TIMER121), (false)))</initializer>
        <briefdescription>
<para>Macro for checking whether the base frequency for the specified timer is 320 MHz. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_timer.h" line="211" column="9" bodyfile="hal/nrf_timer.h" bodystart="211" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__timer__hal_1gaf4ee713f133b991c4267f9d0c5839cd8" prot="public" static="no">
        <name>NRF_TIMER_IS_128MHZ_TIMER</name>
        <param><defname>p_reg</defname></param>
        <initializer>    (<ref refid="group__nrfx__utils_1ga3759226de0d998545425ded334168058" kindref="member">NRFX_COND_CODE_1</ref>(<ref refid="group__nrfx__utils_1ga238278032464c932dc46946bedd44473" kindref="member">NRFX_IS_ENABLED</ref>(NRF_CPU_FREQ_IS_128MHZ),                               \
        (<ref refid="group__nrfx__utils_1ga3759226de0d998545425ded334168058" kindref="member">NRFX_COND_CODE_1</ref>(<ref refid="group__nrfx__common_1ga9cc7f9da377228c1f0b191bd660577af" kindref="member">NRFX_INSTANCE_PRESENT</ref>(TIMER00), (p_reg == NRF_TIMER00), (false))), \
        (false)))</initializer>
        <briefdescription>
<para>Macro for checking whether the base frequency for the specified timer is 128 MHz. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_timer.h" line="218" column="9" bodyfile="hal/nrf_timer.h" bodystart="218" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__timer__hal_1ga88b543fbb177b6f8f2c9378d6dd00615" prot="public" static="no">
        <name>NRF_TIMER_IS_64MHZ_TIMER</name>
        <param><defname>p_reg</defname></param>
        <initializer>    (<ref refid="group__nrfx__utils_1ga3759226de0d998545425ded334168058" kindref="member">NRFX_COND_CODE_1</ref>(<ref refid="group__nrfx__utils_1ga238278032464c932dc46946bedd44473" kindref="member">NRFX_IS_ENABLED</ref>(NRF_CPU_FREQ_IS_64MHZ),                                \
        (<ref refid="group__nrfx__utils_1ga3759226de0d998545425ded334168058" kindref="member">NRFX_COND_CODE_1</ref>(<ref refid="group__nrfx__common_1ga9cc7f9da377228c1f0b191bd660577af" kindref="member">NRFX_INSTANCE_PRESENT</ref>(TIMER00), (p_reg == NRF_TIMER00), (false))), \
        (false)))</initializer>
        <briefdescription>
<para>Macro for checking whether the base frequency for the specified timer is 64 MHz. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_timer.h" line="226" column="9" bodyfile="hal/nrf_timer.h" bodystart="226" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__timer__hal_1gaee09ea134dae78c7b3e42634416324cf" prot="public" static="no">
        <name>NRF_TIMER_IS_32MHZ_TIMER</name>
        <param><defname>p_reg</defname></param>
        <initializer>    (<ref refid="group__nrfx__utils_1ga3759226de0d998545425ded334168058" kindref="member">NRFX_COND_CODE_1</ref>(<ref refid="group__nrfx__common_1ga9cc7f9da377228c1f0b191bd660577af" kindref="member">NRFX_INSTANCE_PRESENT</ref>(TIMER020), (p_reg == NRF_TIMER020), (false)) || \
     <ref refid="group__nrfx__utils_1ga3759226de0d998545425ded334168058" kindref="member">NRFX_COND_CODE_1</ref>(<ref refid="group__nrfx__common_1ga9cc7f9da377228c1f0b191bd660577af" kindref="member">NRFX_INSTANCE_PRESENT</ref>(TIMER021), (p_reg == NRF_TIMER021), (false)) || \
     <ref refid="group__nrfx__utils_1ga3759226de0d998545425ded334168058" kindref="member">NRFX_COND_CODE_1</ref>(<ref refid="group__nrfx__common_1ga9cc7f9da377228c1f0b191bd660577af" kindref="member">NRFX_INSTANCE_PRESENT</ref>(TIMER022), (p_reg == NRF_TIMER022), (false)) || \
     <ref refid="group__nrfx__utils_1ga3759226de0d998545425ded334168058" kindref="member">NRFX_COND_CODE_1</ref>(<ref refid="group__nrfx__common_1ga9cc7f9da377228c1f0b191bd660577af" kindref="member">NRFX_INSTANCE_PRESENT</ref>(TIMER10),  (p_reg == NRF_TIMER10),  (false)))</initializer>
        <briefdescription>
<para>Macro for checking whether the base frequency for the specified timer is 32 MHz. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_timer.h" line="234" column="9" bodyfile="hal/nrf_timer.h" bodystart="234" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__timer__hal_1ga018c5fef9d84458226b20249a4b28f6d" prot="public" static="no">
        <name>NRF_TIMER_BASE_FREQUENCY_GET</name>
        <param><defname>p_reg</defname></param>
        <initializer>    ((<ref refid="group__nrf__timer__hal_1ga15223384d2f89ad36b96aada9aab509f" kindref="member">NRF_TIMER_IS_320MHZ_TIMER</ref>(p_reg)) ? (<ref refid="group__nrf__timer__hal_1ga73f8bac6d9fc9a98f64f8114e2ce00c0" kindref="member">NRF_TIMER_BASE_FREQUENCY_320MHZ</ref>): \
    ((<ref refid="group__nrf__timer__hal_1gaf4ee713f133b991c4267f9d0c5839cd8" kindref="member">NRF_TIMER_IS_128MHZ_TIMER</ref>(p_reg)) ? (<ref refid="group__nrf__timer__hal_1ga2e43f129d140d409a491436f7988f923" kindref="member">NRF_TIMER_BASE_FREQUENCY_128MHZ</ref>): \
    ((<ref refid="group__nrf__timer__hal_1ga88b543fbb177b6f8f2c9378d6dd00615" kindref="member">NRF_TIMER_IS_64MHZ_TIMER</ref>(p_reg))  ? (<ref refid="group__nrf__timer__hal_1gad3ac936a9bc470ab107a28711b1a6a2b" kindref="member">NRF_TIMER_BASE_FREQUENCY_64MHZ</ref>) : \
    ((<ref refid="group__nrf__timer__hal_1gaee09ea134dae78c7b3e42634416324cf" kindref="member">NRF_TIMER_IS_32MHZ_TIMER</ref>(p_reg))  ? (<ref refid="group__nrf__timer__hal_1gac548befeaf0379d5a691eb1fee474197" kindref="member">NRF_TIMER_BASE_FREQUENCY_32MHZ</ref>) : \
    (<ref refid="group__nrf__timer__hal_1ga10dc600fe7ff7d27204f781236a391e1" kindref="member">NRF_TIMER_BASE_FREQUENCY_16MHZ</ref>)))))</initializer>
        <briefdescription>
<para>Macro for getting base frequency value in Hz for the specified timer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_timer.h" line="246" column="9" bodyfile="hal/nrf_timer.h" bodystart="246" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__timer__hal_1gabda69ecc14a1123aacf303a8e004d2a5" prot="public" static="no">
        <name>NRF_TIMER_PRESCALER_CALCULATE</name>
        <param><defname>base_freq</defname></param>
        <param><defname>frequency</defname></param>
        <initializer>        NRF_CTZ((uint32_t)(base_freq) / (uint32_t)(frequency))</initializer>
        <briefdescription>
<para>Macro for computing prescaler value for given base frequency and desired frequency. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>Not every combination of base frequency and desired frequency is supported.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">base_freq</parametername>
</parameternamelist>
<parameterdescription>
<para>Base clock frequency for timer in Hz. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">frequency</parametername>
</parameternamelist>
<parameterdescription>
<para>Desired frequency value in Hz. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_timer.h" line="261" column="9" bodyfile="hal/nrf_timer.h" bodystart="261" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__timer__hal_1ga039a5c273ecc5106956fd93ff587d7d8" prot="public" static="no">
        <name>NRF_TIMER_FREQUENCY_STATIC_CHECK</name>
        <param><defname>p_reg</defname></param>
        <param><defname>frequency</defname></param>
        <initializer>    <ref refid="group__nrfx__glue_1gab3edd9fe23f460c77b83defb81fc4983" kindref="member">NRFX_STATIC_ASSERT</ref>(                                                                          \
        (<ref refid="group__nrf__timer__hal_1ga018c5fef9d84458226b20249a4b28f6d" kindref="member">NRF_TIMER_BASE_FREQUENCY_GET</ref>(p_reg) == frequency) ||                                    \
        ((<ref refid="group__nrf__timer__hal_1ga018c5fef9d84458226b20249a4b28f6d" kindref="member">NRF_TIMER_BASE_FREQUENCY_GET</ref>(p_reg) % frequency == 0) &amp;&amp;                               \
         <ref refid="group__nrfx__common_1gad915509e5196347904abacd49406158f" kindref="member">NRFX_IS_POWER_OF_TWO</ref>(<ref refid="group__nrf__timer__hal_1ga018c5fef9d84458226b20249a4b28f6d" kindref="member">NRF_TIMER_BASE_FREQUENCY_GET</ref>(p_reg) / (uint32_t)frequency) &amp;&amp;      \
         ((<ref refid="group__nrf__timer__hal_1ga018c5fef9d84458226b20249a4b28f6d" kindref="member">NRF_TIMER_BASE_FREQUENCY_GET</ref>(p_reg) / frequency) &lt;= (1 &lt;&lt; <ref refid="group__nrf__timer__hal_1ga0206996722160e725012e56ff212f937" kindref="member">NRF_TIMER_PRESCALER_MAX</ref>))))</initializer>
        <briefdescription>
<para>Macro for checking whether specified frequency can be achived for given timer instance. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Macro is using compile time assertion.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">frequency</parametername>
</parameternamelist>
<parameterdescription>
<para>Desired frequency value in Hz. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_timer.h" line="272" column="9" bodyfile="hal/nrf_timer.h" bodystart="272" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__timer__hal_1gab6dbfc4ca839addb0a44eff1f69108f8" prot="public" static="no">
        <name>NRF_TIMER_CC_CHANNEL_COUNT</name>
        <param><defname>id</defname></param>
        <initializer><ref refid="group__nrfx__common_1gaa78d21b07d22f7a4bfbd1feda51ef1f4" kindref="member">NRFX_CONCAT_3</ref>(TIMER, id, _CC_NUM)</initializer>
        <briefdescription>
<para>Macro for getting the number of capture/compare channels available in a given timer instance. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">id</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of the specified timer instance. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_timer.h" line="285" column="9" bodyfile="hal/nrf_timer.h" bodystart="285" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__timer__hal_1ga7abd2e5156d512be8aff97b3bc0c2691" prot="public" static="no">
        <name>NRF_TIMER_CC_COUNT_MAX</name>
        <initializer><ref refid="group__nrfx__common_1gafbf1f8a50035b7d9f6c1cc1155ed1989" kindref="member">NRFX_ARRAY_SIZE</ref>(((NRF_TIMER_Type*)0)-&gt;EVENTS_COMPARE)</initializer>
        <briefdescription>
<para>Symbol specifying maximum number of available compare channels. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_timer.h" line="288" column="9" bodyfile="hal/nrf_timer.h" bodystart="288" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__timer__hal_1gacf9cefaaeab5f9005e54228c7ebf0ff4" prot="public" static="no">
        <name>NRF_TIMER_ALL_CHANNELS_INT_MASK</name>
        <initializer>        ((uint32_t)((1 &lt;&lt; <ref refid="group__nrf__timer__hal_1ga7abd2e5156d512be8aff97b3bc0c2691" kindref="member">NRF_TIMER_CC_COUNT_MAX</ref>) - 1) &lt;&lt; TIMER_INTENSET_COMPARE0_Pos)</initializer>
        <briefdescription>
<para>Symbol for creating the interrupt bitmask for all compare channels. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_timer.h" line="291" column="9" bodyfile="hal/nrf_timer.h" bodystart="291" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Hardware access layer for managing the TIMER peripheral. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
