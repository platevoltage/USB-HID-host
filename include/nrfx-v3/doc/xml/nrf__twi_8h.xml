<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="nrf__twi_8h" kind="file" language="C++">
    <compoundname>nrf_twi.h</compoundname>
    <includes local="no">nrfx.h</includes>
    <includedby refid="nrfx__twi_8h" local="no">drivers/include/nrfx_twi.h</includedby>
    <incdepgraph>
      <node id="1">
        <label>hal/nrf_twi.h</label>
        <link refid="nrf__twi_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>nrfx.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__nrf__twi__hal_1ga7ae2cf26c6ff333204dd818d04e71385" prot="public" static="no">
        <name>NRF_TWI_INST_GET</name>
        <param><defname>idx</defname></param>
        <initializer><ref refid="group__nrfx__utils_1ga5ea61d0994f6fb1ab5ed59d44f6a7ce9" kindref="member">NRFX_CONCAT</ref>(NRF_, TWI, idx)</initializer>
        <briefdescription>
<para>Macro getting pointer to the structure of registers of the TWI peripheral. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">idx</parametername>
</parameternamelist>
<parameterdescription>
<para>TWI instance index.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to the structure of registers of the TWI peripheral. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_twi.h" line="57" column="9" bodyfile="hal/nrf_twi.h" bodystart="57" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="group__nrf__twi__hal_1gae6266e8808b35b0569d429787f90b893" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_twi_task_t</name>
        <enumvalue id="group__nrf__twi__hal_1ggae6266e8808b35b0569d429787f90b893a201e8a7ff503f8661047af936d76e2dc" prot="public">
          <name>NRF_TWI_TASK_STARTRX</name>
          <initializer>= offsetof(NRF_TWI_Type, TASKS_STARTRX)</initializer>
          <briefdescription>
<para>Start TWI receive sequence. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__twi__hal_1ggae6266e8808b35b0569d429787f90b893ac288209e0ce0af27233bec87f4b1e1ed" prot="public">
          <name>NRF_TWI_TASK_STARTTX</name>
          <initializer>= offsetof(NRF_TWI_Type, TASKS_STARTTX)</initializer>
          <briefdescription>
<para>Start TWI transmit sequence. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__twi__hal_1ggae6266e8808b35b0569d429787f90b893a4e93311f7d7ea32152cf8af4252657b5" prot="public">
          <name>NRF_TWI_TASK_STOP</name>
          <initializer>= offsetof(NRF_TWI_Type, TASKS_STOP)</initializer>
          <briefdescription>
<para>Stop TWI transaction. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__twi__hal_1ggae6266e8808b35b0569d429787f90b893ac9d28316081dd65cc00e5492483f64ec" prot="public">
          <name>NRF_TWI_TASK_SUSPEND</name>
          <initializer>= offsetof(NRF_TWI_Type, TASKS_SUSPEND)</initializer>
          <briefdescription>
<para>Suspend TWI transaction. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__twi__hal_1ggae6266e8808b35b0569d429787f90b893a39fefa44739a24006602109d224da4c7" prot="public">
          <name>NRF_TWI_TASK_RESUME</name>
          <initializer>= offsetof(NRF_TWI_Type, TASKS_RESUME)</initializer>
          <briefdescription>
<para>Resume TWI transaction. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>TWI tasks. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_twi.h" line="60" column="1" bodyfile="hal/nrf_twi.h" bodystart="61" bodyend="67"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__twi__hal_1ga8035974e843dbf6e39d61dc434030dcb" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_twi_event_t</name>
        <enumvalue id="group__nrf__twi__hal_1gga8035974e843dbf6e39d61dc434030dcba8b127fe5474429af0d573e640983eda2" prot="public">
          <name>NRF_TWI_EVENT_STOPPED</name>
          <initializer>= offsetof(NRF_TWI_Type, EVENTS_STOPPED)</initializer>
          <briefdescription>
<para>TWI stopped. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__twi__hal_1gga8035974e843dbf6e39d61dc434030dcba743cd2af5092db9287def0693d9f30bd" prot="public">
          <name>NRF_TWI_EVENT_RXDREADY</name>
          <initializer>= offsetof(NRF_TWI_Type, EVENTS_RXDREADY)</initializer>
          <briefdescription>
<para>TWI RXD byte received. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__twi__hal_1gga8035974e843dbf6e39d61dc434030dcbab32d8d9ddf44e5231b6382cd9897fa47" prot="public">
          <name>NRF_TWI_EVENT_TXDSENT</name>
          <initializer>= offsetof(NRF_TWI_Type, EVENTS_TXDSENT)</initializer>
          <briefdescription>
<para>TWI TXD byte sent. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__twi__hal_1gga8035974e843dbf6e39d61dc434030dcbafb58b6ce2426cdfc927dad453acfaa20" prot="public">
          <name>NRF_TWI_EVENT_ERROR</name>
          <initializer>= offsetof(NRF_TWI_Type, EVENTS_ERROR)</initializer>
          <briefdescription>
<para>TWI error. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__twi__hal_1gga8035974e843dbf6e39d61dc434030dcba2b452bc458e4a4220849ac595209d17e" prot="public">
          <name>NRF_TWI_EVENT_BB</name>
          <initializer>= offsetof(NRF_TWI_Type, EVENTS_BB)</initializer>
          <briefdescription>
<para>TWI byte boundary, generated before each byte that is sent or received. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__twi__hal_1gga8035974e843dbf6e39d61dc434030dcbafc4d06db26f5cd7d5c7df5a5c13890e2" prot="public">
          <name>NRF_TWI_EVENT_SUSPENDED</name>
          <initializer>= offsetof(NRF_TWI_Type, EVENTS_SUSPENDED)</initializer>
          <briefdescription>
<para>TWI entered the suspended state. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>TWI events. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_twi.h" line="70" column="1" bodyfile="hal/nrf_twi.h" bodystart="71" bodyend="78"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__twi__hal_1ga7c68802ffd95a19c3a8988cd8e747e00" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_twi_short_mask_t</name>
        <enumvalue id="group__nrf__twi__hal_1gga7c68802ffd95a19c3a8988cd8e747e00adde0d621d4f8d9696a430a1ff5df89f2" prot="public">
          <name>NRF_TWI_SHORT_BB_SUSPEND_MASK</name>
          <initializer>= TWI_SHORTS_BB_SUSPEND_Msk</initializer>
          <briefdescription>
<para>Shortcut between BB event and SUSPEND task. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__twi__hal_1gga7c68802ffd95a19c3a8988cd8e747e00af8ff88f5693898183c65e2d699001a52" prot="public">
          <name>NRF_TWI_SHORT_BB_STOP_MASK</name>
          <initializer>= TWI_SHORTS_BB_STOP_Msk</initializer>
          <briefdescription>
<para>Shortcut between BB event and STOP task. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__twi__hal_1gga7c68802ffd95a19c3a8988cd8e747e00a3c56b3dad31ba763bbd81d5d712d5c27" prot="public">
          <name>NRF_TWI_ALL_SHORTS_MASK</name>
          <initializer>= TWI_SHORTS_BB_SUSPEND_Msk |
                                    TWI_SHORTS_BB_STOP_Msk</initializer>
          <briefdescription>
<para>All TWI shortcuts. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>TWI shortcuts. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_twi.h" line="81" column="1" bodyfile="hal/nrf_twi.h" bodystart="82" bodyend="87"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__twi__hal_1gabb14594bbe16f83a734bbdf7d000928c" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_twi_int_mask_t</name>
        <enumvalue id="group__nrf__twi__hal_1ggabb14594bbe16f83a734bbdf7d000928caacf6b9250427020e3ccf919dee68ea51" prot="public">
          <name>NRF_TWI_INT_STOPPED_MASK</name>
          <initializer>= TWI_INTENSET_STOPPED_Msk</initializer>
          <briefdescription>
<para>Interrupt on STOPPED event. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__twi__hal_1ggabb14594bbe16f83a734bbdf7d000928cad9bf253dac1103b0c19cd1fc7a84d344" prot="public">
          <name>NRF_TWI_INT_RXDREADY_MASK</name>
          <initializer>= TWI_INTENSET_RXDREADY_Msk</initializer>
          <briefdescription>
<para>Interrupt on RXDREADY event. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__twi__hal_1ggabb14594bbe16f83a734bbdf7d000928ca7a4be6e4cdf34db4efa58689269f3689" prot="public">
          <name>NRF_TWI_INT_TXDSENT_MASK</name>
          <initializer>= TWI_INTENSET_TXDSENT_Msk</initializer>
          <briefdescription>
<para>Interrupt on TXDSENT event. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__twi__hal_1ggabb14594bbe16f83a734bbdf7d000928cad66707ee873c8dac8038db1eb2da2e01" prot="public">
          <name>NRF_TWI_INT_ERROR_MASK</name>
          <initializer>= TWI_INTENSET_ERROR_Msk</initializer>
          <briefdescription>
<para>Interrupt on ERROR event. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__twi__hal_1ggabb14594bbe16f83a734bbdf7d000928ca41150523f7f43119e5fe442b23164ad4" prot="public">
          <name>NRF_TWI_INT_BB_MASK</name>
          <initializer>= TWI_INTENSET_BB_Msk</initializer>
          <briefdescription>
<para>Interrupt on BB event. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__twi__hal_1ggabb14594bbe16f83a734bbdf7d000928cab943c5719a076438eea68b3df263d63f" prot="public">
          <name>NRF_TWI_INT_SUSPENDED_MASK</name>
          <initializer>= TWI_INTENSET_SUSPENDED_Msk</initializer>
          <briefdescription>
<para>Interrupt on SUSPENDED event. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__twi__hal_1ggabb14594bbe16f83a734bbdf7d000928ca7f3c921d717e7e3e4fd1a580f6a1de86" prot="public">
          <name>NRF_TWI_ALL_INTS_MASK</name>
          <initializer>= TWI_INTENSET_STOPPED_Msk   |
                                  TWI_INTENSET_RXDREADY_Msk  |
                                  TWI_INTENSET_TXDSENT_Msk   |
                                  TWI_INTENSET_ERROR_Msk     |
                                  TWI_INTENSET_BB_Msk        |
                                  TWI_INTENSET_SUSPENDED_Msk</initializer>
          <briefdescription>
<para>All TWI interrupts. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>TWI interrupts. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_twi.h" line="90" column="1" bodyfile="hal/nrf_twi.h" bodystart="91" bodyend="104"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__twi__hal_1ga7911f5fecbfe83193a83ca9cde36757e" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_twi_error_t</name>
        <enumvalue id="group__nrf__twi__hal_1gga7911f5fecbfe83193a83ca9cde36757ea2dfbca7d7fb28b352f4d4d79c6459201" prot="public">
          <name>NRF_TWI_ERROR_ADDRESS_NACK</name>
          <initializer>= TWI_ERRORSRC_ANACK_Msk</initializer>
          <briefdescription>
<para>NACK received after sending the address. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__twi__hal_1gga7911f5fecbfe83193a83ca9cde36757ea1c43773810bb74ccfb8fe832c5b2a28d" prot="public">
          <name>NRF_TWI_ERROR_DATA_NACK</name>
          <initializer>= TWI_ERRORSRC_DNACK_Msk</initializer>
          <briefdescription>
<para>NACK received after sending a data byte. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__twi__hal_1gga7911f5fecbfe83193a83ca9cde36757ea7e3d8a25d9565c3a21f8f6f5a6e2a31e" prot="public">
          <name>NRF_TWI_ERROR_OVERRUN</name>
          <initializer>= TWI_ERRORSRC_OVERRUN_Msk</initializer>
          <briefdescription>
<para>Overrun error. </para>
          </briefdescription>
          <detaileddescription>
<para>A new byte was received before the previous byte was read from the RXD register (previous data is lost). </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>TWI error source. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_twi.h" line="107" column="1" bodyfile="hal/nrf_twi.h" bodystart="108" bodyend="114"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__twi__hal_1ga4366397176d6e463a2e594be0d996a61" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_twi_frequency_t</name>
        <enumvalue id="group__nrf__twi__hal_1gga4366397176d6e463a2e594be0d996a61a07af2ed5e83d9bd35903d51792856fa9" prot="public">
          <name>NRF_TWI_FREQ_100K</name>
          <initializer>= TWI_FREQUENCY_FREQUENCY_K100</initializer>
          <briefdescription>
<para>100 kbps. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__twi__hal_1gga4366397176d6e463a2e594be0d996a61ac90a9ff47950ac9468a6c54043840803" prot="public">
          <name>NRF_TWI_FREQ_250K</name>
          <initializer>= TWI_FREQUENCY_FREQUENCY_K250</initializer>
          <briefdescription>
<para>250 kbps. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__twi__hal_1gga4366397176d6e463a2e594be0d996a61adfacb7d9aea05c6cb7cd2e0c54d80f61" prot="public">
          <name>NRF_TWI_FREQ_400K</name>
          <initializer>= TWI_FREQUENCY_FREQUENCY_K400</initializer>
          <briefdescription>
<para>400 kbps. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>TWI master clock frequency. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_twi.h" line="117" column="1" bodyfile="hal/nrf_twi.h" bodystart="118" bodyend="122"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__nrf__twi__hal_1ga7eedac4b7c664be3bcf11ae9d620e7bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_twi_task_trigger</definition>
        <argsstring>(NRF_TWI_Type *p_reg, nrf_twi_task_t task)</argsstring>
        <name>nrf_twi_task_trigger</name>
        <param>
          <type>NRF_TWI_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__twi__hal_1gae6266e8808b35b0569d429787f90b893" kindref="member">nrf_twi_task_t</ref></type>
          <declname>task</declname>
        </param>
        <briefdescription>
<para>Function for activating the specified TWI task. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">task</parametername>
</parameternamelist>
<parameterdescription>
<para>Task to be activated. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_twi.h" line="325" column="24" bodyfile="hal/nrf_twi.h" bodystart="325" bodyend="329" declfile="hal/nrf_twi.h" declline="131" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__twi__hal_1ga5f7114030111c23725fe024863b922cf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_twi_task_address_get</definition>
        <argsstring>(NRF_TWI_Type const *p_reg, nrf_twi_task_t task)</argsstring>
        <name>nrf_twi_task_address_get</name>
        <param>
          <type>NRF_TWI_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__twi__hal_1gae6266e8808b35b0569d429787f90b893" kindref="member">nrf_twi_task_t</ref></type>
          <declname>task</declname>
        </param>
        <briefdescription>
<para>Function for getting the address of the specified TWI task register. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">task</parametername>
</parameternamelist>
<parameterdescription>
<para>The specified task.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Address of the specified task register. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_twi.h" line="331" column="28" bodyfile="hal/nrf_twi.h" bodystart="331" bodyend="335" declfile="hal/nrf_twi.h" declline="142" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__twi__hal_1ga6b1ee09806aa889ff04c1753a5cc0105" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_twi_event_clear</definition>
        <argsstring>(NRF_TWI_Type *p_reg, nrf_twi_event_t event)</argsstring>
        <name>nrf_twi_event_clear</name>
        <param>
          <type>NRF_TWI_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__twi__hal_1ga8035974e843dbf6e39d61dc434030dcb" kindref="member">nrf_twi_event_t</ref></type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>Function for clearing the specified TWI event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event to clear. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_twi.h" line="337" column="24" bodyfile="hal/nrf_twi.h" bodystart="337" bodyend="342" declfile="hal/nrf_twi.h" declline="151" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__twi__hal_1gaead8839ada039807481082ecf7451549" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE bool</type>
        <definition>NRF_STATIC_INLINE bool nrf_twi_event_check</definition>
        <argsstring>(NRF_TWI_Type const *p_reg, nrf_twi_event_t event)</argsstring>
        <name>nrf_twi_event_check</name>
        <param>
          <type>NRF_TWI_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__twi__hal_1ga8035974e843dbf6e39d61dc434030dcb" kindref="member">nrf_twi_event_t</ref></type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>Function for retrieving the state of the TWI event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event to be checked.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>The event has been generated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>The event has not been generated. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_twi.h" line="344" column="24" bodyfile="hal/nrf_twi.h" bodystart="344" bodyend="348" declfile="hal/nrf_twi.h" declline="163" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__twi__hal_1ga2d083e704a34173b458a41fc20028837" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_twi_event_address_get</definition>
        <argsstring>(NRF_TWI_Type const *p_reg, nrf_twi_event_t event)</argsstring>
        <name>nrf_twi_event_address_get</name>
        <param>
          <type>NRF_TWI_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__twi__hal_1ga8035974e843dbf6e39d61dc434030dcb" kindref="member">nrf_twi_event_t</ref></type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>Function for getting the address of the specified TWI event register. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>The specified event.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Address of the specified event register. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_twi.h" line="350" column="28" bodyfile="hal/nrf_twi.h" bodystart="350" bodyend="354" declfile="hal/nrf_twi.h" declline="174" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__twi__hal_1gabf61abb319e94b4758051ece36d337d3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_twi_shorts_enable</definition>
        <argsstring>(NRF_TWI_Type *p_reg, uint32_t mask)</argsstring>
        <name>nrf_twi_shorts_enable</name>
        <param>
          <type>NRF_TWI_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Function for enabling the specified shortcuts. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Shortcuts to be enabled. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_twi.h" line="356" column="24" bodyfile="hal/nrf_twi.h" bodystart="356" bodyend="360" declfile="hal/nrf_twi.h" declline="183" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__twi__hal_1ga6a56f337746fb83ff781ac71dfea1b33" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_twi_shorts_disable</definition>
        <argsstring>(NRF_TWI_Type *p_reg, uint32_t mask)</argsstring>
        <name>nrf_twi_shorts_disable</name>
        <param>
          <type>NRF_TWI_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Function for disabling the specified shortcuts. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Shortcuts to be disabled. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_twi.h" line="362" column="24" bodyfile="hal/nrf_twi.h" bodystart="362" bodyend="366" declfile="hal/nrf_twi.h" declline="192" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__twi__hal_1gadeb553b2781c4cf6935832604357d78d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_twi_int_enable</definition>
        <argsstring>(NRF_TWI_Type *p_reg, uint32_t mask)</argsstring>
        <name>nrf_twi_int_enable</name>
        <param>
          <type>NRF_TWI_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Function for enabling the specified interrupts. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of interrupts to be enabled. Use <ref refid="group__nrf__twi__hal_1gabb14594bbe16f83a734bbdf7d000928c" kindref="member">nrf_twi_int_mask_t</ref> values for bit masking. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_twi.h" line="368" column="24" bodyfile="hal/nrf_twi.h" bodystart="368" bodyend="372" declfile="hal/nrf_twi.h" declline="202" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__twi__hal_1ga9478b9ab00f552270977d9b509672116" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_twi_int_disable</definition>
        <argsstring>(NRF_TWI_Type *p_reg, uint32_t mask)</argsstring>
        <name>nrf_twi_int_disable</name>
        <param>
          <type>NRF_TWI_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Function for disabling the specified interrupts. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of interrupts to be disabled. Use <ref refid="group__nrf__twi__hal_1gabb14594bbe16f83a734bbdf7d000928c" kindref="member">nrf_twi_int_mask_t</ref> values for bit masking. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_twi.h" line="374" column="24" bodyfile="hal/nrf_twi.h" bodystart="374" bodyend="378" declfile="hal/nrf_twi.h" declline="212" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__twi__hal_1ga74a253db984fd641afa73ab116214795" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_twi_int_enable_check</definition>
        <argsstring>(NRF_TWI_Type const *p_reg, uint32_t mask)</argsstring>
        <name>nrf_twi_int_enable_check</name>
        <param>
          <type>NRF_TWI_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Function for checking if the specified interrupts are enabled. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of interrupts to be checked. Use <ref refid="group__nrf__twi__hal_1gabb14594bbe16f83a734bbdf7d000928c" kindref="member">nrf_twi_int_mask_t</ref> values for bit masking.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Mask of enabled interrupts. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_twi.h" line="380" column="28" bodyfile="hal/nrf_twi.h" bodystart="380" bodyend="383" declfile="hal/nrf_twi.h" declline="224" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__twi__hal_1ga20064f5644e6e80a77a6fd2219c134b1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_twi_enable</definition>
        <argsstring>(NRF_TWI_Type *p_reg)</argsstring>
        <name>nrf_twi_enable</name>
        <param>
          <type>NRF_TWI_Type *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for enabling the TWI peripheral. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_twi.h" line="385" column="24" bodyfile="hal/nrf_twi.h" bodystart="385" bodyend="388" declfile="hal/nrf_twi.h" declline="231" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__twi__hal_1ga96407b44dc354dad93bdc6ff54055366" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_twi_disable</definition>
        <argsstring>(NRF_TWI_Type *p_reg)</argsstring>
        <name>nrf_twi_disable</name>
        <param>
          <type>NRF_TWI_Type *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for disabling the TWI peripheral. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_twi.h" line="390" column="24" bodyfile="hal/nrf_twi.h" bodystart="390" bodyend="393" declfile="hal/nrf_twi.h" declline="238" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__twi__hal_1ga62b4256b02b044b44abe3744746ff447" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_twi_pins_set</definition>
        <argsstring>(NRF_TWI_Type *p_reg, uint32_t scl_pin, uint32_t sda_pin)</argsstring>
        <name>nrf_twi_pins_set</name>
        <param>
          <type>NRF_TWI_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>scl_pin</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>sda_pin</declname>
        </param>
        <briefdescription>
<para>Function for configuring TWI pins. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">scl_pin</parametername>
</parameternamelist>
<parameterdescription>
<para>SCL pin number. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">sda_pin</parametername>
</parameternamelist>
<parameterdescription>
<para>SDA pin number. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_twi.h" line="395" column="24" bodyfile="hal/nrf_twi.h" bodystart="395" bodyend="410" declfile="hal/nrf_twi.h" declline="247" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__twi__hal_1ga82bc77783e711ccd9df5e79a99325d6c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_twi_scl_pin_get</definition>
        <argsstring>(NRF_TWI_Type const *p_reg)</argsstring>
        <name>nrf_twi_scl_pin_get</name>
        <param>
          <type>NRF_TWI_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for retrieving the SCL pin selection. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>SCL pin selection. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_twi.h" line="412" column="28" bodyfile="hal/nrf_twi.h" bodystart="412" bodyend="419" declfile="hal/nrf_twi.h" declline="258" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__twi__hal_1ga2c566d9ca1865fc56f2217396f768ba2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_twi_sda_pin_get</definition>
        <argsstring>(NRF_TWI_Type const *p_reg)</argsstring>
        <name>nrf_twi_sda_pin_get</name>
        <param>
          <type>NRF_TWI_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for retrieving the SDA pin selection. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>SDA pin selection. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_twi.h" line="421" column="28" bodyfile="hal/nrf_twi.h" bodystart="421" bodyend="428" declfile="hal/nrf_twi.h" declline="267" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__twi__hal_1ga43d7e6678622d12dbe00348a85a30bbe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_twi_frequency_set</definition>
        <argsstring>(NRF_TWI_Type *p_reg, nrf_twi_frequency_t frequency)</argsstring>
        <name>nrf_twi_frequency_set</name>
        <param>
          <type>NRF_TWI_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__twi__hal_1ga4366397176d6e463a2e594be0d996a61" kindref="member">nrf_twi_frequency_t</ref></type>
          <declname>frequency</declname>
        </param>
        <briefdescription>
<para>Function for setting the TWI master clock frequency. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">frequency</parametername>
</parameternamelist>
<parameterdescription>
<para>TWI frequency. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_twi.h" line="430" column="24" bodyfile="hal/nrf_twi.h" bodystart="430" bodyend="434" declfile="hal/nrf_twi.h" declline="275" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__twi__hal_1gac9ba35e01f68df4c983addeb343d489a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_twi_errorsrc_get_and_clear</definition>
        <argsstring>(NRF_TWI_Type *p_reg)</argsstring>
        <name>nrf_twi_errorsrc_get_and_clear</name>
        <param>
          <type>NRF_TWI_Type *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for checking the TWI error source. </para>
        </briefdescription>
        <detaileddescription>
<para>The error flags are cleared after reading.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Mask with error source flags. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_twi.h" line="436" column="28" bodyfile="hal/nrf_twi.h" bodystart="436" bodyend="444" declfile="hal/nrf_twi.h" declline="287" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__twi__hal_1ga66d5f35d8a4761337ea1246de2c00ce3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_twi_address_set</definition>
        <argsstring>(NRF_TWI_Type *p_reg, uint8_t address)</argsstring>
        <name>nrf_twi_address_set</name>
        <param>
          <type>NRF_TWI_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>address</declname>
        </param>
        <briefdescription>
<para>Function for setting the address to be used in TWI transfers. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">address</parametername>
</parameternamelist>
<parameterdescription>
<para>Address to be used in transfers. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_twi.h" line="446" column="24" bodyfile="hal/nrf_twi.h" bodystart="446" bodyend="449" declfile="hal/nrf_twi.h" declline="295" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__twi__hal_1ga012f2673135ac2336b30f267009cd57a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint8_t</type>
        <definition>NRF_STATIC_INLINE uint8_t nrf_twi_rxd_get</definition>
        <argsstring>(NRF_TWI_Type const *p_reg)</argsstring>
        <name>nrf_twi_rxd_get</name>
        <param>
          <type>NRF_TWI_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for reading data received by TWI. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Received data. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_twi.h" line="451" column="27" bodyfile="hal/nrf_twi.h" bodystart="451" bodyend="454" declfile="hal/nrf_twi.h" declline="304" declcolumn="27"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__twi__hal_1ga0ef2a64b279d46fc1477880fad4247bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_twi_txd_set</definition>
        <argsstring>(NRF_TWI_Type *p_reg, uint8_t data)</argsstring>
        <name>nrf_twi_txd_set</name>
        <param>
          <type>NRF_TWI_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Function for writing data to be transmitted by TWI. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">data</parametername>
</parameternamelist>
<parameterdescription>
<para>Data to be transmitted. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_twi.h" line="456" column="24" bodyfile="hal/nrf_twi.h" bodystart="456" bodyend="459" declfile="hal/nrf_twi.h" declline="312" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__twi__hal_1ga432302136abc9c690fca190f38186f90" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_twi_shorts_set</definition>
        <argsstring>(NRF_TWI_Type *p_reg, uint32_t mask)</argsstring>
        <name>nrf_twi_shorts_set</name>
        <param>
          <type>NRF_TWI_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Function for setting the specified shortcuts. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Shortcuts to be set. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_twi.h" line="461" column="24" bodyfile="hal/nrf_twi.h" bodystart="461" bodyend="465" declfile="hal/nrf_twi.h" declline="320" declcolumn="24"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2015<sp/>-<sp/>2024,<sp/>Nordic<sp/>Semiconductor<sp/>ASA</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>All<sp/>rights<sp/>reserved.</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>SPDX-License-Identifier:<sp/>BSD-3-Clause</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions<sp/>are<sp/>met:</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>1.<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright<sp/>notice,<sp/>this</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>2.<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the<sp/>distribution.</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/>3.<sp/>Neither<sp/>the<sp/>name<sp/>of<sp/>the<sp/>copyright<sp/>holder<sp/>nor<sp/>the<sp/>names<sp/>of<sp/>its</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>contributors<sp/>may<sp/>be<sp/>used<sp/>to<sp/>endorse<sp/>or<sp/>promote<sp/>products<sp/>derived<sp/>from<sp/>this</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>software<sp/>without<sp/>specific<sp/>prior<sp/>written<sp/>permission.</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>COPYRIGHT<sp/>HOLDERS<sp/>AND<sp/>CONTRIBUTORS<sp/>&quot;AS<sp/>IS&quot;</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/>AND<sp/>ANY<sp/>EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>THE</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*<sp/>ARE<sp/>DISCLAIMED.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>COPYRIGHT<sp/>HOLDER<sp/>OR<sp/>CONTRIBUTORS<sp/>BE</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,<sp/>SPECIAL,<sp/>EXEMPLARY,<sp/>OR</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>PROCUREMENT<sp/>OF</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>*<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,<sp/>DATA,<sp/>OR<sp/>PROFITS;<sp/>OR<sp/>BUSINESS</highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/>*<sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY<sp/>THEORY<sp/>OF<sp/>LIABILITY,<sp/>WHETHER<sp/>IN</highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/>*<sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR<sp/>OTHERWISE)</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/>*<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE<sp/>OF<sp/>THIS<sp/>SOFTWARE,<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/>*<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight></codeline>
<codeline lineno="32"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>NRF_TWI_H__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_TWI_H__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;nrfx.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="43"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="44"><highlight class="comment"><sp/>*<sp/>@defgroup<sp/>nrf_twi_hal<sp/>TWI<sp/>HAL</highlight></codeline>
<codeline lineno="45"><highlight class="comment"><sp/>*<sp/>@{</highlight></codeline>
<codeline lineno="46"><highlight class="comment"><sp/>*<sp/>@ingroup<sp/>nrf_twi</highlight></codeline>
<codeline lineno="47"><highlight class="comment"><sp/>*<sp/>@brief<sp/><sp/><sp/>Hardware<sp/>access<sp/>layer<sp/>for<sp/>managing<sp/>the<sp/>TWI<sp/>peripheral.</highlight></codeline>
<codeline lineno="48"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="50"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="51"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Macro<sp/>getting<sp/>pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>TWI<sp/>peripheral.</highlight></codeline>
<codeline lineno="52"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="53"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>idx<sp/>TWI<sp/>instance<sp/>index.</highlight></codeline>
<codeline lineno="54"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="55"><highlight class="comment"><sp/>*<sp/>@return<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>TWI<sp/>peripheral.</highlight></codeline>
<codeline lineno="56"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_TWI_INST_GET(idx)<sp/>NRFX_CONCAT(NRF_,<sp/>TWI,<sp/>idx)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="59"><highlight class="comment">/**<sp/>@brief<sp/>TWI<sp/>tasks.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal">{</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__twi__hal_1ggae6266e8808b35b0569d429787f90b893a201e8a7ff503f8661047af936d76e2dc" kindref="member">NRF_TWI_TASK_STARTRX</ref><sp/>=<sp/>offsetof(NRF_TWI_Type,<sp/>TASKS_STARTRX),<sp/></highlight><highlight class="comment">///&lt;<sp/>Start<sp/>TWI<sp/>receive<sp/>sequence.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__twi__hal_1ggae6266e8808b35b0569d429787f90b893ac288209e0ce0af27233bec87f4b1e1ed" kindref="member">NRF_TWI_TASK_STARTTX</ref><sp/>=<sp/>offsetof(NRF_TWI_Type,<sp/>TASKS_STARTTX),<sp/></highlight><highlight class="comment">///&lt;<sp/>Start<sp/>TWI<sp/>transmit<sp/>sequence.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__twi__hal_1ggae6266e8808b35b0569d429787f90b893a4e93311f7d7ea32152cf8af4252657b5" kindref="member">NRF_TWI_TASK_STOP</ref><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_TWI_Type,<sp/>TASKS_STOP),<sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Stop<sp/>TWI<sp/>transaction.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__twi__hal_1ggae6266e8808b35b0569d429787f90b893ac9d28316081dd65cc00e5492483f64ec" kindref="member">NRF_TWI_TASK_SUSPEND</ref><sp/>=<sp/>offsetof(NRF_TWI_Type,<sp/>TASKS_SUSPEND),<sp/></highlight><highlight class="comment">///&lt;<sp/>Suspend<sp/>TWI<sp/>transaction.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__twi__hal_1ggae6266e8808b35b0569d429787f90b893a39fefa44739a24006602109d224da4c7" kindref="member">NRF_TWI_TASK_RESUME</ref><sp/><sp/>=<sp/>offsetof(NRF_TWI_Type,<sp/>TASKS_RESUME)<sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Resume<sp/>TWI<sp/>transaction.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal">}<sp/><ref refid="group__nrf__twi__hal_1gae6266e8808b35b0569d429787f90b893" kindref="member">nrf_twi_task_t</ref>;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="69"><highlight class="comment">/**<sp/>@brief<sp/>TWI<sp/>events.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal">{</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__twi__hal_1gga8035974e843dbf6e39d61dc434030dcba8b127fe5474429af0d573e640983eda2" kindref="member">NRF_TWI_EVENT_STOPPED</ref><sp/><sp/><sp/>=<sp/>offsetof(NRF_TWI_Type,<sp/>EVENTS_STOPPED),<sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>TWI<sp/>stopped.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__twi__hal_1gga8035974e843dbf6e39d61dc434030dcba743cd2af5092db9287def0693d9f30bd" kindref="member">NRF_TWI_EVENT_RXDREADY</ref><sp/><sp/>=<sp/>offsetof(NRF_TWI_Type,<sp/>EVENTS_RXDREADY),<sp/></highlight><highlight class="comment">///&lt;<sp/>TWI<sp/>RXD<sp/>byte<sp/>received.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__twi__hal_1gga8035974e843dbf6e39d61dc434030dcbab32d8d9ddf44e5231b6382cd9897fa47" kindref="member">NRF_TWI_EVENT_TXDSENT</ref><sp/><sp/><sp/>=<sp/>offsetof(NRF_TWI_Type,<sp/>EVENTS_TXDSENT),<sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>TWI<sp/>TXD<sp/>byte<sp/>sent.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__twi__hal_1gga8035974e843dbf6e39d61dc434030dcbafb58b6ce2426cdfc927dad453acfaa20" kindref="member">NRF_TWI_EVENT_ERROR</ref><sp/><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_TWI_Type,<sp/>EVENTS_ERROR),<sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>TWI<sp/>error.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__twi__hal_1gga8035974e843dbf6e39d61dc434030dcba2b452bc458e4a4220849ac595209d17e" kindref="member">NRF_TWI_EVENT_BB</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_TWI_Type,<sp/>EVENTS_BB),<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>TWI<sp/>byte<sp/>boundary,<sp/>generated<sp/>before<sp/>each<sp/>byte<sp/>that<sp/>is<sp/>sent<sp/>or<sp/>received.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__twi__hal_1gga8035974e843dbf6e39d61dc434030dcbafc4d06db26f5cd7d5c7df5a5c13890e2" kindref="member">NRF_TWI_EVENT_SUSPENDED</ref><sp/>=<sp/>offsetof(NRF_TWI_Type,<sp/>EVENTS_SUSPENDED)<sp/></highlight><highlight class="comment">///&lt;<sp/>TWI<sp/>entered<sp/>the<sp/>suspended<sp/>state.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal">}<sp/><ref refid="group__nrf__twi__hal_1ga8035974e843dbf6e39d61dc434030dcb" kindref="member">nrf_twi_event_t</ref>;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="80"><highlight class="comment">/**<sp/>@brief<sp/>TWI<sp/>shortcuts.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal">{</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__twi__hal_1gga7c68802ffd95a19c3a8988cd8e747e00adde0d621d4f8d9696a430a1ff5df89f2" kindref="member">NRF_TWI_SHORT_BB_SUSPEND_MASK</ref><sp/>=<sp/>TWI_SHORTS_BB_SUSPEND_Msk,<sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Shortcut<sp/>between<sp/>BB<sp/>event<sp/>and<sp/>SUSPEND<sp/>task.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__twi__hal_1gga7c68802ffd95a19c3a8988cd8e747e00af8ff88f5693898183c65e2d699001a52" kindref="member">NRF_TWI_SHORT_BB_STOP_MASK</ref><sp/><sp/><sp/><sp/>=<sp/>TWI_SHORTS_BB_STOP_Msk,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Shortcut<sp/>between<sp/>BB<sp/>event<sp/>and<sp/>STOP<sp/>task.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__twi__hal_1gga7c68802ffd95a19c3a8988cd8e747e00a3c56b3dad31ba763bbd81d5d712d5c27" kindref="member">NRF_TWI_ALL_SHORTS_MASK</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>TWI_SHORTS_BB_SUSPEND_Msk<sp/>|</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TWI_SHORTS_BB_STOP_Msk<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>All<sp/>TWI<sp/>shortcuts.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal">}<sp/><ref refid="group__nrf__twi__hal_1ga7c68802ffd95a19c3a8988cd8e747e00" kindref="member">nrf_twi_short_mask_t</ref>;</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="89"><highlight class="comment">/**<sp/>@brief<sp/>TWI<sp/>interrupts.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal">{</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__twi__hal_1ggabb14594bbe16f83a734bbdf7d000928caacf6b9250427020e3ccf919dee68ea51" kindref="member">NRF_TWI_INT_STOPPED_MASK</ref><sp/><sp/><sp/><sp/>=<sp/>TWI_INTENSET_STOPPED_Msk,<sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Interrupt<sp/>on<sp/>STOPPED<sp/>event.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__twi__hal_1ggabb14594bbe16f83a734bbdf7d000928cad9bf253dac1103b0c19cd1fc7a84d344" kindref="member">NRF_TWI_INT_RXDREADY_MASK</ref><sp/><sp/><sp/>=<sp/>TWI_INTENSET_RXDREADY_Msk,<sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Interrupt<sp/>on<sp/>RXDREADY<sp/>event.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__twi__hal_1ggabb14594bbe16f83a734bbdf7d000928ca7a4be6e4cdf34db4efa58689269f3689" kindref="member">NRF_TWI_INT_TXDSENT_MASK</ref><sp/><sp/><sp/><sp/>=<sp/>TWI_INTENSET_TXDSENT_Msk,<sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Interrupt<sp/>on<sp/>TXDSENT<sp/>event.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__twi__hal_1ggabb14594bbe16f83a734bbdf7d000928cad66707ee873c8dac8038db1eb2da2e01" kindref="member">NRF_TWI_INT_ERROR_MASK</ref><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>TWI_INTENSET_ERROR_Msk,<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Interrupt<sp/>on<sp/>ERROR<sp/>event.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__twi__hal_1ggabb14594bbe16f83a734bbdf7d000928ca41150523f7f43119e5fe442b23164ad4" kindref="member">NRF_TWI_INT_BB_MASK</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>TWI_INTENSET_BB_Msk,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Interrupt<sp/>on<sp/>BB<sp/>event.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__twi__hal_1ggabb14594bbe16f83a734bbdf7d000928cab943c5719a076438eea68b3df263d63f" kindref="member">NRF_TWI_INT_SUSPENDED_MASK</ref><sp/><sp/>=<sp/>TWI_INTENSET_SUSPENDED_Msk,<sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Interrupt<sp/>on<sp/>SUSPENDED<sp/>event.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__twi__hal_1ggabb14594bbe16f83a734bbdf7d000928ca7f3c921d717e7e3e4fd1a580f6a1de86" kindref="member">NRF_TWI_ALL_INTS_MASK</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>TWI_INTENSET_STOPPED_Msk<sp/><sp/><sp/>|</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TWI_INTENSET_RXDREADY_Msk<sp/><sp/>|</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TWI_INTENSET_TXDSENT_Msk<sp/><sp/><sp/>|</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TWI_INTENSET_ERROR_Msk<sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TWI_INTENSET_BB_Msk<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TWI_INTENSET_SUSPENDED_Msk<sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>All<sp/>TWI<sp/>interrupts.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal">}<sp/><ref refid="group__nrf__twi__hal_1gabb14594bbe16f83a734bbdf7d000928c" kindref="member">nrf_twi_int_mask_t</ref>;</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="106"><highlight class="comment">/**<sp/>@brief<sp/>TWI<sp/>error<sp/>source.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal">{</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__twi__hal_1gga7911f5fecbfe83193a83ca9cde36757ea2dfbca7d7fb28b352f4d4d79c6459201" kindref="member">NRF_TWI_ERROR_ADDRESS_NACK</ref><sp/>=<sp/>TWI_ERRORSRC_ANACK_Msk,<sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>NACK<sp/>received<sp/>after<sp/>sending<sp/>the<sp/>address.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__twi__hal_1gga7911f5fecbfe83193a83ca9cde36757ea1c43773810bb74ccfb8fe832c5b2a28d" kindref="member">NRF_TWI_ERROR_DATA_NACK</ref><sp/><sp/><sp/><sp/>=<sp/>TWI_ERRORSRC_DNACK_Msk,<sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>NACK<sp/>received<sp/>after<sp/>sending<sp/>a<sp/>data<sp/>byte.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__twi__hal_1gga7911f5fecbfe83193a83ca9cde36757ea7e3d8a25d9565c3a21f8f6f5a6e2a31e" kindref="member">NRF_TWI_ERROR_OVERRUN</ref><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>TWI_ERRORSRC_OVERRUN_Msk<sp/></highlight><highlight class="comment">///&lt;<sp/>Overrun<sp/>error.</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="112"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/**&lt;<sp/>A<sp/>new<sp/>byte<sp/>was<sp/>received<sp/>before<sp/>the<sp/>previous<sp/>byte<sp/>was<sp/>read</highlight></codeline>
<codeline lineno="113"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>from<sp/>the<sp/>RXD<sp/>register<sp/>(previous<sp/>data<sp/>is<sp/>lost).<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal">}<sp/><ref refid="group__nrf__twi__hal_1ga7911f5fecbfe83193a83ca9cde36757e" kindref="member">nrf_twi_error_t</ref>;</highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="116"><highlight class="comment">/**<sp/>@brief<sp/>TWI<sp/>master<sp/>clock<sp/>frequency.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal">{</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__twi__hal_1gga4366397176d6e463a2e594be0d996a61a07af2ed5e83d9bd35903d51792856fa9" kindref="member">NRF_TWI_FREQ_100K</ref><sp/>=<sp/>TWI_FREQUENCY_FREQUENCY_K100,<sp/></highlight><highlight class="comment">///&lt;<sp/>100<sp/>kbps.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__twi__hal_1gga4366397176d6e463a2e594be0d996a61ac90a9ff47950ac9468a6c54043840803" kindref="member">NRF_TWI_FREQ_250K</ref><sp/>=<sp/>TWI_FREQUENCY_FREQUENCY_K250,<sp/></highlight><highlight class="comment">///&lt;<sp/>250<sp/>kbps.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__twi__hal_1gga4366397176d6e463a2e594be0d996a61adfacb7d9aea05c6cb7cd2e0c54d80f61" kindref="member">NRF_TWI_FREQ_400K</ref><sp/>=<sp/>TWI_FREQUENCY_FREQUENCY_K400<sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>400<sp/>kbps.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal">}<sp/><ref refid="group__nrf__twi__hal_1ga4366397176d6e463a2e594be0d996a61" kindref="member">nrf_twi_frequency_t</ref>;</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="125"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="126"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>activating<sp/>the<sp/>specified<sp/>TWI<sp/>task.</highlight></codeline>
<codeline lineno="127"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="128"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="129"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>task<sp/><sp/>Task<sp/>to<sp/>be<sp/>activated.</highlight></codeline>
<codeline lineno="130"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__twi__hal_1ga7eedac4b7c664be3bcf11ae9d620e7bc" kindref="member">nrf_twi_task_trigger</ref>(NRF_TWI_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__twi__hal_1gae6266e8808b35b0569d429787f90b893" kindref="member">nrf_twi_task_t</ref><sp/>task);</highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="134"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="135"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>the<sp/>address<sp/>of<sp/>the<sp/>specified<sp/>TWI<sp/>task<sp/>register.</highlight></codeline>
<codeline lineno="136"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="137"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="138"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>task<sp/><sp/>The<sp/>specified<sp/>task.</highlight></codeline>
<codeline lineno="139"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="140"><highlight class="comment"><sp/>*<sp/>@return<sp/>Address<sp/>of<sp/>the<sp/>specified<sp/>task<sp/>register.</highlight></codeline>
<codeline lineno="141"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__twi__hal_1ga5f7114030111c23725fe024863b922cf" kindref="member">nrf_twi_task_address_get</ref>(NRF_TWI_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__twi__hal_1gae6266e8808b35b0569d429787f90b893" kindref="member">nrf_twi_task_t</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>task);</highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="145"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="146"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>clearing<sp/>the<sp/>specified<sp/>TWI<sp/>event.</highlight></codeline>
<codeline lineno="147"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="148"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="149"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>event<sp/>Event<sp/>to<sp/>clear.</highlight></codeline>
<codeline lineno="150"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__twi__hal_1ga6b1ee09806aa889ff04c1753a5cc0105" kindref="member">nrf_twi_event_clear</ref>(NRF_TWI_Type<sp/>*<sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__twi__hal_1ga8035974e843dbf6e39d61dc434030dcb" kindref="member">nrf_twi_event_t</ref><sp/>event);</highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="154"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="155"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>retrieving<sp/>the<sp/>state<sp/>of<sp/>the<sp/>TWI<sp/>event.</highlight></codeline>
<codeline lineno="156"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="157"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="158"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>event<sp/>Event<sp/>to<sp/>be<sp/>checked.</highlight></codeline>
<codeline lineno="159"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="160"><highlight class="comment"><sp/>*<sp/>@retval<sp/>true<sp/><sp/>The<sp/>event<sp/>has<sp/>been<sp/>generated.</highlight></codeline>
<codeline lineno="161"><highlight class="comment"><sp/>*<sp/>@retval<sp/>false<sp/>The<sp/>event<sp/>has<sp/>not<sp/>been<sp/>generated.</highlight></codeline>
<codeline lineno="162"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrf__twi__hal_1gaead8839ada039807481082ecf7451549" kindref="member">nrf_twi_event_check</ref>(NRF_TWI_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__twi__hal_1ga8035974e843dbf6e39d61dc434030dcb" kindref="member">nrf_twi_event_t</ref><sp/><sp/><sp/><sp/><sp/><sp/>event);</highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="166"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="167"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>the<sp/>address<sp/>of<sp/>the<sp/>specified<sp/>TWI<sp/>event<sp/>register.</highlight></codeline>
<codeline lineno="168"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="169"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="170"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>event<sp/>The<sp/>specified<sp/>event.</highlight></codeline>
<codeline lineno="171"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="172"><highlight class="comment"><sp/>*<sp/>@return<sp/>Address<sp/>of<sp/>the<sp/>specified<sp/>event<sp/>register.</highlight></codeline>
<codeline lineno="173"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__twi__hal_1ga2d083e704a34173b458a41fc20028837" kindref="member">nrf_twi_event_address_get</ref>(NRF_TWI_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__twi__hal_1ga8035974e843dbf6e39d61dc434030dcb" kindref="member">nrf_twi_event_t</ref><sp/><sp/><sp/><sp/><sp/><sp/>event);</highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="177"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="178"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>enabling<sp/>the<sp/>specified<sp/>shortcuts.</highlight></codeline>
<codeline lineno="179"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="180"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="181"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>mask<sp/><sp/>Shortcuts<sp/>to<sp/>be<sp/>enabled.</highlight></codeline>
<codeline lineno="182"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__twi__hal_1gabf61abb319e94b4758051ece36d337d3" kindref="member">nrf_twi_shorts_enable</ref>(NRF_TWI_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/>mask);</highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="186"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="187"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>disabling<sp/>the<sp/>specified<sp/>shortcuts.</highlight></codeline>
<codeline lineno="188"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="189"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="190"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>mask<sp/><sp/>Shortcuts<sp/>to<sp/>be<sp/>disabled.</highlight></codeline>
<codeline lineno="191"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__twi__hal_1ga6a56f337746fb83ff781ac71dfea1b33" kindref="member">nrf_twi_shorts_disable</ref>(NRF_TWI_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/>mask);</highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="195"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="196"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>enabling<sp/>the<sp/>specified<sp/>interrupts.</highlight></codeline>
<codeline lineno="197"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="198"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="199"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>mask<sp/><sp/>Mask<sp/>of<sp/>interrupts<sp/>to<sp/>be<sp/>enabled.</highlight></codeline>
<codeline lineno="200"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Use<sp/>@ref<sp/>nrf_twi_int_mask_t<sp/>values<sp/>for<sp/>bit<sp/>masking.</highlight></codeline>
<codeline lineno="201"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__twi__hal_1gadeb553b2781c4cf6935832604357d78d" kindref="member">nrf_twi_int_enable</ref>(NRF_TWI_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/>mask);</highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="205"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="206"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>disabling<sp/>the<sp/>specified<sp/>interrupts.</highlight></codeline>
<codeline lineno="207"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="208"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="209"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>mask<sp/><sp/>Mask<sp/>of<sp/>interrupts<sp/>to<sp/>be<sp/>disabled.</highlight></codeline>
<codeline lineno="210"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Use<sp/>@ref<sp/>nrf_twi_int_mask_t<sp/>values<sp/>for<sp/>bit<sp/>masking.</highlight></codeline>
<codeline lineno="211"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__twi__hal_1ga9478b9ab00f552270977d9b509672116" kindref="member">nrf_twi_int_disable</ref>(NRF_TWI_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/>mask);</highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="215"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="216"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>checking<sp/>if<sp/>the<sp/>specified<sp/>interrupts<sp/>are<sp/>enabled.</highlight></codeline>
<codeline lineno="217"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="218"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="219"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>mask<sp/><sp/>Mask<sp/>of<sp/>interrupts<sp/>to<sp/>be<sp/>checked.</highlight></codeline>
<codeline lineno="220"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Use<sp/>@ref<sp/>nrf_twi_int_mask_t<sp/>values<sp/>for<sp/>bit<sp/>masking.</highlight></codeline>
<codeline lineno="221"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="222"><highlight class="comment"><sp/>*<sp/>@return<sp/>Mask<sp/>of<sp/>enabled<sp/>interrupts.</highlight></codeline>
<codeline lineno="223"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__twi__hal_1ga74a253db984fd641afa73ab116214795" kindref="member">nrf_twi_int_enable_check</ref>(NRF_TWI_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>mask);</highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="226"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="227"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>enabling<sp/>the<sp/>TWI<sp/>peripheral.</highlight></codeline>
<codeline lineno="228"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="229"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="230"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__twi__hal_1ga20064f5644e6e80a77a6fd2219c134b1" kindref="member">nrf_twi_enable</ref>(NRF_TWI_Type<sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="233"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="234"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>disabling<sp/>the<sp/>TWI<sp/>peripheral.</highlight></codeline>
<codeline lineno="235"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="236"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="237"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__twi__hal_1ga96407b44dc354dad93bdc6ff54055366" kindref="member">nrf_twi_disable</ref>(NRF_TWI_Type<sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="240"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="241"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>configuring<sp/>TWI<sp/>pins.</highlight></codeline>
<codeline lineno="242"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="243"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="244"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>scl_pin<sp/>SCL<sp/>pin<sp/>number.</highlight></codeline>
<codeline lineno="245"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>sda_pin<sp/>SDA<sp/>pin<sp/>number.</highlight></codeline>
<codeline lineno="246"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__twi__hal_1ga62b4256b02b044b44abe3744746ff447" kindref="member">nrf_twi_pins_set</ref>(NRF_TWI_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/>scl_pin,</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/>sda_pin);</highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="251"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="252"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>retrieving<sp/>the<sp/>SCL<sp/>pin<sp/>selection.</highlight></codeline>
<codeline lineno="253"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="254"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="255"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="256"><highlight class="comment"><sp/>*<sp/>@return<sp/>SCL<sp/>pin<sp/>selection.</highlight></codeline>
<codeline lineno="257"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__twi__hal_1ga82bc77783e711ccd9df5e79a99325d6c" kindref="member">nrf_twi_scl_pin_get</ref>(NRF_TWI_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="260"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="261"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>retrieving<sp/>the<sp/>SDA<sp/>pin<sp/>selection.</highlight></codeline>
<codeline lineno="262"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="263"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="264"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="265"><highlight class="comment"><sp/>*<sp/>@return<sp/>SDA<sp/>pin<sp/>selection.</highlight></codeline>
<codeline lineno="266"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__twi__hal_1ga2c566d9ca1865fc56f2217396f768ba2" kindref="member">nrf_twi_sda_pin_get</ref>(NRF_TWI_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="269"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="270"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>the<sp/>TWI<sp/>master<sp/>clock<sp/>frequency.</highlight></codeline>
<codeline lineno="271"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="272"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="273"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>frequency<sp/>TWI<sp/>frequency.</highlight></codeline>
<codeline lineno="274"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__twi__hal_1ga43d7e6678622d12dbe00348a85a30bbe" kindref="member">nrf_twi_frequency_set</ref>(NRF_TWI_Type<sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__twi__hal_1ga4366397176d6e463a2e594be0d996a61" kindref="member">nrf_twi_frequency_t</ref><sp/>frequency);</highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="278"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="279"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>checking<sp/>the<sp/>TWI<sp/>error<sp/>source.</highlight></codeline>
<codeline lineno="280"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="281"><highlight class="comment"><sp/>*<sp/>The<sp/>error<sp/>flags<sp/>are<sp/>cleared<sp/>after<sp/>reading.</highlight></codeline>
<codeline lineno="282"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="283"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="284"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="285"><highlight class="comment"><sp/>*<sp/>@return<sp/>Mask<sp/>with<sp/>error<sp/>source<sp/>flags.</highlight></codeline>
<codeline lineno="286"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__twi__hal_1gac9ba35e01f68df4c983addeb343d489a" kindref="member">nrf_twi_errorsrc_get_and_clear</ref>(NRF_TWI_Type<sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="289"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="290"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>the<sp/>address<sp/>to<sp/>be<sp/>used<sp/>in<sp/>TWI<sp/>transfers.</highlight></codeline>
<codeline lineno="291"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="292"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="293"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>address<sp/>Address<sp/>to<sp/>be<sp/>used<sp/>in<sp/>transfers.</highlight></codeline>
<codeline lineno="294"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__twi__hal_1ga66d5f35d8a4761337ea1246de2c00ce3" kindref="member">nrf_twi_address_set</ref>(NRF_TWI_Type<sp/>*<sp/>p_reg,<sp/>uint8_t<sp/>address);</highlight></codeline>
<codeline lineno="296"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="297"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="298"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>reading<sp/>data<sp/>received<sp/>by<sp/>TWI.</highlight></codeline>
<codeline lineno="299"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="300"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="301"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="302"><highlight class="comment"><sp/>*<sp/>@return<sp/>Received<sp/>data.</highlight></codeline>
<codeline lineno="303"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint8_t<sp/><ref refid="group__nrf__twi__hal_1ga012f2673135ac2336b30f267009cd57a" kindref="member">nrf_twi_rxd_get</ref>(NRF_TWI_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="306"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="307"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>writing<sp/>data<sp/>to<sp/>be<sp/>transmitted<sp/>by<sp/>TWI.</highlight></codeline>
<codeline lineno="308"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="309"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="310"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>data<sp/><sp/>Data<sp/>to<sp/>be<sp/>transmitted.</highlight></codeline>
<codeline lineno="311"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__twi__hal_1ga0ef2a64b279d46fc1477880fad4247bc" kindref="member">nrf_twi_txd_set</ref>(NRF_TWI_Type<sp/>*<sp/>p_reg,<sp/>uint8_t<sp/>data);</highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="314"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="315"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>the<sp/>specified<sp/>shortcuts.</highlight></codeline>
<codeline lineno="316"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="317"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="318"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>mask<sp/><sp/>Shortcuts<sp/>to<sp/>be<sp/>set.</highlight></codeline>
<codeline lineno="319"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__twi__hal_1ga432302136abc9c690fca190f38186f90" kindref="member">nrf_twi_shorts_set</ref>(NRF_TWI_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/>mask);</highlight></codeline>
<codeline lineno="322"><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>NRF_DECLARE_ONLY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__twi__hal_1ga7eedac4b7c664be3bcf11ae9d620e7bc" kindref="member">nrf_twi_task_trigger</ref>(NRF_TWI_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__twi__hal_1gae6266e8808b35b0569d429787f90b893" kindref="member">nrf_twi_task_t</ref><sp/>task)</highlight></codeline>
<codeline lineno="327"><highlight class="normal">{</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/>*((</highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint32_t<sp/>*)((uint8_t<sp/>*)p_reg<sp/>+<sp/>(uint32_t)task))<sp/>=<sp/>0x1UL;</highlight></codeline>
<codeline lineno="329"><highlight class="normal">}</highlight></codeline>
<codeline lineno="330"><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__twi__hal_1ga5f7114030111c23725fe024863b922cf" kindref="member">nrf_twi_task_address_get</ref>(NRF_TWI_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__twi__hal_1gae6266e8808b35b0569d429787f90b893" kindref="member">nrf_twi_task_t</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>task)</highlight></codeline>
<codeline lineno="333"><highlight class="normal">{</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>nrf_task_event_address_get(p_reg,<sp/>task);</highlight></codeline>
<codeline lineno="335"><highlight class="normal">}</highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__twi__hal_1ga6b1ee09806aa889ff04c1753a5cc0105" kindref="member">nrf_twi_event_clear</ref>(NRF_TWI_Type<sp/><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__twi__hal_1ga8035974e843dbf6e39d61dc434030dcb" kindref="member">nrf_twi_event_t</ref><sp/>event)</highlight></codeline>
<codeline lineno="339"><highlight class="normal">{</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/>*((</highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint32_t<sp/>*)((uint8_t<sp/>*)p_reg<sp/>+<sp/>(uint32_t)event))<sp/>=<sp/>0x0UL;</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/>nrf_event_readback((uint8_t<sp/>*)p_reg<sp/>+<sp/>(uint32_t)event);</highlight></codeline>
<codeline lineno="342"><highlight class="normal">}</highlight></codeline>
<codeline lineno="343"><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrf__twi__hal_1gaead8839ada039807481082ecf7451549" kindref="member">nrf_twi_event_check</ref>(NRF_TWI_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__twi__hal_1ga8035974e843dbf6e39d61dc434030dcb" kindref="member">nrf_twi_event_t</ref><sp/><sp/><sp/><sp/><sp/><sp/>event)</highlight></codeline>
<codeline lineno="346"><highlight class="normal">{</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>nrf_event_check(p_reg,<sp/>event);</highlight></codeline>
<codeline lineno="348"><highlight class="normal">}</highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__twi__hal_1ga2d083e704a34173b458a41fc20028837" kindref="member">nrf_twi_event_address_get</ref>(NRF_TWI_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__twi__hal_1ga8035974e843dbf6e39d61dc434030dcb" kindref="member">nrf_twi_event_t</ref><sp/><sp/><sp/><sp/><sp/><sp/>event)</highlight></codeline>
<codeline lineno="352"><highlight class="normal">{</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>nrf_task_event_address_get(p_reg,<sp/>event);</highlight></codeline>
<codeline lineno="354"><highlight class="normal">}</highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__twi__hal_1gabf61abb319e94b4758051ece36d337d3" kindref="member">nrf_twi_shorts_enable</ref>(NRF_TWI_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/>mask)</highlight></codeline>
<codeline lineno="358"><highlight class="normal">{</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;SHORTS<sp/>|=<sp/>mask;</highlight></codeline>
<codeline lineno="360"><highlight class="normal">}</highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__twi__hal_1ga6a56f337746fb83ff781ac71dfea1b33" kindref="member">nrf_twi_shorts_disable</ref>(NRF_TWI_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/>mask)</highlight></codeline>
<codeline lineno="364"><highlight class="normal">{</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;SHORTS<sp/>&amp;=<sp/>~(mask);</highlight></codeline>
<codeline lineno="366"><highlight class="normal">}</highlight></codeline>
<codeline lineno="367"><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__twi__hal_1gadeb553b2781c4cf6935832604357d78d" kindref="member">nrf_twi_int_enable</ref>(NRF_TWI_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/>mask)</highlight></codeline>
<codeline lineno="370"><highlight class="normal">{</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;INTENSET<sp/>=<sp/>mask;</highlight></codeline>
<codeline lineno="372"><highlight class="normal">}</highlight></codeline>
<codeline lineno="373"><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__twi__hal_1ga9478b9ab00f552270977d9b509672116" kindref="member">nrf_twi_int_disable</ref>(NRF_TWI_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/>mask)</highlight></codeline>
<codeline lineno="376"><highlight class="normal">{</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;INTENCLR<sp/>=<sp/>mask;</highlight></codeline>
<codeline lineno="378"><highlight class="normal">}</highlight></codeline>
<codeline lineno="379"><highlight class="normal"></highlight></codeline>
<codeline lineno="380"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__twi__hal_1ga74a253db984fd641afa73ab116214795" kindref="member">nrf_twi_int_enable_check</ref>(NRF_TWI_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>mask)</highlight></codeline>
<codeline lineno="381"><highlight class="normal">{</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p_reg-&gt;INTENSET<sp/>&amp;<sp/>mask;</highlight></codeline>
<codeline lineno="383"><highlight class="normal">}</highlight></codeline>
<codeline lineno="384"><highlight class="normal"></highlight></codeline>
<codeline lineno="385"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__twi__hal_1ga20064f5644e6e80a77a6fd2219c134b1" kindref="member">nrf_twi_enable</ref>(NRF_TWI_Type<sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="386"><highlight class="normal">{</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;ENABLE<sp/>=<sp/>(TWI_ENABLE_ENABLE_Enabled<sp/>&lt;&lt;<sp/>TWI_ENABLE_ENABLE_Pos);</highlight></codeline>
<codeline lineno="388"><highlight class="normal">}</highlight></codeline>
<codeline lineno="389"><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__twi__hal_1ga96407b44dc354dad93bdc6ff54055366" kindref="member">nrf_twi_disable</ref>(NRF_TWI_Type<sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="391"><highlight class="normal">{</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;ENABLE<sp/>=<sp/>(TWI_ENABLE_ENABLE_Disabled<sp/>&lt;&lt;<sp/>TWI_ENABLE_ENABLE_Pos);</highlight></codeline>
<codeline lineno="393"><highlight class="normal">}</highlight></codeline>
<codeline lineno="394"><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__twi__hal_1ga62b4256b02b044b44abe3744746ff447" kindref="member">nrf_twi_pins_set</ref>(NRF_TWI_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/>scl_pin,</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/>sda_pin)</highlight></codeline>
<codeline lineno="398"><highlight class="normal">{</highlight></codeline>
<codeline lineno="399"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(TWI_PSEL_SCL_CONNECT_Pos)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;PSEL.SCL<sp/>=<sp/>scl_pin;</highlight></codeline>
<codeline lineno="401"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;PSELSCL<sp/>=<sp/>scl_pin;</highlight></codeline>
<codeline lineno="403"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="404"><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(TWI_PSEL_SDA_CONNECT_Pos)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;PSEL.SDA<sp/>=<sp/>sda_pin;</highlight></codeline>
<codeline lineno="407"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;PSELSDA<sp/>=<sp/>sda_pin;</highlight></codeline>
<codeline lineno="409"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal">}</highlight></codeline>
<codeline lineno="411"><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__twi__hal_1ga82bc77783e711ccd9df5e79a99325d6c" kindref="member">nrf_twi_scl_pin_get</ref>(NRF_TWI_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="413"><highlight class="normal">{</highlight></codeline>
<codeline lineno="414"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(TWI_PSEL_SCL_CONNECT_Pos)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p_reg-&gt;PSEL.SCL;</highlight></codeline>
<codeline lineno="416"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p_reg-&gt;PSELSCL;</highlight></codeline>
<codeline lineno="418"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="419"><highlight class="normal">}</highlight></codeline>
<codeline lineno="420"><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__twi__hal_1ga2c566d9ca1865fc56f2217396f768ba2" kindref="member">nrf_twi_sda_pin_get</ref>(NRF_TWI_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="422"><highlight class="normal">{</highlight></codeline>
<codeline lineno="423"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(TWI_PSEL_SDA_CONNECT_Pos)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p_reg-&gt;PSEL.SDA;</highlight></codeline>
<codeline lineno="425"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p_reg-&gt;PSELSDA;</highlight></codeline>
<codeline lineno="427"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="428"><highlight class="normal">}</highlight></codeline>
<codeline lineno="429"><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__twi__hal_1ga43d7e6678622d12dbe00348a85a30bbe" kindref="member">nrf_twi_frequency_set</ref>(NRF_TWI_Type<sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__twi__hal_1ga4366397176d6e463a2e594be0d996a61" kindref="member">nrf_twi_frequency_t</ref><sp/>frequency)</highlight></codeline>
<codeline lineno="432"><highlight class="normal">{</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;FREQUENCY<sp/>=<sp/>frequency;</highlight></codeline>
<codeline lineno="434"><highlight class="normal">}</highlight></codeline>
<codeline lineno="435"><highlight class="normal"></highlight></codeline>
<codeline lineno="436"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__twi__hal_1gac9ba35e01f68df4c983addeb343d489a" kindref="member">nrf_twi_errorsrc_get_and_clear</ref>(NRF_TWI_Type<sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="437"><highlight class="normal">{</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>error_source<sp/>=<sp/>p_reg-&gt;ERRORSRC;</highlight></codeline>
<codeline lineno="439"><highlight class="normal"></highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>[error<sp/>flags<sp/>are<sp/>cleared<sp/>by<sp/>writing<sp/>&apos;1&apos;<sp/>on<sp/>their<sp/>position]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;ERRORSRC<sp/>=<sp/>error_source;</highlight></codeline>
<codeline lineno="442"><highlight class="normal"></highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>error_source;</highlight></codeline>
<codeline lineno="444"><highlight class="normal">}</highlight></codeline>
<codeline lineno="445"><highlight class="normal"></highlight></codeline>
<codeline lineno="446"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__twi__hal_1ga66d5f35d8a4761337ea1246de2c00ce3" kindref="member">nrf_twi_address_set</ref>(NRF_TWI_Type<sp/>*<sp/>p_reg,<sp/>uint8_t<sp/>address)</highlight></codeline>
<codeline lineno="447"><highlight class="normal">{</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;ADDRESS<sp/>=<sp/>address;</highlight></codeline>
<codeline lineno="449"><highlight class="normal">}</highlight></codeline>
<codeline lineno="450"><highlight class="normal"></highlight></codeline>
<codeline lineno="451"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint8_t<sp/><ref refid="group__nrf__twi__hal_1ga012f2673135ac2336b30f267009cd57a" kindref="member">nrf_twi_rxd_get</ref>(NRF_TWI_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="452"><highlight class="normal">{</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(uint8_t)p_reg-&gt;RXD;</highlight></codeline>
<codeline lineno="454"><highlight class="normal">}</highlight></codeline>
<codeline lineno="455"><highlight class="normal"></highlight></codeline>
<codeline lineno="456"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__twi__hal_1ga0ef2a64b279d46fc1477880fad4247bc" kindref="member">nrf_twi_txd_set</ref>(NRF_TWI_Type<sp/>*<sp/>p_reg,<sp/>uint8_t<sp/>data)</highlight></codeline>
<codeline lineno="457"><highlight class="normal">{</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;TXD<sp/>=<sp/>data;</highlight></codeline>
<codeline lineno="459"><highlight class="normal">}</highlight></codeline>
<codeline lineno="460"><highlight class="normal"></highlight></codeline>
<codeline lineno="461"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__twi__hal_1ga432302136abc9c690fca190f38186f90" kindref="member">nrf_twi_shorts_set</ref>(NRF_TWI_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/>mask)</highlight></codeline>
<codeline lineno="463"><highlight class="normal">{</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;SHORTS<sp/>=<sp/>mask;</highlight></codeline>
<codeline lineno="465"><highlight class="normal">}</highlight></codeline>
<codeline lineno="466"><highlight class="normal"></highlight></codeline>
<codeline lineno="467"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRF_DECLARE_ONLY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="468"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="469"><highlight class="comment">/**<sp/>@}<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="470"><highlight class="normal"></highlight></codeline>
<codeline lineno="471"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="472"><highlight class="normal">}</highlight></codeline>
<codeline lineno="473"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="474"><highlight class="normal"></highlight></codeline>
<codeline lineno="475"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRF_TWI_H__</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="hal/nrf_twi.h"/>
  </compounddef>
</doxygen>
