<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="group__nrf__memconf__hal" kind="group">
    <compoundname>nrf_memconf_hal</compoundname>
    <title>MEMCONF HAL</title>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__nrf__memconf__hal_1ga75447cbe69859f92eae63e20902270f2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_memconf_ramblock_control_enable_set</definition>
        <argsstring>(NRF_MEMCONF_Type *p_reg, uint8_t power_id, uint8_t ramblock, bool enable)</argsstring>
        <name>nrf_memconf_ramblock_control_enable_set</name>
        <param>
          <type>NRF_MEMCONF_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>power_id</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>ramblock</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>enable</declname>
        </param>
        <briefdescription>
<para>Function for enabling or disabling given RAM block. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">power_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Power block index. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">ramblock</parametername>
</parameternamelist>
<parameterdescription>
<para>RAM block index. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">enable</parametername>
</parameternamelist>
<parameterdescription>
<para>True if RAM block is to be enabled, false otherwise. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_memconf.h" line="309" column="24" bodyfile="hal/nrf_memconf.h" bodystart="309" bodyend="322" declfile="hal/nrf_memconf.h" declline="113" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__memconf__hal_1gaf2a5a4bdc28765236c99c57c9970cb84" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_memconf_ramblock_control_mask_enable_set</definition>
        <argsstring>(NRF_MEMCONF_Type *p_reg, uint8_t power_id, uint32_t ramblock_mask, bool enable)</argsstring>
        <name>nrf_memconf_ramblock_control_mask_enable_set</name>
        <param>
          <type>NRF_MEMCONF_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>power_id</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>ramblock_mask</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>enable</declname>
        </param>
        <briefdescription>
<para>Function for enabling or disabling specified RAM blocks. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">power_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Power block index. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">ramblock_mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of RAM blocks. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">enable</parametername>
</parameternamelist>
<parameterdescription>
<para>True if RAM blocks are to be enabled, false otherwise. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_memconf.h" line="325" column="6" bodyfile="hal/nrf_memconf.h" bodystart="325" bodyend="340" declfile="hal/nrf_memconf.h" declline="127" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__memconf__hal_1ga87e9a6f6830f1ddb1ea13b0a138ff1ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE bool</type>
        <definition>NRF_STATIC_INLINE bool nrf_memconf_ramblock_control_enable_check</definition>
        <argsstring>(NRF_MEMCONF_Type const *p_reg, uint8_t power_id, uint8_t ramblock)</argsstring>
        <name>nrf_memconf_ramblock_control_enable_check</name>
        <param>
          <type>NRF_MEMCONF_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>power_id</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>ramblock</declname>
        </param>
        <briefdescription>
<para>Function for checking whether given RAM block is enabled. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">power_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Power block index. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">ramblock</parametername>
</parameternamelist>
<parameterdescription>
<para>RAM block index.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>RAM block is enabled. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>RAM block is disabled. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_memconf.h" line="342" column="24" bodyfile="hal/nrf_memconf.h" bodystart="342" bodyend="350" declfile="hal/nrf_memconf.h" declline="142" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__memconf__hal_1ga4457452af0ed8baa961ddeca7fc9da1c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_memconf_ramblock_ret_enable_set</definition>
        <argsstring>(NRF_MEMCONF_Type *p_reg, uint8_t power_id, uint8_t ramblock, bool enable)</argsstring>
        <name>nrf_memconf_ramblock_ret_enable_set</name>
        <param>
          <type>NRF_MEMCONF_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>power_id</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>ramblock</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>enable</declname>
        </param>
        <briefdescription>
<para>Function for enabling or disabling the retention for given RAM block. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">power_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Power block index. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">ramblock</parametername>
</parameternamelist>
<parameterdescription>
<para>RAM block index. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">enable</parametername>
</parameternamelist>
<parameterdescription>
<para>True if RAM block retention is to be enabled, false otherwise. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_memconf.h" line="352" column="24" bodyfile="hal/nrf_memconf.h" bodystart="352" bodyend="365" declfile="hal/nrf_memconf.h" declline="154" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__memconf__hal_1ga22ffa4284e1885a22aecc02a1ccc96b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_memconf_ramblock_ret_mask_enable_set</definition>
        <argsstring>(NRF_MEMCONF_Type *p_reg, uint8_t power_id, uint32_t ramblock_mask, bool enable)</argsstring>
        <name>nrf_memconf_ramblock_ret_mask_enable_set</name>
        <param>
          <type>NRF_MEMCONF_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>power_id</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>ramblock_mask</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>enable</declname>
        </param>
        <briefdescription>
<para>Function for enabling or disabling retention for the specified RAM blocks. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">power_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Power block index. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">ramblock_mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of RAM blocks. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">enable</parametername>
</parameternamelist>
<parameterdescription>
<para>True if retention for RAM blocks is to be enabled, false otherwise. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_memconf.h" line="367" column="24" bodyfile="hal/nrf_memconf.h" bodystart="367" bodyend="382" declfile="hal/nrf_memconf.h" declline="167" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__memconf__hal_1ga54d5276c5103921cb5838753b219cea3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE bool</type>
        <definition>NRF_STATIC_INLINE bool nrf_memconf_ramblock_ret_enable_check</definition>
        <argsstring>(NRF_MEMCONF_Type const *p_reg, uint8_t power_id, uint8_t ramblock)</argsstring>
        <name>nrf_memconf_ramblock_ret_enable_check</name>
        <param>
          <type>NRF_MEMCONF_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>power_id</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>ramblock</declname>
        </param>
        <briefdescription>
<para>Function for checking whether the retention of specified RAM block is enabled. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">power_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Power block index. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">ramblock</parametername>
</parameternamelist>
<parameterdescription>
<para>RAM block index.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>RAM block is enabled. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>RAM block is disabled. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_memconf.h" line="384" column="24" bodyfile="hal/nrf_memconf.h" bodystart="384" bodyend="392" declfile="hal/nrf_memconf.h" declline="182" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__memconf__hal_1ga5c4d82346ab75a90cea675f0394d021f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_memconf_ramblock_ret2_enable_set</definition>
        <argsstring>(NRF_MEMCONF_Type *p_reg, uint8_t power_id, uint8_t ramblock, bool enable)</argsstring>
        <name>nrf_memconf_ramblock_ret2_enable_set</name>
        <param>
          <type>NRF_MEMCONF_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>power_id</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>ramblock</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>enable</declname>
        </param>
        <briefdescription>
<para>Function for enabling or disabling the retention within the second bank for given RAM block. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">power_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Power block index. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">ramblock</parametername>
</parameternamelist>
<parameterdescription>
<para>RAM block index. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">enable</parametername>
</parameternamelist>
<parameterdescription>
<para>True if RAM block retention is to be enabled, false otherwise. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_memconf.h" line="395" column="24" bodyfile="hal/nrf_memconf.h" bodystart="395" bodyend="408" declfile="hal/nrf_memconf.h" declline="195" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__memconf__hal_1gafe0a90242e15343c0b03a34b1b8a1b7b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE bool</type>
        <definition>NRF_STATIC_INLINE bool nrf_memconf_ramblock_ret2_enable_check</definition>
        <argsstring>(NRF_MEMCONF_Type const *p_reg, uint8_t power_id, uint8_t ramblock)</argsstring>
        <name>nrf_memconf_ramblock_ret2_enable_check</name>
        <param>
          <type>NRF_MEMCONF_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>power_id</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>ramblock</declname>
        </param>
        <briefdescription>
<para>Function for checking whether the retention of second bank in specified RAM block is enabled. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">power_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Power block index. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">ramblock</parametername>
</parameternamelist>
<parameterdescription>
<para>RAM block index.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>RAM block is enabled. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>RAM block is disabled. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_memconf.h" line="410" column="24" bodyfile="hal/nrf_memconf.h" bodystart="410" bodyend="418" declfile="hal/nrf_memconf.h" declline="210" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__memconf__hal_1ga0be48de35366cf424dfe5eb525615dbd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_memconf_bitline_enable_set</definition>
        <argsstring>(NRF_MEMCONF_Type *p_reg, uint8_t bitline, bool enable)</argsstring>
        <name>nrf_memconf_bitline_enable_set</name>
        <param>
          <type>NRF_MEMCONF_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>bitline</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>enable</declname>
        </param>
        <briefdescription>
<para>Function for enabling or disabling given bitline. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">bitline</parametername>
</parameternamelist>
<parameterdescription>
<para>Bitline to be enabled/disabled. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">enable</parametername>
</parameternamelist>
<parameterdescription>
<para>True if bitline is to be enabled, false otherwise. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_memconf.h" line="422" column="24" bodyfile="hal/nrf_memconf.h" bodystart="422" bodyend="432" declfile="hal/nrf_memconf.h" declline="223" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__memconf__hal_1gaa4fc6b01cabb1b55fc9514437db9f93f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE bool</type>
        <definition>NRF_STATIC_INLINE bool nrf_memconf_bitline_enable_check</definition>
        <argsstring>(NRF_MEMCONF_Type const *p_reg, uint8_t bitline)</argsstring>
        <name>nrf_memconf_bitline_enable_check</name>
        <param>
          <type>NRF_MEMCONF_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>bitline</declname>
        </param>
        <briefdescription>
<para>Function for getting enable status for given bitline. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">bitline</parametername>
</parameternamelist>
<parameterdescription>
<para>Bitline index.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Status of requested bitline. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_memconf.h" line="434" column="24" bodyfile="hal/nrf_memconf.h" bodystart="434" bodyend="438" declfile="hal/nrf_memconf.h" declline="235" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__memconf__hal_1ga7f3f267eb18728560baa4eabb1bea9f7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_memconf_bitline_address_set</definition>
        <argsstring>(NRF_MEMCONF_Type *p_reg, uint8_t bitline, uint8_t address)</argsstring>
        <name>nrf_memconf_bitline_address_set</name>
        <param>
          <type>NRF_MEMCONF_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>bitline</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>address</declname>
        </param>
        <briefdescription>
<para>Function for setting bitline address. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">bitline</parametername>
</parameternamelist>
<parameterdescription>
<para>Bitline index. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">address</parametername>
</parameternamelist>
<parameterdescription>
<para>Addres for given bitline. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_memconf.h" line="440" column="24" bodyfile="hal/nrf_memconf.h" bodystart="440" bodyend="446" declfile="hal/nrf_memconf.h" declline="246" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__memconf__hal_1gac4a27674bc33a4f4635e3eef10864a1c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_memconf_bitline_address_get</definition>
        <argsstring>(NRF_MEMCONF_Type const *p_reg, uint8_t bitline)</argsstring>
        <name>nrf_memconf_bitline_address_get</name>
        <param>
          <type>NRF_MEMCONF_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>bitline</declname>
        </param>
        <briefdescription>
<para>Function for getting bitline address. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">bitline</parametername>
</parameternamelist>
<parameterdescription>
<para>Bitline index.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Address of requested bitline. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_memconf.h" line="448" column="28" bodyfile="hal/nrf_memconf.h" bodystart="448" bodyend="452" declfile="hal/nrf_memconf.h" declline="258" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__memconf__hal_1ga247d8a6a94b5723fb0c8691aebe9516a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_memconf_memtrim_set</definition>
        <argsstring>(NRF_MEMCONF_Type *p_reg, uint8_t trim_id, uint16_t trim_val)</argsstring>
        <name>nrf_memconf_memtrim_set</name>
        <param>
          <type>NRF_MEMCONF_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>trim_id</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>trim_val</declname>
        </param>
        <briefdescription>
<para>Function for setting memory trim value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">trim_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Trim index. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">trim_val</parametername>
</parameternamelist>
<parameterdescription>
<para>Trim value. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_memconf.h" line="456" column="24" bodyfile="hal/nrf_memconf.h" bodystart="456" bodyend="463" declfile="hal/nrf_memconf.h" declline="270" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__memconf__hal_1gad1fd2cbc0b909ec296b803a1b66ad67e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint16_t</type>
        <definition>NRF_STATIC_INLINE uint16_t nrf_memconf_memtrim_get</definition>
        <argsstring>(NRF_MEMCONF_Type const *p_reg, uint8_t trim_id)</argsstring>
        <name>nrf_memconf_memtrim_get</name>
        <param>
          <type>NRF_MEMCONF_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>trim_id</declname>
        </param>
        <briefdescription>
<para>Function for getting memory trim value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">trim_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Trim index.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Requested trim value. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_memconf.h" line="465" column="28" bodyfile="hal/nrf_memconf.h" bodystart="465" bodyend="469" declfile="hal/nrf_memconf.h" declline="282" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__memconf__hal_1ga1f17f18a37409f912698a4806486dd63" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_memconf_rettrim_set</definition>
        <argsstring>(NRF_MEMCONF_Type *p_reg, uint8_t trim_id, uint16_t trim_val)</argsstring>
        <name>nrf_memconf_rettrim_set</name>
        <param>
          <type>NRF_MEMCONF_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>trim_id</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>trim_val</declname>
        </param>
        <briefdescription>
<para>Function for setting retention trim value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">trim_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Trim index. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">trim_val</parametername>
</parameternamelist>
<parameterdescription>
<para>Trim value. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_memconf.h" line="471" column="24" bodyfile="hal/nrf_memconf.h" bodystart="471" bodyend="478" declfile="hal/nrf_memconf.h" declline="292" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__memconf__hal_1ga5f45534abf3eae09ed2f4b2bd625a683" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint16_t</type>
        <definition>NRF_STATIC_INLINE uint16_t nrf_memconf_rettrim_get</definition>
        <argsstring>(NRF_MEMCONF_Type const *p_reg, uint8_t trim_id)</argsstring>
        <name>nrf_memconf_rettrim_get</name>
        <param>
          <type>NRF_MEMCONF_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>trim_id</declname>
        </param>
        <briefdescription>
<para>Function for getting retention trim value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">trim_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Trim index.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Requested trim value. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_memconf.h" line="480" column="28" bodyfile="hal/nrf_memconf.h" bodystart="480" bodyend="484" declfile="hal/nrf_memconf.h" declline="304" declcolumn="28"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__nrf__memconf__hal_1gaa20af47a78b8f3b9ac39f42541eb23a3" prot="public" static="no">
        <name>NRF_MEMCONF_HAS_RET2</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Symbol indicating whether the second retention configuration register is present. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_memconf.h" line="52" column="9" bodyfile="hal/nrf_memconf.h" bodystart="52" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__memconf__hal_1ga3eaf81c758f2dde9c67a2353deb09833" prot="public" static="no">
        <name>NRF_MEMCONF_HAS_REPAIR</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Symbol indicating whether the repair configuration for RAM blocks is present. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_memconf.h" line="59" column="9" bodyfile="hal/nrf_memconf.h" bodystart="59" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__memconf__hal_1ga9d74897ebb4db293268e4a2619a29df9" prot="public" static="no">
        <name>NRF_MEMCONF_HAS_TRIM</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Symbol indicating whether the trim configuration is present. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_memconf.h" line="66" column="9" bodyfile="hal/nrf_memconf.h" bodystart="66" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__memconf__hal_1ga33951a809501fdb64d108d298edf60c5" prot="public" static="no">
        <name>NRF_MEMCONF_POWERBLOCK_COUNT</name>
        <initializer>MEMCONF_POWER_MaxCount</initializer>
        <briefdescription>
<para>Symbol specifying maximum number of available power blocks. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_memconf.h" line="72" column="9" bodyfile="hal/nrf_memconf.h" bodystart="72" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__memconf__hal_1ga008b11a4382166a6e5b21aafa7c991eb" prot="public" static="no">
        <name>NRF_MEMCONF_POWERBLOCK_RAMBLOCK_CONTROL_COUNT</name>
        <initializer>MEMCONF_POWER_CONTROL_MEM31_Pos</initializer>
        <briefdescription>
<para>Symbol specifying maximum number of control RAM blocks. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_memconf.h" line="75" column="9" bodyfile="hal/nrf_memconf.h" bodystart="75" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__memconf__hal_1ga4bad8ecf204f90d9b57e136f3c491776" prot="public" static="no">
        <name>NRF_MEMCONF_POWERBLOCK_RAMBLOCK_RET_COUNT</name>
        <initializer>MEMCONF_POWER_RET_MEM31_Pos</initializer>
        <briefdescription>
<para>Symbol specifying maximum number of retention RAM blocks. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_memconf.h" line="78" column="9" bodyfile="hal/nrf_memconf.h" bodystart="78" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__memconf__hal_1gafa2b77c9cc3c46e8bfeb26a5c9dac3e6" prot="public" static="no">
        <name>NRF_MEMCONF_POWERBLOCK_RAMBLOCK_RET2_COUNT</name>
        <initializer>MEMCONF_POWER_RET2_MEM31_Pos</initializer>
        <briefdescription>
<para>Symbol specifying maximum number of second bank retention RAM blocks. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_memconf.h" line="81" column="9" bodyfile="hal/nrf_memconf.h" bodystart="81" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__memconf__hal_1ga883124628dc69b08b300beb2c49b293a" prot="public" static="no">
        <name>NRF_MEMCONF_BLOCKTYPE_TRIM_MEMTRIM_MASK</name>
        <initializer>    (MEMCONF_BLOCKTYPE_TRIM_MEMTRIM0_Msk  | MEMCONF_BLOCKTYPE_TRIM_MEMTRIM1_Msk  | \
     MEMCONF_BLOCKTYPE_TRIM_MEMTRIM2_Msk  | MEMCONF_BLOCKTYPE_TRIM_MEMTRIM3_Msk  | \
     MEMCONF_BLOCKTYPE_TRIM_MEMTRIM4_Msk  | MEMCONF_BLOCKTYPE_TRIM_MEMTRIM5_Msk  | \
     MEMCONF_BLOCKTYPE_TRIM_MEMTRIM6_Msk  | MEMCONF_BLOCKTYPE_TRIM_MEMTRIM7_Msk  | \
     MEMCONF_BLOCKTYPE_TRIM_MEMTRIM8_Msk  | MEMCONF_BLOCKTYPE_TRIM_MEMTRIM9_Msk  | \
     MEMCONF_BLOCKTYPE_TRIM_MEMTRIM10_Msk | MEMCONF_BLOCKTYPE_TRIM_MEMTRIM11_Msk | \
     MEMCONF_BLOCKTYPE_TRIM_MEMTRIM12_Msk | MEMCONF_BLOCKTYPE_TRIM_MEMTRIM13_Msk | \
     MEMCONF_BLOCKTYPE_TRIM_MEMTRIM14_Msk | MEMCONF_BLOCKTYPE_TRIM_MEMTRIM15_Msk)</initializer>
        <briefdescription>
<para>Symbol specifying bitmask collecting all memory read and write margin trims. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_memconf.h" line="84" column="9" bodyfile="hal/nrf_memconf.h" bodystart="84" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__memconf__hal_1gaa02f9a3c248ac1509d7c4e40ce258be3" prot="public" static="no">
        <name>NRF_MEMCONF_BLOCKTYPE_TRIM_MEMRETTRIM_MASK</name>
        <initializer>    (MEMCONF_BLOCKTYPE_TRIM_MEMRETTRIM0_Msk  | MEMCONF_BLOCKTYPE_TRIM_MEMRETTRIM1_Msk  | \
     MEMCONF_BLOCKTYPE_TRIM_MEMRETTRIM2_Msk  | MEMCONF_BLOCKTYPE_TRIM_MEMRETTRIM3_Msk  | \
     MEMCONF_BLOCKTYPE_TRIM_MEMRETTRIM4_Msk  | MEMCONF_BLOCKTYPE_TRIM_MEMRETTRIM5_Msk  | \
     MEMCONF_BLOCKTYPE_TRIM_MEMRETTRIM6_Msk  | MEMCONF_BLOCKTYPE_TRIM_MEMRETTRIM7_Msk  | \
     MEMCONF_BLOCKTYPE_TRIM_MEMRETTRIM8_Msk  | MEMCONF_BLOCKTYPE_TRIM_MEMRETTRIM9_Msk  | \
     MEMCONF_BLOCKTYPE_TRIM_MEMRETTRIM10_Msk | MEMCONF_BLOCKTYPE_TRIM_MEMRETTRIM11_Msk | \
     MEMCONF_BLOCKTYPE_TRIM_MEMRETTRIM12_Msk | MEMCONF_BLOCKTYPE_TRIM_MEMRETTRIM13_Msk | \
     MEMCONF_BLOCKTYPE_TRIM_MEMRETTRIM14_Msk | MEMCONF_BLOCKTYPE_TRIM_MEMRETTRIM15_Msk)</initializer>
        <briefdescription>
<para>Symbol specifying bitmask collecting all memory retention trims. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_memconf.h" line="95" column="9" bodyfile="hal/nrf_memconf.h" bodystart="95" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Hardware access layer for managing the Memory Configuration (MEMCONF) peripheral. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
