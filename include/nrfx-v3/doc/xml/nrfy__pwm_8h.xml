<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="nrfy__pwm_8h" kind="file" language="C++">
    <compoundname>nrfy_pwm.h</compoundname>
    <includes local="no">nrfx.h</includes>
    <includes refid="nrf__pwm_8h" local="no">hal/nrf_pwm.h</includes>
    <includedby refid="nrfx__pwm_8h" local="no">drivers/include/nrfx_pwm.h</includedby>
    <incdepgraph>
      <node id="1">
        <label>haly/nrfy_pwm.h</label>
        <link refid="nrfy__pwm_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>nrfx.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="structnrfy__pwm__config__t" prot="public">nrfy_pwm_config_t</innerclass>
      <sectiondef kind="func">
      <memberdef kind="function" id="nrfy__pwm_8h_1a5478957efd92244cb60a2b20bd843bf0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRFY_STATIC_INLINE bool</type>
        <definition>NRFY_STATIC_INLINE bool __nrfy_internal_pwm_event_handle</definition>
        <argsstring>(NRF_PWM_Type *p_reg, uint32_t mask, nrf_pwm_event_t event, uint32_t *p_evt_mask)</argsstring>
        <name>__nrfy_internal_pwm_event_handle</name>
        <param>
          <type>NRF_PWM_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__pwm__hal_1ga4a8ceac653433e4ac8ee8682bdef45bf" kindref="member">nrf_pwm_event_t</ref></type>
          <declname>event</declname>
        </param>
        <param>
          <type>uint32_t *</type>
          <declname>p_evt_mask</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="haly/nrfy_pwm.h" line="431" column="25" bodyfile="haly/nrfy_pwm.h" bodystart="431" bodyend="447" declfile="haly/nrfy_pwm.h" declline="44" declcolumn="25"/>
      </memberdef>
      <memberdef kind="function" id="nrfy__pwm_8h_1ab09a9aadb98b90e1e0ddbdaca972e108" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRFY_STATIC_INLINE uint32_t</type>
        <definition>NRFY_STATIC_INLINE uint32_t __nrfy_internal_pwm_events_process</definition>
        <argsstring>(NRF_PWM_Type *p_reg, uint32_t mask)</argsstring>
        <name>__nrfy_internal_pwm_events_process</name>
        <param>
          <type>NRF_PWM_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="haly/nrfy_pwm.h" line="449" column="29" bodyfile="haly/nrfy_pwm.h" bodystart="449" bodyend="462" declfile="haly/nrfy_pwm.h" declline="49" declcolumn="29"/>
      </memberdef>
      <memberdef kind="function" id="nrfy__pwm_8h_1acf0f52e15082eed1104b197c734078c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRFY_STATIC_INLINE void</type>
        <definition>NRFY_STATIC_INLINE void __nrfy_internal_pwm_event_enabled_clear</definition>
        <argsstring>(NRF_PWM_Type *p_reg, uint32_t mask, nrf_pwm_event_t event)</argsstring>
        <name>__nrfy_internal_pwm_event_enabled_clear</name>
        <param>
          <type>NRF_PWM_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__pwm__hal_1ga4a8ceac653433e4ac8ee8682bdef45bf" kindref="member">nrf_pwm_event_t</ref></type>
          <declname>event</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="haly/nrfy_pwm.h" line="464" column="25" bodyfile="haly/nrfy_pwm.h" bodystart="464" bodyend="472" declfile="haly/nrfy_pwm.h" declline="51" declcolumn="25"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfy__pwm_1gaf6f6a3d5fd4674f857d42c9a81bae7ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRFY_STATIC_INLINE void</type>
        <definition>NRFY_STATIC_INLINE void nrfy_pwm_periph_configure</definition>
        <argsstring>(NRF_PWM_Type *p_reg, nrfy_pwm_config_t const *p_config)</argsstring>
        <name>nrfy_pwm_periph_configure</name>
        <param>
          <type>NRF_PWM_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="structnrfy__pwm__config__t" kindref="compound">nrfy_pwm_config_t</ref> const *</type>
          <declname>p_config</declname>
        </param>
        <briefdescription>
<para>Function for configuring the PWM. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">p_config</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the peripheral configuration structure. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="haly/nrfy_pwm.h" line="90" column="25" bodyfile="haly/nrfy_pwm.h" bodystart="90" bodyend="100"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfy__pwm_1gad8b47c9b19e52fa0a8219e04d7dfd15e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRFY_STATIC_INLINE void</type>
        <definition>NRFY_STATIC_INLINE void nrfy_pwm_int_init</definition>
        <argsstring>(NRF_PWM_Type *p_reg, uint32_t mask, uint8_t irq_priority, bool enable)</argsstring>
        <name>nrfy_pwm_int_init</name>
        <param>
          <type>NRF_PWM_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>irq_priority</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>enable</declname>
        </param>
        <briefdescription>
<para>Function for initializing the specified PWM interrupts. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of interrupts to be initialized. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">irq_priority</parametername>
</parameternamelist>
<parameterdescription>
<para>Interrupt priority. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">enable</parametername>
</parameternamelist>
<parameterdescription>
<para>True if interrupts are to be enabled, false otherwise. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="haly/nrfy_pwm.h" line="110" column="25" bodyfile="haly/nrfy_pwm.h" bodystart="110" bodyend="132"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfy__pwm_1ga0f5089e9c6586003ef8cbabd535a63eb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRFY_STATIC_INLINE void</type>
        <definition>NRFY_STATIC_INLINE void nrfy_pwm_int_uninit</definition>
        <argsstring>(NRF_PWM_Type *p_reg)</argsstring>
        <name>nrfy_pwm_int_uninit</name>
        <param>
          <type>NRF_PWM_Type *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for uninitializing the PWM interrupts. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="haly/nrfy_pwm.h" line="139" column="25" bodyfile="haly/nrfy_pwm.h" bodystart="139" bodyend="143"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfy__pwm_1ga1a50b5e18e22b432611d51f78b15a8b8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRFY_STATIC_INLINE uint32_t</type>
        <definition>NRFY_STATIC_INLINE uint32_t nrfy_pwm_events_process</definition>
        <argsstring>(NRF_PWM_Type *p_reg, uint32_t mask)</argsstring>
        <name>nrfy_pwm_events_process</name>
        <param>
          <type>NRF_PWM_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Function for processing the specified PWM events. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of events to be processed, created by <ref refid="group__nrfy__common_1ga0c6f93867e58ecfb266f70393b408c03" kindref="member">NRFY_EVENT_TO_INT_BITMASK</ref>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Mask of events that were generated and processed. To be checked against the result of <ref refid="group__nrfy__common_1ga0c6f93867e58ecfb266f70393b408c03" kindref="member">NRFY_EVENT_TO_INT_BITMASK()</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="haly/nrfy_pwm.h" line="154" column="29" bodyfile="haly/nrfy_pwm.h" bodystart="154" bodyend="160"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfy__pwm_1ga209f510cb6fa83ebb5986fa05ae8bba7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRFY_STATIC_INLINE void</type>
        <definition>NRFY_STATIC_INLINE void nrfy_pwm_start</definition>
        <argsstring>(NRF_PWM_Type *p_reg, uint8_t seq_id, bool wait)</argsstring>
        <name>nrfy_pwm_start</name>
        <param>
          <type>NRF_PWM_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>seq_id</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>wait</declname>
        </param>
        <briefdescription>
<para>Function for starting the PWM sequence. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">seq_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Sequence index. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">wait</parametername>
</parameternamelist>
<parameterdescription>
<para>True if the sequence is to be blocking, false otherwise. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="haly/nrfy_pwm.h" line="169" column="25" bodyfile="haly/nrfy_pwm.h" bodystart="169" bodyend="183"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfy__pwm_1ga01f4bf2564800dd97c8998a7810a1045" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRFY_STATIC_INLINE void</type>
        <definition>NRFY_STATIC_INLINE void nrfy_pwm_abort</definition>
        <argsstring>(NRF_PWM_Type *p_reg, bool wait)</argsstring>
        <name>nrfy_pwm_abort</name>
        <param>
          <type>NRF_PWM_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>wait</declname>
        </param>
        <briefdescription>
<para>Function for aborting the ongoing PWM sequence. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">wait</parametername>
</parameternamelist>
<parameterdescription>
<para>True if the abort is to be blocking, false otherwise. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="haly/nrfy_pwm.h" line="191" column="25" bodyfile="haly/nrfy_pwm.h" bodystart="191" bodyend="206"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfy__pwm_1ga64c3b07435f3903a261779b6a4a7d9de" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRFY_STATIC_INLINE void</type>
        <definition>NRFY_STATIC_INLINE void nrfy_pwm_task_trigger</definition>
        <argsstring>(NRF_PWM_Type *p_reg, nrf_pwm_task_t task)</argsstring>
        <name>nrfy_pwm_task_trigger</name>
        <param>
          <type>NRF_PWM_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__pwm__hal_1ga11cb9ca8fbb773011a3ad6658914418e" kindref="member">nrf_pwm_task_t</ref></type>
          <declname>task</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__nrf__pwm__hal_1ga80273886334d6d99c516aa13e9e6773a" kindref="member">nrf_pwm_task_trigger</ref>  Function for activating the specified PWM task.  </para>
</simplesect>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">task</parametername>
</parameternamelist>
<parameterdescription>
<para>Task to be activated.   </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="haly/nrfy_pwm.h" line="209" column="25" bodyfile="haly/nrfy_pwm.h" bodystart="209" bodyend="214"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfy__pwm_1ga1210658d3fb8e7b3fcad79d1abeeb581" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRFY_STATIC_INLINE uint32_t</type>
        <definition>NRFY_STATIC_INLINE uint32_t nrfy_pwm_task_address_get</definition>
        <argsstring>(NRF_PWM_Type const *p_reg, nrf_pwm_task_t task)</argsstring>
        <name>nrfy_pwm_task_address_get</name>
        <param>
          <type>NRF_PWM_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__pwm__hal_1ga11cb9ca8fbb773011a3ad6658914418e" kindref="member">nrf_pwm_task_t</ref></type>
          <declname>task</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__nrf__pwm__hal_1gaa78ad952a4164f2acdc2aa22b6fd0618" kindref="member">nrf_pwm_task_address_get</ref>  Function for getting the address of the specified PWM task register.  </para>
</simplesect>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">task</parametername>
</parameternamelist>
<parameterdescription>
<para>PWM task.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Address of the specified task register.   </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="haly/nrfy_pwm.h" line="217" column="29" bodyfile="haly/nrfy_pwm.h" bodystart="217" bodyend="221"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfy__pwm_1ga6148b56d089ec30cafa3a583d65630b3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRFY_STATIC_INLINE void</type>
        <definition>NRFY_STATIC_INLINE void nrfy_pwm_event_clear</definition>
        <argsstring>(NRF_PWM_Type *p_reg, nrf_pwm_event_t event)</argsstring>
        <name>nrfy_pwm_event_clear</name>
        <param>
          <type>NRF_PWM_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__pwm__hal_1ga4a8ceac653433e4ac8ee8682bdef45bf" kindref="member">nrf_pwm_event_t</ref></type>
          <declname>event</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__nrf__pwm__hal_1gadd2be0c46a34bece88f176db55cfe9ee" kindref="member">nrf_pwm_event_clear</ref>  Function for clearing the specified PWM event.  </para>
</simplesect>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event to clear.   </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="haly/nrfy_pwm.h" line="224" column="25" bodyfile="haly/nrfy_pwm.h" bodystart="224" bodyend="229"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfy__pwm_1ga2b7145921d9c9e6289055ffa6bb76f24" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRFY_STATIC_INLINE bool</type>
        <definition>NRFY_STATIC_INLINE bool nrfy_pwm_event_check</definition>
        <argsstring>(NRF_PWM_Type const *p_reg, nrf_pwm_event_t event)</argsstring>
        <name>nrfy_pwm_event_check</name>
        <param>
          <type>NRF_PWM_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__pwm__hal_1ga4a8ceac653433e4ac8ee8682bdef45bf" kindref="member">nrf_pwm_event_t</ref></type>
          <declname>event</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__nrf__pwm__hal_1ga7b6689ec738c01ef7e02d6923b8707a4" kindref="member">nrf_pwm_event_check</ref>  Function for retrieving the state of the PWM event.  </para>
</simplesect>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event to be checked.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>The event has been generated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>The event has not been generated.   </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="haly/nrfy_pwm.h" line="232" column="25" bodyfile="haly/nrfy_pwm.h" bodystart="232" bodyend="239"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfy__pwm_1ga60da3475cf0467b492afe55cdf947024" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRFY_STATIC_INLINE uint32_t</type>
        <definition>NRFY_STATIC_INLINE uint32_t nrfy_pwm_event_address_get</definition>
        <argsstring>(NRF_PWM_Type const *p_reg, nrf_pwm_event_t event)</argsstring>
        <name>nrfy_pwm_event_address_get</name>
        <param>
          <type>NRF_PWM_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__pwm__hal_1ga4a8ceac653433e4ac8ee8682bdef45bf" kindref="member">nrf_pwm_event_t</ref></type>
          <declname>event</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__nrf__pwm__hal_1ga3eba935312b4bf541151a30e0d408beb" kindref="member">nrf_pwm_event_address_get</ref>  Function for getting the address of the specified PWM event register.  </para>
</simplesect>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>PWM event.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Address of the specified event register.   </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="haly/nrfy_pwm.h" line="242" column="29" bodyfile="haly/nrfy_pwm.h" bodystart="242" bodyend="246"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfy__pwm_1ga7ef18d3d011e4b9a343875fc495022a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRFY_STATIC_INLINE void</type>
        <definition>NRFY_STATIC_INLINE void nrfy_pwm_shorts_enable</definition>
        <argsstring>(NRF_PWM_Type *p_reg, uint32_t mask)</argsstring>
        <name>nrfy_pwm_shorts_enable</name>
        <param>
          <type>NRF_PWM_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__nrf__pwm__hal_1gad37230defb6539bad9deeed03b4ec1ed" kindref="member">nrf_pwm_shorts_enable</ref>  Function for enabling the specified shortcuts.  </para>
</simplesect>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of shortcuts to be enabled.   </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="haly/nrfy_pwm.h" line="249" column="25" bodyfile="haly/nrfy_pwm.h" bodystart="249" bodyend="254"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfy__pwm_1ga142efbc33e623c0426c2dc8eb56ce70c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRFY_STATIC_INLINE void</type>
        <definition>NRFY_STATIC_INLINE void nrfy_pwm_shorts_disable</definition>
        <argsstring>(NRF_PWM_Type *p_reg, uint32_t mask)</argsstring>
        <name>nrfy_pwm_shorts_disable</name>
        <param>
          <type>NRF_PWM_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__nrf__pwm__hal_1ga52672c9d16d8b47bfccf573a959d1929" kindref="member">nrf_pwm_shorts_disable</ref>  Function for disabling the specified shortcuts.  </para>
</simplesect>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of shortcuts to be disabled.   </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="haly/nrfy_pwm.h" line="257" column="25" bodyfile="haly/nrfy_pwm.h" bodystart="257" bodyend="262"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfy__pwm_1ga0c076f8ed8caf96dbb54e4919ecbdf15" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRFY_STATIC_INLINE void</type>
        <definition>NRFY_STATIC_INLINE void nrfy_pwm_shorts_set</definition>
        <argsstring>(NRF_PWM_Type *p_reg, uint32_t mask)</argsstring>
        <name>nrfy_pwm_shorts_set</name>
        <param>
          <type>NRF_PWM_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__nrf__pwm__hal_1ga486254506e79e5017ec076850ac3b275" kindref="member">nrf_pwm_shorts_set</ref>  Function for setting the configuration of PWM shortcuts.  </para>
</simplesect>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Shortcuts configuration to be set.   </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="haly/nrfy_pwm.h" line="265" column="25" bodyfile="haly/nrfy_pwm.h" bodystart="265" bodyend="270"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfy__pwm_1gae8955a275264d986814048ca4baca2fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRFY_STATIC_INLINE void</type>
        <definition>NRFY_STATIC_INLINE void nrfy_pwm_int_enable</definition>
        <argsstring>(NRF_PWM_Type *p_reg, uint32_t mask)</argsstring>
        <name>nrfy_pwm_int_enable</name>
        <param>
          <type>NRF_PWM_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__nrf__pwm__hal_1gad97a8c07dceaad191d77748b3311c25b" kindref="member">nrf_pwm_int_enable</ref>  Function for enabling specified interrupts.  </para>
</simplesect>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of interrupts to be enabled. Use <ref refid="group__nrf__pwm__hal_1ga3f6888e6f40342ef64cf5b9555bd04d5" kindref="member">nrf_pwm_int_mask_t</ref> values for bit masking.   </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="haly/nrfy_pwm.h" line="273" column="25" bodyfile="haly/nrfy_pwm.h" bodystart="273" bodyend="278"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfy__pwm_1ga43327dfb362166b2bbf955ea39b9f7dc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRFY_STATIC_INLINE void</type>
        <definition>NRFY_STATIC_INLINE void nrfy_pwm_int_disable</definition>
        <argsstring>(NRF_PWM_Type *p_reg, uint32_t mask)</argsstring>
        <name>nrfy_pwm_int_disable</name>
        <param>
          <type>NRF_PWM_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__nrf__pwm__hal_1ga502fca6db746ea1fb1d5c45573cc6c1b" kindref="member">nrf_pwm_int_disable</ref>  Function for disabling specified interrupts.  </para>
</simplesect>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of interrupts to be disabled. Use <ref refid="group__nrf__pwm__hal_1ga3f6888e6f40342ef64cf5b9555bd04d5" kindref="member">nrf_pwm_int_mask_t</ref> values for bit masking.   </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="haly/nrfy_pwm.h" line="281" column="25" bodyfile="haly/nrfy_pwm.h" bodystart="281" bodyend="286"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfy__pwm_1ga631e89e949e8a518066efdd0981866f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRFY_STATIC_INLINE void</type>
        <definition>NRFY_STATIC_INLINE void nrfy_pwm_int_set</definition>
        <argsstring>(NRF_PWM_Type *p_reg, uint32_t mask)</argsstring>
        <name>nrfy_pwm_int_set</name>
        <param>
          <type>NRF_PWM_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__nrf__pwm__hal_1ga188dee0693d8704d6d8d77bf2e68831a" kindref="member">nrf_pwm_int_set</ref>  Function for setting the configuration of PWM interrupts.  </para>
</simplesect>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of interrupts to be set. Use <ref refid="group__nrf__pwm__hal_1ga3f6888e6f40342ef64cf5b9555bd04d5" kindref="member">nrf_pwm_int_mask_t</ref> values for bit masking.   </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="haly/nrfy_pwm.h" line="289" column="25" bodyfile="haly/nrfy_pwm.h" bodystart="289" bodyend="294"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfy__pwm_1ga9b25905c43b5507198a781ad12a9d879" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRFY_STATIC_INLINE uint32_t</type>
        <definition>NRFY_STATIC_INLINE uint32_t nrfy_pwm_int_enable_check</definition>
        <argsstring>(NRF_PWM_Type const *p_reg, uint32_t mask)</argsstring>
        <name>nrfy_pwm_int_enable_check</name>
        <param>
          <type>NRF_PWM_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__nrf__pwm__hal_1gaec938406e805161ad153e2a95638a74c" kindref="member">nrf_pwm_int_enable_check</ref>  Function for checking if the specified interrupts are enabled.  </para>
</simplesect>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of interrupts to be checked. Use <ref refid="group__nrf__pwm__hal_1ga3f6888e6f40342ef64cf5b9555bd04d5" kindref="member">nrf_pwm_int_mask_t</ref> values for bit masking.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Mask of enabled interrupts.   </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="haly/nrfy_pwm.h" line="297" column="29" bodyfile="haly/nrfy_pwm.h" bodystart="297" bodyend="303"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfy__pwm_1ga5a7b1a13616530ee16efa8165f4048b4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRFY_STATIC_INLINE void</type>
        <definition>NRFY_STATIC_INLINE void nrfy_pwm_subscribe_set</definition>
        <argsstring>(NRF_PWM_Type *p_reg, nrf_pwm_task_t task, uint8_t channel)</argsstring>
        <name>nrfy_pwm_subscribe_set</name>
        <param>
          <type>NRF_PWM_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__pwm__hal_1ga11cb9ca8fbb773011a3ad6658914418e" kindref="member">nrf_pwm_task_t</ref></type>
          <declname>task</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>channel</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__nrf__pwm__hal_1gad002575566c75b323e425cdf59c0a550" kindref="member">nrf_pwm_subscribe_set</ref>  Function for setting the subscribe configuration for a given PWM task.  </para>
</simplesect>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">task</parametername>
</parameternamelist>
<parameterdescription>
<para>Task for which to set the configuration. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">channel</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel through which to subscribe events.   </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="haly/nrfy_pwm.h" line="307" column="25" bodyfile="haly/nrfy_pwm.h" bodystart="307" bodyend="313"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfy__pwm_1gac9ff0747178e480ea0a45731f901ef07" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRFY_STATIC_INLINE void</type>
        <definition>NRFY_STATIC_INLINE void nrfy_pwm_subscribe_clear</definition>
        <argsstring>(NRF_PWM_Type *p_reg, nrf_pwm_task_t task)</argsstring>
        <name>nrfy_pwm_subscribe_clear</name>
        <param>
          <type>NRF_PWM_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__pwm__hal_1ga11cb9ca8fbb773011a3ad6658914418e" kindref="member">nrf_pwm_task_t</ref></type>
          <declname>task</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__nrf__pwm__hal_1ga7622c00fccfd7653ef3ca5a2f43ca07f" kindref="member">nrf_pwm_subscribe_clear</ref>  Function for clearing the subscribe configuration for a given PWM task.  </para>
</simplesect>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">task</parametername>
</parameternamelist>
<parameterdescription>
<para>Task for which to clear the configuration.   </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="haly/nrfy_pwm.h" line="316" column="25" bodyfile="haly/nrfy_pwm.h" bodystart="316" bodyend="321"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfy__pwm_1gaa01ca3f180c3c99521836f7aec911449" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRFY_STATIC_INLINE void</type>
        <definition>NRFY_STATIC_INLINE void nrfy_pwm_publish_set</definition>
        <argsstring>(NRF_PWM_Type *p_reg, nrf_pwm_event_t event, uint8_t channel)</argsstring>
        <name>nrfy_pwm_publish_set</name>
        <param>
          <type>NRF_PWM_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__pwm__hal_1ga4a8ceac653433e4ac8ee8682bdef45bf" kindref="member">nrf_pwm_event_t</ref></type>
          <declname>event</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>channel</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__nrf__pwm__hal_1ga41edf2cfc651f859f465ac532cd4616a" kindref="member">nrf_pwm_publish_set</ref>  Function for setting the publish configuration for a given PWM event.  </para>
</simplesect>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event for which to set the configuration. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">channel</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel through which to publish the event.   </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="haly/nrfy_pwm.h" line="324" column="25" bodyfile="haly/nrfy_pwm.h" bodystart="324" bodyend="330"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfy__pwm_1ga10e0f88a23ff222e08ed046ab9c432b1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRFY_STATIC_INLINE void</type>
        <definition>NRFY_STATIC_INLINE void nrfy_pwm_publish_clear</definition>
        <argsstring>(NRF_PWM_Type *p_reg, nrf_pwm_event_t event)</argsstring>
        <name>nrfy_pwm_publish_clear</name>
        <param>
          <type>NRF_PWM_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__pwm__hal_1ga4a8ceac653433e4ac8ee8682bdef45bf" kindref="member">nrf_pwm_event_t</ref></type>
          <declname>event</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__nrf__pwm__hal_1ga6cd95cd70efae593bd68fa84e93fc433" kindref="member">nrf_pwm_publish_clear</ref>  Function for clearing the publish configuration for a given PWM event.  </para>
</simplesect>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event for which to clear the configuration.   </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="haly/nrfy_pwm.h" line="333" column="25" bodyfile="haly/nrfy_pwm.h" bodystart="333" bodyend="338"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfy__pwm_1gadf2651fcbd0680f93e142e890e2ae05f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRFY_STATIC_INLINE void</type>
        <definition>NRFY_STATIC_INLINE void nrfy_pwm_enable</definition>
        <argsstring>(NRF_PWM_Type *p_reg)</argsstring>
        <name>nrfy_pwm_enable</name>
        <param>
          <type>NRF_PWM_Type *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__nrf__pwm__hal_1ga592cb178b637ab0b03bea8523e8ded82" kindref="member">nrf_pwm_enable</ref>  Function for enabling the PWM peripheral.  </para>
</simplesect>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.   </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="haly/nrfy_pwm.h" line="342" column="25" bodyfile="haly/nrfy_pwm.h" bodystart="342" bodyend="346"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfy__pwm_1ga56b596aada64172432a013d7e74de793" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRFY_STATIC_INLINE void</type>
        <definition>NRFY_STATIC_INLINE void nrfy_pwm_disable</definition>
        <argsstring>(NRF_PWM_Type *p_reg)</argsstring>
        <name>nrfy_pwm_disable</name>
        <param>
          <type>NRF_PWM_Type *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__nrf__pwm__hal_1ga03d306651afccddaccc092b9da93789a" kindref="member">nrf_pwm_disable</ref>  Function for disabling the PWM peripheral.  </para>
</simplesect>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.   </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="haly/nrfy_pwm.h" line="349" column="25" bodyfile="haly/nrfy_pwm.h" bodystart="349" bodyend="353"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfy__pwm_1ga8bf0222a0a36e491252883fb1863cbc7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRFY_STATIC_INLINE bool</type>
        <definition>NRFY_STATIC_INLINE bool nrfy_pwm_enable_check</definition>
        <argsstring>(NRF_PWM_Type *p_reg)</argsstring>
        <name>nrfy_pwm_enable_check</name>
        <param>
          <type>NRF_PWM_Type *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__nrf__pwm__hal_1ga5895bf394e866a56f522c4bbdfb54996" kindref="member">nrf_pwm_enable_check</ref>  Function for checking if the PWM peripheral is enabled.  </para>
</simplesect>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>The PWM is enabled. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>The PWM is not enabled.   </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="haly/nrfy_pwm.h" line="356" column="25" bodyfile="haly/nrfy_pwm.h" bodystart="356" bodyend="362"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfy__pwm_1gab783942d542622524fdfe946303a7eb3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRFY_STATIC_INLINE void</type>
        <definition>NRFY_STATIC_INLINE void nrfy_pwm_pins_set</definition>
        <argsstring>(NRF_PWM_Type *p_reg, uint32_t out_pins[NRF_PWM_CHANNEL_COUNT])</argsstring>
        <name>nrfy_pwm_pins_set</name>
        <param>
          <type>NRF_PWM_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>out_pins</declname>
          <array>[NRF_PWM_CHANNEL_COUNT]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__nrf__pwm__hal_1ga0bcd0f7311e790199cd14373fc823a9f" kindref="member">nrf_pwm_pins_set</ref>  Function for assigning pins to PWM output channels.  </para>
</simplesect>
</para>
<para>Usage of all PWM output channels is optional. If a given channel is not needed, pass the <ref refid="group__nrf__pwm__hal_1gabf854890a14200d20e7aea8234a16887" kindref="member">NRF_PWM_PIN_NOT_CONNECTED</ref> value instead of its pin number.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">out_pins</parametername>
</parameternamelist>
<parameterdescription>
<para>Array with pin numbers for individual PWM output channels.   </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="haly/nrfy_pwm.h" line="365" column="25" bodyfile="haly/nrfy_pwm.h" bodystart="365" bodyend="370"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfy__pwm_1ga165b416fc52e91f8242dcf4f0a6d6ab5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRFY_STATIC_INLINE uint32_t</type>
        <definition>NRFY_STATIC_INLINE uint32_t nrfy_pwm_pin_get</definition>
        <argsstring>(NRF_PWM_Type const *p_reg, uint8_t channel)</argsstring>
        <name>nrfy_pwm_pin_get</name>
        <param>
          <type>NRF_PWM_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>channel</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__nrf__pwm__hal_1gaafe7e1c261d441016e999e52ec8282b4" kindref="member">nrf_pwm_pin_get</ref>  Function for getting pin selection associated with specified PWM output channel.  </para>
</simplesect>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">channel</parametername>
</parameternamelist>
<parameterdescription>
<para>PWM output channel.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pin selection associated with specified PWM output channel.   </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="haly/nrfy_pwm.h" line="373" column="29" bodyfile="haly/nrfy_pwm.h" bodystart="373" bodyend="379"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfy__pwm_1ga4907db21dcb4bcdc52b690dbca6a6add" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRFY_STATIC_INLINE void</type>
        <definition>NRFY_STATIC_INLINE void nrfy_pwm_configure</definition>
        <argsstring>(NRF_PWM_Type *p_reg, nrf_pwm_clk_t base_clock, nrf_pwm_mode_t mode, uint16_t top_value)</argsstring>
        <name>nrfy_pwm_configure</name>
        <param>
          <type>NRF_PWM_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__pwm__hal_1ga8479da20e14394fb2388b1be3b879670" kindref="member">nrf_pwm_clk_t</ref></type>
          <declname>base_clock</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__pwm__hal_1ga1f29b190ff13c52895d249e07ebe92cb" kindref="member">nrf_pwm_mode_t</ref></type>
          <declname>mode</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>top_value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__nrf__pwm__hal_1ga58bcf18a7b025c1416d7ea3d6e35038b" kindref="member">nrf_pwm_configure</ref>  Function for configuring the PWM peripheral.  </para>
</simplesect>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">base_clock</parametername>
</parameternamelist>
<parameterdescription>
<para>Base clock frequency. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mode</parametername>
</parameternamelist>
<parameterdescription>
<para>Operating mode of the pulse generator counter. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">top_value</parametername>
</parameternamelist>
<parameterdescription>
<para>Value up to which the pulse generator counter counts.   </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="haly/nrfy_pwm.h" line="382" column="25" bodyfile="haly/nrfy_pwm.h" bodystart="382" bodyend="389"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfy__pwm_1ga4ad1c7489b99d8799e373cc1f5fa1597" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRFY_STATIC_INLINE void</type>
        <definition>NRFY_STATIC_INLINE void nrfy_pwm_sequence_set</definition>
        <argsstring>(NRF_PWM_Type *p_reg, uint8_t seq_id, nrf_pwm_sequence_t const *p_seq)</argsstring>
        <name>nrfy_pwm_sequence_set</name>
        <param>
          <type>NRF_PWM_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>seq_id</declname>
        </param>
        <param>
          <type><ref refid="structnrf__pwm__sequence__t" kindref="compound">nrf_pwm_sequence_t</ref> const *</type>
          <declname>p_seq</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__nrf__pwm__hal_1ga993b47eb4fc9b6350ced9043945a8206" kindref="member">nrf_pwm_sequence_set</ref>  Function for defining a sequence of PWM duty cycles.  </para>
</simplesect>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">seq_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Identifier of the sequence (0 or 1). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">p_seq</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the sequence definition.   </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="haly/nrfy_pwm.h" line="392" column="25" bodyfile="haly/nrfy_pwm.h" bodystart="392" bodyend="399"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfy__pwm_1gad97258c8814d251314529a2ae5171f18" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRFY_STATIC_INLINE void</type>
        <definition>NRFY_STATIC_INLINE void nrfy_pwm_decoder_set</definition>
        <argsstring>(NRF_PWM_Type *p_reg, nrf_pwm_dec_load_t dec_load, nrf_pwm_dec_step_t dec_step)</argsstring>
        <name>nrfy_pwm_decoder_set</name>
        <param>
          <type>NRF_PWM_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__pwm__hal_1ga453888e5feb46774da27499ca1eeafd2" kindref="member">nrf_pwm_dec_load_t</ref></type>
          <declname>dec_load</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__pwm__hal_1gae25a7e03c383934d33cda8a049b7dde4" kindref="member">nrf_pwm_dec_step_t</ref></type>
          <declname>dec_step</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__nrf__pwm__hal_1ga6a3c94d7139f17dd0f43ef4f16abb5cd" kindref="member">nrf_pwm_decoder_set</ref>  Function for setting the mode of loading sequence data from RAM and advancing the sequence.  </para>
</simplesect>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">dec_load</parametername>
</parameternamelist>
<parameterdescription>
<para>Mode of loading sequence data from RAM. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">dec_step</parametername>
</parameternamelist>
<parameterdescription>
<para>Mode of advancing the active sequence.   </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="haly/nrfy_pwm.h" line="402" column="25" bodyfile="haly/nrfy_pwm.h" bodystart="402" bodyend="408"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfy__pwm_1gaaf31f4eb5297d2cfd910fd4d7b0aa03c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRFY_STATIC_INLINE void</type>
        <definition>NRFY_STATIC_INLINE void nrfy_pwm_loop_set</definition>
        <argsstring>(NRF_PWM_Type *p_reg, uint16_t loop_count)</argsstring>
        <name>nrfy_pwm_loop_set</name>
        <param>
          <type>NRF_PWM_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>loop_count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__nrf__pwm__hal_1gaa7c79a9e33546f5dff5ef564052cbe1c" kindref="member">nrf_pwm_loop_set</ref>  Function for setting the number of times the sequence playback should be performed.  </para>
</simplesect>
</para>
<para>This function applies to two-sequence playback (concatenated sequence 0 and 1). A single sequence can be played back only once.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">loop_count</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of times to perform the sequence playback.   </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="haly/nrfy_pwm.h" line="411" column="25" bodyfile="haly/nrfy_pwm.h" bodystart="411" bodyend="415"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfy__pwm_1gaf117892bba2a442fbcf98d8d9791904f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRFY_STATIC_INLINE <ref refid="group__nrf__pwm__hal_1ga11cb9ca8fbb773011a3ad6658914418e" kindref="member">nrf_pwm_task_t</ref></type>
        <definition>NRFY_STATIC_INLINE nrf_pwm_task_t nrfy_pwm_seqstart_task_get</definition>
        <argsstring>(uint8_t seq_id)</argsstring>
        <name>nrfy_pwm_seqstart_task_get</name>
        <param>
          <type>uint8_t</type>
          <declname>seq_id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__nrf__pwm__hal_1gaa0d334d0587cb0f3213e097a67475d5e" kindref="member">nrf_pwm_seqstart_task_get</ref>  Function for getting the specified PWM SEQSTART task.  </para>
</simplesect>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">seq_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Sequence index.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The specified PWM SEQSTART task.   </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="haly/nrfy_pwm.h" line="418" column="35" bodyfile="haly/nrfy_pwm.h" bodystart="418" bodyend="421"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfy__pwm_1ga008e8b41df6de832c2c8a5e84f69b6dd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRFY_STATIC_INLINE <ref refid="group__nrf__pwm__hal_1ga4a8ceac653433e4ac8ee8682bdef45bf" kindref="member">nrf_pwm_event_t</ref></type>
        <definition>NRFY_STATIC_INLINE nrf_pwm_event_t nrfy_pwm_seqend_event_get</definition>
        <argsstring>(uint8_t seq_id)</argsstring>
        <name>nrfy_pwm_seqend_event_get</name>
        <param>
          <type>uint8_t</type>
          <declname>seq_id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__nrf__pwm__hal_1ga9e0af905e8f4605795455630b66ea833" kindref="member">nrf_pwm_seqend_event_get</ref>  Function for getting the specified PWM SEQEND event.  </para>
</simplesect>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">seq_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Sequence index.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The specified PWM SEQEND event.   </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="haly/nrfy_pwm.h" line="424" column="36" bodyfile="haly/nrfy_pwm.h" bodystart="424" bodyend="427"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2021<sp/>-<sp/>2024,<sp/>Nordic<sp/>Semiconductor<sp/>ASA</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>All<sp/>rights<sp/>reserved.</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>SPDX-License-Identifier:<sp/>BSD-3-Clause</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions<sp/>are<sp/>met:</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>1.<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright<sp/>notice,<sp/>this</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>2.<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the<sp/>distribution.</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/>3.<sp/>Neither<sp/>the<sp/>name<sp/>of<sp/>the<sp/>copyright<sp/>holder<sp/>nor<sp/>the<sp/>names<sp/>of<sp/>its</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>contributors<sp/>may<sp/>be<sp/>used<sp/>to<sp/>endorse<sp/>or<sp/>promote<sp/>products<sp/>derived<sp/>from<sp/>this</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>software<sp/>without<sp/>specific<sp/>prior<sp/>written<sp/>permission.</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>COPYRIGHT<sp/>HOLDERS<sp/>AND<sp/>CONTRIBUTORS<sp/>&quot;AS<sp/>IS&quot;</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/>AND<sp/>ANY<sp/>EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>THE</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*<sp/>ARE<sp/>DISCLAIMED.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>COPYRIGHT<sp/>HOLDER<sp/>OR<sp/>CONTRIBUTORS<sp/>BE</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,<sp/>SPECIAL,<sp/>EXEMPLARY,<sp/>OR</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>PROCUREMENT<sp/>OF</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>*<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,<sp/>DATA,<sp/>OR<sp/>PROFITS;<sp/>OR<sp/>BUSINESS</highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/>*<sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY<sp/>THEORY<sp/>OF<sp/>LIABILITY,<sp/>WHETHER<sp/>IN</highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/>*<sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR<sp/>OTHERWISE)</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/>*<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE<sp/>OF<sp/>THIS<sp/>SOFTWARE,<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/>*<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight></codeline>
<codeline lineno="32"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>NRFY_PWM_H__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRFY_PWM_H__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;nrfx.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;hal/nrf_pwm.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal">NRFY_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>__nrfy_internal_pwm_event_handle(NRF_PWM_Type<sp/>*<sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mask,</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__pwm__hal_1ga4a8ceac653433e4ac8ee8682bdef45bf" kindref="member">nrf_pwm_event_t</ref><sp/>event,</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>p_evt_mask);</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal">NRFY_STATIC_INLINE<sp/>uint32_t<sp/>__nrfy_internal_pwm_events_process(NRF_PWM_Type<sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>mask);</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal">NRFY_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>__nrfy_internal_pwm_event_enabled_clear(NRF_PWM_Type<sp/>*<sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mask,</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__pwm__hal_1ga4a8ceac653433e4ac8ee8682bdef45bf" kindref="member">nrf_pwm_event_t</ref><sp/>event);</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="55"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="56"><highlight class="comment"><sp/>*<sp/>@defgroup<sp/>nrfy_pwm<sp/>PWM<sp/>HALY</highlight></codeline>
<codeline lineno="57"><highlight class="comment"><sp/>*<sp/>@{</highlight></codeline>
<codeline lineno="58"><highlight class="comment"><sp/>*<sp/>@ingroup<sp/>nrf_pwm</highlight></codeline>
<codeline lineno="59"><highlight class="comment"><sp/>*<sp/>@brief<sp/><sp/><sp/>Hardware<sp/>access<sp/>layer<sp/>with<sp/>cache<sp/>and<sp/>barrier<sp/>support<sp/>for<sp/>managing<sp/>the<sp/>PWM<sp/>peripheral.</highlight></codeline>
<codeline lineno="60"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="62"><highlight class="comment">/**<sp/>@brief<sp/>PWM<sp/>configuration<sp/>structure.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63" refid="structnrfy__pwm__config__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal">{</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output_pins[<ref refid="group__nrf__pwm__hal_1ga9935002ab3ef7325efe73a6979e77990" kindref="member">NRF_PWM_CHANNEL_COUNT</ref>];<sp/></highlight><highlight class="comment">///&lt;<sp/>Pin<sp/>numbers<sp/>for<sp/>individual<sp/>output<sp/>channels<sp/>(optional).</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="66"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/**&lt;<sp/>Use<sp/>@ref<sp/>NRF_PWM_PIN_NOT_CONNECTED</highlight></codeline>
<codeline lineno="67"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>if<sp/>a<sp/>given<sp/>output<sp/>channel<sp/>is<sp/>not<sp/>needed.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/>uint16_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>top_value;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Value<sp/>up<sp/>to<sp/>which<sp/>the<sp/>pulse<sp/>generator<sp/>counter<sp/>counts.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__pwm__hal_1ga8479da20e14394fb2388b1be3b879670" kindref="member">nrf_pwm_clk_t</ref><sp/><sp/><sp/><sp/><sp/><sp/>base_clock;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Base<sp/>clock<sp/>frequency.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__pwm__hal_1ga1f29b190ff13c52895d249e07ebe92cb" kindref="member">nrf_pwm_mode_t</ref><sp/><sp/><sp/><sp/><sp/>count_mode;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Operating<sp/>mode<sp/>of<sp/>the<sp/>pulse<sp/>generator<sp/>counter.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__pwm__hal_1ga453888e5feb46774da27499ca1eeafd2" kindref="member">nrf_pwm_dec_load_t</ref><sp/>load_mode;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Mode<sp/>of<sp/>loading<sp/>sequence<sp/>data<sp/>from<sp/>RAM.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__pwm__hal_1gae25a7e03c383934d33cda8a049b7dde4" kindref="member">nrf_pwm_dec_step_t</ref><sp/>step_mode;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Mode<sp/>of<sp/>advancing<sp/>the<sp/>active<sp/>sequence.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>skip_psel_cfg;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Skip<sp/>pin<sp/>selection<sp/>configuration.</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="74"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/**&lt;<sp/>When<sp/>set<sp/>to<sp/>true,<sp/>the<sp/>driver<sp/>does<sp/>not<sp/>modify</highlight></codeline>
<codeline lineno="75"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>pin<sp/>select<sp/>registers<sp/>in<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="76"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>Those<sp/>registers<sp/>are<sp/>supposed<sp/>to<sp/>be<sp/>set<sp/>up</highlight></codeline>
<codeline lineno="77"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>externally<sp/>before<sp/>the<sp/>driver<sp/>is<sp/>initialized.</highlight></codeline>
<codeline lineno="78"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>@note<sp/>When<sp/>both<sp/>GPIO<sp/>configuration<sp/>and<sp/>pin</highlight></codeline>
<codeline lineno="79"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>selection<sp/>are<sp/>to<sp/>be<sp/>skipped,<sp/>the<sp/>structure</highlight></codeline>
<codeline lineno="80"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>fields<sp/>that<sp/>specify<sp/>pins<sp/>can<sp/>be<sp/>omitted,</highlight></codeline>
<codeline lineno="81"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>as<sp/>they<sp/>are<sp/>ignored<sp/>anyway.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal">}<sp/><ref refid="structnrfy__pwm__config__t" kindref="compound">nrfy_pwm_config_t</ref>;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="84"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="85"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>configuring<sp/>the<sp/>PWM.</highlight></codeline>
<codeline lineno="86"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="87"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="88"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_config<sp/>Pointer<sp/>to<sp/>the<sp/>peripheral<sp/>configuration<sp/>structure.</highlight></codeline>
<codeline lineno="89"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal">NRFY_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrfy__pwm_1gaf6f6a3d5fd4674f857d42c9a81bae7ee" kindref="member">nrfy_pwm_periph_configure</ref>(NRF_PWM_Type<sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structnrfy__pwm__config__t" kindref="compound">nrfy_pwm_config_t</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_config)</highlight></codeline>
<codeline lineno="92"><highlight class="normal">{</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!p_config-&gt;<ref refid="structnrfy__pwm__config__t_1a1c3f13ee57569b0a11ccede0037f5412" kindref="member">skip_psel_cfg</ref>)</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__pwm__hal_1ga0bcd0f7311e790199cd14373fc823a9f" kindref="member">nrf_pwm_pins_set</ref>(p_reg,<sp/>p_config-&gt;<ref refid="structnrfy__pwm__config__t_1ab33e7c6be4b00806717337b3e600e767" kindref="member">output_pins</ref>);</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__pwm__hal_1ga58bcf18a7b025c1416d7ea3d6e35038b" kindref="member">nrf_pwm_configure</ref>(p_reg,<sp/>p_config-&gt;<ref refid="structnrfy__pwm__config__t_1af85c505e0f774ab81c078e5a80a169c6" kindref="member">base_clock</ref>,<sp/>p_config-&gt;<ref refid="structnrfy__pwm__config__t_1a7c1b794a774c349b65e60d3f7cb6524c" kindref="member">count_mode</ref>,<sp/>p_config-&gt;<ref refid="structnrfy__pwm__config__t_1af6f2dd341b043f81e1aa1bac1c02dcea" kindref="member">top_value</ref>);</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__pwm__hal_1ga6a3c94d7139f17dd0f43ef4f16abb5cd" kindref="member">nrf_pwm_decoder_set</ref>(p_reg,<sp/>p_config-&gt;<ref refid="structnrfy__pwm__config__t_1a700d6ba18884919c7e0c1a85df460e41" kindref="member">load_mode</ref>,<sp/>p_config-&gt;<ref refid="structnrfy__pwm__config__t_1ab8164fa72299c106f4c59d7203ac7647" kindref="member">step_mode</ref>);</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/>nrf_barrier_w();</highlight></codeline>
<codeline lineno="100"><highlight class="normal">}</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="102"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="103"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>initializing<sp/>the<sp/>specified<sp/>PWM<sp/>interrupts.</highlight></codeline>
<codeline lineno="104"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="105"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="106"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>mask<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Mask<sp/>of<sp/>interrupts<sp/>to<sp/>be<sp/>initialized.</highlight></codeline>
<codeline lineno="107"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>irq_priority<sp/>Interrupt<sp/>priority.</highlight></codeline>
<codeline lineno="108"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>enable<sp/><sp/><sp/><sp/><sp/><sp/><sp/>True<sp/>if<sp/>interrupts<sp/>are<sp/>to<sp/>be<sp/>enabled,<sp/>false<sp/>otherwise.</highlight></codeline>
<codeline lineno="109"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal">NRFY_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrfy__pwm_1gad8b47c9b19e52fa0a8219e04d7dfd15e" kindref="member">nrfy_pwm_int_init</ref>(NRF_PWM_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/>mask,</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>irq_priority,</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>enable)</highlight></codeline>
<codeline lineno="114"><highlight class="normal">{</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/>__nrfy_internal_pwm_event_enabled_clear(p_reg,<sp/>mask,<sp/><ref refid="group__nrf__pwm__hal_1gga4a8ceac653433e4ac8ee8682bdef45bfa904f95da3dc44a8e147623f4ae32a268" kindref="member">NRF_PWM_EVENT_LOOPSDONE</ref>);</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/>__nrfy_internal_pwm_event_enabled_clear(p_reg,<sp/>mask,<sp/><ref refid="group__nrf__pwm__hal_1gga4a8ceac653433e4ac8ee8682bdef45bfa60bc770e86e8c3e1987b7828c5527e3b" kindref="member">NRF_PWM_EVENT_SEQEND0</ref>);</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/>__nrfy_internal_pwm_event_enabled_clear(p_reg,<sp/>mask,<sp/><ref refid="group__nrf__pwm__hal_1gga4a8ceac653433e4ac8ee8682bdef45bfa250b4184e07ce53864c00aa17f142c3e" kindref="member">NRF_PWM_EVENT_SEQEND1</ref>);</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/>__nrfy_internal_pwm_event_enabled_clear(p_reg,<sp/>mask,<sp/><ref refid="group__nrf__pwm__hal_1gga4a8ceac653433e4ac8ee8682bdef45bfadf20e481b3105e4ef6e6f80423c8192b" kindref="member">NRF_PWM_EVENT_STOPPED</ref>);</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/>__nrfy_internal_pwm_event_enabled_clear(p_reg,<sp/>mask,<sp/><ref refid="group__nrf__pwm__hal_1gga4a8ceac653433e4ac8ee8682bdef45bfaa5bb09f0669ce66b58053dd382a3bcbf" kindref="member">NRF_PWM_EVENT_SEQSTARTED0</ref>);</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/>__nrfy_internal_pwm_event_enabled_clear(p_reg,<sp/>mask,<sp/><ref refid="group__nrf__pwm__hal_1gga4a8ceac653433e4ac8ee8682bdef45bfa79aea4fc8f7e536c180a1b5b4c9a2596" kindref="member">NRF_PWM_EVENT_SEQSTARTED1</ref>);</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/>__nrfy_internal_pwm_event_enabled_clear(p_reg,<sp/>mask,<sp/><ref refid="group__nrf__pwm__hal_1gga4a8ceac653433e4ac8ee8682bdef45bfa2340304c4d850deee64456310c272d13" kindref="member">NRF_PWM_EVENT_PWMPERIODEND</ref>);</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/>nrf_barrier_w();</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__glue_1ga4182ca2864cca23d945b728e3dddfd7b" kindref="member">NRFX_IRQ_PRIORITY_SET</ref>(<ref refid="group__nrfx__common_1ga99320a533545d814f480ee108a6b61ce" kindref="member">nrfx_get_irq_number</ref>(p_reg),<sp/>irq_priority);</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__glue_1gab330b41ecdcfb8b13a929b0c74084293" kindref="member">NRFX_IRQ_ENABLE</ref>(<ref refid="group__nrfx__common_1ga99320a533545d814f480ee108a6b61ce" kindref="member">nrfx_get_irq_number</ref>(p_reg));</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(enable)</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__pwm__hal_1gad97a8c07dceaad191d77748b3311c25b" kindref="member">nrf_pwm_int_enable</ref>(p_reg,<sp/>mask);</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/>nrf_barrier_w();</highlight></codeline>
<codeline lineno="132"><highlight class="normal">}</highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="134"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="135"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>uninitializing<sp/>the<sp/>PWM<sp/>interrupts.</highlight></codeline>
<codeline lineno="136"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="137"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="138"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal">NRFY_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrfy__pwm_1ga0f5089e9c6586003ef8cbabd535a63eb" kindref="member">nrfy_pwm_int_uninit</ref>(NRF_PWM_Type<sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="140"><highlight class="normal">{</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__glue_1ga5837b0b0518c6e7a2c6ce86bd96d2148" kindref="member">NRFX_IRQ_DISABLE</ref>(<ref refid="group__nrfx__common_1ga99320a533545d814f480ee108a6b61ce" kindref="member">nrfx_get_irq_number</ref>(p_reg));</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/>nrf_barrier_w();</highlight></codeline>
<codeline lineno="143"><highlight class="normal">}</highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="145"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="146"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>processing<sp/>the<sp/>specified<sp/>PWM<sp/>events.</highlight></codeline>
<codeline lineno="147"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="148"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="149"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>mask<sp/><sp/>Mask<sp/>of<sp/>events<sp/>to<sp/>be<sp/>processed,<sp/>created<sp/>by<sp/>@ref<sp/>NRFY_EVENT_TO_INT_BITMASK.</highlight></codeline>
<codeline lineno="150"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="151"><highlight class="comment"><sp/>*<sp/>@return<sp/>Mask<sp/>of<sp/>events<sp/>that<sp/>were<sp/>generated<sp/>and<sp/>processed.</highlight></codeline>
<codeline lineno="152"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>To<sp/>be<sp/>checked<sp/>against<sp/>the<sp/>result<sp/>of<sp/>@ref<sp/>NRFY_EVENT_TO_INT_BITMASK().</highlight></codeline>
<codeline lineno="153"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal">NRFY_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrfy__pwm_1ga1a50b5e18e22b432611d51f78b15a8b8" kindref="member">nrfy_pwm_events_process</ref>(NRF_PWM_Type<sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>mask)</highlight></codeline>
<codeline lineno="155"><highlight class="normal">{</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/>nrf_barrier_r();</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>evt_mask<sp/>=<sp/>__nrfy_internal_pwm_events_process(p_reg,<sp/>mask);</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/>nrf_barrier_w();</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>evt_mask;</highlight></codeline>
<codeline lineno="160"><highlight class="normal">}</highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="162"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="163"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>starting<sp/>the<sp/>PWM<sp/>sequence.</highlight></codeline>
<codeline lineno="164"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="165"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="166"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>seq_id<sp/>Sequence<sp/>index.</highlight></codeline>
<codeline lineno="167"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>wait<sp/><sp/><sp/>True<sp/>if<sp/>the<sp/>sequence<sp/>is<sp/>to<sp/>be<sp/>blocking,<sp/>false<sp/>otherwise.</highlight></codeline>
<codeline lineno="168"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal">NRFY_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrfy__pwm_1ga209f510cb6fa83ebb5986fa05ae8bba7" kindref="member">nrfy_pwm_start</ref>(NRF_PWM_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seq_id,</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wait)</highlight></codeline>
<codeline lineno="172"><highlight class="normal">{</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__pwm__hal_1ga80273886334d6d99c516aa13e9e6773a" kindref="member">nrf_pwm_task_trigger</ref>(p_reg,<sp/><ref refid="group__nrf__pwm__hal_1gaa0d334d0587cb0f3213e097a67475d5e" kindref="member">nrf_pwm_seqstart_task_get</ref>(seq_id));</highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(wait)</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nrf_barrier_w();</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>evt_mask<sp/>=<sp/><ref refid="group__nrfy__common_1ga0c6f93867e58ecfb266f70393b408c03" kindref="member">NRFY_EVENT_TO_INT_BITMASK</ref>(<ref refid="group__nrf__pwm__hal_1ga9e0af905e8f4605795455630b66ea833" kindref="member">nrf_pwm_seqend_event_get</ref>(seq_id));</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(!__nrfy_internal_pwm_events_process(p_reg,<sp/>evt_mask))</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{}</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/>nrf_barrier_w();</highlight></codeline>
<codeline lineno="183"><highlight class="normal">}</highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="185"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="186"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>aborting<sp/>the<sp/>ongoing<sp/>PWM<sp/>sequence.</highlight></codeline>
<codeline lineno="187"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="188"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="189"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>wait<sp/><sp/>True<sp/>if<sp/>the<sp/>abort<sp/>is<sp/>to<sp/>be<sp/>blocking,<sp/>false<sp/>otherwise.</highlight></codeline>
<codeline lineno="190"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal">NRFY_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrfy__pwm_1ga01f4bf2564800dd97c8998a7810a1045" kindref="member">nrfy_pwm_abort</ref>(NRF_PWM_Type<sp/>*<sp/>p_reg,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>wait)</highlight></codeline>
<codeline lineno="192"><highlight class="normal">{</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__pwm__hal_1ga80273886334d6d99c516aa13e9e6773a" kindref="member">nrf_pwm_task_trigger</ref>(p_reg,<sp/><ref refid="group__nrf__pwm__hal_1gga11cb9ca8fbb773011a3ad6658914418ea1cdbda5c0c8086b3e22909f93ae2eda8" kindref="member">NRF_PWM_TASK_STOP</ref>);</highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(wait)</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nrf_barrier_w();</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>evt_mask<sp/>=<sp/><ref refid="group__nrfy__common_1ga0c6f93867e58ecfb266f70393b408c03" kindref="member">NRFY_EVENT_TO_INT_BITMASK</ref>(<ref refid="group__nrf__pwm__hal_1gga4a8ceac653433e4ac8ee8682bdef45bfadf20e481b3105e4ef6e6f80423c8192b" kindref="member">NRF_PWM_EVENT_STOPPED</ref>);</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(!__nrfy_internal_pwm_events_process(p_reg,<sp/>evt_mask))</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{}</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(void)__nrfy_internal_pwm_events_process(p_reg,</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrfy__common_1ga0c6f93867e58ecfb266f70393b408c03" kindref="member">NRFY_EVENT_TO_INT_BITMASK</ref>(<ref refid="group__nrf__pwm__hal_1gga4a8ceac653433e4ac8ee8682bdef45bfa60bc770e86e8c3e1987b7828c5527e3b" kindref="member">NRF_PWM_EVENT_SEQEND0</ref>)<sp/>|</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrfy__common_1ga0c6f93867e58ecfb266f70393b408c03" kindref="member">NRFY_EVENT_TO_INT_BITMASK</ref>(<ref refid="group__nrf__pwm__hal_1gga4a8ceac653433e4ac8ee8682bdef45bfa250b4184e07ce53864c00aa17f142c3e" kindref="member">NRF_PWM_EVENT_SEQEND1</ref>));</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/>nrf_barrier_w();</highlight></codeline>
<codeline lineno="206"><highlight class="normal">}</highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="208"><highlight class="comment">/**<sp/>@refhal{nrf_pwm_task_trigger}<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal">NRFY_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrfy__pwm_1ga64c3b07435f3903a261779b6a4a7d9de" kindref="member">nrfy_pwm_task_trigger</ref>(NRF_PWM_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__pwm__hal_1ga11cb9ca8fbb773011a3ad6658914418e" kindref="member">nrf_pwm_task_t</ref><sp/>task)</highlight></codeline>
<codeline lineno="211"><highlight class="normal">{</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__pwm__hal_1ga80273886334d6d99c516aa13e9e6773a" kindref="member">nrf_pwm_task_trigger</ref>(p_reg,<sp/>task);</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/>nrf_barrier_w();</highlight></codeline>
<codeline lineno="214"><highlight class="normal">}</highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="216"><highlight class="comment">/**<sp/>@refhal{nrf_pwm_task_address_get}<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal">NRFY_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrfy__pwm_1ga1210658d3fb8e7b3fcad79d1abeeb581" kindref="member">nrfy_pwm_task_address_get</ref>(NRF_PWM_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__pwm__hal_1ga11cb9ca8fbb773011a3ad6658914418e" kindref="member">nrf_pwm_task_t</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>task)</highlight></codeline>
<codeline lineno="219"><highlight class="normal">{</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__nrf__pwm__hal_1gaa78ad952a4164f2acdc2aa22b6fd0618" kindref="member">nrf_pwm_task_address_get</ref>(p_reg,<sp/>task);</highlight></codeline>
<codeline lineno="221"><highlight class="normal">}</highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="223"><highlight class="comment">/**<sp/>@refhal{nrf_pwm_event_clear}<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal">NRFY_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrfy__pwm_1ga6148b56d089ec30cafa3a583d65630b3" kindref="member">nrfy_pwm_event_clear</ref>(NRF_PWM_Type<sp/>*<sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__pwm__hal_1ga4a8ceac653433e4ac8ee8682bdef45bf" kindref="member">nrf_pwm_event_t</ref><sp/>event)</highlight></codeline>
<codeline lineno="226"><highlight class="normal">{</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__pwm__hal_1gadd2be0c46a34bece88f176db55cfe9ee" kindref="member">nrf_pwm_event_clear</ref>(p_reg,<sp/>event);</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/>nrf_barrier_w();</highlight></codeline>
<codeline lineno="229"><highlight class="normal">}</highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="231"><highlight class="comment">/**<sp/>@refhal{nrf_pwm_event_check}<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal">NRFY_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrfy__pwm_1ga2b7145921d9c9e6289055ffa6bb76f24" kindref="member">nrfy_pwm_event_check</ref>(NRF_PWM_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__pwm__hal_1ga4a8ceac653433e4ac8ee8682bdef45bf" kindref="member">nrf_pwm_event_t</ref><sp/><sp/><sp/><sp/><sp/><sp/>event)</highlight></codeline>
<codeline lineno="234"><highlight class="normal">{</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/>nrf_barrier_r();</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ret<sp/>=<sp/><ref refid="group__nrf__pwm__hal_1ga7b6689ec738c01ef7e02d6923b8707a4" kindref="member">nrf_pwm_event_check</ref>(p_reg,<sp/>event);</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/>nrf_barrier_r();</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="239"><highlight class="normal">}</highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="241"><highlight class="comment">/**<sp/>@refhal{nrf_pwm_event_address_get}<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal">NRFY_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrfy__pwm_1ga60da3475cf0467b492afe55cdf947024" kindref="member">nrfy_pwm_event_address_get</ref>(NRF_PWM_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__pwm__hal_1ga4a8ceac653433e4ac8ee8682bdef45bf" kindref="member">nrf_pwm_event_t</ref><sp/><sp/><sp/><sp/><sp/><sp/>event)</highlight></codeline>
<codeline lineno="244"><highlight class="normal">{</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__nrf__pwm__hal_1ga3eba935312b4bf541151a30e0d408beb" kindref="member">nrf_pwm_event_address_get</ref>(p_reg,<sp/>event);</highlight></codeline>
<codeline lineno="246"><highlight class="normal">}</highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="248"><highlight class="comment">/**<sp/>@refhal{nrf_pwm_shorts_enable}<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal">NRFY_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrfy__pwm_1ga7ef18d3d011e4b9a343875fc495022a1" kindref="member">nrfy_pwm_shorts_enable</ref>(NRF_PWM_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/>mask)</highlight></codeline>
<codeline lineno="251"><highlight class="normal">{</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__pwm__hal_1gad37230defb6539bad9deeed03b4ec1ed" kindref="member">nrf_pwm_shorts_enable</ref>(p_reg,<sp/>mask);</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/>nrf_barrier_w();</highlight></codeline>
<codeline lineno="254"><highlight class="normal">}</highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="256"><highlight class="comment">/**<sp/>@refhal{nrf_pwm_shorts_disable}<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal">NRFY_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrfy__pwm_1ga142efbc33e623c0426c2dc8eb56ce70c" kindref="member">nrfy_pwm_shorts_disable</ref>(NRF_PWM_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/>mask)</highlight></codeline>
<codeline lineno="259"><highlight class="normal">{</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__pwm__hal_1ga52672c9d16d8b47bfccf573a959d1929" kindref="member">nrf_pwm_shorts_disable</ref>(p_reg,<sp/>mask);</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/>nrf_barrier_w();</highlight></codeline>
<codeline lineno="262"><highlight class="normal">}</highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="264"><highlight class="comment">/**<sp/>@refhal{nrf_pwm_shorts_set}<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal">NRFY_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrfy__pwm_1ga0c076f8ed8caf96dbb54e4919ecbdf15" kindref="member">nrfy_pwm_shorts_set</ref>(NRF_PWM_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/>mask)</highlight></codeline>
<codeline lineno="267"><highlight class="normal">{</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__pwm__hal_1ga486254506e79e5017ec076850ac3b275" kindref="member">nrf_pwm_shorts_set</ref>(p_reg,<sp/>mask);</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/>nrf_barrier_w();</highlight></codeline>
<codeline lineno="270"><highlight class="normal">}</highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="272"><highlight class="comment">/**<sp/>@refhal{nrf_pwm_int_enable}<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal">NRFY_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrfy__pwm_1gae8955a275264d986814048ca4baca2fe" kindref="member">nrfy_pwm_int_enable</ref>(NRF_PWM_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/>mask)</highlight></codeline>
<codeline lineno="275"><highlight class="normal">{</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__pwm__hal_1gad97a8c07dceaad191d77748b3311c25b" kindref="member">nrf_pwm_int_enable</ref>(p_reg,<sp/>mask);</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/>nrf_barrier_w();</highlight></codeline>
<codeline lineno="278"><highlight class="normal">}</highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="280"><highlight class="comment">/**<sp/>@refhal{nrf_pwm_int_disable}<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal">NRFY_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrfy__pwm_1ga43327dfb362166b2bbf955ea39b9f7dc" kindref="member">nrfy_pwm_int_disable</ref>(NRF_PWM_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/>mask)</highlight></codeline>
<codeline lineno="283"><highlight class="normal">{</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__pwm__hal_1ga502fca6db746ea1fb1d5c45573cc6c1b" kindref="member">nrf_pwm_int_disable</ref>(p_reg,<sp/>mask);</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/>nrf_barrier_w();</highlight></codeline>
<codeline lineno="286"><highlight class="normal">}</highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="288"><highlight class="comment">/**<sp/>@refhal{nrf_pwm_int_set}<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal">NRFY_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrfy__pwm_1ga631e89e949e8a518066efdd0981866f4" kindref="member">nrfy_pwm_int_set</ref>(NRF_PWM_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/>mask)</highlight></codeline>
<codeline lineno="291"><highlight class="normal">{</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__pwm__hal_1ga188dee0693d8704d6d8d77bf2e68831a" kindref="member">nrf_pwm_int_set</ref>(p_reg,<sp/>mask);</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/>nrf_barrier_w();</highlight></codeline>
<codeline lineno="294"><highlight class="normal">}</highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="296"><highlight class="comment">/**<sp/>@refhal{nrf_pwm_int_enable_check}<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal">NRFY_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrfy__pwm_1ga9b25905c43b5507198a781ad12a9d879" kindref="member">nrfy_pwm_int_enable_check</ref>(NRF_PWM_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>mask)</highlight></codeline>
<codeline lineno="298"><highlight class="normal">{</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/>nrf_barrier_rw();</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>ret<sp/>=<sp/><ref refid="group__nrf__pwm__hal_1gaec938406e805161ad153e2a95638a74c" kindref="member">nrf_pwm_int_enable_check</ref>(p_reg,<sp/>mask);</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/>nrf_barrier_r();</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="303"><highlight class="normal">}</highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(DPPI_PRESENT)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="306"><highlight class="comment">/**<sp/>@refhal{nrf_pwm_subscribe_set}<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal">NRFY_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrfy__pwm_1ga5a7b1a13616530ee16efa8165f4048b4" kindref="member">nrfy_pwm_subscribe_set</ref>(NRF_PWM_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__pwm__hal_1ga11cb9ca8fbb773011a3ad6658914418e" kindref="member">nrf_pwm_task_t</ref><sp/>task,</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>channel)</highlight></codeline>
<codeline lineno="310"><highlight class="normal">{</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__pwm__hal_1gad002575566c75b323e425cdf59c0a550" kindref="member">nrf_pwm_subscribe_set</ref>(p_reg,<sp/>task,<sp/>channel);</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/>nrf_barrier_w();</highlight></codeline>
<codeline lineno="313"><highlight class="normal">}</highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="315"><highlight class="comment">/**<sp/>@refhal{nrf_pwm_subscribe_clear}<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal">NRFY_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrfy__pwm_1gac9ff0747178e480ea0a45731f901ef07" kindref="member">nrfy_pwm_subscribe_clear</ref>(NRF_PWM_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__pwm__hal_1ga11cb9ca8fbb773011a3ad6658914418e" kindref="member">nrf_pwm_task_t</ref><sp/>task)</highlight></codeline>
<codeline lineno="318"><highlight class="normal">{</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__pwm__hal_1ga7622c00fccfd7653ef3ca5a2f43ca07f" kindref="member">nrf_pwm_subscribe_clear</ref>(p_reg,<sp/>task);</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/>nrf_barrier_w();</highlight></codeline>
<codeline lineno="321"><highlight class="normal">}</highlight></codeline>
<codeline lineno="322"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="323"><highlight class="comment">/**<sp/>@refhal{nrf_pwm_publish_set}<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal">NRFY_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrfy__pwm_1gaa01ca3f180c3c99521836f7aec911449" kindref="member">nrfy_pwm_publish_set</ref>(NRF_PWM_Type<sp/>*<sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__pwm__hal_1ga4a8ceac653433e4ac8ee8682bdef45bf" kindref="member">nrf_pwm_event_t</ref><sp/>event,</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>channel)</highlight></codeline>
<codeline lineno="327"><highlight class="normal">{</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__pwm__hal_1ga41edf2cfc651f859f465ac532cd4616a" kindref="member">nrf_pwm_publish_set</ref>(p_reg,<sp/>event,<sp/>channel);</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/>nrf_barrier_w();</highlight></codeline>
<codeline lineno="330"><highlight class="normal">}</highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="332"><highlight class="comment">/**<sp/>@refhal{nrf_pwm_publish_clear}<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal">NRFY_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrfy__pwm_1ga10e0f88a23ff222e08ed046ab9c432b1" kindref="member">nrfy_pwm_publish_clear</ref>(NRF_PWM_Type<sp/>*<sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__pwm__hal_1ga4a8ceac653433e4ac8ee8682bdef45bf" kindref="member">nrf_pwm_event_t</ref><sp/>event)</highlight></codeline>
<codeline lineno="335"><highlight class="normal">{</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__pwm__hal_1ga6cd95cd70efae593bd68fa84e93fc433" kindref="member">nrf_pwm_publish_clear</ref>(p_reg,<sp/>event);</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/>nrf_barrier_w();</highlight></codeline>
<codeline lineno="338"><highlight class="normal">}</highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="341"><highlight class="comment">/**<sp/>@refhal{nrf_pwm_enable}<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal">NRFY_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrfy__pwm_1gadf2651fcbd0680f93e142e890e2ae05f" kindref="member">nrfy_pwm_enable</ref>(NRF_PWM_Type<sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="343"><highlight class="normal">{</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__pwm__hal_1ga592cb178b637ab0b03bea8523e8ded82" kindref="member">nrf_pwm_enable</ref>(p_reg);</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/>nrf_barrier_w();</highlight></codeline>
<codeline lineno="346"><highlight class="normal">}</highlight></codeline>
<codeline lineno="347"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="348"><highlight class="comment">/**<sp/>@refhal{nrf_pwm_disable}<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal">NRFY_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrfy__pwm_1ga56b596aada64172432a013d7e74de793" kindref="member">nrfy_pwm_disable</ref>(NRF_PWM_Type<sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="350"><highlight class="normal">{</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__pwm__hal_1ga03d306651afccddaccc092b9da93789a" kindref="member">nrf_pwm_disable</ref>(p_reg);</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/>nrf_barrier_w();</highlight></codeline>
<codeline lineno="353"><highlight class="normal">}</highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="355"><highlight class="comment">/**<sp/>@refhal{nrf_pwm_enable_check}<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal">NRFY_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrfy__pwm_1ga8bf0222a0a36e491252883fb1863cbc7" kindref="member">nrfy_pwm_enable_check</ref>(NRF_PWM_Type<sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="357"><highlight class="normal">{</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/>nrf_barrier_rw();</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>enabled<sp/>=<sp/><ref refid="group__nrf__pwm__hal_1ga5895bf394e866a56f522c4bbdfb54996" kindref="member">nrf_pwm_enable_check</ref>(p_reg);</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/>nrf_barrier_r();</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>enabled;</highlight></codeline>
<codeline lineno="362"><highlight class="normal">}</highlight></codeline>
<codeline lineno="363"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="364"><highlight class="comment">/**<sp/>@refhal{nrf_pwm_pins_set}<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal">NRFY_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrfy__pwm_1gab783942d542622524fdfe946303a7eb3" kindref="member">nrfy_pwm_pins_set</ref>(NRF_PWM_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/>out_pins[<ref refid="group__nrf__pwm__hal_1ga9935002ab3ef7325efe73a6979e77990" kindref="member">NRF_PWM_CHANNEL_COUNT</ref>])</highlight></codeline>
<codeline lineno="367"><highlight class="normal">{</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__pwm__hal_1ga0bcd0f7311e790199cd14373fc823a9f" kindref="member">nrf_pwm_pins_set</ref>(p_reg,<sp/>out_pins);</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/>nrf_barrier_w();</highlight></codeline>
<codeline lineno="370"><highlight class="normal">}</highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="372"><highlight class="comment">/**<sp/>@refhal{nrf_pwm_pin_get}<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal">NRFY_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrfy__pwm_1ga165b416fc52e91f8242dcf4f0a6d6ab5" kindref="member">nrfy_pwm_pin_get</ref>(NRF_PWM_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,<sp/>uint8_t<sp/>channel)</highlight></codeline>
<codeline lineno="374"><highlight class="normal">{</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/>nrf_barrier_rw();</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>ret<sp/>=<sp/><ref refid="group__nrf__pwm__hal_1gaafe7e1c261d441016e999e52ec8282b4" kindref="member">nrf_pwm_pin_get</ref>(p_reg,<sp/>channel);</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/>nrf_barrier_r();</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="379"><highlight class="normal">}</highlight></codeline>
<codeline lineno="380"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="381"><highlight class="comment">/**<sp/>@refhal{nrf_pwm_configure}<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal">NRFY_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrfy__pwm_1ga4907db21dcb4bcdc52b690dbca6a6add" kindref="member">nrfy_pwm_configure</ref>(NRF_PWM_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__pwm__hal_1ga8479da20e14394fb2388b1be3b879670" kindref="member">nrf_pwm_clk_t</ref><sp/><sp/>base_clock,</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__pwm__hal_1ga1f29b190ff13c52895d249e07ebe92cb" kindref="member">nrf_pwm_mode_t</ref><sp/>mode,</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint16_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/>top_value)</highlight></codeline>
<codeline lineno="386"><highlight class="normal">{</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__pwm__hal_1ga58bcf18a7b025c1416d7ea3d6e35038b" kindref="member">nrf_pwm_configure</ref>(p_reg,<sp/>base_clock,<sp/>mode,<sp/>top_value);</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/>nrf_barrier_w();</highlight></codeline>
<codeline lineno="389"><highlight class="normal">}</highlight></codeline>
<codeline lineno="390"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="391"><highlight class="comment">/**<sp/>@refhal{nrf_pwm_sequence_set}<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal">NRFY_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrfy__pwm_1ga4ad1c7489b99d8799e373cc1f5fa1597" kindref="member">nrfy_pwm_sequence_set</ref>(NRF_PWM_Type<sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seq_id,</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structnrf__pwm__sequence__t" kindref="compound">nrf_pwm_sequence_t</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_seq)</highlight></codeline>
<codeline lineno="395"><highlight class="normal">{</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/>NRFY_CACHE_WB(p_seq-&gt;<ref refid="structnrf__pwm__sequence__t_1ad3244198df7ea3a206740dacd398db1e" kindref="member">values</ref>.<ref refid="unionnrf__pwm__values__t_1ad74b132e940f0833c3f51dd1a575bf65" kindref="member">p_raw</ref>,<sp/>p_seq-&gt;<ref refid="structnrf__pwm__sequence__t_1a10eb34aa01124d2e6924607cae877fe0" kindref="member">length</ref>);</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__pwm__hal_1ga993b47eb4fc9b6350ced9043945a8206" kindref="member">nrf_pwm_sequence_set</ref>(p_reg,<sp/>seq_id,<sp/>p_seq);</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/>nrf_barrier_w();</highlight></codeline>
<codeline lineno="399"><highlight class="normal">}</highlight></codeline>
<codeline lineno="400"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="401"><highlight class="comment">/**<sp/>@refhal{nrf_pwm_decoder_set}<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal">NRFY_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrfy__pwm_1gad97258c8814d251314529a2ae5171f18" kindref="member">nrfy_pwm_decoder_set</ref>(NRF_PWM_Type<sp/>*<sp/><sp/><sp/><sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__pwm__hal_1ga453888e5feb46774da27499ca1eeafd2" kindref="member">nrf_pwm_dec_load_t</ref><sp/>dec_load,</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__pwm__hal_1gae25a7e03c383934d33cda8a049b7dde4" kindref="member">nrf_pwm_dec_step_t</ref><sp/>dec_step)</highlight></codeline>
<codeline lineno="405"><highlight class="normal">{</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__pwm__hal_1ga6a3c94d7139f17dd0f43ef4f16abb5cd" kindref="member">nrf_pwm_decoder_set</ref>(p_reg,<sp/>dec_load,<sp/>dec_step);</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/>nrf_barrier_w();</highlight></codeline>
<codeline lineno="408"><highlight class="normal">}</highlight></codeline>
<codeline lineno="409"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="410"><highlight class="comment">/**<sp/>@refhal{nrf_pwm_loop_set}<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="411"><highlight class="normal">NRFY_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrfy__pwm_1gaaf31f4eb5297d2cfd910fd4d7b0aa03c" kindref="member">nrfy_pwm_loop_set</ref>(NRF_PWM_Type<sp/>*<sp/>p_reg,<sp/>uint16_t<sp/>loop_count)</highlight></codeline>
<codeline lineno="412"><highlight class="normal">{</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__pwm__hal_1gaa7c79a9e33546f5dff5ef564052cbe1c" kindref="member">nrf_pwm_loop_set</ref>(p_reg,<sp/>loop_count);</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/>nrf_barrier_w();</highlight></codeline>
<codeline lineno="415"><highlight class="normal">}</highlight></codeline>
<codeline lineno="416"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="417"><highlight class="comment">/**<sp/>@refhal{nrf_pwm_seqstart_task_get}<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="normal">NRFY_STATIC_INLINE<sp/><ref refid="group__nrf__pwm__hal_1ga11cb9ca8fbb773011a3ad6658914418e" kindref="member">nrf_pwm_task_t</ref><sp/><ref refid="group__nrfy__pwm_1gaf117892bba2a442fbcf98d8d9791904f" kindref="member">nrfy_pwm_seqstart_task_get</ref>(uint8_t<sp/>seq_id)</highlight></codeline>
<codeline lineno="419"><highlight class="normal">{</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__nrf__pwm__hal_1gaa0d334d0587cb0f3213e097a67475d5e" kindref="member">nrf_pwm_seqstart_task_get</ref>(seq_id);</highlight></codeline>
<codeline lineno="421"><highlight class="normal">}</highlight></codeline>
<codeline lineno="422"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="423"><highlight class="comment">/**<sp/>@refhal{nrf_pwm_seqend_event_get}<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal">NRFY_STATIC_INLINE<sp/><ref refid="group__nrf__pwm__hal_1ga4a8ceac653433e4ac8ee8682bdef45bf" kindref="member">nrf_pwm_event_t</ref><sp/><ref refid="group__nrfy__pwm_1ga008e8b41df6de832c2c8a5e84f69b6dd" kindref="member">nrfy_pwm_seqend_event_get</ref>(uint8_t<sp/>seq_id)</highlight></codeline>
<codeline lineno="425"><highlight class="normal">{</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__nrf__pwm__hal_1ga9e0af905e8f4605795455630b66ea833" kindref="member">nrf_pwm_seqend_event_get</ref>(seq_id);</highlight></codeline>
<codeline lineno="427"><highlight class="normal">}</highlight></codeline>
<codeline lineno="428"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="429"><highlight class="comment">/**<sp/>@}<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal"></highlight></codeline>
<codeline lineno="431"><highlight class="normal">NRFY_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>__nrfy_internal_pwm_event_handle(NRF_PWM_Type<sp/>*<sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mask,</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__pwm__hal_1ga4a8ceac653433e4ac8ee8682bdef45bf" kindref="member">nrf_pwm_event_t</ref><sp/>event,</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>p_evt_mask)</highlight></codeline>
<codeline lineno="435"><highlight class="normal">{</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((mask<sp/>&amp;<sp/><ref refid="group__nrfy__common_1ga0c6f93867e58ecfb266f70393b408c03" kindref="member">NRFY_EVENT_TO_INT_BITMASK</ref>(event))<sp/>&amp;&amp;<sp/><ref refid="group__nrf__pwm__hal_1ga7b6689ec738c01ef7e02d6923b8707a4" kindref="member">nrf_pwm_event_check</ref>(p_reg,<sp/>event))</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nrf_barrier_r();</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__pwm__hal_1gadd2be0c46a34bece88f176db55cfe9ee" kindref="member">nrf_pwm_event_clear</ref>(p_reg,<sp/>event);</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p_evt_mask)</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*p_evt_mask<sp/>|=<sp/><ref refid="group__nrfy__common_1ga0c6f93867e58ecfb266f70393b408c03" kindref="member">NRFY_EVENT_TO_INT_BITMASK</ref>(event);</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="447"><highlight class="normal">}</highlight></codeline>
<codeline lineno="448"><highlight class="normal"></highlight></codeline>
<codeline lineno="449"><highlight class="normal">NRFY_STATIC_INLINE<sp/>uint32_t<sp/>__nrfy_internal_pwm_events_process(NRF_PWM_Type<sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>mask)</highlight></codeline>
<codeline lineno="450"><highlight class="normal">{</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>evt_mask<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="452"><highlight class="normal"></highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/>(void)__nrfy_internal_pwm_event_handle(p_reg,<sp/>mask,<sp/><ref refid="group__nrf__pwm__hal_1gga4a8ceac653433e4ac8ee8682bdef45bfa60bc770e86e8c3e1987b7828c5527e3b" kindref="member">NRF_PWM_EVENT_SEQEND0</ref>,<sp/>&amp;evt_mask);</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/>(void)__nrfy_internal_pwm_event_handle(p_reg,<sp/>mask,<sp/><ref refid="group__nrf__pwm__hal_1gga4a8ceac653433e4ac8ee8682bdef45bfa250b4184e07ce53864c00aa17f142c3e" kindref="member">NRF_PWM_EVENT_SEQEND1</ref>,<sp/>&amp;evt_mask);</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/>(void)__nrfy_internal_pwm_event_handle(p_reg,<sp/>mask,<sp/><ref refid="group__nrf__pwm__hal_1gga4a8ceac653433e4ac8ee8682bdef45bfa904f95da3dc44a8e147623f4ae32a268" kindref="member">NRF_PWM_EVENT_LOOPSDONE</ref>,<sp/>&amp;evt_mask);</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/>(void)__nrfy_internal_pwm_event_handle(p_reg,<sp/>mask,<sp/><ref refid="group__nrf__pwm__hal_1gga4a8ceac653433e4ac8ee8682bdef45bfadf20e481b3105e4ef6e6f80423c8192b" kindref="member">NRF_PWM_EVENT_STOPPED</ref>,<sp/>&amp;evt_mask);</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/>(void)__nrfy_internal_pwm_event_handle(p_reg,<sp/>mask,<sp/><ref refid="group__nrf__pwm__hal_1gga4a8ceac653433e4ac8ee8682bdef45bfaa5bb09f0669ce66b58053dd382a3bcbf" kindref="member">NRF_PWM_EVENT_SEQSTARTED0</ref>,<sp/>&amp;evt_mask);</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/>(void)__nrfy_internal_pwm_event_handle(p_reg,<sp/>mask,<sp/><ref refid="group__nrf__pwm__hal_1gga4a8ceac653433e4ac8ee8682bdef45bfa79aea4fc8f7e536c180a1b5b4c9a2596" kindref="member">NRF_PWM_EVENT_SEQSTARTED1</ref>,<sp/>&amp;evt_mask);</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/>(void)__nrfy_internal_pwm_event_handle(p_reg,<sp/>mask,<sp/><ref refid="group__nrf__pwm__hal_1gga4a8ceac653433e4ac8ee8682bdef45bfa2340304c4d850deee64456310c272d13" kindref="member">NRF_PWM_EVENT_PWMPERIODEND</ref>,<sp/>&amp;evt_mask);</highlight></codeline>
<codeline lineno="460"><highlight class="normal"></highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>evt_mask;</highlight></codeline>
<codeline lineno="462"><highlight class="normal">}</highlight></codeline>
<codeline lineno="463"><highlight class="normal"></highlight></codeline>
<codeline lineno="464"><highlight class="normal">NRFY_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>__nrfy_internal_pwm_event_enabled_clear(NRF_PWM_Type<sp/>*<sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mask,</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__pwm__hal_1ga4a8ceac653433e4ac8ee8682bdef45bf" kindref="member">nrf_pwm_event_t</ref><sp/>event)</highlight></codeline>
<codeline lineno="467"><highlight class="normal">{</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mask<sp/>&amp;<sp/><ref refid="group__nrfy__common_1ga0c6f93867e58ecfb266f70393b408c03" kindref="member">NRFY_EVENT_TO_INT_BITMASK</ref>(event))</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__pwm__hal_1gadd2be0c46a34bece88f176db55cfe9ee" kindref="member">nrf_pwm_event_clear</ref>(p_reg,<sp/>event);</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="472"><highlight class="normal">}</highlight></codeline>
<codeline lineno="473"><highlight class="normal"></highlight></codeline>
<codeline lineno="474"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="475"><highlight class="normal">}</highlight></codeline>
<codeline lineno="476"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="477"><highlight class="normal"></highlight></codeline>
<codeline lineno="478"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRFY_PWM_H__</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="haly/nrfy_pwm.h"/>
  </compounddef>
</doxygen>
