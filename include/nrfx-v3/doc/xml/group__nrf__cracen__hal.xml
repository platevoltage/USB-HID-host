<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="group__nrf__cracen__hal" kind="group">
    <compoundname>nrf_cracen_hal</compoundname>
    <title>CRACEN HAL</title>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="group__nrf__cracen__hal_1ga1a23a89a94c87af91594edb7189d9f5c" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_cracen_event_t</name>
        <enumvalue id="group__nrf__cracen__hal_1gga1a23a89a94c87af91594edb7189d9f5ca6737817a05cd6c93b15ac45eb7d0d55c" prot="public">
          <name>NRF_CRACEN_EVENT_CRYPTOMASTER</name>
          <initializer>= offsetof(NRF_CRACEN_Type, EVENTS_CRYPTOMASTER)</initializer>
          <briefdescription>
<para>Interrupt triggered at Cryptomaster. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__cracen__hal_1gga1a23a89a94c87af91594edb7189d9f5ca80bc555238a10c4a1576eb7577c9d458" prot="public">
          <name>NRF_CRACEN_EVENT_RNG</name>
          <initializer>= offsetof(NRF_CRACEN_Type, EVENTS_RNG)</initializer>
          <briefdescription>
<para>Interrupt triggered at RNG. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__cracen__hal_1gga1a23a89a94c87af91594edb7189d9f5cafc165488b2ee7f20ead1ce54e718916d" prot="public">
          <name>NRF_CRACEN_EVENT_PKE_IKG</name>
          <initializer>= offsetof(NRF_CRACEN_Type, EVENTS_PKEIKG)</initializer>
          <briefdescription>
<para>Interrupt triggered at PKE or IKG. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>CRACEN events. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_cracen.h" line="54" column="1" bodyfile="hal/nrf_cracen.h" bodystart="55" bodyend="59"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__cracen__hal_1ga94eab53a07c2559a35eb955ae3fdcb39" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_cracen_int_mask_t</name>
        <enumvalue id="group__nrf__cracen__hal_1gga94eab53a07c2559a35eb955ae3fdcb39acf8cbba45e6fdb53192226752981752d" prot="public">
          <name>NRF_CRACEN_INT_CRYPTOMASTER_MASK</name>
          <initializer>= CRACEN_INTENSET_CRYPTOMASTER_Msk</initializer>
          <briefdescription>
<para>Interrupt on CRYPTOMASTER event. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__cracen__hal_1gga94eab53a07c2559a35eb955ae3fdcb39a88c27fca20aa98defb3c54460d82ddd8" prot="public">
          <name>NRF_CRACEN_INT_RNG_MASK</name>
          <initializer>= CRACEN_INTENSET_RNG_Msk</initializer>
          <briefdescription>
<para>Interrupt on RNG event. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__cracen__hal_1gga94eab53a07c2559a35eb955ae3fdcb39a0d0a9d433706280a5134df053ec210c5" prot="public">
          <name>NRF_CRACEN_INT_PKE_IKG_MASK</name>
          <initializer>= CRACEN_INTENSET_PKEIKG_Msk</initializer>
          <briefdescription>
<para>Interrupt on PKEIKG event. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>CRACEN interrupts. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_cracen.h" line="62" column="1" bodyfile="hal/nrf_cracen.h" bodystart="63" bodyend="67"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__cracen__hal_1gaa0b8a2f7908d67bcfc3186e13f312681" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_cracen_module_mask_t</name>
        <enumvalue id="group__nrf__cracen__hal_1ggaa0b8a2f7908d67bcfc3186e13f312681a7a17a29bca7cf0c41cb9f3e3f89d9008" prot="public">
          <name>NRF_CRACEN_MODULE_CRYPTOMASTER_MASK</name>
          <initializer>= CRACEN_ENABLE_CRYPTOMASTER_Msk</initializer>
          <briefdescription>
<para>Cryptomaster module. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__cracen__hal_1ggaa0b8a2f7908d67bcfc3186e13f312681ae56b26483d8789f8b46707f888acc7c1" prot="public">
          <name>NRF_CRACEN_MODULE_RNG_MASK</name>
          <initializer>= CRACEN_ENABLE_RNG_Msk</initializer>
          <briefdescription>
<para>RNG module. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__cracen__hal_1ggaa0b8a2f7908d67bcfc3186e13f312681adcf5cf31f1936a2ed68f7644f87bb64e" prot="public">
          <name>NRF_CRACEN_MODULE_PKE_IKG_MASK</name>
          <initializer>= CRACEN_ENABLE_PKEIKG_Msk</initializer>
          <briefdescription>
<para>PKE and IKG module. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>CRACEN modules mask. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_cracen.h" line="70" column="1" bodyfile="hal/nrf_cracen.h" bodystart="71" bodyend="75"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__nrf__cracen__hal_1gae09401732c51e6016e64b34b28f1174b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_cracen_event_address_get</definition>
        <argsstring>(NRF_CRACEN_Type const *p_reg, nrf_cracen_event_t event)</argsstring>
        <name>nrf_cracen_event_address_get</name>
        <param>
          <type>NRF_CRACEN_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__cracen__hal_1ga1a23a89a94c87af91594edb7189d9f5c" kindref="member">nrf_cracen_event_t</ref></type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>Function for getting the address of the specified CRACEN event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>CRACEN event.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Address of the specified event register. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_cracen.h" line="192" column="28" bodyfile="hal/nrf_cracen.h" bodystart="192" bodyend="196" declfile="hal/nrf_cracen.h" declline="86" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__cracen__hal_1gaafd73d307aeb0fea3acb584bbab23511" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_cracen_event_clear</definition>
        <argsstring>(NRF_CRACEN_Type *p_reg, nrf_cracen_event_t event)</argsstring>
        <name>nrf_cracen_event_clear</name>
        <param>
          <type>NRF_CRACEN_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__cracen__hal_1ga1a23a89a94c87af91594edb7189d9f5c" kindref="member">nrf_cracen_event_t</ref></type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>Function for clearing the specified CRACEN event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>CRACEN event to be cleared. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_cracen.h" line="198" column="24" bodyfile="hal/nrf_cracen.h" bodystart="198" bodyend="203" declfile="hal/nrf_cracen.h" declline="95" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__cracen__hal_1gaa427d1ff8ce94ba9efb1b4b422480b17" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE bool</type>
        <definition>NRF_STATIC_INLINE bool nrf_cracen_event_check</definition>
        <argsstring>(NRF_CRACEN_Type const *p_reg, nrf_cracen_event_t event)</argsstring>
        <name>nrf_cracen_event_check</name>
        <param>
          <type>NRF_CRACEN_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__cracen__hal_1ga1a23a89a94c87af91594edb7189d9f5c" kindref="member">nrf_cracen_event_t</ref></type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>Function for checking the state of the specified CRACEN event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>CRACEN event to be checked.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>The event has been generated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>The event has not been generated. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_cracen.h" line="205" column="24" bodyfile="hal/nrf_cracen.h" bodystart="205" bodyend="209" declfile="hal/nrf_cracen.h" declline="107" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__cracen__hal_1ga79665857300ca9a838236e5864ca8368" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_cracen_int_enable</definition>
        <argsstring>(NRF_CRACEN_Type *p_reg, uint32_t mask)</argsstring>
        <name>nrf_cracen_int_enable</name>
        <param>
          <type>NRF_CRACEN_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Function for enabling the specified interrupts. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of interrupts to be enabled. Use <ref refid="group__nrf__cracen__hal_1ga94eab53a07c2559a35eb955ae3fdcb39" kindref="member">nrf_cracen_int_mask_t</ref> values for bit masking. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_cracen.h" line="211" column="24" bodyfile="hal/nrf_cracen.h" bodystart="211" bodyend="214" declfile="hal/nrf_cracen.h" declline="117" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__cracen__hal_1ga05a9bfa8da8725288b8649f271609506" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_cracen_int_enable_check</definition>
        <argsstring>(NRF_CRACEN_Type const *p_reg, uint32_t mask)</argsstring>
        <name>nrf_cracen_int_enable_check</name>
        <param>
          <type>NRF_CRACEN_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Function for checking if the specified interrupts are enabled. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of interrupts to be checked. Use <ref refid="group__nrf__cracen__hal_1ga94eab53a07c2559a35eb955ae3fdcb39" kindref="member">nrf_cracen_int_mask_t</ref> values for bit masking.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Mask of enabled interrupts. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_cracen.h" line="216" column="28" bodyfile="hal/nrf_cracen.h" bodystart="216" bodyend="219" declfile="hal/nrf_cracen.h" declline="128" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__cracen__hal_1ga00e3da911b9f408a48f9bc44a09cf0e1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_cracen_int_disable</definition>
        <argsstring>(NRF_CRACEN_Type *p_reg, uint32_t mask)</argsstring>
        <name>nrf_cracen_int_disable</name>
        <param>
          <type>NRF_CRACEN_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Function for disabling the specified interrupts. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of interrupts to be disabled. Use <ref refid="group__nrf__cracen__hal_1ga94eab53a07c2559a35eb955ae3fdcb39" kindref="member">nrf_cracen_int_mask_t</ref> values for bit masking. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_cracen.h" line="221" column="24" bodyfile="hal/nrf_cracen.h" bodystart="221" bodyend="224" declfile="hal/nrf_cracen.h" declline="137" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__cracen__hal_1gae6840ca5e1f4ff3effe2dab2bbf7aa12" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_cracen_module_enable</definition>
        <argsstring>(NRF_CRACEN_Type *p_reg, uint32_t modules)</argsstring>
        <name>nrf_cracen_module_enable</name>
        <param>
          <type>NRF_CRACEN_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>modules</declname>
        </param>
        <briefdescription>
<para>Function for enabling CRACEN modules. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">modules</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of modules to be enabled. See <ref refid="group__nrf__cracen__hal_1gaa0b8a2f7908d67bcfc3186e13f312681" kindref="member">nrf_cracen_module_mask_t</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_cracen.h" line="226" column="24" bodyfile="hal/nrf_cracen.h" bodystart="226" bodyend="229" declfile="hal/nrf_cracen.h" declline="145" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__cracen__hal_1gaa8f5c7b2ab92fb168b048874378a3699" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_cracen_module_disable</definition>
        <argsstring>(NRF_CRACEN_Type *p_reg, uint32_t modules)</argsstring>
        <name>nrf_cracen_module_disable</name>
        <param>
          <type>NRF_CRACEN_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>modules</declname>
        </param>
        <briefdescription>
<para>Function for disabling CRACEN modules. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">modules</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of modules to be disabled. See <ref refid="group__nrf__cracen__hal_1gaa0b8a2f7908d67bcfc3186e13f312681" kindref="member">nrf_cracen_module_mask_t</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_cracen.h" line="231" column="24" bodyfile="hal/nrf_cracen.h" bodystart="231" bodyend="234" declfile="hal/nrf_cracen.h" declline="153" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__cracen__hal_1ga332cd20e42efe9912eb140062848e42d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_cracen_module_get</definition>
        <argsstring>(NRF_CRACEN_Type const *p_reg)</argsstring>
        <name>nrf_cracen_module_get</name>
        <param>
          <type>NRF_CRACEN_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting enabled CRACEN modules. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Mask of enabled modules. See <ref refid="group__nrf__cracen__hal_1gaa0b8a2f7908d67bcfc3186e13f312681" kindref="member">nrf_cracen_module_mask_t</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_cracen.h" line="236" column="28" bodyfile="hal/nrf_cracen.h" bodystart="236" bodyend="239" declfile="hal/nrf_cracen.h" declline="162" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__cracen__hal_1ga66dc75741805e44d3bf228e7e644acc0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_cracen_seedram_lock_enable_set</definition>
        <argsstring>(NRF_CRACEN_Type *p_reg, bool enable)</argsstring>
        <name>nrf_cracen_seedram_lock_enable_set</name>
        <param>
          <type>NRF_CRACEN_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>enable</declname>
        </param>
        <briefdescription>
<para>Function for enabling or disabling lock on access to the RAM used for the seed. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">enable</parametername>
</parameternamelist>
<parameterdescription>
<para>True if lock is to be enabled, false otherwise. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_cracen.h" line="241" column="24" bodyfile="hal/nrf_cracen.h" bodystart="241" bodyend="253" declfile="hal/nrf_cracen.h" declline="170" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__cracen__hal_1ga18d32d55bd8292f123ec47d62e9c64a0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE bool</type>
        <definition>NRF_STATIC_INLINE bool nrf_cracen_seedram_lock_check</definition>
        <argsstring>(NRF_CRACEN_Type const *p_reg)</argsstring>
        <name>nrf_cracen_seedram_lock_check</name>
        <param>
          <type>NRF_CRACEN_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for checking if access to the RAM used for the seed is locked. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>Access to the RAM used for the seed is locked. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>Access to the RAM used for the seed is unlocked. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_cracen.h" line="255" column="24" bodyfile="hal/nrf_cracen.h" bodystart="255" bodyend="266" declfile="hal/nrf_cracen.h" declline="180" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__cracen__hal_1ga3d106e3e54f8be9b1f467ca8ea1448eb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_cracen_seed_set</definition>
        <argsstring>(NRF_CRACEN_Type *p_reg, uint8_t idx, uint32_t value)</argsstring>
        <name>nrf_cracen_seed_set</name>
        <param>
          <type>NRF_CRACEN_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>idx</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Function for setting specified seed word for private key generation. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">idx</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of the seed word. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>Seed value to be set. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_cracen.h" line="268" column="24" bodyfile="hal/nrf_cracen.h" bodystart="268" bodyend="272" declfile="hal/nrf_cracen.h" declline="189" declcolumn="24"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__nrf__cracen__hal_1gafc5d57255898ccef85cc008e22367b62" prot="public" static="no">
        <name>NRF_CRACEN_SEED_COUNT</name>
        <initializer>CRACEN_SEED_MaxCount</initializer>
        <briefdescription>
<para>Number of seed words for private key generation. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_cracen.h" line="51" column="9" bodyfile="hal/nrf_cracen.h" bodystart="51" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Hardware access layer for managing the Crypto Accelerator Engine (CRACEN) peripheral. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
