<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="group__nrf__radio__hal" kind="group">
    <compoundname>nrf_radio_hal</compoundname>
    <title>RADIO HAL</title>
    <innerclass refid="structnrf__radio__packet__conf__t" prot="public">nrf_radio_packet_conf_t</innerclass>
    <innerclass refid="structnrf__radio__cteinline__conf__t" prot="public">nrf_radio_cteinline_conf_t</innerclass>
    <innerclass refid="structnrf__radio__dfectrl__conf__t" prot="public">nrf_radio_dfectrl_conf_t</innerclass>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="group__nrf__radio__hal_1ga607fff2f027c323b3dc8af40ab489a2f" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_radio_task_t</name>
        <enumvalue id="group__nrf__radio__hal_1gga607fff2f027c323b3dc8af40ab489a2fae1451e5aec10c18695c15527d804cf09" prot="public">
          <name>NRF_RADIO_TASK_TXEN</name>
          <initializer>= offsetof(NRF_RADIO_Type, TASKS_TXEN)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Enable RADIO in TX mode. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1gga607fff2f027c323b3dc8af40ab489a2fae05fb7983f797292c0790e1607188ad1" prot="public">
          <name>NRF_RADIO_TASK_RXEN</name>
          <initializer>= offsetof(NRF_RADIO_Type, TASKS_RXEN)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Enable RADIO in RX mode. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1gga607fff2f027c323b3dc8af40ab489a2fa876b6cd1a9bf263fa29e2d47540515ec" prot="public">
          <name>NRF_RADIO_TASK_START</name>
          <initializer>= offsetof(NRF_RADIO_Type, TASKS_START)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Start RADIO. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1gga607fff2f027c323b3dc8af40ab489a2fa2ebd7963e40a7de73029e20488837c23" prot="public">
          <name>NRF_RADIO_TASK_STOP</name>
          <initializer>= offsetof(NRF_RADIO_Type, TASKS_STOP)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Stop RADIO. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1gga607fff2f027c323b3dc8af40ab489a2fac601d79da621af94ce9335700b410b63" prot="public">
          <name>NRF_RADIO_TASK_DISABLE</name>
          <initializer>= offsetof(NRF_RADIO_Type, TASKS_DISABLE)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Disable RADIO. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1gga607fff2f027c323b3dc8af40ab489a2fa37040a6ad4b91be84f3f5ffe0b7ea835" prot="public">
          <name>NRF_RADIO_TASK_RSSISTART</name>
          <initializer>= offsetof(NRF_RADIO_Type, TASKS_RSSISTART)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Start the RSSI and take one single sample of the receive signal strength. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1gga607fff2f027c323b3dc8af40ab489a2fa42942760825d40b3ba93b2270cef5bc3" prot="public">
          <name>NRF_RADIO_TASK_RSSISTOP</name>
          <initializer>= offsetof(NRF_RADIO_Type, TASKS_RSSISTOP)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Stop the RSSI measurement. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1gga607fff2f027c323b3dc8af40ab489a2fab2b2b976fc38d23a67fb6724947eecef" prot="public">
          <name>NRF_RADIO_TASK_BCSTART</name>
          <initializer>= offsetof(NRF_RADIO_Type, TASKS_BCSTART)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Start the bit counter. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1gga607fff2f027c323b3dc8af40ab489a2facacdd2fd6570c3c8dcb856d2156ee8be" prot="public">
          <name>NRF_RADIO_TASK_BCSTOP</name>
          <initializer>= offsetof(NRF_RADIO_Type, TASKS_BCSTOP)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Stop the bit counter. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1gga607fff2f027c323b3dc8af40ab489a2fad47e9b2b986eb3f3db64d6bc9740508c" prot="public">
          <name>NRF_RADIO_TASK_EDSTART</name>
          <initializer>= offsetof(NRF_RADIO_Type, TASKS_EDSTART)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Start the Energy Detect measurement used in IEEE 802.15.4 mode. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1gga607fff2f027c323b3dc8af40ab489a2fa89a7e51344929d6d08c1aba19360e285" prot="public">
          <name>NRF_RADIO_TASK_EDSTOP</name>
          <initializer>= offsetof(NRF_RADIO_Type, TASKS_EDSTOP)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Stop the Energy Detect measurement. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1gga607fff2f027c323b3dc8af40ab489a2fa83d8cc8e18b2bf558c0e1ec1511f7775" prot="public">
          <name>NRF_RADIO_TASK_CCASTART</name>
          <initializer>= offsetof(NRF_RADIO_Type, TASKS_CCASTART)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Start the Clear Channel Assessment used in IEEE 802.15.4 mode. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1gga607fff2f027c323b3dc8af40ab489a2fac449d58be252ec127432cda741033d98" prot="public">
          <name>NRF_RADIO_TASK_CCASTOP</name>
          <initializer>= offsetof(NRF_RADIO_Type, TASKS_CCASTOP)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Stop the Clear Channel Assessment. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>RADIO tasks. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_radio.h" line="56" column="1" bodyfile="hal/nrf_radio.h" bodystart="57" bodyend="83"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__radio__hal_1ga7c4b15ec33a0704a9caa2fa0b36e98bb" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_radio_event_t</name>
        <enumvalue id="group__nrf__radio__hal_1gga7c4b15ec33a0704a9caa2fa0b36e98bbaa0e8be0b24ad0fb03a191328155a02c5" prot="public">
          <name>NRF_RADIO_EVENT_READY</name>
          <initializer>= offsetof(NRF_RADIO_Type, EVENTS_READY)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Radio has ramped up and is ready to be started. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1gga7c4b15ec33a0704a9caa2fa0b36e98bba748bb9eb7838787e0c594eb554cd5204" prot="public">
          <name>NRF_RADIO_EVENT_ADDRESS</name>
          <initializer>= offsetof(NRF_RADIO_Type, EVENTS_ADDRESS)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Address sent or received. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1gga7c4b15ec33a0704a9caa2fa0b36e98bbaea3dad72e62ba032e07938d73f7c760a" prot="public">
          <name>NRF_RADIO_EVENT_PAYLOAD</name>
          <initializer>= offsetof(NRF_RADIO_Type, EVENTS_PAYLOAD)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Packet payload sent or received. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1gga7c4b15ec33a0704a9caa2fa0b36e98bba60e98fda9706e505e03a17c7db1bd431" prot="public">
          <name>NRF_RADIO_EVENT_END</name>
          <initializer>= offsetof(NRF_RADIO_Type, EVENTS_END)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Packet transmitted or received. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1gga7c4b15ec33a0704a9caa2fa0b36e98bbad8952f65789574e7d1db61fc2d6ae1fd" prot="public">
          <name>NRF_RADIO_EVENT_DISABLED</name>
          <initializer>= offsetof(NRF_RADIO_Type, EVENTS_DISABLED)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>RADIO has been disabled. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1gga7c4b15ec33a0704a9caa2fa0b36e98bbaaee811ff191efb80a366c616ca82edcd" prot="public">
          <name>NRF_RADIO_EVENT_DEVMATCH</name>
          <initializer>= offsetof(NRF_RADIO_Type, EVENTS_DEVMATCH)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>A device address match occurred on the last received packet. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1gga7c4b15ec33a0704a9caa2fa0b36e98bbac1dbfb30de77841be101c4e3b0ed6a07" prot="public">
          <name>NRF_RADIO_EVENT_DEVMISS</name>
          <initializer>= offsetof(NRF_RADIO_Type, EVENTS_DEVMISS)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>No device address match occurred on the last received packet. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1gga7c4b15ec33a0704a9caa2fa0b36e98bba6af0b753ba1664d9e99de0af38c18344" prot="public">
          <name>NRF_RADIO_EVENT_RSSIEND</name>
          <initializer>= offsetof(NRF_RADIO_Type, EVENTS_RSSIEND)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Sampling of receive signal strength complete. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1gga7c4b15ec33a0704a9caa2fa0b36e98bbafcf0b264704a55523cd0fd4e573e9a30" prot="public">
          <name>NRF_RADIO_EVENT_BCMATCH</name>
          <initializer>= offsetof(NRF_RADIO_Type, EVENTS_BCMATCH)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Bit counter reached bit count value. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1gga7c4b15ec33a0704a9caa2fa0b36e98bbab41abc6a4884ac9f970ff3166464e028" prot="public">
          <name>NRF_RADIO_EVENT_CRCOK</name>
          <initializer>= offsetof(NRF_RADIO_Type, EVENTS_CRCOK)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Packet received with correct CRC. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1gga7c4b15ec33a0704a9caa2fa0b36e98bbafb9edff42f9a2113bafc7462c463bce9" prot="public">
          <name>NRF_RADIO_EVENT_CRCERROR</name>
          <initializer>= offsetof(NRF_RADIO_Type, EVENTS_CRCERROR)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Packet received with incorrect CRC. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1gga7c4b15ec33a0704a9caa2fa0b36e98bbae965faf63ad8a97c2721bb17206eb7ae" prot="public">
          <name>NRF_RADIO_EVENT_FRAMESTART</name>
          <initializer>= offsetof(NRF_RADIO_Type, EVENTS_FRAMESTART)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>IEEE 802.15.4 length field received. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1gga7c4b15ec33a0704a9caa2fa0b36e98bbaa85d99f7da6c2fcc2d54ac1e8a20e307" prot="public">
          <name>NRF_RADIO_EVENT_EDEND</name>
          <initializer>= offsetof(NRF_RADIO_Type, EVENTS_EDEND)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Energy Detection procedure ended. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1gga7c4b15ec33a0704a9caa2fa0b36e98bba84fc32565c0ee0c573f819421e4af36a" prot="public">
          <name>NRF_RADIO_EVENT_EDSTOPPED</name>
          <initializer>= offsetof(NRF_RADIO_Type, EVENTS_EDSTOPPED)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>The sampling of Energy Detection has stopped. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1gga7c4b15ec33a0704a9caa2fa0b36e98bba28d98206f74d0bb10c3ed2b22611d7f5" prot="public">
          <name>NRF_RADIO_EVENT_CCAIDLE</name>
          <initializer>= offsetof(NRF_RADIO_Type, EVENTS_CCAIDLE)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Wireless medium in idle - clear to send. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1gga7c4b15ec33a0704a9caa2fa0b36e98bbad795f59b22f5ae79e329bfea8c66fff6" prot="public">
          <name>NRF_RADIO_EVENT_CCABUSY</name>
          <initializer>= offsetof(NRF_RADIO_Type, EVENTS_CCABUSY)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Wireless medium busy - do not send. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1gga7c4b15ec33a0704a9caa2fa0b36e98bba7b07ca7a148a3d9728d9ef043d052004" prot="public">
          <name>NRF_RADIO_EVENT_CCASTOPPED</name>
          <initializer>= offsetof(NRF_RADIO_Type, EVENTS_CCASTOPPED)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>The CCA has stopped. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1gga7c4b15ec33a0704a9caa2fa0b36e98bba9e22c507246b0221124d3f30ba1d7eb3" prot="public">
          <name>NRF_RADIO_EVENT_RATEBOOST</name>
          <initializer>= offsetof(NRF_RADIO_Type, EVENTS_RATEBOOST)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Ble_LR CI field received, receive mode is changed from Ble_LR125Kbit to Ble_LR500Kbit. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1gga7c4b15ec33a0704a9caa2fa0b36e98bba2ff10f8d4797b2482e59782285bdb858" prot="public">
          <name>NRF_RADIO_EVENT_TXREADY</name>
          <initializer>= offsetof(NRF_RADIO_Type, EVENTS_TXREADY)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>RADIO has ramped up and is ready to be started TX path. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1gga7c4b15ec33a0704a9caa2fa0b36e98bba2ea07eeddae2b29127dd7f5c9841b4c7" prot="public">
          <name>NRF_RADIO_EVENT_RXREADY</name>
          <initializer>= offsetof(NRF_RADIO_Type, EVENTS_RXREADY)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>RADIO has ramped up and is ready to be started RX path. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1gga7c4b15ec33a0704a9caa2fa0b36e98bba9a7890b0337003b7554e2fa8b258a8e4" prot="public">
          <name>NRF_RADIO_EVENT_MHRMATCH</name>
          <initializer>= offsetof(NRF_RADIO_Type, EVENTS_MHRMATCH)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>MAC Header match found. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1gga7c4b15ec33a0704a9caa2fa0b36e98bba4ef4af2edab809e26523af6a571de22e" prot="public">
          <name>NRF_RADIO_EVENT_PHYEND</name>
          <initializer>= offsetof(NRF_RADIO_Type, EVENTS_PHYEND)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Generated in Ble_LR125Kbit, Ble_LR500Kbit and BleIeee802154_250Kbit modes when last bit is sent on the air. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1gga7c4b15ec33a0704a9caa2fa0b36e98bba5d58c0c9a0a23bea189d47bacaa81a05" prot="public">
          <name>NRF_RADIO_EVENT_SYNC</name>
          <initializer>= offsetof(NRF_RADIO_Type, EVENTS_SYNC)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Generated in Ble_LR125Kbit, Ble_LR500Kbit and BleIeee802154_250Kbit modes when possible preamble has been received. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1gga7c4b15ec33a0704a9caa2fa0b36e98bbacb7e79280c73be155ae2105d96304957" prot="public">
          <name>NRF_RADIO_EVENT_CTEPRESENT</name>
          <initializer>= offsetof(NRF_RADIO_Type, EVENTS_CTEPRESENT)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>CTE is present. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>RADIO events. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_radio.h" line="86" column="1" bodyfile="hal/nrf_radio.h" bodystart="87" bodyend="180"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__radio__hal_1ga73ab58523931ff53d367f0fda54a545f" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_radio_int_mask_t</name>
        <enumvalue id="group__nrf__radio__hal_1gga73ab58523931ff53d367f0fda54a545fa5bc250d687045c86e5a13e498e9d3d2e" prot="public">
          <name>NRF_RADIO_INT_READY_MASK</name>
          <initializer>= RADIO_INTENSET_READY_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Interrupt on READY event. <linebreak/>
 </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1gga73ab58523931ff53d367f0fda54a545fa6983354bf31f048d173006a2531cf36b" prot="public">
          <name>NRF_RADIO_INT_ADDRESS_MASK</name>
          <initializer>= RADIO_INTENSET_ADDRESS_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Interrupt on ADDRESS event. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1gga73ab58523931ff53d367f0fda54a545faaca31166d25b4ca715d40d352206f8a2" prot="public">
          <name>NRF_RADIO_INT_PAYLOAD_MASK</name>
          <initializer>= RADIO_INTENSET_PAYLOAD_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Interrupt on PAYLOAD event. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1gga73ab58523931ff53d367f0fda54a545fa1f6c8363ab38f25b3ceb8c4a2bc7f12a" prot="public">
          <name>NRF_RADIO_INT_END_MASK</name>
          <initializer>= RADIO_INTENSET_END_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Interrupt on END event. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1gga73ab58523931ff53d367f0fda54a545fad97fdb0f2dfa2ca3328d58825a15b460" prot="public">
          <name>NRF_RADIO_INT_DISABLED_MASK</name>
          <initializer>= RADIO_INTENSET_DISABLED_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Interrupt on DISABLED event. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1gga73ab58523931ff53d367f0fda54a545fa0dc742b5d047b9a87bb16b519cd3dc7e" prot="public">
          <name>NRF_RADIO_INT_DEVMATCH_MASK</name>
          <initializer>= RADIO_INTENSET_DEVMATCH_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Interrupt on DEVMATCH event. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1gga73ab58523931ff53d367f0fda54a545faf57fd38047cb8db3e074789baf627c06" prot="public">
          <name>NRF_RADIO_INT_DEVMISS_MASK</name>
          <initializer>= RADIO_INTENSET_DEVMISS_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Interrupt on DEVMISS event. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1gga73ab58523931ff53d367f0fda54a545fa889c01442d8fc5134161c7f457eab47f" prot="public">
          <name>NRF_RADIO_INT_RSSIEND_MASK</name>
          <initializer>= RADIO_INTENSET_RSSIEND_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Interrupt on RSSIEND event. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1gga73ab58523931ff53d367f0fda54a545fa2db24a22e42f4759dfd5515f47814c44" prot="public">
          <name>NRF_RADIO_INT_BCMATCH_MASK</name>
          <initializer>= RADIO_INTENSET_BCMATCH_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Interrupt on BCMATCH event. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1gga73ab58523931ff53d367f0fda54a545fab05648dfcadd2e72a8acb82fb204be54" prot="public">
          <name>NRF_RADIO_INT_CRCOK_MASK</name>
          <initializer>= RADIO_INTENSET_CRCOK_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Interrupt on CRCOK event. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1gga73ab58523931ff53d367f0fda54a545faea3583eea86679b28726e3c0fc954709" prot="public">
          <name>NRF_RADIO_INT_CRCERROR_MASK</name>
          <initializer>= RADIO_INTENSET_CRCERROR_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Interrupt on CRCERROR event. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1gga73ab58523931ff53d367f0fda54a545faa1e47b0e926a9ed6ae6db872dfbf3b51" prot="public">
          <name>NRF_RADIO_INT_FRAMESTART_MASK</name>
          <initializer>= RADIO_INTENSET_FRAMESTART_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Interrupt on FRAMESTART event. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1gga73ab58523931ff53d367f0fda54a545fa94aa13bca6cf8b37deff643fdd3db355" prot="public">
          <name>NRF_RADIO_INT_EDEND_MASK</name>
          <initializer>= RADIO_INTENSET_EDEND_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Interrupt on EDEND event. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1gga73ab58523931ff53d367f0fda54a545faab3a1f51972577ad0ec849eabc3f1567" prot="public">
          <name>NRF_RADIO_INT_EDSTOPPED_MASK</name>
          <initializer>= RADIO_INTENSET_EDSTOPPED_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Interrupt on EDSTOPPED event. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1gga73ab58523931ff53d367f0fda54a545fa17806b6ba6ff02a907811eef4c6c7cf9" prot="public">
          <name>NRF_RADIO_INT_CCAIDLE_MASK</name>
          <initializer>= RADIO_INTENSET_CCAIDLE_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Interrupt on CCAIDLE event. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1gga73ab58523931ff53d367f0fda54a545fa9469f7c4ad8adbfe50c55a2b26ed7a6d" prot="public">
          <name>NRF_RADIO_INT_CCABUSY_MASK</name>
          <initializer>= RADIO_INTENSET_CCABUSY_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Interrupt on CCABUSY event. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1gga73ab58523931ff53d367f0fda54a545fa0edb26b992cb2095a622a613bb3a3082" prot="public">
          <name>NRF_RADIO_INT_CCASTOPPED_MASK</name>
          <initializer>= RADIO_INTENSET_CCASTOPPED_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Interrupt on CCASTOPPED event. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1gga73ab58523931ff53d367f0fda54a545fa711260a814ad31db651af73227327096" prot="public">
          <name>NRF_RADIO_INT_RATEBOOST_MASK</name>
          <initializer>= RADIO_INTENSET_RATEBOOST_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Interrupt on RATEBOOST event. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1gga73ab58523931ff53d367f0fda54a545fab37517cb1b7ea6a87719514f3813b5d4" prot="public">
          <name>NRF_RADIO_INT_TXREADY_MASK</name>
          <initializer>= RADIO_INTENSET_TXREADY_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Interrupt on TXREADY event. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1gga73ab58523931ff53d367f0fda54a545fa493be4f094de8f36adceff3224ebbd22" prot="public">
          <name>NRF_RADIO_INT_RXREADY_MASK</name>
          <initializer>= RADIO_INTENSET_RXREADY_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Interrupt on RXREADY event. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1gga73ab58523931ff53d367f0fda54a545fadec950831c5ab0920ce4717ff548bf37" prot="public">
          <name>NRF_RADIO_INT_MHRMATCH_MASK</name>
          <initializer>= RADIO_INTENSET_MHRMATCH_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Interrupt on MHRMATCH event. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1gga73ab58523931ff53d367f0fda54a545fa764c177c27ddf46742c0d3a89aa67df5" prot="public">
          <name>NRF_RADIO_INT_PHYEND_MASK</name>
          <initializer>= RADIO_INTENSET_PHYEND_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Interrupt on PHYEND event. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1gga73ab58523931ff53d367f0fda54a545faf2d6b18f487ad52ff4ff61c5ee7017f5" prot="public">
          <name>NRF_RADIO_INT_SYNC_MASK</name>
          <initializer>= RADIO_INTENSET_SYNC_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Interrupt on SYNC event. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1gga73ab58523931ff53d367f0fda54a545fad5d2ab8ad2d2c88a87edea488901e0c0" prot="public">
          <name>NRF_RADIO_INT_CTEPRESENT_MASK</name>
          <initializer>= RADIO_INTENSET_CTEPRESENT_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Interrupt on CTEPRESENT event. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>RADIO interrupts. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_radio.h" line="183" column="1" bodyfile="hal/nrf_radio.h" bodystart="184" bodyend="305"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__radio__hal_1gabedef6176305eeb4e42032ec24424728" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_radio_short_mask_t</name>
        <enumvalue id="group__nrf__radio__hal_1ggabedef6176305eeb4e42032ec24424728a415c69c93a21406a68d90f8f39ce8cbd" prot="public">
          <name>NRF_RADIO_SHORT_READY_START_MASK</name>
          <initializer>= RADIO_SHORTS_READY_START_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Shortcut between READY event and START task. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1ggabedef6176305eeb4e42032ec24424728a5edccab079f130633db685f3dee74f9a" prot="public">
          <name>NRF_RADIO_SHORT_END_DISABLE_MASK</name>
          <initializer>= RADIO_SHORTS_END_DISABLE_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Shortcut between END event and DISABLE task. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1ggabedef6176305eeb4e42032ec24424728a64354bbebd5d989f0a394529a1b522df" prot="public">
          <name>NRF_RADIO_SHORT_DISABLED_TXEN_MASK</name>
          <initializer>= RADIO_SHORTS_DISABLED_TXEN_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Shortcut between DISABLED event and TXEN task. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1ggabedef6176305eeb4e42032ec24424728ae219ce22ce74699b2c2548abdfa1bdfe" prot="public">
          <name>NRF_RADIO_SHORT_DISABLED_RXEN_MASK</name>
          <initializer>= RADIO_SHORTS_DISABLED_RXEN_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Shortcut between DISABLED event and RXEN task. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1ggabedef6176305eeb4e42032ec24424728a082b580997589ec7c4cba00682bcb5ae" prot="public">
          <name>NRF_RADIO_SHORT_ADDRESS_RSSISTART_MASK</name>
          <initializer>= RADIO_SHORTS_ADDRESS_RSSISTART_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Shortcut between ADDRESS event and RSSISTART task. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1ggabedef6176305eeb4e42032ec24424728aff554fe38ea7dbdd99bb19e4dc96c7c7" prot="public">
          <name>NRF_RADIO_SHORT_END_START_MASK</name>
          <initializer>= RADIO_SHORTS_END_START_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Shortcut between END event and START task. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1ggabedef6176305eeb4e42032ec24424728a821b8c75b7af0dda4a3e806c9deaec45" prot="public">
          <name>NRF_RADIO_SHORT_ADDRESS_BCSTART_MASK</name>
          <initializer>= RADIO_SHORTS_ADDRESS_BCSTART_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Shortcut between ADDRESS event and BCSTART task. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1ggabedef6176305eeb4e42032ec24424728ae8e2bb94ec71b4ac1f8e88cd3573ad8a" prot="public">
          <name>NRF_RADIO_SHORT_DISABLED_RSSISTOP_MASK</name>
          <initializer>= RADIO_SHORTS_DISABLED_RSSISTOP_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Shortcut between DISABLED event and RSSISTOP task. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1ggabedef6176305eeb4e42032ec24424728a90702e397d56d0e01eab8cb2a1df0e1d" prot="public">
          <name>NRF_RADIO_SHORT_RXREADY_CCASTART_MASK</name>
          <initializer>= RADIO_SHORTS_RXREADY_CCASTART_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Shortcut between RXREADY event and CCASTART task. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1ggabedef6176305eeb4e42032ec24424728a136607c08f3eaab014f41c67471820d2" prot="public">
          <name>NRF_RADIO_SHORT_CCAIDLE_TXEN_MASK</name>
          <initializer>= RADIO_SHORTS_CCAIDLE_TXEN_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Shortcut between CCAIDLE event and TXEN task. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1ggabedef6176305eeb4e42032ec24424728a3b972f4707579adc655796a8f6bbd4dc" prot="public">
          <name>NRF_RADIO_SHORT_CCABUSY_DISABLE_MASK</name>
          <initializer>= RADIO_SHORTS_CCABUSY_DISABLE_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Shortcut between CCABUSY event and DISABLE task. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1ggabedef6176305eeb4e42032ec24424728aefc9aaebafdad30a432bbeb0127f82f7" prot="public">
          <name>NRF_RADIO_SHORT_FRAMESTART_BCSTART_MASK</name>
          <initializer>= RADIO_SHORTS_FRAMESTART_BCSTART_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Shortcut between FRAMESTART event and BCSTART task. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1ggabedef6176305eeb4e42032ec24424728a466241d16e26f121509c16d839a9f6be" prot="public">
          <name>NRF_RADIO_SHORT_READY_EDSTART_MASK</name>
          <initializer>= RADIO_SHORTS_READY_EDSTART_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Shortcut between READY event and EDSTART task. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1ggabedef6176305eeb4e42032ec24424728a3820582a3a45e2ea4724dbb0655c75ef" prot="public">
          <name>NRF_RADIO_SHORT_EDEND_DISABLE_MASK</name>
          <initializer>= RADIO_SHORTS_EDEND_DISABLE_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Shortcut between EDEND event and DISABLE task. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1ggabedef6176305eeb4e42032ec24424728a23309d0931978fd8f2d917bf1fd115c0" prot="public">
          <name>NRF_RADIO_SHORT_CCAIDLE_STOP_MASK</name>
          <initializer>= RADIO_SHORTS_CCAIDLE_STOP_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Shortcut between CCAIDLE event and STOP task. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1ggabedef6176305eeb4e42032ec24424728a0f89996875a78799808dad6503983c96" prot="public">
          <name>NRF_RADIO_SHORT_TXREADY_START_MASK</name>
          <initializer>= RADIO_SHORTS_TXREADY_START_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Shortcut between TXREADY event and START task. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1ggabedef6176305eeb4e42032ec24424728aab4f7e15633216fa015d73c806bf8aa7" prot="public">
          <name>NRF_RADIO_SHORT_RXREADY_START_MASK</name>
          <initializer>= RADIO_SHORTS_RXREADY_START_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Shortcut between RXREADY event and START task. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1ggabedef6176305eeb4e42032ec24424728a3ed23c9faaa9cf993e9ddf23c8bbfc8f" prot="public">
          <name>NRF_RADIO_SHORT_PHYEND_DISABLE_MASK</name>
          <initializer>= RADIO_SHORTS_PHYEND_DISABLE_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Shortcut between PHYEND event and DISABLE task. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1ggabedef6176305eeb4e42032ec24424728a10d02751902ea3938b87d79abb9977c2" prot="public">
          <name>NRF_RADIO_SHORT_PHYEND_START_MASK</name>
          <initializer>= RADIO_SHORTS_PHYEND_START_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Shortcut between PHYEND event and START task. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>RADIO shortcuts. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_radio.h" line="308" column="1" bodyfile="hal/nrf_radio.h" bodystart="309" bodyend="355"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__radio__hal_1gacd20cabadc17d4eae37fff80f4e9d1e5" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_radio_cca_mode_t</name>
        <enumvalue id="group__nrf__radio__hal_1ggacd20cabadc17d4eae37fff80f4e9d1e5ae532e43bf86cf1527dca13dc8c44ece2" prot="public">
          <name>NRF_RADIO_CCA_MODE_ED</name>
          <initializer>= RADIO_CCACTRL_CCAMODE_EdMode</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Energy Above Threshold. Will report busy whenever energy is detected above set threshold. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1ggacd20cabadc17d4eae37fff80f4e9d1e5a3d738fdf18dc51021c85f4664f15c21e" prot="public">
          <name>NRF_RADIO_CCA_MODE_CARRIER</name>
          <initializer>= RADIO_CCACTRL_CCAMODE_CarrierMode</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Carrier Seen. Will report busy whenever compliant IEEE 802.15.4 signal is seen. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1ggacd20cabadc17d4eae37fff80f4e9d1e5a2c38396ac127c0667fbf5dd38af2fd50" prot="public">
          <name>NRF_RADIO_CCA_MODE_CARRIER_AND_ED</name>
          <initializer>= RADIO_CCACTRL_CCAMODE_CarrierAndEdMode</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Energy Above Threshold AND Carrier Seen. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1ggacd20cabadc17d4eae37fff80f4e9d1e5ad5ce1b529ffea4dac44a3d50e9c9c80e" prot="public">
          <name>NRF_RADIO_CCA_MODE_CARRIER_OR_ED</name>
          <initializer>= RADIO_CCACTRL_CCAMODE_CarrierOrEdMode</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Energy Above Threshold OR Carrier Seen. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1ggacd20cabadc17d4eae37fff80f4e9d1e5a753a0545ec09c64c6deb174cf06952c3" prot="public">
          <name>NRF_RADIO_CCA_MODE_ED_TEST1</name>
          <initializer>= RADIO_CCACTRL_CCAMODE_EdModeTest1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Energy Above Threshold test mode that will abort when first ED measurement over threshold is seen. No averaging. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>RADIO Clear Channel Assessment modes. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_radio.h" line="359" column="1" bodyfile="hal/nrf_radio.h" bodystart="360" bodyend="366"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__radio__hal_1ga4ea9b1af13c23dc9316d60ca649b71dc" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_radio_state_t</name>
        <enumvalue id="group__nrf__radio__hal_1gga4ea9b1af13c23dc9316d60ca649b71dca746228c10342713c5e20c7dafabea198" prot="public">
          <name>NRF_RADIO_STATE_DISABLED</name>
          <initializer>= RADIO_STATE_STATE_Disabled</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>No operations are going on inside the radio and the power consumption is at a minimum. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1gga4ea9b1af13c23dc9316d60ca649b71dca7a8133c8235bfdae4dca73894526ea0a" prot="public">
          <name>NRF_RADIO_STATE_RXRU</name>
          <initializer>= RADIO_STATE_STATE_RxRu</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>The radio is ramping up and preparing for reception. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1gga4ea9b1af13c23dc9316d60ca649b71dca7c8513853702b8ae56ed317b2e9e4e30" prot="public">
          <name>NRF_RADIO_STATE_RXIDLE</name>
          <initializer>= RADIO_STATE_STATE_RxIdle</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>The radio is ready for reception to start. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1gga4ea9b1af13c23dc9316d60ca649b71dcaa10e7ab6753133d4435ede7490ae1b3f" prot="public">
          <name>NRF_RADIO_STATE_RX</name>
          <initializer>= RADIO_STATE_STATE_Rx</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Reception has been started. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1gga4ea9b1af13c23dc9316d60ca649b71dcaf8f1789bfec2cede715ae443a39b599d" prot="public">
          <name>NRF_RADIO_STATE_RXDISABLE</name>
          <initializer>= RADIO_STATE_STATE_RxDisable</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>The radio is disabling the receiver. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1gga4ea9b1af13c23dc9316d60ca649b71dca1c5c0e8f9dd06caeb84a81ae527430c1" prot="public">
          <name>NRF_RADIO_STATE_TXRU</name>
          <initializer>= RADIO_STATE_STATE_TxRu</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>The radio is ramping up and preparing for transmission. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1gga4ea9b1af13c23dc9316d60ca649b71dca8bf486c918bfb1a6b23bf91d13e7c38a" prot="public">
          <name>NRF_RADIO_STATE_TXIDLE</name>
          <initializer>= RADIO_STATE_STATE_TxIdle</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>The radio is ready for transmission to start. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1gga4ea9b1af13c23dc9316d60ca649b71dca7290c8a3df86ab9b8c89a55fe8865748" prot="public">
          <name>NRF_RADIO_STATE_TX</name>
          <initializer>= RADIO_STATE_STATE_Tx</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>The radio is transmitting a packet. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1gga4ea9b1af13c23dc9316d60ca649b71dca29feafdf4232c518678d46da990aae56" prot="public">
          <name>NRF_RADIO_STATE_TXDISABLE</name>
          <initializer>= RADIO_STATE_STATE_TxDisable</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>The radio is disabling the transmitter. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Types of RADIO states. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_radio.h" line="370" column="1" bodyfile="hal/nrf_radio.h" bodystart="371" bodyend="381"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__radio__hal_1gaf10bff1d03d8156b3af56540701d6b3d" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_radio_txpower_t</name>
        <enumvalue id="group__nrf__radio__hal_1ggaf10bff1d03d8156b3af56540701d6b3da686449b679230e5e123abf8661420990" prot="public">
          <name>NRF_RADIO_TXPOWER_POS10DBM</name>
          <initializer>= RADIO_TXPOWER_TXPOWER_Pos10dBm</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>10 dBm. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1ggaf10bff1d03d8156b3af56540701d6b3da58713fd06bb6a9bba0e0d5aa65068d9b" prot="public">
          <name>NRF_RADIO_TXPOWER_POS9DBM</name>
          <initializer>= RADIO_TXPOWER_TXPOWER_Pos9dBm</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>9 dBm. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1ggaf10bff1d03d8156b3af56540701d6b3dac84143d743b47b8c2d93dde692f4cb58" prot="public">
          <name>NRF_RADIO_TXPOWER_POS8DBM</name>
          <initializer>= RADIO_TXPOWER_TXPOWER_Pos8dBm</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>8 dBm. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1ggaf10bff1d03d8156b3af56540701d6b3da4066ab795ca5a26e2cbaf20e7bb48299" prot="public">
          <name>NRF_RADIO_TXPOWER_POS7DBM</name>
          <initializer>= RADIO_TXPOWER_TXPOWER_Pos7dBm</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>7 dBm. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1ggaf10bff1d03d8156b3af56540701d6b3da7b094e547b20f2a127ddbb7129a89c53" prot="public">
          <name>NRF_RADIO_TXPOWER_POS6DBM</name>
          <initializer>= RADIO_TXPOWER_TXPOWER_Pos6dBm</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>6 dBm. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1ggaf10bff1d03d8156b3af56540701d6b3da862590c83368f19ac0f124e019c46de5" prot="public">
          <name>NRF_RADIO_TXPOWER_POS5DBM</name>
          <initializer>= RADIO_TXPOWER_TXPOWER_Pos5dBm</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>5 dBm. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1ggaf10bff1d03d8156b3af56540701d6b3daa0a7418927f1b9c5341fce148b342e84" prot="public">
          <name>NRF_RADIO_TXPOWER_POS4DBM</name>
          <initializer>= RADIO_TXPOWER_TXPOWER_Pos4dBm</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>4 dBm. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1ggaf10bff1d03d8156b3af56540701d6b3daeb694c1022ba7fd6f3d87f4c52a96d57" prot="public">
          <name>NRF_RADIO_TXPOWER_POS3DBM</name>
          <initializer>= RADIO_TXPOWER_TXPOWER_Pos3dBm</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>3 dBm. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1ggaf10bff1d03d8156b3af56540701d6b3da53daadf318857ab2894c89b01f1dc844" prot="public">
          <name>NRF_RADIO_TXPOWER_POS2DBM</name>
          <initializer>= RADIO_TXPOWER_TXPOWER_Pos2dBm</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>2 dBm. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1ggaf10bff1d03d8156b3af56540701d6b3daed7c5bc0784167ffbc07e183a12fa723" prot="public">
          <name>NRF_RADIO_TXPOWER_POS1DBM</name>
          <initializer>= RADIO_TXPOWER_TXPOWER_Pos1dBm</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>1 dBm. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1ggaf10bff1d03d8156b3af56540701d6b3da78145e32ef4f9b0d730be485df71bce3" prot="public">
          <name>NRF_RADIO_TXPOWER_0DBM</name>
          <initializer>= RADIO_TXPOWER_TXPOWER_0dBm</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>0 dBm. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1ggaf10bff1d03d8156b3af56540701d6b3da92b6ff3b18242376f3360f5da723745f" prot="public">
          <name>NRF_RADIO_TXPOWER_NEG1DBM</name>
          <initializer>= RADIO_TXPOWER_TXPOWER_Neg1dBm</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>-1 dBm. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1ggaf10bff1d03d8156b3af56540701d6b3dadd6e90c72cf903ea9de89ff939e0f49d" prot="public">
          <name>NRF_RADIO_TXPOWER_NEG2DBM</name>
          <initializer>= RADIO_TXPOWER_TXPOWER_Neg2dBm</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>-2 dBm. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1ggaf10bff1d03d8156b3af56540701d6b3da4a8414b420cf55973ffddb9946447f16" prot="public">
          <name>NRF_RADIO_TXPOWER_NEG3DBM</name>
          <initializer>= RADIO_TXPOWER_TXPOWER_Neg3dBm</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>-3 dBm. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1ggaf10bff1d03d8156b3af56540701d6b3da76c1f820e37625a1846e6f7d186b0704" prot="public">
          <name>NRF_RADIO_TXPOWER_NEG4DBM</name>
          <initializer>= RADIO_TXPOWER_TXPOWER_Neg4dBm</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>-4 dBm. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1ggaf10bff1d03d8156b3af56540701d6b3daa7a4c8322a9d97d7a2f06b72ff2b059c" prot="public">
          <name>NRF_RADIO_TXPOWER_NEG5DBM</name>
          <initializer>= RADIO_TXPOWER_TXPOWER_Neg5dBm</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>-5 dBm. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1ggaf10bff1d03d8156b3af56540701d6b3da4e3268bbc73be755e9389ee121bd7ab3" prot="public">
          <name>NRF_RADIO_TXPOWER_NEG6DBM</name>
          <initializer>= RADIO_TXPOWER_TXPOWER_Neg6dBm</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>-6 dBm. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1ggaf10bff1d03d8156b3af56540701d6b3da56bc1b666d8111a5ef14a12735cceb6b" prot="public">
          <name>NRF_RADIO_TXPOWER_NEG7DBM</name>
          <initializer>= RADIO_TXPOWER_TXPOWER_Neg7dBm</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>-7 dBm. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1ggaf10bff1d03d8156b3af56540701d6b3da83d1bff91cf0717a88c63b1801df3421" prot="public">
          <name>NRF_RADIO_TXPOWER_NEG8DBM</name>
          <initializer>= RADIO_TXPOWER_TXPOWER_Neg8dBm</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>-8 dBm. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1ggaf10bff1d03d8156b3af56540701d6b3da12e5c9fef4a14384cc4c48a506479645" prot="public">
          <name>NRF_RADIO_TXPOWER_NEG12DBM</name>
          <initializer>= RADIO_TXPOWER_TXPOWER_Neg12dBm</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>-12 dBm. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1ggaf10bff1d03d8156b3af56540701d6b3da53dfa5569a98c1de1e5b675d4d08f464" prot="public">
          <name>NRF_RADIO_TXPOWER_NEG16DBM</name>
          <initializer>= RADIO_TXPOWER_TXPOWER_Neg16dBm</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>-16 dBm. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1ggaf10bff1d03d8156b3af56540701d6b3da9f56473abf6cc325d044c706ace9772e" prot="public">
          <name>NRF_RADIO_TXPOWER_NEG20DBM</name>
          <initializer>= RADIO_TXPOWER_TXPOWER_Neg20dBm</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>-20 dBm. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1ggaf10bff1d03d8156b3af56540701d6b3da7cef94ecd59d190ab3d5985e05d77046" prot="public">
          <name>NRF_RADIO_TXPOWER_NEG30DBM</name>
          <initializer>= RADIO_TXPOWER_TXPOWER_Neg30dBm</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>-30 dBm. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1ggaf10bff1d03d8156b3af56540701d6b3da2088a0698d2f444b3937788a20e8d582" prot="public">
          <name>NRF_RADIO_TXPOWER_NEG40DBM</name>
          <initializer>= RADIO_TXPOWER_TXPOWER_Neg40dBm</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>-40 dBm. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1ggaf10bff1d03d8156b3af56540701d6b3da93ced5a52ea0a27e0528cd555eb00760" prot="public">
          <name>NRF_RADIO_TXPOWER_NEG70DBM</name>
          <initializer>= RADIO_TXPOWER_TXPOWER_Neg70dBm</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>-70 dBm. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Types of RADIO TX power. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_radio.h" line="384" column="1" bodyfile="hal/nrf_radio.h" bodystart="385" bodyend="449"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__radio__hal_1gacf631e29d43c93acac290a18850e9c40" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_radio_mode_t</name>
        <enumvalue id="group__nrf__radio__hal_1ggacf631e29d43c93acac290a18850e9c40a951d15ee1a9b4c6bf74d4637496098ce" prot="public">
          <name>NRF_RADIO_MODE_NRF_1MBIT</name>
          <initializer>= RADIO_MODE_MODE_Nrf_1Mbit</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>1Mbit/s Nordic proprietary radio mode. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1ggacf631e29d43c93acac290a18850e9c40af2d5dbdc4b4afa5c86c76bfb6cc34e04" prot="public">
          <name>NRF_RADIO_MODE_NRF_2MBIT</name>
          <initializer>= RADIO_MODE_MODE_Nrf_2Mbit</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>2Mbit/s Nordic proprietary radio mode. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1ggacf631e29d43c93acac290a18850e9c40a9cc3caa41ead16fe0d98f0df9eb9ae8e" prot="public">
          <name>NRF_RADIO_MODE_NRF_250KBIT</name>
          <initializer>= RADIO_MODE_MODE_Nrf_250Kbit</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>250Kbit/s Nordic proprietary radio mode. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1ggacf631e29d43c93acac290a18850e9c40a2f22d25fb14609deb75c9b702798aaf7" prot="public">
          <name>NRF_RADIO_MODE_NRF_4MBIT_H_0_5</name>
          <initializer>= RADIO_MODE_MODE_Nrf_4Mbit0_5</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>4Mbit/s Nordic proprietary radio mode (BT=0.5/h=0.5). </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1ggacf631e29d43c93acac290a18850e9c40ad00442833e44294668cfa29faa786c92" prot="public">
          <name>NRF_RADIO_MODE_NRF_4MBIT_H_0_25</name>
          <initializer>= RADIO_MODE_MODE_Nrf_4Mbit0_25</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>4Mbit/s Nordic proprietary radio mode (BT=0.5/h=0.25). </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1ggacf631e29d43c93acac290a18850e9c40ae4b19edc5f6a0557e47effea35b6c031" prot="public">
          <name>NRF_RADIO_MODE_BLE_1MBIT</name>
          <initializer>= RADIO_MODE_MODE_Ble_1Mbit</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>1 Mbit/s Bluetooth Low Energy. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1ggacf631e29d43c93acac290a18850e9c40a8f70af7f390ab58d3555a7c9718acc1d" prot="public">
          <name>NRF_RADIO_MODE_BLE_2MBIT</name>
          <initializer>= RADIO_MODE_MODE_Ble_2Mbit</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>2 Mbit/s Bluetooth Low Energy. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1ggacf631e29d43c93acac290a18850e9c40a6d9f039845eb5d15cf6ba11c84adae95" prot="public">
          <name>NRF_RADIO_MODE_BLE_LR125KBIT</name>
          <initializer>= RADIO_MODE_MODE_Ble_LR125Kbit</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Bluetooth Low Energy Long range 125 kbit/s TX, 125 kbit/s and 500 kbit/s RX </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1ggacf631e29d43c93acac290a18850e9c40a623c0072435f2899faf891929da43427" prot="public">
          <name>NRF_RADIO_MODE_BLE_LR500KBIT</name>
          <initializer>= RADIO_MODE_MODE_Ble_LR500Kbit</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Bluetooth Low Energy Long range 500 kbit/s TX, 125 kbit/s and 500 kbit/s RX </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1ggacf631e29d43c93acac290a18850e9c40acdf5c38aa9008d6be5a972f8d2e4def0" prot="public">
          <name>NRF_RADIO_MODE_IEEE802154_250KBIT</name>
          <initializer>= RADIO_MODE_MODE_Ieee802154_250Kbit</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>IEEE 802.15.4-2006 250 kbit/s. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Types of RADIO modes (data rate and modulation). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_radio.h" line="452" column="1" bodyfile="hal/nrf_radio.h" bodystart="453" bodyend="478"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__radio__hal_1gac643453ca82a7634a045b1dbf72eece0" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_radio_preamble_length_t</name>
        <enumvalue id="group__nrf__radio__hal_1ggac643453ca82a7634a045b1dbf72eece0ad74e0950327f5bcd0238e0d3a5397268" prot="public">
          <name>NRF_RADIO_PREAMBLE_LENGTH_8BIT</name>
          <initializer>= RADIO_PCNF0_PLEN_8bit</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>8-bit preamble. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1ggac643453ca82a7634a045b1dbf72eece0a2d61164ca2f71aed56c49ed312f45ced" prot="public">
          <name>NRF_RADIO_PREAMBLE_LENGTH_16BIT</name>
          <initializer>= RADIO_PCNF0_PLEN_16bit</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>16-bit preamble. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1ggac643453ca82a7634a045b1dbf72eece0adbace5d8eba110d411ce42958c68a306" prot="public">
          <name>NRF_RADIO_PREAMBLE_LENGTH_32BIT_ZERO</name>
          <initializer>= RADIO_PCNF0_PLEN_32bitZero</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>32-bit zero preamble used for IEEE 802.15.4. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1ggac643453ca82a7634a045b1dbf72eece0aa1cc65e5e688dcc57e851199fa8d9e9e" prot="public">
          <name>NRF_RADIO_PREAMBLE_LENGTH_LONG_RANGE</name>
          <initializer>= RADIO_PCNF0_PLEN_LongRange</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Preamble - used for BTLE Long Range. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Types of preamble length. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_radio.h" line="482" column="1" bodyfile="hal/nrf_radio.h" bodystart="483" bodyend="492"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__radio__hal_1ga9e800ae5bddb82989b601ec2407ea229" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_radio_crc_addr_t</name>
        <enumvalue id="group__nrf__radio__hal_1gga9e800ae5bddb82989b601ec2407ea229a390e9309e68ba7f9ed88ce7a9610a48f" prot="public">
          <name>NRF_RADIO_CRC_ADDR_INCLUDE</name>
          <initializer>= RADIO_CRCCNF_SKIPADDR_Include</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>CRC calculation includes address field. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1gga9e800ae5bddb82989b601ec2407ea229a83dde7be6ffd8c7d2f6194d88667c55f" prot="public">
          <name>NRF_RADIO_CRC_ADDR_SKIP</name>
          <initializer>= RADIO_CRCCNF_SKIPADDR_Skip</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>CRC calculation does not include address field. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1gga9e800ae5bddb82989b601ec2407ea229a061a5d8bf5b9823265c4f828d6ba8a2a" prot="public">
          <name>NRF_RADIO_CRC_ADDR_IEEE802154</name>
          <initializer>= RADIO_CRCCNF_SKIPADDR_Ieee802154</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>CRC calculation as per 802.15.4 standard. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1gga9e800ae5bddb82989b601ec2407ea229a485840331232a3ddd56e1f7928264e25" prot="public">
          <name>NRF_RADIO_CRC_ADDR_S0</name>
          <initializer>= RADIO_CRCCNF_OFFSET_SO</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>CRC calculation starting at first byte after S0 field. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1gga9e800ae5bddb82989b601ec2407ea229a746706569662e81eb7b7b47f5d83b9b3" prot="public">
          <name>NRF_RADIO_CRC_ADDR_S1</name>
          <initializer>= RADIO_CRCCNF_OFFSET_S1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>CRC calculation starting at first byte after S1 field. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Types of CRC calculatons regarding address. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_radio.h" line="496" column="1" bodyfile="hal/nrf_radio.h" bodystart="497" bodyend="519"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__radio__hal_1ga50e6ec690192526db55f277b6727117d" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_radio_dfe_op_mode_t</name>
        <enumvalue id="group__nrf__radio__hal_1gga50e6ec690192526db55f277b6727117da53d3b89081b6b30d23fd83a6fe9de412" prot="public">
          <name>NRF_RADIO_DFE_OP_MODE_AOD</name>
          <initializer>= RADIO_DFEMODE_DFEOPMODE_AoD</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Angle-of-Departure mode. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1gga50e6ec690192526db55f277b6727117da4cfdf7b91b38b63e9d548fbf0af0bd36" prot="public">
          <name>NRF_RADIO_DFE_OP_MODE_AOA</name>
          <initializer>= RADIO_DFEMODE_DFEOPMODE_AoA</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Angle-of-Arrival mode. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Direction Finding operation modes. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_radio.h" line="551" column="1" bodyfile="hal/nrf_radio.h" bodystart="552" bodyend="555"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__radio__hal_1gaa6632d62276bfec4138e0688d5f73018" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_radio_dfe_switch_state_t</name>
        <enumvalue id="group__nrf__radio__hal_1ggaa6632d62276bfec4138e0688d5f73018a686e18534cde4b4789614c157241ad0b" prot="public">
          <name>NRF_RADIO_DFE_SWITCH_STATE_IDLE</name>
          <initializer>= RADIO_DFESTATUS_SWITCHINGSTATE_Idle</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Switching state Idle. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1ggaa6632d62276bfec4138e0688d5f73018a1de635b14e6f86baa59130e3b70458c0" prot="public">
          <name>NRF_RADIO_DFE_SWITCH_STATE_OFFSET</name>
          <initializer>= RADIO_DFESTATUS_SWITCHINGSTATE_Offset</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Switching state Offset. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1ggaa6632d62276bfec4138e0688d5f73018a6c9e9256a55dffa3e222eef480c48293" prot="public">
          <name>NRF_RADIO_DFE_SWITCH_STATE_GUARD</name>
          <initializer>= RADIO_DFESTATUS_SWITCHINGSTATE_Guard</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Switching state Guard. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1ggaa6632d62276bfec4138e0688d5f73018ac43a211e085fa6f76f0fe62ead6f487f" prot="public">
          <name>NRF_RADIO_DFE_SWITCH_STATE_REF</name>
          <initializer>= RADIO_DFESTATUS_SWITCHINGSTATE_Ref</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Switching state Ref. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1ggaa6632d62276bfec4138e0688d5f73018a3cf8caab8af53b52ceb6b17100571125" prot="public">
          <name>NRF_RADIO_DFE_SWITCH_STATE_SWITCHING</name>
          <initializer>= RADIO_DFESTATUS_SWITCHINGSTATE_Switching</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Switching state Switching. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1ggaa6632d62276bfec4138e0688d5f73018abce423577ee283bfdc44cba07ca01c11" prot="public">
          <name>NRF_RADIO_DFE_SWITCH_STATE_ENDING</name>
          <initializer>= RADIO_DFESTATUS_SWITCHINGSTATE_Ending</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Switching state Ending. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>States of Direction Finding switching state machine. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_radio.h" line="560" column="1" bodyfile="hal/nrf_radio.h" bodystart="561" bodyend="568"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__radio__hal_1ga8b27d0e94d3c0d4589d8876018cdcc7b" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_radio_dfe_sample_state_t</name>
        <enumvalue id="group__nrf__radio__hal_1gga8b27d0e94d3c0d4589d8876018cdcc7ba0f73845b55dddade8036d73d92e25903" prot="public">
          <name>NRF_RADIO_DFE_SAMPLE_STATE_IDLE</name>
          <initializer>= RADIO_DFESTATUS_SAMPLINGSTATE_Idle</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Sampling state Idle. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1gga8b27d0e94d3c0d4589d8876018cdcc7ba7dbc11d1dd54b3ba7dcacc4e9f60e330" prot="public">
          <name>NRF_RADIO_DFE_SAMPLE_STATE_SAMPLING</name>
          <initializer>= RADIO_DFESTATUS_SAMPLINGSTATE_Sampling</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Sampling state Sampling. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>States of Direction Finding sampling state machine. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_radio.h" line="571" column="1" bodyfile="hal/nrf_radio.h" bodystart="572" bodyend="575"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__radio__hal_1ga9858b66ec9cdd8ae5fd9e378c4f9f2b9" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_radio_cteinline_time_range_t</name>
        <enumvalue id="group__nrf__radio__hal_1gga9858b66ec9cdd8ae5fd9e378c4f9f2b9a8c204dcc985d76994f72d17443abb98c" prot="public">
          <name>NRF_RADIO_CTEINLINE_TIME_RANGE_20</name>
          <initializer>= RADIO_CTEINLINECONF_CTETIMEVALIDRANGE_20</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>20 units time range. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1gga9858b66ec9cdd8ae5fd9e378c4f9f2b9a9770f5e5ba1c401b97bf60117d8bef48" prot="public">
          <name>NRF_RADIO_CTEINLINE_TIME_RANGE_31</name>
          <initializer>= RADIO_CTEINLINECONF_CTETIMEVALIDRANGE_31</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>31 units time range. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1gga9858b66ec9cdd8ae5fd9e378c4f9f2b9a443133fb76954e913683ae5df0347c22" prot="public">
          <name>NRF_RADIO_CTEINLINE_TIME_RANGE_63</name>
          <initializer>= RADIO_CTEINLINECONF_CTETIMEVALIDRANGE_63</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>63 units time range. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Valid ranges of CTE time, expressed in 8 us units. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_radio.h" line="580" column="1" bodyfile="hal/nrf_radio.h" bodystart="581" bodyend="585"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__radio__hal_1ga0bf3be7a962831ad119d22e7fd47ac42" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_radio_cteinline_rx_mode_t</name>
        <enumvalue id="group__nrf__radio__hal_1gga0bf3be7a962831ad119d22e7fd47ac42ad94a5905988a8da5111747cd3e37b2fc" prot="public">
          <name>NRF_RADIO_CTEINLINE_RX_MODE_125NS</name>
          <initializer>= RADIO_CTEINLINECONF_CTEINLINERXMODE1US_125ns</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>125 ns spacing. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1gga0bf3be7a962831ad119d22e7fd47ac42a43c56c7c324c4ec43e80b01baa31eb14" prot="public">
          <name>NRF_RADIO_CTEINLINE_RX_MODE_250NS</name>
          <initializer>= RADIO_CTEINLINECONF_CTEINLINERXMODE1US_250ns</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>250 ns spacing. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1gga0bf3be7a962831ad119d22e7fd47ac42afadc96817e3d81b053c003e5b3eb30dd" prot="public">
          <name>NRF_RADIO_CTEINLINE_RX_MODE_500NS</name>
          <initializer>= RADIO_CTEINLINECONF_CTEINLINERXMODE1US_500ns</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>500 ns spacing. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1gga0bf3be7a962831ad119d22e7fd47ac42a1007927b146a0b2d7a158aaf0dc00594" prot="public">
          <name>NRF_RADIO_CTEINLINE_RX_MODE_1US</name>
          <initializer>= RADIO_CTEINLINECONF_CTEINLINERXMODE1US_1us</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>1 us spacing. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1gga0bf3be7a962831ad119d22e7fd47ac42acbae89288edfb3f0f64742b4ef01654b" prot="public">
          <name>NRF_RADIO_CTEINLINE_RX_MODE_2US</name>
          <initializer>= RADIO_CTEINLINECONF_CTEINLINERXMODE1US_2us</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>2 us spacing. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1gga0bf3be7a962831ad119d22e7fd47ac42a569b5053485c7fc8b907fa03ac361035" prot="public">
          <name>NRF_RADIO_CTEINLINE_RX_MODE_4US</name>
          <initializer>= RADIO_CTEINLINECONF_CTEINLINERXMODE1US_4us</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>4 us spacing. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Spacing between samples for the samples in the switching period. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_radio.h" line="588" column="1" bodyfile="hal/nrf_radio.h" bodystart="589" bodyend="596"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__radio__hal_1ga56344d716160842c78b173c797debf0d" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_radio_dfectrl_extension_t</name>
        <enumvalue id="group__nrf__radio__hal_1gga56344d716160842c78b173c797debf0dacdd58d9806c60261ef641853e1cb143e" prot="public">
          <name>NRF_RADIO_DFECTRL_EXTENSION_CRC</name>
          <initializer>= RADIO_DFECTRL1_DFEINEXTENSION_CRC</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>AoA/AoD procedure triggered at end of CRC. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1gga56344d716160842c78b173c797debf0da8c673aeefc621feacc627a71d6c9ce80" prot="public">
          <name>NRF_RADIO_DFECTRL_EXTENSION_PAYLOAD</name>
          <initializer>= RADIO_DFECTRL1_DFEINEXTENSION_Payload</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Antenna switching/sampling done in the packet payload. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>State when CTE extension is added and antenna switching/sampling is done. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_radio.h" line="614" column="1" bodyfile="hal/nrf_radio.h" bodystart="615" bodyend="618"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__radio__hal_1ga2615b22f05fde4684ecfbd7d755fc4ee" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_radio_dfectrl_switch_spacing_t</name>
        <enumvalue id="group__nrf__radio__hal_1gga2615b22f05fde4684ecfbd7d755fc4eea0f8a97c2db0b04e07b198a574b920825" prot="public">
          <name>NRF_RADIO_DFECTRL_SWITCH_SPACING_1US</name>
          <initializer>= RADIO_DFECTRL1_TSWITCHSPACING_1us</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>1 us interval between antenna change. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1gga2615b22f05fde4684ecfbd7d755fc4eea003a38b55e8b06dbcc8f369363aae2bb" prot="public">
          <name>NRF_RADIO_DFECTRL_SWITCH_SPACING_2US</name>
          <initializer>= RADIO_DFECTRL1_TSWITCHSPACING_2us</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>2 us interval between antenna change. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1gga2615b22f05fde4684ecfbd7d755fc4eead6e53dbf32e99850b8a72770f22a19f5" prot="public">
          <name>NRF_RADIO_DFECTRL_SWITCH_SPACING_4US</name>
          <initializer>= RADIO_DFECTRL1_TSWITCHSPACING_4us</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>4 us interval between antenna change. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Interval between antenna changes in the switching state. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_radio.h" line="621" column="1" bodyfile="hal/nrf_radio.h" bodystart="622" bodyend="626"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__radio__hal_1gae8d3e239eae19f02f55400a93307110f" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_radio_dfectrl_sample_spacing_t</name>
        <enumvalue id="group__nrf__radio__hal_1ggae8d3e239eae19f02f55400a93307110faee5d03d4d5d1e523d571c3cebc22159e" prot="public">
          <name>NRF_RADIO_DFECTRL_SAMPLE_SPACING_125NS</name>
          <initializer>= RADIO_DFECTRL1_TSAMPLESPACING_125ns</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>125 ns interval between samples. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1ggae8d3e239eae19f02f55400a93307110fa5bb3ffe386c74951a64cebf141d82eaa" prot="public">
          <name>NRF_RADIO_DFECTRL_SAMPLE_SPACING_250NS</name>
          <initializer>= RADIO_DFECTRL1_TSAMPLESPACING_250ns</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>250 ns interval between samples. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1ggae8d3e239eae19f02f55400a93307110fac83f8674cce6a655cc4401831435b63d" prot="public">
          <name>NRF_RADIO_DFECTRL_SAMPLE_SPACING_500NS</name>
          <initializer>= RADIO_DFECTRL1_TSAMPLESPACING_500ns</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>500 ns interval between samples. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1ggae8d3e239eae19f02f55400a93307110fa55579a036be7df7f65df9898ce87e810" prot="public">
          <name>NRF_RADIO_DFECTRL_SAMPLE_SPACING_1US</name>
          <initializer>= RADIO_DFECTRL1_TSAMPLESPACING_1us</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>1 us interval between samples. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1ggae8d3e239eae19f02f55400a93307110fafcce57e3fcf04807c7a4fa5b492daa14" prot="public">
          <name>NRF_RADIO_DFECTRL_SAMPLE_SPACING_2US</name>
          <initializer>= RADIO_DFECTRL1_TSAMPLESPACING_2us</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>2 us interval between samples. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1ggae8d3e239eae19f02f55400a93307110fa91fcf87864e1c83882ebc905a227e108" prot="public">
          <name>NRF_RADIO_DFECTRL_SAMPLE_SPACING_4US</name>
          <initializer>= RADIO_DFECTRL1_TSAMPLESPACING_4us</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>4 us interval between samples. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Interval between samples. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_radio.h" line="629" column="1" bodyfile="hal/nrf_radio.h" bodystart="630" bodyend="637"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__radio__hal_1gacf147f6a78d77e1a86240f5555fd11c1" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_radio_dfectrl_sample_type_t</name>
        <enumvalue id="group__nrf__radio__hal_1ggacf147f6a78d77e1a86240f5555fd11c1a7f7fbd83552813a64a42ed85e8179824" prot="public">
          <name>NRF_RADIO_DFECTRL_SAMPLE_TYPE_IQ</name>
          <initializer>= RADIO_DFECTRL1_SAMPLETYPE_IQ</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Complex samples in I and Q. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__radio__hal_1ggacf147f6a78d77e1a86240f5555fd11c1a7031b60b9e7e9414fdc12e881cd9b992" prot="public">
          <name>NRF_RADIO_DFECTRL_SAMPLE_TYPE_MAGPHASE</name>
          <initializer>= RADIO_DFECTRL1_SAMPLETYPE_MagPhase</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Complex samples as magnitude and phase. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Direction finding sample type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_radio.h" line="640" column="1" bodyfile="hal/nrf_radio.h" bodystart="641" bodyend="644"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__nrf__radio__hal_1ga3c9a0741030060bba9d9d5bbf7f528b8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_radio_task_trigger</definition>
        <argsstring>(NRF_RADIO_Type *p_reg, nrf_radio_task_t task)</argsstring>
        <name>nrf_radio_task_trigger</name>
        <param>
          <type>NRF_RADIO_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__radio__hal_1ga607fff2f027c323b3dc8af40ab489a2f" kindref="member">nrf_radio_task_t</ref></type>
          <declname>task</declname>
        </param>
        <briefdescription>
<para>Function for activating a specific RADIO task. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">task</parametername>
</parameternamelist>
<parameterdescription>
<para>Task to be activated. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_radio.h" line="1591" column="24" bodyfile="hal/nrf_radio.h" bodystart="1591" bodyend="1594" declfile="hal/nrf_radio.h" declline="671" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__radio__hal_1ga2d24a390cb7660d259f664a4dd409555" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_radio_task_address_get</definition>
        <argsstring>(NRF_RADIO_Type const *p_reg, nrf_radio_task_t task)</argsstring>
        <name>nrf_radio_task_address_get</name>
        <param>
          <type>NRF_RADIO_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__radio__hal_1ga607fff2f027c323b3dc8af40ab489a2f" kindref="member">nrf_radio_task_t</ref></type>
          <declname>task</declname>
        </param>
        <briefdescription>
<para>Function for getting the address of a specific RADIO task register. </para>
        </briefdescription>
        <detaileddescription>
<para>This function can be used by the PPI module.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">task</parametername>
</parameternamelist>
<parameterdescription>
<para>Requested task.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Address of the specified task register. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_radio.h" line="1596" column="28" bodyfile="hal/nrf_radio.h" bodystart="1596" bodyend="1600" declfile="hal/nrf_radio.h" declline="683" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__radio__hal_1ga4722c840c42a42823687a1a86e1261ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_radio_event_clear</definition>
        <argsstring>(NRF_RADIO_Type *p_reg, nrf_radio_event_t event)</argsstring>
        <name>nrf_radio_event_clear</name>
        <param>
          <type>NRF_RADIO_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__radio__hal_1ga7c4b15ec33a0704a9caa2fa0b36e98bb" kindref="member">nrf_radio_event_t</ref></type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>Function for clearing a specific RADIO event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event to clean. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_radio.h" line="1602" column="24" bodyfile="hal/nrf_radio.h" bodystart="1602" bodyend="1606" declfile="hal/nrf_radio.h" declline="692" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__radio__hal_1ga07513cd4f3fe44e19e6dd7f57c99aded" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE bool</type>
        <definition>NRF_STATIC_INLINE bool nrf_radio_event_check</definition>
        <argsstring>(NRF_RADIO_Type const *p_reg, nrf_radio_event_t event)</argsstring>
        <name>nrf_radio_event_check</name>
        <param>
          <type>NRF_RADIO_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__radio__hal_1ga7c4b15ec33a0704a9caa2fa0b36e98bb" kindref="member">nrf_radio_event_t</ref></type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>Function for retrieving the state of the RADIO event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event to be checked.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>The event has been generated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>The event has not been generated. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_radio.h" line="1608" column="24" bodyfile="hal/nrf_radio.h" bodystart="1608" bodyend="1611" declfile="hal/nrf_radio.h" declline="703" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__radio__hal_1ga3332fde0b4673961bf8466dd323d59a4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_radio_event_address_get</definition>
        <argsstring>(NRF_RADIO_Type const *p_reg, nrf_radio_event_t event)</argsstring>
        <name>nrf_radio_event_address_get</name>
        <param>
          <type>NRF_RADIO_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__radio__hal_1ga7c4b15ec33a0704a9caa2fa0b36e98bb" kindref="member">nrf_radio_event_t</ref></type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>Function for getting the address of a specific RADIO event register. </para>
        </briefdescription>
        <detaileddescription>
<para>This function can be used by the PPI module.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>Requested Event.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Address of the specified event register. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_radio.h" line="1613" column="28" bodyfile="hal/nrf_radio.h" bodystart="1613" bodyend="1617" declfile="hal/nrf_radio.h" declline="715" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__radio__hal_1gac05dbdb99a5c5308818344391a778298" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_radio_shorts_enable</definition>
        <argsstring>(NRF_RADIO_Type *p_reg, uint32_t shorts_mask)</argsstring>
        <name>nrf_radio_shorts_enable</name>
        <param>
          <type>NRF_RADIO_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>shorts_mask</declname>
        </param>
        <briefdescription>
<para>Function for enabling specified RADIO shortcuts. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">shorts_mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of shortcuts. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_radio.h" line="1619" column="24" bodyfile="hal/nrf_radio.h" bodystart="1619" bodyend="1622" declfile="hal/nrf_radio.h" declline="724" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__radio__hal_1ga8f44040e5750c1e0b44633d362a7d36c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_radio_shorts_disable</definition>
        <argsstring>(NRF_RADIO_Type *p_reg, uint32_t shorts_mask)</argsstring>
        <name>nrf_radio_shorts_disable</name>
        <param>
          <type>NRF_RADIO_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>shorts_mask</declname>
        </param>
        <briefdescription>
<para>Function for disabling specified RADIO shortcuts. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">shorts_mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of shortcuts. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_radio.h" line="1624" column="24" bodyfile="hal/nrf_radio.h" bodystart="1624" bodyend="1627" declfile="hal/nrf_radio.h" declline="732" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__radio__hal_1gad795180cbe33c306c3fb3a5d864f17d2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_radio_shorts_set</definition>
        <argsstring>(NRF_RADIO_Type *p_reg, uint32_t shorts_mask)</argsstring>
        <name>nrf_radio_shorts_set</name>
        <param>
          <type>NRF_RADIO_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>shorts_mask</declname>
        </param>
        <briefdescription>
<para>Function for setting the configuration of RADIO shortcuts. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">shorts_mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Shortcuts configuration to set. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_radio.h" line="1629" column="24" bodyfile="hal/nrf_radio.h" bodystart="1629" bodyend="1632" declfile="hal/nrf_radio.h" declline="740" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__radio__hal_1gaad50cd6fcdb24e15fbaf79ac6a3c2135" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_radio_shorts_get</definition>
        <argsstring>(NRF_RADIO_Type const *p_reg)</argsstring>
        <name>nrf_radio_shorts_get</name>
        <param>
          <type>NRF_RADIO_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting the configuration of RADIO shortcuts. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Mask of currently enabled shortcuts. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_radio.h" line="1634" column="28" bodyfile="hal/nrf_radio.h" bodystart="1634" bodyend="1637" declfile="hal/nrf_radio.h" declline="749" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__radio__hal_1ga69ff216ed79aa8b7bdee0f378bd2607b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_radio_int_enable</definition>
        <argsstring>(NRF_RADIO_Type *p_reg, uint32_t mask)</argsstring>
        <name>nrf_radio_int_enable</name>
        <param>
          <type>NRF_RADIO_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Function for enabling specified RADIO interrupts. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of interrupts to be enabled. Use <ref refid="group__nrf__radio__hal_1ga73ab58523931ff53d367f0fda54a545f" kindref="member">nrf_radio_int_mask_t</ref> values for bit masking. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_radio.h" line="1639" column="24" bodyfile="hal/nrf_radio.h" bodystart="1639" bodyend="1646" declfile="hal/nrf_radio.h" declline="758" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__radio__hal_1ga9405c7546f98d1a3a4408a8ef6677094" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_radio_int_disable</definition>
        <argsstring>(NRF_RADIO_Type *p_reg, uint32_t mask)</argsstring>
        <name>nrf_radio_int_disable</name>
        <param>
          <type>NRF_RADIO_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Function for disabling specified RADIO interrupts. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of interrupts to be disabled. Use <ref refid="group__nrf__radio__hal_1ga73ab58523931ff53d367f0fda54a545f" kindref="member">nrf_radio_int_mask_t</ref> values for bit masking. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_radio.h" line="1648" column="24" bodyfile="hal/nrf_radio.h" bodystart="1648" bodyend="1655" declfile="hal/nrf_radio.h" declline="767" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__radio__hal_1gaae5190782f876f0d8b69c8298259f2c7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_radio_int_enable_check</definition>
        <argsstring>(NRF_RADIO_Type const *p_reg, uint32_t mask)</argsstring>
        <name>nrf_radio_int_enable_check</name>
        <param>
          <type>NRF_RADIO_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Function for checking if the specified interrupts are enabled. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of interrupts to be checked. Use <ref refid="group__nrf__radio__hal_1ga73ab58523931ff53d367f0fda54a545f" kindref="member">nrf_radio_int_mask_t</ref> values for bit masking.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Mask of enabled interrupts. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_radio.h" line="1657" column="28" bodyfile="hal/nrf_radio.h" bodystart="1657" bodyend="1664" declfile="hal/nrf_radio.h" declline="778" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__radio__hal_1gaed6f1018c5d7a16a910e2af53f35fc85" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_radio_subscribe_set</definition>
        <argsstring>(NRF_RADIO_Type *p_reg, nrf_radio_task_t task, uint8_t channel)</argsstring>
        <name>nrf_radio_subscribe_set</name>
        <param>
          <type>NRF_RADIO_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__radio__hal_1ga607fff2f027c323b3dc8af40ab489a2f" kindref="member">nrf_radio_task_t</ref></type>
          <declname>task</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>channel</declname>
        </param>
        <briefdescription>
<para>Function for setting the subscribe configuration for a given RADIO task. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">task</parametername>
</parameternamelist>
<parameterdescription>
<para>Task for which to set the configuration. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">channel</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel through which to subscribe events. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_radio.h" line="789" column="24" declfile="hal/nrf_radio.h" declline="789" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__radio__hal_1gae69ee57dd4175dfc9660cf994b8a8035" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_radio_subscribe_clear</definition>
        <argsstring>(NRF_RADIO_Type *p_reg, nrf_radio_task_t task)</argsstring>
        <name>nrf_radio_subscribe_clear</name>
        <param>
          <type>NRF_RADIO_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__radio__hal_1ga607fff2f027c323b3dc8af40ab489a2f" kindref="member">nrf_radio_task_t</ref></type>
          <declname>task</declname>
        </param>
        <briefdescription>
<para>Function for clearing the subscribe configuration for a given RADIO task. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">task</parametername>
</parameternamelist>
<parameterdescription>
<para>Task for which to clear the configuration. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_radio.h" line="800" column="24" declfile="hal/nrf_radio.h" declline="800" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__radio__hal_1ga2746b85fd6b490195aef6b8740e8e62b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_radio_publish_set</definition>
        <argsstring>(NRF_RADIO_Type *p_reg, nrf_radio_event_t event, uint8_t channel)</argsstring>
        <name>nrf_radio_publish_set</name>
        <param>
          <type>NRF_RADIO_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__radio__hal_1ga7c4b15ec33a0704a9caa2fa0b36e98bb" kindref="member">nrf_radio_event_t</ref></type>
          <declname>event</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>channel</declname>
        </param>
        <briefdescription>
<para>Function for setting the publish configuration for a given RADIO event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event for which to set the configuration. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">channel</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel through which to publish the event. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_radio.h" line="811" column="24" declfile="hal/nrf_radio.h" declline="811" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__radio__hal_1gaf7652e300e57600c73bb2567f728aa1e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_radio_publish_clear</definition>
        <argsstring>(NRF_RADIO_Type *p_reg, nrf_radio_event_t event)</argsstring>
        <name>nrf_radio_publish_clear</name>
        <param>
          <type>NRF_RADIO_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__radio__hal_1ga7c4b15ec33a0704a9caa2fa0b36e98bb" kindref="member">nrf_radio_event_t</ref></type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>Function for clearing the publish configuration for a given RADIO event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event for which to clear the configuration. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_radio.h" line="822" column="24" declfile="hal/nrf_radio.h" declline="822" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__radio__hal_1gab3f2df22572330363d9dc90de1a1b30e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE bool</type>
        <definition>NRF_STATIC_INLINE bool nrf_radio_crc_status_check</definition>
        <argsstring>(NRF_RADIO_Type const *p_reg)</argsstring>
        <name>nrf_radio_crc_status_check</name>
        <param>
          <type>NRF_RADIO_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting CRC status of last received packet. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>The packet was received without CRC error. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>The packet was received with CRC error. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_radio.h" line="1696" column="24" bodyfile="hal/nrf_radio.h" bodystart="1696" bodyend="1700" declfile="hal/nrf_radio.h" declline="834" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__radio__hal_1gacc37a3877b0c545ce6552760354c7460" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint8_t</type>
        <definition>NRF_STATIC_INLINE uint8_t nrf_radio_rxmatch_get</definition>
        <argsstring>(NRF_RADIO_Type const *p_reg)</argsstring>
        <name>nrf_radio_rxmatch_get</name>
        <param>
          <type>NRF_RADIO_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting the received address. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Received address. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_radio.h" line="1702" column="27" bodyfile="hal/nrf_radio.h" bodystart="1702" bodyend="1705" declfile="hal/nrf_radio.h" declline="843" declcolumn="27"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__radio__hal_1ga17d4cc3f5e15481ac6265a832acf896e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_radio_rxcrc_get</definition>
        <argsstring>(NRF_RADIO_Type const *p_reg)</argsstring>
        <name>nrf_radio_rxcrc_get</name>
        <param>
          <type>NRF_RADIO_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting CRC field of the last received packet. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>CRC field of previously received packet. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_radio.h" line="1707" column="28" bodyfile="hal/nrf_radio.h" bodystart="1707" bodyend="1710" declfile="hal/nrf_radio.h" declline="852" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__radio__hal_1gadc7960a01d313bab770fdbc3cda783d2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint8_t</type>
        <definition>NRF_STATIC_INLINE uint8_t nrf_radio_dai_get</definition>
        <argsstring>(NRF_RADIO_Type const *p_reg)</argsstring>
        <name>nrf_radio_dai_get</name>
        <param>
          <type>NRF_RADIO_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting the device address match index. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Device adress match index. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_radio.h" line="1712" column="27" bodyfile="hal/nrf_radio.h" bodystart="1712" bodyend="1715" declfile="hal/nrf_radio.h" declline="861" declcolumn="27"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__radio__hal_1gaa0025b27a99d784ff85ccbfe2ee58f97" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint8_t</type>
        <definition>NRF_STATIC_INLINE uint8_t nrf_radio_pdustat_get</definition>
        <argsstring>(NRF_RADIO_Type const *p_reg)</argsstring>
        <name>nrf_radio_pdustat_get</name>
        <param>
          <type>NRF_RADIO_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting status on payload length. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>The payload is lesser than PCNF1.MAXLEN. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>1</parametername>
</parameternamelist>
<parameterdescription>
<para>The payload is greater than PCNF1.MAXLEN. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_radio.h" line="872" column="27" declfile="hal/nrf_radio.h" declline="872" declcolumn="27"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__radio__hal_1ga2b8c779d8e91304b2f184688fa4eada4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint8_t</type>
        <definition>NRF_STATIC_INLINE uint8_t nrf_radio_cistat_get</definition>
        <argsstring>(NRF_RADIO_Type const *p_reg)</argsstring>
        <name>nrf_radio_cistat_get</name>
        <param>
          <type>NRF_RADIO_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting status on what rate packet is received with in Long Range. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>The frame is received at 125kbps. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>1</parametername>
</parameternamelist>
<parameterdescription>
<para>The frame is received at 500kbps. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_radio.h" line="884" column="27" declfile="hal/nrf_radio.h" declline="884" declcolumn="27"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__radio__hal_1ga19e2b6c37fd522fc4cc526f58efc03c8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_radio_packetptr_set</definition>
        <argsstring>(NRF_RADIO_Type *p_reg, void const *p_packet)</argsstring>
        <name>nrf_radio_packetptr_set</name>
        <param>
          <type>NRF_RADIO_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>void const *</type>
          <declname>p_packet</declname>
        </param>
        <briefdescription>
<para>Function for setting packet pointer to given location in memory. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">p_packet</parametername>
</parameternamelist>
<parameterdescription>
<para>Packet pointer. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_radio.h" line="1731" column="24" bodyfile="hal/nrf_radio.h" bodystart="1731" bodyend="1734" declfile="hal/nrf_radio.h" declline="893" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__radio__hal_1gae2007ebe98fa8315ec15e47feba3bc2f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void *</type>
        <definition>NRF_STATIC_INLINE void * nrf_radio_packetptr_get</definition>
        <argsstring>(NRF_RADIO_Type const *p_reg)</argsstring>
        <name>nrf_radio_packetptr_get</name>
        <param>
          <type>NRF_RADIO_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting packet pointer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to tx or rx packet buffer. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_radio.h" line="1736" column="25" bodyfile="hal/nrf_radio.h" bodystart="1736" bodyend="1739" declfile="hal/nrf_radio.h" declline="902" declcolumn="25"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__radio__hal_1ga5336279c1fd3e4ef5f6a28c2705eee13" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_radio_frequency_set</definition>
        <argsstring>(NRF_RADIO_Type *p_reg, uint16_t radio_frequency)</argsstring>
        <name>nrf_radio_frequency_set</name>
        <param>
          <type>NRF_RADIO_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>radio_frequency</declname>
        </param>
        <briefdescription>
<para>Function for setting the radio frequency. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">radio_frequency</parametername>
</parameternamelist>
<parameterdescription>
<para>Frequency in MHz. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_radio.h" line="1741" column="24" bodyfile="hal/nrf_radio.h" bodystart="1741" bodyend="1763" declfile="hal/nrf_radio.h" declline="910" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__radio__hal_1gae4f554230e5f845c82ac12db3615df64" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint16_t</type>
        <definition>NRF_STATIC_INLINE uint16_t nrf_radio_frequency_get</definition>
        <argsstring>(NRF_RADIO_Type const *p_reg)</argsstring>
        <name>nrf_radio_frequency_get</name>
        <param>
          <type>NRF_RADIO_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting the radio frequency. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Frequency in MHz. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_radio.h" line="1765" column="28" bodyfile="hal/nrf_radio.h" bodystart="1765" bodyend="1782" declfile="hal/nrf_radio.h" declline="919" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__radio__hal_1gaa4a51c240d14e2135455dfb9f8d836ba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_radio_txpower_set</definition>
        <argsstring>(NRF_RADIO_Type *p_reg, nrf_radio_txpower_t tx_power)</argsstring>
        <name>nrf_radio_txpower_set</name>
        <param>
          <type>NRF_RADIO_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__radio__hal_1gaf10bff1d03d8156b3af56540701d6b3d" kindref="member">nrf_radio_txpower_t</ref></type>
          <declname>tx_power</declname>
        </param>
        <briefdescription>
<para>Function for setting the radio transmit power. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">tx_power</parametername>
</parameternamelist>
<parameterdescription>
<para>Transmit power of the radio [dBm]. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_radio.h" line="1784" column="24" bodyfile="hal/nrf_radio.h" bodystart="1784" bodyend="1787" declfile="hal/nrf_radio.h" declline="927" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__radio__hal_1ga4e474b7e5f776a61f799fe847536f3d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE <ref refid="group__nrf__radio__hal_1gaf10bff1d03d8156b3af56540701d6b3d" kindref="member">nrf_radio_txpower_t</ref></type>
        <definition>NRF_STATIC_INLINE nrf_radio_txpower_t nrf_radio_txpower_get</definition>
        <argsstring>(NRF_RADIO_Type const *p_reg)</argsstring>
        <name>nrf_radio_txpower_get</name>
        <param>
          <type>NRF_RADIO_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting the radio transmit power. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Transmit power of the radio. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_radio.h" line="1789" column="39" bodyfile="hal/nrf_radio.h" bodystart="1789" bodyend="1792" declfile="hal/nrf_radio.h" declline="936" declcolumn="39"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__radio__hal_1gafc8fff377c15ae2c926bf1daaf9913a5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_radio_mode_set</definition>
        <argsstring>(NRF_RADIO_Type *p_reg, nrf_radio_mode_t radio_mode)</argsstring>
        <name>nrf_radio_mode_set</name>
        <param>
          <type>NRF_RADIO_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__radio__hal_1gacf631e29d43c93acac290a18850e9c40" kindref="member">nrf_radio_mode_t</ref></type>
          <declname>radio_mode</declname>
        </param>
        <briefdescription>
<para>Function for setting the radio data rate and modulation settings. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">radio_mode</parametername>
</parameternamelist>
<parameterdescription>
<para>Radio data rate and modulation. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_radio.h" line="1794" column="24" bodyfile="hal/nrf_radio.h" bodystart="1794" bodyend="1797" declfile="hal/nrf_radio.h" declline="944" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__radio__hal_1gaac5ea7fe15b9208f86fe7a5ecce15229" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE <ref refid="group__nrf__radio__hal_1gacf631e29d43c93acac290a18850e9c40" kindref="member">nrf_radio_mode_t</ref></type>
        <definition>NRF_STATIC_INLINE nrf_radio_mode_t nrf_radio_mode_get</definition>
        <argsstring>(NRF_RADIO_Type const *p_reg)</argsstring>
        <name>nrf_radio_mode_get</name>
        <param>
          <type>NRF_RADIO_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting Radio data rate and modulation settings. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Radio data rate and modulation. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_radio.h" line="1799" column="36" bodyfile="hal/nrf_radio.h" bodystart="1799" bodyend="1802" declfile="hal/nrf_radio.h" declline="953" declcolumn="36"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__radio__hal_1ga3ecb0f981f451b970810b457c70abcce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_radio_packet_configure</definition>
        <argsstring>(NRF_RADIO_Type *p_reg, nrf_radio_packet_conf_t const *p_config)</argsstring>
        <name>nrf_radio_packet_configure</name>
        <param>
          <type>NRF_RADIO_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="structnrf__radio__packet__conf__t" kindref="compound">nrf_radio_packet_conf_t</ref> const *</type>
          <declname>p_config</declname>
        </param>
        <briefdescription>
<para>Function for setting the packet configuration. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">p_config</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure with packet configuration. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_radio.h" line="1804" column="24" bodyfile="hal/nrf_radio.h" bodystart="1804" bodyend="1840" declfile="hal/nrf_radio.h" declline="961" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__radio__hal_1gaebf659968f4b463db0b36350ee1fd194" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_radio_base0_set</definition>
        <argsstring>(NRF_RADIO_Type *p_reg, uint32_t address)</argsstring>
        <name>nrf_radio_base0_set</name>
        <param>
          <type>NRF_RADIO_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>address</declname>
        </param>
        <briefdescription>
<para>Function for setting the base address 0. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">address</parametername>
</parameternamelist>
<parameterdescription>
<para>Base address 0 value. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_radio.h" line="1842" column="24" bodyfile="hal/nrf_radio.h" bodystart="1842" bodyend="1845" declfile="hal/nrf_radio.h" declline="970" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__radio__hal_1ga93bf51bdcbd9fd0cb9af6c90e6127e50" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_radio_base0_get</definition>
        <argsstring>(NRF_RADIO_Type const *p_reg)</argsstring>
        <name>nrf_radio_base0_get</name>
        <param>
          <type>NRF_RADIO_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting the base address 0. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Base address 0. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_radio.h" line="1847" column="28" bodyfile="hal/nrf_radio.h" bodystart="1847" bodyend="1850" declfile="hal/nrf_radio.h" declline="979" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__radio__hal_1ga3485758d1cd9c6645ccbc0b601e7bd13" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_radio_base1_set</definition>
        <argsstring>(NRF_RADIO_Type *p_reg, uint32_t address)</argsstring>
        <name>nrf_radio_base1_set</name>
        <param>
          <type>NRF_RADIO_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>address</declname>
        </param>
        <briefdescription>
<para>Function for setting Base address 1. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">address</parametername>
</parameternamelist>
<parameterdescription>
<para>Base address 1 value. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_radio.h" line="1852" column="24" bodyfile="hal/nrf_radio.h" bodystart="1852" bodyend="1855" declfile="hal/nrf_radio.h" declline="987" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__radio__hal_1gad3ce36538b713e9d6186af3d0ae0b29d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_radio_base1_get</definition>
        <argsstring>(NRF_RADIO_Type const *p_reg)</argsstring>
        <name>nrf_radio_base1_get</name>
        <param>
          <type>NRF_RADIO_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting base address 1. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Base address 1. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_radio.h" line="1857" column="28" bodyfile="hal/nrf_radio.h" bodystart="1857" bodyend="1860" declfile="hal/nrf_radio.h" declline="996" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__radio__hal_1ga9c75649dbb9e5b374f662dfb0787e445" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_radio_prefix0_set</definition>
        <argsstring>(NRF_RADIO_Type *p_reg, uint32_t prefixes)</argsstring>
        <name>nrf_radio_prefix0_set</name>
        <param>
          <type>NRF_RADIO_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>prefixes</declname>
        </param>
        <briefdescription>
<para>Function for setting prefixes bytes for logical addresses 0-3. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">prefixes</parametername>
</parameternamelist>
<parameterdescription>
<para>Prefixes bytes for logical addresses 0-3. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_radio.h" line="1862" column="24" bodyfile="hal/nrf_radio.h" bodystart="1862" bodyend="1865" declfile="hal/nrf_radio.h" declline="1004" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__radio__hal_1ga2bba67daa09782376a4fb4b0432a0fed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_radio_prefix0_get</definition>
        <argsstring>(NRF_RADIO_Type const *p_reg)</argsstring>
        <name>nrf_radio_prefix0_get</name>
        <param>
          <type>NRF_RADIO_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting prefixes bytes for logical addresses 0-3. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Prefixes bytes for logical addresses 0-3 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_radio.h" line="1867" column="28" bodyfile="hal/nrf_radio.h" bodystart="1867" bodyend="1870" declfile="hal/nrf_radio.h" declline="1013" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__radio__hal_1ga71c5eae49d69976121d9ea00904023d3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_radio_prefix1_set</definition>
        <argsstring>(NRF_RADIO_Type *p_reg, uint32_t prefixes)</argsstring>
        <name>nrf_radio_prefix1_set</name>
        <param>
          <type>NRF_RADIO_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>prefixes</declname>
        </param>
        <briefdescription>
<para>Function for setting prefixes bytes for logical addresses 4-7. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">prefixes</parametername>
</parameternamelist>
<parameterdescription>
<para>Prefixes bytes for logical addresses 4-7. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_radio.h" line="1872" column="24" bodyfile="hal/nrf_radio.h" bodystart="1872" bodyend="1875" declfile="hal/nrf_radio.h" declline="1021" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__radio__hal_1ga7ee51cb90e0c8f933f44998c997f447a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_radio_prefix1_get</definition>
        <argsstring>(NRF_RADIO_Type const *p_reg)</argsstring>
        <name>nrf_radio_prefix1_get</name>
        <param>
          <type>NRF_RADIO_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting prefixes bytes for logical addresses 4-7. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Prefixes bytes for logical addresses 4-7 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_radio.h" line="1877" column="28" bodyfile="hal/nrf_radio.h" bodystart="1877" bodyend="1880" declfile="hal/nrf_radio.h" declline="1030" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__radio__hal_1gae88f74d8e994e7075f26be55845c832f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_radio_txaddress_set</definition>
        <argsstring>(NRF_RADIO_Type *p_reg, uint8_t txaddress)</argsstring>
        <name>nrf_radio_txaddress_set</name>
        <param>
          <type>NRF_RADIO_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>txaddress</declname>
        </param>
        <briefdescription>
<para>Function for setting the transmit address. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">txaddress</parametername>
</parameternamelist>
<parameterdescription>
<para>Logical address to be used when transmitting a packet. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_radio.h" line="1882" column="24" bodyfile="hal/nrf_radio.h" bodystart="1882" bodyend="1885" declfile="hal/nrf_radio.h" declline="1038" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__radio__hal_1ga6991cd5904a1d3ca463285cc99cf6cdd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint8_t</type>
        <definition>NRF_STATIC_INLINE uint8_t nrf_radio_txaddress_get</definition>
        <argsstring>(NRF_RADIO_Type const *p_reg)</argsstring>
        <name>nrf_radio_txaddress_get</name>
        <param>
          <type>NRF_RADIO_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting the transmit address select. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Logical address to be used when transmitting a packet. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_radio.h" line="1887" column="27" bodyfile="hal/nrf_radio.h" bodystart="1887" bodyend="1891" declfile="hal/nrf_radio.h" declline="1047" declcolumn="27"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__radio__hal_1gad397ff61bf37da3082f5e80820da4826" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_radio_rxaddresses_set</definition>
        <argsstring>(NRF_RADIO_Type *p_reg, uint8_t rxaddresses)</argsstring>
        <name>nrf_radio_rxaddresses_set</name>
        <param>
          <type>NRF_RADIO_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>rxaddresses</declname>
        </param>
        <briefdescription>
<para>Function for for selecting the receive addresses. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">rxaddresses</parametername>
</parameternamelist>
<parameterdescription>
<para>Enable or disable reception on logical address i. Read more in the Product Specification. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_radio.h" line="1893" column="24" bodyfile="hal/nrf_radio.h" bodystart="1893" bodyend="1896" declfile="hal/nrf_radio.h" declline="1056" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__radio__hal_1ga40aab0d76bc5761fc2f7922059b873d0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint8_t</type>
        <definition>NRF_STATIC_INLINE uint8_t nrf_radio_rxaddresses_get</definition>
        <argsstring>(NRF_RADIO_Type const *p_reg)</argsstring>
        <name>nrf_radio_rxaddresses_get</name>
        <param>
          <type>NRF_RADIO_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting receive address select. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Receive address select. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_radio.h" line="1898" column="27" bodyfile="hal/nrf_radio.h" bodystart="1898" bodyend="1901" declfile="hal/nrf_radio.h" declline="1065" declcolumn="27"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__radio__hal_1ga4ca667b05c3dea42b646b8c57009e868" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_radio_crc_configure</definition>
        <argsstring>(NRF_RADIO_Type *p_reg, uint8_t crc_length, nrf_radio_crc_addr_t crc_address, uint32_t crc_polynominal)</argsstring>
        <name>nrf_radio_crc_configure</name>
        <param>
          <type>NRF_RADIO_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>crc_length</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__radio__hal_1ga9e800ae5bddb82989b601ec2407ea229" kindref="member">nrf_radio_crc_addr_t</ref></type>
          <declname>crc_address</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>crc_polynominal</declname>
        </param>
        <briefdescription>
<para>Function for configure CRC. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">crc_length</parametername>
</parameternamelist>
<parameterdescription>
<para>CRC length in number of bytes [0-3]. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">crc_address</parametername>
</parameternamelist>
<parameterdescription>
<para>Include or exclude packet address field out of CRC. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">crc_polynominal</parametername>
</parameternamelist>
<parameterdescription>
<para>CRC polynominal to set. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_radio.h" line="1903" column="24" bodyfile="hal/nrf_radio.h" bodystart="1903" bodyend="1915" declfile="hal/nrf_radio.h" declline="1075" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__radio__hal_1ga65c98c3220300b11c3d00fd03764d1e5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_radio_crcinit_set</definition>
        <argsstring>(NRF_RADIO_Type *p_reg, uint32_t crc_init_value)</argsstring>
        <name>nrf_radio_crcinit_set</name>
        <param>
          <type>NRF_RADIO_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>crc_init_value</declname>
        </param>
        <briefdescription>
<para>Function for setting CRC initial value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">crc_init_value</parametername>
</parameternamelist>
<parameterdescription>
<para>CRC initial value </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_radio.h" line="1917" column="24" bodyfile="hal/nrf_radio.h" bodystart="1917" bodyend="1920" declfile="hal/nrf_radio.h" declline="1086" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__radio__hal_1gadeed410584b6e4cfa4336c81260ad207" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_radio_crcinit_get</definition>
        <argsstring>(NRF_RADIO_Type const *p_reg)</argsstring>
        <name>nrf_radio_crcinit_get</name>
        <param>
          <type>NRF_RADIO_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting CRC initial value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>CRC initial value. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_radio.h" line="1922" column="28" bodyfile="hal/nrf_radio.h" bodystart="1922" bodyend="1925" declfile="hal/nrf_radio.h" declline="1095" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__radio__hal_1ga8c63884b8ce414fcdf14a1232b9f1886" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_radio_ifs_set</definition>
        <argsstring>(NRF_RADIO_Type *p_reg, uint32_t radio_ifs)</argsstring>
        <name>nrf_radio_ifs_set</name>
        <param>
          <type>NRF_RADIO_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>radio_ifs</declname>
        </param>
        <briefdescription>
<para>Function for setting Inter Frame Spacing interval. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">radio_ifs</parametername>
</parameternamelist>
<parameterdescription>
<para>Inter frame spacing interval [us]. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_radio.h" line="1927" column="24" bodyfile="hal/nrf_radio.h" bodystart="1927" bodyend="1930" declfile="hal/nrf_radio.h" declline="1103" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__radio__hal_1ga4ccdcb4a2ed6074e48e33fa973b5d4ca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_radio_ifs_get</definition>
        <argsstring>(NRF_RADIO_Type const *p_reg)</argsstring>
        <name>nrf_radio_ifs_get</name>
        <param>
          <type>NRF_RADIO_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting Inter Frame Spacing interval. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Inter frame spacing interval [us]. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_radio.h" line="1932" column="28" bodyfile="hal/nrf_radio.h" bodystart="1932" bodyend="1935" declfile="hal/nrf_radio.h" declline="1112" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__radio__hal_1gafd04597ddc9b24925cccff5d53a40059" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint8_t</type>
        <definition>NRF_STATIC_INLINE uint8_t nrf_radio_rssi_sample_get</definition>
        <argsstring>(NRF_RADIO_Type const *p_reg)</argsstring>
        <name>nrf_radio_rssi_sample_get</name>
        <param>
          <type>NRF_RADIO_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting RSSI sample result. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>The read value is a positive value while the actual received signal is a negative value. Actual received signal strength is therefore as follows: received signal strength = - read_value dBm .</para>
</simplesect>
<simplesect kind="return"><para>RSSI sample result. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_radio.h" line="1937" column="27" bodyfile="hal/nrf_radio.h" bodystart="1937" bodyend="1941" declfile="hal/nrf_radio.h" declline="1125" declcolumn="27"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__radio__hal_1gacfe496cdb278f3616df3e8aa187e8f28" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE <ref refid="group__nrf__radio__hal_1ga4ea9b1af13c23dc9316d60ca649b71dc" kindref="member">nrf_radio_state_t</ref></type>
        <definition>NRF_STATIC_INLINE nrf_radio_state_t nrf_radio_state_get</definition>
        <argsstring>(NRF_RADIO_Type const *p_reg)</argsstring>
        <name>nrf_radio_state_get</name>
        <param>
          <type>NRF_RADIO_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting the current state of the radio module. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Current radio state. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_radio.h" line="1943" column="37" bodyfile="hal/nrf_radio.h" bodystart="1943" bodyend="1946" declfile="hal/nrf_radio.h" declline="1134" declcolumn="37"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__radio__hal_1ga638aefc787fd5638fb94119e368f71ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_radio_datawhiteiv_set</definition>
        <argsstring>(NRF_RADIO_Type *p_reg, uint8_t datawhiteiv)</argsstring>
        <name>nrf_radio_datawhiteiv_set</name>
        <param>
          <type>NRF_RADIO_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>datawhiteiv</declname>
        </param>
        <briefdescription>
<para>Function for setting the data whitening initial value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">datawhiteiv</parametername>
</parameternamelist>
<parameterdescription>
<para>Data whitening initial value. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_radio.h" line="1948" column="24" bodyfile="hal/nrf_radio.h" bodystart="1948" bodyend="1956" declfile="hal/nrf_radio.h" declline="1142" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__radio__hal_1ga0aabddcd53ebbebe965f6ad38ab292bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint8_t</type>
        <definition>NRF_STATIC_INLINE uint8_t nrf_radio_datawhiteiv_get</definition>
        <argsstring>(NRF_RADIO_Type const *p_reg)</argsstring>
        <name>nrf_radio_datawhiteiv_get</name>
        <param>
          <type>NRF_RADIO_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting the data whitening initial value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Data whitening initial value. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_radio.h" line="1958" column="27" bodyfile="hal/nrf_radio.h" bodystart="1958" bodyend="1965" declfile="hal/nrf_radio.h" declline="1151" declcolumn="27"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__radio__hal_1ga54628c088d83bea509646485b829682d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_radio_bcc_set</definition>
        <argsstring>(NRF_RADIO_Type *p_reg, uint32_t radio_bcc)</argsstring>
        <name>nrf_radio_bcc_set</name>
        <param>
          <type>NRF_RADIO_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>radio_bcc</declname>
        </param>
        <briefdescription>
<para>Function for setting Bit counter compare. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">radio_bcc</parametername>
</parameternamelist>
<parameterdescription>
<para>Bit counter compare [bits]. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_radio.h" line="1967" column="24" bodyfile="hal/nrf_radio.h" bodystart="1967" bodyend="1970" declfile="hal/nrf_radio.h" declline="1159" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__radio__hal_1gabde34a675642ac812c9a94d8cd7b8c69" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_radio_bcc_get</definition>
        <argsstring>(NRF_RADIO_Type const *p_reg)</argsstring>
        <name>nrf_radio_bcc_get</name>
        <param>
          <type>NRF_RADIO_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting Bit counter compare. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Bit counter compare. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_radio.h" line="1972" column="28" bodyfile="hal/nrf_radio.h" bodystart="1972" bodyend="1975" declfile="hal/nrf_radio.h" declline="1168" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__radio__hal_1ga4d7da491132adbd997aa6cf6f96ae61a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_radio_dab_set</definition>
        <argsstring>(NRF_RADIO_Type *p_reg, uint32_t dab_value, uint8_t segment)</argsstring>
        <name>nrf_radio_dab_set</name>
        <param>
          <type>NRF_RADIO_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>dab_value</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>segment</declname>
        </param>
        <briefdescription>
<para>Function for setting Device address base segment. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">dab_value</parametername>
</parameternamelist>
<parameterdescription>
<para>Particular base segment value. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">segment</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of the particular Device address base segment register. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_radio.h" line="1977" column="24" bodyfile="hal/nrf_radio.h" bodystart="1977" bodyend="1983" declfile="hal/nrf_radio.h" declline="1177" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__radio__hal_1gac0d3c65514eab7218eb4d44a5b3e5b1d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_radio_dab_get</definition>
        <argsstring>(NRF_RADIO_Type const *p_reg, uint8_t segment)</argsstring>
        <name>nrf_radio_dab_get</name>
        <param>
          <type>NRF_RADIO_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>segment</declname>
        </param>
        <briefdescription>
<para>Function for getting Device address base segment. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">segment</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of the Device address base segment.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Particular segment of the Device address base. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_radio.h" line="1985" column="28" bodyfile="hal/nrf_radio.h" bodystart="1985" bodyend="1989" declfile="hal/nrf_radio.h" declline="1189" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__radio__hal_1ga9517e6bc36dabadec2a92e069503e2fa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_radio_dap_set</definition>
        <argsstring>(NRF_RADIO_Type *p_reg, uint16_t dap_value, uint8_t prefix_index)</argsstring>
        <name>nrf_radio_dap_set</name>
        <param>
          <type>NRF_RADIO_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>dap_value</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>prefix_index</declname>
        </param>
        <briefdescription>
<para>Function for setting device address prefix. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">dap_value</parametername>
</parameternamelist>
<parameterdescription>
<para>Particular device address prefix value. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">prefix_index</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of the particular device address prefix register. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_radio.h" line="1991" column="24" bodyfile="hal/nrf_radio.h" bodystart="1991" bodyend="1997" declfile="hal/nrf_radio.h" declline="1198" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__radio__hal_1gac4aeecef4b8bf243b041d95a1a707b75" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_radio_dap_get</definition>
        <argsstring>(NRF_RADIO_Type const *p_reg, uint8_t prefix_index)</argsstring>
        <name>nrf_radio_dap_get</name>
        <param>
          <type>NRF_RADIO_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>prefix_index</declname>
        </param>
        <briefdescription>
<para>Function for getting Device address prefix. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">prefix_index</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of the Device address prefix segment.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Particular segment of the Device address prefix. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_radio.h" line="1999" column="28" bodyfile="hal/nrf_radio.h" bodystart="1999" bodyend="2003" declfile="hal/nrf_radio.h" declline="1210" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__radio__hal_1ga5111f4c5b1f8e556bd074212207b73fa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_radio_dacnf_set</definition>
        <argsstring>(NRF_RADIO_Type *p_reg, uint8_t ena, uint8_t txadd)</argsstring>
        <name>nrf_radio_dacnf_set</name>
        <param>
          <type>NRF_RADIO_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>ena</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>txadd</declname>
        </param>
        <briefdescription>
<para>Function for setting device address match configuration. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Read more about configuring device address match in the Product Specification.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">ena</parametername>
</parameternamelist>
<parameterdescription>
<para>Device address matching bitmask. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">txadd</parametername>
</parameternamelist>
<parameterdescription>
<para>TxAdd bitmask. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_radio.h" line="2005" column="24" bodyfile="hal/nrf_radio.h" bodystart="2005" bodyend="2009" declfile="hal/nrf_radio.h" declline="1221" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__radio__hal_1ga3fc6cb32144b31cd6cb23317031baa14" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint8_t</type>
        <definition>NRF_STATIC_INLINE uint8_t nrf_radio_dacnf_ena_get</definition>
        <argsstring>(NRF_RADIO_Type const *p_reg)</argsstring>
        <name>nrf_radio_dacnf_ena_get</name>
        <param>
          <type>NRF_RADIO_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting ENA field of the Device address match configuration register. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>ENA field of the Device address match configuration register. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_radio.h" line="2011" column="27" bodyfile="hal/nrf_radio.h" bodystart="2011" bodyend="2021" declfile="hal/nrf_radio.h" declline="1230" declcolumn="27"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__radio__hal_1ga97152ce4b608445f2b011b6268efdf9a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint8_t</type>
        <definition>NRF_STATIC_INLINE uint8_t nrf_radio_dacnf_txadd_get</definition>
        <argsstring>(NRF_RADIO_Type const *p_reg)</argsstring>
        <name>nrf_radio_dacnf_txadd_get</name>
        <param>
          <type>NRF_RADIO_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting TXADD field of the Device address match configuration register. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>TXADD field of the Device address match configuration register. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_radio.h" line="2023" column="27" bodyfile="hal/nrf_radio.h" bodystart="2023" bodyend="2033" declfile="hal/nrf_radio.h" declline="1239" declcolumn="27"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__radio__hal_1gafe19206475193a6ae885d35aa717621d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_radio_mhmu_search_pattern_set</definition>
        <argsstring>(NRF_RADIO_Type *p_reg, uint32_t radio_mhmu_search_pattern)</argsstring>
        <name>nrf_radio_mhmu_search_pattern_set</name>
        <param>
          <type>NRF_RADIO_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>radio_mhmu_search_pattern</declname>
        </param>
        <briefdescription>
<para>Function for setting MAC Header Match Unit search pattern configuration. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">radio_mhmu_search_pattern</parametername>
</parameternamelist>
<parameterdescription>
<para>Search Pattern Configuration. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_radio.h" line="1250" column="6" declfile="hal/nrf_radio.h" declline="1250" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__radio__hal_1ga6c661a8c9632e1c65a54d90c2db249db" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_radio_mhmu_search_pattern_get</definition>
        <argsstring>(NRF_RADIO_Type const *p_reg)</argsstring>
        <name>nrf_radio_mhmu_search_pattern_get</name>
        <param>
          <type>NRF_RADIO_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting MAC Header Match Unit search pattern configuration. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Search Pattern Configuration. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_radio.h" line="1260" column="28" declfile="hal/nrf_radio.h" declline="1260" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__radio__hal_1ga9a0edc87214f5b7df9bbb5b51c23e642" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_radio_mhmu_pattern_mask_set</definition>
        <argsstring>(NRF_RADIO_Type *p_reg, uint32_t radio_mhmu_pattern_mask)</argsstring>
        <name>nrf_radio_mhmu_pattern_mask_set</name>
        <param>
          <type>NRF_RADIO_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>radio_mhmu_pattern_mask</declname>
        </param>
        <briefdescription>
<para>Function for setting MAC Header Match Unit pattern mask configuration. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">radio_mhmu_pattern_mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Pattern mask. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_radio.h" line="1268" column="24" declfile="hal/nrf_radio.h" declline="1268" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__radio__hal_1gaa41d70217e353ef904b325a74048b9ba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_radio_mhmu_pattern_mask_get</definition>
        <argsstring>(NRF_RADIO_Type const *p_reg)</argsstring>
        <name>nrf_radio_mhmu_pattern_mask_get</name>
        <param>
          <type>NRF_RADIO_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting MAC Header Match Unit pattern mask configuration. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pattern mask. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_radio.h" line="1278" column="28" declfile="hal/nrf_radio.h" declline="1278" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__radio__hal_1ga3012c9c314425548a834f0d420fff667" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_radio_modecnf0_set</definition>
        <argsstring>(NRF_RADIO_Type *p_reg, bool fast_ramp_up, uint8_t default_tx)</argsstring>
        <name>nrf_radio_modecnf0_set</name>
        <param>
          <type>NRF_RADIO_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>fast_ramp_up</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>default_tx</declname>
        </param>
        <briefdescription>
<para>Function for setting Radio mode configuration register 0. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">fast_ramp_up</parametername>
</parameternamelist>
<parameterdescription>
<para>Use fast radio ramp-up time </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">default_tx</parametername>
</parameternamelist>
<parameterdescription>
<para>Default TX value during inactivity. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_radio.h" line="1290" column="24" declfile="hal/nrf_radio.h" declline="1290" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__radio__hal_1gac1b7d1e3365a889f4e5eec2301f44b23" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE bool</type>
        <definition>NRF_STATIC_INLINE bool nrf_radio_modecnf0_ru_get</definition>
        <argsstring>(NRF_RADIO_Type const *p_reg)</argsstring>
        <name>nrf_radio_modecnf0_ru_get</name>
        <param>
          <type>NRF_RADIO_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting ramp-up time configuration of the Radio mode configuration register 0. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>If the ramp-up time is set to fast. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>If the ramp-up time is set to default. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_radio.h" line="1302" column="24" declfile="hal/nrf_radio.h" declline="1302" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__radio__hal_1gad111d826a2e9d30e9e72b10410ada319" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint8_t</type>
        <definition>NRF_STATIC_INLINE uint8_t nrf_radio_modecnf0_dtx_get</definition>
        <argsstring>(NRF_RADIO_Type const *p_reg)</argsstring>
        <name>nrf_radio_modecnf0_dtx_get</name>
        <param>
          <type>NRF_RADIO_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting default TX value of the Radio mode configuration register 0. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Default TX value. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_radio.h" line="1311" column="27" declfile="hal/nrf_radio.h" declline="1311" declcolumn="27"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__radio__hal_1gac3f588610775bd5e7ac12a63ef6690c6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_radio_fast_ramp_up_enable_set</definition>
        <argsstring>(NRF_RADIO_Type *p_reg, bool enable)</argsstring>
        <name>nrf_radio_fast_ramp_up_enable_set</name>
        <param>
          <type>NRF_RADIO_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>enable</declname>
        </param>
        <briefdescription>
<para>Function for enabling or disabling fast ramp-up setting. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">enable</parametername>
</parameternamelist>
<parameterdescription>
<para>True if fast ramp-up is to be enabled, false otherwise. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_radio.h" line="1321" column="24" declfile="hal/nrf_radio.h" declline="1321" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__radio__hal_1gad270e10d0413260e0ec3cc6c99ac1d5c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE bool</type>
        <definition>NRF_STATIC_INLINE bool nrf_radio_fast_ramp_up_check</definition>
        <argsstring>(NRF_RADIO_Type const *p_reg)</argsstring>
        <name>nrf_radio_fast_ramp_up_check</name>
        <param>
          <type>NRF_RADIO_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for checking fast ramp-up time configuration. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true If the ramp-up time is set to fast. </para>
</simplesect>
<simplesect kind="return"><para>false If the ramp-up time is set to default compatible with 180nm radio. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_radio.h" line="1331" column="24" declfile="hal/nrf_radio.h" declline="1331" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__radio__hal_1gabe40e1e0f7ef1d6d0a3266875dc9a426" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_radio_sfd_set</definition>
        <argsstring>(NRF_RADIO_Type *p_reg, uint8_t sfd)</argsstring>
        <name>nrf_radio_sfd_set</name>
        <param>
          <type>NRF_RADIO_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>sfd</declname>
        </param>
        <briefdescription>
<para>Function for setting IEEE 802.15.4 start of frame delimiter. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">sfd</parametername>
</parameternamelist>
<parameterdescription>
<para>IEEE 802.15.4 start of frame delimiter. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_radio.h" line="1341" column="24" declfile="hal/nrf_radio.h" declline="1341" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__radio__hal_1gae093ea5b904d9f957a7cc91d74232f79" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint8_t</type>
        <definition>NRF_STATIC_INLINE uint8_t nrf_radio_sfd_get</definition>
        <argsstring>(NRF_RADIO_Type const *p_reg)</argsstring>
        <name>nrf_radio_sfd_get</name>
        <param>
          <type>NRF_RADIO_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting IEEE 802.15.4 start of frame delimiter. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>IEEE 802.15.4 start of frame delimiter. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_radio.h" line="1350" column="27" declfile="hal/nrf_radio.h" declline="1350" declcolumn="27"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__radio__hal_1gaf5aa628960e620b1aa2fcfd30222ab4c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_radio_ed_loop_count_set</definition>
        <argsstring>(NRF_RADIO_Type *p_reg, uint32_t ed_loop_count)</argsstring>
        <name>nrf_radio_ed_loop_count_set</name>
        <param>
          <type>NRF_RADIO_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>ed_loop_count</declname>
        </param>
        <briefdescription>
<para>Function for setting number of iterations to perform ED scan. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">ed_loop_count</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of iterations during ED procedure. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_radio.h" line="1360" column="24" declfile="hal/nrf_radio.h" declline="1360" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__radio__hal_1ga871ffceb643be94c3376ec357faa5a8c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_radio_ed_cca_period_set</definition>
        <argsstring>(NRF_RADIO_Type *p_reg, uint8_t ed_period)</argsstring>
        <name>nrf_radio_ed_cca_period_set</name>
        <param>
          <type>NRF_RADIO_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>ed_period</declname>
        </param>
        <briefdescription>
<para>Function for setting the period of a ED/CCA iteration. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">ed_period</parametername>
</parameternamelist>
<parameterdescription>
<para>Duration of a single ED/CCA iteration. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_radio.h" line="1370" column="24" declfile="hal/nrf_radio.h" declline="1370" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__radio__hal_1ga11647a756f741617dd218c0d9941fd0a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint8_t</type>
        <definition>NRF_STATIC_INLINE uint8_t nrf_radio_ed_sample_get</definition>
        <argsstring>(NRF_RADIO_Type const *p_reg)</argsstring>
        <name>nrf_radio_ed_sample_get</name>
        <param>
          <type>NRF_RADIO_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting Energy Detection level. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>IEEE 802.15.4 energy detect level. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_radio.h" line="1381" column="27" declfile="hal/nrf_radio.h" declline="1381" declcolumn="27"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__radio__hal_1gad942e9cf952a63f69d1511bfbc565050" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_radio_cca_configure</definition>
        <argsstring>(NRF_RADIO_Type *p_reg, nrf_radio_cca_mode_t cca_mode, uint8_t cca_ed_threshold, uint8_t cca_corr_threshold, uint8_t cca_corr_cnt)</argsstring>
        <name>nrf_radio_cca_configure</name>
        <param>
          <type>NRF_RADIO_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__radio__hal_1gacd20cabadc17d4eae37fff80f4e9d1e5" kindref="member">nrf_radio_cca_mode_t</ref></type>
          <declname>cca_mode</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>cca_ed_threshold</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>cca_corr_threshold</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>cca_corr_cnt</declname>
        </param>
        <briefdescription>
<para>Function for configuring the IEEE 802.15.4 clear channel assessment. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">cca_mode</parametername>
</parameternamelist>
<parameterdescription>
<para>Mode of CCA. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">cca_ed_threshold</parametername>
</parameternamelist>
<parameterdescription>
<para>Energy Detection threshold value. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">cca_corr_threshold</parametername>
</parameternamelist>
<parameterdescription>
<para>Correlator Busy Threshold. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">cca_corr_cnt</parametername>
</parameternamelist>
<parameterdescription>
<para>Limit of occurances above Correlator Threshold. When not equal to zero the correlator based signal detect is enabled. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_radio.h" line="1396" column="24" declfile="hal/nrf_radio.h" declline="1396" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__radio__hal_1ga382aeec6648cdb3fe1bc9355f076a900" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_radio_power_set</definition>
        <argsstring>(NRF_RADIO_Type *p_reg, bool radio_power)</argsstring>
        <name>nrf_radio_power_set</name>
        <param>
          <type>NRF_RADIO_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>radio_power</declname>
        </param>
        <briefdescription>
<para>Function for setting power mode of the radio peripheral. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">radio_power</parametername>
</parameternamelist>
<parameterdescription>
<para>If radio should be powered on. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_radio.h" line="1410" column="24" declfile="hal/nrf_radio.h" declline="1410" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__radio__hal_1ga3a92fd06c78602b07c884d1c96575e69" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_radio_cte_time_get</definition>
        <argsstring>(NRF_RADIO_Type const *p_reg)</argsstring>
        <name>nrf_radio_cte_time_get</name>
        <param>
          <type>NRF_RADIO_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting the CTE time parsed from received packet. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>CTE time. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_radio.h" line="1421" column="28" declfile="hal/nrf_radio.h" declline="1421" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__radio__hal_1gac310385e2369f66495ebd5fca7e8d0b2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_radio_cte_type_get</definition>
        <argsstring>(NRF_RADIO_Type const *p_reg)</argsstring>
        <name>nrf_radio_cte_type_get</name>
        <param>
          <type>NRF_RADIO_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting the CTE type parsed from received packet. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>CTE type. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_radio.h" line="1430" column="28" declfile="hal/nrf_radio.h" declline="1430" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__radio__hal_1ga13bcf8cdfb3176b80f158854377378d8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_radio_cte_rfu_get</definition>
        <argsstring>(NRF_RADIO_Type const *p_reg)</argsstring>
        <name>nrf_radio_cte_rfu_get</name>
        <param>
          <type>NRF_RADIO_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting the CTE RFU parsed from received packet. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>CTE RFU. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_radio.h" line="1439" column="28" declfile="hal/nrf_radio.h" declline="1439" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__radio__hal_1ga35f330bc5182d63d72bb32bab2174ef8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE <ref refid="group__nrf__radio__hal_1gaa6632d62276bfec4138e0688d5f73018" kindref="member">nrf_radio_dfe_switch_state_t</ref></type>
        <definition>NRF_STATIC_INLINE nrf_radio_dfe_switch_state_t nrf_radio_dfe_switch_state_get</definition>
        <argsstring>(NRF_RADIO_Type const *p_reg)</argsstring>
        <name>nrf_radio_dfe_switch_state_get</name>
        <param>
          <type>NRF_RADIO_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting the current state of DFE switching state machine. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>State of switching state machine. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_radio.h" line="1451" column="30" declfile="hal/nrf_radio.h" declline="1451" declcolumn="30"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__radio__hal_1ga92671cc220fed35d612c0f81f85fe0ff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE <ref refid="group__nrf__radio__hal_1ga8b27d0e94d3c0d4589d8876018cdcc7b" kindref="member">nrf_radio_dfe_sample_state_t</ref></type>
        <definition>NRF_STATIC_INLINE nrf_radio_dfe_sample_state_t nrf_radio_dfe_sample_state_get</definition>
        <argsstring>(NRF_RADIO_Type const *p_reg)</argsstring>
        <name>nrf_radio_dfe_sample_state_get</name>
        <param>
          <type>NRF_RADIO_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting the current state of DFE sampling state machine. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>State of sampling state machine. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_radio.h" line="1461" column="30" declfile="hal/nrf_radio.h" declline="1461" declcolumn="30"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__radio__hal_1ga46900b20699091144a2a989feaff0a66" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_radio_cteinline_configure</definition>
        <argsstring>(NRF_RADIO_Type *p_reg, nrf_radio_cteinline_conf_t const *p_config)</argsstring>
        <name>nrf_radio_cteinline_configure</name>
        <param>
          <type>NRF_RADIO_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="structnrf__radio__cteinline__conf__t" kindref="compound">nrf_radio_cteinline_conf_t</ref> const *</type>
          <declname>p_config</declname>
        </param>
        <briefdescription>
<para>Function for setting the configuration of CTE inline mode. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">p_config</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure with CTE inline mode configuration. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_radio.h" line="1471" column="24" declfile="hal/nrf_radio.h" declline="1471" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__radio__hal_1gab31f9189c3a898cde71ec102792a3b67" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_radio_dfectrl_configure</definition>
        <argsstring>(NRF_RADIO_Type *p_reg, nrf_radio_dfectrl_conf_t const *p_config)</argsstring>
        <name>nrf_radio_dfectrl_configure</name>
        <param>
          <type>NRF_RADIO_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="structnrf__radio__dfectrl__conf__t" kindref="compound">nrf_radio_dfectrl_conf_t</ref> const *</type>
          <declname>p_config</declname>
        </param>
        <briefdescription>
<para>Function for setting the direction finding configuration. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">p_config</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure with direction finding configuration. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_radio.h" line="1482" column="24" declfile="hal/nrf_radio.h" declline="1482" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__radio__hal_1ga3d5f4a42eb4bd4399bcfb240ae71c64f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_radio_dfe_pattern_pin_set</definition>
        <argsstring>(NRF_RADIO_Type *p_reg, uint32_t pin, uint8_t pos)</argsstring>
        <name>nrf_radio_dfe_pattern_pin_set</name>
        <param>
          <type>NRF_RADIO_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>pin</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>pos</declname>
        </param>
        <briefdescription>
<para>Function for configuring the specified GPIO pin for antenna control. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pin</parametername>
</parameternamelist>
<parameterdescription>
<para>Pin number. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pos</parametername>
</parameternamelist>
<parameterdescription>
<para>Position of the pin in the switching pattern configured with <ref refid="group__nrf__radio__hal_1gaabee02c2cd5d2757c44150b2ab376b34" kindref="member">nrf_radio_dfe_pattern_add()</ref> or <ref refid="group__nrf__radio__hal_1ga8d1b32585d9a0275667438eafb0fe9ff" kindref="member">nrf_radio_dfe_patterns_add()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_radio.h" line="1496" column="24" declfile="hal/nrf_radio.h" declline="1496" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__radio__hal_1gaabee02c2cd5d2757c44150b2ab376b34" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_radio_dfe_pattern_add</definition>
        <argsstring>(NRF_RADIO_Type *p_reg, uint8_t pin_mask)</argsstring>
        <name>nrf_radio_dfe_pattern_add</name>
        <param>
          <type>NRF_RADIO_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>pin_mask</declname>
        </param>
        <briefdescription>
<para>Function for adding single pattern to the array of GPIO patterns for antenna control. </para>
        </briefdescription>
        <detaileddescription>
<para>The GPIO pattern array size is 40 entries. This function configures single pattern consisting of 8 pins. To set subsequent pattern, call this function again. To get total number of currently configured patterns use <ref refid="group__nrf__radio__hal_1gaa1dd461894cce3777ef12165d93dda8a" kindref="member">nrf_radio_dfe_pattern_cnt_get()</ref>. To clear the array of GPIO patterns use <ref refid="group__nrf__radio__hal_1gaa576fb22d7447eeb644fd6c699584f54" kindref="member">nrf_radio_dfe_pattern_clear()</ref>.</para>
<para><simplesect kind="warning"><para>A minimum number of 3 patterns must be written.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pin_mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Bitmask specifying pins to be used in this switching pattern. Each bit corresponds to the index of the pin configured with <ref refid="group__nrf__radio__hal_1ga3d5f4a42eb4bd4399bcfb240ae71c64f" kindref="member">nrf_radio_dfe_pattern_pin_set()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_radio.h" line="1515" column="24" declfile="hal/nrf_radio.h" declline="1515" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__radio__hal_1ga8d1b32585d9a0275667438eafb0fe9ff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_radio_dfe_patterns_add</definition>
        <argsstring>(NRF_RADIO_Type *p_reg, uint8_t const *p_pin_masks, size_t length)</argsstring>
        <name>nrf_radio_dfe_patterns_add</name>
        <param>
          <type>NRF_RADIO_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint8_t const *</type>
          <declname>p_pin_masks</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>length</declname>
        </param>
        <briefdescription>
<para>Function for adding multiple patterns to the array of GPIO patterns for antenna control. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">p_pin_masks</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the array of bitmasks specifying pins to be used in subsequent switching patterns. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">length</parametername>
</parameternamelist>
<parameterdescription>
<para>Bitmask array length.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="group__nrf__radio__hal_1gaabee02c2cd5d2757c44150b2ab376b34" kindref="member">nrf_radio_dfe_pattern_add()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_radio.h" line="1527" column="24" declfile="hal/nrf_radio.h" declline="1527" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__radio__hal_1gaa1dd461894cce3777ef12165d93dda8a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_radio_dfe_pattern_cnt_get</definition>
        <argsstring>(NRF_RADIO_Type const *p_reg)</argsstring>
        <name>nrf_radio_dfe_pattern_cnt_get</name>
        <param>
          <type>NRF_RADIO_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting number of currently configured GPIO patterns for antenna control. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Number of patterns. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_radio.h" line="1538" column="28" declfile="hal/nrf_radio.h" declline="1538" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__radio__hal_1gaa576fb22d7447eeb644fd6c699584f54" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_radio_dfe_pattern_clear</definition>
        <argsstring>(NRF_RADIO_Type *p_reg)</argsstring>
        <name>nrf_radio_dfe_pattern_clear</name>
        <param>
          <type>NRF_RADIO_Type *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for clearing all of the currently configured GPIO patterns for antenna control. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_radio.h" line="1545" column="24" declfile="hal/nrf_radio.h" declline="1545" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__radio__hal_1gaec6ca2940b0c0da838f9d61a226109ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_radio_dfe_buffer_set</definition>
        <argsstring>(NRF_RADIO_Type *p_reg, uint32_t *p_buffer, size_t length)</argsstring>
        <name>nrf_radio_dfe_buffer_set</name>
        <param>
          <type>NRF_RADIO_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t *</type>
          <declname>p_buffer</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>length</declname>
        </param>
        <briefdescription>
<para>Function for setting the buffer for storing IQ samples or magnitude and phase pairs of the samples. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Each sample or pair is stored on a 32-bit word.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">p_buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the buffer for storing IQ samples or magnitude and phase of the samples. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">length</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum number of samples to receive. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_radio.h" line="1561" column="24" declfile="hal/nrf_radio.h" declline="1561" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__radio__hal_1gab6d271c9d8e00b647100f844081eb6ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_radio_dfe_amount_get</definition>
        <argsstring>(NRF_RADIO_Type const *p_reg)</argsstring>
        <name>nrf_radio_dfe_amount_get</name>
        <param>
          <type>NRF_RADIO_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting the number of stored IQ samples or magnitude and phase pairs of the samples during last transaction. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>Amount</parametername>
</parameternamelist>
<parameterdescription>
<para>of samples. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_radio.h" line="1573" column="28" declfile="hal/nrf_radio.h" declline="1573" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__radio__hal_1ga6ccabe7ebeab7ae29f57f5488f6fdecc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_radio_dfe_current_amount_get</definition>
        <argsstring>(NRF_RADIO_Type const *p_reg)</argsstring>
        <name>nrf_radio_dfe_current_amount_get</name>
        <param>
          <type>NRF_RADIO_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting the number of bytes transferred in the current transaction. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Number of bytes. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_radio.h" line="1583" column="28" declfile="hal/nrf_radio.h" declline="1583" declcolumn="28"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__nrf__radio__hal_1ga3e1cd53cc3794d26a2f00b968e6f8aa9" prot="public" static="no">
        <name>NRF_RADIO_DPPI_OFFSET</name>
        <initializer>NRF_SUBSCRIBE_PUBLISH_OFFSET_RADIO</initializer>
        <briefdescription>
<para>Symbol specifying offset between address of TASK/EVENT register and address of associated SUBSCRIBE/PUBLISH register. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_radio.h" line="52" column="9" bodyfile="hal/nrf_radio.h" bodystart="52" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Hardware access layer for managing the RADIO peripheral. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
