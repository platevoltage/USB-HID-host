<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="group__nrf__uarte__hal" kind="group">
    <compoundname>nrf_uarte_hal</compoundname>
    <title>UARTE HAL</title>
    <innerclass refid="structnrf__uarte__config__t" prot="public">nrf_uarte_config_t</innerclass>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="group__nrf__uarte__hal_1gae99a63cb1416b51c2e2282c4c56a6b12" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_uarte_task_t</name>
        <enumvalue id="group__nrf__uarte__hal_1ggae99a63cb1416b51c2e2282c4c56a6b12abd99d435a65192d48802b693b9acab6b" prot="public">
          <name>NRF_UARTE_TASK_STARTRX</name>
          <initializer>= offsetof(NRF_UARTE_Type, TASKS_DMA.RX.START)</initializer>
          <briefdescription>
<para>Start UART receiver. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__uarte__hal_1ggae99a63cb1416b51c2e2282c4c56a6b12a0bc486fb0751337a49fa3b4570279afc" prot="public">
          <name>NRF_UARTE_TASK_STOPRX</name>
          <initializer>= offsetof(NRF_UARTE_Type, TASKS_DMA.RX.STOP)</initializer>
          <briefdescription>
<para>Stop UART receiver. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__uarte__hal_1ggae99a63cb1416b51c2e2282c4c56a6b12af3a09172b5dff04de632997f0f7d5a73" prot="public">
          <name>NRF_UARTE_TASK_STARTTX</name>
          <initializer>= offsetof(NRF_UARTE_Type, TASKS_DMA.TX.START)</initializer>
          <briefdescription>
<para>Start UART transmitter. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__uarte__hal_1ggae99a63cb1416b51c2e2282c4c56a6b12a4f014e7e6d864c697f3b501581e77d0c" prot="public">
          <name>NRF_UARTE_TASK_STOPTX</name>
          <initializer>= offsetof(NRF_UARTE_Type, TASKS_DMA.TX.STOP)</initializer>
          <briefdescription>
<para>Stop UART transmitter. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__uarte__hal_1ggae99a63cb1416b51c2e2282c4c56a6b12aac4a3088721b4cffa1f8788032b49d84" prot="public">
          <name>NRF_UARTE_TASK_FLUSHRX</name>
          <initializer>= offsetof(NRF_UARTE_Type, TASKS_FLUSHRX)</initializer>
          <briefdescription>
<para>Flush RX FIFO in RX buffer. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>UARTE tasks. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_uarte.h" line="133" column="1" bodyfile="hal/nrf_uarte.h" bodystart="134" bodyend="147"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__uarte__hal_1ga1189b14604f6051467bc91b337c45d6a" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_uarte_event_t</name>
        <enumvalue id="group__nrf__uarte__hal_1gga1189b14604f6051467bc91b337c45d6aadb7e7f48f8a385142af3ae249e8a15ae" prot="public">
          <name>NRF_UARTE_EVENT_CTS</name>
          <initializer>= offsetof(NRF_UARTE_Type, EVENTS_CTS)</initializer>
          <briefdescription>
<para>CTS is activated. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__uarte__hal_1gga1189b14604f6051467bc91b337c45d6aaa9eadfafaf2bc8d8525973db6ad0fffa" prot="public">
          <name>NRF_UARTE_EVENT_NCTS</name>
          <initializer>= offsetof(NRF_UARTE_Type, EVENTS_NCTS)</initializer>
          <briefdescription>
<para>CTS is deactivated. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__uarte__hal_1gga1189b14604f6051467bc91b337c45d6aad82cb8f90030dfd0a66ac658a29722ec" prot="public">
          <name>NRF_UARTE_EVENT_RXDRDY</name>
          <initializer>= offsetof(NRF_UARTE_Type, EVENTS_RXDRDY)</initializer>
          <briefdescription>
<para>Data received in RXD (but potentially not yet transferred to Data RAM). </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__uarte__hal_1gga1189b14604f6051467bc91b337c45d6aa41438c8cc0a6dd6a3c534e25640c5f15" prot="public">
          <name>NRF_UARTE_EVENT_TXDRDY</name>
          <initializer>= offsetof(NRF_UARTE_Type, EVENTS_TXDRDY)</initializer>
          <briefdescription>
<para>Data sent from TXD. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__uarte__hal_1gga1189b14604f6051467bc91b337c45d6aadb747c6d6000073aff543006fb6a67bf" prot="public">
          <name>NRF_UARTE_EVENT_ERROR</name>
          <initializer>= offsetof(NRF_UARTE_Type, EVENTS_ERROR)</initializer>
          <briefdescription>
<para>Error detected. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__uarte__hal_1gga1189b14604f6051467bc91b337c45d6aacfe771476126c4edf5f77d96a46a4f71" prot="public">
          <name>NRF_UARTE_EVENT_RXTO</name>
          <initializer>= offsetof(NRF_UARTE_Type, EVENTS_RXTO)</initializer>
          <briefdescription>
<para>Receiver timeout. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__uarte__hal_1gga1189b14604f6051467bc91b337c45d6aaf294fd2bdf6d029e97ddc0821d662e12" prot="public">
          <name>NRF_UARTE_EVENT_TXSTOPPED</name>
          <initializer>= offsetof(NRF_UARTE_Type, EVENTS_TXSTOPPED)</initializer>
          <briefdescription>
<para>Transmitted stopped. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__uarte__hal_1gga1189b14604f6051467bc91b337c45d6aa8329b5c3838d796c881a3962424b4150" prot="public">
          <name>NRF_UARTE_EVENT_ENDRX</name>
          <initializer>= offsetof(NRF_UARTE_Type, EVENTS_DMA.RX.END)</initializer>
          <briefdescription>
<para>Receive buffer is filled up. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__uarte__hal_1gga1189b14604f6051467bc91b337c45d6aa8e4ed69aeb2b036939ecfb11afaf01b7" prot="public">
          <name>NRF_UARTE_EVENT_ENDTX</name>
          <initializer>= offsetof(NRF_UARTE_Type, EVENTS_DMA.TX.END)</initializer>
          <briefdescription>
<para>Last TX byte transmitted. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__uarte__hal_1gga1189b14604f6051467bc91b337c45d6aa3088313a496175a52d7f4b5e050c7702" prot="public">
          <name>NRF_UARTE_EVENT_RXSTARTED</name>
          <initializer>= offsetof(NRF_UARTE_Type, EVENTS_DMA.RX.READY)</initializer>
          <briefdescription>
<para>Receiver has started. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__uarte__hal_1gga1189b14604f6051467bc91b337c45d6aa499f8441d47ff978989ed67aa6a6b27a" prot="public">
          <name>NRF_UARTE_EVENT_TXSTARTED</name>
          <initializer>= offsetof(NRF_UARTE_Type, EVENTS_DMA.TX.READY)</initializer>
          <briefdescription>
<para>Transmitter has started. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>UARTE events. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_uarte.h" line="150" column="1" bodyfile="hal/nrf_uarte.h" bodystart="151" bodyend="170"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__uarte__hal_1ga34d5c38f66b74d10c11f72ea548e2138" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_uarte_short_t</name>
        <enumvalue id="group__nrf__uarte__hal_1gga34d5c38f66b74d10c11f72ea548e2138a3cc21925e8c9ba6b47b5e4fc5ca89e29" prot="public">
          <name>NRF_UARTE_SHORT_ENDRX_STARTRX</name>
          <initializer>= UARTE_SHORTS_DMA_RX_END_DMA_RX_START_Msk</initializer>
          <briefdescription>
<para>Shortcut between ENDRX event and STARTRX task. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__uarte__hal_1gga34d5c38f66b74d10c11f72ea548e2138ab09bcb8597c21c3677695b1398ac044e" prot="public">
          <name>NRF_UARTE_SHORT_ENDRX_STOPRX</name>
          <initializer>= UARTE_SHORTS_DMA_RX_END_DMA_RX_STOP_Msk</initializer>
          <briefdescription>
<para>Shortcut between ENDRX event and STOPRX task. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__uarte__hal_1gga34d5c38f66b74d10c11f72ea548e2138aeca5b4a017684808e562ec2820f35bc2" prot="public">
          <name>NRF_UARTE_SHORT_ENDTX_STOPTX</name>
          <initializer>= UARTE_SHORTS_DMA_TX_END_DMA_TX_STOP_Msk</initializer>
          <briefdescription>
<para>Shortcut between ENDTX event and STOPTX task. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Types of UARTE shortcuts. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_uarte.h" line="173" column="1" bodyfile="hal/nrf_uarte.h" bodystart="174" bodyend="186"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__uarte__hal_1ga395d7c4d3cd101fa0afb90940593a08d" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_uarte_int_mask_t</name>
        <enumvalue id="group__nrf__uarte__hal_1gga395d7c4d3cd101fa0afb90940593a08daf20b28af97bf98240e439be787e5c4d0" prot="public">
          <name>NRF_UARTE_INT_CTS_MASK</name>
          <initializer>= UARTE_INTENSET_CTS_Msk</initializer>
          <briefdescription>
<para>Interrupt on CTS event. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__uarte__hal_1gga395d7c4d3cd101fa0afb90940593a08da59bb6b09498fa43d957024eaa753e408" prot="public">
          <name>NRF_UARTE_INT_NCTS_MASK</name>
          <initializer>= UARTE_INTENSET_NCTS_Msk</initializer>
          <briefdescription>
<para>Interrupt on NCTS event. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__uarte__hal_1gga395d7c4d3cd101fa0afb90940593a08daa7f3b9072bbc035da6c43572e3631981" prot="public">
          <name>NRF_UARTE_INT_RXDRDY_MASK</name>
          <initializer>= UARTE_INTENSET_RXDRDY_Msk</initializer>
          <briefdescription>
<para>Interrupt on RXDRDY event. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__uarte__hal_1gga395d7c4d3cd101fa0afb90940593a08da9fcbc283a6cf19a2d8acce330fd22751" prot="public">
          <name>NRF_UARTE_INT_TXDRDY_MASK</name>
          <initializer>= UARTE_INTENSET_TXDRDY_Msk</initializer>
          <briefdescription>
<para>Interrupt on TXDRDY event. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__uarte__hal_1gga395d7c4d3cd101fa0afb90940593a08dab082797b57a6a1372b90cd1f93d474b2" prot="public">
          <name>NRF_UARTE_INT_ERROR_MASK</name>
          <initializer>= UARTE_INTENSET_ERROR_Msk</initializer>
          <briefdescription>
<para>Interrupt on ERROR event. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__uarte__hal_1gga395d7c4d3cd101fa0afb90940593a08dae04416c04b5abdc51fce34d22b2e4100" prot="public">
          <name>NRF_UARTE_INT_RXTO_MASK</name>
          <initializer>= UARTE_INTENSET_RXTO_Msk</initializer>
          <briefdescription>
<para>Interrupt on RXTO event. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__uarte__hal_1gga395d7c4d3cd101fa0afb90940593a08dac82a332df7e6c202081c26ce4c873953" prot="public">
          <name>NRF_UARTE_INT_TXSTOPPED_MASK</name>
          <initializer>= UARTE_INTENSET_TXSTOPPED_Msk</initializer>
          <briefdescription>
<para>Interrupt on TXSTOPPED event. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__uarte__hal_1gga395d7c4d3cd101fa0afb90940593a08daf4ae0123794e860fae0a6d2b8218da32" prot="public">
          <name>NRF_UARTE_INT_ENDRX_MASK</name>
          <initializer>= UARTE_INTENSET_DMARXEND_Msk</initializer>
          <briefdescription>
<para>Interrupt on ENDRX event. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__uarte__hal_1gga395d7c4d3cd101fa0afb90940593a08daaa49ccde68d4ef6871758c50d701698d" prot="public">
          <name>NRF_UARTE_INT_ENDTX_MASK</name>
          <initializer>= UARTE_INTENSET_DMATXEND_Msk</initializer>
          <briefdescription>
<para>Interrupt on ENDTX event. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__uarte__hal_1gga395d7c4d3cd101fa0afb90940593a08da8952e20f257456e2b6ca5474b980fafb" prot="public">
          <name>NRF_UARTE_INT_RXSTARTED_MASK</name>
          <initializer>= UARTE_INTENSET_DMARXREADY_Msk</initializer>
          <briefdescription>
<para>Interrupt on RXSTARTED event. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__uarte__hal_1gga395d7c4d3cd101fa0afb90940593a08da9c88cf5a272fcdf3585c7ff021b07f92" prot="public">
          <name>NRF_UARTE_INT_TXSTARTED_MASK</name>
          <initializer>= UARTE_INTENSET_DMATXREADY_Msk</initializer>
          <briefdescription>
<para>Interrupt on TXSTARTED event. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>UARTE interrupts. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_uarte.h" line="190" column="1" bodyfile="hal/nrf_uarte.h" bodystart="191" bodyend="210"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__uarte__hal_1ga42eca93d0e7d6354bcc75d6e2cdb462e" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_uarte_baudrate_t</name>
        <enumvalue id="group__nrf__uarte__hal_1gga42eca93d0e7d6354bcc75d6e2cdb462ea0d8daad791322bcc600d42ed57d9e208" prot="public">
          <name>NRF_UARTE_BAUDRATE_1200</name>
          <initializer>= UARTE_BAUDRATE_BAUDRATE_Baud1200</initializer>
          <briefdescription>
<para>1200 baud. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__uarte__hal_1gga42eca93d0e7d6354bcc75d6e2cdb462eaf46e7dd95a090a2cd64c1c9cfadf2ad5" prot="public">
          <name>NRF_UARTE_BAUDRATE_2400</name>
          <initializer>= UARTE_BAUDRATE_BAUDRATE_Baud2400</initializer>
          <briefdescription>
<para>2400 baud. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__uarte__hal_1gga42eca93d0e7d6354bcc75d6e2cdb462ea6677e10c9acb2684b6fecf68492715c7" prot="public">
          <name>NRF_UARTE_BAUDRATE_4800</name>
          <initializer>= UARTE_BAUDRATE_BAUDRATE_Baud4800</initializer>
          <briefdescription>
<para>4800 baud. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__uarte__hal_1gga42eca93d0e7d6354bcc75d6e2cdb462eaeb153c4183d63ecb9ec6af6af734de97" prot="public">
          <name>NRF_UARTE_BAUDRATE_9600</name>
          <initializer>= UARTE_BAUDRATE_BAUDRATE_Baud9600</initializer>
          <briefdescription>
<para>9600 baud. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__uarte__hal_1gga42eca93d0e7d6354bcc75d6e2cdb462ea8bdc32e6d7c97372039e5d9a492590f5" prot="public">
          <name>NRF_UARTE_BAUDRATE_14400</name>
          <initializer>= UARTE_BAUDRATE_BAUDRATE_Baud14400</initializer>
          <briefdescription>
<para>14400 baud. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__uarte__hal_1gga42eca93d0e7d6354bcc75d6e2cdb462ea70d18503d81a11007456bd3e89c945d5" prot="public">
          <name>NRF_UARTE_BAUDRATE_19200</name>
          <initializer>= UARTE_BAUDRATE_BAUDRATE_Baud19200</initializer>
          <briefdescription>
<para>19200 baud. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__uarte__hal_1gga42eca93d0e7d6354bcc75d6e2cdb462ea86e1747104e9f7c2df7a610141b21f1a" prot="public">
          <name>NRF_UARTE_BAUDRATE_28800</name>
          <initializer>= UARTE_BAUDRATE_BAUDRATE_Baud28800</initializer>
          <briefdescription>
<para>28800 baud. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__uarte__hal_1gga42eca93d0e7d6354bcc75d6e2cdb462ea5c86870ab4a044f4c10b40d192ba8a00" prot="public">
          <name>NRF_UARTE_BAUDRATE_31250</name>
          <initializer>= UARTE_BAUDRATE_BAUDRATE_Baud31250</initializer>
          <briefdescription>
<para>31250 baud. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__uarte__hal_1gga42eca93d0e7d6354bcc75d6e2cdb462eac52db59615094af65f8d478f02a68234" prot="public">
          <name>NRF_UARTE_BAUDRATE_38400</name>
          <initializer>= UARTE_BAUDRATE_BAUDRATE_Baud38400</initializer>
          <briefdescription>
<para>38400 baud. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__uarte__hal_1gga42eca93d0e7d6354bcc75d6e2cdb462ea3283f76b77f5b4ecefbadb3fdc1062ff" prot="public">
          <name>NRF_UARTE_BAUDRATE_56000</name>
          <initializer>= UARTE_BAUDRATE_BAUDRATE_Baud56000</initializer>
          <briefdescription>
<para>56000 baud. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__uarte__hal_1gga42eca93d0e7d6354bcc75d6e2cdb462ea527231954d1e97b9cc6d9408f5d432b2" prot="public">
          <name>NRF_UARTE_BAUDRATE_57600</name>
          <initializer>= UARTE_BAUDRATE_BAUDRATE_Baud57600</initializer>
          <briefdescription>
<para>57600 baud. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__uarte__hal_1gga42eca93d0e7d6354bcc75d6e2cdb462ea05c8f6c846aacb6793e1205d3533c479" prot="public">
          <name>NRF_UARTE_BAUDRATE_76800</name>
          <initializer>= UARTE_BAUDRATE_BAUDRATE_Baud76800</initializer>
          <briefdescription>
<para>76800 baud. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__uarte__hal_1gga42eca93d0e7d6354bcc75d6e2cdb462ea7b89b684f80db1d68e98d93321426e05" prot="public">
          <name>NRF_UARTE_BAUDRATE_115200</name>
          <initializer>= UARTE_BAUDRATE_BAUDRATE_Baud115200</initializer>
          <briefdescription>
<para>115200 baud. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__uarte__hal_1gga42eca93d0e7d6354bcc75d6e2cdb462ea01eeab23554f8418f13ac59c0d2e9cf8" prot="public">
          <name>NRF_UARTE_BAUDRATE_230400</name>
          <initializer>= UARTE_BAUDRATE_BAUDRATE_Baud230400</initializer>
          <briefdescription>
<para>230400 baud. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__uarte__hal_1gga42eca93d0e7d6354bcc75d6e2cdb462ea4236634f18ab5639793652d3cef4d17e" prot="public">
          <name>NRF_UARTE_BAUDRATE_250000</name>
          <initializer>= UARTE_BAUDRATE_BAUDRATE_Baud250000</initializer>
          <briefdescription>
<para>250000 baud. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__uarte__hal_1gga42eca93d0e7d6354bcc75d6e2cdb462ea76aeb4941330f856f18f1d8b092861cb" prot="public">
          <name>NRF_UARTE_BAUDRATE_460800</name>
          <initializer>= UARTE_BAUDRATE_BAUDRATE_Baud460800</initializer>
          <briefdescription>
<para>460800 baud. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__uarte__hal_1gga42eca93d0e7d6354bcc75d6e2cdb462eac0f3d8da95efc2f5dfc618789522285a" prot="public">
          <name>NRF_UARTE_BAUDRATE_921600</name>
          <initializer>= UARTE_BAUDRATE_BAUDRATE_Baud921600</initializer>
          <briefdescription>
<para>921600 baud. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__uarte__hal_1gga42eca93d0e7d6354bcc75d6e2cdb462ea4a0c94847b9e1eb020672b81f177aa39" prot="public">
          <name>NRF_UARTE_BAUDRATE_1000000</name>
          <initializer>= UARTE_BAUDRATE_BAUDRATE_Baud1M</initializer>
          <briefdescription>
<para>1000000 baud. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Baudrates supported by UARTE. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_uarte.h" line="213" column="1" bodyfile="hal/nrf_uarte.h" bodystart="214" bodyend="233"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__uarte__hal_1ga83eec8b883f6b2e77e4baa39b65d9cb0" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_uarte_error_mask_t</name>
        <enumvalue id="group__nrf__uarte__hal_1gga83eec8b883f6b2e77e4baa39b65d9cb0a252a1e515833af01bc95347d61a22e5c" prot="public">
          <name>NRF_UARTE_ERROR_OVERRUN_MASK</name>
          <initializer>= UARTE_ERRORSRC_OVERRUN_Msk</initializer>
          <briefdescription>
<para>Overrun error. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__uarte__hal_1gga83eec8b883f6b2e77e4baa39b65d9cb0ae3a0b96204ac5f2197ce75c8a8e79a8e" prot="public">
          <name>NRF_UARTE_ERROR_PARITY_MASK</name>
          <initializer>= UARTE_ERRORSRC_PARITY_Msk</initializer>
          <briefdescription>
<para>Parity error. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__uarte__hal_1gga83eec8b883f6b2e77e4baa39b65d9cb0aeaba8538c226f4784b25f86582d8a469" prot="public">
          <name>NRF_UARTE_ERROR_FRAMING_MASK</name>
          <initializer>= UARTE_ERRORSRC_FRAMING_Msk</initializer>
          <briefdescription>
<para>Framing error. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__uarte__hal_1gga83eec8b883f6b2e77e4baa39b65d9cb0a05874849929b6d5a555378258e81eb2d" prot="public">
          <name>NRF_UARTE_ERROR_BREAK_MASK</name>
          <initializer>= UARTE_ERRORSRC_BREAK_Msk</initializer>
          <briefdescription>
<para>Break error. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Types of UARTE error masks. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_uarte.h" line="236" column="1" bodyfile="hal/nrf_uarte.h" bodystart="237" bodyend="242"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__uarte__hal_1ga8aaeeefd8dcc602621e652895d8760ce" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_uarte_parity_t</name>
        <enumvalue id="group__nrf__uarte__hal_1gga8aaeeefd8dcc602621e652895d8760cea17846ae089c79d17a516e8f112f673cd" prot="public">
          <name>NRF_UARTE_PARITY_EXCLUDED</name>
          <initializer>= UARTE_CONFIG_PARITY_Excluded &lt;&lt; UARTE_CONFIG_PARITY_Pos</initializer>
          <briefdescription>
<para>Parity excluded. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__uarte__hal_1gga8aaeeefd8dcc602621e652895d8760cea8e974850339489e88039da76031b0c50" prot="public">
          <name>NRF_UARTE_PARITY_INCLUDED</name>
          <initializer>= UARTE_CONFIG_PARITY_Included &lt;&lt; UARTE_CONFIG_PARITY_Pos</initializer>
          <briefdescription>
<para>Parity included. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Types of UARTE parity modes. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_uarte.h" line="245" column="1" bodyfile="hal/nrf_uarte.h" bodystart="246" bodyend="249"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__uarte__hal_1ga067ff543548e273bd1658c8746894c11" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_uarte_hwfc_t</name>
        <enumvalue id="group__nrf__uarte__hal_1gga067ff543548e273bd1658c8746894c11a5a0258c57be0d052b3d1811967e4d689" prot="public">
          <name>NRF_UARTE_HWFC_DISABLED</name>
          <initializer>= UARTE_CONFIG_HWFC_Disabled &lt;&lt; UARTE_CONFIG_HWFC_Pos</initializer>
          <briefdescription>
<para>Hardware flow control disabled. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__uarte__hal_1gga067ff543548e273bd1658c8746894c11a00927c92cfe376a926365e4ecdfbb512" prot="public">
          <name>NRF_UARTE_HWFC_ENABLED</name>
          <initializer>= UARTE_CONFIG_HWFC_Enabled  &lt;&lt; UARTE_CONFIG_HWFC_Pos</initializer>
          <briefdescription>
<para>Hardware flow control enabled. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Types of UARTE flow control modes. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_uarte.h" line="252" column="1" bodyfile="hal/nrf_uarte.h" bodystart="253" bodyend="256"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__uarte__hal_1gaf1d6928d2c4cae2bce9205c05c9a2b91" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_uarte_stop_t</name>
        <enumvalue id="group__nrf__uarte__hal_1ggaf1d6928d2c4cae2bce9205c05c9a2b91ad589067c6ef83f8b7caae93f99cef541" prot="public">
          <name>NRF_UARTE_STOP_ONE</name>
          <initializer>= UARTE_CONFIG_STOP_One &lt;&lt; UARTE_CONFIG_STOP_Pos</initializer>
          <briefdescription>
<para>One stop bit. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__uarte__hal_1ggaf1d6928d2c4cae2bce9205c05c9a2b91add7462fa97524ae1bd67999c02c7b180" prot="public">
          <name>NRF_UARTE_STOP_TWO</name>
          <initializer>= UARTE_CONFIG_STOP_Two &lt;&lt; UARTE_CONFIG_STOP_Pos</initializer>
          <briefdescription>
<para>Two stop bits. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Types of UARTE stop bit modes. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_uarte.h" line="260" column="1" bodyfile="hal/nrf_uarte.h" bodystart="261" bodyend="264"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__uarte__hal_1ga5bd965c0acc87987e247c3a812353923" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_uarte_paritytype_t</name>
        <enumvalue id="group__nrf__uarte__hal_1gga5bd965c0acc87987e247c3a812353923a1f6bdb309fe828abc37df8f6b3a0f724" prot="public">
          <name>NRF_UARTE_PARITYTYPE_EVEN</name>
          <initializer>= UARTE_CONFIG_PARITYTYPE_Even &lt;&lt; UARTE_CONFIG_PARITYTYPE_Pos</initializer>
          <briefdescription>
<para>Parity even. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__uarte__hal_1gga5bd965c0acc87987e247c3a812353923ae2978aa504ba543fd6ce965d81a05f3c" prot="public">
          <name>NRF_UARTE_PARITYTYPE_ODD</name>
          <initializer>= UARTE_CONFIG_PARITYTYPE_Odd &lt;&lt; UARTE_CONFIG_PARITYTYPE_Pos</initializer>
          <briefdescription>
<para>Parity odd. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Types of UARTE parity types. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_uarte.h" line="269" column="1" bodyfile="hal/nrf_uarte.h" bodystart="270" bodyend="273"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__nrf__uarte__hal_1ga5dae90ae9ce6c18e2fcf8a03d3657602" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_uarte_event_clear</definition>
        <argsstring>(NRF_UARTE_Type *p_reg, nrf_uarte_event_t event)</argsstring>
        <name>nrf_uarte_event_clear</name>
        <param>
          <type>NRF_UARTE_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__uarte__hal_1ga1189b14604f6051467bc91b337c45d6a" kindref="member">nrf_uarte_event_t</ref></type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>Function for clearing a specific UARTE event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event to clear. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_uarte.h" line="630" column="24" bodyfile="hal/nrf_uarte.h" bodystart="630" bodyend="634" declfile="hal/nrf_uarte.h" declline="295" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__uarte__hal_1gace95ff2a8e55699ccaec942fc699ab3b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE bool</type>
        <definition>NRF_STATIC_INLINE bool nrf_uarte_event_check</definition>
        <argsstring>(NRF_UARTE_Type const *p_reg, nrf_uarte_event_t event)</argsstring>
        <name>nrf_uarte_event_check</name>
        <param>
          <type>NRF_UARTE_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__uarte__hal_1ga1189b14604f6051467bc91b337c45d6a" kindref="member">nrf_uarte_event_t</ref></type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>Function for retrieving the state of the UARTE event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event to be checked.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>The event has been generated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>The event has not been generated. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_uarte.h" line="636" column="24" bodyfile="hal/nrf_uarte.h" bodystart="636" bodyend="640" declfile="hal/nrf_uarte.h" declline="306" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__uarte__hal_1ga71fbc9d9b1a7a7fb61e54af1db53e9b1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_uarte_event_address_get</definition>
        <argsstring>(NRF_UARTE_Type const *p_reg, nrf_uarte_event_t event)</argsstring>
        <name>nrf_uarte_event_address_get</name>
        <param>
          <type>NRF_UARTE_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__uarte__hal_1ga1189b14604f6051467bc91b337c45d6a" kindref="member">nrf_uarte_event_t</ref></type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>Function for returning the address of the specified UARTE event register. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>The specified event.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Address of specified event register. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_uarte.h" line="642" column="28" bodyfile="hal/nrf_uarte.h" bodystart="642" bodyend="646" declfile="hal/nrf_uarte.h" declline="317" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__uarte__hal_1gaa95a64c55eaf1ef8c5034c701be8cc2f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_uarte_shorts_set</definition>
        <argsstring>(NRF_UARTE_Type *p_reg, uint32_t mask)</argsstring>
        <name>nrf_uarte_shorts_set</name>
        <param>
          <type>NRF_UARTE_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Function for configuring UARTE shortcuts. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Shortcuts to be set. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_uarte.h" line="648" column="24" bodyfile="hal/nrf_uarte.h" bodystart="648" bodyend="651" declfile="hal/nrf_uarte.h" declline="326" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__uarte__hal_1gacdf7d64e583ad40f2f6284080af2bb54" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_uarte_shorts_get</definition>
        <argsstring>(NRF_UARTE_Type *p_reg, uint32_t mask)</argsstring>
        <name>nrf_uarte_shorts_get</name>
        <param>
          <type>NRF_UARTE_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Function for getting UARTE shortcuts. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Shortcuts to be checked.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Mask of requested shortcuts which were enabled. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_uarte.h" line="653" column="28" bodyfile="hal/nrf_uarte.h" bodystart="653" bodyend="656" declfile="hal/nrf_uarte.h" declline="336" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__uarte__hal_1gaf118432d67372baf106ddebd40706ac0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_uarte_shorts_enable</definition>
        <argsstring>(NRF_UARTE_Type *p_reg, uint32_t mask)</argsstring>
        <name>nrf_uarte_shorts_enable</name>
        <param>
          <type>NRF_UARTE_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Function for enabling UARTE shortcuts. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Shortcuts to be enabled. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_uarte.h" line="658" column="24" bodyfile="hal/nrf_uarte.h" bodystart="658" bodyend="661" declfile="hal/nrf_uarte.h" declline="344" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__uarte__hal_1ga4b45795e5eb4ab6ca6bec57fef5ca900" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_uarte_shorts_disable</definition>
        <argsstring>(NRF_UARTE_Type *p_reg, uint32_t mask)</argsstring>
        <name>nrf_uarte_shorts_disable</name>
        <param>
          <type>NRF_UARTE_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Function for disabling UARTE shortcuts. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Shortcuts to be disabled. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_uarte.h" line="663" column="24" bodyfile="hal/nrf_uarte.h" bodystart="663" bodyend="666" declfile="hal/nrf_uarte.h" declline="352" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__uarte__hal_1gaa541c8ca2314f3228f99d6745d51ba03" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_uarte_int_enable</definition>
        <argsstring>(NRF_UARTE_Type *p_reg, uint32_t mask)</argsstring>
        <name>nrf_uarte_int_enable</name>
        <param>
          <type>NRF_UARTE_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Function for enabling UARTE interrupts. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of interrupts to be enabled. Use <ref refid="group__nrf__uarte__hal_1ga395d7c4d3cd101fa0afb90940593a08d" kindref="member">nrf_uarte_int_mask_t</ref> values for bit masking. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_uarte.h" line="668" column="24" bodyfile="hal/nrf_uarte.h" bodystart="668" bodyend="671" declfile="hal/nrf_uarte.h" declline="361" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__uarte__hal_1ga90865440e200499623f4cc89e01db83d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_uarte_int_enable_check</definition>
        <argsstring>(NRF_UARTE_Type const *p_reg, uint32_t mask)</argsstring>
        <name>nrf_uarte_int_enable_check</name>
        <param>
          <type>NRF_UARTE_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Function for checking if the specified interrupts are enabled. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of interrupts to be checked. Use <ref refid="group__nrf__uarte__hal_1ga395d7c4d3cd101fa0afb90940593a08d" kindref="member">nrf_uarte_int_mask_t</ref> values for bit masking.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Mask of enabled interrupts. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_uarte.h" line="673" column="28" bodyfile="hal/nrf_uarte.h" bodystart="673" bodyend="676" declfile="hal/nrf_uarte.h" declline="372" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__uarte__hal_1ga9b7a75ee458272927873b753c7f0d3ad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_uarte_int_disable</definition>
        <argsstring>(NRF_UARTE_Type *p_reg, uint32_t mask)</argsstring>
        <name>nrf_uarte_int_disable</name>
        <param>
          <type>NRF_UARTE_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Function for disabling the specified interrupts. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of interrupts to be disabled. Use <ref refid="group__nrf__uarte__hal_1ga395d7c4d3cd101fa0afb90940593a08d" kindref="member">nrf_uarte_int_mask_t</ref> values for bit masking. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_uarte.h" line="678" column="24" bodyfile="hal/nrf_uarte.h" bodystart="678" bodyend="681" declfile="hal/nrf_uarte.h" declline="381" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__uarte__hal_1ga122e4a898f64c58603ffe58ebe9f0828" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_uarte_subscribe_set</definition>
        <argsstring>(NRF_UARTE_Type *p_reg, nrf_uarte_task_t task, uint8_t channel)</argsstring>
        <name>nrf_uarte_subscribe_set</name>
        <param>
          <type>NRF_UARTE_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__uarte__hal_1gae99a63cb1416b51c2e2282c4c56a6b12" kindref="member">nrf_uarte_task_t</ref></type>
          <declname>task</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>channel</declname>
        </param>
        <briefdescription>
<para>Function for setting the subscribe configuration for a given UARTE task. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">task</parametername>
</parameternamelist>
<parameterdescription>
<para>Task for which to set the configuration. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">channel</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel through which to subscribe events. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_uarte.h" line="392" column="24" declfile="hal/nrf_uarte.h" declline="392" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__uarte__hal_1ga615374471fc4545e9b26e69963c37d95" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_uarte_subscribe_clear</definition>
        <argsstring>(NRF_UARTE_Type *p_reg, nrf_uarte_task_t task)</argsstring>
        <name>nrf_uarte_subscribe_clear</name>
        <param>
          <type>NRF_UARTE_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__uarte__hal_1gae99a63cb1416b51c2e2282c4c56a6b12" kindref="member">nrf_uarte_task_t</ref></type>
          <declname>task</declname>
        </param>
        <briefdescription>
<para>Function for clearing the subscribe configuration for a given UARTE task. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">task</parametername>
</parameternamelist>
<parameterdescription>
<para>Task for which to clear the configuration. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_uarte.h" line="403" column="24" declfile="hal/nrf_uarte.h" declline="403" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__uarte__hal_1ga92107bd9f425356f88682a286ba480e9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_uarte_publish_set</definition>
        <argsstring>(NRF_UARTE_Type *p_reg, nrf_uarte_event_t event, uint8_t channel)</argsstring>
        <name>nrf_uarte_publish_set</name>
        <param>
          <type>NRF_UARTE_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__uarte__hal_1ga1189b14604f6051467bc91b337c45d6a" kindref="member">nrf_uarte_event_t</ref></type>
          <declname>event</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>channel</declname>
        </param>
        <briefdescription>
<para>Function for setting the publish configuration for a given UARTE event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event for which to set the configuration. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">channel</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel through which to publish the event. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_uarte.h" line="414" column="24" declfile="hal/nrf_uarte.h" declline="414" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__uarte__hal_1gacfa67b79ba293492c74d1e670106fcc8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_uarte_publish_clear</definition>
        <argsstring>(NRF_UARTE_Type *p_reg, nrf_uarte_event_t event)</argsstring>
        <name>nrf_uarte_publish_clear</name>
        <param>
          <type>NRF_UARTE_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__uarte__hal_1ga1189b14604f6051467bc91b337c45d6a" kindref="member">nrf_uarte_event_t</ref></type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>Function for clearing the publish configuration for a given UARTE event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event for which to clear the configuration. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_uarte.h" line="425" column="24" declfile="hal/nrf_uarte.h" declline="425" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__uarte__hal_1gafb0484282cce3fb422e1179cbbede5e9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_uarte_errorsrc_get_and_clear</definition>
        <argsstring>(NRF_UARTE_Type *p_reg)</argsstring>
        <name>nrf_uarte_errorsrc_get_and_clear</name>
        <param>
          <type>NRF_UARTE_Type *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting error source mask. Function is clearing error source flags after reading. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Mask with error source flags. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_uarte.h" line="713" column="28" bodyfile="hal/nrf_uarte.h" bodystart="713" bodyend="718" declfile="hal/nrf_uarte.h" declline="436" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__uarte__hal_1ga070849bf37e459b44758bfe6cd63859b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_uarte_enable</definition>
        <argsstring>(NRF_UARTE_Type *p_reg)</argsstring>
        <name>nrf_uarte_enable</name>
        <param>
          <type>NRF_UARTE_Type *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for enabling UARTE. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_uarte.h" line="720" column="24" bodyfile="hal/nrf_uarte.h" bodystart="720" bodyend="723" declfile="hal/nrf_uarte.h" declline="443" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__uarte__hal_1gac6629a9ad9c7acbf36515e484a45d166" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_uarte_disable</definition>
        <argsstring>(NRF_UARTE_Type *p_reg)</argsstring>
        <name>nrf_uarte_disable</name>
        <param>
          <type>NRF_UARTE_Type *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for disabling UARTE. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_uarte.h" line="725" column="24" bodyfile="hal/nrf_uarte.h" bodystart="725" bodyend="728" declfile="hal/nrf_uarte.h" declline="450" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__uarte__hal_1gae8d7bc802477ebd1b07539e0c9ec8ff1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE bool</type>
        <definition>NRF_STATIC_INLINE bool nrf_uarte_enable_check</definition>
        <argsstring>(NRF_UARTE_Type const *p_reg)</argsstring>
        <name>nrf_uarte_enable_check</name>
        <param>
          <type>NRF_UARTE_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for checking if the UARTE is enabled. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>The UARTE is enabled. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>The UARTE is not enabled. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_uarte.h" line="730" column="24" bodyfile="hal/nrf_uarte.h" bodystart="730" bodyend="733" declfile="hal/nrf_uarte.h" declline="460" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__uarte__hal_1ga3639640032bc1ad556e7706b9ca1dedb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_uarte_txrx_pins_set</definition>
        <argsstring>(NRF_UARTE_Type *p_reg, uint32_t pseltxd, uint32_t pselrxd)</argsstring>
        <name>nrf_uarte_txrx_pins_set</name>
        <param>
          <type>NRF_UARTE_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>pseltxd</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>pselrxd</declname>
        </param>
        <briefdescription>
<para>Function for configuring TX/RX pins. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pseltxd</parametername>
</parameternamelist>
<parameterdescription>
<para>TXD pin number. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pselrxd</parametername>
</parameternamelist>
<parameterdescription>
<para>RXD pin number. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_uarte.h" line="735" column="24" bodyfile="hal/nrf_uarte.h" bodystart="735" bodyend="741" declfile="hal/nrf_uarte.h" declline="469" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__uarte__hal_1gae12fb2e2d49533008304ff39d250929d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_uarte_txrx_pins_disconnect</definition>
        <argsstring>(NRF_UARTE_Type *p_reg)</argsstring>
        <name>nrf_uarte_txrx_pins_disconnect</name>
        <param>
          <type>NRF_UARTE_Type *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for disconnecting TX/RX pins. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_uarte.h" line="743" column="24" bodyfile="hal/nrf_uarte.h" bodystart="743" bodyend="746" declfile="hal/nrf_uarte.h" declline="478" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__uarte__hal_1gad20aa88659fd7ee2ac284a89730057c4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_uarte_tx_pin_get</definition>
        <argsstring>(NRF_UARTE_Type const *p_reg)</argsstring>
        <name>nrf_uarte_tx_pin_get</name>
        <param>
          <type>NRF_UARTE_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting TX pin selection. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>TX pin selection. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_uarte.h" line="748" column="28" bodyfile="hal/nrf_uarte.h" bodystart="748" bodyend="751" declfile="hal/nrf_uarte.h" declline="487" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__uarte__hal_1gaf13bcb5b920de9d9d50ee369f4a7d6c8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_uarte_rx_pin_get</definition>
        <argsstring>(NRF_UARTE_Type const *p_reg)</argsstring>
        <name>nrf_uarte_rx_pin_get</name>
        <param>
          <type>NRF_UARTE_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting RX pin selection. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>RX pin selection. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_uarte.h" line="753" column="28" bodyfile="hal/nrf_uarte.h" bodystart="753" bodyend="756" declfile="hal/nrf_uarte.h" declline="496" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__uarte__hal_1gae45c79f51d7ee117ede98c03dbc7a724" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_uarte_rts_pin_get</definition>
        <argsstring>(NRF_UARTE_Type const *p_reg)</argsstring>
        <name>nrf_uarte_rts_pin_get</name>
        <param>
          <type>NRF_UARTE_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting RTS pin selection. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>RTS pin selection. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_uarte.h" line="758" column="28" bodyfile="hal/nrf_uarte.h" bodystart="758" bodyend="761" declfile="hal/nrf_uarte.h" declline="505" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__uarte__hal_1ga143b34d55cfc636dd26a804566eef939" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_uarte_cts_pin_get</definition>
        <argsstring>(NRF_UARTE_Type const *p_reg)</argsstring>
        <name>nrf_uarte_cts_pin_get</name>
        <param>
          <type>NRF_UARTE_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting CTS pin selection. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>CTS pin selection. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_uarte.h" line="763" column="28" bodyfile="hal/nrf_uarte.h" bodystart="763" bodyend="766" declfile="hal/nrf_uarte.h" declline="514" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__uarte__hal_1ga6203bd22ea2ff2288a5634c2ec4a3d7f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_uarte_hwfc_pins_set</definition>
        <argsstring>(NRF_UARTE_Type *p_reg, uint32_t pselrts, uint32_t pselcts)</argsstring>
        <name>nrf_uarte_hwfc_pins_set</name>
        <param>
          <type>NRF_UARTE_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>pselrts</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>pselcts</declname>
        </param>
        <briefdescription>
<para>Function for configuring flow control pins. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pselrts</parametername>
</parameternamelist>
<parameterdescription>
<para>RTS pin number. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pselcts</parametername>
</parameternamelist>
<parameterdescription>
<para>CTS pin number. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_uarte.h" line="768" column="24" bodyfile="hal/nrf_uarte.h" bodystart="768" bodyend="774" declfile="hal/nrf_uarte.h" declline="523" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__uarte__hal_1ga7d032eec8527123301563e29fae8fe8b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_uarte_hwfc_pins_disconnect</definition>
        <argsstring>(NRF_UARTE_Type *p_reg)</argsstring>
        <name>nrf_uarte_hwfc_pins_disconnect</name>
        <param>
          <type>NRF_UARTE_Type *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for disconnecting flow control pins. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_uarte.h" line="776" column="24" bodyfile="hal/nrf_uarte.h" bodystart="776" bodyend="779" declfile="hal/nrf_uarte.h" declline="532" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__uarte__hal_1ga3bdb712b7c870d00490404158c8f6531" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_uarte_task_trigger</definition>
        <argsstring>(NRF_UARTE_Type *p_reg, nrf_uarte_task_t task)</argsstring>
        <name>nrf_uarte_task_trigger</name>
        <param>
          <type>NRF_UARTE_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__uarte__hal_1gae99a63cb1416b51c2e2282c4c56a6b12" kindref="member">nrf_uarte_task_t</ref></type>
          <declname>task</declname>
        </param>
        <briefdescription>
<para>Function for starting an UARTE task. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">task</parametername>
</parameternamelist>
<parameterdescription>
<para>Task. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_uarte.h" line="781" column="24" bodyfile="hal/nrf_uarte.h" bodystart="781" bodyend="784" declfile="hal/nrf_uarte.h" declline="540" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__uarte__hal_1gaf3123d724a34655489ff9a353f24dd10" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_uarte_task_address_get</definition>
        <argsstring>(NRF_UARTE_Type const *p_reg, nrf_uarte_task_t task)</argsstring>
        <name>nrf_uarte_task_address_get</name>
        <param>
          <type>NRF_UARTE_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__uarte__hal_1gae99a63cb1416b51c2e2282c4c56a6b12" kindref="member">nrf_uarte_task_t</ref></type>
          <declname>task</declname>
        </param>
        <briefdescription>
<para>Function for returning the address of the specified task register. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">task</parametername>
</parameternamelist>
<parameterdescription>
<para>Task.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Task address. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_uarte.h" line="786" column="28" bodyfile="hal/nrf_uarte.h" bodystart="786" bodyend="790" declfile="hal/nrf_uarte.h" declline="550" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__uarte__hal_1ga7ade109c5df6108b680ecc9186f079b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_uarte_configure</definition>
        <argsstring>(NRF_UARTE_Type *p_reg, nrf_uarte_config_t const *p_cfg)</argsstring>
        <name>nrf_uarte_configure</name>
        <param>
          <type>NRF_UARTE_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="structnrf__uarte__config__t" kindref="compound">nrf_uarte_config_t</ref> const *</type>
          <declname>p_cfg</declname>
        </param>
        <briefdescription>
<para>Function for configuring UARTE. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">p_cfg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to UARTE settings structure. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_uarte.h" line="792" column="24" bodyfile="hal/nrf_uarte.h" bodystart="792" bodyend="803" declfile="hal/nrf_uarte.h" declline="559" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__uarte__hal_1ga156a5e07b05444cdaebe7bbfa141f0d8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_uarte_baudrate_set</definition>
        <argsstring>(NRF_UARTE_Type *p_reg, nrf_uarte_baudrate_t baudrate)</argsstring>
        <name>nrf_uarte_baudrate_set</name>
        <param>
          <type>NRF_UARTE_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__uarte__hal_1ga42eca93d0e7d6354bcc75d6e2cdb462e" kindref="member">nrf_uarte_baudrate_t</ref></type>
          <declname>baudrate</declname>
        </param>
        <briefdescription>
<para>Function for setting UARTE baud rate. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">baudrate</parametername>
</parameternamelist>
<parameterdescription>
<para>Baud rate. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_uarte.h" line="805" column="24" bodyfile="hal/nrf_uarte.h" bodystart="805" bodyend="808" declfile="hal/nrf_uarte.h" declline="568" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__uarte__hal_1gab54534a45e185cee807e27b4b2a77d75" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_uarte_tx_buffer_set</definition>
        <argsstring>(NRF_UARTE_Type *p_reg, uint8_t const *p_buffer, size_t length)</argsstring>
        <name>nrf_uarte_tx_buffer_set</name>
        <param>
          <type>NRF_UARTE_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint8_t const *</type>
          <declname>p_buffer</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>length</declname>
        </param>
        <briefdescription>
<para>Function for setting the transmit buffer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">p_buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the buffer with data to send. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">length</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum number of data bytes to transmit. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_uarte.h" line="810" column="24" bodyfile="hal/nrf_uarte.h" bodystart="810" bodyend="821" declfile="hal/nrf_uarte.h" declline="578" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__uarte__hal_1gaa2591b6842b0ef1033a095e9484d0cd8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint8_t const *</type>
        <definition>NRF_STATIC_INLINE uint8_t const  * nrf_uarte_tx_buffer_get</definition>
        <argsstring>(NRF_UARTE_Type *p_reg)</argsstring>
        <name>nrf_uarte_tx_buffer_get</name>
        <param>
          <type>NRF_UARTE_Type *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting the transmit buffer address. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to the transmit buffer. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_uarte.h" line="823" column="34" bodyfile="hal/nrf_uarte.h" bodystart="823" bodyend="830" declfile="hal/nrf_uarte.h" declline="589" declcolumn="34"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__uarte__hal_1ga4b52b1f7133577c0cf017143d5dc5ee0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_uarte_tx_amount_get</definition>
        <argsstring>(NRF_UARTE_Type const *p_reg)</argsstring>
        <name>nrf_uarte_tx_amount_get</name>
        <param>
          <type>NRF_UARTE_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting number of bytes transmitted in the last transaction. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>Amount</parametername>
</parameternamelist>
<parameterdescription>
<para>of bytes transmitted. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_uarte.h" line="832" column="28" bodyfile="hal/nrf_uarte.h" bodystart="832" bodyend="839" declfile="hal/nrf_uarte.h" declline="598" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__uarte__hal_1ga1bb25747646dd76f76f5939cc332abc9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set</definition>
        <argsstring>(NRF_UARTE_Type *p_reg, uint8_t *p_buffer, size_t length)</argsstring>
        <name>nrf_uarte_rx_buffer_set</name>
        <param>
          <type>NRF_UARTE_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>p_buffer</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>length</declname>
        </param>
        <briefdescription>
<para>Function for setting the receive buffer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">p_buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the buffer for received data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">length</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum number of data bytes to receive. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_uarte.h" line="841" column="24" bodyfile="hal/nrf_uarte.h" bodystart="841" bodyend="852" declfile="hal/nrf_uarte.h" declline="607" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__uarte__hal_1gaee7e0cd824a91100b21464fca8d789fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint8_t *</type>
        <definition>NRF_STATIC_INLINE uint8_t * nrf_uarte_rx_buffer_get</definition>
        <argsstring>(NRF_UARTE_Type *p_reg)</argsstring>
        <name>nrf_uarte_rx_buffer_get</name>
        <param>
          <type>NRF_UARTE_Type *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting the reception buffer address. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to the reception buffer. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_uarte.h" line="854" column="28" bodyfile="hal/nrf_uarte.h" bodystart="854" bodyend="861" declfile="hal/nrf_uarte.h" declline="618" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__uarte__hal_1ga61ad399cf37f988ff775dd594edee863" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_uarte_rx_amount_get</definition>
        <argsstring>(NRF_UARTE_Type const *p_reg)</argsstring>
        <name>nrf_uarte_rx_amount_get</name>
        <param>
          <type>NRF_UARTE_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting number of bytes received in the last transaction. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>Amount</parametername>
</parameternamelist>
<parameterdescription>
<para>of bytes received. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_uarte.h" line="863" column="28" bodyfile="hal/nrf_uarte.h" bodystart="863" bodyend="870" declfile="hal/nrf_uarte.h" declline="627" declcolumn="28"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__nrf__uarte__hal_1ga163aa58099af5af3b8ee35c3155a34f0" prot="public" static="no">
        <name>NRF_UARTE_INST_GET</name>
        <param><defname>idx</defname></param>
        <initializer><ref refid="group__nrfx__utils_1ga5ea61d0994f6fb1ab5ed59d44f6a7ce9" kindref="member">NRFX_CONCAT</ref>(NRF_, UARTE, idx)</initializer>
        <briefdescription>
<para>Macro getting pointer to the structure of registers of the UARTE peripheral. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">idx</parametername>
</parameternamelist>
<parameterdescription>
<para>UARTE instance index.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to the structure of registers of the UARTE peripheral. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_uarte.h" line="67" column="9" bodyfile="hal/nrf_uarte.h" bodystart="67" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__uarte__hal_1ga8c6fb673c718d483cfd092b2876e4e3a" prot="public" static="no">
        <name>NRF_UARTE_HAS_DMA_REG</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Symbol indicating whether dedicated DMA register is present. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_uarte.h" line="71" column="9" bodyfile="hal/nrf_uarte.h" bodystart="71" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__uarte__hal_1ga076e06cca1beb456e2f3aeef25078be8" prot="public" static="no">
        <name>NRF_UARTE_HAS_DMA_TASKS_EVENTS</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Symbol indicating whether UARTE DMA tasks and events are present. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_uarte.h" line="79" column="9" bodyfile="hal/nrf_uarte.h" bodystart="79" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__uarte__hal_1ga9b1018ce818e2f7a1400ca0e43b0cf2a" prot="public" static="no">
        <name>NRF_UARTE_HAS_DMA_SHORTS</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Symbol indicating whether UARTE DMA shortcuts are present. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_uarte.h" line="86" column="9" bodyfile="hal/nrf_uarte.h" bodystart="86" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__uarte__hal_1ga5a41ceea56437a8d61dfd70a6f0f6a6f" prot="public" static="no">
        <name>NRF_UARTE_HAS_ENDTX_STOPTX_SHORT</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Symbol indicating whether UARTE ENDTX_STOPTX shortcut is present. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_uarte.h" line="94" column="9" bodyfile="hal/nrf_uarte.h" bodystart="94" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__uarte__hal_1gad1d66a544d55b791e4a9c7cb26186144" prot="public" static="no">
        <name>NRF_UARTE_BASE_FREQUENCY_128MHZ</name>
        <initializer>(<ref refid="group__nrfx__common_1ga30e3c68cc0831c3bd64574a0a64439cc" kindref="member">NRFX_MHZ_TO_HZ</ref>(128UL))</initializer>
        <briefdescription>
<para>Base frequency value 128 MHz for UARTE. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_uarte.h" line="100" column="9" bodyfile="hal/nrf_uarte.h" bodystart="100" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__uarte__hal_1gabf5b1cb781ef23c14045cab6c9357db4" prot="public" static="no">
        <name>NRF_UARTE_BASE_FREQUENCY_64MHZ</name>
        <initializer>(<ref refid="group__nrfx__common_1ga30e3c68cc0831c3bd64574a0a64439cc" kindref="member">NRFX_MHZ_TO_HZ</ref>(64UL))</initializer>
        <briefdescription>
<para>Base frequency value 64 MHz for UARTE. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_uarte.h" line="102" column="9" bodyfile="hal/nrf_uarte.h" bodystart="102" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__uarte__hal_1gac4d1b4891d0eddf0341d513217d6d0db" prot="public" static="no">
        <name>NRF_UARTE_BASE_FREQUENCY_16MHZ</name>
        <initializer>(<ref refid="group__nrfx__common_1ga30e3c68cc0831c3bd64574a0a64439cc" kindref="member">NRFX_MHZ_TO_HZ</ref>(16UL))</initializer>
        <briefdescription>
<para>Base frequency value 16 MHz for UARTE. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_uarte.h" line="104" column="9" bodyfile="hal/nrf_uarte.h" bodystart="104" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__uarte__hal_1ga68e72cc37ed15adfd86c09f040259217" prot="public" static="no">
        <name>NRF_UARTE_IS_128MHZ_UARTE</name>
        <param><defname>p_reg</defname></param>
        <initializer>    (<ref refid="group__nrfx__utils_1ga3759226de0d998545425ded334168058" kindref="member">NRFX_COND_CODE_1</ref>(<ref refid="group__nrfx__utils_1ga238278032464c932dc46946bedd44473" kindref="member">NRFX_IS_ENABLED</ref>(NRF_CPU_FREQ_IS_128MHZ),                               \
        (<ref refid="group__nrfx__utils_1ga3759226de0d998545425ded334168058" kindref="member">NRFX_COND_CODE_1</ref>(<ref refid="group__nrfx__common_1ga9cc7f9da377228c1f0b191bd660577af" kindref="member">NRFX_INSTANCE_PRESENT</ref>(UARTE00), (p_reg == NRF_UARTE00), (false))), \
        (false)))</initializer>
        <briefdescription>
<para>Macro for checking whether the base frequency for the specified UARTE is 128 MHz. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_uarte.h" line="108" column="9" bodyfile="hal/nrf_uarte.h" bodystart="108" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__uarte__hal_1gab7ed47dc391119f4368f54a15ee15300" prot="public" static="no">
        <name>NRF_UARTE_IS_64MHZ_UARTE</name>
        <param><defname>p_reg</defname></param>
        <initializer>    (<ref refid="group__nrfx__utils_1ga3759226de0d998545425ded334168058" kindref="member">NRFX_COND_CODE_1</ref>(<ref refid="group__nrfx__utils_1ga238278032464c932dc46946bedd44473" kindref="member">NRFX_IS_ENABLED</ref>(NRF_CPU_FREQ_IS_64MHZ),                                \
        (<ref refid="group__nrfx__utils_1ga3759226de0d998545425ded334168058" kindref="member">NRFX_COND_CODE_1</ref>(<ref refid="group__nrfx__common_1ga9cc7f9da377228c1f0b191bd660577af" kindref="member">NRFX_INSTANCE_PRESENT</ref>(UARTE00), (p_reg == NRF_UARTE00), (false))), \
        (false)))</initializer>
        <briefdescription>
<para>Macro for checking whether the base frequency for the specified UARTE is 64 MHz. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_uarte.h" line="116" column="9" bodyfile="hal/nrf_uarte.h" bodystart="116" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__uarte__hal_1gaa420fce556af9f1f14701f5c4dd3729a" prot="public" static="no">
        <name>NRF_UARTE_BASE_FREQUENCY_GET</name>
        <param><defname>p_reg</defname></param>
        <initializer>    ((<ref refid="group__nrf__uarte__hal_1ga68e72cc37ed15adfd86c09f040259217" kindref="member">NRF_UARTE_IS_128MHZ_UARTE</ref>(p_reg)) ? (<ref refid="group__nrf__uarte__hal_1gad1d66a544d55b791e4a9c7cb26186144" kindref="member">NRF_UARTE_BASE_FREQUENCY_128MHZ</ref>): \
    ((<ref refid="group__nrf__uarte__hal_1gab7ed47dc391119f4368f54a15ee15300" kindref="member">NRF_UARTE_IS_64MHZ_UARTE</ref>(p_reg))  ? (<ref refid="group__nrf__uarte__hal_1gabf5b1cb781ef23c14045cab6c9357db4" kindref="member">NRF_UARTE_BASE_FREQUENCY_64MHZ</ref>) : \
    (<ref refid="group__nrf__uarte__hal_1gac4d1b4891d0eddf0341d513217d6d0db" kindref="member">NRF_UARTE_BASE_FREQUENCY_16MHZ</ref>)))</initializer>
        <briefdescription>
<para>Macro for getting base frequency value in Hz for the specified UARTE. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_uarte.h" line="127" column="9" bodyfile="hal/nrf_uarte.h" bodystart="127" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Hardware access layer for managing the UARTE peripheral. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
