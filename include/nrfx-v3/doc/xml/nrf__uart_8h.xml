<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="nrf__uart_8h" kind="file" language="C++">
    <compoundname>nrf_uart.h</compoundname>
    <includes local="no">nrfx.h</includes>
    <includedby refid="nrfx__uart_8h" local="no">drivers/include/nrfx_uart.h</includedby>
    <incdepgraph>
      <node id="1">
        <label>hal/nrf_uart.h</label>
        <link refid="nrf__uart_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>nrfx.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="structnrf__uart__config__t" prot="public">nrf_uart_config_t</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__nrf__uart__hal_1gab38e708a2cf27ff754d4bc2a6e57f35f" prot="public" static="no">
        <name>NRF_UART_HAS_STOP_BITS</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Symbol indicating whether UART has configurable number of stop bits. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_uart.h" line="52" column="9" bodyfile="hal/nrf_uart.h" bodystart="52" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__uart__hal_1ga38a78d3f2b10257dbcda71d0a8bb7d18" prot="public" static="no">
        <name>NRF_UART_HAS_PARITY_BIT</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Symbol indicating whether UART has parity bit. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_uart.h" line="59" column="9" bodyfile="hal/nrf_uart.h" bodystart="59" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__uart__hal_1ga505f00f51ff5b93317032f1e3b5ba1a6" prot="public" static="no">
        <name>NRF_UART_PSEL_DISCONNECTED</name>
        <initializer>0xFFFFFFFF</initializer>
        <briefdescription>
<para>Pin disconnected value. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_uart.h" line="65" column="9" bodyfile="hal/nrf_uart.h" bodystart="65" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="group__nrf__uart__hal_1ga61ed3c0eb7723a0dfda76d7d5025e5a8" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_uart_task_t</name>
        <enumvalue id="group__nrf__uart__hal_1gga61ed3c0eb7723a0dfda76d7d5025e5a8a7944c51647176e92ecd9ed71413d036e" prot="public">
          <name>NRF_UART_TASK_STARTRX</name>
          <initializer>= offsetof(NRF_UART_Type, TASKS_STARTRX)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Task for starting reception. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__uart__hal_1gga61ed3c0eb7723a0dfda76d7d5025e5a8a968271c88c4239dcf601036015600e60" prot="public">
          <name>NRF_UART_TASK_STOPRX</name>
          <initializer>= offsetof(NRF_UART_Type, TASKS_STOPRX)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Task for stopping reception. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__uart__hal_1gga61ed3c0eb7723a0dfda76d7d5025e5a8a31d6b14e13e08941a016ec705875d09f" prot="public">
          <name>NRF_UART_TASK_STARTTX</name>
          <initializer>= offsetof(NRF_UART_Type, TASKS_STARTTX)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Task for starting transmission. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__uart__hal_1gga61ed3c0eb7723a0dfda76d7d5025e5a8ac076bc6fc36a354a198d7778f4a1d680" prot="public">
          <name>NRF_UART_TASK_STOPTX</name>
          <initializer>= offsetof(NRF_UART_Type, TASKS_STOPTX)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Task for stopping transmission. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__uart__hal_1gga61ed3c0eb7723a0dfda76d7d5025e5a8ae814ca635be2cc5f81d60cae0fd6b053" prot="public">
          <name>NRF_UART_TASK_SUSPEND</name>
          <initializer>= offsetof(NRF_UART_Type, TASKS_SUSPEND)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Task for suspending UART. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>UART tasks. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_uart.h" line="68" column="1" bodyfile="hal/nrf_uart.h" bodystart="69" bodyend="75"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__uart__hal_1gad1710c9c8832f8d4b3264cca8029b730" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_uart_event_t</name>
        <enumvalue id="group__nrf__uart__hal_1ggad1710c9c8832f8d4b3264cca8029b730ad6b390f60fde5c9f4f78d38b9828937c" prot="public">
          <name>NRF_UART_EVENT_CTS</name>
          <initializer>= offsetof(NRF_UART_Type, EVENTS_CTS)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Event from CTS line activation. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__uart__hal_1ggad1710c9c8832f8d4b3264cca8029b730a61d620c43e4a53c1ae7261d6eba14dca" prot="public">
          <name>NRF_UART_EVENT_NCTS</name>
          <initializer>= offsetof(NRF_UART_Type, EVENTS_NCTS)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Event from CTS line deactivation. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__uart__hal_1ggad1710c9c8832f8d4b3264cca8029b730abbbe469642409d1edcb3e60f7081e530" prot="public">
          <name>NRF_UART_EVENT_RXDRDY</name>
          <initializer>= offsetof(NRF_UART_Type, EVENTS_RXDRDY)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Event from data ready in RXD. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__uart__hal_1ggad1710c9c8832f8d4b3264cca8029b730aa18bae5b1345aac3762c049c98181399" prot="public">
          <name>NRF_UART_EVENT_TXDRDY</name>
          <initializer>= offsetof(NRF_UART_Type, EVENTS_TXDRDY)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Event from data sent from TXD. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__uart__hal_1ggad1710c9c8832f8d4b3264cca8029b730a598a30db76b856bcf3dc5c33ea318c84" prot="public">
          <name>NRF_UART_EVENT_ERROR</name>
          <initializer>= offsetof(NRF_UART_Type, EVENTS_ERROR)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Event from error detection. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__uart__hal_1ggad1710c9c8832f8d4b3264cca8029b730aa0d6c0da694b3ff12b7a5a0604a0750d" prot="public">
          <name>NRF_UART_EVENT_RXTO</name>
          <initializer>= offsetof(NRF_UART_Type, EVENTS_RXTO)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Event from receiver timeout. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>UART events. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_uart.h" line="78" column="1" bodyfile="hal/nrf_uart.h" bodystart="79" bodyend="86"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__uart__hal_1ga6761747333c2f75275f1937c2d6ad74e" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_uart_int_mask_t</name>
        <enumvalue id="group__nrf__uart__hal_1gga6761747333c2f75275f1937c2d6ad74eaf3952af638e0621a0ea5d4147c6dccc3" prot="public">
          <name>NRF_UART_INT_MASK_CTS</name>
          <initializer>= UART_INTENCLR_CTS_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>CTS line activation interrupt. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__uart__hal_1gga6761747333c2f75275f1937c2d6ad74ea55a1410d9ee579f1ea41f68e4fcd8342" prot="public">
          <name>NRF_UART_INT_MASK_NCTS</name>
          <initializer>= UART_INTENCLR_NCTS_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>CTS line deactivation interrupt. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__uart__hal_1gga6761747333c2f75275f1937c2d6ad74ea4221966a92b24fda0827418021b3845e" prot="public">
          <name>NRF_UART_INT_MASK_RXDRDY</name>
          <initializer>= UART_INTENCLR_RXDRDY_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Data ready in RXD interrupt. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__uart__hal_1gga6761747333c2f75275f1937c2d6ad74ea0626e3c6e2f81c3f363b6b896a3f833f" prot="public">
          <name>NRF_UART_INT_MASK_TXDRDY</name>
          <initializer>= UART_INTENCLR_TXDRDY_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Data sent from TXD interrupt. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__uart__hal_1gga6761747333c2f75275f1937c2d6ad74ea06656ef3afe5293a39be053d4ef85125" prot="public">
          <name>NRF_UART_INT_MASK_ERROR</name>
          <initializer>= UART_INTENCLR_ERROR_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Error detection interrupt. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__uart__hal_1gga6761747333c2f75275f1937c2d6ad74ea1623602f4b7bf3d4ee2eed44f73b702d" prot="public">
          <name>NRF_UART_INT_MASK_RXTO</name>
          <initializer>= UART_INTENCLR_RXTO_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Receiver timeout interrupt. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>UART interrupts. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_uart.h" line="89" column="1" bodyfile="hal/nrf_uart.h" bodystart="90" bodyend="97"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__uart__hal_1ga8f8c852e9d2eca9a20348c0640d7db5e" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_uart_baudrate_t</name>
        <enumvalue id="group__nrf__uart__hal_1gga8f8c852e9d2eca9a20348c0640d7db5ea383757ee779a142c3389e77a5618131a" prot="public">
          <name>NRF_UART_BAUDRATE_1200</name>
          <initializer>= UART_BAUDRATE_BAUDRATE_Baud1200</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>1200 baud. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__uart__hal_1gga8f8c852e9d2eca9a20348c0640d7db5ead538441e899131383dc6fba84081dbde" prot="public">
          <name>NRF_UART_BAUDRATE_2400</name>
          <initializer>= UART_BAUDRATE_BAUDRATE_Baud2400</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>2400 baud. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__uart__hal_1gga8f8c852e9d2eca9a20348c0640d7db5ea1adca8d04e52de1d85f33b1897310f2f" prot="public">
          <name>NRF_UART_BAUDRATE_4800</name>
          <initializer>= UART_BAUDRATE_BAUDRATE_Baud4800</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>4800 baud. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__uart__hal_1gga8f8c852e9d2eca9a20348c0640d7db5eab756a5e0b424f332b9cf7143a4127f7b" prot="public">
          <name>NRF_UART_BAUDRATE_9600</name>
          <initializer>= UART_BAUDRATE_BAUDRATE_Baud9600</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>9600 baud. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__uart__hal_1gga8f8c852e9d2eca9a20348c0640d7db5ea1a7dd8a087e9169505096b3eac3b2e57" prot="public">
          <name>NRF_UART_BAUDRATE_14400</name>
          <initializer>= UART_BAUDRATE_BAUDRATE_Baud14400</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>14400 baud. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__uart__hal_1gga8f8c852e9d2eca9a20348c0640d7db5ea545c88be9dfc1bfae61e3b338f470962" prot="public">
          <name>NRF_UART_BAUDRATE_19200</name>
          <initializer>= UART_BAUDRATE_BAUDRATE_Baud19200</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>19200 baud. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__uart__hal_1gga8f8c852e9d2eca9a20348c0640d7db5ea2ae8c9cd33f76e9b4ec761128957bda3" prot="public">
          <name>NRF_UART_BAUDRATE_28800</name>
          <initializer>= UART_BAUDRATE_BAUDRATE_Baud28800</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>28800 baud. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__uart__hal_1gga8f8c852e9d2eca9a20348c0640d7db5eaaa74df764a7068cbdcdb83812c8decff" prot="public">
          <name>NRF_UART_BAUDRATE_31250</name>
          <initializer>= UART_BAUDRATE_BAUDRATE_Baud31250</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>31250 baud. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__uart__hal_1gga8f8c852e9d2eca9a20348c0640d7db5ea0744f8a5257e55a965f6a6583c05687f" prot="public">
          <name>NRF_UART_BAUDRATE_38400</name>
          <initializer>= UART_BAUDRATE_BAUDRATE_Baud38400</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>38400 baud. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__uart__hal_1gga8f8c852e9d2eca9a20348c0640d7db5ea36ec1ad8b0bed3d13137b9f3d4957753" prot="public">
          <name>NRF_UART_BAUDRATE_56000</name>
          <initializer>= UART_BAUDRATE_BAUDRATE_Baud56000</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>56000 baud. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__uart__hal_1gga8f8c852e9d2eca9a20348c0640d7db5eaf723ee66cddb66e67b7a169c7becdc77" prot="public">
          <name>NRF_UART_BAUDRATE_57600</name>
          <initializer>= UART_BAUDRATE_BAUDRATE_Baud57600</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>57600 baud. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__uart__hal_1gga8f8c852e9d2eca9a20348c0640d7db5ea9bf0fca698611c5cb5a86aeea33ca8b2" prot="public">
          <name>NRF_UART_BAUDRATE_76800</name>
          <initializer>= UART_BAUDRATE_BAUDRATE_Baud76800</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>76800 baud. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__uart__hal_1gga8f8c852e9d2eca9a20348c0640d7db5ea899519ef5bc33b854b4ffe9b2fd743db" prot="public">
          <name>NRF_UART_BAUDRATE_115200</name>
          <initializer>= UART_BAUDRATE_BAUDRATE_Baud115200</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>115200 baud. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__uart__hal_1gga8f8c852e9d2eca9a20348c0640d7db5ea64f94cbf9ccb1633751df9727d2d1e09" prot="public">
          <name>NRF_UART_BAUDRATE_230400</name>
          <initializer>= UART_BAUDRATE_BAUDRATE_Baud230400</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>230400 baud. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__uart__hal_1gga8f8c852e9d2eca9a20348c0640d7db5eaccb8e6d20d3d94158dd289be8d5892b9" prot="public">
          <name>NRF_UART_BAUDRATE_250000</name>
          <initializer>= UART_BAUDRATE_BAUDRATE_Baud250000</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>250000 baud. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__uart__hal_1gga8f8c852e9d2eca9a20348c0640d7db5eaa5314f8c0a319b78a9c2730b70f32cbd" prot="public">
          <name>NRF_UART_BAUDRATE_460800</name>
          <initializer>= UART_BAUDRATE_BAUDRATE_Baud460800</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>460800 baud. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__uart__hal_1gga8f8c852e9d2eca9a20348c0640d7db5eafd0a988a75e8d74588e9e65d620b0297" prot="public">
          <name>NRF_UART_BAUDRATE_921600</name>
          <initializer>= UART_BAUDRATE_BAUDRATE_Baud921600</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>921600 baud. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__uart__hal_1gga8f8c852e9d2eca9a20348c0640d7db5eadd4bf9d81444a39933d4d9ab529bc0d1" prot="public">
          <name>NRF_UART_BAUDRATE_1000000</name>
          <initializer>= UART_BAUDRATE_BAUDRATE_Baud1M</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>1000000 baud. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Baudrates supported by UART. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_uart.h" line="100" column="1" bodyfile="hal/nrf_uart.h" bodystart="101" bodyend="120"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__uart__hal_1ga2657a793028d3f7083ad87cc05bd9817" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_uart_error_mask_t</name>
        <enumvalue id="group__nrf__uart__hal_1gga2657a793028d3f7083ad87cc05bd9817abb3cd66d759e0db84edaef35d1d5f0fd" prot="public">
          <name>NRF_UART_ERROR_OVERRUN_MASK</name>
          <initializer>= UART_ERRORSRC_OVERRUN_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Overrun error. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__uart__hal_1gga2657a793028d3f7083ad87cc05bd9817ac4ca465ca398652189df240dd8c59a1b" prot="public">
          <name>NRF_UART_ERROR_PARITY_MASK</name>
          <initializer>= UART_ERRORSRC_PARITY_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Parity error. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__uart__hal_1gga2657a793028d3f7083ad87cc05bd9817a73489365f43fa6d77431818176005335" prot="public">
          <name>NRF_UART_ERROR_FRAMING_MASK</name>
          <initializer>= UART_ERRORSRC_FRAMING_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Framing error. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__uart__hal_1gga2657a793028d3f7083ad87cc05bd9817a1e318d4ecd962d5b08d7a221f2d8f6de" prot="public">
          <name>NRF_UART_ERROR_BREAK_MASK</name>
          <initializer>= UART_ERRORSRC_BREAK_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Break error. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Types of UART error masks. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_uart.h" line="123" column="1" bodyfile="hal/nrf_uart.h" bodystart="124" bodyend="129"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__uart__hal_1ga26a900177fa34963f4ac68f3896ad803" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_uart_parity_t</name>
        <enumvalue id="group__nrf__uart__hal_1gga26a900177fa34963f4ac68f3896ad803a0ac8b6f846138b0b5c25f6547718ae3c" prot="public">
          <name>NRF_UART_PARITY_EXCLUDED</name>
          <initializer>= UART_CONFIG_PARITY_Excluded &lt;&lt; UART_CONFIG_PARITY_Pos</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Parity excluded. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__uart__hal_1gga26a900177fa34963f4ac68f3896ad803ae95f6012ea9758f77526ef9ecbaaf5aa" prot="public">
          <name>NRF_UART_PARITY_INCLUDED</name>
          <initializer>= UART_CONFIG_PARITY_Included &lt;&lt; UART_CONFIG_PARITY_Pos</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Parity included. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Types of UART parity modes. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_uart.h" line="132" column="1" bodyfile="hal/nrf_uart.h" bodystart="133" bodyend="136"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__uart__hal_1ga64bc954123930f8167c2386a4dd58848" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_uart_hwfc_t</name>
        <enumvalue id="group__nrf__uart__hal_1gga64bc954123930f8167c2386a4dd58848ae70d354622bd8186a27d9e5f8563e8b3" prot="public">
          <name>NRF_UART_HWFC_DISABLED</name>
          <initializer>= UART_CONFIG_HWFC_Disabled</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Hardware flow control disabled. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__uart__hal_1gga64bc954123930f8167c2386a4dd58848adcce80c5ac80b773199d39121700fc3c" prot="public">
          <name>NRF_UART_HWFC_ENABLED</name>
          <initializer>= UART_CONFIG_HWFC_Enabled</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Hardware flow control enabled. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Types of UART flow control modes. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_uart.h" line="139" column="1" bodyfile="hal/nrf_uart.h" bodystart="140" bodyend="143"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__uart__hal_1ga86541355ae5c6a5699495c2483a85335" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_uart_stop_t</name>
        <enumvalue id="group__nrf__uart__hal_1gga86541355ae5c6a5699495c2483a85335a12996cfbd62d3a657a95f8088155225e" prot="public">
          <name>NRF_UART_STOP_ONE</name>
          <initializer>= UART_CONFIG_STOP_One &lt;&lt; UART_CONFIG_STOP_Pos</initializer>
          <briefdescription>
<para>One stop bit. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__uart__hal_1gga86541355ae5c6a5699495c2483a85335a1a4b5feb485b900ea35310d0dbdc93b4" prot="public">
          <name>NRF_UART_STOP_TWO</name>
          <initializer>= UART_CONFIG_STOP_Two &lt;&lt; UART_CONFIG_STOP_Pos</initializer>
          <briefdescription>
<para>Two stop bits. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Types of UART stop bit modes. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_uart.h" line="147" column="1" bodyfile="hal/nrf_uart.h" bodystart="148" bodyend="151"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__uart__hal_1gaefcc99f71b39e6750fae1b28765fb20d" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_uart_paritytype_t</name>
        <enumvalue id="group__nrf__uart__hal_1ggaefcc99f71b39e6750fae1b28765fb20da49f3221f6523cf71692001b348a72f7a" prot="public">
          <name>NRF_UART_PARITYTYPE_EVEN</name>
          <initializer>= UART_CONFIG_PARITYTYPE_Even &lt;&lt; UART_CONFIG_PARITYTYPE_Pos</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Parity even. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__uart__hal_1ggaefcc99f71b39e6750fae1b28765fb20da4a52289b6fd2e56639d2622488fd9ff4" prot="public">
          <name>NRF_UART_PARITYTYPE_ODD</name>
          <initializer>= UART_CONFIG_PARITYTYPE_Odd &lt;&lt; UART_CONFIG_PARITYTYPE_Pos</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Parity odd. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Types of UART parity types. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_uart.h" line="156" column="1" bodyfile="hal/nrf_uart.h" bodystart="157" bodyend="160"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__nrf__uart__hal_1ga4ccf1a06d588351d7f8b4a768538c72f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_uart_event_clear</definition>
        <argsstring>(NRF_UART_Type *p_reg, nrf_uart_event_t event)</argsstring>
        <name>nrf_uart_event_clear</name>
        <param>
          <type>NRF_UART_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__uart__hal_1gad1710c9c8832f8d4b3264cca8029b730" kindref="member">nrf_uart_event_t</ref></type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>Function for clearing the specified UART event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event to clear. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_uart.h" line="386" column="24" bodyfile="hal/nrf_uart.h" bodystart="386" bodyend="390" declfile="hal/nrf_uart.h" declline="182" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__uart__hal_1ga606e9a1fa988a2f345aa0fbfe62286d0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE bool</type>
        <definition>NRF_STATIC_INLINE bool nrf_uart_event_check</definition>
        <argsstring>(NRF_UART_Type const *p_reg, nrf_uart_event_t event)</argsstring>
        <name>nrf_uart_event_check</name>
        <param>
          <type>NRF_UART_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__uart__hal_1gad1710c9c8832f8d4b3264cca8029b730" kindref="member">nrf_uart_event_t</ref></type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>Function for retrieving the state of the UART event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event to be checked.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>The event has been generated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>The event has not been generated. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_uart.h" line="392" column="24" bodyfile="hal/nrf_uart.h" bodystart="392" bodyend="395" declfile="hal/nrf_uart.h" declline="193" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__uart__hal_1ga34b7c6fb8b390d1a89f16014745cdfc7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_uart_event_address_get</definition>
        <argsstring>(NRF_UART_Type const *p_reg, nrf_uart_event_t event)</argsstring>
        <name>nrf_uart_event_address_get</name>
        <param>
          <type>NRF_UART_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__uart__hal_1gad1710c9c8832f8d4b3264cca8029b730" kindref="member">nrf_uart_event_t</ref></type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>Function for returning the address of the specified UART event register. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>Desired event.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Address of the specified event register. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_uart.h" line="397" column="28" bodyfile="hal/nrf_uart.h" bodystart="397" bodyend="401" declfile="hal/nrf_uart.h" declline="203" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__uart__hal_1ga1810118150a18a4a7141515ce673f5ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_uart_int_enable</definition>
        <argsstring>(NRF_UART_Type *p_reg, uint32_t mask)</argsstring>
        <name>nrf_uart_int_enable</name>
        <param>
          <type>NRF_UART_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Function for enabling the specified interrupt. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of interrupts to be enabled. Use <ref refid="group__nrf__uart__hal_1ga6761747333c2f75275f1937c2d6ad74e" kindref="member">nrf_uart_int_mask_t</ref> values for bit masking. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_uart.h" line="403" column="24" bodyfile="hal/nrf_uart.h" bodystart="403" bodyend="406" declfile="hal/nrf_uart.h" declline="213" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__uart__hal_1ga356b6c5f4931514e70461d4a6b9d48fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_uart_int_enable_check</definition>
        <argsstring>(NRF_UART_Type const *p_reg, uint32_t mask)</argsstring>
        <name>nrf_uart_int_enable_check</name>
        <param>
          <type>NRF_UART_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Function for checking if the specified interrupts are enabled. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of interrupts to be checked. Use <ref refid="group__nrf__uart__hal_1ga6761747333c2f75275f1937c2d6ad74e" kindref="member">nrf_uart_int_mask_t</ref> values for bit masking.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Mask of enabled interrupts. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_uart.h" line="408" column="28" bodyfile="hal/nrf_uart.h" bodystart="408" bodyend="411" declfile="hal/nrf_uart.h" declline="224" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__uart__hal_1ga79f8c0342aa7df242eaf661497e1cab4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_uart_int_disable</definition>
        <argsstring>(NRF_UART_Type *p_reg, uint32_t mask)</argsstring>
        <name>nrf_uart_int_disable</name>
        <param>
          <type>NRF_UART_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Function for disabling the specified interrupts. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of interrupts to be disabled. Use <ref refid="group__nrf__uart__hal_1ga6761747333c2f75275f1937c2d6ad74e" kindref="member">nrf_uart_int_mask_t</ref> values for bit masking. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_uart.h" line="413" column="24" bodyfile="hal/nrf_uart.h" bodystart="413" bodyend="416" declfile="hal/nrf_uart.h" declline="233" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__uart__hal_1ga5b14625de90dd7efa4a676864ad7a08d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_uart_errorsrc_get_and_clear</definition>
        <argsstring>(NRF_UART_Type *p_reg)</argsstring>
        <name>nrf_uart_errorsrc_get_and_clear</name>
        <param>
          <type>NRF_UART_Type *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting error source mask. Function is clearing error source flags after reading. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Mask with error source flags. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_uart.h" line="418" column="28" bodyfile="hal/nrf_uart.h" bodystart="418" bodyend="423" declfile="hal/nrf_uart.h" declline="242" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__uart__hal_1ga9d0c5e3f47bcdb6aa05ce2f32b642718" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_uart_enable</definition>
        <argsstring>(NRF_UART_Type *p_reg)</argsstring>
        <name>nrf_uart_enable</name>
        <param>
          <type>NRF_UART_Type *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for enabling UART. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_uart.h" line="425" column="24" bodyfile="hal/nrf_uart.h" bodystart="425" bodyend="428" declfile="hal/nrf_uart.h" declline="249" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__uart__hal_1ga05a59664bec3868983c19d1d1aab6e47" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_uart_disable</definition>
        <argsstring>(NRF_UART_Type *p_reg)</argsstring>
        <name>nrf_uart_disable</name>
        <param>
          <type>NRF_UART_Type *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for disabling UART. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_uart.h" line="430" column="24" bodyfile="hal/nrf_uart.h" bodystart="430" bodyend="433" declfile="hal/nrf_uart.h" declline="256" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__uart__hal_1ga9a4b477deefb352c2a506beb608db367" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_uart_txrx_pins_set</definition>
        <argsstring>(NRF_UART_Type *p_reg, uint32_t pseltxd, uint32_t pselrxd)</argsstring>
        <name>nrf_uart_txrx_pins_set</name>
        <param>
          <type>NRF_UART_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>pseltxd</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>pselrxd</declname>
        </param>
        <briefdescription>
<para>Function for configuring TX/RX pins. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pseltxd</parametername>
</parameternamelist>
<parameterdescription>
<para>TXD pin number. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pselrxd</parametername>
</parameternamelist>
<parameterdescription>
<para>RXD pin number. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_uart.h" line="435" column="24" bodyfile="hal/nrf_uart.h" bodystart="435" bodyend="449" declfile="hal/nrf_uart.h" declline="265" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__uart__hal_1ga916e58177ce3921e1ca25b93c7ee6feb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_uart_txrx_pins_disconnect</definition>
        <argsstring>(NRF_UART_Type *p_reg)</argsstring>
        <name>nrf_uart_txrx_pins_disconnect</name>
        <param>
          <type>NRF_UART_Type *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for disconnecting TX/RX pins. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_uart.h" line="451" column="24" bodyfile="hal/nrf_uart.h" bodystart="451" bodyend="454" declfile="hal/nrf_uart.h" declline="274" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__uart__hal_1ga185c5d2dd6a70ce1caa02925631f0a9b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_uart_tx_pin_get</definition>
        <argsstring>(NRF_UART_Type const *p_reg)</argsstring>
        <name>nrf_uart_tx_pin_get</name>
        <param>
          <type>NRF_UART_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting TX pin selection. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>TX pin selection. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_uart.h" line="456" column="28" bodyfile="hal/nrf_uart.h" bodystart="456" bodyend="463" declfile="hal/nrf_uart.h" declline="283" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__uart__hal_1ga43e05bb6e6b697b7ce23c61cdcc5b9bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_uart_rx_pin_get</definition>
        <argsstring>(NRF_UART_Type const *p_reg)</argsstring>
        <name>nrf_uart_rx_pin_get</name>
        <param>
          <type>NRF_UART_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting RX pin selection. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>RX pin selection. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_uart.h" line="465" column="28" bodyfile="hal/nrf_uart.h" bodystart="465" bodyend="472" declfile="hal/nrf_uart.h" declline="292" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__uart__hal_1gacaaef7353f53511c5253106fc70f481c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_uart_rts_pin_get</definition>
        <argsstring>(NRF_UART_Type const *p_reg)</argsstring>
        <name>nrf_uart_rts_pin_get</name>
        <param>
          <type>NRF_UART_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting RTS pin selection. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>RTS pin selection. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_uart.h" line="474" column="28" bodyfile="hal/nrf_uart.h" bodystart="474" bodyend="481" declfile="hal/nrf_uart.h" declline="301" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__uart__hal_1gab5e10a9d04873dcfb6d2ffe9bf9fb970" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_uart_cts_pin_get</definition>
        <argsstring>(NRF_UART_Type const *p_reg)</argsstring>
        <name>nrf_uart_cts_pin_get</name>
        <param>
          <type>NRF_UART_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting CTS pin selection. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>CTS pin selection. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_uart.h" line="483" column="28" bodyfile="hal/nrf_uart.h" bodystart="483" bodyend="490" declfile="hal/nrf_uart.h" declline="310" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__uart__hal_1ga233ad2e767cda140392f71b783856f25" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_uart_hwfc_pins_set</definition>
        <argsstring>(NRF_UART_Type *p_reg, uint32_t pselrts, uint32_t pselcts)</argsstring>
        <name>nrf_uart_hwfc_pins_set</name>
        <param>
          <type>NRF_UART_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>pselrts</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>pselcts</declname>
        </param>
        <briefdescription>
<para>Function for configuring flow control pins. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pselrts</parametername>
</parameternamelist>
<parameterdescription>
<para>RTS pin number. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pselcts</parametername>
</parameternamelist>
<parameterdescription>
<para>CTS pin number. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_uart.h" line="492" column="24" bodyfile="hal/nrf_uart.h" bodystart="492" bodyend="507" declfile="hal/nrf_uart.h" declline="319" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__uart__hal_1ga58d5bf6d518022f9a70db58e46e9d71b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_uart_hwfc_pins_disconnect</definition>
        <argsstring>(NRF_UART_Type *p_reg)</argsstring>
        <name>nrf_uart_hwfc_pins_disconnect</name>
        <param>
          <type>NRF_UART_Type *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for disconnecting flow control pins. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_uart.h" line="509" column="24" bodyfile="hal/nrf_uart.h" bodystart="509" bodyend="512" declfile="hal/nrf_uart.h" declline="328" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__uart__hal_1ga0f9599db902d7d5687e41960861c052f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint8_t</type>
        <definition>NRF_STATIC_INLINE uint8_t nrf_uart_rxd_get</definition>
        <argsstring>(NRF_UART_Type const *p_reg)</argsstring>
        <name>nrf_uart_rxd_get</name>
        <param>
          <type>NRF_UART_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for reading RX data. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Received byte. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_uart.h" line="514" column="27" bodyfile="hal/nrf_uart.h" bodystart="514" bodyend="517" declfile="hal/nrf_uart.h" declline="337" declcolumn="27"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__uart__hal_1gafcbe59c42409c30ae67c5ce356e81bc9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_uart_txd_set</definition>
        <argsstring>(NRF_UART_Type *p_reg, uint8_t txd)</argsstring>
        <name>nrf_uart_txd_set</name>
        <param>
          <type>NRF_UART_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>txd</declname>
        </param>
        <briefdescription>
<para>Function for setting Tx data. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">txd</parametername>
</parameternamelist>
<parameterdescription>
<para>Byte. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_uart.h" line="519" column="24" bodyfile="hal/nrf_uart.h" bodystart="519" bodyend="522" declfile="hal/nrf_uart.h" declline="345" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__uart__hal_1gabfb2d0dcd715241ffd35366a89a5f0e4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_uart_task_trigger</definition>
        <argsstring>(NRF_UART_Type *p_reg, nrf_uart_task_t task)</argsstring>
        <name>nrf_uart_task_trigger</name>
        <param>
          <type>NRF_UART_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__uart__hal_1ga61ed3c0eb7723a0dfda76d7d5025e5a8" kindref="member">nrf_uart_task_t</ref></type>
          <declname>task</declname>
        </param>
        <briefdescription>
<para>Function for starting an UART task. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">task</parametername>
</parameternamelist>
<parameterdescription>
<para>Task. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_uart.h" line="524" column="24" bodyfile="hal/nrf_uart.h" bodystart="524" bodyend="527" declfile="hal/nrf_uart.h" declline="353" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__uart__hal_1ga4ed8898231ccdf2ebc2510b56fbeac00" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_uart_task_address_get</definition>
        <argsstring>(NRF_UART_Type const *p_reg, nrf_uart_task_t task)</argsstring>
        <name>nrf_uart_task_address_get</name>
        <param>
          <type>NRF_UART_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__uart__hal_1ga61ed3c0eb7723a0dfda76d7d5025e5a8" kindref="member">nrf_uart_task_t</ref></type>
          <declname>task</declname>
        </param>
        <briefdescription>
<para>Function for returning the address of the specified task register. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">task</parametername>
</parameternamelist>
<parameterdescription>
<para>Task.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Task address. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_uart.h" line="529" column="28" bodyfile="hal/nrf_uart.h" bodystart="529" bodyend="533" declfile="hal/nrf_uart.h" declline="363" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__uart__hal_1gae958cb0991b05c497c7d996bc99e6c5d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_uart_configure</definition>
        <argsstring>(NRF_UART_Type *p_reg, nrf_uart_config_t const *p_cfg)</argsstring>
        <name>nrf_uart_configure</name>
        <param>
          <type>NRF_UART_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="structnrf__uart__config__t" kindref="compound">nrf_uart_config_t</ref> const *</type>
          <declname>p_cfg</declname>
        </param>
        <briefdescription>
<para>Function for configuring UART. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">p_cfg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to UART settings structure. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_uart.h" line="535" column="24" bodyfile="hal/nrf_uart.h" bodystart="535" bodyend="546" declfile="hal/nrf_uart.h" declline="372" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__uart__hal_1gafa5abc297e9adb026f8e15af80b2b30f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_uart_baudrate_set</definition>
        <argsstring>(NRF_UART_Type *p_reg, nrf_uart_baudrate_t baudrate)</argsstring>
        <name>nrf_uart_baudrate_set</name>
        <param>
          <type>NRF_UART_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__uart__hal_1ga8f8c852e9d2eca9a20348c0640d7db5e" kindref="member">nrf_uart_baudrate_t</ref></type>
          <declname>baudrate</declname>
        </param>
        <briefdescription>
<para>Function for setting UART baud rate. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">baudrate</parametername>
</parameternamelist>
<parameterdescription>
<para>Baud rate. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_uart.h" line="548" column="24" bodyfile="hal/nrf_uart.h" bodystart="548" bodyend="551" declfile="hal/nrf_uart.h" declline="381" declcolumn="24"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2015<sp/>-<sp/>2024,<sp/>Nordic<sp/>Semiconductor<sp/>ASA</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>All<sp/>rights<sp/>reserved.</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>SPDX-License-Identifier:<sp/>BSD-3-Clause</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions<sp/>are<sp/>met:</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>1.<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright<sp/>notice,<sp/>this</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>2.<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the<sp/>distribution.</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/>3.<sp/>Neither<sp/>the<sp/>name<sp/>of<sp/>the<sp/>copyright<sp/>holder<sp/>nor<sp/>the<sp/>names<sp/>of<sp/>its</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>contributors<sp/>may<sp/>be<sp/>used<sp/>to<sp/>endorse<sp/>or<sp/>promote<sp/>products<sp/>derived<sp/>from<sp/>this</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>software<sp/>without<sp/>specific<sp/>prior<sp/>written<sp/>permission.</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>COPYRIGHT<sp/>HOLDERS<sp/>AND<sp/>CONTRIBUTORS<sp/>&quot;AS<sp/>IS&quot;</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/>AND<sp/>ANY<sp/>EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>THE</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*<sp/>ARE<sp/>DISCLAIMED.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>COPYRIGHT<sp/>HOLDER<sp/>OR<sp/>CONTRIBUTORS<sp/>BE</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,<sp/>SPECIAL,<sp/>EXEMPLARY,<sp/>OR</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>PROCUREMENT<sp/>OF</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>*<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,<sp/>DATA,<sp/>OR<sp/>PROFITS;<sp/>OR<sp/>BUSINESS</highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/>*<sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY<sp/>THEORY<sp/>OF<sp/>LIABILITY,<sp/>WHETHER<sp/>IN</highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/>*<sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR<sp/>OTHERWISE)</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/>*<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE<sp/>OF<sp/>THIS<sp/>SOFTWARE,<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/>*<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight></codeline>
<codeline lineno="32"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>NRF_UART_H__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_UART_H__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;nrfx.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="43"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="44"><highlight class="comment"><sp/>*<sp/>@defgroup<sp/>nrf_uart_hal<sp/>UART<sp/>HAL</highlight></codeline>
<codeline lineno="45"><highlight class="comment"><sp/>*<sp/>@{</highlight></codeline>
<codeline lineno="46"><highlight class="comment"><sp/>*<sp/>@ingroup<sp/>nrf_uart</highlight></codeline>
<codeline lineno="47"><highlight class="comment"><sp/>*<sp/>@brief<sp/><sp/><sp/>Hardware<sp/>access<sp/>layer<sp/>for<sp/>managing<sp/>the<sp/>UART<sp/>peripheral.</highlight></codeline>
<codeline lineno="48"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(UART_CONFIG_STOP_Msk)<sp/>||<sp/>defined<sp/>(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="51"><highlight class="comment">/**<sp/>@brief<sp/>Symbol<sp/>indicating<sp/>whether<sp/>UART<sp/>has<sp/>configurable<sp/>number<sp/>of<sp/>stop<sp/>bits.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_UART_HAS_STOP_BITS<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_UART_HAS_STOP_BITS<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(UART_CONFIG_PARITYTYPE_Msk)<sp/>||<sp/>defined<sp/>(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="58"><highlight class="comment">/**<sp/>@brief<sp/>Symbol<sp/>indicating<sp/>whether<sp/>UART<sp/>has<sp/>parity<sp/>bit.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_UART_HAS_PARITY_BIT<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_UART_HAS_PARITY_BIT<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="64"><highlight class="comment">/**<sp/>@brief<sp/>Pin<sp/>disconnected<sp/>value.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_UART_PSEL_DISCONNECTED<sp/>0xFFFFFFFF</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="67"><highlight class="comment">/**<sp/>@brief<sp/>UART<sp/>tasks.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal">{</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__uart__hal_1gga61ed3c0eb7723a0dfda76d7d5025e5a8a7944c51647176e92ecd9ed71413d036e" kindref="member">NRF_UART_TASK_STARTRX</ref><sp/>=<sp/>offsetof(NRF_UART_Type,<sp/>TASKS_STARTRX),<sp/></highlight><highlight class="comment">/**&lt;<sp/>Task<sp/>for<sp/>starting<sp/>reception.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__uart__hal_1gga61ed3c0eb7723a0dfda76d7d5025e5a8a968271c88c4239dcf601036015600e60" kindref="member">NRF_UART_TASK_STOPRX</ref><sp/><sp/>=<sp/>offsetof(NRF_UART_Type,<sp/>TASKS_STOPRX),<sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Task<sp/>for<sp/>stopping<sp/>reception.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__uart__hal_1gga61ed3c0eb7723a0dfda76d7d5025e5a8a31d6b14e13e08941a016ec705875d09f" kindref="member">NRF_UART_TASK_STARTTX</ref><sp/>=<sp/>offsetof(NRF_UART_Type,<sp/>TASKS_STARTTX),<sp/></highlight><highlight class="comment">/**&lt;<sp/>Task<sp/>for<sp/>starting<sp/>transmission.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__uart__hal_1gga61ed3c0eb7723a0dfda76d7d5025e5a8ac076bc6fc36a354a198d7778f4a1d680" kindref="member">NRF_UART_TASK_STOPTX</ref><sp/><sp/>=<sp/>offsetof(NRF_UART_Type,<sp/>TASKS_STOPTX),<sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Task<sp/>for<sp/>stopping<sp/>transmission.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__uart__hal_1gga61ed3c0eb7723a0dfda76d7d5025e5a8ae814ca635be2cc5f81d60cae0fd6b053" kindref="member">NRF_UART_TASK_SUSPEND</ref><sp/>=<sp/>offsetof(NRF_UART_Type,<sp/>TASKS_SUSPEND),<sp/></highlight><highlight class="comment">/**&lt;<sp/>Task<sp/>for<sp/>suspending<sp/>UART.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal">}<sp/><ref refid="group__nrf__uart__hal_1ga61ed3c0eb7723a0dfda76d7d5025e5a8" kindref="member">nrf_uart_task_t</ref>;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="77"><highlight class="comment">/**<sp/>@brief<sp/>UART<sp/>events.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal">{</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__uart__hal_1ggad1710c9c8832f8d4b3264cca8029b730ad6b390f60fde5c9f4f78d38b9828937c" kindref="member">NRF_UART_EVENT_CTS</ref><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_UART_Type,<sp/>EVENTS_CTS),<sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Event<sp/>from<sp/>CTS<sp/>line<sp/>activation.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__uart__hal_1ggad1710c9c8832f8d4b3264cca8029b730a61d620c43e4a53c1ae7261d6eba14dca" kindref="member">NRF_UART_EVENT_NCTS</ref><sp/><sp/><sp/>=<sp/>offsetof(NRF_UART_Type,<sp/>EVENTS_NCTS),<sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Event<sp/>from<sp/>CTS<sp/>line<sp/>deactivation.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__uart__hal_1ggad1710c9c8832f8d4b3264cca8029b730abbbe469642409d1edcb3e60f7081e530" kindref="member">NRF_UART_EVENT_RXDRDY</ref><sp/>=<sp/>offsetof(NRF_UART_Type,<sp/>EVENTS_RXDRDY),</highlight><highlight class="comment">/**&lt;<sp/>Event<sp/>from<sp/>data<sp/>ready<sp/>in<sp/>RXD.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__uart__hal_1ggad1710c9c8832f8d4b3264cca8029b730aa18bae5b1345aac3762c049c98181399" kindref="member">NRF_UART_EVENT_TXDRDY</ref><sp/>=<sp/>offsetof(NRF_UART_Type,<sp/>EVENTS_TXDRDY),</highlight><highlight class="comment">/**&lt;<sp/>Event<sp/>from<sp/>data<sp/>sent<sp/>from<sp/>TXD.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__uart__hal_1ggad1710c9c8832f8d4b3264cca8029b730a598a30db76b856bcf3dc5c33ea318c84" kindref="member">NRF_UART_EVENT_ERROR</ref><sp/><sp/>=<sp/>offsetof(NRF_UART_Type,<sp/>EVENTS_ERROR),<sp/></highlight><highlight class="comment">/**&lt;<sp/>Event<sp/>from<sp/>error<sp/>detection.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__uart__hal_1ggad1710c9c8832f8d4b3264cca8029b730aa0d6c0da694b3ff12b7a5a0604a0750d" kindref="member">NRF_UART_EVENT_RXTO</ref><sp/><sp/><sp/>=<sp/>offsetof(NRF_UART_Type,<sp/>EVENTS_RXTO)<sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Event<sp/>from<sp/>receiver<sp/>timeout.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal">}<sp/><ref refid="group__nrf__uart__hal_1gad1710c9c8832f8d4b3264cca8029b730" kindref="member">nrf_uart_event_t</ref>;</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="88"><highlight class="comment">/**<sp/>@brief<sp/>UART<sp/>interrupts.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal">{</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__uart__hal_1gga6761747333c2f75275f1937c2d6ad74eaf3952af638e0621a0ea5d4147c6dccc3" kindref="member">NRF_UART_INT_MASK_CTS</ref><sp/><sp/><sp/><sp/>=<sp/>UART_INTENCLR_CTS_Msk,<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>CTS<sp/>line<sp/>activation<sp/>interrupt.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__uart__hal_1gga6761747333c2f75275f1937c2d6ad74ea55a1410d9ee579f1ea41f68e4fcd8342" kindref="member">NRF_UART_INT_MASK_NCTS</ref><sp/><sp/><sp/>=<sp/>UART_INTENCLR_NCTS_Msk,<sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>CTS<sp/>line<sp/>deactivation<sp/>interrupt.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__uart__hal_1gga6761747333c2f75275f1937c2d6ad74ea4221966a92b24fda0827418021b3845e" kindref="member">NRF_UART_INT_MASK_RXDRDY</ref><sp/>=<sp/>UART_INTENCLR_RXDRDY_Msk,<sp/></highlight><highlight class="comment">/**&lt;<sp/>Data<sp/>ready<sp/>in<sp/>RXD<sp/>interrupt.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__uart__hal_1gga6761747333c2f75275f1937c2d6ad74ea0626e3c6e2f81c3f363b6b896a3f833f" kindref="member">NRF_UART_INT_MASK_TXDRDY</ref><sp/>=<sp/>UART_INTENCLR_TXDRDY_Msk,<sp/></highlight><highlight class="comment">/**&lt;<sp/>Data<sp/>sent<sp/>from<sp/>TXD<sp/>interrupt.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__uart__hal_1gga6761747333c2f75275f1937c2d6ad74ea06656ef3afe5293a39be053d4ef85125" kindref="member">NRF_UART_INT_MASK_ERROR</ref><sp/><sp/>=<sp/>UART_INTENCLR_ERROR_Msk,<sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Error<sp/>detection<sp/>interrupt.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__uart__hal_1gga6761747333c2f75275f1937c2d6ad74ea1623602f4b7bf3d4ee2eed44f73b702d" kindref="member">NRF_UART_INT_MASK_RXTO</ref><sp/><sp/><sp/>=<sp/>UART_INTENCLR_RXTO_Msk<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Receiver<sp/>timeout<sp/>interrupt.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal">}<sp/><ref refid="group__nrf__uart__hal_1ga6761747333c2f75275f1937c2d6ad74e" kindref="member">nrf_uart_int_mask_t</ref>;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="99"><highlight class="comment">/**<sp/>@brief<sp/>Baudrates<sp/>supported<sp/>by<sp/>UART.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal">{</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__uart__hal_1gga8f8c852e9d2eca9a20348c0640d7db5ea383757ee779a142c3389e77a5618131a" kindref="member">NRF_UART_BAUDRATE_1200</ref><sp/><sp/><sp/><sp/>=<sp/>UART_BAUDRATE_BAUDRATE_Baud1200,<sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>1200<sp/>baud.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__uart__hal_1gga8f8c852e9d2eca9a20348c0640d7db5ead538441e899131383dc6fba84081dbde" kindref="member">NRF_UART_BAUDRATE_2400</ref><sp/><sp/><sp/><sp/>=<sp/>UART_BAUDRATE_BAUDRATE_Baud2400,<sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>2400<sp/>baud.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__uart__hal_1gga8f8c852e9d2eca9a20348c0640d7db5ea1adca8d04e52de1d85f33b1897310f2f" kindref="member">NRF_UART_BAUDRATE_4800</ref><sp/><sp/><sp/><sp/>=<sp/>UART_BAUDRATE_BAUDRATE_Baud4800,<sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>4800<sp/>baud.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__uart__hal_1gga8f8c852e9d2eca9a20348c0640d7db5eab756a5e0b424f332b9cf7143a4127f7b" kindref="member">NRF_UART_BAUDRATE_9600</ref><sp/><sp/><sp/><sp/>=<sp/>UART_BAUDRATE_BAUDRATE_Baud9600,<sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>9600<sp/>baud.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__uart__hal_1gga8f8c852e9d2eca9a20348c0640d7db5ea1a7dd8a087e9169505096b3eac3b2e57" kindref="member">NRF_UART_BAUDRATE_14400</ref><sp/><sp/><sp/>=<sp/>UART_BAUDRATE_BAUDRATE_Baud14400,<sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>14400<sp/>baud.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__uart__hal_1gga8f8c852e9d2eca9a20348c0640d7db5ea545c88be9dfc1bfae61e3b338f470962" kindref="member">NRF_UART_BAUDRATE_19200</ref><sp/><sp/><sp/>=<sp/>UART_BAUDRATE_BAUDRATE_Baud19200,<sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>19200<sp/>baud.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__uart__hal_1gga8f8c852e9d2eca9a20348c0640d7db5ea2ae8c9cd33f76e9b4ec761128957bda3" kindref="member">NRF_UART_BAUDRATE_28800</ref><sp/><sp/><sp/>=<sp/>UART_BAUDRATE_BAUDRATE_Baud28800,<sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>28800<sp/>baud.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__uart__hal_1gga8f8c852e9d2eca9a20348c0640d7db5eaaa74df764a7068cbdcdb83812c8decff" kindref="member">NRF_UART_BAUDRATE_31250</ref><sp/><sp/><sp/>=<sp/>UART_BAUDRATE_BAUDRATE_Baud31250,<sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>31250<sp/>baud.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__uart__hal_1gga8f8c852e9d2eca9a20348c0640d7db5ea0744f8a5257e55a965f6a6583c05687f" kindref="member">NRF_UART_BAUDRATE_38400</ref><sp/><sp/><sp/>=<sp/>UART_BAUDRATE_BAUDRATE_Baud38400,<sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>38400<sp/>baud.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__uart__hal_1gga8f8c852e9d2eca9a20348c0640d7db5ea36ec1ad8b0bed3d13137b9f3d4957753" kindref="member">NRF_UART_BAUDRATE_56000</ref><sp/><sp/><sp/>=<sp/>UART_BAUDRATE_BAUDRATE_Baud56000,<sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>56000<sp/>baud.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__uart__hal_1gga8f8c852e9d2eca9a20348c0640d7db5eaf723ee66cddb66e67b7a169c7becdc77" kindref="member">NRF_UART_BAUDRATE_57600</ref><sp/><sp/><sp/>=<sp/>UART_BAUDRATE_BAUDRATE_Baud57600,<sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>57600<sp/>baud.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__uart__hal_1gga8f8c852e9d2eca9a20348c0640d7db5ea9bf0fca698611c5cb5a86aeea33ca8b2" kindref="member">NRF_UART_BAUDRATE_76800</ref><sp/><sp/><sp/>=<sp/>UART_BAUDRATE_BAUDRATE_Baud76800,<sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>76800<sp/>baud.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__uart__hal_1gga8f8c852e9d2eca9a20348c0640d7db5ea899519ef5bc33b854b4ffe9b2fd743db" kindref="member">NRF_UART_BAUDRATE_115200</ref><sp/><sp/>=<sp/>UART_BAUDRATE_BAUDRATE_Baud115200,<sp/></highlight><highlight class="comment">/**&lt;<sp/>115200<sp/>baud.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__uart__hal_1gga8f8c852e9d2eca9a20348c0640d7db5ea64f94cbf9ccb1633751df9727d2d1e09" kindref="member">NRF_UART_BAUDRATE_230400</ref><sp/><sp/>=<sp/>UART_BAUDRATE_BAUDRATE_Baud230400,<sp/></highlight><highlight class="comment">/**&lt;<sp/>230400<sp/>baud.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__uart__hal_1gga8f8c852e9d2eca9a20348c0640d7db5eaccb8e6d20d3d94158dd289be8d5892b9" kindref="member">NRF_UART_BAUDRATE_250000</ref><sp/><sp/>=<sp/>UART_BAUDRATE_BAUDRATE_Baud250000,<sp/></highlight><highlight class="comment">/**&lt;<sp/>250000<sp/>baud.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__uart__hal_1gga8f8c852e9d2eca9a20348c0640d7db5eaa5314f8c0a319b78a9c2730b70f32cbd" kindref="member">NRF_UART_BAUDRATE_460800</ref><sp/><sp/>=<sp/>UART_BAUDRATE_BAUDRATE_Baud460800,<sp/></highlight><highlight class="comment">/**&lt;<sp/>460800<sp/>baud.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__uart__hal_1gga8f8c852e9d2eca9a20348c0640d7db5eafd0a988a75e8d74588e9e65d620b0297" kindref="member">NRF_UART_BAUDRATE_921600</ref><sp/><sp/>=<sp/>UART_BAUDRATE_BAUDRATE_Baud921600,<sp/></highlight><highlight class="comment">/**&lt;<sp/>921600<sp/>baud.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__uart__hal_1gga8f8c852e9d2eca9a20348c0640d7db5eadd4bf9d81444a39933d4d9ab529bc0d1" kindref="member">NRF_UART_BAUDRATE_1000000</ref><sp/>=<sp/>UART_BAUDRATE_BAUDRATE_Baud1M,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>1000000<sp/>baud.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal">}<sp/><ref refid="group__nrf__uart__hal_1ga8f8c852e9d2eca9a20348c0640d7db5e" kindref="member">nrf_uart_baudrate_t</ref>;</highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="122"><highlight class="comment">/**<sp/>@brief<sp/>Types<sp/>of<sp/>UART<sp/>error<sp/>masks.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal">{</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__uart__hal_1gga2657a793028d3f7083ad87cc05bd9817abb3cd66d759e0db84edaef35d1d5f0fd" kindref="member">NRF_UART_ERROR_OVERRUN_MASK</ref><sp/>=<sp/>UART_ERRORSRC_OVERRUN_Msk,<sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Overrun<sp/>error.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__uart__hal_1gga2657a793028d3f7083ad87cc05bd9817ac4ca465ca398652189df240dd8c59a1b" kindref="member">NRF_UART_ERROR_PARITY_MASK</ref><sp/><sp/>=<sp/>UART_ERRORSRC_PARITY_Msk,<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Parity<sp/>error.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__uart__hal_1gga2657a793028d3f7083ad87cc05bd9817a73489365f43fa6d77431818176005335" kindref="member">NRF_UART_ERROR_FRAMING_MASK</ref><sp/>=<sp/>UART_ERRORSRC_FRAMING_Msk,<sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Framing<sp/>error.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__uart__hal_1gga2657a793028d3f7083ad87cc05bd9817a1e318d4ecd962d5b08d7a221f2d8f6de" kindref="member">NRF_UART_ERROR_BREAK_MASK</ref><sp/><sp/><sp/>=<sp/>UART_ERRORSRC_BREAK_Msk,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Break<sp/>error.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal">}<sp/><ref refid="group__nrf__uart__hal_1ga2657a793028d3f7083ad87cc05bd9817" kindref="member">nrf_uart_error_mask_t</ref>;</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="131"><highlight class="comment">/**<sp/>@brief<sp/>Types<sp/>of<sp/>UART<sp/>parity<sp/>modes.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal">{</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__uart__hal_1gga26a900177fa34963f4ac68f3896ad803a0ac8b6f846138b0b5c25f6547718ae3c" kindref="member">NRF_UART_PARITY_EXCLUDED</ref><sp/>=<sp/>UART_CONFIG_PARITY_Excluded<sp/>&lt;&lt;<sp/>UART_CONFIG_PARITY_Pos,<sp/></highlight><highlight class="comment">/**&lt;<sp/>Parity<sp/>excluded.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__uart__hal_1gga26a900177fa34963f4ac68f3896ad803ae95f6012ea9758f77526ef9ecbaaf5aa" kindref="member">NRF_UART_PARITY_INCLUDED</ref><sp/>=<sp/>UART_CONFIG_PARITY_Included<sp/>&lt;&lt;<sp/>UART_CONFIG_PARITY_Pos,<sp/></highlight><highlight class="comment">/**&lt;<sp/>Parity<sp/>included.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal">}<sp/><ref refid="group__nrf__uart__hal_1ga26a900177fa34963f4ac68f3896ad803" kindref="member">nrf_uart_parity_t</ref>;</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="138"><highlight class="comment">/**<sp/>@brief<sp/>Types<sp/>of<sp/>UART<sp/>flow<sp/>control<sp/>modes.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal">{</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__uart__hal_1gga64bc954123930f8167c2386a4dd58848ae70d354622bd8186a27d9e5f8563e8b3" kindref="member">NRF_UART_HWFC_DISABLED</ref><sp/>=<sp/>UART_CONFIG_HWFC_Disabled,<sp/></highlight><highlight class="comment">/**&lt;<sp/>Hardware<sp/>flow<sp/>control<sp/>disabled.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__uart__hal_1gga64bc954123930f8167c2386a4dd58848adcce80c5ac80b773199d39121700fc3c" kindref="member">NRF_UART_HWFC_ENABLED</ref><sp/><sp/>=<sp/>UART_CONFIG_HWFC_Enabled,<sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Hardware<sp/>flow<sp/>control<sp/>enabled.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal">}<sp/><ref refid="group__nrf__uart__hal_1ga64bc954123930f8167c2386a4dd58848" kindref="member">nrf_uart_hwfc_t</ref>;</highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_UART_HAS_STOP_BITS</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="146"><highlight class="comment">/**<sp/>@brief<sp/>Types<sp/>of<sp/>UART<sp/>stop<sp/>bit<sp/>modes.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal">{</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__uart__hal_1gga86541355ae5c6a5699495c2483a85335a12996cfbd62d3a657a95f8088155225e" kindref="member">NRF_UART_STOP_ONE</ref><sp/>=<sp/>UART_CONFIG_STOP_One<sp/>&lt;&lt;<sp/>UART_CONFIG_STOP_Pos,<sp/></highlight><highlight class="comment">///&lt;<sp/>One<sp/>stop<sp/>bit.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__uart__hal_1gga86541355ae5c6a5699495c2483a85335a1a4b5feb485b900ea35310d0dbdc93b4" kindref="member">NRF_UART_STOP_TWO</ref><sp/>=<sp/>UART_CONFIG_STOP_Two<sp/>&lt;&lt;<sp/>UART_CONFIG_STOP_Pos<sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Two<sp/>stop<sp/>bits.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal">}<sp/><ref refid="group__nrf__uart__hal_1ga86541355ae5c6a5699495c2483a85335" kindref="member">nrf_uart_stop_t</ref>;</highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_UART_HAS_PARITY_BIT</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="155"><highlight class="comment">/**<sp/>@brief<sp/>Types<sp/>of<sp/>UART<sp/>parity<sp/>types.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal">{</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__uart__hal_1ggaefcc99f71b39e6750fae1b28765fb20da49f3221f6523cf71692001b348a72f7a" kindref="member">NRF_UART_PARITYTYPE_EVEN</ref><sp/>=<sp/>UART_CONFIG_PARITYTYPE_Even<sp/>&lt;&lt;<sp/>UART_CONFIG_PARITYTYPE_Pos,<sp/></highlight><highlight class="comment">/**&lt;<sp/>Parity<sp/>even.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__uart__hal_1ggaefcc99f71b39e6750fae1b28765fb20da4a52289b6fd2e56639d2622488fd9ff4" kindref="member">NRF_UART_PARITYTYPE_ODD</ref><sp/><sp/>=<sp/>UART_CONFIG_PARITYTYPE_Odd<sp/>&lt;&lt;<sp/>UART_CONFIG_PARITYTYPE_Pos,<sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Parity<sp/>odd.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal">}<sp/><ref refid="group__nrf__uart__hal_1gaefcc99f71b39e6750fae1b28765fb20d" kindref="member">nrf_uart_paritytype_t</ref>;</highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="163"><highlight class="comment">/**<sp/>@brief<sp/>Structure<sp/>for<sp/>UART<sp/>transmission<sp/>configuration.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="164" refid="structnrf__uart__config__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal">{</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__uart__hal_1ga64bc954123930f8167c2386a4dd58848" kindref="member">nrf_uart_hwfc_t</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hwfc;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Flow<sp/>control<sp/>configuration.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__uart__hal_1ga26a900177fa34963f4ac68f3896ad803" kindref="member">nrf_uart_parity_t</ref><sp/><sp/><sp/><sp/><sp/>parity;<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Parity<sp/>configuration.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_UART_HAS_STOP_BITS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__uart__hal_1ga86541355ae5c6a5699495c2483a85335" kindref="member">nrf_uart_stop_t</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stop;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Stop<sp/>bits.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_UART_HAS_PARITY_BIT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__uart__hal_1gaefcc99f71b39e6750fae1b28765fb20d" kindref="member">nrf_uart_paritytype_t</ref><sp/>paritytype;<sp/></highlight><highlight class="comment">///&lt;<sp/>Parity<sp/>type.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal">}<sp/><ref refid="structnrf__uart__config__t" kindref="compound">nrf_uart_config_t</ref>;</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="176"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="177"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>clearing<sp/>the<sp/>specified<sp/>UART<sp/>event.</highlight></codeline>
<codeline lineno="178"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="179"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="180"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>event<sp/>Event<sp/>to<sp/>clear.</highlight></codeline>
<codeline lineno="181"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__uart__hal_1ga4ccf1a06d588351d7f8b4a768538c72f" kindref="member">nrf_uart_event_clear</ref>(NRF_UART_Type<sp/>*<sp/>p_reg,<sp/><ref refid="group__nrf__uart__hal_1gad1710c9c8832f8d4b3264cca8029b730" kindref="member">nrf_uart_event_t</ref><sp/>event);</highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="184"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="185"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>retrieving<sp/>the<sp/>state<sp/>of<sp/>the<sp/>UART<sp/>event.</highlight></codeline>
<codeline lineno="186"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="187"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="188"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>event<sp/>Event<sp/>to<sp/>be<sp/>checked.</highlight></codeline>
<codeline lineno="189"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="190"><highlight class="comment"><sp/>*<sp/>@retval<sp/>true<sp/><sp/>The<sp/>event<sp/>has<sp/>been<sp/>generated.</highlight></codeline>
<codeline lineno="191"><highlight class="comment"><sp/>*<sp/>@retval<sp/>false<sp/>The<sp/>event<sp/>has<sp/>not<sp/>been<sp/>generated.</highlight></codeline>
<codeline lineno="192"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrf__uart__hal_1ga606e9a1fa988a2f345aa0fbfe62286d0" kindref="member">nrf_uart_event_check</ref>(NRF_UART_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,<sp/><ref refid="group__nrf__uart__hal_1gad1710c9c8832f8d4b3264cca8029b730" kindref="member">nrf_uart_event_t</ref><sp/>event);</highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="195"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="196"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>returning<sp/>the<sp/>address<sp/>of<sp/>the<sp/>specified<sp/>UART<sp/>event<sp/>register.</highlight></codeline>
<codeline lineno="197"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="198"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="199"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>event<sp/>Desired<sp/>event.</highlight></codeline>
<codeline lineno="200"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="201"><highlight class="comment"><sp/>*<sp/>@return<sp/>Address<sp/>of<sp/>the<sp/>specified<sp/>event<sp/>register.</highlight></codeline>
<codeline lineno="202"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__uart__hal_1ga34b7c6fb8b390d1a89f16014745cdfc7" kindref="member">nrf_uart_event_address_get</ref>(NRF_UART_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__uart__hal_1gad1710c9c8832f8d4b3264cca8029b730" kindref="member">nrf_uart_event_t</ref><sp/><sp/><sp/><sp/><sp/><sp/>event);</highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="206"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="207"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>enabling<sp/>the<sp/>specified<sp/>interrupt.</highlight></codeline>
<codeline lineno="208"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="209"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="210"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>mask<sp/><sp/>Mask<sp/>of<sp/>interrupts<sp/>to<sp/>be<sp/>enabled.</highlight></codeline>
<codeline lineno="211"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Use<sp/>@ref<sp/>nrf_uart_int_mask_t<sp/>values<sp/>for<sp/>bit<sp/>masking.</highlight></codeline>
<codeline lineno="212"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__uart__hal_1ga1810118150a18a4a7141515ce673f5ef" kindref="member">nrf_uart_int_enable</ref>(NRF_UART_Type<sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>mask);</highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="215"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="216"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>checking<sp/>if<sp/>the<sp/>specified<sp/>interrupts<sp/>are<sp/>enabled.</highlight></codeline>
<codeline lineno="217"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="218"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="219"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>mask<sp/><sp/>Mask<sp/>of<sp/>interrupts<sp/>to<sp/>be<sp/>checked.</highlight></codeline>
<codeline lineno="220"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Use<sp/>@ref<sp/>nrf_uart_int_mask_t<sp/>values<sp/>for<sp/>bit<sp/>masking.</highlight></codeline>
<codeline lineno="221"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="222"><highlight class="comment"><sp/>*<sp/>@return<sp/>Mask<sp/>of<sp/>enabled<sp/>interrupts.</highlight></codeline>
<codeline lineno="223"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__uart__hal_1ga356b6c5f4931514e70461d4a6b9d48fb" kindref="member">nrf_uart_int_enable_check</ref>(NRF_UART_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>mask);</highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="226"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="227"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>disabling<sp/>the<sp/>specified<sp/>interrupts.</highlight></codeline>
<codeline lineno="228"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="229"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="230"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>mask<sp/><sp/>Mask<sp/>of<sp/>interrupts<sp/>to<sp/>be<sp/>disabled.</highlight></codeline>
<codeline lineno="231"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Use<sp/>@ref<sp/>nrf_uart_int_mask_t<sp/>values<sp/>for<sp/>bit<sp/>masking.</highlight></codeline>
<codeline lineno="232"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__uart__hal_1ga79f8c0342aa7df242eaf661497e1cab4" kindref="member">nrf_uart_int_disable</ref>(NRF_UART_Type<sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>mask);</highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="235"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="236"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>error<sp/>source<sp/>mask.<sp/>Function<sp/>is<sp/>clearing<sp/>error<sp/>source<sp/>flags<sp/>after<sp/>reading.</highlight></codeline>
<codeline lineno="237"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="238"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="239"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="240"><highlight class="comment"><sp/>*<sp/>@return<sp/>Mask<sp/>with<sp/>error<sp/>source<sp/>flags.</highlight></codeline>
<codeline lineno="241"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__uart__hal_1ga5b14625de90dd7efa4a676864ad7a08d" kindref="member">nrf_uart_errorsrc_get_and_clear</ref>(NRF_UART_Type<sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="244"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="245"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>enabling<sp/>UART.</highlight></codeline>
<codeline lineno="246"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="247"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="248"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__uart__hal_1ga9d0c5e3f47bcdb6aa05ce2f32b642718" kindref="member">nrf_uart_enable</ref>(NRF_UART_Type<sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="251"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="252"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>disabling<sp/>UART.</highlight></codeline>
<codeline lineno="253"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="254"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="255"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__uart__hal_1ga05a59664bec3868983c19d1d1aab6e47" kindref="member">nrf_uart_disable</ref>(NRF_UART_Type<sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="258"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="259"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>configuring<sp/>TX/RX<sp/>pins.</highlight></codeline>
<codeline lineno="260"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="261"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="262"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>pseltxd<sp/>TXD<sp/>pin<sp/>number.</highlight></codeline>
<codeline lineno="263"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>pselrxd<sp/>RXD<sp/>pin<sp/>number.</highlight></codeline>
<codeline lineno="264"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__uart__hal_1ga9a4b477deefb352c2a506beb608db367" kindref="member">nrf_uart_txrx_pins_set</ref>(NRF_UART_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pseltxd,</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pselrxd);</highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="269"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="270"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>disconnecting<sp/>TX/RX<sp/>pins.</highlight></codeline>
<codeline lineno="271"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="272"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="273"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__uart__hal_1ga916e58177ce3921e1ca25b93c7ee6feb" kindref="member">nrf_uart_txrx_pins_disconnect</ref>(NRF_UART_Type<sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="276"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="277"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>TX<sp/>pin<sp/>selection.</highlight></codeline>
<codeline lineno="278"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="279"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="280"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="281"><highlight class="comment"><sp/>*<sp/>@return<sp/>TX<sp/>pin<sp/>selection.</highlight></codeline>
<codeline lineno="282"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__uart__hal_1ga185c5d2dd6a70ce1caa02925631f0a9b" kindref="member">nrf_uart_tx_pin_get</ref>(NRF_UART_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="285"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="286"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>RX<sp/>pin<sp/>selection.</highlight></codeline>
<codeline lineno="287"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="288"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="289"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="290"><highlight class="comment"><sp/>*<sp/>@return<sp/>RX<sp/>pin<sp/>selection.</highlight></codeline>
<codeline lineno="291"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__uart__hal_1ga43e05bb6e6b697b7ce23c61cdcc5b9bc" kindref="member">nrf_uart_rx_pin_get</ref>(NRF_UART_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="294"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="295"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>RTS<sp/>pin<sp/>selection.</highlight></codeline>
<codeline lineno="296"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="297"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="298"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="299"><highlight class="comment"><sp/>*<sp/>@return<sp/>RTS<sp/>pin<sp/>selection.</highlight></codeline>
<codeline lineno="300"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__uart__hal_1gacaaef7353f53511c5253106fc70f481c" kindref="member">nrf_uart_rts_pin_get</ref>(NRF_UART_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="303"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="304"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>CTS<sp/>pin<sp/>selection.</highlight></codeline>
<codeline lineno="305"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="306"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="307"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="308"><highlight class="comment"><sp/>*<sp/>@return<sp/>CTS<sp/>pin<sp/>selection.</highlight></codeline>
<codeline lineno="309"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__uart__hal_1gab5e10a9d04873dcfb6d2ffe9bf9fb970" kindref="member">nrf_uart_cts_pin_get</ref>(NRF_UART_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="311"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="312"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="313"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>configuring<sp/>flow<sp/>control<sp/>pins.</highlight></codeline>
<codeline lineno="314"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="315"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="316"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>pselrts<sp/>RTS<sp/>pin<sp/>number.</highlight></codeline>
<codeline lineno="317"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>pselcts<sp/>CTS<sp/>pin<sp/>number.</highlight></codeline>
<codeline lineno="318"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__uart__hal_1ga233ad2e767cda140392f71b783856f25" kindref="member">nrf_uart_hwfc_pins_set</ref>(NRF_UART_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pselrts,</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pselcts);</highlight></codeline>
<codeline lineno="322"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="323"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="324"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>disconnecting<sp/>flow<sp/>control<sp/>pins.</highlight></codeline>
<codeline lineno="325"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="326"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="327"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__uart__hal_1ga58d5bf6d518022f9a70db58e46e9d71b" kindref="member">nrf_uart_hwfc_pins_disconnect</ref>(NRF_UART_Type<sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="330"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="331"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>reading<sp/>RX<sp/>data.</highlight></codeline>
<codeline lineno="332"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="333"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="334"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="335"><highlight class="comment"><sp/>*<sp/>@return<sp/>Received<sp/>byte.</highlight></codeline>
<codeline lineno="336"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint8_t<sp/><ref refid="group__nrf__uart__hal_1ga0f9599db902d7d5687e41960861c052f" kindref="member">nrf_uart_rxd_get</ref>(NRF_UART_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="339"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="340"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>Tx<sp/>data.</highlight></codeline>
<codeline lineno="341"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="342"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="343"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>txd<sp/><sp/><sp/>Byte.</highlight></codeline>
<codeline lineno="344"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__uart__hal_1gafcbe59c42409c30ae67c5ce356e81bc9" kindref="member">nrf_uart_txd_set</ref>(NRF_UART_Type<sp/>*<sp/>p_reg,<sp/>uint8_t<sp/>txd);</highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="347"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="348"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>starting<sp/>an<sp/>UART<sp/>task.</highlight></codeline>
<codeline lineno="349"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="350"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="351"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>task<sp/><sp/>Task.</highlight></codeline>
<codeline lineno="352"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__uart__hal_1gabfb2d0dcd715241ffd35366a89a5f0e4" kindref="member">nrf_uart_task_trigger</ref>(NRF_UART_Type<sp/>*<sp/>p_reg,<sp/><ref refid="group__nrf__uart__hal_1ga61ed3c0eb7723a0dfda76d7d5025e5a8" kindref="member">nrf_uart_task_t</ref><sp/>task);</highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="355"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="356"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>returning<sp/>the<sp/>address<sp/>of<sp/>the<sp/>specified<sp/>task<sp/>register.</highlight></codeline>
<codeline lineno="357"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="358"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="359"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>task<sp/><sp/>Task.</highlight></codeline>
<codeline lineno="360"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="361"><highlight class="comment"><sp/>*<sp/>@return<sp/>Task<sp/>address.</highlight></codeline>
<codeline lineno="362"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__uart__hal_1ga4ed8898231ccdf2ebc2510b56fbeac00" kindref="member">nrf_uart_task_address_get</ref>(NRF_UART_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__uart__hal_1ga61ed3c0eb7723a0dfda76d7d5025e5a8" kindref="member">nrf_uart_task_t</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>task);</highlight></codeline>
<codeline lineno="365"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="366"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="367"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>configuring<sp/>UART.</highlight></codeline>
<codeline lineno="368"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="369"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="370"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_cfg<sp/>Pointer<sp/>to<sp/>UART<sp/>settings<sp/>structure.</highlight></codeline>
<codeline lineno="371"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__uart__hal_1gae958cb0991b05c497c7d996bc99e6c5d" kindref="member">nrf_uart_configure</ref>(NRF_UART_Type<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structnrf__uart__config__t" kindref="compound">nrf_uart_config_t</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_cfg);</highlight></codeline>
<codeline lineno="374"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="375"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="376"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>UART<sp/>baud<sp/>rate.</highlight></codeline>
<codeline lineno="377"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="378"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="379"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>baudrate<sp/>Baud<sp/>rate.</highlight></codeline>
<codeline lineno="380"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__uart__hal_1gafa5abc297e9adb026f8e15af80b2b30f" kindref="member">nrf_uart_baudrate_set</ref>(NRF_UART_Type<sp/>*<sp/>p_reg,<sp/><ref refid="group__nrf__uart__hal_1ga8f8c852e9d2eca9a20348c0640d7db5e" kindref="member">nrf_uart_baudrate_t</ref><sp/>baudrate);</highlight></codeline>
<codeline lineno="382"><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>NRF_DECLARE_ONLY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="385"><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__uart__hal_1ga4ccf1a06d588351d7f8b4a768538c72f" kindref="member">nrf_uart_event_clear</ref>(NRF_UART_Type<sp/>*<sp/>p_reg,<sp/><ref refid="group__nrf__uart__hal_1gad1710c9c8832f8d4b3264cca8029b730" kindref="member">nrf_uart_event_t</ref><sp/>event)</highlight></codeline>
<codeline lineno="387"><highlight class="normal">{</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/>*((</highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint32_t<sp/>*)((uint8_t<sp/>*)p_reg<sp/>+<sp/>(uint32_t)event))<sp/>=<sp/>0x0UL;</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/>nrf_event_readback((uint8_t<sp/>*)p_reg<sp/>+<sp/>(uint32_t)event);</highlight></codeline>
<codeline lineno="390"><highlight class="normal">}</highlight></codeline>
<codeline lineno="391"><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrf__uart__hal_1ga606e9a1fa988a2f345aa0fbfe62286d0" kindref="member">nrf_uart_event_check</ref>(NRF_UART_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,<sp/><ref refid="group__nrf__uart__hal_1gad1710c9c8832f8d4b3264cca8029b730" kindref="member">nrf_uart_event_t</ref><sp/>event)</highlight></codeline>
<codeline lineno="393"><highlight class="normal">{</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>nrf_event_check(p_reg,<sp/>event);</highlight></codeline>
<codeline lineno="395"><highlight class="normal">}</highlight></codeline>
<codeline lineno="396"><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__uart__hal_1ga34b7c6fb8b390d1a89f16014745cdfc7" kindref="member">nrf_uart_event_address_get</ref>(NRF_UART_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__uart__hal_1gad1710c9c8832f8d4b3264cca8029b730" kindref="member">nrf_uart_event_t</ref><sp/><sp/><sp/><sp/><sp/><sp/>event)</highlight></codeline>
<codeline lineno="399"><highlight class="normal">{</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>nrf_task_event_address_get(p_reg,<sp/>event);</highlight></codeline>
<codeline lineno="401"><highlight class="normal">}</highlight></codeline>
<codeline lineno="402"><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__uart__hal_1ga1810118150a18a4a7141515ce673f5ef" kindref="member">nrf_uart_int_enable</ref>(NRF_UART_Type<sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>mask)</highlight></codeline>
<codeline lineno="404"><highlight class="normal">{</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;INTENSET<sp/>=<sp/>mask;</highlight></codeline>
<codeline lineno="406"><highlight class="normal">}</highlight></codeline>
<codeline lineno="407"><highlight class="normal"></highlight></codeline>
<codeline lineno="408"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__uart__hal_1ga356b6c5f4931514e70461d4a6b9d48fb" kindref="member">nrf_uart_int_enable_check</ref>(NRF_UART_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>mask)</highlight></codeline>
<codeline lineno="409"><highlight class="normal">{</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p_reg-&gt;INTENSET<sp/>&amp;<sp/>mask;</highlight></codeline>
<codeline lineno="411"><highlight class="normal">}</highlight></codeline>
<codeline lineno="412"><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__uart__hal_1ga79f8c0342aa7df242eaf661497e1cab4" kindref="member">nrf_uart_int_disable</ref>(NRF_UART_Type<sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>mask)</highlight></codeline>
<codeline lineno="414"><highlight class="normal">{</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;INTENCLR<sp/>=<sp/>mask;</highlight></codeline>
<codeline lineno="416"><highlight class="normal">}</highlight></codeline>
<codeline lineno="417"><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__uart__hal_1ga5b14625de90dd7efa4a676864ad7a08d" kindref="member">nrf_uart_errorsrc_get_and_clear</ref>(NRF_UART_Type<sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="419"><highlight class="normal">{</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>errsrc_mask<sp/>=<sp/>p_reg-&gt;ERRORSRC;</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;ERRORSRC<sp/>=<sp/>errsrc_mask;</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>errsrc_mask;</highlight></codeline>
<codeline lineno="423"><highlight class="normal">}</highlight></codeline>
<codeline lineno="424"><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__uart__hal_1ga9d0c5e3f47bcdb6aa05ce2f32b642718" kindref="member">nrf_uart_enable</ref>(NRF_UART_Type<sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="426"><highlight class="normal">{</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;ENABLE<sp/>=<sp/>UART_ENABLE_ENABLE_Enabled;</highlight></codeline>
<codeline lineno="428"><highlight class="normal">}</highlight></codeline>
<codeline lineno="429"><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__uart__hal_1ga05a59664bec3868983c19d1d1aab6e47" kindref="member">nrf_uart_disable</ref>(NRF_UART_Type<sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="431"><highlight class="normal">{</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;ENABLE<sp/>=<sp/>UART_ENABLE_ENABLE_Disabled;</highlight></codeline>
<codeline lineno="433"><highlight class="normal">}</highlight></codeline>
<codeline lineno="434"><highlight class="normal"></highlight></codeline>
<codeline lineno="435"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__uart__hal_1ga9a4b477deefb352c2a506beb608db367" kindref="member">nrf_uart_txrx_pins_set</ref>(NRF_UART_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pseltxd,</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pselrxd)</highlight></codeline>
<codeline lineno="438"><highlight class="normal">{</highlight></codeline>
<codeline lineno="439"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(UART_PSEL_RXD_CONNECT_Pos)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;PSEL.RXD<sp/>=<sp/>pselrxd;</highlight></codeline>
<codeline lineno="441"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;PSELRXD<sp/>=<sp/>pselrxd;</highlight></codeline>
<codeline lineno="443"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="444"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(UART_PSEL_TXD_CONNECT_Pos)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;PSEL.TXD<sp/>=<sp/>pseltxd;</highlight></codeline>
<codeline lineno="446"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;PSELTXD<sp/>=<sp/>pseltxd;</highlight></codeline>
<codeline lineno="448"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="449"><highlight class="normal">}</highlight></codeline>
<codeline lineno="450"><highlight class="normal"></highlight></codeline>
<codeline lineno="451"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__uart__hal_1ga916e58177ce3921e1ca25b93c7ee6feb" kindref="member">nrf_uart_txrx_pins_disconnect</ref>(NRF_UART_Type<sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="452"><highlight class="normal">{</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__uart__hal_1ga9a4b477deefb352c2a506beb608db367" kindref="member">nrf_uart_txrx_pins_set</ref>(p_reg,<sp/><ref refid="group__nrf__uart__hal_1ga505f00f51ff5b93317032f1e3b5ba1a6" kindref="member">NRF_UART_PSEL_DISCONNECTED</ref>,<sp/><ref refid="group__nrf__uart__hal_1ga505f00f51ff5b93317032f1e3b5ba1a6" kindref="member">NRF_UART_PSEL_DISCONNECTED</ref>);</highlight></codeline>
<codeline lineno="454"><highlight class="normal">}</highlight></codeline>
<codeline lineno="455"><highlight class="normal"></highlight></codeline>
<codeline lineno="456"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__uart__hal_1ga185c5d2dd6a70ce1caa02925631f0a9b" kindref="member">nrf_uart_tx_pin_get</ref>(NRF_UART_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="457"><highlight class="normal">{</highlight></codeline>
<codeline lineno="458"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(UART_PSEL_TXD_CONNECT_Pos)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p_reg-&gt;PSEL.TXD;</highlight></codeline>
<codeline lineno="460"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p_reg-&gt;PSELTXD;</highlight></codeline>
<codeline lineno="462"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="463"><highlight class="normal">}</highlight></codeline>
<codeline lineno="464"><highlight class="normal"></highlight></codeline>
<codeline lineno="465"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__uart__hal_1ga43e05bb6e6b697b7ce23c61cdcc5b9bc" kindref="member">nrf_uart_rx_pin_get</ref>(NRF_UART_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="466"><highlight class="normal">{</highlight></codeline>
<codeline lineno="467"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(UART_PSEL_RXD_CONNECT_Pos)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p_reg-&gt;PSEL.RXD;</highlight></codeline>
<codeline lineno="469"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p_reg-&gt;PSELRXD;</highlight></codeline>
<codeline lineno="471"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="472"><highlight class="normal">}</highlight></codeline>
<codeline lineno="473"><highlight class="normal"></highlight></codeline>
<codeline lineno="474"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__uart__hal_1gacaaef7353f53511c5253106fc70f481c" kindref="member">nrf_uart_rts_pin_get</ref>(NRF_UART_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="475"><highlight class="normal">{</highlight></codeline>
<codeline lineno="476"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(UART_PSEL_RTS_CONNECT_Pos)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p_reg-&gt;PSEL.RTS;</highlight></codeline>
<codeline lineno="478"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p_reg-&gt;PSELRTS;</highlight></codeline>
<codeline lineno="480"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="481"><highlight class="normal">}</highlight></codeline>
<codeline lineno="482"><highlight class="normal"></highlight></codeline>
<codeline lineno="483"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__uart__hal_1gab5e10a9d04873dcfb6d2ffe9bf9fb970" kindref="member">nrf_uart_cts_pin_get</ref>(NRF_UART_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="484"><highlight class="normal">{</highlight></codeline>
<codeline lineno="485"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(UART_PSEL_RTS_CONNECT_Pos)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p_reg-&gt;PSEL.CTS;</highlight></codeline>
<codeline lineno="487"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p_reg-&gt;PSELCTS;</highlight></codeline>
<codeline lineno="489"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="490"><highlight class="normal">}</highlight></codeline>
<codeline lineno="491"><highlight class="normal"></highlight></codeline>
<codeline lineno="492"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__uart__hal_1ga233ad2e767cda140392f71b783856f25" kindref="member">nrf_uart_hwfc_pins_set</ref>(NRF_UART_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pselrts,</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pselcts)</highlight></codeline>
<codeline lineno="495"><highlight class="normal">{</highlight></codeline>
<codeline lineno="496"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(UART_PSEL_RTS_CONNECT_Pos)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;PSEL.RTS<sp/>=<sp/>pselrts;</highlight></codeline>
<codeline lineno="498"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;PSELRTS<sp/>=<sp/>pselrts;</highlight></codeline>
<codeline lineno="500"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="501"><highlight class="normal"></highlight></codeline>
<codeline lineno="502"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(UART_PSEL_RTS_CONNECT_Pos)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;PSEL.CTS<sp/>=<sp/>pselcts;</highlight></codeline>
<codeline lineno="504"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;PSELCTS<sp/>=<sp/>pselcts;</highlight></codeline>
<codeline lineno="506"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="507"><highlight class="normal">}</highlight></codeline>
<codeline lineno="508"><highlight class="normal"></highlight></codeline>
<codeline lineno="509"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__uart__hal_1ga58d5bf6d518022f9a70db58e46e9d71b" kindref="member">nrf_uart_hwfc_pins_disconnect</ref>(NRF_UART_Type<sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="510"><highlight class="normal">{</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__uart__hal_1ga233ad2e767cda140392f71b783856f25" kindref="member">nrf_uart_hwfc_pins_set</ref>(p_reg,<sp/><ref refid="group__nrf__uart__hal_1ga505f00f51ff5b93317032f1e3b5ba1a6" kindref="member">NRF_UART_PSEL_DISCONNECTED</ref>,<sp/><ref refid="group__nrf__uart__hal_1ga505f00f51ff5b93317032f1e3b5ba1a6" kindref="member">NRF_UART_PSEL_DISCONNECTED</ref>);</highlight></codeline>
<codeline lineno="512"><highlight class="normal">}</highlight></codeline>
<codeline lineno="513"><highlight class="normal"></highlight></codeline>
<codeline lineno="514"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint8_t<sp/><ref refid="group__nrf__uart__hal_1ga0f9599db902d7d5687e41960861c052f" kindref="member">nrf_uart_rxd_get</ref>(NRF_UART_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="515"><highlight class="normal">{</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(uint8_t)p_reg-&gt;RXD;</highlight></codeline>
<codeline lineno="517"><highlight class="normal">}</highlight></codeline>
<codeline lineno="518"><highlight class="normal"></highlight></codeline>
<codeline lineno="519"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__uart__hal_1gafcbe59c42409c30ae67c5ce356e81bc9" kindref="member">nrf_uart_txd_set</ref>(NRF_UART_Type<sp/>*<sp/>p_reg,<sp/>uint8_t<sp/>txd)</highlight></codeline>
<codeline lineno="520"><highlight class="normal">{</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;TXD<sp/>=<sp/>txd;</highlight></codeline>
<codeline lineno="522"><highlight class="normal">}</highlight></codeline>
<codeline lineno="523"><highlight class="normal"></highlight></codeline>
<codeline lineno="524"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__uart__hal_1gabfb2d0dcd715241ffd35366a89a5f0e4" kindref="member">nrf_uart_task_trigger</ref>(NRF_UART_Type<sp/>*<sp/>p_reg,<sp/><ref refid="group__nrf__uart__hal_1ga61ed3c0eb7723a0dfda76d7d5025e5a8" kindref="member">nrf_uart_task_t</ref><sp/>task)</highlight></codeline>
<codeline lineno="525"><highlight class="normal">{</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/>*((</highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint32_t<sp/>*)((uint8_t<sp/>*)p_reg<sp/>+<sp/>(uint32_t)task))<sp/>=<sp/>0x1UL;</highlight></codeline>
<codeline lineno="527"><highlight class="normal">}</highlight></codeline>
<codeline lineno="528"><highlight class="normal"></highlight></codeline>
<codeline lineno="529"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__uart__hal_1ga4ed8898231ccdf2ebc2510b56fbeac00" kindref="member">nrf_uart_task_address_get</ref>(NRF_UART_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__uart__hal_1ga61ed3c0eb7723a0dfda76d7d5025e5a8" kindref="member">nrf_uart_task_t</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>task)</highlight></codeline>
<codeline lineno="531"><highlight class="normal">{</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(uint32_t)p_reg<sp/>+<sp/>(uint32_t)task;</highlight></codeline>
<codeline lineno="533"><highlight class="normal">}</highlight></codeline>
<codeline lineno="534"><highlight class="normal"></highlight></codeline>
<codeline lineno="535"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__uart__hal_1gae958cb0991b05c497c7d996bc99e6c5d" kindref="member">nrf_uart_configure</ref>(NRF_UART_Type<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structnrf__uart__config__t" kindref="compound">nrf_uart_config_t</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_cfg)</highlight></codeline>
<codeline lineno="537"><highlight class="normal">{</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;CONFIG<sp/>=<sp/>(uint32_t)p_cfg-&gt;<ref refid="structnrf__uart__config__t_1a798eba391e38e5ebf515601b78faa2ad" kindref="member">parity</ref></highlight></codeline>
<codeline lineno="539"><highlight class="normal">#</highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/><ref refid="group__nrf__uart__hal_1gab38e708a2cf27ff754d4bc2a6e57f35f" kindref="member">NRF_UART_HAS_STOP_BITS</ref></highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>(uint32_t)p_cfg-&gt;<ref refid="structnrf__uart__config__t_1a81d741a4807299d61b4b2c5c6bb4b7b7" kindref="member">stop</ref></highlight></codeline>
<codeline lineno="541"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="542"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_UART_HAS_PARITY_BIT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>(uint32_t)p_cfg-&gt;<ref refid="structnrf__uart__config__t_1aeb134fa77e3d0372b61579bb581cfb01" kindref="member">paritytype</ref></highlight></codeline>
<codeline lineno="544"><highlight class="normal">#endif</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>(uint32_t)p_cfg-&gt;<ref refid="structnrf__uart__config__t_1a5616b9f78a857737726c4db34aac82a1" kindref="member">hwfc</ref>;</highlight></codeline>
<codeline lineno="546"><highlight class="normal">}</highlight></codeline>
<codeline lineno="547"><highlight class="normal"></highlight></codeline>
<codeline lineno="548"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__uart__hal_1gafa5abc297e9adb026f8e15af80b2b30f" kindref="member">nrf_uart_baudrate_set</ref>(NRF_UART_Type<sp/>*<sp/>p_reg,<sp/><ref refid="group__nrf__uart__hal_1ga8f8c852e9d2eca9a20348c0640d7db5e" kindref="member">nrf_uart_baudrate_t</ref><sp/>baudrate)</highlight></codeline>
<codeline lineno="549"><highlight class="normal">{</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;BAUDRATE<sp/>=<sp/>baudrate;</highlight></codeline>
<codeline lineno="551"><highlight class="normal">}</highlight></codeline>
<codeline lineno="552"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRF_DECLARE_ONLY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="553"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="554"><highlight class="comment">/**<sp/>@}<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="555"><highlight class="normal"></highlight></codeline>
<codeline lineno="556"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="557"><highlight class="normal">}</highlight></codeline>
<codeline lineno="558"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="559"><highlight class="normal"></highlight></codeline>
<codeline lineno="560"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRF_UART_H__</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="hal/nrf_uart.h"/>
  </compounddef>
</doxygen>
