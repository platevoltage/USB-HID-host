<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="nrf__ccm_8h" kind="file" language="C++">
    <compoundname>nrf_ccm.h</compoundname>
    <includes local="no">nrfx.h</includes>
    <incdepgraph>
      <node id="1">
        <label>hal/nrf_ccm.h</label>
        <link refid="nrf__ccm_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>nrfx.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="structnrf__ccm__cnf__t" prot="public">nrf_ccm_cnf_t</innerclass>
    <innerclass refid="structnrf__ccm__config__t" prot="public">nrf_ccm_config_t</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__nrf__ccm__hal_1ga609733f6d824f93172e4e4aa8284f9c2" prot="public" static="no">
        <name>NRF_CCM_HAS_TASK_KSGEN</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Presence of the KSGEN task. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ccm.h" line="55" column="9" bodyfile="hal/nrf_ccm.h" bodystart="55" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__ccm__hal_1ga832902475013f7f50f6ff134bd43b6a9" prot="public" static="no">
        <name>NRF_CCM_HAS_TASK_CRYPT</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Presence of the CRYPT task. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ccm.h" line="62" column="9" bodyfile="hal/nrf_ccm.h" bodystart="62" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__ccm__hal_1ga1c1ed99c739443524fdcf7310f1fd1cf" prot="public" static="no">
        <name>NRF_CCM_HAS_TASK_START</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Presence of the START task. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ccm.h" line="69" column="9" bodyfile="hal/nrf_ccm.h" bodystart="69" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__ccm__hal_1ga687430fd768454cf28df1e59b664ccab" prot="public" static="no">
        <name>NRF_CCM_HAS_TASK_RATEOVERRIDE</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Presence of the RATEOVERRIDE task. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ccm.h" line="76" column="9" bodyfile="hal/nrf_ccm.h" bodystart="76" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__ccm__hal_1ga5ba0db214679f8ac4627d0751103872a" prot="public" static="no">
        <name>NRF_CCM_HAS_EVENT_ENDKSGEN</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Presence of the ENDKSGEN event. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ccm.h" line="84" column="9" bodyfile="hal/nrf_ccm.h" bodystart="84" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__ccm__hal_1gaba460a30c7e8bb9fff8e92d0876ac35d" prot="public" static="no">
        <name>NRF_CCM_HAS_EVENT_ENDCRYPT</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Presence of the ENDCRYPT event. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ccm.h" line="92" column="9" bodyfile="hal/nrf_ccm.h" bodystart="92" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__ccm__hal_1ga4a4d2625aa8185fd8462c8918dc9872e" prot="public" static="no">
        <name>NRF_CCM_HAS_EVENT_END</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Presence of the END event. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ccm.h" line="99" column="9" bodyfile="hal/nrf_ccm.h" bodystart="99" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__ccm__hal_1gaf8211d899cb718e4614f5b355812938b" prot="public" static="no">
        <name>NRF_CCM_HAS_ADATAMASK</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Presence of the ADATAMASK register. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ccm.h" line="106" column="9" bodyfile="hal/nrf_ccm.h" bodystart="106" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__ccm__hal_1ga3a5daf48654668fd5e4e0648371ea849" prot="public" static="no">
        <name>NRF_CCM_HAS_CNFPTR</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Presence of the CNFPTR register. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ccm.h" line="113" column="9" bodyfile="hal/nrf_ccm.h" bodystart="113" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__ccm__hal_1gaf0b7f91b5af65bc32b53aacfefee71c7" prot="public" static="no">
        <name>NRF_CCM_HAS_IN_AMOUNT</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Presence of the IN.AMOUNT register. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ccm.h" line="120" column="9" bodyfile="hal/nrf_ccm.h" bodystart="120" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__ccm__hal_1ga8b44dd26eab54617025844e7869c4070" prot="public" static="no">
        <name>NRF_CCM_HAS_OUT_AMOUNT</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Presence of the OUT.AMOUNT register. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ccm.h" line="127" column="9" bodyfile="hal/nrf_ccm.h" bodystart="127" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__ccm__hal_1gaf410004fe0b1d4fc80c04522b46d8c87" prot="public" static="no">
        <name>NRF_CCM_HAS_RATEOVERRIDE</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Presence of the RATEOVERRIDE register. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ccm.h" line="134" column="9" bodyfile="hal/nrf_ccm.h" bodystart="134" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__ccm__hal_1gaa65153a8730344bc9d5f50192575c638" prot="public" static="no">
        <name>NRF_CCM_HAS_ERRORSTATUS</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Presence of the ERRORSTATUS register. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ccm.h" line="141" column="9" bodyfile="hal/nrf_ccm.h" bodystart="141" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__ccm__hal_1ga26504cc33553daf987ae5d0617571435" prot="public" static="no">
        <name>NRF_CCM_HAS_MICSTATUS</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Presence of the MICSTATUS register. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ccm.h" line="148" column="9" bodyfile="hal/nrf_ccm.h" bodystart="148" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__ccm__hal_1ga9a62dcafec5c5029f95f36d3ac04f264" prot="public" static="no">
        <name>NRF_CCM_HAS_MACSTATUS</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Presence of the MACSTATUS register. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ccm.h" line="155" column="9" bodyfile="hal/nrf_ccm.h" bodystart="155" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__ccm__hal_1gac15b21fc17e6fa1405c04029339ad4fc" prot="public" static="no">
        <name>NRF_CCM_HAS_KEY</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Presence of the KEY register. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ccm.h" line="162" column="9" bodyfile="hal/nrf_ccm.h" bodystart="162" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__ccm__hal_1gada64a8edc1a7a04118c5dcd28f423f66" prot="public" static="no">
        <name>NRF_CCM_HAS_NONCE</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Presence of the NONCE register. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ccm.h" line="169" column="9" bodyfile="hal/nrf_ccm.h" bodystart="169" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__ccm__hal_1ga6f62000aa7bb0a9ba4003c34c2471b04" prot="public" static="no">
        <name>NRF_CCM_HAS_INPTR</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Presence of the INPTR register. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ccm.h" line="176" column="9" bodyfile="hal/nrf_ccm.h" bodystart="176" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__ccm__hal_1ga9e8ab57b4a56b1d5d058dbf32d4a917f" prot="public" static="no">
        <name>NRF_CCM_HAS_OUTPTR</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Presence of the OUTPTR register. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ccm.h" line="183" column="9" bodyfile="hal/nrf_ccm.h" bodystart="183" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__ccm__hal_1ga798734a01e20089563d255a66475a5d3" prot="public" static="no">
        <name>NRF_CCM_HAS_IN_PTR</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Presence of the IN.PTR register. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ccm.h" line="190" column="9" bodyfile="hal/nrf_ccm.h" bodystart="190" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__ccm__hal_1gacaab1a0bf0755c609bad39b5cd9e853e" prot="public" static="no">
        <name>NRF_CCM_HAS_OUT_PTR</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Presence of the OUT.PTR register. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ccm.h" line="197" column="9" bodyfile="hal/nrf_ccm.h" bodystart="197" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__ccm__hal_1ga116349ce788f42cec6edcc5b16d9715d" prot="public" static="no">
        <name>NRF_CCM_HAS_SCRATCHPTR</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Presence of the SCRATCHPTR register. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ccm.h" line="204" column="9" bodyfile="hal/nrf_ccm.h" bodystart="204" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__ccm__hal_1ga75b803297a95a4d3eed0c3c05bf357fd" prot="public" static="no">
        <name>NRF_CCM_HAS_MAXPACKETSIZE</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Presence of the MAXPACKETSIZE. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ccm.h" line="211" column="9" bodyfile="hal/nrf_ccm.h" bodystart="211" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__ccm__hal_1ga2b909d062cb21c477c0fb05567658827" prot="public" static="no">
        <name>NRF_CCM_HAS_MODE_FAST_DECRYPTION</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Presence of AES fast decrypt mode. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ccm.h" line="218" column="9" bodyfile="hal/nrf_ccm.h" bodystart="218" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__ccm__hal_1ga6dc9278dc2ffea7f9100b0e62948876f" prot="public" static="no">
        <name>NRF_CCM_HAS_MODE_PROTOCOL</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Presence of protocol and packet format selection. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ccm.h" line="225" column="9" bodyfile="hal/nrf_ccm.h" bodystart="225" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__ccm__hal_1ga0e88dd4a959b50718d76c20ff94a5d3d" prot="public" static="no">
        <name>NRF_CCM_HAS_MODE_PROTOCOL_BLE</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Presence of the BLE packet format. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ccm.h" line="232" column="9" bodyfile="hal/nrf_ccm.h" bodystart="232" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__ccm__hal_1ga9c572a2bde3c75f56b04c203a1ba1665" prot="public" static="no">
        <name>NRF_CCM_HAS_MODE_PROTOCOL_IEEE802154</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Presence of the 802.15.4 packet format. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ccm.h" line="239" column="9" bodyfile="hal/nrf_ccm.h" bodystart="239" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__ccm__hal_1gab3dcc6a9ee5e75d26bcb661de71748fb" prot="public" static="no">
        <name>NRF_CCM_HAS_MODE_LENGTH</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Presence of the packet lengh configuration. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ccm.h" line="246" column="9" bodyfile="hal/nrf_ccm.h" bodystart="246" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__ccm__hal_1ga621306a31e0d998a6046fa71dcfa6167" prot="public" static="no">
        <name>NRF_CCM_HAS_MODE_DATARATE_125KBPS</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Support for 125 Kbps radio data rate. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ccm.h" line="253" column="9" bodyfile="hal/nrf_ccm.h" bodystart="253" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__ccm__hal_1ga042917a461ddc0d84ba72d34a0c1975f" prot="public" static="no">
        <name>NRF_CCM_HAS_MODE_DATARATE_125KBIT</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Support for 125 Kbit radio data rate. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ccm.h" line="261" column="9" bodyfile="hal/nrf_ccm.h" bodystart="261" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__ccm__hal_1gaad352b0b702641242786f5e819405a16" prot="public" static="no">
        <name>NRF_CCM_HAS_MODE_DATARATE_250KBIT</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Support for 250 Kbit radio data rate. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ccm.h" line="268" column="9" bodyfile="hal/nrf_ccm.h" bodystart="268" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__ccm__hal_1gad96841e8cd82458b8b30406a1d447078" prot="public" static="no">
        <name>NRF_CCM_HAS_MODE_DATARATE_500KBPS</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Support for 500 Kbps radio data rate. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ccm.h" line="275" column="9" bodyfile="hal/nrf_ccm.h" bodystart="275" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__ccm__hal_1gaede81255639f85fa60209e5604a1b5f6" prot="public" static="no">
        <name>NRF_CCM_HAS_MODE_DATARATE_500KBIT</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Support for 500 Kbit radio data rate. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ccm.h" line="283" column="9" bodyfile="hal/nrf_ccm.h" bodystart="283" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__ccm__hal_1gaf82abb07760d753423a125a42fc86a01" prot="public" static="no">
        <name>NRF_CCM_HAS_MODE_DATARATE_4MBIT</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Support for 4 Mbit radio data rate. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ccm.h" line="290" column="9" bodyfile="hal/nrf_ccm.h" bodystart="290" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__ccm__hal_1ga49f53c52fad99350404166b8329f288a" prot="public" static="no">
        <name>NRF_CCM_HAS_MODE_MACLEN</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Presence of the CCM MAC length. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ccm.h" line="297" column="9" bodyfile="hal/nrf_ccm.h" bodystart="297" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__ccm__hal_1ga937f287058080a9f790f96edf531e888" prot="public" static="no">
        <name>NRF_CCM_HAS_DATARATE</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Presence of the radio data rate that the CCM shall run synchronous with. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ccm.h" line="304" column="9" bodyfile="hal/nrf_ccm.h" bodystart="304" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__ccm__hal_1gaa140b4d2036f17d6dd64167405e87ee1" prot="public" static="no">
        <name>NRF_CCM_HAS_HEADERMASK</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Presence of the HEADERMASK register. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ccm.h" line="311" column="9" bodyfile="hal/nrf_ccm.h" bodystart="311" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__ccm__hal_1gaa65eac493abe2950bf0aaab31ed6d814" prot="public" static="no">
        <name>NRF_CCM_KEY_SIZE</name>
        <initializer>16</initializer>
        <briefdescription>
<para>AES key size. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ccm.h" line="318" column="9" bodyfile="hal/nrf_ccm.h" bodystart="318" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__ccm__hal_1ga74a79145f01afeba8726359dbf571ebf" prot="public" static="no">
        <name>NRF_CCM_IV_SIZE</name>
        <initializer>8</initializer>
        <briefdescription>
<para>Initialization vector size. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ccm.h" line="320" column="9" bodyfile="hal/nrf_ccm.h" bodystart="320" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__ccm__hal_1ga17df5080e63b2276a9f2644e95470286" prot="public" static="no">
        <name>NRF_CCM_PKTCTR_SIZE</name>
        <initializer>9</initializer>
        <briefdescription>
<para>Packet counter configuration size. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ccm.h" line="322" column="9" bodyfile="hal/nrf_ccm.h" bodystart="322" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="group__nrf__ccm__hal_1ga2dede4b5a487f5846c0c27a00ecff430" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_ccm_task_t</name>
        <enumvalue id="group__nrf__ccm__hal_1gga2dede4b5a487f5846c0c27a00ecff430a963632466dea23d52ddce71010af0971" prot="public">
          <name>NRF_CCM_TASK_KSGEN</name>
          <initializer>= offsetof(NRF_CCM_Type, TASKS_KSGEN)</initializer>
          <briefdescription>
<para>Start generation of key-stream. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__ccm__hal_1gga2dede4b5a487f5846c0c27a00ecff430ae971250da7a59c65a7f6408731bc364b" prot="public">
          <name>NRF_CCM_TASK_CRYPT</name>
          <initializer>= offsetof(NRF_CCM_Type, TASKS_CRYPT)</initializer>
          <briefdescription>
<para>Start encryption/decryption. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__ccm__hal_1gga2dede4b5a487f5846c0c27a00ecff430a9196c27a96d98e13ff3858a4e90bcb4c" prot="public">
          <name>NRF_CCM_TASK_STOP</name>
          <initializer>= offsetof(NRF_CCM_Type, TASKS_STOP)</initializer>
          <briefdescription>
<para>Stop encryption/decryption. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__ccm__hal_1gga2dede4b5a487f5846c0c27a00ecff430aadf9154d76e74b0e08d25d35d984ebb7" prot="public">
          <name>NRF_CCM_TASK_START</name>
          <initializer>= offsetof(NRF_CCM_Type, TASKS_START)</initializer>
          <briefdescription>
<para>Start encryption/decryption. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__ccm__hal_1gga2dede4b5a487f5846c0c27a00ecff430a9d47835d2ceee3e4450493ef71fed59d" prot="public">
          <name>NRF_CCM_TASK_RATEOVERRIDE</name>
          <initializer>= offsetof(NRF_CCM_Type, TASKS_RATEOVERRIDE)</initializer>
          <briefdescription>
<para>Override DATARATE setting in MODE register. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>CCM tasks. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ccm.h" line="334" column="1" bodyfile="hal/nrf_ccm.h" bodystart="335" bodyend="349"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__ccm__hal_1ga9de429cccef1f7a1e1dc63fe5563aa77" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_ccm_event_t</name>
        <enumvalue id="group__nrf__ccm__hal_1gga9de429cccef1f7a1e1dc63fe5563aa77ad6a75d343d39205ce1732d4a0e678e13" prot="public">
          <name>NRF_CCM_EVENT_ENDKSGEN</name>
          <initializer>= offsetof(NRF_CCM_Type, EVENTS_ENDKSGEN)</initializer>
          <briefdescription>
<para>Keystream generation complete. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__ccm__hal_1gga9de429cccef1f7a1e1dc63fe5563aa77a1c3989671371d7b26626f73826520218" prot="public">
          <name>NRF_CCM_EVENT_ENDCRYPT</name>
          <initializer>= offsetof(NRF_CCM_Type, EVENTS_ENDCRYPT)</initializer>
          <briefdescription>
<para>Encrypt/decrypt complete. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__ccm__hal_1gga9de429cccef1f7a1e1dc63fe5563aa77ac0dd8115c3f8e282e26af2cb49783d45" prot="public">
          <name>NRF_CCM_EVENT_ERROR</name>
          <initializer>= offsetof(NRF_CCM_Type, EVENTS_ERROR)</initializer>
          <briefdescription>
<para>CCM error event. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__ccm__hal_1gga9de429cccef1f7a1e1dc63fe5563aa77ae925ee1545a1b987ab72a7e8aadc35b8" prot="public">
          <name>NRF_CCM_EVENT_END</name>
          <initializer>= offsetof(NRF_CCM_Type, EVENTS_END)</initializer>
          <briefdescription>
<para>Encrypt/decrypt complete. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>CCM events. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ccm.h" line="352" column="1" bodyfile="hal/nrf_ccm.h" bodystart="353" bodyend="364"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__ccm__hal_1gac98b1cb2a24240168775e1e306c1ed07" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_ccm_short_mask_t</name>
        <enumvalue id="group__nrf__ccm__hal_1ggac98b1cb2a24240168775e1e306c1ed07ade1daf0af2c71a3148f6327b3e4c2999" prot="public">
          <name>NRF_CCM_SHORT_ENDKSGEN_CRYPT_MASK</name>
          <initializer>= CCM_SHORTS_ENDKSGEN_CRYPT_Msk</initializer>
          <briefdescription>
<para>Shortcut for starting encryption/decryption when the key-stream generation is complete. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Types of CCM shorts. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ccm.h" line="368" column="1" bodyfile="hal/nrf_ccm.h" bodystart="369" bodyend="371"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__ccm__hal_1gaadb9b1cc060488c2ce85c403c463a265" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_ccm_int_mask_t</name>
        <enumvalue id="group__nrf__ccm__hal_1ggaadb9b1cc060488c2ce85c403c463a265ae05a877f606e44e69a171f9261cbd47c" prot="public">
          <name>NRF_CCM_INT_ENDKSGEN_MASK</name>
          <initializer>= CCM_INTENSET_ENDKSGEN_Msk</initializer>
          <briefdescription>
<para>Interrupt on ENDKSGEN event. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__ccm__hal_1ggaadb9b1cc060488c2ce85c403c463a265af0679cd2f92143f9111fab7b6a50f28c" prot="public">
          <name>NRF_CCM_INT_ENDCRYPT_MASK</name>
          <initializer>= CCM_INTENSET_ENDCRYPT_Msk</initializer>
          <briefdescription>
<para>Interrupt on ENDCRYPT event. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__ccm__hal_1ggaadb9b1cc060488c2ce85c403c463a265a68d7571388ad5ec246d5a80080a07091" prot="public">
          <name>NRF_CCM_INT_ERROR_MASK</name>
          <initializer>= CCM_INTENSET_ERROR_Msk</initializer>
          <briefdescription>
<para>Interrupt on ERROR event. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__ccm__hal_1ggaadb9b1cc060488c2ce85c403c463a265a5b371809f783d4fb6e115a573c073a96" prot="public">
          <name>NRF_CCM_INT_END_MASK</name>
          <initializer>= CCM_INTENSET_END_Msk</initializer>
          <briefdescription>
<para>Interrupt on END event. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>CCM interrupts. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ccm.h" line="375" column="1" bodyfile="hal/nrf_ccm.h" bodystart="376" bodyend="387"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__ccm__hal_1gacfa3ca60c3a9a6b9775da8de55891e5b" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_ccm_error_t</name>
        <enumvalue id="group__nrf__ccm__hal_1ggacfa3ca60c3a9a6b9775da8de55891e5ba2dd1bae8f04d727f464f206b0eb37815" prot="public">
          <name>NRF_CCM_ERROR_NO_ERROR</name>
          <initializer>= CCM_ERRORSTATUS_ERRORSTATUS_NoError</initializer>
          <briefdescription>
<para>No errors have occurred. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__ccm__hal_1ggacfa3ca60c3a9a6b9775da8de55891e5baaebc12191f6df8e41bdc0d102d17966f" prot="public">
          <name>NRF_CCM_ERROR_PREMATURE_INPTR_END</name>
          <initializer>= CCM_ERRORSTATUS_ERRORSTATUS_PrematureInptrEnd</initializer>
          <briefdescription>
<para>End of INPTR job list before CCM data structure was read. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__ccm__hal_1ggacfa3ca60c3a9a6b9775da8de55891e5ba86411b37a51403b4636dc64d8268ca72" prot="public">
          <name>NRF_CCM_ERROR_PREMATURE_OUTPTR_END</name>
          <initializer>= CCM_ERRORSTATUS_ERRORSTATUS_PrematureOutptrEnd</initializer>
          <briefdescription>
<para>End of OUTPTR job list before CCM data structure was read. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__ccm__hal_1ggacfa3ca60c3a9a6b9775da8de55891e5ba4c0966c6d17e808f2bb4b3120049889d" prot="public">
          <name>NRF_CCM_ERROR_ENCRYPTION_TOO_SLOW</name>
          <initializer>= CCM_ERRORSTATUS_ERRORSTATUS_EncryptionTooSlow</initializer>
          <briefdescription>
<para>Encryption did not complete in time. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>CCM error status when ERROR event is generated. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ccm.h" line="391" column="1" bodyfile="hal/nrf_ccm.h" bodystart="392" bodyend="397"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__ccm__hal_1ga185933f2c5689be81cc9d650565bcd11" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_ccm_mode_t</name>
        <enumvalue id="group__nrf__ccm__hal_1gga185933f2c5689be81cc9d650565bcd11a656f78f49e10703d7846cdbc27727560" prot="public">
          <name>NRF_CCM_MODE_ENCRYPTION</name>
          <initializer>= CCM_MODE_MODE_Encryption</initializer>
          <briefdescription>
<para>Encryption mode. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__ccm__hal_1gga185933f2c5689be81cc9d650565bcd11a4d52de2d041a8bf7daa3a7b4e2019ce7" prot="public">
          <name>NRF_CCM_MODE_DECRYPTION</name>
          <initializer>= CCM_MODE_MODE_Decryption</initializer>
          <briefdescription>
<para>Decryption mode. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__ccm__hal_1gga185933f2c5689be81cc9d650565bcd11ad8144303b3ff9d3bb6d423306c64fc22" prot="public">
          <name>NRF_CCM_MODE_FAST_DECRYPTION</name>
          <initializer>= CCM_MODE_MODE_FastDecryption</initializer>
          <briefdescription>
<para>Fast decryption mode. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>CCM modes of operation. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ccm.h" line="401" column="1" bodyfile="hal/nrf_ccm.h" bodystart="402" bodyend="408"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__ccm__hal_1ga1d6e97200cb2c3f20d655240ea69d6a5" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_ccm_datarate_t</name>
        <enumvalue id="group__nrf__ccm__hal_1gga1d6e97200cb2c3f20d655240ea69d6a5a4075d59dac85992e79f845bea5939119" prot="public">
          <name>NRF_CCM_DATARATE_125K</name>
          <initializer>= CCM_MODE_DATARATE_125Kbps</initializer>
          <briefdescription>
<para>125 Kbps. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__ccm__hal_1gga1d6e97200cb2c3f20d655240ea69d6a5a9380eb3f003bde415820c8c6cf79d42e" prot="public">
          <name>NRF_CCM_DATARATE_250K</name>
          <initializer>= CCM_MODE_DATARATE_250Kbit</initializer>
          <briefdescription>
<para>250 Kbps. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__ccm__hal_1gga1d6e97200cb2c3f20d655240ea69d6a5abd98c8c3e1f89e717a0cc540c76a2519" prot="public">
          <name>NRF_CCM_DATARATE_500K</name>
          <initializer>= CCM_MODE_DATARATE_500Kbps</initializer>
          <briefdescription>
<para>500 Kbps. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__ccm__hal_1gga1d6e97200cb2c3f20d655240ea69d6a5ae341f05e1f11b2ce06c68ddc5c2a33a4" prot="public">
          <name>NRF_CCM_DATARATE_1M</name>
          <initializer>= CCM_MODE_DATARATE_1Mbit</initializer>
          <briefdescription>
<para>1 Mbps. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__ccm__hal_1gga1d6e97200cb2c3f20d655240ea69d6a5a942d8bfa56aab8fdea41ec89462e6e93" prot="public">
          <name>NRF_CCM_DATARATE_2M</name>
          <initializer>= CCM_MODE_DATARATE_2Mbit</initializer>
          <briefdescription>
<para>2 Mbps. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__ccm__hal_1gga1d6e97200cb2c3f20d655240ea69d6a5acc1328b84090c4387374a6045104ead5" prot="public">
          <name>NRF_CCM_DATARATE_4M</name>
          <initializer>= CCM_MODE_DATARATE_4Mbit</initializer>
          <briefdescription>
<para>4 Mbps. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>CCM data rates. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ccm.h" line="412" column="1" bodyfile="hal/nrf_ccm.h" bodystart="413" bodyend="433"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__ccm__hal_1gacc9f2441148c27bbdc146ced8eb37b9b" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_ccm_protocol_t</name>
        <enumvalue id="group__nrf__ccm__hal_1ggacc9f2441148c27bbdc146ced8eb37b9baaa2f3f550b52ad06f53108e79fe9f347" prot="public">
          <name>NRF_CCM_MODE_PROTOCOL_BLE</name>
          <initializer>= CCM_MODE_PROTOCOL_Ble</initializer>
          <briefdescription>
<para>BLE packet format. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__ccm__hal_1ggacc9f2441148c27bbdc146ced8eb37b9ba5602eb6f96c79bff0a2e3416c8f18111" prot="public">
          <name>NRF_CCM_MODE_PROTOCOL_IEEE802154</name>
          <initializer>= CCM_MODE_PROTOCOL_Ieee802154</initializer>
          <briefdescription>
<para>802.15.4 packet format. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>CCM protocol and packet format. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ccm.h" line="438" column="1" bodyfile="hal/nrf_ccm.h" bodystart="439" bodyend="446"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__ccm__hal_1ga0168161f5b7fcfe2c8ce01e062d7a7e7" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_ccm_length_t</name>
        <enumvalue id="group__nrf__ccm__hal_1gga0168161f5b7fcfe2c8ce01e062d7a7e7a55e5dda4a8402d2ce7845fa2cc622c73" prot="public">
          <name>NRF_CCM_LENGTH_DEFAULT</name>
          <initializer>= CCM_MODE_LENGTH_Default</initializer>
          <briefdescription>
<para>Default length. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__ccm__hal_1gga0168161f5b7fcfe2c8ce01e062d7a7e7a60fd1f50e556dd5b082e8c753c46fdc8" prot="public">
          <name>NRF_CCM_LENGTH_EXTENDED</name>
          <initializer>= CCM_MODE_LENGTH_Extended</initializer>
          <briefdescription>
<para>Extended length. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>CCM packet length options. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ccm.h" line="451" column="1" bodyfile="hal/nrf_ccm.h" bodystart="452" bodyend="455"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__ccm__hal_1gabec984e48ab599fc40b92b50aca99c6f" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_ccm_maclen_t</name>
        <enumvalue id="group__nrf__ccm__hal_1ggabec984e48ab599fc40b92b50aca99c6fa85ac004451f07973478cdd1699775f8c" prot="public">
          <name>NRF_CCM_MODE_MACLEN_M0</name>
          <initializer>= CCM_MODE_MACLEN_M0</initializer>
          <briefdescription>
<para>0 bytes. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__ccm__hal_1ggabec984e48ab599fc40b92b50aca99c6fa6cd03d8252695c31b0e38affb8be576b" prot="public">
          <name>NRF_CCM_MODE_MACLEN_M4</name>
          <initializer>= CCM_MODE_MACLEN_M4</initializer>
          <briefdescription>
<para>4 bytes. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__ccm__hal_1ggabec984e48ab599fc40b92b50aca99c6fad9719f2a248cf404c2d26f45aef746ba" prot="public">
          <name>NRF_CCM_MODE_MACLEN_M6</name>
          <initializer>= CCM_MODE_MACLEN_M6</initializer>
          <briefdescription>
<para>6 bytes. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__ccm__hal_1ggabec984e48ab599fc40b92b50aca99c6fa271196bd769fb3a42cdfcf8defa09fe3" prot="public">
          <name>NRF_CCM_MODE_MACLEN_M8</name>
          <initializer>= CCM_MODE_MACLEN_M8</initializer>
          <briefdescription>
<para>8 bytes. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__ccm__hal_1ggabec984e48ab599fc40b92b50aca99c6fa7914e14522ae049627946739b7271394" prot="public">
          <name>NRF_CCM_MODE_MACLEN_M10</name>
          <initializer>= CCM_MODE_MACLEN_M10</initializer>
          <briefdescription>
<para>10 bytes. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__ccm__hal_1ggabec984e48ab599fc40b92b50aca99c6fa9cfd92a48cde722681a1e3e62e1142a0" prot="public">
          <name>NRF_CCM_MODE_MACLEN_M12</name>
          <initializer>= CCM_MODE_MACLEN_M12</initializer>
          <briefdescription>
<para>12 bytes. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__ccm__hal_1ggabec984e48ab599fc40b92b50aca99c6fa9d509ec59013296bb0301093836f9fca" prot="public">
          <name>NRF_CCM_MODE_MACLEN_M14</name>
          <initializer>= CCM_MODE_MACLEN_M14</initializer>
          <briefdescription>
<para>14 bytes. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__ccm__hal_1ggabec984e48ab599fc40b92b50aca99c6fa691a489b3f7c8e6ed3159f2feb729fba" prot="public">
          <name>NRF_CCM_MODE_MACLEN_M16</name>
          <initializer>= CCM_MODE_MACLEN_M16</initializer>
          <briefdescription>
<para>16 bytes. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>CCM MAC length. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ccm.h" line="460" column="1" bodyfile="hal/nrf_ccm.h" bodystart="461" bodyend="470"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__nrf__ccm__hal_1ga9a85224f11dfad88732218ebe03f9c7e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_ccm_task_trigger</definition>
        <argsstring>(NRF_CCM_Type *p_reg, nrf_ccm_task_t task)</argsstring>
        <name>nrf_ccm_task_trigger</name>
        <param>
          <type>NRF_CCM_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__ccm__hal_1ga2dede4b5a487f5846c0c27a00ecff430" kindref="member">nrf_ccm_task_t</ref></type>
          <declname>task</declname>
        </param>
        <briefdescription>
<para>Function for activating a specific CCM task. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">task</parametername>
</parameternamelist>
<parameterdescription>
<para>Task to be activated. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ccm.h" line="978" column="24" bodyfile="hal/nrf_ccm.h" bodystart="978" bodyend="982" declfile="hal/nrf_ccm.h" declline="497" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__ccm__hal_1gab7220271df70c4ef04d6552f6fbf74de" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_ccm_task_address_get</definition>
        <argsstring>(NRF_CCM_Type const *p_reg, nrf_ccm_task_t task)</argsstring>
        <name>nrf_ccm_task_address_get</name>
        <param>
          <type>NRF_CCM_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__ccm__hal_1ga2dede4b5a487f5846c0c27a00ecff430" kindref="member">nrf_ccm_task_t</ref></type>
          <declname>task</declname>
        </param>
        <briefdescription>
<para>Function for getting the address of a specific CCM task register. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">task</parametername>
</parameternamelist>
<parameterdescription>
<para>Requested task.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Address of the specified task register. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ccm.h" line="984" column="28" bodyfile="hal/nrf_ccm.h" bodystart="984" bodyend="988" declfile="hal/nrf_ccm.h" declline="508" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__ccm__hal_1gad8be593b9eefbedd85e38151bf5832a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_ccm_event_clear</definition>
        <argsstring>(NRF_CCM_Type *p_reg, nrf_ccm_event_t event)</argsstring>
        <name>nrf_ccm_event_clear</name>
        <param>
          <type>NRF_CCM_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__ccm__hal_1ga9de429cccef1f7a1e1dc63fe5563aa77" kindref="member">nrf_ccm_event_t</ref></type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>Function for clearing a specific CCM event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event to clear. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ccm.h" line="990" column="24" bodyfile="hal/nrf_ccm.h" bodystart="990" bodyend="995" declfile="hal/nrf_ccm.h" declline="517" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__ccm__hal_1gaa2be743c1ef1304bf7c9b6d98ac548c0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE bool</type>
        <definition>NRF_STATIC_INLINE bool nrf_ccm_event_check</definition>
        <argsstring>(NRF_CCM_Type const *p_reg, nrf_ccm_event_t event)</argsstring>
        <name>nrf_ccm_event_check</name>
        <param>
          <type>NRF_CCM_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__ccm__hal_1ga9de429cccef1f7a1e1dc63fe5563aa77" kindref="member">nrf_ccm_event_t</ref></type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>Function for retrieving the state of a specific CCM event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event to be checked.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>The event has been generated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>The event has not been generated. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ccm.h" line="997" column="24" bodyfile="hal/nrf_ccm.h" bodystart="997" bodyend="1001" declfile="hal/nrf_ccm.h" declline="529" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__ccm__hal_1ga5c1679029c4fcf09c3445b170b6ffa19" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_ccm_event_address_get</definition>
        <argsstring>(NRF_CCM_Type const *p_reg, nrf_ccm_event_t event)</argsstring>
        <name>nrf_ccm_event_address_get</name>
        <param>
          <type>NRF_CCM_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__ccm__hal_1ga9de429cccef1f7a1e1dc63fe5563aa77" kindref="member">nrf_ccm_event_t</ref></type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>Function for getting the address of a specific CCM event register. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>Requested event.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Address of the specified event register. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ccm.h" line="1003" column="28" bodyfile="hal/nrf_ccm.h" bodystart="1003" bodyend="1007" declfile="hal/nrf_ccm.h" declline="540" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__ccm__hal_1ga79505962cc22e5fb88b8456fd43b4b3d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_ccm_shorts_enable</definition>
        <argsstring>(NRF_CCM_Type *p_reg, uint32_t mask)</argsstring>
        <name>nrf_ccm_shorts_enable</name>
        <param>
          <type>NRF_CCM_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Function for enabling the specified shortcuts. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Shortcuts to be enabled. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ccm.h" line="1010" column="24" bodyfile="hal/nrf_ccm.h" bodystart="1010" bodyend="1014" declfile="hal/nrf_ccm.h" declline="550" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__ccm__hal_1gae16fcf6c83ad1d93d46fdaa3789dfbf9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_ccm_shorts_disable</definition>
        <argsstring>(NRF_CCM_Type *p_reg, uint32_t mask)</argsstring>
        <name>nrf_ccm_shorts_disable</name>
        <param>
          <type>NRF_CCM_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Function for disabling the specified shortcuts. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Shortcuts to be disabled. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ccm.h" line="1016" column="24" bodyfile="hal/nrf_ccm.h" bodystart="1016" bodyend="1020" declfile="hal/nrf_ccm.h" declline="559" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__ccm__hal_1ga7bb97ad8b7a96d5f1b4c6286da79ba80" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_ccm_shorts_set</definition>
        <argsstring>(NRF_CCM_Type *p_reg, uint32_t mask)</argsstring>
        <name>nrf_ccm_shorts_set</name>
        <param>
          <type>NRF_CCM_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Function for setting the specified shortcuts. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Shortcuts to be set. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ccm.h" line="1022" column="24" bodyfile="hal/nrf_ccm.h" bodystart="1022" bodyend="1026" declfile="hal/nrf_ccm.h" declline="568" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__ccm__hal_1gae6cdb42da4118ce6a51568699564344a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_ccm_int_enable</definition>
        <argsstring>(NRF_CCM_Type *p_reg, uint32_t mask)</argsstring>
        <name>nrf_ccm_int_enable</name>
        <param>
          <type>NRF_CCM_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Function for enabling specified interrupts. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of interrupts to be enabled. Use <ref refid="group__nrf__ccm__hal_1gaadb9b1cc060488c2ce85c403c463a265" kindref="member">nrf_ccm_int_mask_t</ref> values for bit masking. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ccm.h" line="1029" column="24" bodyfile="hal/nrf_ccm.h" bodystart="1029" bodyend="1032" declfile="hal/nrf_ccm.h" declline="579" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__ccm__hal_1ga2b494a0518dd061b247ff341be45b025" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_ccm_int_disable</definition>
        <argsstring>(NRF_CCM_Type *p_reg, uint32_t mask)</argsstring>
        <name>nrf_ccm_int_disable</name>
        <param>
          <type>NRF_CCM_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Function for disabling specified interrupts. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of interrupts to be disabled. Use <ref refid="group__nrf__ccm__hal_1gaadb9b1cc060488c2ce85c403c463a265" kindref="member">nrf_ccm_int_mask_t</ref> values for bit masking. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ccm.h" line="1034" column="24" bodyfile="hal/nrf_ccm.h" bodystart="1034" bodyend="1037" declfile="hal/nrf_ccm.h" declline="588" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__ccm__hal_1ga8867c93af39791438608b49d634597b7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_ccm_int_enable_check</definition>
        <argsstring>(NRF_CCM_Type const *p_reg, uint32_t mask)</argsstring>
        <name>nrf_ccm_int_enable_check</name>
        <param>
          <type>NRF_CCM_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Function for checking if the specified interrupts are enabled. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of interrupts to be checked. Use <ref refid="group__nrf__ccm__hal_1gaadb9b1cc060488c2ce85c403c463a265" kindref="member">nrf_ccm_int_mask_t</ref> values for bit masking.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Mask of enabled interrupts. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ccm.h" line="1039" column="28" bodyfile="hal/nrf_ccm.h" bodystart="1039" bodyend="1042" declfile="hal/nrf_ccm.h" declline="599" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__ccm__hal_1ga93606d4a5a315ae323c80bf1a0602940" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_ccm_enable</definition>
        <argsstring>(NRF_CCM_Type *p_reg)</argsstring>
        <name>nrf_ccm_enable</name>
        <param>
          <type>NRF_CCM_Type *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for enabling the CCM peripheral. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ccm.h" line="1044" column="24" bodyfile="hal/nrf_ccm.h" bodystart="1044" bodyend="1047" declfile="hal/nrf_ccm.h" declline="606" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__ccm__hal_1gaf4b80365bac2fb3d21fa0b92e5d25650" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_ccm_disable</definition>
        <argsstring>(NRF_CCM_Type *p_reg)</argsstring>
        <name>nrf_ccm_disable</name>
        <param>
          <type>NRF_CCM_Type *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for disabling the CCM peripheral. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ccm.h" line="1049" column="24" bodyfile="hal/nrf_ccm.h" bodystart="1049" bodyend="1052" declfile="hal/nrf_ccm.h" declline="613" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__ccm__hal_1gac253c1936f52f294f7429f5e6d29741b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_ccm_configure</definition>
        <argsstring>(NRF_CCM_Type *p_reg, nrf_ccm_config_t const *p_config)</argsstring>
        <name>nrf_ccm_configure</name>
        <param>
          <type>NRF_CCM_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="structnrf__ccm__config__t" kindref="compound">nrf_ccm_config_t</ref> const *</type>
          <declname>p_config</declname>
        </param>
        <briefdescription>
<para>Function for setting the CCM peripheral configuration. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">p_config</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure with configuration to be set. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ccm.h" line="1054" column="24" bodyfile="hal/nrf_ccm.h" bodystart="1054" bodyend="1071" declfile="hal/nrf_ccm.h" declline="621" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__ccm__hal_1ga87e501bd771ea42c4c5fa1619b7479f9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_ccm_maxpacketsize_set</definition>
        <argsstring>(NRF_CCM_Type *p_reg, uint8_t size)</argsstring>
        <name>nrf_ccm_maxpacketsize_set</name>
        <param>
          <type>NRF_CCM_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Function for setting the length of key-stream generated when the packet length is configured as extended. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">size</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum length of the key-stream. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ccm.h" line="1074" column="24" bodyfile="hal/nrf_ccm.h" bodystart="1074" bodyend="1080" declfile="hal/nrf_ccm.h" declline="632" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__ccm__hal_1ga100ec36cc4babc6c80f056c32048b863" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE bool</type>
        <definition>NRF_STATIC_INLINE bool nrf_ccm_micstatus_get</definition>
        <argsstring>(NRF_CCM_Type const *p_reg)</argsstring>
        <name>nrf_ccm_micstatus_get</name>
        <param>
          <type>NRF_CCM_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting the MIC check result. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>The MIC check passed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>The MIC check failed. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ccm.h" line="1084" column="24" bodyfile="hal/nrf_ccm.h" bodystart="1084" bodyend="1087" declfile="hal/nrf_ccm.h" declline="645" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__ccm__hal_1gaa6b520cc38cf5e6c1e2d05cadde5f3a5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE bool</type>
        <definition>NRF_STATIC_INLINE bool nrf_ccm_macstatus_get</definition>
        <argsstring>(NRF_CCM_Type const *p_reg)</argsstring>
        <name>nrf_ccm_macstatus_get</name>
        <param>
          <type>NRF_CCM_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting the MAC check result. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>The MAC check passed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>The MAC check failed. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ccm.h" line="1091" column="24" bodyfile="hal/nrf_ccm.h" bodystart="1091" bodyend="1094" declfile="hal/nrf_ccm.h" declline="657" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__ccm__hal_1ga8d9d0175ad11447cd00eb82f229bec53" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE <ref refid="group__nrf__ccm__hal_1gacfa3ca60c3a9a6b9775da8de55891e5b" kindref="member">nrf_ccm_error_t</ref></type>
        <definition>NRF_STATIC_INLINE nrf_ccm_error_t nrf_ccm_errorstatus_get</definition>
        <argsstring>(NRF_CCM_Type const *p_reg)</argsstring>
        <name>nrf_ccm_errorstatus_get</name>
        <param>
          <type>NRF_CCM_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting the error status when ERROR event is generated. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>Error</parametername>
</parameternamelist>
<parameterdescription>
<para>status when the ERROR event is generated. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ccm.h" line="1098" column="35" bodyfile="hal/nrf_ccm.h" bodystart="1098" bodyend="1101" declfile="hal/nrf_ccm.h" declline="668" declcolumn="35"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__ccm__hal_1gac5572ede6ba2c649cad86d4d82f14ceb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_ccm_cnfptr_set</definition>
        <argsstring>(NRF_CCM_Type *p_reg, nrf_ccm_cnf_t const *p_data)</argsstring>
        <name>nrf_ccm_cnfptr_set</name>
        <param>
          <type>NRF_CCM_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="structnrf__ccm__cnf__t" kindref="compound">nrf_ccm_cnf_t</ref> const *</type>
          <declname>p_data</declname>
        </param>
        <briefdescription>
<para>Function for setting the pointer to the data structure holding the AES key and the CCM NONCE vector. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">p_data</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the data structure. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ccm.h" line="1105" column="24" bodyfile="hal/nrf_ccm.h" bodystart="1105" bodyend="1109" declfile="hal/nrf_ccm.h" declline="679" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__ccm__hal_1ga994569698e9e256cac4e648b5e13e4b1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE <ref refid="structnrf__ccm__cnf__t" kindref="compound">nrf_ccm_cnf_t</ref> *</type>
        <definition>NRF_STATIC_INLINE nrf_ccm_cnf_t * nrf_ccm_cnfptr_get</definition>
        <argsstring>(NRF_CCM_Type const *p_reg)</argsstring>
        <name>nrf_ccm_cnfptr_get</name>
        <param>
          <type>NRF_CCM_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting the pointer to the data structure holding the AES key and the CCM NONCE vector. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to the data structure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ccm.h" line="1111" column="34" bodyfile="hal/nrf_ccm.h" bodystart="1111" bodyend="1119" declfile="hal/nrf_ccm.h" declline="690" declcolumn="34"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__ccm__hal_1ga14427bead44aa9dc1c2ff39612cce10b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_ccm_key_set</definition>
        <argsstring>(NRF_CCM_Type *p_reg, uint32_t const *p_key)</argsstring>
        <name>nrf_ccm_key_set</name>
        <param>
          <type>NRF_CCM_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t const *</type>
          <declname>p_key</declname>
        </param>
        <briefdescription>
<para>Function for setting the AES key. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">p_key</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the AES 128-bit key value. The key shall be stored in big endian byte order. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ccm.h" line="1123" column="24" bodyfile="hal/nrf_ccm.h" bodystart="1123" bodyend="1131" declfile="hal/nrf_ccm.h" declline="701" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__ccm__hal_1gadd022049b1e721301c4213785c0398f5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t const volatile *</type>
        <definition>NRF_STATIC_INLINE uint32_t const volatile * nrf_ccm_key_get</definition>
        <argsstring>(NRF_CCM_Type const *p_reg)</argsstring>
        <name>nrf_ccm_key_get</name>
        <param>
          <type>NRF_CCM_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting the AES key. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to the AES 128-bit key value. The key is stored in big endian byte order. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ccm.h" line="1133" column="44" bodyfile="hal/nrf_ccm.h" bodystart="1133" bodyend="1136" declfile="hal/nrf_ccm.h" declline="710" declcolumn="44"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__ccm__hal_1ga7e13667c3817900d42952d004d398f54" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_ccm_nonce_set</definition>
        <argsstring>(NRF_CCM_Type *p_reg, uint32_t const *p_nonce)</argsstring>
        <name>nrf_ccm_nonce_set</name>
        <param>
          <type>NRF_CCM_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t const *</type>
          <declname>p_nonce</declname>
        </param>
        <briefdescription>
<para>Function for setting the AES nonce. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">p_nonce</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the AES 13-byte nonce value. The nonce shall be stored in big endian byte order. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ccm.h" line="1140" column="24" bodyfile="hal/nrf_ccm.h" bodystart="1140" bodyend="1148" declfile="hal/nrf_ccm.h" declline="722" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__ccm__hal_1gacfff0d73274453b8291b67d247f31f0a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t const volatile *</type>
        <definition>NRF_STATIC_INLINE uint32_t const volatile * nrf_ccm_nonce_get</definition>
        <argsstring>(NRF_CCM_Type const *p_reg)</argsstring>
        <name>nrf_ccm_nonce_get</name>
        <param>
          <type>NRF_CCM_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting the AES nonce. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to the AES 13-byte nonce value. The nonce is stored in big endian byte order. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ccm.h" line="1150" column="44" bodyfile="hal/nrf_ccm.h" bodystart="1150" bodyend="1153" declfile="hal/nrf_ccm.h" declline="732" declcolumn="44"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__ccm__hal_1gaad71c6536c7a1a1d4c5efd5eeb8303cd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_ccm_in_amount_get</definition>
        <argsstring>(NRF_CCM_Type const *p_reg)</argsstring>
        <name>nrf_ccm_in_amount_get</name>
        <param>
          <type>NRF_CCM_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting number of bytes read from the input data, not including the job list structure. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Number of bytes read from the input data. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ccm.h" line="1157" column="28" bodyfile="hal/nrf_ccm.h" bodystart="1157" bodyend="1160" declfile="hal/nrf_ccm.h" declline="744" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__ccm__hal_1ga51ba484f77af41054d8b1ec9670359fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_ccm_inptr_set</definition>
        <argsstring>(NRF_CCM_Type *p_reg, uint32_t const *p_data)</argsstring>
        <name>nrf_ccm_inptr_set</name>
        <param>
          <type>NRF_CCM_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t const *</type>
          <declname>p_data</declname>
        </param>
        <briefdescription>
<para>Function for setting the input data pointer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">p_data</parametername>
</parameternamelist>
<parameterdescription>
<para>Input data pointer. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ccm.h" line="1171" column="24" bodyfile="hal/nrf_ccm.h" bodystart="1171" bodyend="1175" declfile="hal/nrf_ccm.h" declline="754" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__ccm__hal_1ga8cc2b5ffdc3f91c3d90744d6d0c7636e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t *</type>
        <definition>NRF_STATIC_INLINE uint32_t * nrf_ccm_inptr_get</definition>
        <argsstring>(NRF_CCM_Type const *p_reg)</argsstring>
        <name>nrf_ccm_inptr_get</name>
        <param>
          <type>NRF_CCM_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting the input data pointer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Input data pointer. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ccm.h" line="1177" column="29" bodyfile="hal/nrf_ccm.h" bodystart="1177" bodyend="1185" declfile="hal/nrf_ccm.h" declline="764" declcolumn="29"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__ccm__hal_1ga7c96e19e88eefd176fbeb9fd85a51297" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_ccm_in_ptr_set</definition>
        <argsstring>(NRF_CCM_Type *p_reg, nrf_vdma_job_t const *p_job)</argsstring>
        <name>nrf_ccm_in_ptr_set</name>
        <param>
          <type>NRF_CCM_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="structnrf__vdma__job__t" kindref="compound">nrf_vdma_job_t</ref> const *</type>
          <declname>p_job</declname>
        </param>
        <briefdescription>
<para>Function for setting the pointer to a job list containing unencrypted CCM data structure in Encryption mode or encrypted CCM data structure in Decryption mode. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">p_job</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a job list. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ccm.h" line="1189" column="24" bodyfile="hal/nrf_ccm.h" bodystart="1189" bodyend="1193" declfile="hal/nrf_ccm.h" declline="776" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__ccm__hal_1gabe720cb5f6425542f992debb4a295516" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE <ref refid="structnrf__vdma__job__t" kindref="compound">nrf_vdma_job_t</ref> *</type>
        <definition>NRF_STATIC_INLINE nrf_vdma_job_t * nrf_ccm_in_ptr_get</definition>
        <argsstring>(NRF_CCM_Type const *p_reg)</argsstring>
        <name>nrf_ccm_in_ptr_get</name>
        <param>
          <type>NRF_CCM_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting the pointer to job list containing unencrypted CCM data structure in Encryption mode or encrypted CCM data structure in Decryption mode. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to a job list. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ccm.h" line="1195" column="35" bodyfile="hal/nrf_ccm.h" bodystart="1195" bodyend="1198" declfile="hal/nrf_ccm.h" declline="788" declcolumn="35"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__ccm__hal_1ga7c6693fa080426df18618cfaff9b5d34" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_ccm_outptr_set</definition>
        <argsstring>(NRF_CCM_Type *p_reg, uint32_t const *p_data)</argsstring>
        <name>nrf_ccm_outptr_set</name>
        <param>
          <type>NRF_CCM_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t const *</type>
          <declname>p_data</declname>
        </param>
        <briefdescription>
<para>Function for setting the output data pointer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">p_data</parametername>
</parameternamelist>
<parameterdescription>
<para>Output data pointer. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ccm.h" line="1202" column="24" bodyfile="hal/nrf_ccm.h" bodystart="1202" bodyend="1206" declfile="hal/nrf_ccm.h" declline="798" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__ccm__hal_1gacd6ce17163e6039d5e8cd9a2f6c2be07" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t *</type>
        <definition>NRF_STATIC_INLINE uint32_t * nrf_ccm_outptr_get</definition>
        <argsstring>(NRF_CCM_Type const *p_reg)</argsstring>
        <name>nrf_ccm_outptr_get</name>
        <param>
          <type>NRF_CCM_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting the output data pointer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Output data pointer. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ccm.h" line="1208" column="29" bodyfile="hal/nrf_ccm.h" bodystart="1208" bodyend="1216" declfile="hal/nrf_ccm.h" declline="808" declcolumn="29"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__ccm__hal_1gaa01ff841d9024351e9aebddfc9ed2b88" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_ccm_out_ptr_set</definition>
        <argsstring>(NRF_CCM_Type *p_reg, nrf_vdma_job_t const *p_job)</argsstring>
        <name>nrf_ccm_out_ptr_set</name>
        <param>
          <type>NRF_CCM_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="structnrf__vdma__job__t" kindref="compound">nrf_vdma_job_t</ref> const *</type>
          <declname>p_job</declname>
        </param>
        <briefdescription>
<para>Function for setting the pointer to a job list containing encrypted CCM data structure in Encryption mode or decrypted CCM data structure in Decryption mode. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">p_job</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a job list. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ccm.h" line="1220" column="24" bodyfile="hal/nrf_ccm.h" bodystart="1220" bodyend="1224" declfile="hal/nrf_ccm.h" declline="820" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__ccm__hal_1ga2e758c89d37e3e149b209b7e77124e0b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE <ref refid="structnrf__vdma__job__t" kindref="compound">nrf_vdma_job_t</ref> *</type>
        <definition>NRF_STATIC_INLINE nrf_vdma_job_t * nrf_ccm_out_ptr_get</definition>
        <argsstring>(NRF_CCM_Type const *p_reg)</argsstring>
        <name>nrf_ccm_out_ptr_get</name>
        <param>
          <type>NRF_CCM_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting the pointer to a job list containing encrypted CCM data structure in Encryption mode or decrypted CCM data structure in Decryption mode. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to the job list. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ccm.h" line="1226" column="35" bodyfile="hal/nrf_ccm.h" bodystart="1226" bodyend="1229" declfile="hal/nrf_ccm.h" declline="832" declcolumn="35"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__ccm__hal_1gafaf25f90a48bc7dd28b3ce9dc9874e67" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_ccm_out_amount_get</definition>
        <argsstring>(NRF_CCM_Type const *p_reg)</argsstring>
        <name>nrf_ccm_out_amount_get</name>
        <param>
          <type>NRF_CCM_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting number of bytes available in the output data, not including the job list structure. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Number of bytes available in the output data. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ccm.h" line="1164" column="28" bodyfile="hal/nrf_ccm.h" bodystart="1164" bodyend="1167" declfile="hal/nrf_ccm.h" declline="844" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__ccm__hal_1gaef8cf688fefc45e1b78db80d14d9580d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_ccm_scratchptr_set</definition>
        <argsstring>(NRF_CCM_Type *p_reg, uint32_t const *p_area)</argsstring>
        <name>nrf_ccm_scratchptr_set</name>
        <param>
          <type>NRF_CCM_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t const *</type>
          <declname>p_area</declname>
        </param>
        <briefdescription>
<para>Function for setting the pointer to the scratch area used for temporary storage. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">p_area</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the scratch area. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ccm.h" line="1233" column="24" bodyfile="hal/nrf_ccm.h" bodystart="1233" bodyend="1237" declfile="hal/nrf_ccm.h" declline="855" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__ccm__hal_1ga9c064c4427178dbf1d125e0f52ef7c7f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t *</type>
        <definition>NRF_STATIC_INLINE uint32_t * nrf_ccm_scratchptr_get</definition>
        <argsstring>(NRF_CCM_Type const *p_reg)</argsstring>
        <name>nrf_ccm_scratchptr_get</name>
        <param>
          <type>NRF_CCM_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting the pointer to the scratch area. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to the scratch area. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ccm.h" line="1239" column="29" bodyfile="hal/nrf_ccm.h" bodystart="1239" bodyend="1247" declfile="hal/nrf_ccm.h" declline="865" declcolumn="29"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__ccm__hal_1gab33d58e47347eef25c2541aecd68a2c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_ccm_datarate_override_set</definition>
        <argsstring>(NRF_CCM_Type *p_reg, nrf_ccm_datarate_t datarate)</argsstring>
        <name>nrf_ccm_datarate_override_set</name>
        <param>
          <type>NRF_CCM_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__ccm__hal_1ga1d6e97200cb2c3f20d655240ea69d6a5" kindref="member">nrf_ccm_datarate_t</ref></type>
          <declname>datarate</declname>
        </param>
        <briefdescription>
<para>Function for setting the data rate override value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">datarate</parametername>
</parameternamelist>
<parameterdescription>
<para>Override value to be applied when the RATEOVERRIDE task is triggered. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ccm.h" line="1251" column="24" bodyfile="hal/nrf_ccm.h" bodystart="1251" bodyend="1255" declfile="hal/nrf_ccm.h" declline="876" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__ccm__hal_1ga9c9285c0a19fbe8a19cce218404cb9c7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE <ref refid="group__nrf__ccm__hal_1ga1d6e97200cb2c3f20d655240ea69d6a5" kindref="member">nrf_ccm_datarate_t</ref></type>
        <definition>NRF_STATIC_INLINE nrf_ccm_datarate_t nrf_ccm_datarate_override_get</definition>
        <argsstring>(NRF_CCM_Type const *p_reg)</argsstring>
        <name>nrf_ccm_datarate_override_get</name>
        <param>
          <type>NRF_CCM_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting data override setting. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Data override setting. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ccm.h" line="1257" column="38" bodyfile="hal/nrf_ccm.h" bodystart="1257" bodyend="1260" declfile="hal/nrf_ccm.h" declline="886" declcolumn="38"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__ccm__hal_1ga6f6b4e485f00eef787e82f4244f828ad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_ccm_adatamask_set</definition>
        <argsstring>(NRF_CCM_Type *p_reg, uint8_t adata_msk)</argsstring>
        <name>nrf_ccm_adatamask_set</name>
        <param>
          <type>NRF_CCM_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>adata_msk</declname>
        </param>
        <briefdescription>
<para>Function for setting the CCM adata mask. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">adata_msk</parametername>
</parameternamelist>
<parameterdescription>
<para>CCM adata mask. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ccm.h" line="1264" column="24" bodyfile="hal/nrf_ccm.h" bodystart="1264" bodyend="1268" declfile="hal/nrf_ccm.h" declline="896" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__ccm__hal_1gad40b804e4d6ad5172d8f97ca1512974b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_ccm_adatamask_get</definition>
        <argsstring>(NRF_CCM_Type const *p_reg)</argsstring>
        <name>nrf_ccm_adatamask_get</name>
        <param>
          <type>NRF_CCM_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting bitmask for the first adata byte. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>CCM adata mask. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ccm.h" line="1270" column="28" bodyfile="hal/nrf_ccm.h" bodystart="1270" bodyend="1273" declfile="hal/nrf_ccm.h" declline="906" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__ccm__hal_1gad300d56c4bc2759bac1a4ee01f43b2d7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_ccm_headermask_set</definition>
        <argsstring>(NRF_CCM_Type *p_reg, uint8_t header_msk)</argsstring>
        <name>nrf_ccm_headermask_set</name>
        <param>
          <type>NRF_CCM_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>header_msk</declname>
        </param>
        <briefdescription>
<para>Function for setting the CCM header mask. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">header_msk</parametername>
</parameternamelist>
<parameterdescription>
<para>CCM header mask. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ccm.h" line="1277" column="24" bodyfile="hal/nrf_ccm.h" bodystart="1277" bodyend="1281" declfile="hal/nrf_ccm.h" declline="916" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__ccm__hal_1gac2a132d0cee9554fafe9f30655496ce0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_ccm_headermask_get</definition>
        <argsstring>(NRF_CCM_Type const *p_reg)</argsstring>
        <name>nrf_ccm_headermask_get</name>
        <param>
          <type>NRF_CCM_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting the bitmask for packet header (S0) before MIC generation/authentication. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>CCM header mask. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ccm.h" line="1283" column="28" bodyfile="hal/nrf_ccm.h" bodystart="1283" bodyend="1286" declfile="hal/nrf_ccm.h" declline="927" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__ccm__hal_1gab0026e02d14e66216a11351b840fc179" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_ccm_subscribe_set</definition>
        <argsstring>(NRF_CCM_Type *p_reg, nrf_ccm_task_t task, uint8_t channel)</argsstring>
        <name>nrf_ccm_subscribe_set</name>
        <param>
          <type>NRF_CCM_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__ccm__hal_1ga2dede4b5a487f5846c0c27a00ecff430" kindref="member">nrf_ccm_task_t</ref></type>
          <declname>task</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>channel</declname>
        </param>
        <briefdescription>
<para>Function for setting the subscribe configuration for a given CCM task. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">task</parametername>
</parameternamelist>
<parameterdescription>
<para>Task for which to set the configuration. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">channel</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel through which to subscribe events. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ccm.h" line="939" column="24" declfile="hal/nrf_ccm.h" declline="939" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__ccm__hal_1ga0f8b230349815c215e379b28312c7d57" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_ccm_subscribe_clear</definition>
        <argsstring>(NRF_CCM_Type *p_reg, nrf_ccm_task_t task)</argsstring>
        <name>nrf_ccm_subscribe_clear</name>
        <param>
          <type>NRF_CCM_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__ccm__hal_1ga2dede4b5a487f5846c0c27a00ecff430" kindref="member">nrf_ccm_task_t</ref></type>
          <declname>task</declname>
        </param>
        <briefdescription>
<para>Function for clearing the subscribe configuration for a given CCM task. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">task</parametername>
</parameternamelist>
<parameterdescription>
<para>Task for which to clear the configuration. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ccm.h" line="950" column="24" declfile="hal/nrf_ccm.h" declline="950" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__ccm__hal_1gacd3ff8fbbcf7de7bf01be1ea5d11d930" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_ccm_publish_set</definition>
        <argsstring>(NRF_CCM_Type *p_reg, nrf_ccm_event_t event, uint8_t channel)</argsstring>
        <name>nrf_ccm_publish_set</name>
        <param>
          <type>NRF_CCM_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__ccm__hal_1ga9de429cccef1f7a1e1dc63fe5563aa77" kindref="member">nrf_ccm_event_t</ref></type>
          <declname>event</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>channel</declname>
        </param>
        <briefdescription>
<para>Function for setting the publish configuration for a given CCM event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event for which to set the configuration. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">channel</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel through which to publish the event. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ccm.h" line="961" column="24" declfile="hal/nrf_ccm.h" declline="961" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__ccm__hal_1ga1180502c12ce4c876b2fd890d7710d7f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_ccm_publish_clear</definition>
        <argsstring>(NRF_CCM_Type *p_reg, nrf_ccm_event_t event)</argsstring>
        <name>nrf_ccm_publish_clear</name>
        <param>
          <type>NRF_CCM_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__ccm__hal_1ga9de429cccef1f7a1e1dc63fe5563aa77" kindref="member">nrf_ccm_event_t</ref></type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>Function for clearing the publish configuration for a given CCM event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event for which to clear the configuration. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ccm.h" line="972" column="24" declfile="hal/nrf_ccm.h" declline="972" declcolumn="24"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2018<sp/>-<sp/>2024,<sp/>Nordic<sp/>Semiconductor<sp/>ASA</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>All<sp/>rights<sp/>reserved.</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>SPDX-License-Identifier:<sp/>BSD-3-Clause</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions<sp/>are<sp/>met:</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>1.<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright<sp/>notice,<sp/>this</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>2.<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the<sp/>distribution.</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/>3.<sp/>Neither<sp/>the<sp/>name<sp/>of<sp/>the<sp/>copyright<sp/>holder<sp/>nor<sp/>the<sp/>names<sp/>of<sp/>its</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>contributors<sp/>may<sp/>be<sp/>used<sp/>to<sp/>endorse<sp/>or<sp/>promote<sp/>products<sp/>derived<sp/>from<sp/>this</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>software<sp/>without<sp/>specific<sp/>prior<sp/>written<sp/>permission.</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>COPYRIGHT<sp/>HOLDERS<sp/>AND<sp/>CONTRIBUTORS<sp/>&quot;AS<sp/>IS&quot;</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/>AND<sp/>ANY<sp/>EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>THE</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*<sp/>ARE<sp/>DISCLAIMED.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>COPYRIGHT<sp/>HOLDER<sp/>OR<sp/>CONTRIBUTORS<sp/>BE</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,<sp/>SPECIAL,<sp/>EXEMPLARY,<sp/>OR</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>PROCUREMENT<sp/>OF</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>*<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,<sp/>DATA,<sp/>OR<sp/>PROFITS;<sp/>OR<sp/>BUSINESS</highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/>*<sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY<sp/>THEORY<sp/>OF<sp/>LIABILITY,<sp/>WHETHER<sp/>IN</highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/>*<sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR<sp/>OTHERWISE)</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/>*<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE<sp/>OF<sp/>THIS<sp/>SOFTWARE,<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/>*<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight></codeline>
<codeline lineno="32"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>NRF_CCM_H__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_CCM_H__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;nrfx.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>EASYVDMA_PRESENT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;helpers/nrf_vdma.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="46"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="47"><highlight class="comment"><sp/>*<sp/>@defgroup<sp/>nrf_ccm_hal<sp/>AES<sp/>CCM<sp/>HAL</highlight></codeline>
<codeline lineno="48"><highlight class="comment"><sp/>*<sp/>@{</highlight></codeline>
<codeline lineno="49"><highlight class="comment"><sp/>*<sp/>@ingroup<sp/>nrf_ccm</highlight></codeline>
<codeline lineno="50"><highlight class="comment"><sp/>*<sp/>@brief<sp/><sp/><sp/>Hardware<sp/>access<sp/>layer<sp/>for<sp/>managing<sp/>the<sp/>AES<sp/>CCM<sp/>peripheral.</highlight></codeline>
<codeline lineno="51"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(CCM_TASKS_KSGEN_TASKS_KSGEN_Msk)<sp/>||<sp/>defined(NRF51)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="54"><highlight class="comment">/**<sp/>@brief<sp/>Presence<sp/>of<sp/>the<sp/>KSGEN<sp/>task.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_CCM_HAS_TASK_KSGEN<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_CCM_HAS_TASK_KSGEN<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(CCM_TASKS_CRYPT_TASKS_CRYPT_Msk)<sp/>||<sp/>defined(NRF51)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="61"><highlight class="comment">/**<sp/>@brief<sp/>Presence<sp/>of<sp/>the<sp/>CRYPT<sp/>task.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_CCM_HAS_TASK_CRYPT<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_CCM_HAS_TASK_CRYPT<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(CCM_TASKS_START_TASKS_START_Msk)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="68"><highlight class="comment">/**<sp/>@brief<sp/>Presence<sp/>of<sp/>the<sp/>START<sp/>task.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_CCM_HAS_TASK_START<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_CCM_HAS_TASK_START<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(CCM_TASKS_RATEOVERRIDE_TASKS_RATEOVERRIDE_Msk)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="75"><highlight class="comment">/**<sp/>@brief<sp/>Presence<sp/>of<sp/>the<sp/>RATEOVERRIDE<sp/>task.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_CCM_HAS_TASK_RATEOVERRIDE<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_CCM_HAS_TASK_RATEOVERRIDE<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(CCM_EVENTS_ENDKSGEN_EVENTS_ENDKSGEN_Msk)<sp/>||<sp/>defined(CCM_INTENSET_ENDKSGEN_Msk)<sp/>||<sp/>\</highlight></codeline>
<codeline lineno="82"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="83"><highlight class="comment">/**<sp/>@brief<sp/>Presence<sp/>of<sp/>the<sp/>ENDKSGEN<sp/>event.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_CCM_HAS_EVENT_ENDKSGEN<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_CCM_HAS_EVENT_ENDKSGEN<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(CCM_EVENTS_ENDCRYPT_EVENTS_ENDCRYPT_Msk)<sp/>||<sp/>defined(CCM_INTENSET_ENDCRYPT_Msk)<sp/>||<sp/>\</highlight></codeline>
<codeline lineno="90"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="91"><highlight class="comment">/**<sp/>@brief<sp/>Presence<sp/>of<sp/>the<sp/>ENDCRYPT<sp/>event.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_CCM_HAS_EVENT_ENDCRYPT<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_CCM_HAS_EVENT_ENDCRYPT<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(CCM_EVENTS_END_EVENTS_END_Msk)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="98"><highlight class="comment">/**<sp/>@brief<sp/>Presence<sp/>of<sp/>the<sp/>END<sp/>event.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_CCM_HAS_EVENT_END<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_CCM_HAS_EVENT_END<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(CCM_ADATAMASK_ADATAMASK_Msk)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="105"><highlight class="comment">/**<sp/>@brief<sp/>Presence<sp/>of<sp/>the<sp/>ADATAMASK<sp/>register.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_CCM_HAS_ADATAMASK<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_CCM_HAS_ADATAMASK<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(CCM_CNFPTR_CNFPTR_Msk)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="112"><highlight class="comment">/**<sp/>@brief<sp/>Presence<sp/>of<sp/>the<sp/>CNFPTR<sp/>register.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_CCM_HAS_CNFPTR<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_CCM_HAS_CNFPTR<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(CCM_IN_AMOUNT_AMOUNT_Msk)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="119"><highlight class="comment">/**<sp/>@brief<sp/>Presence<sp/>of<sp/>the<sp/>IN.AMOUNT<sp/>register.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_CCM_HAS_IN_AMOUNT<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_CCM_HAS_IN_AMOUNT<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(CCM_OUT_AMOUNT_AMOUNT_Msk)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="126"><highlight class="comment">/**<sp/>@brief<sp/>Presence<sp/>of<sp/>the<sp/>OUT.AMOUNT<sp/>register.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_CCM_HAS_OUT_AMOUNT<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_CCM_HAS_OUT_AMOUNT<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(CCM_RATEOVERRIDE_RATEOVERRIDE_Pos)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="133"><highlight class="comment">/**<sp/>@brief<sp/>Presence<sp/>of<sp/>the<sp/>RATEOVERRIDE<sp/>register.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_CCM_HAS_RATEOVERRIDE<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_CCM_HAS_RATEOVERRIDE<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(CCM_ERRORSTATUS_ERRORSTATUS_Msk)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="140"><highlight class="comment">/**<sp/>@brief<sp/>Presence<sp/>of<sp/>the<sp/>ERRORSTATUS<sp/>register.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_CCM_HAS_ERRORSTATUS<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_CCM_HAS_ERRORSTATUS<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(CCM_MICSTATUS_MICSTATUS_Msk)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="147"><highlight class="comment">/**<sp/>@brief<sp/>Presence<sp/>of<sp/>the<sp/>MICSTATUS<sp/>register.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_CCM_HAS_MICSTATUS<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_CCM_HAS_MICSTATUS<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(CCM_MACSTATUS_MACSTATUS_Msk)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="154"><highlight class="comment">/**<sp/>@brief<sp/>Presence<sp/>of<sp/>the<sp/>MACSTATUS<sp/>register.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_CCM_HAS_MACSTATUS<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_CCM_HAS_MACSTATUS<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(CCM_KEY_VALUE_VALUE_Msk)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="161"><highlight class="comment">/**<sp/>@brief<sp/>Presence<sp/>of<sp/>the<sp/>KEY<sp/>register.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_CCM_HAS_KEY<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_CCM_HAS_KEY<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(CCM_NONCE_VALUE_VALUE_Msk)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="168"><highlight class="comment">/**<sp/>@brief<sp/>Presence<sp/>of<sp/>the<sp/>NONCE<sp/>register.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_CCM_HAS_NONCE<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_CCM_HAS_NONCE<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(CCM_INPTR_INPTR_Msk)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="175"><highlight class="comment">/**<sp/>@brief<sp/>Presence<sp/>of<sp/>the<sp/>INPTR<sp/>register.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_CCM_HAS_INPTR<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_CCM_HAS_INPTR<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(CCM_OUTPTR_OUTPTR_Msk)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="182"><highlight class="comment">/**<sp/>@brief<sp/>Presence<sp/>of<sp/>the<sp/>OUTPTR<sp/>register.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_CCM_HAS_OUTPTR<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_CCM_HAS_OUTPTR<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(CCM_IN_PTR_PTR_Msk)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="189"><highlight class="comment">/**<sp/>@brief<sp/>Presence<sp/>of<sp/>the<sp/>IN.PTR<sp/>register.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_CCM_HAS_IN_PTR<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_CCM_HAS_IN_PTR<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(CCM_OUT_PTR_PTR_Msk)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="196"><highlight class="comment">/**<sp/>@brief<sp/>Presence<sp/>of<sp/>the<sp/>OUT.PTR<sp/>register.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_CCM_HAS_OUT_PTR<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_CCM_HAS_OUT_PTR<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(CCM_SCRATCHPTR_SCRATCHPTR_Msk)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="203"><highlight class="comment">/**<sp/>@brief<sp/>Presence<sp/>of<sp/>the<sp/>SCRATCHPTR<sp/>register.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_CCM_HAS_SCRATCHPTR<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_CCM_HAS_SCRATCHPTR<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(CCM_MAXPACKETSIZE_MAXPACKETSIZE_Pos)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="210"><highlight class="comment">/**<sp/>@brief<sp/>Presence<sp/>of<sp/>the<sp/>MAXPACKETSIZE.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_CCM_HAS_MAXPACKETSIZE<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_CCM_HAS_MAXPACKETSIZE<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(CCM_MODE_MODE_FastDecryption)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="217"><highlight class="comment">/**<sp/>Presence<sp/>of<sp/>AES<sp/>fast<sp/>decrypt<sp/>mode.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_CCM_HAS_MODE_FAST_DECRYPTION<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_CCM_HAS_MODE_FAST_DECRYPTION<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(CCM_MODE_PROTOCOL_Msk)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="224"><highlight class="comment">/**<sp/>@brief<sp/>Presence<sp/>of<sp/>protocol<sp/>and<sp/>packet<sp/>format<sp/>selection.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_CCM_HAS_MODE_PROTOCOL<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_CCM_HAS_MODE_PROTOCOL<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(CCM_MODE_PROTOCOL_Ble)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="231"><highlight class="comment">/**<sp/>@brief<sp/>Presence<sp/>of<sp/>the<sp/>BLE<sp/>packet<sp/>format.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_CCM_HAS_MODE_PROTOCOL_BLE<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_CCM_HAS_MODE_PROTOCOL_BLE<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(CCM_MODE_PROTOCOL_Ieee802154)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="238"><highlight class="comment">/**<sp/>@brief<sp/>Presence<sp/>of<sp/>the<sp/>802.15.4<sp/>packet<sp/>format.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_CCM_HAS_MODE_PROTOCOL_IEEE802154<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_CCM_HAS_MODE_PROTOCOL_IEEE802154<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(CCM_MODE_LENGTH_Msk)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="245"><highlight class="comment">/**<sp/>@brief<sp/>Presence<sp/>of<sp/>the<sp/>packet<sp/>lengh<sp/>configuration.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_CCM_HAS_MODE_LENGTH<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_CCM_HAS_MODE_LENGTH<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(CCM_MODE_DATARATE_125Kbps)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="252"><highlight class="comment">/**<sp/>@brief<sp/>Support<sp/>for<sp/>125<sp/>Kbps<sp/>radio<sp/>data<sp/>rate.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_CCM_HAS_MODE_DATARATE_125KBPS<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_CCM_HAS_MODE_DATARATE_125KBPS<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(!NRF_CCM_HAS_MODE_DATARATE_125KBPS<sp/>&amp;&amp;<sp/>\</highlight></codeline>
<codeline lineno="259"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>defined(CCM_MODE_DATARATE_125Kbit))<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="260"><highlight class="comment">/**<sp/>@brief<sp/>Support<sp/>for<sp/>125<sp/>Kbit<sp/>radio<sp/>data<sp/>rate.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_CCM_HAS_MODE_DATARATE_125KBIT<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_CCM_HAS_MODE_DATARATE_125KBIT<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(CCM_MODE_DATARATE_250Kbit)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="267"><highlight class="comment">/**<sp/>@brief<sp/>Support<sp/>for<sp/>250<sp/>Kbit<sp/>radio<sp/>data<sp/>rate.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_CCM_HAS_MODE_DATARATE_250KBIT<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_CCM_HAS_MODE_DATARATE_250KBIT<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(CCM_MODE_DATARATE_500Kbps)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="274"><highlight class="comment">/**<sp/>@brief<sp/>Support<sp/>for<sp/>500<sp/>Kbps<sp/>radio<sp/>data<sp/>rate.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_CCM_HAS_MODE_DATARATE_500KBPS<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_CCM_HAS_MODE_DATARATE_500KBPS<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(!NRF_CCM_HAS_MODE_DATARATE_500KBPS<sp/>&amp;&amp;<sp/>\</highlight></codeline>
<codeline lineno="281"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>defined(CCM_MODE_DATARATE_500Kbit))<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="282"><highlight class="comment">/**<sp/>@brief<sp/>Support<sp/>for<sp/>500<sp/>Kbit<sp/>radio<sp/>data<sp/>rate.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_CCM_HAS_MODE_DATARATE_500KBIT<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_CCM_HAS_MODE_DATARATE_500KBIT<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(CCM_MODE_DATARATE_4Mbit)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="289"><highlight class="comment">/**<sp/>@brief<sp/>Support<sp/>for<sp/>4<sp/>Mbit<sp/>radio<sp/>data<sp/>rate.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_CCM_HAS_MODE_DATARATE_4MBIT<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_CCM_HAS_MODE_DATARATE_4MBIT<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(CCM_MODE_MACLEN_Msk)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="296"><highlight class="comment">/**<sp/>@brief<sp/>Presence<sp/>of<sp/>the<sp/>CCM<sp/>MAC<sp/>length.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_CCM_HAS_MODE_MACLEN<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_CCM_HAS_MODE_MACLEN<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(CCM_MODE_DATARATE_Pos)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="303"><highlight class="comment">/**<sp/>@brief<sp/>Presence<sp/>of<sp/>the<sp/>radio<sp/>data<sp/>rate<sp/>that<sp/>the<sp/>CCM<sp/>shall<sp/>run<sp/>synchronous<sp/>with.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_CCM_HAS_DATARATE<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_CCM_HAS_DATARATE<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(CCM_HEADERMASK_HEADERMASK_Msk)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="310"><highlight class="comment">/**<sp/>@brief<sp/>Presence<sp/>of<sp/>the<sp/>HEADERMASK<sp/>register.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_CCM_HAS_HEADERMASK<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_CCM_HAS_HEADERMASK<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_CCM_HAS_CNFPTR</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="317"><highlight class="comment">/**<sp/>@brief<sp/>AES<sp/>key<sp/>size.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_CCM_KEY_SIZE<sp/><sp/><sp/><sp/>16</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="319"><highlight class="comment">/**<sp/>@brief<sp/>Initialization<sp/>vector<sp/>size.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_CCM_IV_SIZE<sp/><sp/><sp/><sp/><sp/>8</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="321"><highlight class="comment">/**<sp/>@brief<sp/>Packet<sp/>counter<sp/>configuration<sp/>size.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_CCM_PKTCTR_SIZE<sp/>9</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="324"><highlight class="comment">/**<sp/>@brief<sp/>CCM<sp/>data<sp/>structure.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="325" refid="structnrf__ccm__cnf__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">__PACKED</highlight></codeline>
<codeline lineno="326"><highlight class="normal">{</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>key[<ref refid="group__nrf__ccm__hal_1gaa65eac493abe2950bf0aaab31ed6d814" kindref="member">NRF_CCM_KEY_SIZE</ref>];<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>16-byte<sp/>AES<sp/>key.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>pktctr[<ref refid="group__nrf__ccm__hal_1ga17df5080e63b2276a9f2644e95470286" kindref="member">NRF_CCM_PKTCTR_SIZE</ref>];<sp/></highlight><highlight class="comment">///&lt;<sp/>Packet<sp/>counter<sp/>configuration.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>iv[<ref refid="group__nrf__ccm__hal_1ga74a79145f01afeba8726359dbf571ebf" kindref="member">NRF_CCM_IV_SIZE</ref>];<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>8-byte<sp/>initialization<sp/>vector<sp/>(IV).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal">}<sp/><ref refid="structnrf__ccm__cnf__t" kindref="compound">nrf_ccm_cnf_t</ref>;</highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="333"><highlight class="comment">/**<sp/>@brief<sp/>CCM<sp/>tasks.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal">{</highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_CCM_HAS_TASK_KSGEN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__ccm__hal_1gga2dede4b5a487f5846c0c27a00ecff430a963632466dea23d52ddce71010af0971" kindref="member">NRF_CCM_TASK_KSGEN</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_CCM_Type,<sp/>TASKS_KSGEN),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Start<sp/>generation<sp/>of<sp/>key-stream.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_CCM_HAS_TASK_CRYPT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__ccm__hal_1gga2dede4b5a487f5846c0c27a00ecff430ae971250da7a59c65a7f6408731bc364b" kindref="member">NRF_CCM_TASK_CRYPT</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_CCM_Type,<sp/>TASKS_CRYPT),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Start<sp/>encryption/decryption.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__ccm__hal_1gga2dede4b5a487f5846c0c27a00ecff430a9196c27a96d98e13ff3858a4e90bcb4c" kindref="member">NRF_CCM_TASK_STOP</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_CCM_Type,<sp/>TASKS_STOP),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Stop<sp/>encryption/decryption.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_CCM_HAS_TASK_START</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__ccm__hal_1gga2dede4b5a487f5846c0c27a00ecff430aadf9154d76e74b0e08d25d35d984ebb7" kindref="member">NRF_CCM_TASK_START</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_CCM_Type,<sp/>TASKS_START),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Start<sp/>encryption/decryption.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_CCM_HAS_TASK_RATEOVERRIDE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__ccm__hal_1gga2dede4b5a487f5846c0c27a00ecff430a9d47835d2ceee3e4450493ef71fed59d" kindref="member">NRF_CCM_TASK_RATEOVERRIDE</ref><sp/>=<sp/>offsetof(NRF_CCM_Type,<sp/>TASKS_RATEOVERRIDE),<sp/></highlight><highlight class="comment">///&lt;<sp/>Override<sp/>DATARATE<sp/>setting<sp/>in<sp/>MODE<sp/>register.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal">}<sp/><ref refid="group__nrf__ccm__hal_1ga2dede4b5a487f5846c0c27a00ecff430" kindref="member">nrf_ccm_task_t</ref>;</highlight></codeline>
<codeline lineno="350"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="351"><highlight class="comment">/**<sp/>@brief<sp/>CCM<sp/>events.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal">{</highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_CCM_HAS_EVENT_ENDKSGEN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__ccm__hal_1gga9de429cccef1f7a1e1dc63fe5563aa77ad6a75d343d39205ce1732d4a0e678e13" kindref="member">NRF_CCM_EVENT_ENDKSGEN</ref><sp/><sp/>=<sp/>offsetof(NRF_CCM_Type,<sp/>EVENTS_ENDKSGEN),<sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Keystream<sp/>generation<sp/>complete.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_CCM_HAS_EVENT_ENDCRYPT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__ccm__hal_1gga9de429cccef1f7a1e1dc63fe5563aa77a1c3989671371d7b26626f73826520218" kindref="member">NRF_CCM_EVENT_ENDCRYPT</ref><sp/><sp/>=<sp/>offsetof(NRF_CCM_Type,<sp/>EVENTS_ENDCRYPT),<sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Encrypt/decrypt<sp/>complete.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__ccm__hal_1gga9de429cccef1f7a1e1dc63fe5563aa77ac0dd8115c3f8e282e26af2cb49783d45" kindref="member">NRF_CCM_EVENT_ERROR</ref><sp/><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_CCM_Type,<sp/>EVENTS_ERROR),<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>CCM<sp/>error<sp/>event.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_CCM_HAS_EVENT_END</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__ccm__hal_1gga9de429cccef1f7a1e1dc63fe5563aa77ae925ee1545a1b987ab72a7e8aadc35b8" kindref="member">NRF_CCM_EVENT_END</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_CCM_Type,<sp/>EVENTS_END),<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Encrypt/decrypt<sp/>complete.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal">}<sp/><ref refid="group__nrf__ccm__hal_1ga9de429cccef1f7a1e1dc63fe5563aa77" kindref="member">nrf_ccm_event_t</ref>;</highlight></codeline>
<codeline lineno="365"><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_CCM_HAS_EVENT_ENDKSGEN</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="367"><highlight class="comment">/**<sp/>@brief<sp/>Types<sp/>of<sp/>CCM<sp/>shorts.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal">{</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__ccm__hal_1ggac98b1cb2a24240168775e1e306c1ed07ade1daf0af2c71a3148f6327b3e4c2999" kindref="member">NRF_CCM_SHORT_ENDKSGEN_CRYPT_MASK</ref><sp/>=<sp/>CCM_SHORTS_ENDKSGEN_CRYPT_Msk,<sp/></highlight><highlight class="comment">///&lt;<sp/>Shortcut<sp/>for<sp/>starting<sp/>encryption/decryption<sp/>when<sp/>the<sp/>key-stream<sp/>generation<sp/>is<sp/>complete.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal">}<sp/><ref refid="group__nrf__ccm__hal_1gac98b1cb2a24240168775e1e306c1ed07" kindref="member">nrf_ccm_short_mask_t</ref>;</highlight></codeline>
<codeline lineno="372"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRF_CCM_HAS_EVENT_ENDKSGEN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="374"><highlight class="comment">/**<sp/>@brief<sp/>CCM<sp/>interrupts.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="375"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal">{</highlight></codeline>
<codeline lineno="377"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_CCM_HAS_EVENT_ENDKSGEN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__ccm__hal_1ggaadb9b1cc060488c2ce85c403c463a265ae05a877f606e44e69a171f9261cbd47c" kindref="member">NRF_CCM_INT_ENDKSGEN_MASK</ref><sp/><sp/>=<sp/>CCM_INTENSET_ENDKSGEN_Msk,<sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Interrupt<sp/>on<sp/>ENDKSGEN<sp/>event.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="380"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_CCM_HAS_EVENT_ENDCRYPT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__ccm__hal_1ggaadb9b1cc060488c2ce85c403c463a265af0679cd2f92143f9111fab7b6a50f28c" kindref="member">NRF_CCM_INT_ENDCRYPT_MASK</ref><sp/><sp/>=<sp/>CCM_INTENSET_ENDCRYPT_Msk,<sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Interrupt<sp/>on<sp/>ENDCRYPT<sp/>event.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__ccm__hal_1ggaadb9b1cc060488c2ce85c403c463a265a68d7571388ad5ec246d5a80080a07091" kindref="member">NRF_CCM_INT_ERROR_MASK</ref><sp/><sp/><sp/><sp/><sp/>=<sp/>CCM_INTENSET_ERROR_Msk,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Interrupt<sp/>on<sp/>ERROR<sp/>event.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_CCM_HAS_EVENT_END</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__ccm__hal_1ggaadb9b1cc060488c2ce85c403c463a265a5b371809f783d4fb6e115a573c073a96" kindref="member">NRF_CCM_INT_END_MASK</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>CCM_INTENSET_END_Msk,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Interrupt<sp/>on<sp/>END<sp/>event.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal">}<sp/><ref refid="group__nrf__ccm__hal_1gaadb9b1cc060488c2ce85c403c463a265" kindref="member">nrf_ccm_int_mask_t</ref>;</highlight></codeline>
<codeline lineno="388"><highlight class="normal"></highlight></codeline>
<codeline lineno="389"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_CCM_HAS_ERRORSTATUS</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="390"><highlight class="comment">/**<sp/>@brief<sp/>CCM<sp/>error<sp/>status<sp/>when<sp/>ERROR<sp/>event<sp/>is<sp/>generated.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal">{</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__ccm__hal_1ggacfa3ca60c3a9a6b9775da8de55891e5ba2dd1bae8f04d727f464f206b0eb37815" kindref="member">NRF_CCM_ERROR_NO_ERROR</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>CCM_ERRORSTATUS_ERRORSTATUS_NoError,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>No<sp/>errors<sp/>have<sp/>occurred.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__ccm__hal_1ggacfa3ca60c3a9a6b9775da8de55891e5baaebc12191f6df8e41bdc0d102d17966f" kindref="member">NRF_CCM_ERROR_PREMATURE_INPTR_END</ref><sp/><sp/>=<sp/>CCM_ERRORSTATUS_ERRORSTATUS_PrematureInptrEnd,<sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>End<sp/>of<sp/>INPTR<sp/>job<sp/>list<sp/>before<sp/>CCM<sp/>data<sp/>structure<sp/>was<sp/>read.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__ccm__hal_1ggacfa3ca60c3a9a6b9775da8de55891e5ba86411b37a51403b4636dc64d8268ca72" kindref="member">NRF_CCM_ERROR_PREMATURE_OUTPTR_END</ref><sp/>=<sp/>CCM_ERRORSTATUS_ERRORSTATUS_PrematureOutptrEnd,<sp/></highlight><highlight class="comment">///&lt;<sp/>End<sp/>of<sp/>OUTPTR<sp/>job<sp/>list<sp/>before<sp/>CCM<sp/>data<sp/>structure<sp/>was<sp/>read.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__ccm__hal_1ggacfa3ca60c3a9a6b9775da8de55891e5ba4c0966c6d17e808f2bb4b3120049889d" kindref="member">NRF_CCM_ERROR_ENCRYPTION_TOO_SLOW</ref><sp/><sp/>=<sp/>CCM_ERRORSTATUS_ERRORSTATUS_EncryptionTooSlow,<sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Encryption<sp/>did<sp/>not<sp/>complete<sp/>in<sp/>time.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal">}<sp/><ref refid="group__nrf__ccm__hal_1gacfa3ca60c3a9a6b9775da8de55891e5b" kindref="member">nrf_ccm_error_t</ref>;</highlight></codeline>
<codeline lineno="398"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="400"><highlight class="comment">/**<sp/>@brief<sp/>CCM<sp/>modes<sp/>of<sp/>operation.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal">{</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__ccm__hal_1gga185933f2c5689be81cc9d650565bcd11a656f78f49e10703d7846cdbc27727560" kindref="member">NRF_CCM_MODE_ENCRYPTION</ref><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>CCM_MODE_MODE_Encryption,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Encryption<sp/>mode.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__ccm__hal_1gga185933f2c5689be81cc9d650565bcd11a4d52de2d041a8bf7daa3a7b4e2019ce7" kindref="member">NRF_CCM_MODE_DECRYPTION</ref><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>CCM_MODE_MODE_Decryption,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Decryption<sp/>mode.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_CCM_HAS_MODE_FAST_DECRYPTION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__ccm__hal_1gga185933f2c5689be81cc9d650565bcd11ad8144303b3ff9d3bb6d423306c64fc22" kindref="member">NRF_CCM_MODE_FAST_DECRYPTION</ref><sp/>=<sp/>CCM_MODE_MODE_FastDecryption,<sp/></highlight><highlight class="comment">///&lt;<sp/>Fast<sp/>decryption<sp/>mode.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="408"><highlight class="normal">}<sp/><ref refid="group__nrf__ccm__hal_1ga185933f2c5689be81cc9d650565bcd11" kindref="member">nrf_ccm_mode_t</ref>;</highlight></codeline>
<codeline lineno="409"><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_CCM_HAS_DATARATE</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="411"><highlight class="comment">/**<sp/>@brief<sp/>CCM<sp/>data<sp/>rates.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="normal">{</highlight></codeline>
<codeline lineno="414"><highlight class="normal"></highlight></codeline>
<codeline lineno="415"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_CCM_HAS_MODE_DATARATE_125KBPS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__ccm__hal_1gga1d6e97200cb2c3f20d655240ea69d6a5a4075d59dac85992e79f845bea5939119" kindref="member">NRF_CCM_DATARATE_125K</ref><sp/>=<sp/>CCM_MODE_DATARATE_125Kbps,<sp/></highlight><highlight class="comment">///&lt;<sp/>125<sp/>Kbps.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="417"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>NRF_CCM_HAS_MODE_DATARATE_125KBIT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__ccm__hal_1gga1d6e97200cb2c3f20d655240ea69d6a5a4075d59dac85992e79f845bea5939119" kindref="member">NRF_CCM_DATARATE_125K</ref><sp/>=<sp/>CCM_MODE_DATARATE_125Kbit,<sp/></highlight><highlight class="comment">///&lt;<sp/>125<sp/>Kbps.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="419"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="420"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_CCM_HAS_MODE_DATARATE_250KBIT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__ccm__hal_1gga1d6e97200cb2c3f20d655240ea69d6a5a9380eb3f003bde415820c8c6cf79d42e" kindref="member">NRF_CCM_DATARATE_250K</ref><sp/>=<sp/>CCM_MODE_DATARATE_250Kbit,<sp/></highlight><highlight class="comment">///&lt;<sp/>250<sp/>Kbps.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="423"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_CCM_HAS_MODE_DATARATE_500KBPS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__ccm__hal_1gga1d6e97200cb2c3f20d655240ea69d6a5abd98c8c3e1f89e717a0cc540c76a2519" kindref="member">NRF_CCM_DATARATE_500K</ref><sp/>=<sp/>CCM_MODE_DATARATE_500Kbps,<sp/></highlight><highlight class="comment">///&lt;<sp/>500<sp/>Kbps.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>NRF_CCM_HAS_MODE_DATARATE_500KBIT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__ccm__hal_1gga1d6e97200cb2c3f20d655240ea69d6a5abd98c8c3e1f89e717a0cc540c76a2519" kindref="member">NRF_CCM_DATARATE_500K</ref><sp/>=<sp/>CCM_MODE_DATARATE_500Kbit,<sp/></highlight><highlight class="comment">///&lt;<sp/>500<sp/>Kbit.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="427"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__ccm__hal_1gga1d6e97200cb2c3f20d655240ea69d6a5ae341f05e1f11b2ce06c68ddc5c2a33a4" kindref="member">NRF_CCM_DATARATE_1M</ref><sp/><sp/><sp/>=<sp/>CCM_MODE_DATARATE_1Mbit,<sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>1<sp/>Mbps.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__ccm__hal_1gga1d6e97200cb2c3f20d655240ea69d6a5a942d8bfa56aab8fdea41ec89462e6e93" kindref="member">NRF_CCM_DATARATE_2M</ref><sp/><sp/><sp/>=<sp/>CCM_MODE_DATARATE_2Mbit,<sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>2<sp/>Mbps.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_CCM_HAS_MODE_DATARATE_4MBIT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__ccm__hal_1gga1d6e97200cb2c3f20d655240ea69d6a5acc1328b84090c4387374a6045104ead5" kindref="member">NRF_CCM_DATARATE_4M</ref><sp/><sp/><sp/>=<sp/>CCM_MODE_DATARATE_4Mbit,<sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>4<sp/>Mbps.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="432"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="433"><highlight class="normal">}<sp/><ref refid="group__nrf__ccm__hal_1ga1d6e97200cb2c3f20d655240ea69d6a5" kindref="member">nrf_ccm_datarate_t</ref>;</highlight></codeline>
<codeline lineno="434"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRF_CCM_HAS_DATARATE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="435"><highlight class="normal"></highlight></codeline>
<codeline lineno="436"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_CCM_HAS_MODE_PROTOCOL</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="437"><highlight class="comment">/**<sp/>@brief<sp/>CCM<sp/>protocol<sp/>and<sp/>packet<sp/>format.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="438"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="439"><highlight class="normal">{</highlight></codeline>
<codeline lineno="440"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_CCM_HAS_MODE_PROTOCOL_BLE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__ccm__hal_1ggacc9f2441148c27bbdc146ced8eb37b9baaa2f3f550b52ad06f53108e79fe9f347" kindref="member">NRF_CCM_MODE_PROTOCOL_BLE</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>CCM_MODE_PROTOCOL_Ble,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>BLE<sp/>packet<sp/>format.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="442"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="443"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_CCM_HAS_MODE_PROTOCOL_IEEE802154</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__ccm__hal_1ggacc9f2441148c27bbdc146ced8eb37b9ba5602eb6f96c79bff0a2e3416c8f18111" kindref="member">NRF_CCM_MODE_PROTOCOL_IEEE802154</ref><sp/>=<sp/>CCM_MODE_PROTOCOL_Ieee802154,<sp/></highlight><highlight class="comment">///&lt;<sp/>802.15.4<sp/>packet<sp/>format.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="445"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="446"><highlight class="normal">}<sp/><ref refid="group__nrf__ccm__hal_1gacc9f2441148c27bbdc146ced8eb37b9b" kindref="member">nrf_ccm_protocol_t</ref>;</highlight></codeline>
<codeline lineno="447"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRF_CCM_HAS_MODE_PROTOCOL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="448"><highlight class="normal"></highlight></codeline>
<codeline lineno="449"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_CCM_HAS_MODE_LENGTH</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="450"><highlight class="comment">/**<sp/>@brief<sp/>CCM<sp/>packet<sp/>length<sp/>options.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="451"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="452"><highlight class="normal">{</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__ccm__hal_1gga0168161f5b7fcfe2c8ce01e062d7a7e7a55e5dda4a8402d2ce7845fa2cc622c73" kindref="member">NRF_CCM_LENGTH_DEFAULT</ref><sp/><sp/>=<sp/>CCM_MODE_LENGTH_Default,<sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Default<sp/>length.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__ccm__hal_1gga0168161f5b7fcfe2c8ce01e062d7a7e7a60fd1f50e556dd5b082e8c753c46fdc8" kindref="member">NRF_CCM_LENGTH_EXTENDED</ref><sp/>=<sp/>CCM_MODE_LENGTH_Extended,<sp/></highlight><highlight class="comment">///&lt;<sp/>Extended<sp/>length.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="455"><highlight class="normal">}<sp/><ref refid="group__nrf__ccm__hal_1ga0168161f5b7fcfe2c8ce01e062d7a7e7" kindref="member">nrf_ccm_length_t</ref>;</highlight></codeline>
<codeline lineno="456"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRF_CCM_HAS_MODE_LENGTH</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="457"><highlight class="normal"></highlight></codeline>
<codeline lineno="458"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_CCM_HAS_MODE_MACLEN</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="459"><highlight class="comment">/**<sp/>@brief<sp/>CCM<sp/>MAC<sp/>length.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="460"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="461"><highlight class="normal">{</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__ccm__hal_1ggabec984e48ab599fc40b92b50aca99c6fa85ac004451f07973478cdd1699775f8c" kindref="member">NRF_CCM_MODE_MACLEN_M0</ref><sp/><sp/>=<sp/>CCM_MODE_MACLEN_M0,<sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>0<sp/>bytes.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__ccm__hal_1ggabec984e48ab599fc40b92b50aca99c6fa6cd03d8252695c31b0e38affb8be576b" kindref="member">NRF_CCM_MODE_MACLEN_M4</ref><sp/><sp/>=<sp/>CCM_MODE_MACLEN_M4,<sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>4<sp/>bytes.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__ccm__hal_1ggabec984e48ab599fc40b92b50aca99c6fad9719f2a248cf404c2d26f45aef746ba" kindref="member">NRF_CCM_MODE_MACLEN_M6</ref><sp/><sp/>=<sp/>CCM_MODE_MACLEN_M6,<sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>6<sp/>bytes.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__ccm__hal_1ggabec984e48ab599fc40b92b50aca99c6fa271196bd769fb3a42cdfcf8defa09fe3" kindref="member">NRF_CCM_MODE_MACLEN_M8</ref><sp/><sp/>=<sp/>CCM_MODE_MACLEN_M8,<sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>8<sp/>bytes.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__ccm__hal_1ggabec984e48ab599fc40b92b50aca99c6fa7914e14522ae049627946739b7271394" kindref="member">NRF_CCM_MODE_MACLEN_M10</ref><sp/>=<sp/>CCM_MODE_MACLEN_M10,<sp/></highlight><highlight class="comment">///&lt;<sp/>10<sp/>bytes.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__ccm__hal_1ggabec984e48ab599fc40b92b50aca99c6fa9cfd92a48cde722681a1e3e62e1142a0" kindref="member">NRF_CCM_MODE_MACLEN_M12</ref><sp/>=<sp/>CCM_MODE_MACLEN_M12,<sp/></highlight><highlight class="comment">///&lt;<sp/>12<sp/>bytes.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__ccm__hal_1ggabec984e48ab599fc40b92b50aca99c6fa9d509ec59013296bb0301093836f9fca" kindref="member">NRF_CCM_MODE_MACLEN_M14</ref><sp/>=<sp/>CCM_MODE_MACLEN_M14,<sp/></highlight><highlight class="comment">///&lt;<sp/>14<sp/>bytes.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__ccm__hal_1ggabec984e48ab599fc40b92b50aca99c6fa691a489b3f7c8e6ed3159f2feb729fba" kindref="member">NRF_CCM_MODE_MACLEN_M16</ref><sp/>=<sp/>CCM_MODE_MACLEN_M16,<sp/></highlight><highlight class="comment">///&lt;<sp/>16<sp/>bytes.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="470"><highlight class="normal">}<sp/><ref refid="group__nrf__ccm__hal_1gabec984e48ab599fc40b92b50aca99c6f" kindref="member">nrf_ccm_maclen_t</ref>;</highlight></codeline>
<codeline lineno="471"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRF_CCM_HAS_MODE_MACLEN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="472"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="473"><highlight class="comment">/**<sp/>@brief<sp/>CCM<sp/>configuration.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="474" refid="structnrf__ccm__config__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="475"><highlight class="normal">{</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__ccm__hal_1ga185933f2c5689be81cc9d650565bcd11" kindref="member">nrf_ccm_mode_t</ref><sp/><sp/><sp/><sp/><sp/>mode;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Operation<sp/>mode.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="477"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_CCM_HAS_MODE_PROTOCOL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__ccm__hal_1gacc9f2441148c27bbdc146ced8eb37b9b" kindref="member">nrf_ccm_protocol_t</ref><sp/>protocol;<sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Protocol<sp/>and<sp/>packet<sp/>format.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="479"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="480"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_CCM_HAS_DATARATE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__ccm__hal_1ga1d6e97200cb2c3f20d655240ea69d6a5" kindref="member">nrf_ccm_datarate_t</ref><sp/>datarate;<sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Data<sp/>rate.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="482"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="483"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_CCM_HAS_MODE_LENGTH</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__ccm__hal_1ga0168161f5b7fcfe2c8ce01e062d7a7e7" kindref="member">nrf_ccm_length_t</ref><sp/><sp/><sp/>length;<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Length<sp/>of<sp/>the<sp/>CCM<sp/>packet.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="485"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="486"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_CCM_HAS_MODE_MACLEN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__ccm__hal_1gabec984e48ab599fc40b92b50aca99c6f" kindref="member">nrf_ccm_maclen_t</ref><sp/><sp/><sp/>mac_length;<sp/></highlight><highlight class="comment">///&lt;<sp/>Length<sp/>of<sp/>the<sp/>CCM<sp/>MAC.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="488"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="489"><highlight class="normal">}<sp/><ref refid="structnrf__ccm__config__t" kindref="compound">nrf_ccm_config_t</ref>;</highlight></codeline>
<codeline lineno="490"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="491"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="492"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>activating<sp/>a<sp/>specific<sp/>CCM<sp/>task.</highlight></codeline>
<codeline lineno="493"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="494"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="495"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>task<sp/><sp/>Task<sp/>to<sp/>be<sp/>activated.</highlight></codeline>
<codeline lineno="496"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="497"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__ccm__hal_1ga9a85224f11dfad88732218ebe03f9c7e" kindref="member">nrf_ccm_task_trigger</ref>(NRF_CCM_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__ccm__hal_1ga2dede4b5a487f5846c0c27a00ecff430" kindref="member">nrf_ccm_task_t</ref><sp/>task);</highlight></codeline>
<codeline lineno="499"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="500"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="501"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>the<sp/>address<sp/>of<sp/>a<sp/>specific<sp/>CCM<sp/>task<sp/>register.</highlight></codeline>
<codeline lineno="502"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="503"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="504"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>task<sp/><sp/>Requested<sp/>task.</highlight></codeline>
<codeline lineno="505"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="506"><highlight class="comment"><sp/>*<sp/>@return<sp/>Address<sp/>of<sp/>the<sp/>specified<sp/>task<sp/>register.</highlight></codeline>
<codeline lineno="507"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="508"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__ccm__hal_1gab7220271df70c4ef04d6552f6fbf74de" kindref="member">nrf_ccm_task_address_get</ref>(NRF_CCM_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__ccm__hal_1ga2dede4b5a487f5846c0c27a00ecff430" kindref="member">nrf_ccm_task_t</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>task);</highlight></codeline>
<codeline lineno="510"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="511"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="512"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>clearing<sp/>a<sp/>specific<sp/>CCM<sp/>event.</highlight></codeline>
<codeline lineno="513"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="514"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="515"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>event<sp/>Event<sp/>to<sp/>clear.</highlight></codeline>
<codeline lineno="516"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="517"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__ccm__hal_1gad8be593b9eefbedd85e38151bf5832a1" kindref="member">nrf_ccm_event_clear</ref>(NRF_CCM_Type<sp/>*<sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__ccm__hal_1ga9de429cccef1f7a1e1dc63fe5563aa77" kindref="member">nrf_ccm_event_t</ref><sp/>event);</highlight></codeline>
<codeline lineno="519"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="520"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="521"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>retrieving<sp/>the<sp/>state<sp/>of<sp/>a<sp/>specific<sp/>CCM<sp/>event.</highlight></codeline>
<codeline lineno="522"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="523"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="524"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>event<sp/>Event<sp/>to<sp/>be<sp/>checked.</highlight></codeline>
<codeline lineno="525"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="526"><highlight class="comment"><sp/>*<sp/>@retval<sp/>true<sp/><sp/>The<sp/>event<sp/>has<sp/>been<sp/>generated.</highlight></codeline>
<codeline lineno="527"><highlight class="comment"><sp/>*<sp/>@retval<sp/>false<sp/>The<sp/>event<sp/>has<sp/>not<sp/>been<sp/>generated.</highlight></codeline>
<codeline lineno="528"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="529"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrf__ccm__hal_1gaa2be743c1ef1304bf7c9b6d98ac548c0" kindref="member">nrf_ccm_event_check</ref>(NRF_CCM_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__ccm__hal_1ga9de429cccef1f7a1e1dc63fe5563aa77" kindref="member">nrf_ccm_event_t</ref><sp/><sp/><sp/><sp/><sp/><sp/>event);</highlight></codeline>
<codeline lineno="531"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="532"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="533"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>the<sp/>address<sp/>of<sp/>a<sp/>specific<sp/>CCM<sp/>event<sp/>register.</highlight></codeline>
<codeline lineno="534"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="535"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="536"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>event<sp/>Requested<sp/>event.</highlight></codeline>
<codeline lineno="537"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="538"><highlight class="comment"><sp/>*<sp/>@return<sp/>Address<sp/>of<sp/>the<sp/>specified<sp/>event<sp/>register.</highlight></codeline>
<codeline lineno="539"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="540"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__ccm__hal_1ga5c1679029c4fcf09c3445b170b6ffa19" kindref="member">nrf_ccm_event_address_get</ref>(NRF_CCM_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__ccm__hal_1ga9de429cccef1f7a1e1dc63fe5563aa77" kindref="member">nrf_ccm_event_t</ref><sp/><sp/><sp/><sp/><sp/><sp/>event);</highlight></codeline>
<codeline lineno="542"><highlight class="normal"></highlight></codeline>
<codeline lineno="543"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_CCM_HAS_EVENT_ENDKSGEN</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="544"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="545"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>enabling<sp/>the<sp/>specified<sp/>shortcuts.</highlight></codeline>
<codeline lineno="546"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="547"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="548"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>mask<sp/><sp/>Shortcuts<sp/>to<sp/>be<sp/>enabled.</highlight></codeline>
<codeline lineno="549"><highlight class="comment"><sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="550"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__ccm__hal_1ga79505962cc22e5fb88b8456fd43b4b3d" kindref="member">nrf_ccm_shorts_enable</ref>(NRF_CCM_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/>mask);</highlight></codeline>
<codeline lineno="552"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="553"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="554"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>disabling<sp/>the<sp/>specified<sp/>shortcuts.</highlight></codeline>
<codeline lineno="555"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="556"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="557"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>mask<sp/><sp/>Shortcuts<sp/>to<sp/>be<sp/>disabled.</highlight></codeline>
<codeline lineno="558"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="559"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__ccm__hal_1gae16fcf6c83ad1d93d46fdaa3789dfbf9" kindref="member">nrf_ccm_shorts_disable</ref>(NRF_CCM_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/>mask);</highlight></codeline>
<codeline lineno="561"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="562"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="563"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>the<sp/>specified<sp/>shortcuts.</highlight></codeline>
<codeline lineno="564"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="565"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="566"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>mask<sp/><sp/>Shortcuts<sp/>to<sp/>be<sp/>set.</highlight></codeline>
<codeline lineno="567"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="568"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__ccm__hal_1ga7bb97ad8b7a96d5f1b4c6286da79ba80" kindref="member">nrf_ccm_shorts_set</ref>(NRF_CCM_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/>mask);</highlight></codeline>
<codeline lineno="570"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRF_CCM_HAS_EVENT_ENDKSGEN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="571"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="572"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="573"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>enabling<sp/>specified<sp/>interrupts.</highlight></codeline>
<codeline lineno="574"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="575"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="576"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>mask<sp/><sp/>Mask<sp/>of<sp/>interrupts<sp/>to<sp/>be<sp/>enabled.</highlight></codeline>
<codeline lineno="577"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Use<sp/>@ref<sp/>nrf_ccm_int_mask_t<sp/>values<sp/>for<sp/>bit<sp/>masking.</highlight></codeline>
<codeline lineno="578"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="579"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__ccm__hal_1gae6cdb42da4118ce6a51568699564344a" kindref="member">nrf_ccm_int_enable</ref>(NRF_CCM_Type<sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>mask);</highlight></codeline>
<codeline lineno="580"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="581"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="582"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>disabling<sp/>specified<sp/>interrupts.</highlight></codeline>
<codeline lineno="583"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="584"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="585"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>mask<sp/><sp/>Mask<sp/>of<sp/>interrupts<sp/>to<sp/>be<sp/>disabled.</highlight></codeline>
<codeline lineno="586"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Use<sp/>@ref<sp/>nrf_ccm_int_mask_t<sp/>values<sp/>for<sp/>bit<sp/>masking.</highlight></codeline>
<codeline lineno="587"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="588"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__ccm__hal_1ga2b494a0518dd061b247ff341be45b025" kindref="member">nrf_ccm_int_disable</ref>(NRF_CCM_Type<sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>mask);</highlight></codeline>
<codeline lineno="589"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="590"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="591"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>checking<sp/>if<sp/>the<sp/>specified<sp/>interrupts<sp/>are<sp/>enabled.</highlight></codeline>
<codeline lineno="592"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="593"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="594"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>mask<sp/><sp/>Mask<sp/>of<sp/>interrupts<sp/>to<sp/>be<sp/>checked.</highlight></codeline>
<codeline lineno="595"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Use<sp/>@ref<sp/>nrf_ccm_int_mask_t<sp/>values<sp/>for<sp/>bit<sp/>masking.</highlight></codeline>
<codeline lineno="596"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="597"><highlight class="comment"><sp/>*<sp/>@return<sp/>Mask<sp/>of<sp/>enabled<sp/>interrupts.</highlight></codeline>
<codeline lineno="598"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="599"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__ccm__hal_1ga8867c93af39791438608b49d634597b7" kindref="member">nrf_ccm_int_enable_check</ref>(NRF_CCM_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>mask);</highlight></codeline>
<codeline lineno="600"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="601"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="602"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>enabling<sp/>the<sp/>CCM<sp/>peripheral.</highlight></codeline>
<codeline lineno="603"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="604"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="605"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="606"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__ccm__hal_1ga93606d4a5a315ae323c80bf1a0602940" kindref="member">nrf_ccm_enable</ref>(NRF_CCM_Type<sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="607"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="608"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="609"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>disabling<sp/>the<sp/>CCM<sp/>peripheral.</highlight></codeline>
<codeline lineno="610"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="611"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="612"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="613"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__ccm__hal_1gaf4b80365bac2fb3d21fa0b92e5d25650" kindref="member">nrf_ccm_disable</ref>(NRF_CCM_Type<sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="614"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="615"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="616"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>the<sp/>CCM<sp/>peripheral<sp/>configuration.</highlight></codeline>
<codeline lineno="617"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="618"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="619"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_config<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>with<sp/>configuration<sp/>to<sp/>be<sp/>set.</highlight></codeline>
<codeline lineno="620"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="621"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__ccm__hal_1gac253c1936f52f294f7429f5e6d29741b" kindref="member">nrf_ccm_configure</ref>(NRF_CCM_Type<sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structnrf__ccm__config__t" kindref="compound">nrf_ccm_config_t</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_config);</highlight></codeline>
<codeline lineno="623"><highlight class="normal"></highlight></codeline>
<codeline lineno="624"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_CCM_HAS_MAXPACKETSIZE</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="625"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="626"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>the<sp/>length<sp/>of<sp/>key-stream<sp/>generated</highlight></codeline>
<codeline lineno="627"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>when<sp/>the<sp/>packet<sp/>length<sp/>is<sp/>configured<sp/>as<sp/>extended.</highlight></codeline>
<codeline lineno="628"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="629"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="630"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>size<sp/><sp/>Maximum<sp/>length<sp/>of<sp/>the<sp/>key-stream.</highlight></codeline>
<codeline lineno="631"><highlight class="comment"><sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="632"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__ccm__hal_1ga87e501bd771ea42c4c5fa1619b7479f9" kindref="member">nrf_ccm_maxpacketsize_set</ref>(NRF_CCM_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>size);</highlight></codeline>
<codeline lineno="634"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRF_CCM_HAS_MAXPACKETSIZE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="635"><highlight class="normal"></highlight></codeline>
<codeline lineno="636"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_CCM_HAS_MICSTATUS</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="637"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="638"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>the<sp/>MIC<sp/>check<sp/>result.</highlight></codeline>
<codeline lineno="639"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="640"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="641"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="642"><highlight class="comment"><sp/>*<sp/>@retval<sp/>true<sp/><sp/>The<sp/>MIC<sp/>check<sp/>passed.</highlight></codeline>
<codeline lineno="643"><highlight class="comment"><sp/>*<sp/>@retval<sp/>false<sp/>The<sp/>MIC<sp/>check<sp/>failed.</highlight></codeline>
<codeline lineno="644"><highlight class="comment"><sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="645"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrf__ccm__hal_1ga100ec36cc4babc6c80f056c32048b863" kindref="member">nrf_ccm_micstatus_get</ref>(NRF_CCM_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="646"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRF_CCM_HAS_MICSTATUS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="647"><highlight class="normal"></highlight></codeline>
<codeline lineno="648"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_CCM_HAS_MACSTATUS</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="649"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="650"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>the<sp/>MAC<sp/>check<sp/>result.</highlight></codeline>
<codeline lineno="651"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="652"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="653"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="654"><highlight class="comment"><sp/>*<sp/>@retval<sp/>true<sp/><sp/>The<sp/>MAC<sp/>check<sp/>passed.</highlight></codeline>
<codeline lineno="655"><highlight class="comment"><sp/>*<sp/>@retval<sp/>false<sp/>The<sp/>MAC<sp/>check<sp/>failed.</highlight></codeline>
<codeline lineno="656"><highlight class="comment"><sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="657"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrf__ccm__hal_1gaa6b520cc38cf5e6c1e2d05cadde5f3a5" kindref="member">nrf_ccm_macstatus_get</ref>(NRF_CCM_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="658"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRF_CCM_HAS_MACSTATUS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="659"><highlight class="normal"></highlight></codeline>
<codeline lineno="660"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_CCM_HAS_ERRORSTATUS</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="661"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="662"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>the<sp/>error<sp/>status<sp/>when<sp/>ERROR<sp/>event<sp/>is<sp/>generated.</highlight></codeline>
<codeline lineno="663"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="664"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="665"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="666"><highlight class="comment"><sp/>*<sp/>@retval<sp/>Error<sp/>status<sp/>when<sp/>the<sp/>ERROR<sp/>event<sp/>is<sp/>generated.</highlight></codeline>
<codeline lineno="667"><highlight class="comment"><sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="668"><highlight class="normal">NRF_STATIC_INLINE<sp/><ref refid="group__nrf__ccm__hal_1gacfa3ca60c3a9a6b9775da8de55891e5b" kindref="member">nrf_ccm_error_t</ref><sp/><ref refid="group__nrf__ccm__hal_1ga8d9d0175ad11447cd00eb82f229bec53" kindref="member">nrf_ccm_errorstatus_get</ref>(NRF_CCM_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="669"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRF_CCM_HAS_ERRORSTATUS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="670"><highlight class="normal"></highlight></codeline>
<codeline lineno="671"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_CCM_HAS_CNFPTR</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="672"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="673"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>the<sp/>pointer<sp/>to<sp/>the<sp/>data<sp/>structure</highlight></codeline>
<codeline lineno="674"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>holding<sp/>the<sp/>AES<sp/>key<sp/>and<sp/>the<sp/>CCM<sp/>NONCE<sp/>vector.</highlight></codeline>
<codeline lineno="675"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="676"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="677"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_data<sp/>Pointer<sp/>to<sp/>the<sp/>data<sp/>structure.</highlight></codeline>
<codeline lineno="678"><highlight class="comment"><sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="679"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__ccm__hal_1gac5572ede6ba2c649cad86d4d82f14ceb" kindref="member">nrf_ccm_cnfptr_set</ref>(NRF_CCM_Type<sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structnrf__ccm__cnf__t" kindref="compound">nrf_ccm_cnf_t</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_data);</highlight></codeline>
<codeline lineno="681"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="682"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="683"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>the<sp/>pointer<sp/>to<sp/>the<sp/>data<sp/>structure</highlight></codeline>
<codeline lineno="684"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>holding<sp/>the<sp/>AES<sp/>key<sp/>and<sp/>the<sp/>CCM<sp/>NONCE<sp/>vector.</highlight></codeline>
<codeline lineno="685"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="686"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="687"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="688"><highlight class="comment"><sp/>*<sp/>@return<sp/>Pointer<sp/>to<sp/>the<sp/>data<sp/>structure.</highlight></codeline>
<codeline lineno="689"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="690"><highlight class="normal">NRF_STATIC_INLINE<sp/><ref refid="structnrf__ccm__cnf__t" kindref="compound">nrf_ccm_cnf_t</ref><sp/>*<sp/><ref refid="group__nrf__ccm__hal_1ga994569698e9e256cac4e648b5e13e4b1" kindref="member">nrf_ccm_cnfptr_get</ref>(NRF_CCM_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="691"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRF_CCM_HAS_CNFPTR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="692"><highlight class="normal"></highlight></codeline>
<codeline lineno="693"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_CCM_HAS_KEY</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="694"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="695"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>the<sp/>AES<sp/>key.</highlight></codeline>
<codeline lineno="696"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="697"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="698"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_key<sp/>Pointer<sp/>to<sp/>the<sp/>AES<sp/>128-bit<sp/>key<sp/>value.<sp/>The<sp/>key<sp/>shall<sp/>be<sp/>stored</highlight></codeline>
<codeline lineno="699"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>in<sp/>big<sp/>endian<sp/>byte<sp/>order.</highlight></codeline>
<codeline lineno="700"><highlight class="comment"><sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="701"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__ccm__hal_1ga14427bead44aa9dc1c2ff39612cce10b" kindref="member">nrf_ccm_key_set</ref>(NRF_CCM_Type<sp/><sp/><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_key);</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="703"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="704"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>the<sp/>AES<sp/>key.</highlight></codeline>
<codeline lineno="705"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="706"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="707"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="708"><highlight class="comment"><sp/>*<sp/>@return<sp/>Pointer<sp/>to<sp/>the<sp/>AES<sp/>128-bit<sp/>key<sp/>value.<sp/>The<sp/>key<sp/>is<sp/>stored<sp/>in<sp/>big<sp/>endian<sp/>byte<sp/>order.</highlight></codeline>
<codeline lineno="709"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="710"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>*<sp/><ref refid="group__nrf__ccm__hal_1gadd022049b1e721301c4213785c0398f5" kindref="member">nrf_ccm_key_get</ref>(NRF_CCM_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="711"><highlight class="normal"></highlight></codeline>
<codeline lineno="712"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRF_CCM_HAS_KEY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="713"><highlight class="normal"></highlight></codeline>
<codeline lineno="714"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_CCM_HAS_NONCE</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="715"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="716"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>the<sp/>AES<sp/>nonce.</highlight></codeline>
<codeline lineno="717"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="718"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="719"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_nonce<sp/>Pointer<sp/>to<sp/>the<sp/>AES<sp/>13-byte<sp/>nonce<sp/>value.<sp/>The<sp/>nonce<sp/>shall<sp/>be<sp/>stored</highlight></codeline>
<codeline lineno="720"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>in<sp/>big<sp/>endian<sp/>byte<sp/>order.</highlight></codeline>
<codeline lineno="721"><highlight class="comment"><sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="722"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__ccm__hal_1ga7e13667c3817900d42952d004d398f54" kindref="member">nrf_ccm_nonce_set</ref>(NRF_CCM_Type<sp/>*<sp/><sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_nonce);</highlight></codeline>
<codeline lineno="724"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="725"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="726"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>the<sp/>AES<sp/>nonce.</highlight></codeline>
<codeline lineno="727"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="728"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="729"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="730"><highlight class="comment"><sp/>*<sp/>@return<sp/>Pointer<sp/>to<sp/>the<sp/>AES<sp/>13-byte<sp/>nonce<sp/>value.<sp/>The<sp/>nonce<sp/>is<sp/>stored<sp/>in<sp/>big<sp/>endian<sp/>byte<sp/>order.</highlight></codeline>
<codeline lineno="731"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="732"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>*<sp/><ref refid="group__nrf__ccm__hal_1gacfff0d73274453b8291b67d247f31f0a" kindref="member">nrf_ccm_nonce_get</ref>(NRF_CCM_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="733"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRF_CCM_HAS_NONCE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="734"><highlight class="normal"></highlight></codeline>
<codeline lineno="735"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_CCM_HAS_IN_AMOUNT</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="736"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="737"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>number<sp/>of<sp/>bytes<sp/>read<sp/>from<sp/>the<sp/>input<sp/>data,</highlight></codeline>
<codeline lineno="738"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>not<sp/>including<sp/>the<sp/>job<sp/>list<sp/>structure.</highlight></codeline>
<codeline lineno="739"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="740"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="741"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="742"><highlight class="comment"><sp/>*<sp/>@return<sp/>Number<sp/>of<sp/>bytes<sp/>read<sp/>from<sp/>the<sp/>input<sp/>data.</highlight></codeline>
<codeline lineno="743"><highlight class="comment"><sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="744"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__ccm__hal_1gaad71c6536c7a1a1d4c5efd5eeb8303cd" kindref="member">nrf_ccm_in_amount_get</ref>(NRF_CCM_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="745"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRF_CCM_HAS_IN_AMOUNT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="746"><highlight class="normal"></highlight></codeline>
<codeline lineno="747"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_CCM_HAS_INPTR</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="748"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="749"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>the<sp/>input<sp/>data<sp/>pointer.</highlight></codeline>
<codeline lineno="750"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="751"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="752"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_data<sp/>Input<sp/>data<sp/>pointer.</highlight></codeline>
<codeline lineno="753"><highlight class="comment"><sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="754"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__ccm__hal_1ga51ba484f77af41054d8b1ec9670359fb" kindref="member">nrf_ccm_inptr_set</ref>(NRF_CCM_Type<sp/>*<sp/><sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_data);</highlight></codeline>
<codeline lineno="756"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="757"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="758"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>the<sp/>input<sp/>data<sp/>pointer.</highlight></codeline>
<codeline lineno="759"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="760"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="761"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="762"><highlight class="comment"><sp/>*<sp/>@return<sp/>Input<sp/>data<sp/>pointer.</highlight></codeline>
<codeline lineno="763"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="764"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/>*<sp/><ref refid="group__nrf__ccm__hal_1ga8cc2b5ffdc3f91c3d90744d6d0c7636e" kindref="member">nrf_ccm_inptr_get</ref>(NRF_CCM_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="765"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRF_CCM_HAS_INPTR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="766"><highlight class="normal"></highlight></codeline>
<codeline lineno="767"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_CCM_HAS_IN_PTR</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="768"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="769"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>the<sp/>pointer<sp/>to<sp/>a<sp/>job<sp/>list<sp/>containing<sp/>unencrypted</highlight></codeline>
<codeline lineno="770"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CCM<sp/>data<sp/>structure<sp/>in<sp/>Encryption<sp/>mode<sp/>or<sp/>encrypted<sp/>CCM<sp/>data<sp/>structure</highlight></codeline>
<codeline lineno="771"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>in<sp/>Decryption<sp/>mode.</highlight></codeline>
<codeline lineno="772"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="773"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="774"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_job<sp/>Pointer<sp/>to<sp/>a<sp/>job<sp/>list.</highlight></codeline>
<codeline lineno="775"><highlight class="comment"><sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="776"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__ccm__hal_1ga7c96e19e88eefd176fbeb9fd85a51297" kindref="member">nrf_ccm_in_ptr_set</ref>(NRF_CCM_Type<sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structnrf__vdma__job__t" kindref="compound">nrf_vdma_job_t</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_job);</highlight></codeline>
<codeline lineno="778"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="779"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="780"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>the<sp/>pointer<sp/>to<sp/>job<sp/>list<sp/>containing<sp/>unencrypted</highlight></codeline>
<codeline lineno="781"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CCM<sp/>data<sp/>structure<sp/>in<sp/>Encryption<sp/>mode<sp/>or<sp/>encrypted<sp/>CCM<sp/>data<sp/>structure</highlight></codeline>
<codeline lineno="782"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>in<sp/>Decryption<sp/>mode.</highlight></codeline>
<codeline lineno="783"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="784"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="785"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="786"><highlight class="comment"><sp/>*<sp/>@return<sp/>Pointer<sp/>to<sp/>a<sp/>job<sp/>list.</highlight></codeline>
<codeline lineno="787"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="788"><highlight class="normal">NRF_STATIC_INLINE<sp/><ref refid="structnrf__vdma__job__t" kindref="compound">nrf_vdma_job_t</ref><sp/>*<sp/><ref refid="group__nrf__ccm__hal_1gabe720cb5f6425542f992debb4a295516" kindref="member">nrf_ccm_in_ptr_get</ref>(NRF_CCM_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="789"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRF_CCM_HAS_IN_PTR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="790"><highlight class="normal"></highlight></codeline>
<codeline lineno="791"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_CCM_HAS_OUTPTR</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="792"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="793"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>the<sp/>output<sp/>data<sp/>pointer.</highlight></codeline>
<codeline lineno="794"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="795"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="796"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_data<sp/>Output<sp/>data<sp/>pointer.</highlight></codeline>
<codeline lineno="797"><highlight class="comment"><sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="798"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__ccm__hal_1ga7c6693fa080426df18618cfaff9b5d34" kindref="member">nrf_ccm_outptr_set</ref>(NRF_CCM_Type<sp/>*<sp/><sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_data);</highlight></codeline>
<codeline lineno="800"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="801"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="802"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>the<sp/>output<sp/>data<sp/>pointer.</highlight></codeline>
<codeline lineno="803"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="804"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="805"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="806"><highlight class="comment"><sp/>*<sp/>@return<sp/>Output<sp/>data<sp/>pointer.</highlight></codeline>
<codeline lineno="807"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="808"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/>*<sp/><ref refid="group__nrf__ccm__hal_1gacd6ce17163e6039d5e8cd9a2f6c2be07" kindref="member">nrf_ccm_outptr_get</ref>(NRF_CCM_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="809"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRF_CCM_HAS_OUTPTR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="810"><highlight class="normal"></highlight></codeline>
<codeline lineno="811"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_CCM_HAS_OUT_PTR</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="812"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="813"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>the<sp/>pointer<sp/>to<sp/>a<sp/>job<sp/>list<sp/>containing<sp/>encrypted</highlight></codeline>
<codeline lineno="814"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CCM<sp/>data<sp/>structure<sp/>in<sp/>Encryption<sp/>mode<sp/>or<sp/>decrypted<sp/>CCM<sp/>data<sp/>structure</highlight></codeline>
<codeline lineno="815"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>in<sp/>Decryption<sp/>mode.</highlight></codeline>
<codeline lineno="816"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="817"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="818"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_job<sp/>Pointer<sp/>to<sp/>a<sp/>job<sp/>list.</highlight></codeline>
<codeline lineno="819"><highlight class="comment"><sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="820"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__ccm__hal_1gaa01ff841d9024351e9aebddfc9ed2b88" kindref="member">nrf_ccm_out_ptr_set</ref>(NRF_CCM_Type<sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structnrf__vdma__job__t" kindref="compound">nrf_vdma_job_t</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_job);</highlight></codeline>
<codeline lineno="822"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="823"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="824"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>the<sp/>pointer<sp/>to<sp/>a<sp/>job<sp/>list<sp/>containing<sp/>encrypted</highlight></codeline>
<codeline lineno="825"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CCM<sp/>data<sp/>structure<sp/>in<sp/>Encryption<sp/>mode<sp/>or<sp/>decrypted<sp/>CCM<sp/>data<sp/>structure</highlight></codeline>
<codeline lineno="826"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>in<sp/>Decryption<sp/>mode.</highlight></codeline>
<codeline lineno="827"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="828"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="829"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="830"><highlight class="comment"><sp/>*<sp/>@return<sp/>Pointer<sp/>to<sp/>the<sp/>job<sp/>list.</highlight></codeline>
<codeline lineno="831"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="832"><highlight class="normal">NRF_STATIC_INLINE<sp/><ref refid="structnrf__vdma__job__t" kindref="compound">nrf_vdma_job_t</ref><sp/>*<sp/><ref refid="group__nrf__ccm__hal_1ga2e758c89d37e3e149b209b7e77124e0b" kindref="member">nrf_ccm_out_ptr_get</ref>(NRF_CCM_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="833"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRF_CCM_HAS_OUT_PTR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="834"><highlight class="normal"></highlight></codeline>
<codeline lineno="835"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_CCM_HAS_OUT_AMOUNT</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="836"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="837"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>number<sp/>of<sp/>bytes<sp/>available<sp/>in<sp/>the<sp/>output<sp/>data,</highlight></codeline>
<codeline lineno="838"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>not<sp/>including<sp/>the<sp/>job<sp/>list<sp/>structure.</highlight></codeline>
<codeline lineno="839"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="840"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="841"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="842"><highlight class="comment"><sp/>*<sp/>@return<sp/>Number<sp/>of<sp/>bytes<sp/>available<sp/>in<sp/>the<sp/>output<sp/>data.</highlight></codeline>
<codeline lineno="843"><highlight class="comment"><sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="844"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__ccm__hal_1gafaf25f90a48bc7dd28b3ce9dc9874e67" kindref="member">nrf_ccm_out_amount_get</ref>(NRF_CCM_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="845"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRF_CCM_HAS_OUT_AMOUNT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="846"><highlight class="normal"></highlight></codeline>
<codeline lineno="847"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_CCM_HAS_SCRATCHPTR</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="848"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="849"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>the<sp/>pointer<sp/>to<sp/>the<sp/>scratch<sp/>area<sp/>used<sp/>for</highlight></codeline>
<codeline lineno="850"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>temporary<sp/>storage.</highlight></codeline>
<codeline lineno="851"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="852"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="853"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_area<sp/>Pointer<sp/>to<sp/>the<sp/>scratch<sp/>area.</highlight></codeline>
<codeline lineno="854"><highlight class="comment"><sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="855"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__ccm__hal_1gaef8cf688fefc45e1b78db80d14d9580d" kindref="member">nrf_ccm_scratchptr_set</ref>(NRF_CCM_Type<sp/>*<sp/><sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="856"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_area);</highlight></codeline>
<codeline lineno="857"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="858"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="859"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>the<sp/>pointer<sp/>to<sp/>the<sp/>scratch<sp/>area.</highlight></codeline>
<codeline lineno="860"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="861"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="862"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="863"><highlight class="comment"><sp/>*<sp/>@return<sp/>Pointer<sp/>to<sp/>the<sp/>scratch<sp/>area.</highlight></codeline>
<codeline lineno="864"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="865"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/>*<sp/><ref refid="group__nrf__ccm__hal_1ga9c064c4427178dbf1d125e0f52ef7c7f" kindref="member">nrf_ccm_scratchptr_get</ref>(NRF_CCM_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="866"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRF_CCM_HAS_SCRATCHPTR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="867"><highlight class="normal"></highlight></codeline>
<codeline lineno="868"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_CCM_HAS_RATEOVERRIDE</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="869"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="870"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>the<sp/>data<sp/>rate<sp/>override<sp/>value.</highlight></codeline>
<codeline lineno="871"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="872"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="873"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>datarate<sp/>Override<sp/>value<sp/>to<sp/>be<sp/>applied<sp/>when<sp/>the<sp/>RATEOVERRIDE<sp/>task</highlight></codeline>
<codeline lineno="874"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is<sp/>triggered.</highlight></codeline>
<codeline lineno="875"><highlight class="comment"><sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="876"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__ccm__hal_1gab33d58e47347eef25c2541aecd68a2c2" kindref="member">nrf_ccm_datarate_override_set</ref>(NRF_CCM_Type<sp/>*<sp/><sp/><sp/><sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="877"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__ccm__hal_1ga1d6e97200cb2c3f20d655240ea69d6a5" kindref="member">nrf_ccm_datarate_t</ref><sp/>datarate);</highlight></codeline>
<codeline lineno="878"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="879"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="880"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>data<sp/>override<sp/>setting.</highlight></codeline>
<codeline lineno="881"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="882"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="883"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="884"><highlight class="comment"><sp/>*<sp/>@return<sp/>Data<sp/>override<sp/>setting.</highlight></codeline>
<codeline lineno="885"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="886"><highlight class="normal">NRF_STATIC_INLINE<sp/><ref refid="group__nrf__ccm__hal_1ga1d6e97200cb2c3f20d655240ea69d6a5" kindref="member">nrf_ccm_datarate_t</ref><sp/><ref refid="group__nrf__ccm__hal_1ga9c9285c0a19fbe8a19cce218404cb9c7" kindref="member">nrf_ccm_datarate_override_get</ref>(NRF_CCM_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="887"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRF_CCM_HAS_RATEOVERRIDE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="888"><highlight class="normal"></highlight></codeline>
<codeline lineno="889"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_CCM_HAS_ADATAMASK</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="890"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="891"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>the<sp/>CCM<sp/>adata<sp/>mask.</highlight></codeline>
<codeline lineno="892"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="893"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="894"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>adata_msk<sp/>CCM<sp/>adata<sp/>mask.</highlight></codeline>
<codeline lineno="895"><highlight class="comment"><sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="896"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__ccm__hal_1ga6f6b4e485f00eef787e82f4244f828ad" kindref="member">nrf_ccm_adatamask_set</ref>(NRF_CCM_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="897"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>adata_msk);</highlight></codeline>
<codeline lineno="898"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="899"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="900"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>bitmask<sp/>for<sp/>the<sp/>first<sp/>adata<sp/>byte.</highlight></codeline>
<codeline lineno="901"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="902"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="903"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="904"><highlight class="comment"><sp/>*<sp/>@return<sp/>CCM<sp/>adata<sp/>mask.</highlight></codeline>
<codeline lineno="905"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="906"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__ccm__hal_1gad40b804e4d6ad5172d8f97ca1512974b" kindref="member">nrf_ccm_adatamask_get</ref>(NRF_CCM_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="907"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRF_CCM_HAS_ADATAMASK</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="908"><highlight class="normal"></highlight></codeline>
<codeline lineno="909"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_CCM_HAS_HEADERMASK</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="910"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="911"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>the<sp/>CCM<sp/>header<sp/>mask.</highlight></codeline>
<codeline lineno="912"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="913"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/><sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="914"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>header_msk<sp/>CCM<sp/>header<sp/>mask.</highlight></codeline>
<codeline lineno="915"><highlight class="comment"><sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="916"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__ccm__hal_1gad300d56c4bc2759bac1a4ee01f43b2d7" kindref="member">nrf_ccm_headermask_set</ref>(NRF_CCM_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="917"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>header_msk);</highlight></codeline>
<codeline lineno="918"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="919"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="920"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>the<sp/>bitmask<sp/>for<sp/>packet<sp/>header<sp/>(S0)<sp/>before<sp/>MIC</highlight></codeline>
<codeline lineno="921"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>generation/authentication.</highlight></codeline>
<codeline lineno="922"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="923"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="924"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="925"><highlight class="comment"><sp/>*<sp/>@return<sp/>CCM<sp/>header<sp/>mask.</highlight></codeline>
<codeline lineno="926"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="927"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__ccm__hal_1gac2a132d0cee9554fafe9f30655496ce0" kindref="member">nrf_ccm_headermask_get</ref>(NRF_CCM_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="928"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRF_CCM_HAS_HEADERMASK</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="929"><highlight class="normal"></highlight></codeline>
<codeline lineno="930"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(DPPI_PRESENT)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="931"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="932"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>the<sp/>subscribe<sp/>configuration<sp/>for<sp/>a<sp/>given</highlight></codeline>
<codeline lineno="933"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CCM<sp/>task.</highlight></codeline>
<codeline lineno="934"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="935"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="936"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>task<sp/><sp/><sp/><sp/>Task<sp/>for<sp/>which<sp/>to<sp/>set<sp/>the<sp/>configuration.</highlight></codeline>
<codeline lineno="937"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>channel<sp/>Channel<sp/>through<sp/>which<sp/>to<sp/>subscribe<sp/>events.</highlight></codeline>
<codeline lineno="938"><highlight class="comment"><sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="939"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__ccm__hal_1gab0026e02d14e66216a11351b840fc179" kindref="member">nrf_ccm_subscribe_set</ref>(NRF_CCM_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="940"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__ccm__hal_1ga2dede4b5a487f5846c0c27a00ecff430" kindref="member">nrf_ccm_task_t</ref><sp/>task,</highlight></codeline>
<codeline lineno="941"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>channel);</highlight></codeline>
<codeline lineno="942"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="943"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="944"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>clearing<sp/>the<sp/>subscribe<sp/>configuration<sp/>for<sp/>a<sp/>given</highlight></codeline>
<codeline lineno="945"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CCM<sp/>task.</highlight></codeline>
<codeline lineno="946"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="947"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="948"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>task<sp/><sp/>Task<sp/>for<sp/>which<sp/>to<sp/>clear<sp/>the<sp/>configuration.</highlight></codeline>
<codeline lineno="949"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="950"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__ccm__hal_1ga0f8b230349815c215e379b28312c7d57" kindref="member">nrf_ccm_subscribe_clear</ref>(NRF_CCM_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="951"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__ccm__hal_1ga2dede4b5a487f5846c0c27a00ecff430" kindref="member">nrf_ccm_task_t</ref><sp/>task);</highlight></codeline>
<codeline lineno="952"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="953"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="954"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>the<sp/>publish<sp/>configuration<sp/>for<sp/>a<sp/>given</highlight></codeline>
<codeline lineno="955"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CCM<sp/>event.</highlight></codeline>
<codeline lineno="956"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="957"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="958"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>event<sp/><sp/><sp/>Event<sp/>for<sp/>which<sp/>to<sp/>set<sp/>the<sp/>configuration.</highlight></codeline>
<codeline lineno="959"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>channel<sp/>Channel<sp/>through<sp/>which<sp/>to<sp/>publish<sp/>the<sp/>event.</highlight></codeline>
<codeline lineno="960"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="961"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__ccm__hal_1gacd3ff8fbbcf7de7bf01be1ea5d11d930" kindref="member">nrf_ccm_publish_set</ref>(NRF_CCM_Type<sp/>*<sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="962"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__ccm__hal_1ga9de429cccef1f7a1e1dc63fe5563aa77" kindref="member">nrf_ccm_event_t</ref><sp/>event,</highlight></codeline>
<codeline lineno="963"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>channel);</highlight></codeline>
<codeline lineno="964"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="965"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="966"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>clearing<sp/>the<sp/>publish<sp/>configuration<sp/>for<sp/>a<sp/>given</highlight></codeline>
<codeline lineno="967"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CCM<sp/>event.</highlight></codeline>
<codeline lineno="968"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="969"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="970"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>event<sp/>Event<sp/>for<sp/>which<sp/>to<sp/>clear<sp/>the<sp/>configuration.</highlight></codeline>
<codeline lineno="971"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="972"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__ccm__hal_1ga1180502c12ce4c876b2fd890d7710d7f" kindref="member">nrf_ccm_publish_clear</ref>(NRF_CCM_Type<sp/>*<sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="973"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__ccm__hal_1ga9de429cccef1f7a1e1dc63fe5563aa77" kindref="member">nrf_ccm_event_t</ref><sp/>event);</highlight></codeline>
<codeline lineno="974"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>defined(DPPI_PRESENT)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="975"><highlight class="normal"></highlight></codeline>
<codeline lineno="976"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>NRF_DECLARE_ONLY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="977"><highlight class="normal"></highlight></codeline>
<codeline lineno="978"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__ccm__hal_1ga9a85224f11dfad88732218ebe03f9c7e" kindref="member">nrf_ccm_task_trigger</ref>(NRF_CCM_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="979"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__ccm__hal_1ga2dede4b5a487f5846c0c27a00ecff430" kindref="member">nrf_ccm_task_t</ref><sp/>task)</highlight></codeline>
<codeline lineno="980"><highlight class="normal">{</highlight></codeline>
<codeline lineno="981"><highlight class="normal"><sp/><sp/><sp/><sp/>*((</highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint32_t<sp/>*)((uint8_t<sp/>*)p_reg<sp/>+<sp/>(uint32_t)task))<sp/>=<sp/>0x1UL;</highlight></codeline>
<codeline lineno="982"><highlight class="normal">}</highlight></codeline>
<codeline lineno="983"><highlight class="normal"></highlight></codeline>
<codeline lineno="984"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__ccm__hal_1gab7220271df70c4ef04d6552f6fbf74de" kindref="member">nrf_ccm_task_address_get</ref>(NRF_CCM_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="985"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__ccm__hal_1ga2dede4b5a487f5846c0c27a00ecff430" kindref="member">nrf_ccm_task_t</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>task)</highlight></codeline>
<codeline lineno="986"><highlight class="normal">{</highlight></codeline>
<codeline lineno="987"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((uint32_t)p_reg<sp/>+<sp/>(uint32_t)task);</highlight></codeline>
<codeline lineno="988"><highlight class="normal">}</highlight></codeline>
<codeline lineno="989"><highlight class="normal"></highlight></codeline>
<codeline lineno="990"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__ccm__hal_1gad8be593b9eefbedd85e38151bf5832a1" kindref="member">nrf_ccm_event_clear</ref>(NRF_CCM_Type<sp/>*<sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="991"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__ccm__hal_1ga9de429cccef1f7a1e1dc63fe5563aa77" kindref="member">nrf_ccm_event_t</ref><sp/>event)</highlight></codeline>
<codeline lineno="992"><highlight class="normal">{</highlight></codeline>
<codeline lineno="993"><highlight class="normal"><sp/><sp/><sp/><sp/>*((</highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint32_t<sp/>*)((uint8_t<sp/>*)p_reg<sp/>+<sp/>(uint32_t)event))<sp/>=<sp/>0x0UL;</highlight></codeline>
<codeline lineno="994"><highlight class="normal"><sp/><sp/><sp/><sp/>nrf_event_readback((uint8_t<sp/>*)p_reg<sp/>+<sp/>(uint32_t)event);</highlight></codeline>
<codeline lineno="995"><highlight class="normal">}</highlight></codeline>
<codeline lineno="996"><highlight class="normal"></highlight></codeline>
<codeline lineno="997"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrf__ccm__hal_1gaa2be743c1ef1304bf7c9b6d98ac548c0" kindref="member">nrf_ccm_event_check</ref>(NRF_CCM_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="998"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__ccm__hal_1ga9de429cccef1f7a1e1dc63fe5563aa77" kindref="member">nrf_ccm_event_t</ref><sp/><sp/><sp/><sp/><sp/><sp/>event)</highlight></codeline>
<codeline lineno="999"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1000"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>nrf_event_check(p_reg,<sp/>event);</highlight></codeline>
<codeline lineno="1001"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1002"><highlight class="normal"></highlight></codeline>
<codeline lineno="1003"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__ccm__hal_1ga5c1679029c4fcf09c3445b170b6ffa19" kindref="member">nrf_ccm_event_address_get</ref>(NRF_CCM_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="1004"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__ccm__hal_1ga9de429cccef1f7a1e1dc63fe5563aa77" kindref="member">nrf_ccm_event_t</ref><sp/><sp/><sp/><sp/><sp/><sp/>event)</highlight></codeline>
<codeline lineno="1005"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1006"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((uint32_t)p_reg<sp/>+<sp/>(uint32_t)event);</highlight></codeline>
<codeline lineno="1007"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1008"><highlight class="normal"></highlight></codeline>
<codeline lineno="1009"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_CCM_HAS_EVENT_ENDKSGEN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1010"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__ccm__hal_1ga79505962cc22e5fb88b8456fd43b4b3d" kindref="member">nrf_ccm_shorts_enable</ref>(NRF_CCM_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="1011"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/>mask)</highlight></codeline>
<codeline lineno="1012"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1013"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;SHORTS<sp/>|=<sp/>mask;</highlight></codeline>
<codeline lineno="1014"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1015"><highlight class="normal"></highlight></codeline>
<codeline lineno="1016"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__ccm__hal_1gae16fcf6c83ad1d93d46fdaa3789dfbf9" kindref="member">nrf_ccm_shorts_disable</ref>(NRF_CCM_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="1017"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/>mask)</highlight></codeline>
<codeline lineno="1018"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1019"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;SHORTS<sp/>&amp;=<sp/>~(mask);</highlight></codeline>
<codeline lineno="1020"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1021"><highlight class="normal"></highlight></codeline>
<codeline lineno="1022"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__ccm__hal_1ga7bb97ad8b7a96d5f1b4c6286da79ba80" kindref="member">nrf_ccm_shorts_set</ref>(NRF_CCM_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="1023"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/>mask)</highlight></codeline>
<codeline lineno="1024"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1025"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;SHORTS<sp/>=<sp/>mask;</highlight></codeline>
<codeline lineno="1026"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1027"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRF_CCM_HAS_EVENT_ENDKSGEN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1028"><highlight class="normal"></highlight></codeline>
<codeline lineno="1029"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__ccm__hal_1gae6cdb42da4118ce6a51568699564344a" kindref="member">nrf_ccm_int_enable</ref>(NRF_CCM_Type<sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>mask)</highlight></codeline>
<codeline lineno="1030"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1031"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;INTENSET<sp/>=<sp/>mask;</highlight></codeline>
<codeline lineno="1032"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1033"><highlight class="normal"></highlight></codeline>
<codeline lineno="1034"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__ccm__hal_1ga2b494a0518dd061b247ff341be45b025" kindref="member">nrf_ccm_int_disable</ref>(NRF_CCM_Type<sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>mask)</highlight></codeline>
<codeline lineno="1035"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1036"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;INTENCLR<sp/>=<sp/>mask;</highlight></codeline>
<codeline lineno="1037"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1038"><highlight class="normal"></highlight></codeline>
<codeline lineno="1039"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__ccm__hal_1ga8867c93af39791438608b49d634597b7" kindref="member">nrf_ccm_int_enable_check</ref>(NRF_CCM_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>mask)</highlight></codeline>
<codeline lineno="1040"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1041"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p_reg-&gt;INTENSET<sp/>&amp;<sp/>mask;</highlight></codeline>
<codeline lineno="1042"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1043"><highlight class="normal"></highlight></codeline>
<codeline lineno="1044"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__ccm__hal_1ga93606d4a5a315ae323c80bf1a0602940" kindref="member">nrf_ccm_enable</ref>(NRF_CCM_Type<sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="1045"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1046"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;ENABLE<sp/>=<sp/>(CCM_ENABLE_ENABLE_Enabled<sp/>&lt;&lt;<sp/>CCM_ENABLE_ENABLE_Pos);</highlight></codeline>
<codeline lineno="1047"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1048"><highlight class="normal"></highlight></codeline>
<codeline lineno="1049"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__ccm__hal_1gaf4b80365bac2fb3d21fa0b92e5d25650" kindref="member">nrf_ccm_disable</ref>(NRF_CCM_Type<sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="1050"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1051"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;ENABLE<sp/>=<sp/>(CCM_ENABLE_ENABLE_Disabled<sp/>&lt;&lt;<sp/>CCM_ENABLE_ENABLE_Pos);</highlight></codeline>
<codeline lineno="1052"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1053"><highlight class="normal"></highlight></codeline>
<codeline lineno="1054"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__ccm__hal_1gac253c1936f52f294f7429f5e6d29741b" kindref="member">nrf_ccm_configure</ref>(NRF_CCM_Type<sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="1055"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structnrf__ccm__config__t" kindref="compound">nrf_ccm_config_t</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_config)</highlight></codeline>
<codeline lineno="1056"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1057"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;MODE<sp/>=<sp/>(((uint32_t)p_config-&gt;<ref refid="structnrf__ccm__config__t_1a775aeea8ada8b75e271da718f8717da3" kindref="member">mode</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>CCM_MODE_MODE_Pos)<sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline lineno="1058"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_CCM_HAS_MODE_PROTOCOL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1059"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)p_config-&gt;<ref refid="structnrf__ccm__config__t_1ac5ce065a87b15d0f9f5f48c29fe7f19b" kindref="member">protocol</ref><sp/><sp/><sp/>&lt;&lt;<sp/>CCM_MODE_PROTOCOL_Pos)<sp/>|</highlight></codeline>
<codeline lineno="1060"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1061"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_CCM_HAS_DATARATE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1062"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)p_config-&gt;<ref refid="structnrf__ccm__config__t_1a38b00845c7079da9d39c9a357c34474d" kindref="member">datarate</ref><sp/><sp/><sp/>&lt;&lt;<sp/>CCM_MODE_DATARATE_Pos)<sp/>|</highlight></codeline>
<codeline lineno="1063"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1064"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_CCM_HAS_MODE_LENGTH</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1065"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)p_config-&gt;<ref refid="structnrf__ccm__config__t_1a440dd93aecf2ef3e4b1d5b78e08c08f2" kindref="member">length</ref><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>CCM_MODE_LENGTH_Pos)<sp/><sp/><sp/>|</highlight></codeline>
<codeline lineno="1066"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1067"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_CCM_HAS_MODE_MACLEN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1068"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)p_config-&gt;<ref refid="structnrf__ccm__config__t_1a33fc104e8d96c492ae0d3d70a44fc9f8" kindref="member">mac_length</ref><sp/>&lt;&lt;<sp/>CCM_MODE_MACLEN_Pos)<sp/><sp/><sp/>|</highlight></codeline>
<codeline lineno="1069"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1070"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0);</highlight></codeline>
<codeline lineno="1071"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1072"><highlight class="normal"></highlight></codeline>
<codeline lineno="1073"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_CCM_HAS_MAXPACKETSIZE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1074"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__ccm__hal_1ga87e501bd771ea42c4c5fa1619b7479f9" kindref="member">nrf_ccm_maxpacketsize_set</ref>(NRF_CCM_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="1075"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>size)</highlight></codeline>
<codeline lineno="1076"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1077"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__glue_1ga9698a3f6b6bea455d2b54a79e514ee36" kindref="member">NRFX_ASSERT</ref>((size<sp/>&gt;=<sp/>0x1B)<sp/>&amp;&amp;<sp/>(size<sp/>&lt;=<sp/>0xFB));</highlight></codeline>
<codeline lineno="1078"><highlight class="normal"></highlight></codeline>
<codeline lineno="1079"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;MAXPACKETSIZE<sp/>=<sp/>size;</highlight></codeline>
<codeline lineno="1080"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1081"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>defined(NRF_CCM_HAS_MAXPACKETSIZE)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1082"><highlight class="normal"></highlight></codeline>
<codeline lineno="1083"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_CCM_HAS_MICSTATUS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1084"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrf__ccm__hal_1ga100ec36cc4babc6c80f056c32048b863" kindref="member">nrf_ccm_micstatus_get</ref>(NRF_CCM_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="1085"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1086"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">)(p_reg-&gt;MICSTATUS);</highlight></codeline>
<codeline lineno="1087"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1088"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRF_CCM_HAS_MICSTATUS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1089"><highlight class="normal"></highlight></codeline>
<codeline lineno="1090"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_CCM_HAS_MACSTATUS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1091"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrf__ccm__hal_1gaa6b520cc38cf5e6c1e2d05cadde5f3a5" kindref="member">nrf_ccm_macstatus_get</ref>(NRF_CCM_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="1092"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1093"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">)(p_reg-&gt;MACSTATUS);</highlight></codeline>
<codeline lineno="1094"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1095"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRF_CCM_HAS_MACSTATUS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1096"><highlight class="normal"></highlight></codeline>
<codeline lineno="1097"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_CCM_HAS_ERRORSTATUS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1098"><highlight class="normal">NRF_STATIC_INLINE<sp/><ref refid="group__nrf__ccm__hal_1gacfa3ca60c3a9a6b9775da8de55891e5b" kindref="member">nrf_ccm_error_t</ref><sp/><ref refid="group__nrf__ccm__hal_1ga8d9d0175ad11447cd00eb82f229bec53" kindref="member">nrf_ccm_errorstatus_get</ref>(NRF_CCM_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="1099"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1100"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="group__nrf__ccm__hal_1gacfa3ca60c3a9a6b9775da8de55891e5b" kindref="member">nrf_ccm_error_t</ref>)(p_reg-&gt;ERRORSTATUS);</highlight></codeline>
<codeline lineno="1101"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1102"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRF_CCM_HAS_ERRORSTATUS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1103"><highlight class="normal"></highlight></codeline>
<codeline lineno="1104"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_CCM_HAS_CNFPTR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1105"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__ccm__hal_1gac5572ede6ba2c649cad86d4d82f14ceb" kindref="member">nrf_ccm_cnfptr_set</ref>(NRF_CCM_Type<sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="1106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structnrf__ccm__cnf__t" kindref="compound">nrf_ccm_cnf_t</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_data)</highlight></codeline>
<codeline lineno="1107"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1108"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;CNFPTR<sp/>=<sp/>(uint32_t)p_data;</highlight></codeline>
<codeline lineno="1109"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1110"><highlight class="normal"></highlight></codeline>
<codeline lineno="1111"><highlight class="normal">NRF_STATIC_INLINE<sp/><ref refid="structnrf__ccm__cnf__t" kindref="compound">nrf_ccm_cnf_t</ref><sp/>*<sp/><ref refid="group__nrf__ccm__hal_1ga994569698e9e256cac4e648b5e13e4b1" kindref="member">nrf_ccm_cnfptr_get</ref>(NRF_CCM_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="1112"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1113"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(NRF5340_XXAA_NETWORK)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1114"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Apply<sp/>workaround<sp/>for<sp/>anomaly<sp/>10.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1115"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structnrf__ccm__cnf__t" kindref="compound">nrf_ccm_cnf_t</ref><sp/>*)(p_reg-&gt;CNFPTR<sp/>|<sp/>0x01000000);</highlight></codeline>
<codeline lineno="1116"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1117"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structnrf__ccm__cnf__t" kindref="compound">nrf_ccm_cnf_t</ref><sp/>*)(p_reg-&gt;CNFPTR);</highlight></codeline>
<codeline lineno="1118"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRF5340_XXAA_NETWORK</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1119"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1120"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRF_CCM_HAS_CNFPTR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1121"><highlight class="normal"></highlight></codeline>
<codeline lineno="1122"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_CCM_HAS_KEY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1123"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__ccm__hal_1ga14427bead44aa9dc1c2ff39612cce10b" kindref="member">nrf_ccm_key_set</ref>(NRF_CCM_Type<sp/><sp/><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="1124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_key)</highlight></codeline>
<codeline lineno="1125"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1126"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__glue_1ga9698a3f6b6bea455d2b54a79e514ee36" kindref="member">NRFX_ASSERT</ref>(p_key);</highlight></codeline>
<codeline lineno="1127"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint8_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>CCM_KEY_VALUE_MaxCount;<sp/>i++)</highlight></codeline>
<codeline lineno="1128"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_reg-&gt;KEY.VALUE[i]<sp/>=<sp/>p_key[i];</highlight></codeline>
<codeline lineno="1130"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1131"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1132"><highlight class="normal"></highlight></codeline>
<codeline lineno="1133"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>*<sp/><ref refid="group__nrf__ccm__hal_1gadd022049b1e721301c4213785c0398f5" kindref="member">nrf_ccm_key_get</ref>(NRF_CCM_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="1134"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1135"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(uint32_t<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>*)(p_reg-&gt;KEY.VALUE);</highlight></codeline>
<codeline lineno="1136"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1137"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRF_CCM_HAS_KEY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1138"><highlight class="normal"></highlight></codeline>
<codeline lineno="1139"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_CCM_HAS_NONCE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1140"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__ccm__hal_1ga7e13667c3817900d42952d004d398f54" kindref="member">nrf_ccm_nonce_set</ref>(NRF_CCM_Type<sp/>*<sp/><sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="1141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_nonce)</highlight></codeline>
<codeline lineno="1142"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1143"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__glue_1ga9698a3f6b6bea455d2b54a79e514ee36" kindref="member">NRFX_ASSERT</ref>(p_nonce);</highlight></codeline>
<codeline lineno="1144"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint8_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>CCM_NONCE_VALUE_MaxCount;<sp/>i++)</highlight></codeline>
<codeline lineno="1145"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_reg-&gt;NONCE.VALUE[i]<sp/>=<sp/>p_nonce[i];</highlight></codeline>
<codeline lineno="1147"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1148"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1149"><highlight class="normal"></highlight></codeline>
<codeline lineno="1150"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>*<sp/><ref refid="group__nrf__ccm__hal_1gacfff0d73274453b8291b67d247f31f0a" kindref="member">nrf_ccm_nonce_get</ref>(NRF_CCM_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="1151"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1152"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(uint32_t<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>*)(p_reg-&gt;NONCE.VALUE);</highlight></codeline>
<codeline lineno="1153"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1154"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRF_CCM_HAS_NONCE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1155"><highlight class="normal"></highlight></codeline>
<codeline lineno="1156"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_CCM_HAS_IN_AMOUNT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1157"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__ccm__hal_1gaad71c6536c7a1a1d4c5efd5eeb8303cd" kindref="member">nrf_ccm_in_amount_get</ref>(NRF_CCM_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="1158"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1159"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p_reg-&gt;IN.AMOUNT;</highlight></codeline>
<codeline lineno="1160"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1161"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRF_CCM_HAS_IN_AMOUNT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1162"><highlight class="normal"></highlight></codeline>
<codeline lineno="1163"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_CCM_HAS_OUT_AMOUNT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1164"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__ccm__hal_1gafaf25f90a48bc7dd28b3ce9dc9874e67" kindref="member">nrf_ccm_out_amount_get</ref>(NRF_CCM_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="1165"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1166"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p_reg-&gt;OUT.AMOUNT;</highlight></codeline>
<codeline lineno="1167"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1168"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRF_CCM_HAS_OUT_AMOUNT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1169"><highlight class="normal"></highlight></codeline>
<codeline lineno="1170"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_CCM_HAS_INPTR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1171"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__ccm__hal_1ga51ba484f77af41054d8b1ec9670359fb" kindref="member">nrf_ccm_inptr_set</ref>(NRF_CCM_Type<sp/>*<sp/><sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="1172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_data)</highlight></codeline>
<codeline lineno="1173"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1174"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;INPTR<sp/>=<sp/>(uint32_t)p_data;</highlight></codeline>
<codeline lineno="1175"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1176"><highlight class="normal"></highlight></codeline>
<codeline lineno="1177"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/>*<sp/><ref refid="group__nrf__ccm__hal_1ga8cc2b5ffdc3f91c3d90744d6d0c7636e" kindref="member">nrf_ccm_inptr_get</ref>(NRF_CCM_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="1178"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1179"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(NRF5340_XXAA_NETWORK)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1180"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Apply<sp/>workaround<sp/>for<sp/>anomaly<sp/>10.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1181"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(uint32_t<sp/>*)(p_reg-&gt;INPTR<sp/>|<sp/>0x01000000);</highlight></codeline>
<codeline lineno="1182"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1183"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(uint32_t<sp/>*)(p_reg-&gt;INPTR);</highlight></codeline>
<codeline lineno="1184"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>defined(NRF5340_XXAA_NETWORK)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1185"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1186"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRF_CCM_HAS_INPTR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1187"><highlight class="normal"></highlight></codeline>
<codeline lineno="1188"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_CCM_HAS_IN_PTR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1189"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__ccm__hal_1ga7c96e19e88eefd176fbeb9fd85a51297" kindref="member">nrf_ccm_in_ptr_set</ref>(NRF_CCM_Type<sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="1190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structnrf__vdma__job__t" kindref="compound">nrf_vdma_job_t</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_job)</highlight></codeline>
<codeline lineno="1191"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1192"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;IN.PTR<sp/>=<sp/>(uint32_t)p_job;</highlight></codeline>
<codeline lineno="1193"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1194"><highlight class="normal"></highlight></codeline>
<codeline lineno="1195"><highlight class="normal">NRF_STATIC_INLINE<sp/><ref refid="structnrf__vdma__job__t" kindref="compound">nrf_vdma_job_t</ref><sp/>*<sp/><ref refid="group__nrf__ccm__hal_1gabe720cb5f6425542f992debb4a295516" kindref="member">nrf_ccm_in_ptr_get</ref>(NRF_CCM_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="1196"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1197"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structnrf__vdma__job__t" kindref="compound">nrf_vdma_job_t</ref><sp/>*)(p_reg-&gt;IN.PTR);</highlight></codeline>
<codeline lineno="1198"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1199"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRF_CCM_HAS_IN_PTR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1200"><highlight class="normal"></highlight></codeline>
<codeline lineno="1201"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_CCM_HAS_OUTPTR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1202"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__ccm__hal_1ga7c6693fa080426df18618cfaff9b5d34" kindref="member">nrf_ccm_outptr_set</ref>(NRF_CCM_Type<sp/>*<sp/><sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="1203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_data)</highlight></codeline>
<codeline lineno="1204"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1205"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;OUTPTR<sp/>=<sp/>(uint32_t)p_data;</highlight></codeline>
<codeline lineno="1206"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1207"><highlight class="normal"></highlight></codeline>
<codeline lineno="1208"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/>*<sp/><ref refid="group__nrf__ccm__hal_1gacd6ce17163e6039d5e8cd9a2f6c2be07" kindref="member">nrf_ccm_outptr_get</ref>(NRF_CCM_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="1209"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1210"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(NRF5340_XXAA_NETWORK)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1211"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Apply<sp/>workaround<sp/>for<sp/>anomaly<sp/>10.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1212"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(uint32_t<sp/>*)(p_reg-&gt;OUTPTR<sp/>|<sp/>0x01000000);</highlight></codeline>
<codeline lineno="1213"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1214"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(uint32_t<sp/>*)(p_reg-&gt;OUTPTR);</highlight></codeline>
<codeline lineno="1215"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1216"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1217"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRF_CCM_HAS_OUTPTR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1218"><highlight class="normal"></highlight></codeline>
<codeline lineno="1219"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_CCM_HAS_OUT_PTR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1220"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__ccm__hal_1gaa01ff841d9024351e9aebddfc9ed2b88" kindref="member">nrf_ccm_out_ptr_set</ref>(NRF_CCM_Type<sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="1221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structnrf__vdma__job__t" kindref="compound">nrf_vdma_job_t</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_job)</highlight></codeline>
<codeline lineno="1222"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1223"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;OUT.PTR<sp/>=<sp/>(uint32_t)p_job;</highlight></codeline>
<codeline lineno="1224"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1225"><highlight class="normal"></highlight></codeline>
<codeline lineno="1226"><highlight class="normal">NRF_STATIC_INLINE<sp/><ref refid="structnrf__vdma__job__t" kindref="compound">nrf_vdma_job_t</ref><sp/>*<sp/><ref refid="group__nrf__ccm__hal_1ga2e758c89d37e3e149b209b7e77124e0b" kindref="member">nrf_ccm_out_ptr_get</ref>(NRF_CCM_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="1227"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1228"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structnrf__vdma__job__t" kindref="compound">nrf_vdma_job_t</ref><sp/>*)(p_reg-&gt;OUT.PTR);</highlight></codeline>
<codeline lineno="1229"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1230"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRF_CCM_HAS_OUT_PTR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1231"><highlight class="normal"></highlight></codeline>
<codeline lineno="1232"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_CCM_HAS_SCRATCHPTR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1233"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__ccm__hal_1gaef8cf688fefc45e1b78db80d14d9580d" kindref="member">nrf_ccm_scratchptr_set</ref>(NRF_CCM_Type<sp/>*<sp/><sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="1234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_area)</highlight></codeline>
<codeline lineno="1235"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1236"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;SCRATCHPTR<sp/>=<sp/>(uint32_t)p_area;</highlight></codeline>
<codeline lineno="1237"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1238"><highlight class="normal"></highlight></codeline>
<codeline lineno="1239"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/>*<sp/><ref refid="group__nrf__ccm__hal_1ga9c064c4427178dbf1d125e0f52ef7c7f" kindref="member">nrf_ccm_scratchptr_get</ref>(NRF_CCM_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="1240"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1241"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(NRF5340_XXAA_NETWORK)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1242"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Apply<sp/>workaround<sp/>for<sp/>anomaly<sp/>10.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1243"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(uint32_t<sp/>*)(p_reg-&gt;SCRATCHPTR<sp/>|<sp/>0x01000000);</highlight></codeline>
<codeline lineno="1244"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1245"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(uint32_t<sp/>*)(p_reg-&gt;SCRATCHPTR);</highlight></codeline>
<codeline lineno="1246"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>defined(NRF5340_XXAA_NETWORK)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1247"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1248"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRF_CCM_HAS_SCRATCHPTR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1249"><highlight class="normal"></highlight></codeline>
<codeline lineno="1250"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_CCM_HAS_RATEOVERRIDE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1251"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__ccm__hal_1gab33d58e47347eef25c2541aecd68a2c2" kindref="member">nrf_ccm_datarate_override_set</ref>(NRF_CCM_Type<sp/>*<sp/><sp/><sp/><sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="1252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__ccm__hal_1ga1d6e97200cb2c3f20d655240ea69d6a5" kindref="member">nrf_ccm_datarate_t</ref><sp/>datarate)</highlight></codeline>
<codeline lineno="1253"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1254"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;RATEOVERRIDE<sp/>=<sp/>((uint32_t)datarate<sp/>&lt;&lt;<sp/>CCM_RATEOVERRIDE_RATEOVERRIDE_Pos);</highlight></codeline>
<codeline lineno="1255"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1256"><highlight class="normal"></highlight></codeline>
<codeline lineno="1257"><highlight class="normal">NRF_STATIC_INLINE<sp/><ref refid="group__nrf__ccm__hal_1ga1d6e97200cb2c3f20d655240ea69d6a5" kindref="member">nrf_ccm_datarate_t</ref><sp/><ref refid="group__nrf__ccm__hal_1ga9c9285c0a19fbe8a19cce218404cb9c7" kindref="member">nrf_ccm_datarate_override_get</ref>(NRF_CCM_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="1258"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1259"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="group__nrf__ccm__hal_1ga1d6e97200cb2c3f20d655240ea69d6a5" kindref="member">nrf_ccm_datarate_t</ref>)(p_reg-&gt;RATEOVERRIDE);</highlight></codeline>
<codeline lineno="1260"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1261"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRF_CCM_HAS_RATEOVERRIDE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1262"><highlight class="normal"></highlight></codeline>
<codeline lineno="1263"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_CCM_HAS_ADATAMASK</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1264"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__ccm__hal_1ga6f6b4e485f00eef787e82f4244f828ad" kindref="member">nrf_ccm_adatamask_set</ref>(NRF_CCM_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="1265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>adata_msk)</highlight></codeline>
<codeline lineno="1266"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1267"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;ADATAMASK<sp/>=<sp/>(uint32_t)adata_msk;</highlight></codeline>
<codeline lineno="1268"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1269"><highlight class="normal"></highlight></codeline>
<codeline lineno="1270"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__ccm__hal_1gad40b804e4d6ad5172d8f97ca1512974b" kindref="member">nrf_ccm_adatamask_get</ref>(NRF_CCM_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="1271"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1272"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(uint32_t)(p_reg-&gt;ADATAMASK);</highlight></codeline>
<codeline lineno="1273"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1274"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRF_CCM_HAS_ADATAMASK</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1275"><highlight class="normal"></highlight></codeline>
<codeline lineno="1276"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_CCM_HAS_HEADERMASK</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1277"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__ccm__hal_1gad300d56c4bc2759bac1a4ee01f43b2d7" kindref="member">nrf_ccm_headermask_set</ref>(NRF_CCM_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="1278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>header_msk)</highlight></codeline>
<codeline lineno="1279"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1280"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;HEADERMASK<sp/>=<sp/>(uint32_t)header_msk;</highlight></codeline>
<codeline lineno="1281"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1282"><highlight class="normal"></highlight></codeline>
<codeline lineno="1283"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__ccm__hal_1gac2a132d0cee9554fafe9f30655496ce0" kindref="member">nrf_ccm_headermask_get</ref>(NRF_CCM_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="1284"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1285"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(uint32_t)(p_reg-&gt;HEADERMASK);</highlight></codeline>
<codeline lineno="1286"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1287"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1288"><highlight class="normal"></highlight></codeline>
<codeline lineno="1289"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(DPPI_PRESENT)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1290"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__ccm__hal_1gab0026e02d14e66216a11351b840fc179" kindref="member">nrf_ccm_subscribe_set</ref>(NRF_CCM_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="1291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__ccm__hal_1ga2dede4b5a487f5846c0c27a00ecff430" kindref="member">nrf_ccm_task_t</ref><sp/>task,</highlight></codeline>
<codeline lineno="1292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>channel)</highlight></codeline>
<codeline lineno="1293"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1294"><highlight class="normal"><sp/><sp/><sp/><sp/>*((</highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint32_t<sp/>*)<sp/>((uint8_t<sp/>*)<sp/>p_reg<sp/>+<sp/>(uint32_t)<sp/>task<sp/>+<sp/>0x80uL))<sp/>=</highlight></codeline>
<codeline lineno="1295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)channel<sp/>|<sp/>NRF_SUBSCRIBE_PUBLISH_ENABLE);</highlight></codeline>
<codeline lineno="1296"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1297"><highlight class="normal"></highlight></codeline>
<codeline lineno="1298"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__ccm__hal_1ga0f8b230349815c215e379b28312c7d57" kindref="member">nrf_ccm_subscribe_clear</ref>(NRF_CCM_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="1299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__ccm__hal_1ga2dede4b5a487f5846c0c27a00ecff430" kindref="member">nrf_ccm_task_t</ref><sp/>task)</highlight></codeline>
<codeline lineno="1300"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1301"><highlight class="normal"><sp/><sp/><sp/><sp/>*((</highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint32_t<sp/>*)<sp/>((uint8_t<sp/>*)<sp/>p_reg<sp/>+<sp/>(uint32_t)<sp/>task<sp/>+<sp/>0x80uL))<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1302"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1303"><highlight class="normal"></highlight></codeline>
<codeline lineno="1304"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__ccm__hal_1gacd3ff8fbbcf7de7bf01be1ea5d11d930" kindref="member">nrf_ccm_publish_set</ref>(NRF_CCM_Type<sp/>*<sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="1305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__ccm__hal_1ga9de429cccef1f7a1e1dc63fe5563aa77" kindref="member">nrf_ccm_event_t</ref><sp/>event,</highlight></codeline>
<codeline lineno="1306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>channel)</highlight></codeline>
<codeline lineno="1307"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1308"><highlight class="normal"><sp/><sp/><sp/><sp/>*((</highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint32_t<sp/>*)<sp/>((uint8_t<sp/>*)<sp/>p_reg<sp/>+<sp/>(uint32_t)<sp/>event<sp/>+<sp/>0x80uL))<sp/>=</highlight></codeline>
<codeline lineno="1309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)channel<sp/>|<sp/>NRF_SUBSCRIBE_PUBLISH_ENABLE);</highlight></codeline>
<codeline lineno="1310"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1311"><highlight class="normal"></highlight></codeline>
<codeline lineno="1312"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__ccm__hal_1ga1180502c12ce4c876b2fd890d7710d7f" kindref="member">nrf_ccm_publish_clear</ref>(NRF_CCM_Type<sp/>*<sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="1313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__ccm__hal_1ga9de429cccef1f7a1e1dc63fe5563aa77" kindref="member">nrf_ccm_event_t</ref><sp/>event)</highlight></codeline>
<codeline lineno="1314"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1315"><highlight class="normal"><sp/><sp/><sp/><sp/>*((</highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint32_t<sp/>*)<sp/>((uint8_t<sp/>*)<sp/>p_reg<sp/>+<sp/>(uint32_t)<sp/>event<sp/>+<sp/>0x80uL))<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1316"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1317"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>defined(DPPI_PRESENT)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1318"><highlight class="normal"></highlight></codeline>
<codeline lineno="1319"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRF_DECLARE_ONLY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1320"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1321"><highlight class="comment">/**<sp/>@}<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1322"><highlight class="normal"></highlight></codeline>
<codeline lineno="1323"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1324"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1325"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1326"><highlight class="normal"></highlight></codeline>
<codeline lineno="1327"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>NRF_CCM_H__</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="hal/nrf_ccm.h"/>
  </compounddef>
</doxygen>
