<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="nrf__ipc_8h" kind="file" language="C++">
    <compoundname>nrf_ipc.h</compoundname>
    <includes local="no">nrfx.h</includes>
    <includedby refid="nrfx__ipc_8h" local="no">drivers/include/nrfx_ipc.h</includedby>
    <incdepgraph>
      <node id="1">
        <label>hal/nrf_ipc.h</label>
        <link refid="nrf__ipc_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>nrfx.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="group__nrf__ipc__hal_1ga4ace59bc4a2550271489316ce4d8a822" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_ipc_task_t</name>
        <enumvalue id="group__nrf__ipc__hal_1gga4ace59bc4a2550271489316ce4d8a822a5e67d7fad2847e93dbb14b3769f86cf1" prot="public">
          <name>NRF_IPC_TASK_SEND_0</name>
          <initializer>= offsetof(NRF_IPC_Type, TASKS_SEND[0])</initializer>
          <briefdescription>
<para>Trigger events on channels enabled in SEND_CNF[0]. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__ipc__hal_1gga4ace59bc4a2550271489316ce4d8a822ae066071718c91a36a60bf01c25ce8fdd" prot="public">
          <name>NRF_IPC_TASK_SEND_1</name>
          <initializer>= offsetof(NRF_IPC_Type, TASKS_SEND[1])</initializer>
          <briefdescription>
<para>Trigger events on channels enabled in SEND_CNF[1]. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__ipc__hal_1gga4ace59bc4a2550271489316ce4d8a822a9710a053bcf2d0d7041444eceafc2e98" prot="public">
          <name>NRF_IPC_TASK_SEND_2</name>
          <initializer>= offsetof(NRF_IPC_Type, TASKS_SEND[2])</initializer>
          <briefdescription>
<para>Trigger events on channels enabled in SEND_CNF[2]. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__ipc__hal_1gga4ace59bc4a2550271489316ce4d8a822aa1edfafb605adefc8145fade0062b274" prot="public">
          <name>NRF_IPC_TASK_SEND_3</name>
          <initializer>= offsetof(NRF_IPC_Type, TASKS_SEND[3])</initializer>
          <briefdescription>
<para>Trigger events on channels enabled in SEND_CNF[3]. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__ipc__hal_1gga4ace59bc4a2550271489316ce4d8a822a93d45297c11690900d8f583a866dd4f9" prot="public">
          <name>NRF_IPC_TASK_SEND_4</name>
          <initializer>= offsetof(NRF_IPC_Type, TASKS_SEND[4])</initializer>
          <briefdescription>
<para>Trigger events on channels enabled in SEND_CNF[4]. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__ipc__hal_1gga4ace59bc4a2550271489316ce4d8a822a25606c7d4cbc4c66bf71a5b5925f714b" prot="public">
          <name>NRF_IPC_TASK_SEND_5</name>
          <initializer>= offsetof(NRF_IPC_Type, TASKS_SEND[5])</initializer>
          <briefdescription>
<para>Trigger events on channels enabled in SEND_CNF[5]. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__ipc__hal_1gga4ace59bc4a2550271489316ce4d8a822ad90474c8d1dc3d42049d677d36b80dd5" prot="public">
          <name>NRF_IPC_TASK_SEND_6</name>
          <initializer>= offsetof(NRF_IPC_Type, TASKS_SEND[6])</initializer>
          <briefdescription>
<para>Trigger events on channels enabled in SEND_CNF[6]. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__ipc__hal_1gga4ace59bc4a2550271489316ce4d8a822a3a08d66b7024bf9aff734217c3924292" prot="public">
          <name>NRF_IPC_TASK_SEND_7</name>
          <initializer>= offsetof(NRF_IPC_Type, TASKS_SEND[7])</initializer>
          <briefdescription>
<para>Trigger events on channels enabled in SEND_CNF[7]. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__ipc__hal_1gga4ace59bc4a2550271489316ce4d8a822acaea9eb25994d3fc6cb6ec55a8ca2cde" prot="public">
          <name>NRF_IPC_TASK_SEND_8</name>
          <initializer>= offsetof(NRF_IPC_Type, TASKS_SEND[8])</initializer>
          <briefdescription>
<para>Trigger events on channels enabled in SEND_CNF[8]. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__ipc__hal_1gga4ace59bc4a2550271489316ce4d8a822a3ab835b988ed062fb99aced4eeddb33c" prot="public">
          <name>NRF_IPC_TASK_SEND_9</name>
          <initializer>= offsetof(NRF_IPC_Type, TASKS_SEND[9])</initializer>
          <briefdescription>
<para>Trigger events on channels enabled in SEND_CNF[9]. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__ipc__hal_1gga4ace59bc4a2550271489316ce4d8a822ac611f5bd65ffcc9769ab6b7da14ad28b" prot="public">
          <name>NRF_IPC_TASK_SEND_10</name>
          <initializer>= offsetof(NRF_IPC_Type, TASKS_SEND[10])</initializer>
          <briefdescription>
<para>Trigger events on channels enabled in SEND_CNF[10]. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__ipc__hal_1gga4ace59bc4a2550271489316ce4d8a822af15c81e2c8389461cc1fd416485fa1e1" prot="public">
          <name>NRF_IPC_TASK_SEND_11</name>
          <initializer>= offsetof(NRF_IPC_Type, TASKS_SEND[11])</initializer>
          <briefdescription>
<para>Trigger events on channels enabled in SEND_CNF[11]. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__ipc__hal_1gga4ace59bc4a2550271489316ce4d8a822a195d84fa73e1314c60d28a8332c4ebc7" prot="public">
          <name>NRF_IPC_TASK_SEND_12</name>
          <initializer>= offsetof(NRF_IPC_Type, TASKS_SEND[12])</initializer>
          <briefdescription>
<para>Trigger events on channels enabled in SEND_CNF[12]. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__ipc__hal_1gga4ace59bc4a2550271489316ce4d8a822a6ed20c984c5f0dd54413ed597bd27a6a" prot="public">
          <name>NRF_IPC_TASK_SEND_13</name>
          <initializer>= offsetof(NRF_IPC_Type, TASKS_SEND[13])</initializer>
          <briefdescription>
<para>Trigger events on channels enabled in SEND_CNF[13]. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__ipc__hal_1gga4ace59bc4a2550271489316ce4d8a822ae62917e4c92628a04f3f2b3783689b78" prot="public">
          <name>NRF_IPC_TASK_SEND_14</name>
          <initializer>= offsetof(NRF_IPC_Type, TASKS_SEND[14])</initializer>
          <briefdescription>
<para>Trigger events on channels enabled in SEND_CNF[14]. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__ipc__hal_1gga4ace59bc4a2550271489316ce4d8a822ab206173794cea841ed369df34192c4f9" prot="public">
          <name>NRF_IPC_TASK_SEND_15</name>
          <initializer>= offsetof(NRF_IPC_Type, TASKS_SEND[15])</initializer>
          <briefdescription>
<para>Trigger events on channels enabled in SEND_CNF[15]. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>IPC tasks. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ipc.h" line="59" column="1" bodyfile="hal/nrf_ipc.h" bodystart="60" bodyend="79"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__ipc__hal_1ga4ffd2cfae971f5c3727751b6002fdbf8" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_ipc_event_t</name>
        <enumvalue id="group__nrf__ipc__hal_1gga4ffd2cfae971f5c3727751b6002fdbf8adcca0995427bc37c3a973cf1ede617da" prot="public">
          <name>NRF_IPC_EVENT_RECEIVE_0</name>
          <initializer>= offsetof(NRF_IPC_Type, EVENTS_RECEIVE[0])</initializer>
          <briefdescription>
<para>Event received on the IPC channels enabled in RECEIVE_CNF[0] register. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__ipc__hal_1gga4ffd2cfae971f5c3727751b6002fdbf8af10ecdb38aa8cb9a35fbb22d7c737957" prot="public">
          <name>NRF_IPC_EVENT_RECEIVE_1</name>
          <initializer>= offsetof(NRF_IPC_Type, EVENTS_RECEIVE[1])</initializer>
          <briefdescription>
<para>Event received on the IPC channels enabled in RECEIVE_CNF[1] register. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__ipc__hal_1gga4ffd2cfae971f5c3727751b6002fdbf8ad75b65017dfd6819ee687902cec67f9e" prot="public">
          <name>NRF_IPC_EVENT_RECEIVE_2</name>
          <initializer>= offsetof(NRF_IPC_Type, EVENTS_RECEIVE[2])</initializer>
          <briefdescription>
<para>Event received on the IPC channels enabled in RECEIVE_CNF[2] register. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__ipc__hal_1gga4ffd2cfae971f5c3727751b6002fdbf8a026357a123e817ee50682da20652b932" prot="public">
          <name>NRF_IPC_EVENT_RECEIVE_3</name>
          <initializer>= offsetof(NRF_IPC_Type, EVENTS_RECEIVE[3])</initializer>
          <briefdescription>
<para>Event received on the IPC channels enabled in RECEIVE_CNF[3] register. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__ipc__hal_1gga4ffd2cfae971f5c3727751b6002fdbf8a8a732087ebec6b4a93e674d9c7e65e08" prot="public">
          <name>NRF_IPC_EVENT_RECEIVE_4</name>
          <initializer>= offsetof(NRF_IPC_Type, EVENTS_RECEIVE[4])</initializer>
          <briefdescription>
<para>Event received on the IPC channels enabled in RECEIVE_CNF[4] register. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__ipc__hal_1gga4ffd2cfae971f5c3727751b6002fdbf8a2bf9a205c74e642b028c6cfc72180718" prot="public">
          <name>NRF_IPC_EVENT_RECEIVE_5</name>
          <initializer>= offsetof(NRF_IPC_Type, EVENTS_RECEIVE[5])</initializer>
          <briefdescription>
<para>Event received on the IPC channels enabled in RECEIVE_CNF[5] register. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__ipc__hal_1gga4ffd2cfae971f5c3727751b6002fdbf8aaf7b0ab2b668cdf31f558cce9fc19820" prot="public">
          <name>NRF_IPC_EVENT_RECEIVE_6</name>
          <initializer>= offsetof(NRF_IPC_Type, EVENTS_RECEIVE[6])</initializer>
          <briefdescription>
<para>Event received on the IPC channels enabled in RECEIVE_CNF[6] register. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__ipc__hal_1gga4ffd2cfae971f5c3727751b6002fdbf8af2996cd4db082f2f004228e3061bf9ea" prot="public">
          <name>NRF_IPC_EVENT_RECEIVE_7</name>
          <initializer>= offsetof(NRF_IPC_Type, EVENTS_RECEIVE[7])</initializer>
          <briefdescription>
<para>Event received on the IPC channels enabled in RECEIVE_CNF[7] register. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__ipc__hal_1gga4ffd2cfae971f5c3727751b6002fdbf8a0b7cb3f28a69a3b762327cd90cc58dcf" prot="public">
          <name>NRF_IPC_EVENT_RECEIVE_8</name>
          <initializer>= offsetof(NRF_IPC_Type, EVENTS_RECEIVE[8])</initializer>
          <briefdescription>
<para>Event received on the IPC channels enabled in RECEIVE_CNF[8] register. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__ipc__hal_1gga4ffd2cfae971f5c3727751b6002fdbf8ad7c1d389a7af703cb4427146737dc83e" prot="public">
          <name>NRF_IPC_EVENT_RECEIVE_9</name>
          <initializer>= offsetof(NRF_IPC_Type, EVENTS_RECEIVE[9])</initializer>
          <briefdescription>
<para>Event received on the IPC channels enabled in RECEIVE_CNF[9] register. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__ipc__hal_1gga4ffd2cfae971f5c3727751b6002fdbf8aff10a724af976a9f42eef0cbf20106a8" prot="public">
          <name>NRF_IPC_EVENT_RECEIVE_10</name>
          <initializer>= offsetof(NRF_IPC_Type, EVENTS_RECEIVE[10])</initializer>
          <briefdescription>
<para>Event received on the IPC channels enabled in RECEIVE_CNF[10] register. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__ipc__hal_1gga4ffd2cfae971f5c3727751b6002fdbf8ad18aca1634c34f326f0ed53b43adafc7" prot="public">
          <name>NRF_IPC_EVENT_RECEIVE_11</name>
          <initializer>= offsetof(NRF_IPC_Type, EVENTS_RECEIVE[11])</initializer>
          <briefdescription>
<para>Event received on the IPC channels enabled in RECEIVE_CNF[11] register. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__ipc__hal_1gga4ffd2cfae971f5c3727751b6002fdbf8a3e0198755eabaa744382a8c09399186e" prot="public">
          <name>NRF_IPC_EVENT_RECEIVE_12</name>
          <initializer>= offsetof(NRF_IPC_Type, EVENTS_RECEIVE[12])</initializer>
          <briefdescription>
<para>Event received on the IPC channels enabled in RECEIVE_CNF[12] register. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__ipc__hal_1gga4ffd2cfae971f5c3727751b6002fdbf8a3574b113c4d0cf3c1362e8c3029f4f76" prot="public">
          <name>NRF_IPC_EVENT_RECEIVE_13</name>
          <initializer>= offsetof(NRF_IPC_Type, EVENTS_RECEIVE[13])</initializer>
          <briefdescription>
<para>Event received on the IPC channels enabled in RECEIVE_CNF[13] register. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__ipc__hal_1gga4ffd2cfae971f5c3727751b6002fdbf8a801cb76b1c24ff0958231347bb996c82" prot="public">
          <name>NRF_IPC_EVENT_RECEIVE_14</name>
          <initializer>= offsetof(NRF_IPC_Type, EVENTS_RECEIVE[14])</initializer>
          <briefdescription>
<para>Event received on the IPC channels enabled in RECEIVE_CNF[14] register. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__ipc__hal_1gga4ffd2cfae971f5c3727751b6002fdbf8a97ed43ec0ac645326eef7faedd0aefaf" prot="public">
          <name>NRF_IPC_EVENT_RECEIVE_15</name>
          <initializer>= offsetof(NRF_IPC_Type, EVENTS_RECEIVE[15])</initializer>
          <briefdescription>
<para>Event received on the IPC channels enabled in RECEIVE_CNF[15] register. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>IPC events. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ipc.h" line="82" column="1" bodyfile="hal/nrf_ipc.h" bodystart="83" bodyend="102"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__ipc__hal_1gabb9645a49590790b2fa4116758870991" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_ipc_channel_t</name>
        <enumvalue id="group__nrf__ipc__hal_1ggabb9645a49590790b2fa4116758870991acc96ebb236a5c3c5c78589cd442f5acd" prot="public">
          <name>NRF_IPC_CHANNEL_0</name>
          <initializer>= IPC_RECEIVE_CNF_CHEN0_Msk</initializer>
          <briefdescription>
<para>Bitmask position for IPC channel 0. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__ipc__hal_1ggabb9645a49590790b2fa4116758870991a88fb706d767f2c7a07c4d1ecd3cb1aa4" prot="public">
          <name>NRF_IPC_CHANNEL_1</name>
          <initializer>= IPC_RECEIVE_CNF_CHEN1_Msk</initializer>
          <briefdescription>
<para>Bitmask position for IPC channel 1. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__ipc__hal_1ggabb9645a49590790b2fa4116758870991a01448f8e908135ced0c1cc3667cacfcd" prot="public">
          <name>NRF_IPC_CHANNEL_2</name>
          <initializer>= IPC_RECEIVE_CNF_CHEN2_Msk</initializer>
          <briefdescription>
<para>Bitmask position for IPC channel 2. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__ipc__hal_1ggabb9645a49590790b2fa4116758870991a990c986682f5b04a5be9692b4778efd4" prot="public">
          <name>NRF_IPC_CHANNEL_3</name>
          <initializer>= IPC_RECEIVE_CNF_CHEN3_Msk</initializer>
          <briefdescription>
<para>Bitmask position for IPC channel 3. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__ipc__hal_1ggabb9645a49590790b2fa4116758870991a68c8c55b053dab4c046467b1b54b1bd3" prot="public">
          <name>NRF_IPC_CHANNEL_4</name>
          <initializer>= IPC_RECEIVE_CNF_CHEN4_Msk</initializer>
          <briefdescription>
<para>Bitmask position for IPC channel 4. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__ipc__hal_1ggabb9645a49590790b2fa4116758870991a265b426c7928e1411f46ebca15f7d6f6" prot="public">
          <name>NRF_IPC_CHANNEL_5</name>
          <initializer>= IPC_RECEIVE_CNF_CHEN5_Msk</initializer>
          <briefdescription>
<para>Bitmask position for IPC channel 5. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__ipc__hal_1ggabb9645a49590790b2fa4116758870991a35960d73dd0c8fff97d222c29ef600e0" prot="public">
          <name>NRF_IPC_CHANNEL_6</name>
          <initializer>= IPC_RECEIVE_CNF_CHEN6_Msk</initializer>
          <briefdescription>
<para>Bitmask position for IPC channel 6. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__ipc__hal_1ggabb9645a49590790b2fa4116758870991a6eebf855b4d252897fbd2a90dd5a5b64" prot="public">
          <name>NRF_IPC_CHANNEL_7</name>
          <initializer>= IPC_RECEIVE_CNF_CHEN7_Msk</initializer>
          <briefdescription>
<para>Bitmask position for IPC channel 7. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__ipc__hal_1ggabb9645a49590790b2fa4116758870991a9f6067f12f50f8f0b007a66b945a1389" prot="public">
          <name>NRF_IPC_CHANNEL_8</name>
          <initializer>= IPC_RECEIVE_CNF_CHEN8_Msk</initializer>
          <briefdescription>
<para>Bitmask position for IPC channel 8. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__ipc__hal_1ggabb9645a49590790b2fa4116758870991a80c4795cf75f355a150410bf89dc1a30" prot="public">
          <name>NRF_IPC_CHANNEL_9</name>
          <initializer>= IPC_RECEIVE_CNF_CHEN9_Msk</initializer>
          <briefdescription>
<para>Bitmask position for IPC channel 9. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__ipc__hal_1ggabb9645a49590790b2fa4116758870991a1f12a4952ad9bc63ae5bd4e653fd65ca" prot="public">
          <name>NRF_IPC_CHANNEL_10</name>
          <initializer>= IPC_RECEIVE_CNF_CHEN10_Msk</initializer>
          <briefdescription>
<para>Bitmask position for IPC channel 10. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__ipc__hal_1ggabb9645a49590790b2fa4116758870991a581340c5c34b1843ba55330a37cd22c1" prot="public">
          <name>NRF_IPC_CHANNEL_11</name>
          <initializer>= IPC_RECEIVE_CNF_CHEN11_Msk</initializer>
          <briefdescription>
<para>Bitmask position for IPC channel 11. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__ipc__hal_1ggabb9645a49590790b2fa4116758870991a86cf3e2309dde54809fcbcbd5b9006e2" prot="public">
          <name>NRF_IPC_CHANNEL_12</name>
          <initializer>= IPC_RECEIVE_CNF_CHEN12_Msk</initializer>
          <briefdescription>
<para>Bitmask position for IPC channel 12. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__ipc__hal_1ggabb9645a49590790b2fa4116758870991aeae7d3c7e46aba4a14214bf3f19e744f" prot="public">
          <name>NRF_IPC_CHANNEL_13</name>
          <initializer>= IPC_RECEIVE_CNF_CHEN13_Msk</initializer>
          <briefdescription>
<para>Bitmask position for IPC channel 13. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__ipc__hal_1ggabb9645a49590790b2fa4116758870991a37fa48e42954775f7d48bda4e212a4d7" prot="public">
          <name>NRF_IPC_CHANNEL_14</name>
          <initializer>= IPC_RECEIVE_CNF_CHEN14_Msk</initializer>
          <briefdescription>
<para>Bitmask position for IPC channel 14. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__ipc__hal_1ggabb9645a49590790b2fa4116758870991a4b5a20f31b6ec54f2fe957e2a6215441" prot="public">
          <name>NRF_IPC_CHANNEL_15</name>
          <initializer>= IPC_RECEIVE_CNF_CHEN15_Msk</initializer>
          <briefdescription>
<para>Bitmask position for IPC channel 15. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>IPC channel positions. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ipc.h" line="105" column="1" bodyfile="hal/nrf_ipc.h" bodystart="106" bodyend="125"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__ipc__hal_1ga77192a25f197b42c2a31e3e683bd3d06" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_ipc_int_mask_t</name>
        <enumvalue id="group__nrf__ipc__hal_1gga77192a25f197b42c2a31e3e683bd3d06abae4a5540caa0e9c6f1024c5f941ccda" prot="public">
          <name>NRF_IPC_INT_RECEIVE_0</name>
          <initializer>= IPC_INTEN_RECEIVE0_Msk</initializer>
          <briefdescription>
<para>Interrupt on receive event 0. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__ipc__hal_1gga77192a25f197b42c2a31e3e683bd3d06a19be256f05563af2bb7f7272c32aa745" prot="public">
          <name>NRF_IPC_INT_RECEIVE_1</name>
          <initializer>= IPC_INTEN_RECEIVE1_Msk</initializer>
          <briefdescription>
<para>Interrupt on receive event 1. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__ipc__hal_1gga77192a25f197b42c2a31e3e683bd3d06acb419c7db7db45b68ca755b02d661556" prot="public">
          <name>NRF_IPC_INT_RECEIVE_2</name>
          <initializer>= IPC_INTEN_RECEIVE2_Msk</initializer>
          <briefdescription>
<para>Interrupt on receive event 2. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__ipc__hal_1gga77192a25f197b42c2a31e3e683bd3d06afcf36b8f99fb23bdc4a9a645da251f65" prot="public">
          <name>NRF_IPC_INT_RECEIVE_3</name>
          <initializer>= IPC_INTEN_RECEIVE3_Msk</initializer>
          <briefdescription>
<para>Interrupt on receive event 3. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__ipc__hal_1gga77192a25f197b42c2a31e3e683bd3d06a837f2448be1df0da4b1b5949c6374507" prot="public">
          <name>NRF_IPC_INT_RECEIVE_4</name>
          <initializer>= IPC_INTEN_RECEIVE4_Msk</initializer>
          <briefdescription>
<para>Interrupt on receive event 4. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__ipc__hal_1gga77192a25f197b42c2a31e3e683bd3d06a96acdb4791309d9fccae13db911ad81a" prot="public">
          <name>NRF_IPC_INT_RECEIVE_5</name>
          <initializer>= IPC_INTEN_RECEIVE5_Msk</initializer>
          <briefdescription>
<para>Interrupt on receive event 5. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__ipc__hal_1gga77192a25f197b42c2a31e3e683bd3d06aeac120c2fd0a54c262f64d59076a6671" prot="public">
          <name>NRF_IPC_INT_RECEIVE_6</name>
          <initializer>= IPC_INTEN_RECEIVE6_Msk</initializer>
          <briefdescription>
<para>Interrupt on receive event 6. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__ipc__hal_1gga77192a25f197b42c2a31e3e683bd3d06a156fbf7941a31112899a39313459b20e" prot="public">
          <name>NRF_IPC_INT_RECEIVE_7</name>
          <initializer>= IPC_INTEN_RECEIVE7_Msk</initializer>
          <briefdescription>
<para>Interrupt on receive event 7. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__ipc__hal_1gga77192a25f197b42c2a31e3e683bd3d06a662ef19fdae6538cc52be94b63e6556e" prot="public">
          <name>NRF_IPC_INT_RECEIVE_8</name>
          <initializer>= IPC_INTEN_RECEIVE8_Msk</initializer>
          <briefdescription>
<para>Interrupt on receive event 8. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__ipc__hal_1gga77192a25f197b42c2a31e3e683bd3d06a502efcedefb4dbe38b153db2aae13830" prot="public">
          <name>NRF_IPC_INT_RECEIVE_9</name>
          <initializer>= IPC_INTEN_RECEIVE9_Msk</initializer>
          <briefdescription>
<para>Interrupt on receive event 9. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__ipc__hal_1gga77192a25f197b42c2a31e3e683bd3d06a7a3e45f55c3ffba6046c55648cc56bf3" prot="public">
          <name>NRF_IPC_INT_RECEIVE_10</name>
          <initializer>= IPC_INTEN_RECEIVE10_Msk</initializer>
          <briefdescription>
<para>Interrupt on receive event 10. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__ipc__hal_1gga77192a25f197b42c2a31e3e683bd3d06ab10c0f1cd29cbf7c270491dc6e60df48" prot="public">
          <name>NRF_IPC_INT_RECEIVE_11</name>
          <initializer>= IPC_INTEN_RECEIVE11_Msk</initializer>
          <briefdescription>
<para>Interrupt on receive event 11. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__ipc__hal_1gga77192a25f197b42c2a31e3e683bd3d06a8290de5550645c6ba5580636ae2f43c9" prot="public">
          <name>NRF_IPC_INT_RECEIVE_12</name>
          <initializer>= IPC_INTEN_RECEIVE12_Msk</initializer>
          <briefdescription>
<para>Interrupt on receive event 12. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__ipc__hal_1gga77192a25f197b42c2a31e3e683bd3d06a94dacd2a3e1a5adbce15a267387b171d" prot="public">
          <name>NRF_IPC_INT_RECEIVE_13</name>
          <initializer>= IPC_INTEN_RECEIVE13_Msk</initializer>
          <briefdescription>
<para>Interrupt on receive event 13. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__ipc__hal_1gga77192a25f197b42c2a31e3e683bd3d06a51ad89a307095df12daa7378f6d36895" prot="public">
          <name>NRF_IPC_INT_RECEIVE_14</name>
          <initializer>= IPC_INTEN_RECEIVE14_Msk</initializer>
          <briefdescription>
<para>Interrupt on receive event 14. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__ipc__hal_1gga77192a25f197b42c2a31e3e683bd3d06a5eca4c9244f9e2a37319e4c4c5bded70" prot="public">
          <name>NRF_IPC_INT_RECEIVE_15</name>
          <initializer>= IPC_INTEN_RECEIVE15_Msk</initializer>
          <briefdescription>
<para>Interrupt on receive event 15. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>IPC interrupts. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ipc.h" line="128" column="1" bodyfile="hal/nrf_ipc.h" bodystart="129" bodyend="148"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__nrf__ipc__hal_1gaf34afb4c6f06e8f81de7e455d49b6ad7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_ipc_task_trigger</definition>
        <argsstring>(NRF_IPC_Type *p_reg, nrf_ipc_task_t task)</argsstring>
        <name>nrf_ipc_task_trigger</name>
        <param>
          <type>NRF_IPC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__ipc__hal_1ga4ace59bc4a2550271489316ce4d8a822" kindref="member">nrf_ipc_task_t</ref></type>
          <declname>task</declname>
        </param>
        <briefdescription>
<para>Function for triggering the specified IPC task. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">task</parametername>
</parameternamelist>
<parameterdescription>
<para>Task to be triggered. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ipc.h" line="379" column="24" bodyfile="hal/nrf_ipc.h" bodystart="379" bodyend="382" declfile="hal/nrf_ipc.h" declline="157" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__ipc__hal_1ga682d4c9f018a65120f509946b9ddd794" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_ipc_task_address_get</definition>
        <argsstring>(NRF_IPC_Type const *p_reg, nrf_ipc_task_t task)</argsstring>
        <name>nrf_ipc_task_address_get</name>
        <param>
          <type>NRF_IPC_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__ipc__hal_1ga4ace59bc4a2550271489316ce4d8a822" kindref="member">nrf_ipc_task_t</ref></type>
          <declname>task</declname>
        </param>
        <briefdescription>
<para>Function for getting the address of the specified IPC task register. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">task</parametername>
</parameternamelist>
<parameterdescription>
<para>Specified task.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Address of the specified task register. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ipc.h" line="384" column="28" bodyfile="hal/nrf_ipc.h" bodystart="384" bodyend="388" declfile="hal/nrf_ipc.h" declline="167" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__ipc__hal_1ga316c64d6cdb49c33cd219800cae25f41" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_ipc_event_clear</definition>
        <argsstring>(NRF_IPC_Type *p_reg, nrf_ipc_event_t event)</argsstring>
        <name>nrf_ipc_event_clear</name>
        <param>
          <type>NRF_IPC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__ipc__hal_1ga4ffd2cfae971f5c3727751b6002fdbf8" kindref="member">nrf_ipc_event_t</ref></type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>Function for clearing the specified IPC event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event to clear. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ipc.h" line="390" column="24" bodyfile="hal/nrf_ipc.h" bodystart="390" bodyend="393" declfile="hal/nrf_ipc.h" declline="176" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__ipc__hal_1gaa28ba8de4a793f853fc13995dd8cbb12" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE bool</type>
        <definition>NRF_STATIC_INLINE bool nrf_ipc_event_check</definition>
        <argsstring>(NRF_IPC_Type const *p_reg, nrf_ipc_event_t event)</argsstring>
        <name>nrf_ipc_event_check</name>
        <param>
          <type>NRF_IPC_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__ipc__hal_1ga4ffd2cfae971f5c3727751b6002fdbf8" kindref="member">nrf_ipc_event_t</ref></type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>Function for retrieving the state of the IPC event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event to be checked.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>The event has been generated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>The event has not been generated. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ipc.h" line="395" column="24" bodyfile="hal/nrf_ipc.h" bodystart="395" bodyend="398" declfile="hal/nrf_ipc.h" declline="187" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__ipc__hal_1gaf0dda7f38ffbb194e2d7fe50ecf84bca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_ipc_event_address_get</definition>
        <argsstring>(NRF_IPC_Type const *p_reg, nrf_ipc_event_t event)</argsstring>
        <name>nrf_ipc_event_address_get</name>
        <param>
          <type>NRF_IPC_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__ipc__hal_1ga4ffd2cfae971f5c3727751b6002fdbf8" kindref="member">nrf_ipc_event_t</ref></type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>Function for getting the address of the specified IPC event register. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>Specified event.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Address of the specified event register. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ipc.h" line="400" column="28" bodyfile="hal/nrf_ipc.h" bodystart="400" bodyend="404" declfile="hal/nrf_ipc.h" declline="197" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__ipc__hal_1ga63b685bde8d2cfec20bc591379f6dd74" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_ipc_int_enable</definition>
        <argsstring>(NRF_IPC_Type *p_reg, uint32_t mask)</argsstring>
        <name>nrf_ipc_int_enable</name>
        <param>
          <type>NRF_IPC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Function for enabling specified interrupts. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of interrupts to be enabled. Use <ref refid="group__nrf__ipc__hal_1ga77192a25f197b42c2a31e3e683bd3d06" kindref="member">nrf_ipc_int_mask_t</ref> values for bit masking. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ipc.h" line="406" column="24" bodyfile="hal/nrf_ipc.h" bodystart="406" bodyend="409" declfile="hal/nrf_ipc.h" declline="207" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__ipc__hal_1ga21c1c61abd4fe504202b7a41e8bc1fcf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_ipc_int_disable</definition>
        <argsstring>(NRF_IPC_Type *p_reg, uint32_t mask)</argsstring>
        <name>nrf_ipc_int_disable</name>
        <param>
          <type>NRF_IPC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Function for disabling specified interrupts. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of interrupts to be disabled. Use <ref refid="group__nrf__ipc__hal_1ga77192a25f197b42c2a31e3e683bd3d06" kindref="member">nrf_ipc_int_mask_t</ref> values for bit masking. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ipc.h" line="411" column="24" bodyfile="hal/nrf_ipc.h" bodystart="411" bodyend="414" declfile="hal/nrf_ipc.h" declline="216" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__ipc__hal_1gad57a2fbe420b2d1f83173793b07f5954" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_ipc_int_enable_check</definition>
        <argsstring>(NRF_IPC_Type const *p_reg, uint32_t mask)</argsstring>
        <name>nrf_ipc_int_enable_check</name>
        <param>
          <type>NRF_IPC_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Function for checking if the specified interrupts are enabled. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of interrupts to be checked. Use <ref refid="group__nrf__ipc__hal_1ga77192a25f197b42c2a31e3e683bd3d06" kindref="member">nrf_ipc_int_mask_t</ref> values for bit masking.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Mask of enabled interrupts. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ipc.h" line="416" column="28" bodyfile="hal/nrf_ipc.h" bodystart="416" bodyend="419" declfile="hal/nrf_ipc.h" declline="227" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__ipc__hal_1ga14eb0cf0cbb864c2499ff8ebfbd34b46" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_ipc_int_pending_get</definition>
        <argsstring>(NRF_IPC_Type const *p_reg)</argsstring>
        <name>nrf_ipc_int_pending_get</name>
        <param>
          <type>NRF_IPC_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for retrieving the state of pending interrupts of the receive event. </para>
        </briefdescription>
        <detaileddescription>
<para>States of pending interrupt are saved as a bitmask. First position corresponds with EVENTS_RECEIVE[0] event, second one with EVENTS_RECEIVE[1] etc. One set at particular position means that interrupt for event is pending.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Bitmask with information about pending interrupts of EVENTS_RECEIVE[n] events. Use <ref refid="group__nrf__ipc__hal_1ga77192a25f197b42c2a31e3e683bd3d06" kindref="member">nrf_ipc_int_mask_t</ref> values for bit masking. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ipc.h" line="421" column="28" bodyfile="hal/nrf_ipc.h" bodystart="421" bodyend="424" declfile="hal/nrf_ipc.h" declline="241" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__ipc__hal_1ga37e5b3db5560b3d5e3fca13411ad3fa2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_ipc_subscribe_set</definition>
        <argsstring>(NRF_IPC_Type *p_reg, nrf_ipc_task_t task, uint8_t channel)</argsstring>
        <name>nrf_ipc_subscribe_set</name>
        <param>
          <type>NRF_IPC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__ipc__hal_1ga4ace59bc4a2550271489316ce4d8a822" kindref="member">nrf_ipc_task_t</ref></type>
          <declname>task</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>channel</declname>
        </param>
        <briefdescription>
<para>Function for setting the DPPI subscribe configuration for a given IPC task. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">task</parametername>
</parameternamelist>
<parameterdescription>
<para>Task for which to set the configuration. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">channel</parametername>
</parameternamelist>
<parameterdescription>
<para>DPPI channel through which to subscribe events. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ipc.h" line="426" column="24" bodyfile="hal/nrf_ipc.h" bodystart="426" bodyend="432" declfile="hal/nrf_ipc.h" declline="251" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__ipc__hal_1ga9e97cecad60b6b88f49c5e9c58f69e32" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_ipc_subscribe_clear</definition>
        <argsstring>(NRF_IPC_Type *p_reg, nrf_ipc_task_t task)</argsstring>
        <name>nrf_ipc_subscribe_clear</name>
        <param>
          <type>NRF_IPC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__ipc__hal_1ga4ace59bc4a2550271489316ce4d8a822" kindref="member">nrf_ipc_task_t</ref></type>
          <declname>task</declname>
        </param>
        <briefdescription>
<para>Function for clearing the DPPI subscribe configuration for a given IPC task. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">task</parametername>
</parameternamelist>
<parameterdescription>
<para>Task for which to clear the configuration. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ipc.h" line="434" column="24" bodyfile="hal/nrf_ipc.h" bodystart="434" bodyend="437" declfile="hal/nrf_ipc.h" declline="262" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__ipc__hal_1ga456e37ac4b68680a382cdfde0522d411" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_ipc_publish_set</definition>
        <argsstring>(NRF_IPC_Type *p_reg, nrf_ipc_event_t event, uint8_t channel)</argsstring>
        <name>nrf_ipc_publish_set</name>
        <param>
          <type>NRF_IPC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__ipc__hal_1ga4ffd2cfae971f5c3727751b6002fdbf8" kindref="member">nrf_ipc_event_t</ref></type>
          <declname>event</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>channel</declname>
        </param>
        <briefdescription>
<para>Function for setting the DPPI publish configuration for a given IPC event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event for which to set the configuration. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">channel</parametername>
</parameternamelist>
<parameterdescription>
<para>DPPI channel through which to publish the event. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ipc.h" line="439" column="24" bodyfile="hal/nrf_ipc.h" bodystart="439" bodyend="445" declfile="hal/nrf_ipc.h" declline="272" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__ipc__hal_1gab8b0dc7cdd1469006d0fa52effe0d225" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_ipc_publish_clear</definition>
        <argsstring>(NRF_IPC_Type *p_reg, nrf_ipc_event_t event)</argsstring>
        <name>nrf_ipc_publish_clear</name>
        <param>
          <type>NRF_IPC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__ipc__hal_1ga4ffd2cfae971f5c3727751b6002fdbf8" kindref="member">nrf_ipc_event_t</ref></type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>Function for clearing the DPPI publish configuration for a given IPC event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event for which to clear the configuration. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ipc.h" line="447" column="24" bodyfile="hal/nrf_ipc.h" bodystart="447" bodyend="450" declfile="hal/nrf_ipc.h" declline="283" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__ipc__hal_1gac247d5f733dce320409100e31c61c58e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_ipc_send_config_set</definition>
        <argsstring>(NRF_IPC_Type *p_reg, uint8_t index, uint32_t channels_mask)</argsstring>
        <name>nrf_ipc_send_config_set</name>
        <param>
          <type>NRF_IPC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>index</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>channels_mask</declname>
        </param>
        <briefdescription>
<para>Function for setting the configuration of the specified send task. </para>
        </briefdescription>
        <detaileddescription>
<para><computeroutput>channels_mask</computeroutput> bitmask must be created with <ref refid="group__nrf__ipc__hal_1gabb9645a49590790b2fa4116758870991" kindref="member">nrf_ipc_channel_t</ref> values: NRF_IPC_CHANNEL_0 | NRF_IPC_CHANNEL_1 | ... | NRF_IPC_CHANNEL_n</para>
<para><simplesect kind="note"><para>This function overrides current configuration.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">index</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of the send task. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">channels_mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Bitmask specifying channels that are to be enabled for this task. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ipc.h" line="452" column="24" bodyfile="hal/nrf_ipc.h" bodystart="452" bodyend="457" declfile="hal/nrf_ipc.h" declline="297" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__ipc__hal_1ga790cf25e0efc727a00a626365911af46" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_ipc_send_config_get</definition>
        <argsstring>(NRF_IPC_Type *const p_reg, uint8_t index)</argsstring>
        <name>nrf_ipc_send_config_get</name>
        <param>
          <type>NRF_IPC_Type *const</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Function for getting the configuration of the specified send task. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">index</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of the send event configuration.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>Bitmask</parametername>
</parameternamelist>
<parameterdescription>
<para>of channels enabled for this task. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ipc.h" line="459" column="28" bodyfile="hal/nrf_ipc.h" bodystart="459" bodyend="462" declfile="hal/nrf_ipc.h" declline="309" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__ipc__hal_1ga253a3fd8e12378eda938edc30c0c43b3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_ipc_receive_config_set</definition>
        <argsstring>(NRF_IPC_Type *p_reg, uint8_t index, uint32_t channels_mask)</argsstring>
        <name>nrf_ipc_receive_config_set</name>
        <param>
          <type>NRF_IPC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>index</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>channels_mask</declname>
        </param>
        <briefdescription>
<para>Function for assigning receive event to the IPC channels. </para>
        </briefdescription>
        <detaileddescription>
<para><computeroutput>channels_mask</computeroutput> bitmask must be created with <ref refid="group__nrf__ipc__hal_1gabb9645a49590790b2fa4116758870991" kindref="member">nrf_ipc_channel_t</ref> values: NRF_IPC_CHANNEL_0 | NRF_IPC_CHANNEL_1 | ... | NRF_IPC_CHANNEL_n</para>
<para><simplesect kind="note"><para>This function overrides current configuration.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">index</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of the receive event configuration. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">channels_mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Bitmask with IPC channels from which the receive event will generate interrupts. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ipc.h" line="464" column="24" bodyfile="hal/nrf_ipc.h" bodystart="464" bodyend="469" declfile="hal/nrf_ipc.h" declline="324" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__ipc__hal_1gaac5cb7607bab2e163ce1547c09625877" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_ipc_receive_config_get</definition>
        <argsstring>(NRF_IPC_Type *const p_reg, uint8_t index)</argsstring>
        <name>nrf_ipc_receive_config_get</name>
        <param>
          <type>NRF_IPC_Type *const</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Function for getting receive event configuration. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">index</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of the receive event configuration.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Mask of channels connected with receive event. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ipc.h" line="472" column="28" bodyfile="hal/nrf_ipc.h" bodystart="472" bodyend="475" declfile="hal/nrf_ipc.h" declline="336" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__ipc__hal_1ga6d2875c7dff0dca567f9d3f3629c5518" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_ipc_gpmem_set</definition>
        <argsstring>(NRF_IPC_Type *p_reg, uint8_t index, uint32_t data)</argsstring>
        <name>nrf_ipc_gpmem_set</name>
        <param>
          <type>NRF_IPC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>index</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Function for storing data in general purpose memory cell. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">index</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of the general purpose memory cell. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">data</parametername>
</parameternamelist>
<parameterdescription>
<para>Data to be stored. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ipc.h" line="477" column="24" bodyfile="hal/nrf_ipc.h" bodystart="477" bodyend="483" declfile="hal/nrf_ipc.h" declline="345" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__ipc__hal_1ga3793c3ab49b52db7622354fddcfa5853" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_ipc_gpmem_get</definition>
        <argsstring>(NRF_IPC_Type const *p_reg, uint8_t index)</argsstring>
        <name>nrf_ipc_gpmem_get</name>
        <param>
          <type>NRF_IPC_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Function for getting value of the general purpose memory cell. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">index</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of the general purpose memory cell.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Stored data. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ipc.h" line="485" column="28" bodyfile="hal/nrf_ipc.h" bodystart="485" bodyend="489" declfile="hal/nrf_ipc.h" declline="357" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__ipc__hal_1ga7ec4734b14c9dc24ed6ea89a90082f90" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE <ref refid="group__nrf__ipc__hal_1ga4ace59bc4a2550271489316ce4d8a822" kindref="member">nrf_ipc_task_t</ref></type>
        <definition>NRF_STATIC_INLINE nrf_ipc_task_t nrf_ipc_send_task_get</definition>
        <argsstring>(uint8_t index)</argsstring>
        <name>nrf_ipc_send_task_get</name>
        <param>
          <type>uint8_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Function for getting SEND task by its index. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">index</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of the SEND task.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>SEND task. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ipc.h" line="491" column="34" bodyfile="hal/nrf_ipc.h" bodystart="491" bodyend="495" declfile="hal/nrf_ipc.h" declline="366" declcolumn="34"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__ipc__hal_1ga8ada127d84b91486176870e11b9b3382" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE <ref refid="group__nrf__ipc__hal_1ga4ffd2cfae971f5c3727751b6002fdbf8" kindref="member">nrf_ipc_event_t</ref></type>
        <definition>NRF_STATIC_INLINE nrf_ipc_event_t nrf_ipc_receive_event_get</definition>
        <argsstring>(uint8_t index)</argsstring>
        <name>nrf_ipc_receive_event_get</name>
        <param>
          <type>uint8_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Function for getting RECEIVE event by its index. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">index</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of the RECEIVE event.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>RECEIVE event. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ipc.h" line="497" column="35" bodyfile="hal/nrf_ipc.h" bodystart="497" bodyend="501" declfile="hal/nrf_ipc.h" declline="375" declcolumn="35"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2019<sp/>-<sp/>2024,<sp/>Nordic<sp/>Semiconductor<sp/>ASA</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>All<sp/>rights<sp/>reserved.</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>SPDX-License-Identifier:<sp/>BSD-3-Clause</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions<sp/>are<sp/>met:</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>1.<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright<sp/>notice,<sp/>this</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>2.<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the<sp/>distribution.</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/>3.<sp/>Neither<sp/>the<sp/>name<sp/>of<sp/>the<sp/>copyright<sp/>holder<sp/>nor<sp/>the<sp/>names<sp/>of<sp/>its</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>contributors<sp/>may<sp/>be<sp/>used<sp/>to<sp/>endorse<sp/>or<sp/>promote<sp/>products<sp/>derived<sp/>from<sp/>this</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>software<sp/>without<sp/>specific<sp/>prior<sp/>written<sp/>permission.</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>COPYRIGHT<sp/>HOLDERS<sp/>AND<sp/>CONTRIBUTORS<sp/>&quot;AS<sp/>IS&quot;</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/>AND<sp/>ANY<sp/>EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>THE</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*<sp/>ARE<sp/>DISCLAIMED.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>COPYRIGHT<sp/>HOLDER<sp/>OR<sp/>CONTRIBUTORS<sp/>BE</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,<sp/>SPECIAL,<sp/>EXEMPLARY,<sp/>OR</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>PROCUREMENT<sp/>OF</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>*<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,<sp/>DATA,<sp/>OR<sp/>PROFITS;<sp/>OR<sp/>BUSINESS</highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/>*<sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY<sp/>THEORY<sp/>OF<sp/>LIABILITY,<sp/>WHETHER<sp/>IN</highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/>*<sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR<sp/>OTHERWISE)</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/>*<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE<sp/>OF<sp/>THIS<sp/>SOFTWARE,<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/>*<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight></codeline>
<codeline lineno="32"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>NRF_IPC_H__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_IPC_H__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;nrfx.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(IPC_EVENTS_NUM)<sp/>&amp;&amp;<sp/>defined(IPC_CH_NUM)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>IPC_EVENTS_NUM<sp/>IPC_CH_NUM</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(IPC_TASKS_NUM)<sp/>&amp;&amp;<sp/>defined(IPC_CH_NUM)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>IPC_TASKS_NUM<sp/>IPC_CH_NUM</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="51"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="52"><highlight class="comment"><sp/>*<sp/>@defgroup<sp/>nrf_ipc_hal<sp/>IPC<sp/>HAL</highlight></codeline>
<codeline lineno="53"><highlight class="comment"><sp/>*<sp/>@{</highlight></codeline>
<codeline lineno="54"><highlight class="comment"><sp/>*<sp/>@ingroup<sp/>nrf_ipc</highlight></codeline>
<codeline lineno="55"><highlight class="comment"><sp/>*<sp/>@brief<sp/><sp/><sp/>Hardware<sp/>access<sp/>layer<sp/>for<sp/>managing<sp/>the<sp/>Interprocessor<sp/>Communication<sp/>(IPC)<sp/>peripheral.</highlight></codeline>
<codeline lineno="56"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="58"><highlight class="comment">/**<sp/>@brief<sp/>IPC<sp/>tasks.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal">{</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__ipc__hal_1gga4ace59bc4a2550271489316ce4d8a822a5e67d7fad2847e93dbb14b3769f86cf1" kindref="member">NRF_IPC_TASK_SEND_0</ref><sp/><sp/>=<sp/>offsetof(NRF_IPC_Type,<sp/>TASKS_SEND[0]),<sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Trigger<sp/>events<sp/>on<sp/>channels<sp/>enabled<sp/>in<sp/>SEND_CNF[0].</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__ipc__hal_1gga4ace59bc4a2550271489316ce4d8a822ae066071718c91a36a60bf01c25ce8fdd" kindref="member">NRF_IPC_TASK_SEND_1</ref><sp/><sp/>=<sp/>offsetof(NRF_IPC_Type,<sp/>TASKS_SEND[1]),<sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Trigger<sp/>events<sp/>on<sp/>channels<sp/>enabled<sp/>in<sp/>SEND_CNF[1].</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__ipc__hal_1gga4ace59bc4a2550271489316ce4d8a822a9710a053bcf2d0d7041444eceafc2e98" kindref="member">NRF_IPC_TASK_SEND_2</ref><sp/><sp/>=<sp/>offsetof(NRF_IPC_Type,<sp/>TASKS_SEND[2]),<sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Trigger<sp/>events<sp/>on<sp/>channels<sp/>enabled<sp/>in<sp/>SEND_CNF[2].</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__ipc__hal_1gga4ace59bc4a2550271489316ce4d8a822aa1edfafb605adefc8145fade0062b274" kindref="member">NRF_IPC_TASK_SEND_3</ref><sp/><sp/>=<sp/>offsetof(NRF_IPC_Type,<sp/>TASKS_SEND[3]),<sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Trigger<sp/>events<sp/>on<sp/>channels<sp/>enabled<sp/>in<sp/>SEND_CNF[3].</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__ipc__hal_1gga4ace59bc4a2550271489316ce4d8a822a93d45297c11690900d8f583a866dd4f9" kindref="member">NRF_IPC_TASK_SEND_4</ref><sp/><sp/>=<sp/>offsetof(NRF_IPC_Type,<sp/>TASKS_SEND[4]),<sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Trigger<sp/>events<sp/>on<sp/>channels<sp/>enabled<sp/>in<sp/>SEND_CNF[4].</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__ipc__hal_1gga4ace59bc4a2550271489316ce4d8a822a25606c7d4cbc4c66bf71a5b5925f714b" kindref="member">NRF_IPC_TASK_SEND_5</ref><sp/><sp/>=<sp/>offsetof(NRF_IPC_Type,<sp/>TASKS_SEND[5]),<sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Trigger<sp/>events<sp/>on<sp/>channels<sp/>enabled<sp/>in<sp/>SEND_CNF[5].</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__ipc__hal_1gga4ace59bc4a2550271489316ce4d8a822ad90474c8d1dc3d42049d677d36b80dd5" kindref="member">NRF_IPC_TASK_SEND_6</ref><sp/><sp/>=<sp/>offsetof(NRF_IPC_Type,<sp/>TASKS_SEND[6]),<sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Trigger<sp/>events<sp/>on<sp/>channels<sp/>enabled<sp/>in<sp/>SEND_CNF[6].</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__ipc__hal_1gga4ace59bc4a2550271489316ce4d8a822a3a08d66b7024bf9aff734217c3924292" kindref="member">NRF_IPC_TASK_SEND_7</ref><sp/><sp/>=<sp/>offsetof(NRF_IPC_Type,<sp/>TASKS_SEND[7]),<sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Trigger<sp/>events<sp/>on<sp/>channels<sp/>enabled<sp/>in<sp/>SEND_CNF[7].</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(IPC_TASKS_NUM<sp/>&gt;<sp/>8)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__ipc__hal_1gga4ace59bc4a2550271489316ce4d8a822acaea9eb25994d3fc6cb6ec55a8ca2cde" kindref="member">NRF_IPC_TASK_SEND_8</ref><sp/><sp/>=<sp/>offsetof(NRF_IPC_Type,<sp/>TASKS_SEND[8]),<sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Trigger<sp/>events<sp/>on<sp/>channels<sp/>enabled<sp/>in<sp/>SEND_CNF[8].</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__ipc__hal_1gga4ace59bc4a2550271489316ce4d8a822a3ab835b988ed062fb99aced4eeddb33c" kindref="member">NRF_IPC_TASK_SEND_9</ref><sp/><sp/>=<sp/>offsetof(NRF_IPC_Type,<sp/>TASKS_SEND[9]),<sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Trigger<sp/>events<sp/>on<sp/>channels<sp/>enabled<sp/>in<sp/>SEND_CNF[9].</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__ipc__hal_1gga4ace59bc4a2550271489316ce4d8a822ac611f5bd65ffcc9769ab6b7da14ad28b" kindref="member">NRF_IPC_TASK_SEND_10</ref><sp/>=<sp/>offsetof(NRF_IPC_Type,<sp/>TASKS_SEND[10]),<sp/></highlight><highlight class="comment">///&lt;<sp/>Trigger<sp/>events<sp/>on<sp/>channels<sp/>enabled<sp/>in<sp/>SEND_CNF[10].</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__ipc__hal_1gga4ace59bc4a2550271489316ce4d8a822af15c81e2c8389461cc1fd416485fa1e1" kindref="member">NRF_IPC_TASK_SEND_11</ref><sp/>=<sp/>offsetof(NRF_IPC_Type,<sp/>TASKS_SEND[11]),<sp/></highlight><highlight class="comment">///&lt;<sp/>Trigger<sp/>events<sp/>on<sp/>channels<sp/>enabled<sp/>in<sp/>SEND_CNF[11].</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__ipc__hal_1gga4ace59bc4a2550271489316ce4d8a822a195d84fa73e1314c60d28a8332c4ebc7" kindref="member">NRF_IPC_TASK_SEND_12</ref><sp/>=<sp/>offsetof(NRF_IPC_Type,<sp/>TASKS_SEND[12]),<sp/></highlight><highlight class="comment">///&lt;<sp/>Trigger<sp/>events<sp/>on<sp/>channels<sp/>enabled<sp/>in<sp/>SEND_CNF[12].</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__ipc__hal_1gga4ace59bc4a2550271489316ce4d8a822a6ed20c984c5f0dd54413ed597bd27a6a" kindref="member">NRF_IPC_TASK_SEND_13</ref><sp/>=<sp/>offsetof(NRF_IPC_Type,<sp/>TASKS_SEND[13]),<sp/></highlight><highlight class="comment">///&lt;<sp/>Trigger<sp/>events<sp/>on<sp/>channels<sp/>enabled<sp/>in<sp/>SEND_CNF[13].</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__ipc__hal_1gga4ace59bc4a2550271489316ce4d8a822ae62917e4c92628a04f3f2b3783689b78" kindref="member">NRF_IPC_TASK_SEND_14</ref><sp/>=<sp/>offsetof(NRF_IPC_Type,<sp/>TASKS_SEND[14]),<sp/></highlight><highlight class="comment">///&lt;<sp/>Trigger<sp/>events<sp/>on<sp/>channels<sp/>enabled<sp/>in<sp/>SEND_CNF[14].</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__ipc__hal_1gga4ace59bc4a2550271489316ce4d8a822ab206173794cea841ed369df34192c4f9" kindref="member">NRF_IPC_TASK_SEND_15</ref><sp/>=<sp/>offsetof(NRF_IPC_Type,<sp/>TASKS_SEND[15]),<sp/></highlight><highlight class="comment">///&lt;<sp/>Trigger<sp/>events<sp/>on<sp/>channels<sp/>enabled<sp/>in<sp/>SEND_CNF[15].</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>(IPC_TASKS_NUM<sp/>&gt;<sp/>8)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal">}<sp/><ref refid="group__nrf__ipc__hal_1ga4ace59bc4a2550271489316ce4d8a822" kindref="member">nrf_ipc_task_t</ref>;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="81"><highlight class="comment">/**<sp/>@brief<sp/>IPC<sp/>events.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal">{</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__ipc__hal_1gga4ffd2cfae971f5c3727751b6002fdbf8adcca0995427bc37c3a973cf1ede617da" kindref="member">NRF_IPC_EVENT_RECEIVE_0</ref><sp/><sp/>=<sp/>offsetof(NRF_IPC_Type,<sp/>EVENTS_RECEIVE[0]),<sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Event<sp/>received<sp/>on<sp/>the<sp/>IPC<sp/>channels<sp/>enabled<sp/>in<sp/>RECEIVE_CNF[0]<sp/>register.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__ipc__hal_1gga4ffd2cfae971f5c3727751b6002fdbf8af10ecdb38aa8cb9a35fbb22d7c737957" kindref="member">NRF_IPC_EVENT_RECEIVE_1</ref><sp/><sp/>=<sp/>offsetof(NRF_IPC_Type,<sp/>EVENTS_RECEIVE[1]),<sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Event<sp/>received<sp/>on<sp/>the<sp/>IPC<sp/>channels<sp/>enabled<sp/>in<sp/>RECEIVE_CNF[1]<sp/>register.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__ipc__hal_1gga4ffd2cfae971f5c3727751b6002fdbf8ad75b65017dfd6819ee687902cec67f9e" kindref="member">NRF_IPC_EVENT_RECEIVE_2</ref><sp/><sp/>=<sp/>offsetof(NRF_IPC_Type,<sp/>EVENTS_RECEIVE[2]),<sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Event<sp/>received<sp/>on<sp/>the<sp/>IPC<sp/>channels<sp/>enabled<sp/>in<sp/>RECEIVE_CNF[2]<sp/>register.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__ipc__hal_1gga4ffd2cfae971f5c3727751b6002fdbf8a026357a123e817ee50682da20652b932" kindref="member">NRF_IPC_EVENT_RECEIVE_3</ref><sp/><sp/>=<sp/>offsetof(NRF_IPC_Type,<sp/>EVENTS_RECEIVE[3]),<sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Event<sp/>received<sp/>on<sp/>the<sp/>IPC<sp/>channels<sp/>enabled<sp/>in<sp/>RECEIVE_CNF[3]<sp/>register.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__ipc__hal_1gga4ffd2cfae971f5c3727751b6002fdbf8a8a732087ebec6b4a93e674d9c7e65e08" kindref="member">NRF_IPC_EVENT_RECEIVE_4</ref><sp/><sp/>=<sp/>offsetof(NRF_IPC_Type,<sp/>EVENTS_RECEIVE[4]),<sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Event<sp/>received<sp/>on<sp/>the<sp/>IPC<sp/>channels<sp/>enabled<sp/>in<sp/>RECEIVE_CNF[4]<sp/>register.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__ipc__hal_1gga4ffd2cfae971f5c3727751b6002fdbf8a2bf9a205c74e642b028c6cfc72180718" kindref="member">NRF_IPC_EVENT_RECEIVE_5</ref><sp/><sp/>=<sp/>offsetof(NRF_IPC_Type,<sp/>EVENTS_RECEIVE[5]),<sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Event<sp/>received<sp/>on<sp/>the<sp/>IPC<sp/>channels<sp/>enabled<sp/>in<sp/>RECEIVE_CNF[5]<sp/>register.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__ipc__hal_1gga4ffd2cfae971f5c3727751b6002fdbf8aaf7b0ab2b668cdf31f558cce9fc19820" kindref="member">NRF_IPC_EVENT_RECEIVE_6</ref><sp/><sp/>=<sp/>offsetof(NRF_IPC_Type,<sp/>EVENTS_RECEIVE[6]),<sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Event<sp/>received<sp/>on<sp/>the<sp/>IPC<sp/>channels<sp/>enabled<sp/>in<sp/>RECEIVE_CNF[6]<sp/>register.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__ipc__hal_1gga4ffd2cfae971f5c3727751b6002fdbf8af2996cd4db082f2f004228e3061bf9ea" kindref="member">NRF_IPC_EVENT_RECEIVE_7</ref><sp/><sp/>=<sp/>offsetof(NRF_IPC_Type,<sp/>EVENTS_RECEIVE[7]),<sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Event<sp/>received<sp/>on<sp/>the<sp/>IPC<sp/>channels<sp/>enabled<sp/>in<sp/>RECEIVE_CNF[7]<sp/>register.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(IPC_EVENTS_NUM<sp/>&gt;<sp/>8)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__ipc__hal_1gga4ffd2cfae971f5c3727751b6002fdbf8a0b7cb3f28a69a3b762327cd90cc58dcf" kindref="member">NRF_IPC_EVENT_RECEIVE_8</ref><sp/><sp/>=<sp/>offsetof(NRF_IPC_Type,<sp/>EVENTS_RECEIVE[8]),<sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Event<sp/>received<sp/>on<sp/>the<sp/>IPC<sp/>channels<sp/>enabled<sp/>in<sp/>RECEIVE_CNF[8]<sp/>register.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__ipc__hal_1gga4ffd2cfae971f5c3727751b6002fdbf8ad7c1d389a7af703cb4427146737dc83e" kindref="member">NRF_IPC_EVENT_RECEIVE_9</ref><sp/><sp/>=<sp/>offsetof(NRF_IPC_Type,<sp/>EVENTS_RECEIVE[9]),<sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Event<sp/>received<sp/>on<sp/>the<sp/>IPC<sp/>channels<sp/>enabled<sp/>in<sp/>RECEIVE_CNF[9]<sp/>register.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__ipc__hal_1gga4ffd2cfae971f5c3727751b6002fdbf8aff10a724af976a9f42eef0cbf20106a8" kindref="member">NRF_IPC_EVENT_RECEIVE_10</ref><sp/>=<sp/>offsetof(NRF_IPC_Type,<sp/>EVENTS_RECEIVE[10]),<sp/></highlight><highlight class="comment">///&lt;<sp/>Event<sp/>received<sp/>on<sp/>the<sp/>IPC<sp/>channels<sp/>enabled<sp/>in<sp/>RECEIVE_CNF[10]<sp/>register.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__ipc__hal_1gga4ffd2cfae971f5c3727751b6002fdbf8ad18aca1634c34f326f0ed53b43adafc7" kindref="member">NRF_IPC_EVENT_RECEIVE_11</ref><sp/>=<sp/>offsetof(NRF_IPC_Type,<sp/>EVENTS_RECEIVE[11]),<sp/></highlight><highlight class="comment">///&lt;<sp/>Event<sp/>received<sp/>on<sp/>the<sp/>IPC<sp/>channels<sp/>enabled<sp/>in<sp/>RECEIVE_CNF[11]<sp/>register.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__ipc__hal_1gga4ffd2cfae971f5c3727751b6002fdbf8a3e0198755eabaa744382a8c09399186e" kindref="member">NRF_IPC_EVENT_RECEIVE_12</ref><sp/>=<sp/>offsetof(NRF_IPC_Type,<sp/>EVENTS_RECEIVE[12]),<sp/></highlight><highlight class="comment">///&lt;<sp/>Event<sp/>received<sp/>on<sp/>the<sp/>IPC<sp/>channels<sp/>enabled<sp/>in<sp/>RECEIVE_CNF[12]<sp/>register.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__ipc__hal_1gga4ffd2cfae971f5c3727751b6002fdbf8a3574b113c4d0cf3c1362e8c3029f4f76" kindref="member">NRF_IPC_EVENT_RECEIVE_13</ref><sp/>=<sp/>offsetof(NRF_IPC_Type,<sp/>EVENTS_RECEIVE[13]),<sp/></highlight><highlight class="comment">///&lt;<sp/>Event<sp/>received<sp/>on<sp/>the<sp/>IPC<sp/>channels<sp/>enabled<sp/>in<sp/>RECEIVE_CNF[13]<sp/>register.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__ipc__hal_1gga4ffd2cfae971f5c3727751b6002fdbf8a801cb76b1c24ff0958231347bb996c82" kindref="member">NRF_IPC_EVENT_RECEIVE_14</ref><sp/>=<sp/>offsetof(NRF_IPC_Type,<sp/>EVENTS_RECEIVE[14]),<sp/></highlight><highlight class="comment">///&lt;<sp/>Event<sp/>received<sp/>on<sp/>the<sp/>IPC<sp/>channels<sp/>enabled<sp/>in<sp/>RECEIVE_CNF[14]<sp/>register.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__ipc__hal_1gga4ffd2cfae971f5c3727751b6002fdbf8a97ed43ec0ac645326eef7faedd0aefaf" kindref="member">NRF_IPC_EVENT_RECEIVE_15</ref><sp/>=<sp/>offsetof(NRF_IPC_Type,<sp/>EVENTS_RECEIVE[15]),<sp/></highlight><highlight class="comment">///&lt;<sp/>Event<sp/>received<sp/>on<sp/>the<sp/>IPC<sp/>channels<sp/>enabled<sp/>in<sp/>RECEIVE_CNF[15]<sp/>register.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>(IPC_EVENTS_NUM<sp/>&gt;<sp/>8)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal">}<sp/><ref refid="group__nrf__ipc__hal_1ga4ffd2cfae971f5c3727751b6002fdbf8" kindref="member">nrf_ipc_event_t</ref>;</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="104"><highlight class="comment">/**<sp/>@brief<sp/>IPC<sp/>channel<sp/>positions.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal">{</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__ipc__hal_1ggabb9645a49590790b2fa4116758870991acc96ebb236a5c3c5c78589cd442f5acd" kindref="member">NRF_IPC_CHANNEL_0</ref><sp/>=<sp/>IPC_RECEIVE_CNF_CHEN0_Msk,<sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Bitmask<sp/>position<sp/>for<sp/>IPC<sp/>channel<sp/>0.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__ipc__hal_1ggabb9645a49590790b2fa4116758870991a88fb706d767f2c7a07c4d1ecd3cb1aa4" kindref="member">NRF_IPC_CHANNEL_1</ref><sp/>=<sp/>IPC_RECEIVE_CNF_CHEN1_Msk,<sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Bitmask<sp/>position<sp/>for<sp/>IPC<sp/>channel<sp/>1.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__ipc__hal_1ggabb9645a49590790b2fa4116758870991a01448f8e908135ced0c1cc3667cacfcd" kindref="member">NRF_IPC_CHANNEL_2</ref><sp/>=<sp/>IPC_RECEIVE_CNF_CHEN2_Msk,<sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Bitmask<sp/>position<sp/>for<sp/>IPC<sp/>channel<sp/>2.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__ipc__hal_1ggabb9645a49590790b2fa4116758870991a990c986682f5b04a5be9692b4778efd4" kindref="member">NRF_IPC_CHANNEL_3</ref><sp/>=<sp/>IPC_RECEIVE_CNF_CHEN3_Msk,<sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Bitmask<sp/>position<sp/>for<sp/>IPC<sp/>channel<sp/>3.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__ipc__hal_1ggabb9645a49590790b2fa4116758870991a68c8c55b053dab4c046467b1b54b1bd3" kindref="member">NRF_IPC_CHANNEL_4</ref><sp/>=<sp/>IPC_RECEIVE_CNF_CHEN4_Msk,<sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Bitmask<sp/>position<sp/>for<sp/>IPC<sp/>channel<sp/>4.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__ipc__hal_1ggabb9645a49590790b2fa4116758870991a265b426c7928e1411f46ebca15f7d6f6" kindref="member">NRF_IPC_CHANNEL_5</ref><sp/>=<sp/>IPC_RECEIVE_CNF_CHEN5_Msk,<sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Bitmask<sp/>position<sp/>for<sp/>IPC<sp/>channel<sp/>5.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__ipc__hal_1ggabb9645a49590790b2fa4116758870991a35960d73dd0c8fff97d222c29ef600e0" kindref="member">NRF_IPC_CHANNEL_6</ref><sp/>=<sp/>IPC_RECEIVE_CNF_CHEN6_Msk,<sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Bitmask<sp/>position<sp/>for<sp/>IPC<sp/>channel<sp/>6.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__ipc__hal_1ggabb9645a49590790b2fa4116758870991a6eebf855b4d252897fbd2a90dd5a5b64" kindref="member">NRF_IPC_CHANNEL_7</ref><sp/>=<sp/>IPC_RECEIVE_CNF_CHEN7_Msk,<sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Bitmask<sp/>position<sp/>for<sp/>IPC<sp/>channel<sp/>7.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(IPC_CH_NUM<sp/>&gt;<sp/>8)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__ipc__hal_1ggabb9645a49590790b2fa4116758870991a9f6067f12f50f8f0b007a66b945a1389" kindref="member">NRF_IPC_CHANNEL_8</ref><sp/><sp/>=<sp/>IPC_RECEIVE_CNF_CHEN8_Msk,<sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Bitmask<sp/>position<sp/>for<sp/>IPC<sp/>channel<sp/>8.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__ipc__hal_1ggabb9645a49590790b2fa4116758870991a80c4795cf75f355a150410bf89dc1a30" kindref="member">NRF_IPC_CHANNEL_9</ref><sp/><sp/>=<sp/>IPC_RECEIVE_CNF_CHEN9_Msk,<sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Bitmask<sp/>position<sp/>for<sp/>IPC<sp/>channel<sp/>9.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__ipc__hal_1ggabb9645a49590790b2fa4116758870991a1f12a4952ad9bc63ae5bd4e653fd65ca" kindref="member">NRF_IPC_CHANNEL_10</ref><sp/>=<sp/>IPC_RECEIVE_CNF_CHEN10_Msk,<sp/></highlight><highlight class="comment">///&lt;<sp/>Bitmask<sp/>position<sp/>for<sp/>IPC<sp/>channel<sp/>10.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__ipc__hal_1ggabb9645a49590790b2fa4116758870991a581340c5c34b1843ba55330a37cd22c1" kindref="member">NRF_IPC_CHANNEL_11</ref><sp/>=<sp/>IPC_RECEIVE_CNF_CHEN11_Msk,<sp/></highlight><highlight class="comment">///&lt;<sp/>Bitmask<sp/>position<sp/>for<sp/>IPC<sp/>channel<sp/>11.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__ipc__hal_1ggabb9645a49590790b2fa4116758870991a86cf3e2309dde54809fcbcbd5b9006e2" kindref="member">NRF_IPC_CHANNEL_12</ref><sp/>=<sp/>IPC_RECEIVE_CNF_CHEN12_Msk,<sp/></highlight><highlight class="comment">///&lt;<sp/>Bitmask<sp/>position<sp/>for<sp/>IPC<sp/>channel<sp/>12.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__ipc__hal_1ggabb9645a49590790b2fa4116758870991aeae7d3c7e46aba4a14214bf3f19e744f" kindref="member">NRF_IPC_CHANNEL_13</ref><sp/>=<sp/>IPC_RECEIVE_CNF_CHEN13_Msk,<sp/></highlight><highlight class="comment">///&lt;<sp/>Bitmask<sp/>position<sp/>for<sp/>IPC<sp/>channel<sp/>13.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__ipc__hal_1ggabb9645a49590790b2fa4116758870991a37fa48e42954775f7d48bda4e212a4d7" kindref="member">NRF_IPC_CHANNEL_14</ref><sp/>=<sp/>IPC_RECEIVE_CNF_CHEN14_Msk,<sp/></highlight><highlight class="comment">///&lt;<sp/>Bitmask<sp/>position<sp/>for<sp/>IPC<sp/>channel<sp/>14.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__ipc__hal_1ggabb9645a49590790b2fa4116758870991a4b5a20f31b6ec54f2fe957e2a6215441" kindref="member">NRF_IPC_CHANNEL_15</ref><sp/>=<sp/>IPC_RECEIVE_CNF_CHEN15_Msk,<sp/></highlight><highlight class="comment">///&lt;<sp/>Bitmask<sp/>position<sp/>for<sp/>IPC<sp/>channel<sp/>15.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>(IPC_CH_NUM<sp/>&gt;<sp/>8)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal">}<sp/><ref refid="group__nrf__ipc__hal_1gabb9645a49590790b2fa4116758870991" kindref="member">nrf_ipc_channel_t</ref>;</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="127"><highlight class="comment">/**<sp/>@brief<sp/>IPC<sp/>interrupts.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal">{</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__ipc__hal_1gga77192a25f197b42c2a31e3e683bd3d06abae4a5540caa0e9c6f1024c5f941ccda" kindref="member">NRF_IPC_INT_RECEIVE_0</ref><sp/><sp/>=<sp/>IPC_INTEN_RECEIVE0_Msk,<sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Interrupt<sp/>on<sp/>receive<sp/>event<sp/>0.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__ipc__hal_1gga77192a25f197b42c2a31e3e683bd3d06a19be256f05563af2bb7f7272c32aa745" kindref="member">NRF_IPC_INT_RECEIVE_1</ref><sp/><sp/>=<sp/>IPC_INTEN_RECEIVE1_Msk,<sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Interrupt<sp/>on<sp/>receive<sp/>event<sp/>1.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__ipc__hal_1gga77192a25f197b42c2a31e3e683bd3d06acb419c7db7db45b68ca755b02d661556" kindref="member">NRF_IPC_INT_RECEIVE_2</ref><sp/><sp/>=<sp/>IPC_INTEN_RECEIVE2_Msk,<sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Interrupt<sp/>on<sp/>receive<sp/>event<sp/>2.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__ipc__hal_1gga77192a25f197b42c2a31e3e683bd3d06afcf36b8f99fb23bdc4a9a645da251f65" kindref="member">NRF_IPC_INT_RECEIVE_3</ref><sp/><sp/>=<sp/>IPC_INTEN_RECEIVE3_Msk,<sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Interrupt<sp/>on<sp/>receive<sp/>event<sp/>3.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__ipc__hal_1gga77192a25f197b42c2a31e3e683bd3d06a837f2448be1df0da4b1b5949c6374507" kindref="member">NRF_IPC_INT_RECEIVE_4</ref><sp/><sp/>=<sp/>IPC_INTEN_RECEIVE4_Msk,<sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Interrupt<sp/>on<sp/>receive<sp/>event<sp/>4.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__ipc__hal_1gga77192a25f197b42c2a31e3e683bd3d06a96acdb4791309d9fccae13db911ad81a" kindref="member">NRF_IPC_INT_RECEIVE_5</ref><sp/><sp/>=<sp/>IPC_INTEN_RECEIVE5_Msk,<sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Interrupt<sp/>on<sp/>receive<sp/>event<sp/>5.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__ipc__hal_1gga77192a25f197b42c2a31e3e683bd3d06aeac120c2fd0a54c262f64d59076a6671" kindref="member">NRF_IPC_INT_RECEIVE_6</ref><sp/><sp/>=<sp/>IPC_INTEN_RECEIVE6_Msk,<sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Interrupt<sp/>on<sp/>receive<sp/>event<sp/>6.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__ipc__hal_1gga77192a25f197b42c2a31e3e683bd3d06a156fbf7941a31112899a39313459b20e" kindref="member">NRF_IPC_INT_RECEIVE_7</ref><sp/><sp/>=<sp/>IPC_INTEN_RECEIVE7_Msk,<sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Interrupt<sp/>on<sp/>receive<sp/>event<sp/>7.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(IPC_EVENTS_NUM<sp/>&gt;<sp/>8)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__ipc__hal_1gga77192a25f197b42c2a31e3e683bd3d06a662ef19fdae6538cc52be94b63e6556e" kindref="member">NRF_IPC_INT_RECEIVE_8</ref><sp/><sp/>=<sp/>IPC_INTEN_RECEIVE8_Msk,<sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Interrupt<sp/>on<sp/>receive<sp/>event<sp/>8.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__ipc__hal_1gga77192a25f197b42c2a31e3e683bd3d06a502efcedefb4dbe38b153db2aae13830" kindref="member">NRF_IPC_INT_RECEIVE_9</ref><sp/><sp/>=<sp/>IPC_INTEN_RECEIVE9_Msk,<sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Interrupt<sp/>on<sp/>receive<sp/>event<sp/>9.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__ipc__hal_1gga77192a25f197b42c2a31e3e683bd3d06a7a3e45f55c3ffba6046c55648cc56bf3" kindref="member">NRF_IPC_INT_RECEIVE_10</ref><sp/>=<sp/>IPC_INTEN_RECEIVE10_Msk,<sp/></highlight><highlight class="comment">///&lt;<sp/>Interrupt<sp/>on<sp/>receive<sp/>event<sp/>10.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__ipc__hal_1gga77192a25f197b42c2a31e3e683bd3d06ab10c0f1cd29cbf7c270491dc6e60df48" kindref="member">NRF_IPC_INT_RECEIVE_11</ref><sp/>=<sp/>IPC_INTEN_RECEIVE11_Msk,<sp/></highlight><highlight class="comment">///&lt;<sp/>Interrupt<sp/>on<sp/>receive<sp/>event<sp/>11.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__ipc__hal_1gga77192a25f197b42c2a31e3e683bd3d06a8290de5550645c6ba5580636ae2f43c9" kindref="member">NRF_IPC_INT_RECEIVE_12</ref><sp/>=<sp/>IPC_INTEN_RECEIVE12_Msk,<sp/></highlight><highlight class="comment">///&lt;<sp/>Interrupt<sp/>on<sp/>receive<sp/>event<sp/>12.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__ipc__hal_1gga77192a25f197b42c2a31e3e683bd3d06a94dacd2a3e1a5adbce15a267387b171d" kindref="member">NRF_IPC_INT_RECEIVE_13</ref><sp/>=<sp/>IPC_INTEN_RECEIVE13_Msk,<sp/></highlight><highlight class="comment">///&lt;<sp/>Interrupt<sp/>on<sp/>receive<sp/>event<sp/>13.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__ipc__hal_1gga77192a25f197b42c2a31e3e683bd3d06a51ad89a307095df12daa7378f6d36895" kindref="member">NRF_IPC_INT_RECEIVE_14</ref><sp/>=<sp/>IPC_INTEN_RECEIVE14_Msk,<sp/></highlight><highlight class="comment">///&lt;<sp/>Interrupt<sp/>on<sp/>receive<sp/>event<sp/>14.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__ipc__hal_1gga77192a25f197b42c2a31e3e683bd3d06a5eca4c9244f9e2a37319e4c4c5bded70" kindref="member">NRF_IPC_INT_RECEIVE_15</ref><sp/>=<sp/>IPC_INTEN_RECEIVE15_Msk,<sp/></highlight><highlight class="comment">///&lt;<sp/>Interrupt<sp/>on<sp/>receive<sp/>event<sp/>15.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>(IPC_EVENTS_NUM<sp/>&gt;<sp/>8)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal">}<sp/><ref refid="group__nrf__ipc__hal_1ga77192a25f197b42c2a31e3e683bd3d06" kindref="member">nrf_ipc_int_mask_t</ref>;</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="151"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="152"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>triggering<sp/>the<sp/>specified<sp/>IPC<sp/>task.</highlight></codeline>
<codeline lineno="153"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="154"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="155"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>task<sp/><sp/>Task<sp/>to<sp/>be<sp/>triggered.</highlight></codeline>
<codeline lineno="156"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__ipc__hal_1gaf34afb4c6f06e8f81de7e455d49b6ad7" kindref="member">nrf_ipc_task_trigger</ref>(NRF_IPC_Type<sp/>*<sp/>p_reg,<sp/><ref refid="group__nrf__ipc__hal_1ga4ace59bc4a2550271489316ce4d8a822" kindref="member">nrf_ipc_task_t</ref><sp/>task);</highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="159"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="160"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>the<sp/>address<sp/>of<sp/>the<sp/>specified<sp/>IPC<sp/>task<sp/>register.</highlight></codeline>
<codeline lineno="161"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="162"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="163"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>task<sp/><sp/>Specified<sp/>task.</highlight></codeline>
<codeline lineno="164"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="165"><highlight class="comment"><sp/>*<sp/>@return<sp/>Address<sp/>of<sp/>the<sp/>specified<sp/>task<sp/>register.</highlight></codeline>
<codeline lineno="166"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__ipc__hal_1ga682d4c9f018a65120f509946b9ddd794" kindref="member">nrf_ipc_task_address_get</ref>(NRF_IPC_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__ipc__hal_1ga4ace59bc4a2550271489316ce4d8a822" kindref="member">nrf_ipc_task_t</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>task);</highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="170"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="171"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>clearing<sp/>the<sp/>specified<sp/>IPC<sp/>event.</highlight></codeline>
<codeline lineno="172"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="173"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="174"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>event<sp/>Event<sp/>to<sp/>clear.</highlight></codeline>
<codeline lineno="175"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__ipc__hal_1ga316c64d6cdb49c33cd219800cae25f41" kindref="member">nrf_ipc_event_clear</ref>(NRF_IPC_Type<sp/>*<sp/>p_reg,<sp/><ref refid="group__nrf__ipc__hal_1ga4ffd2cfae971f5c3727751b6002fdbf8" kindref="member">nrf_ipc_event_t</ref><sp/>event);</highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="178"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="179"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>retrieving<sp/>the<sp/>state<sp/>of<sp/>the<sp/>IPC<sp/>event.</highlight></codeline>
<codeline lineno="180"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="181"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="182"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>event<sp/>Event<sp/>to<sp/>be<sp/>checked.</highlight></codeline>
<codeline lineno="183"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="184"><highlight class="comment"><sp/>*<sp/>@retval<sp/>true<sp/><sp/>The<sp/>event<sp/>has<sp/>been<sp/>generated.</highlight></codeline>
<codeline lineno="185"><highlight class="comment"><sp/>*<sp/>@retval<sp/>false<sp/>The<sp/>event<sp/>has<sp/>not<sp/>been<sp/>generated.</highlight></codeline>
<codeline lineno="186"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrf__ipc__hal_1gaa28ba8de4a793f853fc13995dd8cbb12" kindref="member">nrf_ipc_event_check</ref>(NRF_IPC_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,<sp/><ref refid="group__nrf__ipc__hal_1ga4ffd2cfae971f5c3727751b6002fdbf8" kindref="member">nrf_ipc_event_t</ref><sp/>event);</highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="189"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="190"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>the<sp/>address<sp/>of<sp/>the<sp/>specified<sp/>IPC<sp/>event<sp/>register.</highlight></codeline>
<codeline lineno="191"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="192"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="193"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>event<sp/>Specified<sp/>event.</highlight></codeline>
<codeline lineno="194"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="195"><highlight class="comment"><sp/>*<sp/>@return<sp/>Address<sp/>of<sp/>the<sp/>specified<sp/>event<sp/>register.</highlight></codeline>
<codeline lineno="196"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__ipc__hal_1gaf0dda7f38ffbb194e2d7fe50ecf84bca" kindref="member">nrf_ipc_event_address_get</ref>(NRF_IPC_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__ipc__hal_1ga4ffd2cfae971f5c3727751b6002fdbf8" kindref="member">nrf_ipc_event_t</ref><sp/><sp/><sp/><sp/><sp/><sp/>event);</highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="200"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="201"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>enabling<sp/>specified<sp/>interrupts.</highlight></codeline>
<codeline lineno="202"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="203"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="204"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>mask<sp/><sp/>Mask<sp/>of<sp/>interrupts<sp/>to<sp/>be<sp/>enabled.</highlight></codeline>
<codeline lineno="205"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Use<sp/>@ref<sp/>nrf_ipc_int_mask_t<sp/>values<sp/>for<sp/>bit<sp/>masking.</highlight></codeline>
<codeline lineno="206"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__ipc__hal_1ga63b685bde8d2cfec20bc591379f6dd74" kindref="member">nrf_ipc_int_enable</ref>(NRF_IPC_Type<sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>mask);</highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="209"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="210"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>disabling<sp/>specified<sp/>interrupts.</highlight></codeline>
<codeline lineno="211"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="212"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="213"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>mask<sp/><sp/>Mask<sp/>of<sp/>interrupts<sp/>to<sp/>be<sp/>disabled.</highlight></codeline>
<codeline lineno="214"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Use<sp/>@ref<sp/>nrf_ipc_int_mask_t<sp/>values<sp/>for<sp/>bit<sp/>masking.</highlight></codeline>
<codeline lineno="215"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__ipc__hal_1ga21c1c61abd4fe504202b7a41e8bc1fcf" kindref="member">nrf_ipc_int_disable</ref>(NRF_IPC_Type<sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>mask);</highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="218"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="219"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>checking<sp/>if<sp/>the<sp/>specified<sp/>interrupts<sp/>are<sp/>enabled.</highlight></codeline>
<codeline lineno="220"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="221"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="222"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>mask<sp/><sp/>Mask<sp/>of<sp/>interrupts<sp/>to<sp/>be<sp/>checked.</highlight></codeline>
<codeline lineno="223"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Use<sp/>@ref<sp/>nrf_ipc_int_mask_t<sp/>values<sp/>for<sp/>bit<sp/>masking.</highlight></codeline>
<codeline lineno="224"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="225"><highlight class="comment"><sp/>*<sp/>@return<sp/>Mask<sp/>of<sp/>enabled<sp/>interrupts.</highlight></codeline>
<codeline lineno="226"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__ipc__hal_1gad57a2fbe420b2d1f83173793b07f5954" kindref="member">nrf_ipc_int_enable_check</ref>(NRF_IPC_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>mask);</highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="229"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="230"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>retrieving<sp/>the<sp/>state<sp/>of<sp/>pending<sp/>interrupts<sp/>of<sp/>the<sp/>receive<sp/>event.</highlight></codeline>
<codeline lineno="231"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="232"><highlight class="comment"><sp/>*<sp/>States<sp/>of<sp/>pending<sp/>interrupt<sp/>are<sp/>saved<sp/>as<sp/>a<sp/>bitmask.<sp/>First<sp/>position<sp/>corresponds<sp/>with</highlight></codeline>
<codeline lineno="233"><highlight class="comment"><sp/>*<sp/>EVENTS_RECEIVE[0]<sp/>event,<sp/>second<sp/>one<sp/>with<sp/>EVENTS_RECEIVE[1]<sp/>etc.</highlight></codeline>
<codeline lineno="234"><highlight class="comment"><sp/>*<sp/>One<sp/>set<sp/>at<sp/>particular<sp/>position<sp/>means<sp/>that<sp/>interrupt<sp/>for<sp/>event<sp/>is<sp/>pending.</highlight></codeline>
<codeline lineno="235"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="236"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="237"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="238"><highlight class="comment"><sp/>*<sp/>@return<sp/>Bitmask<sp/>with<sp/>information<sp/>about<sp/>pending<sp/>interrupts<sp/>of<sp/>EVENTS_RECEIVE[n]<sp/>events.</highlight></codeline>
<codeline lineno="239"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Use<sp/>@ref<sp/>nrf_ipc_int_mask_t<sp/>values<sp/>for<sp/>bit<sp/>masking.</highlight></codeline>
<codeline lineno="240"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__ipc__hal_1ga14eb0cf0cbb864c2499ff8ebfbd34b46" kindref="member">nrf_ipc_int_pending_get</ref>(NRF_IPC_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="243"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="244"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>the<sp/>DPPI<sp/>subscribe<sp/>configuration<sp/>for<sp/>a<sp/>given</highlight></codeline>
<codeline lineno="245"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IPC<sp/>task.</highlight></codeline>
<codeline lineno="246"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="247"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="248"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>task<sp/><sp/><sp/><sp/>Task<sp/>for<sp/>which<sp/>to<sp/>set<sp/>the<sp/>configuration.</highlight></codeline>
<codeline lineno="249"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>channel<sp/>DPPI<sp/>channel<sp/>through<sp/>which<sp/>to<sp/>subscribe<sp/>events.</highlight></codeline>
<codeline lineno="250"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__ipc__hal_1ga37e5b3db5560b3d5e3fca13411ad3fa2" kindref="member">nrf_ipc_subscribe_set</ref>(NRF_IPC_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__ipc__hal_1ga4ace59bc4a2550271489316ce4d8a822" kindref="member">nrf_ipc_task_t</ref><sp/>task,</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>channel);</highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="255"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="256"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>clearing<sp/>the<sp/>DPPI<sp/>subscribe<sp/>configuration<sp/>for<sp/>a<sp/>given</highlight></codeline>
<codeline lineno="257"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IPC<sp/>task.</highlight></codeline>
<codeline lineno="258"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="259"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="260"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>task<sp/><sp/>Task<sp/>for<sp/>which<sp/>to<sp/>clear<sp/>the<sp/>configuration.</highlight></codeline>
<codeline lineno="261"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__ipc__hal_1ga9e97cecad60b6b88f49c5e9c58f69e32" kindref="member">nrf_ipc_subscribe_clear</ref>(NRF_IPC_Type<sp/>*<sp/>p_reg,<sp/><ref refid="group__nrf__ipc__hal_1ga4ace59bc4a2550271489316ce4d8a822" kindref="member">nrf_ipc_task_t</ref><sp/>task);</highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="264"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="265"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>the<sp/>DPPI<sp/>publish<sp/>configuration<sp/>for<sp/>a<sp/>given</highlight></codeline>
<codeline lineno="266"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IPC<sp/>event.</highlight></codeline>
<codeline lineno="267"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="268"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="269"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>event<sp/><sp/><sp/>Event<sp/>for<sp/>which<sp/>to<sp/>set<sp/>the<sp/>configuration.</highlight></codeline>
<codeline lineno="270"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>channel<sp/>DPPI<sp/>channel<sp/>through<sp/>which<sp/>to<sp/>publish<sp/>the<sp/>event.</highlight></codeline>
<codeline lineno="271"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__ipc__hal_1ga456e37ac4b68680a382cdfde0522d411" kindref="member">nrf_ipc_publish_set</ref>(NRF_IPC_Type<sp/>*<sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__ipc__hal_1ga4ffd2cfae971f5c3727751b6002fdbf8" kindref="member">nrf_ipc_event_t</ref><sp/>event,</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>channel);</highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="276"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="277"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>clearing<sp/>the<sp/>DPPI<sp/>publish<sp/>configuration<sp/>for<sp/>a<sp/>given</highlight></codeline>
<codeline lineno="278"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IPC<sp/>event.</highlight></codeline>
<codeline lineno="279"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="280"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="281"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>event<sp/>Event<sp/>for<sp/>which<sp/>to<sp/>clear<sp/>the<sp/>configuration.</highlight></codeline>
<codeline lineno="282"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__ipc__hal_1gab8b0dc7cdd1469006d0fa52effe0d225" kindref="member">nrf_ipc_publish_clear</ref>(NRF_IPC_Type<sp/>*<sp/>p_reg,<sp/><ref refid="group__nrf__ipc__hal_1ga4ffd2cfae971f5c3727751b6002fdbf8" kindref="member">nrf_ipc_event_t</ref><sp/>event);</highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="285"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="286"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>the<sp/>configuration<sp/>of<sp/>the<sp/>specified<sp/>send<sp/>task.</highlight></codeline>
<codeline lineno="287"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="288"><highlight class="comment"><sp/>*<sp/>@p<sp/>channels_mask<sp/>bitmask<sp/>must<sp/>be<sp/>created<sp/>with<sp/>@ref<sp/>nrf_ipc_channel_t<sp/>values:</highlight></codeline>
<codeline lineno="289"><highlight class="comment"><sp/>*<sp/>NRF_IPC_CHANNEL_0<sp/>|<sp/>NRF_IPC_CHANNEL_1<sp/>|<sp/>...<sp/>|<sp/>NRF_IPC_CHANNEL_n</highlight></codeline>
<codeline lineno="290"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="291"><highlight class="comment"><sp/>*<sp/>@note<sp/>This<sp/>function<sp/>overrides<sp/>current<sp/>configuration.</highlight></codeline>
<codeline lineno="292"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="293"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="294"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>index<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Index<sp/>of<sp/>the<sp/>send<sp/>task.</highlight></codeline>
<codeline lineno="295"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>channels_mask<sp/>Bitmask<sp/>specifying<sp/>channels<sp/>that<sp/>are<sp/>to<sp/>be<sp/>enabled<sp/>for<sp/>this<sp/>task.</highlight></codeline>
<codeline lineno="296"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__ipc__hal_1gac247d5f733dce320409100e31c61c58e" kindref="member">nrf_ipc_send_config_set</ref>(NRF_IPC_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index,</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/>channels_mask);</highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="301"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="302"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>the<sp/>configuration<sp/>of<sp/>the<sp/>specified<sp/>send<sp/>task.</highlight></codeline>
<codeline lineno="303"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="304"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="305"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>index<sp/>Index<sp/>of<sp/>the<sp/>send<sp/>event<sp/>configuration.</highlight></codeline>
<codeline lineno="306"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="307"><highlight class="comment"><sp/>*<sp/>@retval<sp/>Bitmask<sp/>of<sp/>channels<sp/>enabled<sp/>for<sp/>this<sp/>task.</highlight></codeline>
<codeline lineno="308"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__ipc__hal_1ga790cf25e0efc727a00a626365911af46" kindref="member">nrf_ipc_send_config_get</ref>(NRF_IPC_Type<sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>p_reg,<sp/>uint8_t<sp/>index);</highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="311"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="312"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>assigning<sp/>receive<sp/>event<sp/>to<sp/>the<sp/>IPC<sp/>channels.</highlight></codeline>
<codeline lineno="313"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="314"><highlight class="comment"><sp/>*<sp/>@p<sp/>channels_mask<sp/>bitmask<sp/>must<sp/>be<sp/>created<sp/>with<sp/>@ref<sp/>nrf_ipc_channel_t<sp/>values:</highlight></codeline>
<codeline lineno="315"><highlight class="comment"><sp/>*<sp/>NRF_IPC_CHANNEL_0<sp/>|<sp/>NRF_IPC_CHANNEL_1<sp/>|<sp/>...<sp/>|<sp/>NRF_IPC_CHANNEL_n</highlight></codeline>
<codeline lineno="316"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="317"><highlight class="comment"><sp/>*<sp/>@note<sp/>This<sp/>function<sp/>overrides<sp/>current<sp/>configuration.</highlight></codeline>
<codeline lineno="318"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="319"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="320"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>index<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Index<sp/>of<sp/>the<sp/>receive<sp/>event<sp/>configuration.</highlight></codeline>
<codeline lineno="321"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>channels_mask<sp/>Bitmask<sp/>with<sp/>IPC<sp/>channels<sp/>from<sp/>which<sp/>the<sp/>receive<sp/>event</highlight></codeline>
<codeline lineno="322"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>will<sp/>generate<sp/>interrupts.</highlight></codeline>
<codeline lineno="323"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__ipc__hal_1ga253a3fd8e12378eda938edc30c0c43b3" kindref="member">nrf_ipc_receive_config_set</ref>(NRF_IPC_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index,</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/>channels_mask);</highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="328"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="329"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>receive<sp/>event<sp/>configuration.</highlight></codeline>
<codeline lineno="330"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="331"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="332"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>index<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Index<sp/>of<sp/>the<sp/>receive<sp/>event<sp/>configuration.</highlight></codeline>
<codeline lineno="333"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="334"><highlight class="comment"><sp/>*<sp/>@return<sp/>Mask<sp/>of<sp/>channels<sp/>connected<sp/>with<sp/>receive<sp/>event.</highlight></codeline>
<codeline lineno="335"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__ipc__hal_1gaac5cb7607bab2e163ce1547c09625877" kindref="member">nrf_ipc_receive_config_get</ref>(NRF_IPC_Type<sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>p_reg,<sp/>uint8_t<sp/>index);</highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="338"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="339"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>storing<sp/>data<sp/>in<sp/>general<sp/>purpose<sp/>memory<sp/>cell.</highlight></codeline>
<codeline lineno="340"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="341"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="342"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>index<sp/>Index<sp/>of<sp/>the<sp/>general<sp/>purpose<sp/>memory<sp/>cell.</highlight></codeline>
<codeline lineno="343"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>data<sp/><sp/>Data<sp/>to<sp/>be<sp/>stored.</highlight></codeline>
<codeline lineno="344"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__ipc__hal_1ga6d2875c7dff0dca567f9d3f3629c5518" kindref="member">nrf_ipc_gpmem_set</ref>(NRF_IPC_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index,</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/>data);</highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="349"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="350"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>value<sp/>of<sp/>the<sp/>general<sp/>purpose<sp/>memory<sp/>cell.</highlight></codeline>
<codeline lineno="351"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="352"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="353"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>index<sp/>Index<sp/>of<sp/>the<sp/>general<sp/>purpose<sp/>memory<sp/>cell.</highlight></codeline>
<codeline lineno="354"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="355"><highlight class="comment"><sp/>*<sp/>@return<sp/>Stored<sp/>data.</highlight></codeline>
<codeline lineno="356"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__ipc__hal_1ga3793c3ab49b52db7622354fddcfa5853" kindref="member">nrf_ipc_gpmem_get</ref>(NRF_IPC_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,<sp/>uint8_t<sp/>index);</highlight></codeline>
<codeline lineno="358"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="359"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="360"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>SEND<sp/>task<sp/>by<sp/>its<sp/>index.</highlight></codeline>
<codeline lineno="361"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="362"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>index<sp/>Index<sp/>of<sp/>the<sp/>SEND<sp/>task.</highlight></codeline>
<codeline lineno="363"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="364"><highlight class="comment"><sp/>*<sp/>@return<sp/>SEND<sp/>task.</highlight></codeline>
<codeline lineno="365"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal">NRF_STATIC_INLINE<sp/><ref refid="group__nrf__ipc__hal_1ga4ace59bc4a2550271489316ce4d8a822" kindref="member">nrf_ipc_task_t</ref><sp/><ref refid="group__nrf__ipc__hal_1ga7ec4734b14c9dc24ed6ea89a90082f90" kindref="member">nrf_ipc_send_task_get</ref>(uint8_t<sp/>index);</highlight></codeline>
<codeline lineno="367"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="368"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="369"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>RECEIVE<sp/>event<sp/>by<sp/>its<sp/>index.</highlight></codeline>
<codeline lineno="370"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="371"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>index<sp/>Index<sp/>of<sp/>the<sp/>RECEIVE<sp/>event.</highlight></codeline>
<codeline lineno="372"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="373"><highlight class="comment"><sp/>*<sp/>@return<sp/>RECEIVE<sp/>event.</highlight></codeline>
<codeline lineno="374"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="375"><highlight class="normal">NRF_STATIC_INLINE<sp/><ref refid="group__nrf__ipc__hal_1ga4ffd2cfae971f5c3727751b6002fdbf8" kindref="member">nrf_ipc_event_t</ref><sp/><ref refid="group__nrf__ipc__hal_1ga8ada127d84b91486176870e11b9b3382" kindref="member">nrf_ipc_receive_event_get</ref>(uint8_t<sp/>index);</highlight></codeline>
<codeline lineno="376"><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>NRF_DECLARE_ONLY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__ipc__hal_1gaf34afb4c6f06e8f81de7e455d49b6ad7" kindref="member">nrf_ipc_task_trigger</ref>(NRF_IPC_Type<sp/>*<sp/>p_reg,<sp/><ref refid="group__nrf__ipc__hal_1ga4ace59bc4a2550271489316ce4d8a822" kindref="member">nrf_ipc_task_t</ref><sp/>task)</highlight></codeline>
<codeline lineno="380"><highlight class="normal">{</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/>*((</highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint32_t<sp/>*)((uint8_t<sp/>*)p_reg<sp/>+<sp/>(uint32_t)task))<sp/>=<sp/>0x1UL;</highlight></codeline>
<codeline lineno="382"><highlight class="normal">}</highlight></codeline>
<codeline lineno="383"><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__ipc__hal_1ga682d4c9f018a65120f509946b9ddd794" kindref="member">nrf_ipc_task_address_get</ref>(NRF_IPC_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__ipc__hal_1ga4ace59bc4a2550271489316ce4d8a822" kindref="member">nrf_ipc_task_t</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>task)</highlight></codeline>
<codeline lineno="386"><highlight class="normal">{</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((uint32_t)p_reg<sp/>+<sp/>(uint32_t)task);</highlight></codeline>
<codeline lineno="388"><highlight class="normal">}</highlight></codeline>
<codeline lineno="389"><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__ipc__hal_1ga316c64d6cdb49c33cd219800cae25f41" kindref="member">nrf_ipc_event_clear</ref>(NRF_IPC_Type<sp/>*<sp/>p_reg,<sp/><ref refid="group__nrf__ipc__hal_1ga4ffd2cfae971f5c3727751b6002fdbf8" kindref="member">nrf_ipc_event_t</ref><sp/>event)</highlight></codeline>
<codeline lineno="391"><highlight class="normal">{</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/>*((</highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint32_t<sp/>*)((uint8_t<sp/>*)p_reg<sp/>+<sp/>(uint32_t)event))<sp/>=<sp/>0x0UL;</highlight></codeline>
<codeline lineno="393"><highlight class="normal">}</highlight></codeline>
<codeline lineno="394"><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrf__ipc__hal_1gaa28ba8de4a793f853fc13995dd8cbb12" kindref="member">nrf_ipc_event_check</ref>(NRF_IPC_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,<sp/><ref refid="group__nrf__ipc__hal_1ga4ffd2cfae971f5c3727751b6002fdbf8" kindref="member">nrf_ipc_event_t</ref><sp/>event)</highlight></codeline>
<codeline lineno="396"><highlight class="normal">{</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>nrf_event_check(p_reg,<sp/>event);</highlight></codeline>
<codeline lineno="398"><highlight class="normal">}</highlight></codeline>
<codeline lineno="399"><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__ipc__hal_1gaf0dda7f38ffbb194e2d7fe50ecf84bca" kindref="member">nrf_ipc_event_address_get</ref>(NRF_IPC_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__ipc__hal_1ga4ffd2cfae971f5c3727751b6002fdbf8" kindref="member">nrf_ipc_event_t</ref><sp/><sp/><sp/><sp/><sp/><sp/>event)</highlight></codeline>
<codeline lineno="402"><highlight class="normal">{</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((uint32_t)p_reg<sp/>+<sp/>(uint32_t)event);</highlight></codeline>
<codeline lineno="404"><highlight class="normal">}</highlight></codeline>
<codeline lineno="405"><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__ipc__hal_1ga63b685bde8d2cfec20bc591379f6dd74" kindref="member">nrf_ipc_int_enable</ref>(NRF_IPC_Type<sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>mask)</highlight></codeline>
<codeline lineno="407"><highlight class="normal">{</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;INTENSET<sp/>=<sp/>mask;</highlight></codeline>
<codeline lineno="409"><highlight class="normal">}</highlight></codeline>
<codeline lineno="410"><highlight class="normal"></highlight></codeline>
<codeline lineno="411"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__ipc__hal_1ga21c1c61abd4fe504202b7a41e8bc1fcf" kindref="member">nrf_ipc_int_disable</ref>(NRF_IPC_Type<sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>mask)</highlight></codeline>
<codeline lineno="412"><highlight class="normal">{</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;INTENCLR<sp/>=<sp/>mask;</highlight></codeline>
<codeline lineno="414"><highlight class="normal">}</highlight></codeline>
<codeline lineno="415"><highlight class="normal"></highlight></codeline>
<codeline lineno="416"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__ipc__hal_1gad57a2fbe420b2d1f83173793b07f5954" kindref="member">nrf_ipc_int_enable_check</ref>(NRF_IPC_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>mask)</highlight></codeline>
<codeline lineno="417"><highlight class="normal">{</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p_reg-&gt;INTENSET<sp/>&amp;<sp/>mask;</highlight></codeline>
<codeline lineno="419"><highlight class="normal">}</highlight></codeline>
<codeline lineno="420"><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__ipc__hal_1ga14eb0cf0cbb864c2499ff8ebfbd34b46" kindref="member">nrf_ipc_int_pending_get</ref>(NRF_IPC_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="422"><highlight class="normal">{</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p_reg-&gt;INTPEND;</highlight></codeline>
<codeline lineno="424"><highlight class="normal">}</highlight></codeline>
<codeline lineno="425"><highlight class="normal"></highlight></codeline>
<codeline lineno="426"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__ipc__hal_1ga37e5b3db5560b3d5e3fca13411ad3fa2" kindref="member">nrf_ipc_subscribe_set</ref>(NRF_IPC_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__ipc__hal_1ga4ace59bc4a2550271489316ce4d8a822" kindref="member">nrf_ipc_task_t</ref><sp/>task,</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>channel)</highlight></codeline>
<codeline lineno="429"><highlight class="normal">{</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/>*((</highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint32_t<sp/>*)<sp/>((uint8_t<sp/>*)<sp/>p_reg<sp/>+<sp/>(uint32_t)<sp/>task<sp/>+<sp/>0x80uL))<sp/>=</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)channel<sp/>|<sp/>NRF_SUBSCRIBE_PUBLISH_ENABLE);</highlight></codeline>
<codeline lineno="432"><highlight class="normal">}</highlight></codeline>
<codeline lineno="433"><highlight class="normal"></highlight></codeline>
<codeline lineno="434"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__ipc__hal_1ga9e97cecad60b6b88f49c5e9c58f69e32" kindref="member">nrf_ipc_subscribe_clear</ref>(NRF_IPC_Type<sp/>*<sp/>p_reg,<sp/><ref refid="group__nrf__ipc__hal_1ga4ace59bc4a2550271489316ce4d8a822" kindref="member">nrf_ipc_task_t</ref><sp/>task)</highlight></codeline>
<codeline lineno="435"><highlight class="normal">{</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/>*((</highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint32_t<sp/>*)<sp/>((uint8_t<sp/>*)<sp/>p_reg<sp/>+<sp/>(uint32_t)<sp/>task<sp/>+<sp/>0x80uL))<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="437"><highlight class="normal">}</highlight></codeline>
<codeline lineno="438"><highlight class="normal"></highlight></codeline>
<codeline lineno="439"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__ipc__hal_1ga456e37ac4b68680a382cdfde0522d411" kindref="member">nrf_ipc_publish_set</ref>(NRF_IPC_Type<sp/>*<sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__ipc__hal_1ga4ffd2cfae971f5c3727751b6002fdbf8" kindref="member">nrf_ipc_event_t</ref><sp/>event,</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>channel)</highlight></codeline>
<codeline lineno="442"><highlight class="normal">{</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/>*((</highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint32_t<sp/>*)<sp/>((uint8_t<sp/>*)<sp/>p_reg<sp/>+<sp/>(uint32_t)<sp/>event<sp/>+<sp/>0x80uL))<sp/>=</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)channel<sp/>|<sp/>NRF_SUBSCRIBE_PUBLISH_ENABLE);</highlight></codeline>
<codeline lineno="445"><highlight class="normal">}</highlight></codeline>
<codeline lineno="446"><highlight class="normal"></highlight></codeline>
<codeline lineno="447"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__ipc__hal_1gab8b0dc7cdd1469006d0fa52effe0d225" kindref="member">nrf_ipc_publish_clear</ref>(NRF_IPC_Type<sp/>*<sp/><sp/>p_reg,<sp/><ref refid="group__nrf__ipc__hal_1ga4ffd2cfae971f5c3727751b6002fdbf8" kindref="member">nrf_ipc_event_t</ref><sp/>event)</highlight></codeline>
<codeline lineno="448"><highlight class="normal">{</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/>*((</highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint32_t<sp/>*)<sp/>((uint8_t<sp/>*)<sp/>p_reg<sp/>+<sp/>(uint32_t)<sp/>event<sp/>+<sp/>0x80uL))<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="450"><highlight class="normal">}</highlight></codeline>
<codeline lineno="451"><highlight class="normal"></highlight></codeline>
<codeline lineno="452"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__ipc__hal_1gac247d5f733dce320409100e31c61c58e" kindref="member">nrf_ipc_send_config_set</ref>(NRF_IPC_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index,</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/>channels_mask)</highlight></codeline>
<codeline lineno="455"><highlight class="normal">{</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;SEND_CNF[index]<sp/>=<sp/>channels_mask;</highlight></codeline>
<codeline lineno="457"><highlight class="normal">}</highlight></codeline>
<codeline lineno="458"><highlight class="normal"></highlight></codeline>
<codeline lineno="459"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__ipc__hal_1ga790cf25e0efc727a00a626365911af46" kindref="member">nrf_ipc_send_config_get</ref>(NRF_IPC_Type<sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>p_reg,<sp/>uint8_t<sp/>index)</highlight></codeline>
<codeline lineno="460"><highlight class="normal">{</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p_reg-&gt;SEND_CNF[index];</highlight></codeline>
<codeline lineno="462"><highlight class="normal">}</highlight></codeline>
<codeline lineno="463"><highlight class="normal"></highlight></codeline>
<codeline lineno="464"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__ipc__hal_1ga253a3fd8e12378eda938edc30c0c43b3" kindref="member">nrf_ipc_receive_config_set</ref>(NRF_IPC_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index,</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/>channels_mask)</highlight></codeline>
<codeline lineno="467"><highlight class="normal">{</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;RECEIVE_CNF[index]<sp/>=<sp/>channels_mask;</highlight></codeline>
<codeline lineno="469"><highlight class="normal">}</highlight></codeline>
<codeline lineno="470"><highlight class="normal"></highlight></codeline>
<codeline lineno="471"><highlight class="normal"></highlight></codeline>
<codeline lineno="472"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__ipc__hal_1gaac5cb7607bab2e163ce1547c09625877" kindref="member">nrf_ipc_receive_config_get</ref>(NRF_IPC_Type<sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>p_reg,<sp/>uint8_t<sp/>index)</highlight></codeline>
<codeline lineno="473"><highlight class="normal">{</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p_reg-&gt;RECEIVE_CNF[index];</highlight></codeline>
<codeline lineno="475"><highlight class="normal">}</highlight></codeline>
<codeline lineno="476"><highlight class="normal"></highlight></codeline>
<codeline lineno="477"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__ipc__hal_1ga6d2875c7dff0dca567f9d3f3629c5518" kindref="member">nrf_ipc_gpmem_set</ref>(NRF_IPC_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index,</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/>data)</highlight></codeline>
<codeline lineno="480"><highlight class="normal">{</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__glue_1ga9698a3f6b6bea455d2b54a79e514ee36" kindref="member">NRFX_ASSERT</ref>(index<sp/>&lt;<sp/>IPC_GPMEM_NUM);</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;GPMEM[index]<sp/>=<sp/>data;</highlight></codeline>
<codeline lineno="483"><highlight class="normal">}</highlight></codeline>
<codeline lineno="484"><highlight class="normal"></highlight></codeline>
<codeline lineno="485"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__ipc__hal_1ga3793c3ab49b52db7622354fddcfa5853" kindref="member">nrf_ipc_gpmem_get</ref>(NRF_IPC_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,<sp/><sp/>uint8_t<sp/>index)</highlight></codeline>
<codeline lineno="486"><highlight class="normal">{</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__glue_1ga9698a3f6b6bea455d2b54a79e514ee36" kindref="member">NRFX_ASSERT</ref>(index<sp/>&lt;<sp/>IPC_GPMEM_NUM);</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p_reg-&gt;GPMEM[index];</highlight></codeline>
<codeline lineno="489"><highlight class="normal">}</highlight></codeline>
<codeline lineno="490"><highlight class="normal"></highlight></codeline>
<codeline lineno="491"><highlight class="normal">NRF_STATIC_INLINE<sp/><ref refid="group__nrf__ipc__hal_1ga4ace59bc4a2550271489316ce4d8a822" kindref="member">nrf_ipc_task_t</ref><sp/><ref refid="group__nrf__ipc__hal_1ga7ec4734b14c9dc24ed6ea89a90082f90" kindref="member">nrf_ipc_send_task_get</ref>(uint8_t<sp/>index)</highlight></codeline>
<codeline lineno="492"><highlight class="normal">{</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__glue_1ga9698a3f6b6bea455d2b54a79e514ee36" kindref="member">NRFX_ASSERT</ref>(index<sp/>&lt;<sp/>IPC_CH_NUM);</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="group__nrf__ipc__hal_1ga4ace59bc4a2550271489316ce4d8a822" kindref="member">nrf_ipc_task_t</ref>)(<ref refid="group__nrfx__common_1gaf356c97c2527d9ac57b04dd9f12fc9d3" kindref="member">NRFX_OFFSETOF</ref>(NRF_IPC_Type,<sp/>TASKS_SEND[index]));</highlight></codeline>
<codeline lineno="495"><highlight class="normal">}</highlight></codeline>
<codeline lineno="496"><highlight class="normal"></highlight></codeline>
<codeline lineno="497"><highlight class="normal">NRF_STATIC_INLINE<sp/><ref refid="group__nrf__ipc__hal_1ga4ffd2cfae971f5c3727751b6002fdbf8" kindref="member">nrf_ipc_event_t</ref><sp/><ref refid="group__nrf__ipc__hal_1ga8ada127d84b91486176870e11b9b3382" kindref="member">nrf_ipc_receive_event_get</ref>(uint8_t<sp/>index)</highlight></codeline>
<codeline lineno="498"><highlight class="normal">{</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__glue_1ga9698a3f6b6bea455d2b54a79e514ee36" kindref="member">NRFX_ASSERT</ref>(index<sp/>&lt;<sp/>IPC_CH_NUM);</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="group__nrf__ipc__hal_1ga4ffd2cfae971f5c3727751b6002fdbf8" kindref="member">nrf_ipc_event_t</ref>)(<ref refid="group__nrfx__common_1gaf356c97c2527d9ac57b04dd9f12fc9d3" kindref="member">NRFX_OFFSETOF</ref>(NRF_IPC_Type,<sp/>EVENTS_RECEIVE[index]));</highlight></codeline>
<codeline lineno="501"><highlight class="normal">}</highlight></codeline>
<codeline lineno="502"><highlight class="normal"></highlight></codeline>
<codeline lineno="503"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRF_DECLARE_ONLY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="504"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="505"><highlight class="comment">/**<sp/>@}<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="506"><highlight class="normal"></highlight></codeline>
<codeline lineno="507"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="508"><highlight class="normal">}</highlight></codeline>
<codeline lineno="509"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="510"><highlight class="normal"></highlight></codeline>
<codeline lineno="511"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRF_IPC_H__</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="hal/nrf_ipc.h"/>
  </compounddef>
</doxygen>
