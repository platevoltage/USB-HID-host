<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="group__nrf__rtc__hal" kind="group">
    <compoundname>nrf_rtc_hal</compoundname>
    <title>RTC HAL</title>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="group__nrf__rtc__hal_1gab1bbbc39c6dac153baf61aeae33c4274" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_rtc_task_t</name>
        <enumvalue id="group__nrf__rtc__hal_1ggab1bbbc39c6dac153baf61aeae33c4274a2a8ffc1fb20f19a5b14826564e5d03e5" prot="public">
          <name>NRF_RTC_TASK_START</name>
          <initializer>= offsetof(NRF_RTC_Type,TASKS_START)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Start. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__rtc__hal_1ggab1bbbc39c6dac153baf61aeae33c4274a6dbaa4bbd6d58e079767f0309239eec1" prot="public">
          <name>NRF_RTC_TASK_STOP</name>
          <initializer>= offsetof(NRF_RTC_Type,TASKS_STOP)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Stop. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__rtc__hal_1ggab1bbbc39c6dac153baf61aeae33c4274a0b5cbfbb54397b0ec8ea8fb73f4a7bc0" prot="public">
          <name>NRF_RTC_TASK_CLEAR</name>
          <initializer>= offsetof(NRF_RTC_Type,TASKS_CLEAR)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Clear. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__rtc__hal_1ggab1bbbc39c6dac153baf61aeae33c4274a4cda1feac46eb1092cad53e9abe1a3d2" prot="public">
          <name>NRF_RTC_TASK_TRIGGER_OVERFLOW</name>
          <initializer>= offsetof(NRF_RTC_Type,TASKS_TRIGOVRFLW)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Trigger overflow. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__rtc__hal_1ggab1bbbc39c6dac153baf61aeae33c4274a500cbb77177a4f236e3d94a710bcbb48" prot="public">
          <name>NRF_RTC_TASK_CAPTURE_0</name>
          <initializer>= offsetof(NRF_RTC_Type,TASKS_CAPTURE[0])</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Capture the counter value on channel 0. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__rtc__hal_1ggab1bbbc39c6dac153baf61aeae33c4274a75ece93d72daf272e45895e0c29102cc" prot="public">
          <name>NRF_RTC_TASK_CAPTURE_1</name>
          <initializer>= offsetof(NRF_RTC_Type,TASKS_CAPTURE[1])</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Capture the counter value on channel 1. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__rtc__hal_1ggab1bbbc39c6dac153baf61aeae33c4274aeda291fc479b7454aee56e0ab6301804" prot="public">
          <name>NRF_RTC_TASK_CAPTURE_2</name>
          <initializer>= offsetof(NRF_RTC_Type,TASKS_CAPTURE[2])</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Capture the counter value on channel 2. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__rtc__hal_1ggab1bbbc39c6dac153baf61aeae33c4274a62e9e4c41b7d1406a91541ef21e247e9" prot="public">
          <name>NRF_RTC_TASK_CAPTURE_3</name>
          <initializer>= offsetof(NRF_RTC_Type,TASKS_CAPTURE[3])</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Capture the counter value on channel 3. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>RTC tasks. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_rtc.h" line="94" column="1" bodyfile="hal/nrf_rtc.h" bodystart="95" bodyend="106"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__rtc__hal_1gaeefe46b9280fd5e11516b4148b9c5950" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_rtc_event_t</name>
        <enumvalue id="group__nrf__rtc__hal_1ggaeefe46b9280fd5e11516b4148b9c5950a1c477c236900018c2dec4265129739c7" prot="public">
          <name>NRF_RTC_EVENT_TICK</name>
          <initializer>= offsetof(NRF_RTC_Type,EVENTS_TICK)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Tick event. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__rtc__hal_1ggaeefe46b9280fd5e11516b4148b9c5950acca3da90aab0fc0950facce3d9c60b9c" prot="public">
          <name>NRF_RTC_EVENT_OVERFLOW</name>
          <initializer>= offsetof(NRF_RTC_Type,EVENTS_OVRFLW)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Overflow event. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__rtc__hal_1ggaeefe46b9280fd5e11516b4148b9c5950aed2f00b3d07e65411e4b63982efd2e07" prot="public">
          <name>NRF_RTC_EVENT_COMPARE_0</name>
          <initializer>= offsetof(NRF_RTC_Type,EVENTS_COMPARE[0])</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Compare 0 event. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__rtc__hal_1ggaeefe46b9280fd5e11516b4148b9c5950a4910d903ba14a05187dedfcc842ef26a" prot="public">
          <name>NRF_RTC_EVENT_COMPARE_1</name>
          <initializer>= offsetof(NRF_RTC_Type,EVENTS_COMPARE[1])</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Compare 1 event. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__rtc__hal_1ggaeefe46b9280fd5e11516b4148b9c5950a913f4348d8da28f6253ffcca803ed937" prot="public">
          <name>NRF_RTC_EVENT_COMPARE_2</name>
          <initializer>= offsetof(NRF_RTC_Type,EVENTS_COMPARE[2])</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Compare 2 event. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__rtc__hal_1ggaeefe46b9280fd5e11516b4148b9c5950af7b99708af83d76a4d4b59116f328bbc" prot="public">
          <name>NRF_RTC_EVENT_COMPARE_3</name>
          <initializer>= offsetof(NRF_RTC_Type,EVENTS_COMPARE[3])</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Compare 3 event. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>RTC events. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_rtc.h" line="109" column="1" bodyfile="hal/nrf_rtc.h" bodystart="110" bodyend="117"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__rtc__hal_1ga22211dc20a5c2f6cf1b43039d2bae4a3" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_rtc_int_t</name>
        <enumvalue id="group__nrf__rtc__hal_1gga22211dc20a5c2f6cf1b43039d2bae4a3ab01e1e883741734b5cac05c92efc952e" prot="public">
          <name>NRF_RTC_INT_TICK_MASK</name>
          <initializer>= RTC_INTENSET_TICK_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>RTC interrupt from tick event. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__rtc__hal_1gga22211dc20a5c2f6cf1b43039d2bae4a3a18c66e1dcbc43cd4c82a6f5d0fb8d922" prot="public">
          <name>NRF_RTC_INT_OVERFLOW_MASK</name>
          <initializer>= RTC_INTENSET_OVRFLW_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>RTC interrupt from overflow event. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__rtc__hal_1gga22211dc20a5c2f6cf1b43039d2bae4a3acb0d6d71f2dcb78604936e1ba924ab9b" prot="public">
          <name>NRF_RTC_INT_COMPARE0_MASK</name>
          <initializer>= RTC_INTENSET_COMPARE0_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>RTC interrupt from compare event on channel 0. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__rtc__hal_1gga22211dc20a5c2f6cf1b43039d2bae4a3af842e26d22b97607c1b778c4119b82a6" prot="public">
          <name>NRF_RTC_INT_COMPARE1_MASK</name>
          <initializer>= RTC_INTENSET_COMPARE1_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>RTC interrupt from compare event on channel 1. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__rtc__hal_1gga22211dc20a5c2f6cf1b43039d2bae4a3adf3bfc6e4f76ed0ecb3b1784d3dad2e0" prot="public">
          <name>NRF_RTC_INT_COMPARE2_MASK</name>
          <initializer>= RTC_INTENSET_COMPARE2_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>RTC interrupt from compare event on channel 2. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__rtc__hal_1gga22211dc20a5c2f6cf1b43039d2bae4a3a04d8a6817769b5b2b231b7ebfcde893c" prot="public">
          <name>NRF_RTC_INT_COMPARE3_MASK</name>
          <initializer>= RTC_INTENSET_COMPARE3_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>RTC interrupt from compare event on channel 3. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>RTC interrupts. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_rtc.h" line="120" column="1" bodyfile="hal/nrf_rtc.h" bodystart="121" bodyend="128"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__nrf__rtc__hal_1ga0ddee0d5275bca0f2cfe4f6f576ae971" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_rtc_cc_set</definition>
        <argsstring>(NRF_RTC_Type *p_reg, uint32_t ch, uint32_t cc_val)</argsstring>
        <name>nrf_rtc_cc_set</name>
        <param>
          <type>NRF_RTC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>ch</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>cc_val</declname>
        </param>
        <briefdescription>
<para>Function for setting a compare value for a channel. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">ch</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">cc_val</parametername>
</parameternamelist>
<parameterdescription>
<para>Compare value to be set. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_rtc.h" line="337" column="25" bodyfile="hal/nrf_rtc.h" bodystart="337" bodyend="340" declfile="hal/nrf_rtc.h" declline="137" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__rtc__hal_1gab51551ec4c50f927741b8743c5d024e6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_rtc_cc_get</definition>
        <argsstring>(NRF_RTC_Type const *p_reg, uint32_t ch)</argsstring>
        <name>nrf_rtc_cc_get</name>
        <param>
          <type>NRF_RTC_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>ch</declname>
        </param>
        <briefdescription>
<para>Function for returning the compare value for a channel. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">ch</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>COMPARE[ch] value. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_rtc.h" line="342" column="29" bodyfile="hal/nrf_rtc.h" bodystart="342" bodyend="345" declfile="hal/nrf_rtc.h" declline="147" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__rtc__hal_1gad6af9273ab338cdf8fe96c6db58a2dea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_rtc_int_enable</definition>
        <argsstring>(NRF_RTC_Type *p_reg, uint32_t mask)</argsstring>
        <name>nrf_rtc_int_enable</name>
        <param>
          <type>NRF_RTC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Function for enabling interrupts. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of interrupts to be enabled. Use <ref refid="group__nrf__rtc__hal_1ga22211dc20a5c2f6cf1b43039d2bae4a3" kindref="member">nrf_rtc_int_t</ref> values for bit masking. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_rtc.h" line="347" column="24" bodyfile="hal/nrf_rtc.h" bodystart="347" bodyend="350" declfile="hal/nrf_rtc.h" declline="156" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__rtc__hal_1gad130c842bf01659e6dc7462b9760a7a0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_rtc_int_disable</definition>
        <argsstring>(NRF_RTC_Type *p_reg, uint32_t mask)</argsstring>
        <name>nrf_rtc_int_disable</name>
        <param>
          <type>NRF_RTC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Function for disabling interrupts. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of interrupts to be disabled. Use <ref refid="group__nrf__rtc__hal_1ga22211dc20a5c2f6cf1b43039d2bae4a3" kindref="member">nrf_rtc_int_t</ref> values for bit masking. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_rtc.h" line="352" column="24" bodyfile="hal/nrf_rtc.h" bodystart="352" bodyend="355" declfile="hal/nrf_rtc.h" declline="165" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__rtc__hal_1ga54f0ed1f010737c489d47305a8cd2f5e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_rtc_int_enable_check</definition>
        <argsstring>(NRF_RTC_Type const *p_reg, uint32_t mask)</argsstring>
        <name>nrf_rtc_int_enable_check</name>
        <param>
          <type>NRF_RTC_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Function for checking if the specified interrupts are enabled. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of interrupts to be checked. Use <ref refid="group__nrf__rtc__hal_1ga22211dc20a5c2f6cf1b43039d2bae4a3" kindref="member">nrf_rtc_int_t</ref> values for bit masking.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Mask of enabled interrupts. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_rtc.h" line="357" column="28" bodyfile="hal/nrf_rtc.h" bodystart="357" bodyend="360" declfile="hal/nrf_rtc.h" declline="176" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__rtc__hal_1ga0a9fb7692ee3cc4d4db4c906c910f939" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_rtc_subscribe_set</definition>
        <argsstring>(NRF_RTC_Type *p_reg, nrf_rtc_task_t task, uint8_t channel)</argsstring>
        <name>nrf_rtc_subscribe_set</name>
        <param>
          <type>NRF_RTC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__rtc__hal_1gab1bbbc39c6dac153baf61aeae33c4274" kindref="member">nrf_rtc_task_t</ref></type>
          <declname>task</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>channel</declname>
        </param>
        <briefdescription>
<para>Function for setting the subscribe configuration for a given RTC task. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">task</parametername>
</parameternamelist>
<parameterdescription>
<para>Task for which to set the configuration. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">channel</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel through which to subscribe events. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_rtc.h" line="187" column="24" declfile="hal/nrf_rtc.h" declline="187" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__rtc__hal_1ga0cba66d123812f658c21b439a8c6507a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_rtc_subscribe_clear</definition>
        <argsstring>(NRF_RTC_Type *p_reg, nrf_rtc_task_t task)</argsstring>
        <name>nrf_rtc_subscribe_clear</name>
        <param>
          <type>NRF_RTC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__rtc__hal_1gab1bbbc39c6dac153baf61aeae33c4274" kindref="member">nrf_rtc_task_t</ref></type>
          <declname>task</declname>
        </param>
        <briefdescription>
<para>Function for clearing the subscribe configuration for a given RTC task. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">task</parametername>
</parameternamelist>
<parameterdescription>
<para>Task for which to clear the configuration. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_rtc.h" line="198" column="24" declfile="hal/nrf_rtc.h" declline="198" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__rtc__hal_1gacd5b442ea8c0e5b27448173d4e1b95c6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_rtc_publish_set</definition>
        <argsstring>(NRF_RTC_Type *p_reg, nrf_rtc_event_t event, uint8_t channel)</argsstring>
        <name>nrf_rtc_publish_set</name>
        <param>
          <type>NRF_RTC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__rtc__hal_1gaeefe46b9280fd5e11516b4148b9c5950" kindref="member">nrf_rtc_event_t</ref></type>
          <declname>event</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>channel</declname>
        </param>
        <briefdescription>
<para>Function for setting the publish configuration for a given RTC event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event for which to set the configuration. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">channel</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel through which to publish the event. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_rtc.h" line="209" column="24" declfile="hal/nrf_rtc.h" declline="209" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__rtc__hal_1ga72d8505d504e069bcc8f13d76c04e6bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_rtc_publish_clear</definition>
        <argsstring>(NRF_RTC_Type *p_reg, nrf_rtc_event_t event)</argsstring>
        <name>nrf_rtc_publish_clear</name>
        <param>
          <type>NRF_RTC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__rtc__hal_1gaeefe46b9280fd5e11516b4148b9c5950" kindref="member">nrf_rtc_event_t</ref></type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>Function for clearing the publish configuration for a given RTC event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event for which to clear the configuration. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_rtc.h" line="220" column="24" declfile="hal/nrf_rtc.h" declline="220" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__rtc__hal_1ga5e1fe7f9ef4db1709615fe03e2efa8e0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE bool</type>
        <definition>NRF_STATIC_INLINE bool nrf_rtc_event_check</definition>
        <argsstring>(NRF_RTC_Type const *p_reg, nrf_rtc_event_t event)</argsstring>
        <name>nrf_rtc_event_check</name>
        <param>
          <type>NRF_RTC_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__rtc__hal_1gaeefe46b9280fd5e11516b4148b9c5950" kindref="member">nrf_rtc_event_t</ref></type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>Function for retrieving the state of the RTC event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event to be checked.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>The event has been generated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>The event has not been generated. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_rtc.h" line="392" column="24" bodyfile="hal/nrf_rtc.h" bodystart="392" bodyend="395" declfile="hal/nrf_rtc.h" declline="233" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__rtc__hal_1ga85931a1c79936b8b9631db120abb6f6b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_rtc_event_clear</definition>
        <argsstring>(NRF_RTC_Type *p_reg, nrf_rtc_event_t event)</argsstring>
        <name>nrf_rtc_event_clear</name>
        <param>
          <type>NRF_RTC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__rtc__hal_1gaeefe46b9280fd5e11516b4148b9c5950" kindref="member">nrf_rtc_event_t</ref></type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>Function for clearing an event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event to be cleared. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_rtc.h" line="397" column="24" bodyfile="hal/nrf_rtc.h" bodystart="397" bodyend="401" declfile="hal/nrf_rtc.h" declline="241" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__rtc__hal_1ga94f1765ff25dba1cf532dd028083df57" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get</definition>
        <argsstring>(NRF_RTC_Type const *p_reg)</argsstring>
        <name>nrf_rtc_counter_get</name>
        <param>
          <type>NRF_RTC_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for returning a counter value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Counter value. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_rtc.h" line="403" column="28" bodyfile="hal/nrf_rtc.h" bodystart="403" bodyend="406" declfile="hal/nrf_rtc.h" declline="250" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__rtc__hal_1ga51a966cd31e5bf8efff527c125f05d34" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_rtc_prescaler_set</definition>
        <argsstring>(NRF_RTC_Type *p_reg, uint32_t val)</argsstring>
        <name>nrf_rtc_prescaler_set</name>
        <param>
          <type>NRF_RTC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Function for setting a prescaler value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">val</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to set the prescaler to. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_rtc.h" line="408" column="24" bodyfile="hal/nrf_rtc.h" bodystart="408" bodyend="412" declfile="hal/nrf_rtc.h" declline="258" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__rtc__hal_1ga835df54d91ef4be4ce13ebe7c02f65a5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_rtc_prescaler_get</definition>
        <argsstring>(NRF_RTC_Type const *p_reg)</argsstring>
        <name>nrf_rtc_prescaler_get</name>
        <param>
          <type>NRF_RTC_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting a prescaler value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Prescaler value. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_rtc.h" line="414" column="28" bodyfile="hal/nrf_rtc.h" bodystart="414" bodyend="417" declfile="hal/nrf_rtc.h" declline="267" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__rtc__hal_1ga0252904094c2b3aa9f436d7d041003c0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_rtc_event_address_get</definition>
        <argsstring>(NRF_RTC_Type const *p_reg, nrf_rtc_event_t event)</argsstring>
        <name>nrf_rtc_event_address_get</name>
        <param>
          <type>NRF_RTC_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__rtc__hal_1gaeefe46b9280fd5e11516b4148b9c5950" kindref="member">nrf_rtc_event_t</ref></type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>Function for returning the address of an event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>Requested event.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Address of the requested event register. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_rtc.h" line="419" column="28" bodyfile="hal/nrf_rtc.h" bodystart="419" bodyend="423" declfile="hal/nrf_rtc.h" declline="277" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__rtc__hal_1gae2b77d53b0f995a2e7096448328b7c94" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_rtc_task_address_get</definition>
        <argsstring>(NRF_RTC_Type const *p_reg, nrf_rtc_task_t task)</argsstring>
        <name>nrf_rtc_task_address_get</name>
        <param>
          <type>NRF_RTC_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__rtc__hal_1gab1bbbc39c6dac153baf61aeae33c4274" kindref="member">nrf_rtc_task_t</ref></type>
          <declname>task</declname>
        </param>
        <briefdescription>
<para>Function for returning the address of a task. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">task</parametername>
</parameternamelist>
<parameterdescription>
<para>Requested task.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Address of the requested task register. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_rtc.h" line="425" column="28" bodyfile="hal/nrf_rtc.h" bodystart="425" bodyend="429" declfile="hal/nrf_rtc.h" declline="288" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__rtc__hal_1gaef77cbf9bd54e1fbe5f77de68bb4663e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE <ref refid="group__nrf__rtc__hal_1gab1bbbc39c6dac153baf61aeae33c4274" kindref="member">nrf_rtc_task_t</ref></type>
        <definition>NRF_STATIC_INLINE nrf_rtc_task_t nrf_rtc_capture_task_get</definition>
        <argsstring>(uint8_t index)</argsstring>
        <name>nrf_rtc_capture_task_get</name>
        <param>
          <type>uint8_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Function for getting the CAPTURE task associated with the specified capture channel. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">index</parametername>
</parameternamelist>
<parameterdescription>
<para>Capture channel index.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Requested CAPTURE task. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_rtc.h" line="299" column="34" declfile="hal/nrf_rtc.h" declline="299" declcolumn="34"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__rtc__hal_1gafb9b9a19cc60e799c435eaed3f2e80dd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_rtc_task_trigger</definition>
        <argsstring>(NRF_RTC_Type *p_reg, nrf_rtc_task_t task)</argsstring>
        <name>nrf_rtc_task_trigger</name>
        <param>
          <type>NRF_RTC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__rtc__hal_1gab1bbbc39c6dac153baf61aeae33c4274" kindref="member">nrf_rtc_task_t</ref></type>
          <declname>task</declname>
        </param>
        <briefdescription>
<para>Function for starting a task. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">task</parametername>
</parameternamelist>
<parameterdescription>
<para>Requested task. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_rtc.h" line="438" column="24" bodyfile="hal/nrf_rtc.h" bodystart="438" bodyend="441" declfile="hal/nrf_rtc.h" declline="308" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__rtc__hal_1gad5816bf6bcbd14f045ec35779d585648" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_rtc_event_enable</definition>
        <argsstring>(NRF_RTC_Type *p_reg, uint32_t mask)</argsstring>
        <name>nrf_rtc_event_enable</name>
        <param>
          <type>NRF_RTC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Function for enabling events. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of event flags to be enabled. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_rtc.h" line="443" column="24" bodyfile="hal/nrf_rtc.h" bodystart="443" bodyend="446" declfile="hal/nrf_rtc.h" declline="316" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__rtc__hal_1gaf96421035fab2c51b511c1864e60087b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_rtc_event_disable</definition>
        <argsstring>(NRF_RTC_Type *p_reg, uint32_t mask)</argsstring>
        <name>nrf_rtc_event_disable</name>
        <param>
          <type>NRF_RTC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Function for disabling an event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of event flags to be disabled. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_rtc.h" line="448" column="24" bodyfile="hal/nrf_rtc.h" bodystart="448" bodyend="451" declfile="hal/nrf_rtc.h" declline="324" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__rtc__hal_1ga80ae914b2998960a51f69c6194c2658a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE <ref refid="group__nrf__rtc__hal_1gaeefe46b9280fd5e11516b4148b9c5950" kindref="member">nrf_rtc_event_t</ref></type>
        <definition>NRF_STATIC_INLINE nrf_rtc_event_t nrf_rtc_compare_event_get</definition>
        <argsstring>(uint8_t index)</argsstring>
        <name>nrf_rtc_compare_event_get</name>
        <param>
          <type>uint8_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Function for getting the COMPARE event associated with the specified compare channel. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">index</parametername>
</parameternamelist>
<parameterdescription>
<para>Compare channel index.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Requested COMPARE event. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_rtc.h" line="453" column="35" bodyfile="hal/nrf_rtc.h" bodystart="453" bodyend="456" declfile="hal/nrf_rtc.h" declline="333" declcolumn="35"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__nrf__rtc__hal_1ga845c5007908d5cbb8f4ee482ec386f7e" prot="public" static="no">
        <name>NRF_RTC_INST_GET</name>
        <param><defname>idx</defname></param>
        <initializer><ref refid="group__nrfx__utils_1ga5ea61d0994f6fb1ab5ed59d44f6a7ce9" kindref="member">NRFX_CONCAT</ref>(NRF_, RTC, idx)</initializer>
        <briefdescription>
<para>Macro getting pointer to the structure of registers of the RTC peripheral. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">idx</parametername>
</parameternamelist>
<parameterdescription>
<para>RTC instance index.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to the structure of registers of the RTC peripheral. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_rtc.h" line="62" column="9" bodyfile="hal/nrf_rtc.h" bodystart="62" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__rtc__hal_1ga50661eb9bf555e2b93734014aa76f9bb" prot="public" static="no">
        <name>NRF_RTC_CC_CHANNEL_COUNT</name>
        <param><defname>id</defname></param>
        <initializer><ref refid="group__nrfx__common_1gaa78d21b07d22f7a4bfbd1feda51ef1f4" kindref="member">NRFX_CONCAT_3</ref>(RTC, id, _CC_NUM)</initializer>
        <briefdescription>
<para>Macro for getting the number of compare channels available in a given RTC instance. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_rtc.h" line="65" column="9" bodyfile="hal/nrf_rtc.h" bodystart="65" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__rtc__hal_1ga1c44d09a5e97d86530691a734b035332" prot="public" static="no">
        <name>NRF_RTC_CC_COUNT_MAX</name>
        <initializer><ref refid="group__nrfx__common_1gafbf1f8a50035b7d9f6c1cc1155ed1989" kindref="member">NRFX_ARRAY_SIZE</ref>(((NRF_RTC_Type*)0)-&gt;EVENTS_COMPARE)</initializer>
        <briefdescription>
<para>Symbol specifying maximum number of available compare channels. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_rtc.h" line="68" column="9" bodyfile="hal/nrf_rtc.h" bodystart="68" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__rtc__hal_1ga84c5095022be1e656b834e7321cbfdfb" prot="public" static="no">
        <name>NRF_RTC_COUNTER_MAX</name>
        <initializer>RTC_COUNTER_COUNTER_Msk</initializer>
        <briefdescription>
<para>Maximum value of the RTC counter. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_rtc.h" line="71" column="9" bodyfile="hal/nrf_rtc.h" bodystart="71" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__rtc__hal_1ga449c07d418df082cc0420d9f6d97e92c" prot="public" static="no">
        <name>NRF_RTC_INPUT_FREQ</name>
        <initializer>32768</initializer>
        <briefdescription>
<para>Input frequency of the RTC instance. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_rtc.h" line="74" column="9" bodyfile="hal/nrf_rtc.h" bodystart="74" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__rtc__hal_1ga2cf5178522f721973cfc33e89a750e2e" prot="public" static="no">
        <name>NRF_RTC_FREQ_TO_PRESCALER</name>
        <param><defname>FREQ</defname></param>
        <initializer>(uint16_t)(((<ref refid="group__nrf__rtc__hal_1ga449c07d418df082cc0420d9f6d97e92c" kindref="member">NRF_RTC_INPUT_FREQ</ref>) / (FREQ)) - 1)</initializer>
        <briefdescription>
<para>Macro for converting expected frequency to prescaler setting. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_rtc.h" line="77" column="9" bodyfile="hal/nrf_rtc.h" bodystart="77" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__rtc__hal_1gaa85867a3321a6528b0a78e31f92b6a33" prot="public" static="no">
        <name>NRF_RTC_WRAP</name>
        <param><defname>val</defname></param>
        <initializer>((val) &amp; RTC_COUNTER_COUNTER_Msk)</initializer>
        <briefdescription>
<para>Macro for trimming values to the RTC bit width. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_rtc.h" line="80" column="9" bodyfile="hal/nrf_rtc.h" bodystart="80" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__rtc__hal_1ga4c18f026b4beaf079b7249c0b4f3833a" prot="public" static="no">
        <name>NRF_RTC_CHANNEL_INT_MASK</name>
        <param><defname>ch</defname></param>
        <initializer>((uint32_t)(<ref refid="group__nrf__rtc__hal_1gga22211dc20a5c2f6cf1b43039d2bae4a3acb0d6d71f2dcb78604936e1ba924ab9b" kindref="member">NRF_RTC_INT_COMPARE0_MASK</ref>) &lt;&lt; (ch))</initializer>
        <briefdescription>
<para>Macro for creating the interrupt bitmask for the specified compare channel. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_rtc.h" line="83" column="9" bodyfile="hal/nrf_rtc.h" bodystart="83" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__rtc__hal_1gafb5ebd2d9e6dbfdfadda09227f3b17d3" prot="public" static="no">
        <name>NRF_RTC_ALL_CHANNELS_INT_MASK</name>
        <initializer>    ((uint32_t)(((1 &lt;&lt; <ref refid="group__nrf__rtc__hal_1ga1c44d09a5e97d86530691a734b035332" kindref="member">NRF_RTC_CC_COUNT_MAX</ref>) - 1) &lt;&lt; RTC_INTENSET_COMPARE0_Pos))</initializer>
        <briefdescription>
<para>Macro for creating the interrupt bitmask for all compare channels. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_rtc.h" line="86" column="9" bodyfile="hal/nrf_rtc.h" bodystart="86" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__rtc__hal_1ga1698ae28d2c10c81101dc0d41a52d043" prot="public" static="no">
        <name>NRF_RTC_CHANNEL_EVENT_ADDR</name>
        <param><defname>ch</defname></param>
        <initializer>    (<ref refid="group__nrf__rtc__hal_1gaeefe46b9280fd5e11516b4148b9c5950" kindref="member">nrf_rtc_event_t</ref>)((<ref refid="group__nrf__rtc__hal_1ggaeefe46b9280fd5e11516b4148b9c5950aed2f00b3d07e65411e4b63982efd2e07" kindref="member">NRF_RTC_EVENT_COMPARE_0</ref>) + (ch) * sizeof(uint32_t))</initializer>
        <briefdescription>
<para>Macro for obtaining the compare event for the specified channel. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_rtc.h" line="90" column="9" bodyfile="hal/nrf_rtc.h" bodystart="90" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Hardware access layer for managing the Real Time Counter (RTC) peripheral. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
