<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="group__nrf__rramc__hal" kind="group">
    <compoundname>nrf_rramc_hal</compoundname>
    <title>RRAMC HAL</title>
    <innerclass refid="structnrf__rramc__config__t" prot="public">nrf_rramc_config_t</innerclass>
    <innerclass refid="structnrf__rramc__ready__next__timeout__t" prot="public">nrf_rramc_ready_next_timeout_t</innerclass>
    <innerclass refid="structnrf__rramc__power__t" prot="public">nrf_rramc_power_t</innerclass>
    <innerclass refid="structnrf__rramc__region__config__t" prot="public">nrf_rramc_region_config_t</innerclass>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="group__nrf__rramc__hal_1gadf80c0390d89b481d76b4f348b147cc7" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_rramc_task_t</name>
        <enumvalue id="group__nrf__rramc__hal_1ggadf80c0390d89b481d76b4f348b147cc7ae26d52348c5b64e26ef7a0d6fcea2424" prot="public">
          <name>NRF_RRAMC_TASK_WAKEUP</name>
          <initializer>= offsetof(NRF_RRAMC_Type, TASKS_WAKEUP)</initializer>
          <briefdescription>
<para>Wakeup the RRAM from low power mode. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__rramc__hal_1ggadf80c0390d89b481d76b4f348b147cc7ae78e37462cb130d9e84894a34df2dbb4" prot="public">
          <name>NRF_RRAMC_TASK_COMMIT_WRITEBUF</name>
          <initializer>= offsetof(NRF_RRAMC_Type, TASKS_COMMITWRITEBUF)</initializer>
          <briefdescription>
<para>Commit the data stored in internal write-buffer to RRAM. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>RRAMC tasks. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_rramc.h" line="64" column="1" bodyfile="hal/nrf_rramc.h" bodystart="65" bodyend="68"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__rramc__hal_1ga12273d5b8ed1f0e2c15d4eb6b2bb45dd" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_rramc_event_t</name>
        <enumvalue id="group__nrf__rramc__hal_1gga12273d5b8ed1f0e2c15d4eb6b2bb45ddadb6b5788f971630e4599e9e0ff366a36" prot="public">
          <name>NRF_RRAMC_EVENT_WOKENUP</name>
          <initializer>= offsetof(NRF_RRAMC_Type, EVENTS_WOKENUP)</initializer>
          <briefdescription>
<para>The RRAM is woken up from low power mode. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__rramc__hal_1gga12273d5b8ed1f0e2c15d4eb6b2bb45ddaa50022ae45e9aeccf043e9c25b0dc510" prot="public">
          <name>NRF_RRAMC_EVENT_READY</name>
          <initializer>= offsetof(NRF_RRAMC_Type, EVENTS_READY)</initializer>
          <briefdescription>
<para>RRAMC is ready. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__rramc__hal_1gga12273d5b8ed1f0e2c15d4eb6b2bb45dda883352a74d9ebfc2a1868e7ffa080875" prot="public">
          <name>NRF_RRAMC_EVENT_READY_NEXT</name>
          <initializer>= offsetof(NRF_RRAMC_Type, EVENTS_READYNEXT)</initializer>
          <briefdescription>
<para>Ready to accept a new write operation. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__rramc__hal_1gga12273d5b8ed1f0e2c15d4eb6b2bb45dda0ab2fc8a267c9cacfd4d4ef9a31fe968" prot="public">
          <name>NRF_RRAMC_EVENT_ERROR_ACCESS</name>
          <initializer>= offsetof(NRF_RRAMC_Type, EVENTS_ACCESSERROR)</initializer>
          <briefdescription>
<para>RRAM access error. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>RRAMC events. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_rramc.h" line="71" column="1" bodyfile="hal/nrf_rramc.h" bodystart="72" bodyend="77"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__rramc__hal_1ga95ceba960c4e94ed070157dee96947cb" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_rramc_int_mask_t</name>
        <enumvalue id="group__nrf__rramc__hal_1gga95ceba960c4e94ed070157dee96947cba41d959cedef3c33155d7cead48495930" prot="public">
          <name>NRF_RRAMC_INT_WOKENUP_MASK</name>
          <initializer>= RRAMC_INTENSET_WOKENUP_Msk</initializer>
          <briefdescription>
<para>Interrupt on WOKENUP event. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__rramc__hal_1gga95ceba960c4e94ed070157dee96947cba7778d5858a094b102b8ce0b6cfe8727a" prot="public">
          <name>NRF_RRAMC_INT_READY_MASK</name>
          <initializer>= RRAMC_INTENSET_READY_Msk</initializer>
          <briefdescription>
<para>Interrupt on READY event. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__rramc__hal_1gga95ceba960c4e94ed070157dee96947cba5db7e69a7cf1ef91b9d58fcd0ef5ceac" prot="public">
          <name>NRF_RRAMC_INT_READY_NEXT_MASK</name>
          <initializer>= RRAMC_INTENSET_READYNEXT_Msk</initializer>
          <briefdescription>
<para>Interrupt on READYNEXT event. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__rramc__hal_1gga95ceba960c4e94ed070157dee96947cbaf884152357d3a1de7fa0c384c2f3979d" prot="public">
          <name>NRF_RRAMC_INT_ERROR_ACCESS_MASK</name>
          <initializer>= RRAMC_INTENSET_ACCESSERROR_Msk</initializer>
          <briefdescription>
<para>Interrupt on ACCESSERROR event. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__rramc__hal_1gga95ceba960c4e94ed070157dee96947cba2145b2f305d5ea9efa8c8f4a3e96a1f9" prot="public">
          <name>NRF_RRAMC_ALL_INTS_MASK</name>
          <initializer>= NRF_RRAMC_INT_WOKENUP_MASK
                                    | NRF_RRAMC_INT_READY_MASK
                                    | NRF_RRAMC_INT_READY_NEXT_MASK
                                    | NRF_RRAMC_INT_ERROR_ACCESS_MASK</initializer>
          <briefdescription>
<para>All RRAMC interrupts. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>RRAMC interrupts. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_rramc.h" line="80" column="1" bodyfile="hal/nrf_rramc.h" bodystart="81" bodyend="90"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__rramc__hal_1ga579f0477b16e9f6076ed83824c85fd8d" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_rramc_region_perm_mask_t</name>
        <enumvalue id="group__nrf__rramc__hal_1gga579f0477b16e9f6076ed83824c85fd8da68e8704bfea43160bfdcfe1ae657f629" prot="public">
          <name>NRF_RRAMC_REGION_PERM_READ_MASK</name>
          <initializer>= RRAMC_REGION_CONFIG_READ_Msk</initializer>
          <briefdescription>
<para>Read access. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__rramc__hal_1gga579f0477b16e9f6076ed83824c85fd8dad4062c4e387289a6409beb2822c3c704" prot="public">
          <name>NRF_RRAMC_REGION_PERM_WRITE_MASK</name>
          <initializer>= RRAMC_REGION_CONFIG_WRITE_Msk</initializer>
          <briefdescription>
<para>Write access. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__rramc__hal_1gga579f0477b16e9f6076ed83824c85fd8dab7ef9b610bde97c4c05f40ab2b2d157f" prot="public">
          <name>NRF_RRAMC_REGION_PERM_EXECUTE_MASK</name>
          <initializer>= RRAMC_REGION_CONFIG_EXECUTE_Msk</initializer>
          <briefdescription>
<para>Software execute. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__rramc__hal_1gga579f0477b16e9f6076ed83824c85fd8da83b03b5c7fd2e0c12a15061f3b8cb297" prot="public">
          <name>NRF_RRAMC_REGION_PERM_SECURE_MASK</name>
          <initializer>= RRAMC_REGION_CONFIG_SECURE_Msk</initializer>
          <briefdescription>
<para>Secure-only access. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>RRAMC region permissions mask. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>When bit is set, the selected action is allowed. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_rramc.h" line="118" column="1" bodyfile="hal/nrf_rramc.h" bodystart="119" bodyend="124"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__nrf__rramc__hal_1ga489e48359c21e9aeab721abf8110252f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_rramc_task_trigger</definition>
        <argsstring>(NRF_RRAMC_Type *p_reg, nrf_rramc_task_t task)</argsstring>
        <name>nrf_rramc_task_trigger</name>
        <param>
          <type>NRF_RRAMC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__rramc__hal_1gadf80c0390d89b481d76b4f348b147cc7" kindref="member">nrf_rramc_task_t</ref></type>
          <declname>task</declname>
        </param>
        <briefdescription>
<para>Function for activating the specified RRAMC task. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">task</parametername>
</parameternamelist>
<parameterdescription>
<para>Task to be activated. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_rramc.h" line="422" column="24" bodyfile="hal/nrf_rramc.h" bodystart="422" bodyend="425" declfile="hal/nrf_rramc.h" declline="142" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__rramc__hal_1gabca757c359aa7a33adfcc6556f8c0fb0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_rramc_task_address_get</definition>
        <argsstring>(NRF_RRAMC_Type const *p_reg, nrf_rramc_task_t task)</argsstring>
        <name>nrf_rramc_task_address_get</name>
        <param>
          <type>NRF_RRAMC_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__rramc__hal_1gadf80c0390d89b481d76b4f348b147cc7" kindref="member">nrf_rramc_task_t</ref></type>
          <declname>task</declname>
        </param>
        <briefdescription>
<para>Function for getting the address of the specified RRAMC task register. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">task</parametername>
</parameternamelist>
<parameterdescription>
<para>RRAMC task.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Address of the specified task register. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_rramc.h" line="427" column="28" bodyfile="hal/nrf_rramc.h" bodystart="427" bodyend="431" declfile="hal/nrf_rramc.h" declline="152" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__rramc__hal_1ga6a5a2e22bbd6b8d5af4c27fa64f1a9d8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_rramc_event_clear</definition>
        <argsstring>(NRF_RRAMC_Type *p_reg, nrf_rramc_event_t event)</argsstring>
        <name>nrf_rramc_event_clear</name>
        <param>
          <type>NRF_RRAMC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__rramc__hal_1ga12273d5b8ed1f0e2c15d4eb6b2bb45dd" kindref="member">nrf_rramc_event_t</ref></type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>Function for clearing the specified RRAMC event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the peripheral register structure. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event to clear. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_rramc.h" line="433" column="24" bodyfile="hal/nrf_rramc.h" bodystart="433" bodyend="437" declfile="hal/nrf_rramc.h" declline="161" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__rramc__hal_1ga1f57b36da161e1cf21c82aa3876efb77" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE bool</type>
        <definition>NRF_STATIC_INLINE bool nrf_rramc_event_check</definition>
        <argsstring>(NRF_RRAMC_Type const *p_reg, nrf_rramc_event_t event)</argsstring>
        <name>nrf_rramc_event_check</name>
        <param>
          <type>NRF_RRAMC_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__rramc__hal_1ga12273d5b8ed1f0e2c15d4eb6b2bb45dd" kindref="member">nrf_rramc_event_t</ref></type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>Function for retrieving the state of the RRAMC event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event to be checked.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>The event has been generated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>The event has not been generated. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_rramc.h" line="439" column="24" bodyfile="hal/nrf_rramc.h" bodystart="439" bodyend="442" declfile="hal/nrf_rramc.h" declline="172" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__rramc__hal_1ga3eb129f51c08e58c4cc381768eb60dc5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_rramc_event_address_get</definition>
        <argsstring>(NRF_RRAMC_Type const *p_reg, nrf_rramc_event_t event)</argsstring>
        <name>nrf_rramc_event_address_get</name>
        <param>
          <type>NRF_RRAMC_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__rramc__hal_1ga12273d5b8ed1f0e2c15d4eb6b2bb45dd" kindref="member">nrf_rramc_event_t</ref></type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>Function for getting the address of the specified RRAMC event register. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the peripheral register structure. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>Requested event.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Address of the specified event register. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_rramc.h" line="444" column="28" bodyfile="hal/nrf_rramc.h" bodystart="444" bodyend="448" declfile="hal/nrf_rramc.h" declline="182" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__rramc__hal_1ga3f7f69bc71658a8215e67943284662f7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_rramc_int_enable</definition>
        <argsstring>(NRF_RRAMC_Type *p_reg, uint32_t mask)</argsstring>
        <name>nrf_rramc_int_enable</name>
        <param>
          <type>NRF_RRAMC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Function for enabling the specified interrupts. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the peripheral register structure. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of interrupts to be enabled. Use <ref refid="group__nrf__rramc__hal_1ga95ceba960c4e94ed070157dee96947cb" kindref="member">nrf_rramc_int_mask_t</ref> values for bit masking. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_rramc.h" line="450" column="24" bodyfile="hal/nrf_rramc.h" bodystart="450" bodyend="453" declfile="hal/nrf_rramc.h" declline="192" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__rramc__hal_1ga02dcfb8913610a45e1f11db523e921d8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_rramc_int_disable</definition>
        <argsstring>(NRF_RRAMC_Type *p_reg, uint32_t mask)</argsstring>
        <name>nrf_rramc_int_disable</name>
        <param>
          <type>NRF_RRAMC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Function for disabling the specified interrupts. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the peripheral register structure. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of interrupts to be disabled. Use <ref refid="group__nrf__rramc__hal_1ga95ceba960c4e94ed070157dee96947cb" kindref="member">nrf_rramc_int_mask_t</ref> values for bit masking. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_rramc.h" line="455" column="24" bodyfile="hal/nrf_rramc.h" bodystart="455" bodyend="458" declfile="hal/nrf_rramc.h" declline="201" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__rramc__hal_1ga5c5b504644d49c61de9703237c6d25ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_rramc_int_enable_check</definition>
        <argsstring>(NRF_RRAMC_Type const *p_reg, uint32_t mask)</argsstring>
        <name>nrf_rramc_int_enable_check</name>
        <param>
          <type>NRF_RRAMC_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Function for checking if the specified interrupts are enabled. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of interrupts to be checked. Use <ref refid="group__nrf__rramc__hal_1ga95ceba960c4e94ed070157dee96947cb" kindref="member">nrf_rramc_int_mask_t</ref> values for bit masking.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Mask of enabled interrupts. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_rramc.h" line="460" column="28" bodyfile="hal/nrf_rramc.h" bodystart="460" bodyend="464" declfile="hal/nrf_rramc.h" declline="212" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__rramc__hal_1gaf00e75dd9d1eb6aa3619259951965b24" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_rramc_int_pending_get</definition>
        <argsstring>(NRF_RRAMC_Type const *p_reg)</argsstring>
        <name>nrf_rramc_int_pending_get</name>
        <param>
          <type>NRF_RRAMC_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting the state of pending interrupts. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>States of pending interrupt are saved as a bitmask. One set at particular position means that interrupt for event is pending.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Bitmask with information about pending interrupts. Use <ref refid="group__nrf__rramc__hal_1ga95ceba960c4e94ed070157dee96947cb" kindref="member">nrf_rramc_int_mask_t</ref> values for bit masking. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_rramc.h" line="466" column="28" bodyfile="hal/nrf_rramc.h" bodystart="466" bodyend="469" declfile="hal/nrf_rramc.h" declline="225" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__rramc__hal_1ga7ae9f5e904859c825e76cd71a1bdccf9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_rramc_subscribe_set</definition>
        <argsstring>(NRF_RRAMC_Type *p_reg, nrf_rramc_task_t task, uint8_t channel)</argsstring>
        <name>nrf_rramc_subscribe_set</name>
        <param>
          <type>NRF_RRAMC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__rramc__hal_1gadf80c0390d89b481d76b4f348b147cc7" kindref="member">nrf_rramc_task_t</ref></type>
          <declname>task</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>channel</declname>
        </param>
        <briefdescription>
<para>Function for setting the subscribe configuration for a wakeup RRAMC task. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Not every task has its corresponding subscribe register. Refer to the Product Specification for more information.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">task</parametername>
</parameternamelist>
<parameterdescription>
<para>Task for which to set the configuration. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">channel</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel through which to subscribe events. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_rramc.h" line="239" column="24" declfile="hal/nrf_rramc.h" declline="239" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__rramc__hal_1ga572ef364bcf9cb3953a045a5b58fb749" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_rramc_subscribe_clear</definition>
        <argsstring>(NRF_RRAMC_Type *p_reg, nrf_rramc_task_t task)</argsstring>
        <name>nrf_rramc_subscribe_clear</name>
        <param>
          <type>NRF_RRAMC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__rramc__hal_1gadf80c0390d89b481d76b4f348b147cc7" kindref="member">nrf_rramc_task_t</ref></type>
          <declname>task</declname>
        </param>
        <briefdescription>
<para>Function for clearing the subscribe configuration for a wakeup RRAMC task. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Not every task has its corresponding subscribe register. Refer to the Product Specification for more information.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">task</parametername>
</parameternamelist>
<parameterdescription>
<para>Task for which to clear the configuration. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_rramc.h" line="253" column="24" declfile="hal/nrf_rramc.h" declline="253" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__rramc__hal_1gacc11dfa1e7e8921b6e21a1bb9f7cf1d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_rramc_publish_set</definition>
        <argsstring>(NRF_RRAMC_Type *p_reg, nrf_rramc_event_t event, uint8_t channel)</argsstring>
        <name>nrf_rramc_publish_set</name>
        <param>
          <type>NRF_RRAMC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__rramc__hal_1ga12273d5b8ed1f0e2c15d4eb6b2bb45dd" kindref="member">nrf_rramc_event_t</ref></type>
          <declname>event</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>channel</declname>
        </param>
        <briefdescription>
<para>Function for setting the publish configuration for a wokenup RRAMC event. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Not every event has its corresponding publish register. Refer to the Product Specification for more information.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event for which to set the configuration. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">channel</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel through which to publish the event. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_rramc.h" line="266" column="24" declfile="hal/nrf_rramc.h" declline="266" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__rramc__hal_1ga2aca81a5db0d6d818307cd50f825bbf1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_rramc_publish_clear</definition>
        <argsstring>(NRF_RRAMC_Type *p_reg, nrf_rramc_event_t event)</argsstring>
        <name>nrf_rramc_publish_clear</name>
        <param>
          <type>NRF_RRAMC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__rramc__hal_1ga12273d5b8ed1f0e2c15d4eb6b2bb45dd" kindref="member">nrf_rramc_event_t</ref></type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>Function for clearing the publish configuration for a wokenup RRAMC event. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Not every event has its corresponding publish register. Refer to the Product Specification for more information.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event for which to clear the configuration. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_rramc.h" line="280" column="24" declfile="hal/nrf_rramc.h" declline="280" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__rramc__hal_1gae3dd53c1f48d343e31268ab9fe3102d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE bool</type>
        <definition>NRF_STATIC_INLINE bool nrf_rramc_ready_check</definition>
        <argsstring>(NRF_RRAMC_Type const *p_reg)</argsstring>
        <name>nrf_rramc_ready_check</name>
        <param>
          <type>NRF_RRAMC_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for checking current RRAMC operation status. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>Current operation is completed, and RRAMC is ready. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>RRAMC is busy. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_rramc.h" line="499" column="24" bodyfile="hal/nrf_rramc.h" bodystart="499" bodyend="504" declfile="hal/nrf_rramc.h" declline="292" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__rramc__hal_1ga3334d9ee37c8e0f156f1cddc9aa8f438" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE bool</type>
        <definition>NRF_STATIC_INLINE bool nrf_rramc_write_ready_check</definition>
        <argsstring>(NRF_RRAMC_Type const *p_reg)</argsstring>
        <name>nrf_rramc_write_ready_check</name>
        <param>
          <type>NRF_RRAMC_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for checking whether RRAMC is ready to accept a new write operation. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>RRAMC is ready to accept a new write operation. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>RRAMC cannot accept any write operation now. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_rramc.h" line="506" column="24" bodyfile="hal/nrf_rramc.h" bodystart="506" bodyend="511" declfile="hal/nrf_rramc.h" declline="302" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__rramc__hal_1ga7b3734fcb2edf3e513d48328718fe5fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_rramc_error_access_addr_get</definition>
        <argsstring>(NRF_RRAMC_Type const *p_reg)</argsstring>
        <name>nrf_rramc_error_access_addr_get</name>
        <param>
          <type>NRF_RRAMC_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Fuction for checking the address of the first access error. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Access error address. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_rramc.h" line="513" column="28" bodyfile="hal/nrf_rramc.h" bodystart="513" bodyend="516" declfile="hal/nrf_rramc.h" declline="311" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__rramc__hal_1gafad2c8c47ca125eec3724f54c62b891f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE bool</type>
        <definition>NRF_STATIC_INLINE bool nrf_rramc_empty_buffer_check</definition>
        <argsstring>(NRF_RRAMC_Type const *p_reg)</argsstring>
        <name>nrf_rramc_empty_buffer_check</name>
        <param>
          <type>NRF_RRAMC_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for checking whether the internal write-buffer has been committed to RRAM and is now empty. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>The internal write-buffer is empty and has no content that needs to be commited. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>The internal write-buffer has data that needs to be committed. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_rramc.h" line="518" column="24" bodyfile="hal/nrf_rramc.h" bodystart="518" bodyend="523" declfile="hal/nrf_rramc.h" declline="321" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__rramc__hal_1ga600344f5d63d15447e2a49bd1bc87b91" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_rramc_config_get</definition>
        <argsstring>(NRF_RRAMC_Type const *p_reg, nrf_rramc_config_t *p_config)</argsstring>
        <name>nrf_rramc_config_get</name>
        <param>
          <type>NRF_RRAMC_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="structnrf__rramc__config__t" kindref="compound">nrf_rramc_config_t</ref> *</type>
          <declname>p_config</declname>
        </param>
        <briefdescription>
<para>Function for getting the RRAMC peripheral configuration. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">p_config</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure to be filled with RRAMC configuration data. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_rramc.h" line="525" column="24" bodyfile="hal/nrf_rramc.h" bodystart="525" bodyend="532" declfile="hal/nrf_rramc.h" declline="329" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__rramc__hal_1ga4aa89554145d84b6df4178a36bc46e99" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_rramc_config_set</definition>
        <argsstring>(NRF_RRAMC_Type *p_reg, nrf_rramc_config_t const *p_config)</argsstring>
        <name>nrf_rramc_config_set</name>
        <param>
          <type>NRF_RRAMC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="structnrf__rramc__config__t" kindref="compound">nrf_rramc_config_t</ref> const *</type>
          <declname>p_config</declname>
        </param>
        <briefdescription>
<para>Function for setting the RRAMC peripheral configuration. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">p_config</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure with configuration to be set. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_rramc.h" line="534" column="24" bodyfile="hal/nrf_rramc.h" bodystart="534" bodyend="541" declfile="hal/nrf_rramc.h" declline="338" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__rramc__hal_1ga04efa9e62632c8b8dff3d62382d448d6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_rramc_ready_next_timeout_get</definition>
        <argsstring>(NRF_RRAMC_Type const *p_reg, nrf_rramc_ready_next_timeout_t *p_config)</argsstring>
        <name>nrf_rramc_ready_next_timeout_get</name>
        <param>
          <type>NRF_RRAMC_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="structnrf__rramc__ready__next__timeout__t" kindref="compound">nrf_rramc_ready_next_timeout_t</ref> *</type>
          <declname>p_config</declname>
        </param>
        <briefdescription>
<para>Function for getting preload timeout value for waiting for a next write. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">p_config</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure to be filled with information about preload timeout value. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_rramc.h" line="543" column="24" bodyfile="hal/nrf_rramc.h" bodystart="543" bodyend="550" declfile="hal/nrf_rramc.h" declline="348" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__rramc__hal_1ga66be625abc1ee4292bd40e299dbe4ac7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_rramc_ready_next_timeout_set</definition>
        <argsstring>(NRF_RRAMC_Type *p_reg, nrf_rramc_ready_next_timeout_t const *p_config)</argsstring>
        <name>nrf_rramc_ready_next_timeout_set</name>
        <param>
          <type>NRF_RRAMC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="structnrf__rramc__ready__next__timeout__t" kindref="compound">nrf_rramc_ready_next_timeout_t</ref> const *</type>
          <declname>p_config</declname>
        </param>
        <briefdescription>
<para>Function for setting preload timeout value for waiting for a next write. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">p_config</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure filled with information about$ preload timeout value. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_rramc.h" line="553" column="1" bodyfile="hal/nrf_rramc.h" bodystart="553" bodyend="562" declfile="hal/nrf_rramc.h" declline="359" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__rramc__hal_1ga0d04aaa18a1463ca07cdc2292a7d38f2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_rramc_power_config_get</definition>
        <argsstring>(NRF_RRAMC_Type const *p_reg, nrf_rramc_power_t *p_config)</argsstring>
        <name>nrf_rramc_power_config_get</name>
        <param>
          <type>NRF_RRAMC_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="structnrf__rramc__power__t" kindref="compound">nrf_rramc_power_t</ref> *</type>
          <declname>p_config</declname>
        </param>
        <briefdescription>
<para>Function for getting the RRAMC power configuration. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">p_config</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure to be filled with information about power configuration. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_rramc.h" line="564" column="24" bodyfile="hal/nrf_rramc.h" bodystart="564" bodyend="574" declfile="hal/nrf_rramc.h" declline="369" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__rramc__hal_1ga5aa5b43d22070041f92b7396758ed8a9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_rramc_power_config_set</definition>
        <argsstring>(NRF_RRAMC_Type *p_reg, nrf_rramc_power_t const *p_config)</argsstring>
        <name>nrf_rramc_power_config_set</name>
        <param>
          <type>NRF_RRAMC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="structnrf__rramc__power__t" kindref="compound">nrf_rramc_power_t</ref> const *</type>
          <declname>p_config</declname>
        </param>
        <briefdescription>
<para>Function for setting the RRAMC power configuration. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">p_config</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure filled with information about power configuration. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_rramc.h" line="576" column="24" bodyfile="hal/nrf_rramc.h" bodystart="576" bodyend="582" declfile="hal/nrf_rramc.h" declline="378" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__rramc__hal_1gaad0e37d917d80c370ffbc37d22dfe6c8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE bool</type>
        <definition>NRF_STATIC_INLINE bool nrf_rramc_erase_all_check</definition>
        <argsstring>(NRF_RRAMC_Type const *p_reg)</argsstring>
        <name>nrf_rramc_erase_all_check</name>
        <param>
          <type>NRF_RRAMC_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for checking if the erasing operation of the whole RRAM main block has been started. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>Erase of chip started. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>No operation. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_rramc.h" line="584" column="24" bodyfile="hal/nrf_rramc.h" bodystart="584" bodyend="589" declfile="hal/nrf_rramc.h" declline="389" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__rramc__hal_1gabd91f162fa4e8bb5800e5ad46a10ac2d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_rramc_erase_all_set</definition>
        <argsstring>(NRF_RRAMC_Type *p_reg)</argsstring>
        <name>nrf_rramc_erase_all_set</name>
        <param>
          <type>NRF_RRAMC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for erasing whole RRAM main block, that includes the SICR and the UICR. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_rramc.h" line="591" column="24" bodyfile="hal/nrf_rramc.h" bodystart="591" bodyend="594" declfile="hal/nrf_rramc.h" declline="396" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__rramc__hal_1ga0a8c03c1bbee5321883fc348fb246f4a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_rramc_region_config_set</definition>
        <argsstring>(NRF_RRAMC_Type *p_reg, uint8_t region, nrf_rramc_region_config_t const *p_config)</argsstring>
        <name>nrf_rramc_region_config_set</name>
        <param>
          <type>NRF_RRAMC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>region</declname>
        </param>
        <param>
          <type><ref refid="structnrf__rramc__region__config__t" kindref="compound">nrf_rramc_region_config_t</ref> const *</type>
          <declname>p_config</declname>
        </param>
        <briefdescription>
<para>Function for setting the configuration of the specified RRAMC region. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">region</parametername>
</parameternamelist>
<parameterdescription>
<para>Region number. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">p_config</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the configuration structure. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_rramc.h" line="596" column="24" bodyfile="hal/nrf_rramc.h" bodystart="596" bodyend="611" declfile="hal/nrf_rramc.h" declline="405" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__rramc__hal_1ga203cf7cebc41d47f7eb2c416b238e738" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_rramc_region_config_get</definition>
        <argsstring>(NRF_RRAMC_Type const *p_reg, uint8_t region, nrf_rramc_region_config_t *p_config)</argsstring>
        <name>nrf_rramc_region_config_get</name>
        <param>
          <type>NRF_RRAMC_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>region</declname>
        </param>
        <param>
          <type><ref refid="structnrf__rramc__region__config__t" kindref="compound">nrf_rramc_region_config_t</ref> *</type>
          <declname>p_config</declname>
        </param>
        <briefdescription>
<para>Function for getting the configuration of the specified RRAMC region. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">region</parametername>
</parameternamelist>
<parameterdescription>
<para>Region number. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">p_config</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure to be filled with RRAMC region settings. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_rramc.h" line="613" column="24" bodyfile="hal/nrf_rramc.h" bodystart="613" bodyend="626" declfile="hal/nrf_rramc.h" declline="416" declcolumn="24"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__nrf__rramc__hal_1ga3c0bbef9aa4ef0796aef6851bc79fe74" prot="public" static="no">
        <name>NRF_RRAMC_CONFIG_WRITE_BUFF_SIZE_MAX</name>
        <initializer>RRAMC_CONFIG_WRITEBUFSIZE_Max</initializer>
        <briefdescription>
<para>Maximum size of a write-buffer in number of 128-bit words. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_rramc.h" line="52" column="9" bodyfile="hal/nrf_rramc.h" bodystart="52" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__rramc__hal_1ga81f6fef9e0d33a32f16b7ff86bfacdd2" prot="public" static="no">
        <name>NRF_RRAMC_READYNEXTTIMEOUT_MAX</name>
        <initializer>RRAMC_READYNEXTTIMEOUT_VALUE_Max</initializer>
        <briefdescription>
<para>Maximum preload timeout value for waiting for a next write. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_rramc.h" line="55" column="9" bodyfile="hal/nrf_rramc.h" bodystart="55" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__rramc__hal_1ga3d969b8a42d8c22b05d44adb5843aad9" prot="public" static="no">
        <name>NRF_RRAMC_REGION_CONFIG_PERM_MASK</name>
        <initializer>                                           (RRAMC_REGION_CONFIG_READ_Msk    | \
                                           RRAMC_REGION_CONFIG_WRITE_Msk   | \
                                           RRAMC_REGION_CONFIG_EXECUTE_Msk | \
                                           RRAMC_REGION_CONFIG_SECURE_Msk)</initializer>
        <briefdescription>
<para>RRAMC region permissions bitmask. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_rramc.h" line="58" column="9" bodyfile="hal/nrf_rramc.h" bodystart="58" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Hardware access layer for managing the the Resistive Random Access Memory Controller (RRAMC) peripheral. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
