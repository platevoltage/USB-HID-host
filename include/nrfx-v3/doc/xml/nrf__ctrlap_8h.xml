<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="nrf__ctrlap_8h" kind="file" language="C++">
    <compoundname>nrf_ctrlap.h</compoundname>
    <includes local="no">nrfx.h</includes>
    <incdepgraph>
      <node id="1">
        <label>hal/nrf_ctrlap.h</label>
        <link refid="nrf__ctrlap_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>nrfx.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="structnrf__ctrlap__info__t" prot="public">nrf_ctrlap_info_t</innerclass>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="group__nrf__ctrlap__hal_1gac9b5cbc4dd049f0dd0476e28ecb0ab3c" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_ctrlap_event_t</name>
        <enumvalue id="group__nrf__ctrlap__hal_1ggac9b5cbc4dd049f0dd0476e28ecb0ab3cad492ff2ad48e05240f02b3dc2e5942a2" prot="public">
          <name>NRF_CTRLAP_EVENT_RXREADY</name>
          <initializer>= offsetof(NRF_CTRLAPPERI_Type, EVENTS_RXREADY)</initializer>
          <briefdescription>
<para>New data from the peer is available. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__ctrlap__hal_1ggac9b5cbc4dd049f0dd0476e28ecb0ab3ca91aeae8a32cfbd0d198866ca4fad03a7" prot="public">
          <name>NRF_CTRLAP_EVENT_TXDONE</name>
          <initializer>= offsetof(NRF_CTRLAPPERI_Type, EVENTS_TXDONE)</initializer>
          <briefdescription>
<para>Data has been read by the peer. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>CTRLAP events. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ctrlap.h" line="51" column="1" bodyfile="hal/nrf_ctrlap.h" bodystart="52" bodyend="55"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__ctrlap__hal_1gacc46943975d7ca5c86e97f4a909e369d" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_ctrlap_int_mask_t</name>
        <enumvalue id="group__nrf__ctrlap__hal_1ggacc46943975d7ca5c86e97f4a909e369daae2eca1c7147856ffcb88056e9e56e03" prot="public">
          <name>NRF_CTRLAP_INT_RXREADY_MASK</name>
          <initializer>= CTRLAPPERI_INTENSET_RXREADY_Msk</initializer>
          <briefdescription>
<para>Interrupt on RXREADY event. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__ctrlap__hal_1ggacc46943975d7ca5c86e97f4a909e369da18ab7bbfc1a8a4f10f3c5bff1cfa7fb4" prot="public">
          <name>NRF_CTRLAP_INT_TXDONE_MASK</name>
          <initializer>= CTRLAPPERI_INTENSET_TXDONE_Msk</initializer>
          <briefdescription>
<para>Interrupt on TXDONE event. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>CTRLAP interrupts. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ctrlap.h" line="58" column="1" bodyfile="hal/nrf_ctrlap.h" bodystart="59" bodyend="62"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__ctrlap__hal_1ga0cc0d2d29f672be2421e9aa8d25cb3a8" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_ctrlap_bootmode_t</name>
        <enumvalue id="group__nrf__ctrlap__hal_1gga0cc0d2d29f672be2421e9aa8d25cb3a8a8c5f7092f337a754956fb48ad89abc65" prot="public">
          <name>NRF_CTRLAP_MODE_NORMAL</name>
          <initializer>= CTRLAPPERI_MAILBOX_BOOTMODE_MODE_Normal</initializer>
          <briefdescription>
<para>Normal mode of operation. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__ctrlap__hal_1gga0cc0d2d29f672be2421e9aa8d25cb3a8acfec97b0669e51c7d0ff6c4178fd09df" prot="public">
          <name>NRF_CTRLAP_MODE_ROM_OPERATION</name>
          <initializer>= CTRLAPPERI_MAILBOX_BOOTMODE_MODE_ROMOperation</initializer>
          <briefdescription>
<para>ROM operation mode. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>CTRLAP secure domain boot mode. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ctrlap.h" line="73" column="1" bodyfile="hal/nrf_ctrlap.h" bodystart="74" bodyend="77"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__nrf__ctrlap__hal_1ga0a7052bafa8adf04564244e727b4ef9d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_ctrlap_event_clear</definition>
        <argsstring>(NRF_CTRLAPPERI_Type *p_reg, nrf_ctrlap_event_t event)</argsstring>
        <name>nrf_ctrlap_event_clear</name>
        <param>
          <type>NRF_CTRLAPPERI_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__ctrlap__hal_1gac9b5cbc4dd049f0dd0476e28ecb0ab3c" kindref="member">nrf_ctrlap_event_t</ref></type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>Function for clearing the specified CTRLAP event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event to clear. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ctrlap.h" line="237" column="24" bodyfile="hal/nrf_ctrlap.h" bodystart="237" bodyend="241" declfile="hal/nrf_ctrlap.h" declline="85" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__ctrlap__hal_1gad9aeb6cdd877b7be8f36552d3e165437" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE bool</type>
        <definition>NRF_STATIC_INLINE bool nrf_ctrlap_event_check</definition>
        <argsstring>(NRF_CTRLAPPERI_Type const *p_reg, nrf_ctrlap_event_t event)</argsstring>
        <name>nrf_ctrlap_event_check</name>
        <param>
          <type>NRF_CTRLAPPERI_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__ctrlap__hal_1gac9b5cbc4dd049f0dd0476e28ecb0ab3c" kindref="member">nrf_ctrlap_event_t</ref></type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>Function for retrieving the state of the CTRLAP event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event to be checked.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>The event has been generated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>The event has not been generated. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ctrlap.h" line="243" column="24" bodyfile="hal/nrf_ctrlap.h" bodystart="243" bodyend="247" declfile="hal/nrf_ctrlap.h" declline="97" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__ctrlap__hal_1gab93d243d2a78982e1dbbe740cb40286a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_ctrlap_event_address_get</definition>
        <argsstring>(NRF_CTRLAPPERI_Type const *p_reg, nrf_ctrlap_event_t event)</argsstring>
        <name>nrf_ctrlap_event_address_get</name>
        <param>
          <type>NRF_CTRLAPPERI_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__ctrlap__hal_1gac9b5cbc4dd049f0dd0476e28ecb0ab3c" kindref="member">nrf_ctrlap_event_t</ref></type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>Function for getting the address of the specified CTRLAP event register. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>Requested event.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>Address</parametername>
</parameternamelist>
<parameterdescription>
<para>of the specified event register. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ctrlap.h" line="249" column="28" bodyfile="hal/nrf_ctrlap.h" bodystart="249" bodyend="253" declfile="hal/nrf_ctrlap.h" declline="108" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__ctrlap__hal_1ga20898b56f719287445eaf0b144f19a09" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_ctrlap_int_enable</definition>
        <argsstring>(NRF_CTRLAPPERI_Type *p_reg, uint32_t mask)</argsstring>
        <name>nrf_ctrlap_int_enable</name>
        <param>
          <type>NRF_CTRLAPPERI_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Function for enabling the specified interrupts. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of interrupts to be enabled. Use <ref refid="group__nrf__ctrlap__hal_1gacc46943975d7ca5c86e97f4a909e369d" kindref="member">nrf_ctrlap_int_mask_t</ref> values for bit masking. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ctrlap.h" line="255" column="24" bodyfile="hal/nrf_ctrlap.h" bodystart="255" bodyend="258" declfile="hal/nrf_ctrlap.h" declline="118" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__ctrlap__hal_1gac30e775822a0a067b4fab62f640a8eb9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_ctrlap_int_disable</definition>
        <argsstring>(NRF_CTRLAPPERI_Type *p_reg, uint32_t mask)</argsstring>
        <name>nrf_ctrlap_int_disable</name>
        <param>
          <type>NRF_CTRLAPPERI_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Function for disabling the specified interrupts. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of interrupts to be disabled. Use <ref refid="group__nrf__ctrlap__hal_1gacc46943975d7ca5c86e97f4a909e369d" kindref="member">nrf_ctrlap_int_mask_t</ref> values for bit masking. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ctrlap.h" line="260" column="24" bodyfile="hal/nrf_ctrlap.h" bodystart="260" bodyend="263" declfile="hal/nrf_ctrlap.h" declline="127" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__ctrlap__hal_1gad410c04adc3fc783e9e768bb99ba31bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_ctrlap_int_enable_check</definition>
        <argsstring>(NRF_CTRLAPPERI_Type const *p_reg, uint32_t mask)</argsstring>
        <name>nrf_ctrlap_int_enable_check</name>
        <param>
          <type>NRF_CTRLAPPERI_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Function for checking if the specified interrupts are enabled. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of interrupts to be checked. Use <ref refid="group__nrf__ctrlap__hal_1gacc46943975d7ca5c86e97f4a909e369d" kindref="member">nrf_ctrlap_int_mask_t</ref> values for bit masking.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>Mask</parametername>
</parameternamelist>
<parameterdescription>
<para>of enabled interrupts. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ctrlap.h" line="265" column="28" bodyfile="hal/nrf_ctrlap.h" bodystart="265" bodyend="269" declfile="hal/nrf_ctrlap.h" declline="138" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__ctrlap__hal_1gae663f06ef846d60f048a3a7bc489f6e0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_ctrlap_int_pending_get</definition>
        <argsstring>(NRF_CTRLAPPERI_Type const *p_reg)</argsstring>
        <name>nrf_ctrlap_int_pending_get</name>
        <param>
          <type>NRF_CTRLAPPERI_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for retrieving the state of pending interrupts. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>States of pending interrupt are saved as a bitmask. One set at particular position means that interrupt for event is pending.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>Bitmask</parametername>
</parameternamelist>
<parameterdescription>
<para>with information about pending interrupts. Use <ref refid="group__nrf__ctrlap__hal_1gacc46943975d7ca5c86e97f4a909e369d" kindref="member">nrf_ctrlap_int_mask_t</ref> values for bit masking. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ctrlap.h" line="271" column="28" bodyfile="hal/nrf_ctrlap.h" bodystart="271" bodyend="274" declfile="hal/nrf_ctrlap.h" declline="152" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__ctrlap__hal_1ga03e2fb9407edb0fe0d425fdd5732fc43" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_ctrlap_mailbox_rxdata_get</definition>
        <argsstring>(NRF_CTRLAPPERI_Type const *p_reg)</argsstring>
        <name>nrf_ctrlap_mailbox_rxdata_get</name>
        <param>
          <type>NRF_CTRLAPPERI_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for reading data sent from the debugger to the CPU. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Reading from this register will clear pending status of RX.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>Data</parametername>
</parameternamelist>
<parameterdescription>
<para>sent from the debugger to the CPU. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ctrlap.h" line="276" column="28" bodyfile="hal/nrf_ctrlap.h" bodystart="276" bodyend="279" declfile="hal/nrf_ctrlap.h" declline="163" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__ctrlap__hal_1gaf44968f7a952c4beec5851a904033500" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE bool</type>
        <definition>NRF_STATIC_INLINE bool nrf_ctrlap_mailbox_rxstatus_pending_check</definition>
        <argsstring>(NRF_CTRLAPPERI_Type const *p_reg)</argsstring>
        <name>nrf_ctrlap_mailbox_rxstatus_pending_check</name>
        <param>
          <type>NRF_CTRLAPPERI_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for checking if data sent from the debugger to the CPU has been read. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>Data pending in register RXDATA. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>No data pending in register RXDATA. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ctrlap.h" line="281" column="24" bodyfile="hal/nrf_ctrlap.h" bodystart="281" bodyend="284" declfile="hal/nrf_ctrlap.h" declline="173" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__ctrlap__hal_1ga26952946f300db05f464986fb4a2ab93" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_ctrlap_mailbox_txdata_get</definition>
        <argsstring>(NRF_CTRLAPPERI_Type const *p_reg)</argsstring>
        <name>nrf_ctrlap_mailbox_txdata_get</name>
        <param>
          <type>NRF_CTRLAPPERI_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for reading data sent from CPU to debugger. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>Data</parametername>
</parameternamelist>
<parameterdescription>
<para>sent from the CPU to the debugger. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ctrlap.h" line="286" column="28" bodyfile="hal/nrf_ctrlap.h" bodystart="286" bodyend="289" declfile="hal/nrf_ctrlap.h" declline="182" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__ctrlap__hal_1gaf2829f4324c91181a4b7d1b27294c267" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_ctrlap_mailbox_txdata_set</definition>
        <argsstring>(NRF_CTRLAPPERI_Type *p_reg, uint32_t data)</argsstring>
        <name>nrf_ctrlap_mailbox_txdata_set</name>
        <param>
          <type>NRF_CTRLAPPERI_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Function for writing data sent from CPU to debugger. </para>
        </briefdescription>
        <detaileddescription>
<para>Writing to this register will automatically set field <computeroutput>DataPending</computeroutput> in register <computeroutput>TXSTATUS</computeroutput>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">data</parametername>
</parameternamelist>
<parameterdescription>
<para>Data to send. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ctrlap.h" line="291" column="24" bodyfile="hal/nrf_ctrlap.h" bodystart="291" bodyend="295" declfile="hal/nrf_ctrlap.h" declline="192" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__ctrlap__hal_1ga3b960c5b6cbb8fb24942e3b077a97e3a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE bool</type>
        <definition>NRF_STATIC_INLINE bool nrf_ctrlap_mailbox_txstatus_pending_check</definition>
        <argsstring>(NRF_CTRLAPPERI_Type const *p_reg)</argsstring>
        <name>nrf_ctrlap_mailbox_txstatus_pending_check</name>
        <param>
          <type>NRF_CTRLAPPERI_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for checking if data sent from the CPU to the debugger has been read. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>Data pending in register TXDATA. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>No data pending in register TXDATA. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ctrlap.h" line="297" column="24" bodyfile="hal/nrf_ctrlap.h" bodystart="297" bodyend="300" declfile="hal/nrf_ctrlap.h" declline="203" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__ctrlap__hal_1ga29823940bfd9dd34d788f1b39fde72ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE <ref refid="group__nrf__ctrlap__hal_1ga0cc0d2d29f672be2421e9aa8d25cb3a8" kindref="member">nrf_ctrlap_bootmode_t</ref></type>
        <definition>NRF_STATIC_INLINE nrf_ctrlap_bootmode_t nrf_ctrlap_mailbox_bootmode_get</definition>
        <argsstring>(NRF_CTRLAPPERI_Type const *p_reg)</argsstring>
        <name>nrf_ctrlap_mailbox_bootmode_get</name>
        <param>
          <type>NRF_CTRLAPPERI_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for checking boot mode. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>If ROM operation mode is set the MAILBOX is used to communicate the secure ROM operations.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Boot mode. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ctrlap.h" line="303" column="1" bodyfile="hal/nrf_ctrlap.h" bodystart="303" bodyend="306" declfile="hal/nrf_ctrlap.h" declline="215" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__ctrlap__hal_1ga10409a6fe61d8dd46485c6a6a3a77a61" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_ctrlap_info_set</definition>
        <argsstring>(NRF_CTRLAPPERI_Type *p_reg, nrf_ctrlap_info_t const *p_data)</argsstring>
        <name>nrf_ctrlap_info_set</name>
        <param>
          <type>NRF_CTRLAPPERI_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="structnrf__ctrlap__info__t" kindref="compound">nrf_ctrlap_info_t</ref> const *</type>
          <declname>p_data</declname>
        </param>
        <briefdescription>
<para>Function for setting the CTRLAP device information. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">p_data</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the device information structure. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ctrlap.h" line="308" column="24" bodyfile="hal/nrf_ctrlap.h" bodystart="308" bodyend="314" declfile="hal/nrf_ctrlap.h" declline="223" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__ctrlap__hal_1gaf46b94aa3230b338a9fd4da994f0e93c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_ctrlap_info_get</definition>
        <argsstring>(NRF_CTRLAPPERI_Type const *p_reg, nrf_ctrlap_info_t *p_data)</argsstring>
        <name>nrf_ctrlap_info_get</name>
        <param>
          <type>NRF_CTRLAPPERI_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="structnrf__ctrlap__info__t" kindref="compound">nrf_ctrlap_info_t</ref> *</type>
          <declname>p_data</declname>
        </param>
        <briefdescription>
<para>Function for getting the CTRLAP device information. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">p_data</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the data structure to be filled with device information. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ctrlap.h" line="316" column="24" bodyfile="hal/nrf_ctrlap.h" bodystart="316" bodyend="322" declfile="hal/nrf_ctrlap.h" declline="232" declcolumn="24"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2023<sp/>-<sp/>2024,<sp/>Nordic<sp/>Semiconductor<sp/>ASA</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>All<sp/>rights<sp/>reserved.</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>SPDX-License-Identifier:<sp/>BSD-3-Clause</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions<sp/>are<sp/>met:</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>1.<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright<sp/>notice,<sp/>this</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>2.<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the<sp/>distribution.</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/>3.<sp/>Neither<sp/>the<sp/>name<sp/>of<sp/>the<sp/>copyright<sp/>holder<sp/>nor<sp/>the<sp/>names<sp/>of<sp/>its</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>contributors<sp/>may<sp/>be<sp/>used<sp/>to<sp/>endorse<sp/>or<sp/>promote<sp/>products<sp/>derived<sp/>from<sp/>this</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>software<sp/>without<sp/>specific<sp/>prior<sp/>written<sp/>permission.</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>COPYRIGHT<sp/>HOLDERS<sp/>AND<sp/>CONTRIBUTORS<sp/>&quot;AS<sp/>IS&quot;</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/>AND<sp/>ANY<sp/>EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>THE</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*<sp/>ARE<sp/>DISCLAIMED.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>COPYRIGHT<sp/>HOLDER<sp/>OR<sp/>CONTRIBUTORS<sp/>BE</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,<sp/>SPECIAL,<sp/>EXEMPLARY,<sp/>OR</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>PROCUREMENT<sp/>OF</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>*<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,<sp/>DATA,<sp/>OR<sp/>PROFITS;<sp/>OR<sp/>BUSINESS</highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/>*<sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY<sp/>THEORY<sp/>OF<sp/>LIABILITY,<sp/>WHETHER<sp/>IN</highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/>*<sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR<sp/>OTHERWISE)</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/>*<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE<sp/>OF<sp/>THIS<sp/>SOFTWARE,<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/>*<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight></codeline>
<codeline lineno="32"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>NRF_CTRLAP_H__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_CTRLAP_H__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;nrfx.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="43"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="44"><highlight class="comment"><sp/>*<sp/>@defgroup<sp/>nrf_ctrlap_hal<sp/>CTRL-AP<sp/>HAL</highlight></codeline>
<codeline lineno="45"><highlight class="comment"><sp/>*<sp/>@{</highlight></codeline>
<codeline lineno="46"><highlight class="comment"><sp/>*<sp/>@ingroup<sp/>nrf_ctrlap</highlight></codeline>
<codeline lineno="47"><highlight class="comment"><sp/>*<sp/>@brief<sp/><sp/><sp/>Hardware<sp/>access<sp/>layer<sp/>for<sp/>managing<sp/>the<sp/>Control<sp/>Access<sp/>Port<sp/>(CTRL-AP)<sp/>peripheral.</highlight></codeline>
<codeline lineno="48"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="50"><highlight class="comment">/**<sp/>@brief<sp/>CTRLAP<sp/>events.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal">{</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__ctrlap__hal_1ggac9b5cbc4dd049f0dd0476e28ecb0ab3cad492ff2ad48e05240f02b3dc2e5942a2" kindref="member">NRF_CTRLAP_EVENT_RXREADY</ref><sp/>=<sp/>offsetof(NRF_CTRLAPPERI_Type,<sp/>EVENTS_RXREADY),<sp/></highlight><highlight class="comment">///&lt;<sp/>New<sp/>data<sp/>from<sp/>the<sp/>peer<sp/>is<sp/>available.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__ctrlap__hal_1ggac9b5cbc4dd049f0dd0476e28ecb0ab3ca91aeae8a32cfbd0d198866ca4fad03a7" kindref="member">NRF_CTRLAP_EVENT_TXDONE</ref><sp/><sp/>=<sp/>offsetof(NRF_CTRLAPPERI_Type,<sp/>EVENTS_TXDONE),<sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Data<sp/>has<sp/>been<sp/>read<sp/>by<sp/>the<sp/>peer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal">}<sp/><ref refid="group__nrf__ctrlap__hal_1gac9b5cbc4dd049f0dd0476e28ecb0ab3c" kindref="member">nrf_ctrlap_event_t</ref>;</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="57"><highlight class="comment">/**<sp/>@brief<sp/>CTRLAP<sp/>interrupts.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal">{</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__ctrlap__hal_1ggacc46943975d7ca5c86e97f4a909e369daae2eca1c7147856ffcb88056e9e56e03" kindref="member">NRF_CTRLAP_INT_RXREADY_MASK</ref><sp/>=<sp/>CTRLAPPERI_INTENSET_RXREADY_Msk,<sp/></highlight><highlight class="comment">///&lt;<sp/>Interrupt<sp/>on<sp/>RXREADY<sp/>event.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__ctrlap__hal_1ggacc46943975d7ca5c86e97f4a909e369da18ab7bbfc1a8a4f10f3c5bff1cfa7fb4" kindref="member">NRF_CTRLAP_INT_TXDONE_MASK</ref><sp/><sp/>=<sp/>CTRLAPPERI_INTENSET_TXDONE_Msk,<sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Interrupt<sp/>on<sp/>TXDONE<sp/>event.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal">}<sp/><ref refid="group__nrf__ctrlap__hal_1gacc46943975d7ca5c86e97f4a909e369d" kindref="member">nrf_ctrlap_int_mask_t</ref>;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="64"><highlight class="comment">/**<sp/>@brief<sp/>CTRLAP<sp/>device<sp/>information.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65" refid="structnrf__ctrlap__info__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal">{</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>partno;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Part<sp/>number<sp/>of<sp/>the<sp/>device,<sp/>this<sp/>information<sp/>is<sp/>retained<sp/>on<sp/>system<sp/>on<sp/>idle.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>hw_revision;<sp/></highlight><highlight class="comment">///&lt;<sp/>Hardware<sp/>Revision<sp/>of<sp/>the<sp/>device,<sp/>this<sp/>information<sp/>is<sp/>retained<sp/>on<sp/>system<sp/>on<sp/>idle.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>ready;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Set<sp/>when<sp/>INFO<sp/>registers<sp/>update<sp/>is<sp/>completed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal">}<sp/><ref refid="structnrf__ctrlap__info__t" kindref="compound">nrf_ctrlap_info_t</ref>;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="72"><highlight class="comment">/**<sp/>@brief<sp/>CTRLAP<sp/>secure<sp/>domain<sp/>boot<sp/>mode.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal">{</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__ctrlap__hal_1gga0cc0d2d29f672be2421e9aa8d25cb3a8a8c5f7092f337a754956fb48ad89abc65" kindref="member">NRF_CTRLAP_MODE_NORMAL</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>CTRLAPPERI_MAILBOX_BOOTMODE_MODE_Normal,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Normal<sp/>mode<sp/>of<sp/>operation.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__ctrlap__hal_1gga0cc0d2d29f672be2421e9aa8d25cb3a8acfec97b0669e51c7d0ff6c4178fd09df" kindref="member">NRF_CTRLAP_MODE_ROM_OPERATION</ref><sp/>=<sp/>CTRLAPPERI_MAILBOX_BOOTMODE_MODE_ROMOperation,<sp/></highlight><highlight class="comment">///&lt;<sp/>ROM<sp/>operation<sp/>mode.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal">}<sp/><ref refid="group__nrf__ctrlap__hal_1ga0cc0d2d29f672be2421e9aa8d25cb3a8" kindref="member">nrf_ctrlap_bootmode_t</ref>;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="79"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="80"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>clearing<sp/>the<sp/>specified<sp/>CTRLAP<sp/>event.</highlight></codeline>
<codeline lineno="81"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="82"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="83"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>event<sp/>Event<sp/>to<sp/>clear.</highlight></codeline>
<codeline lineno="84"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__ctrlap__hal_1ga0a7052bafa8adf04564244e727b4ef9d" kindref="member">nrf_ctrlap_event_clear</ref>(NRF_CTRLAPPERI_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__ctrlap__hal_1gac9b5cbc4dd049f0dd0476e28ecb0ab3c" kindref="member">nrf_ctrlap_event_t</ref><sp/><sp/><sp/><sp/>event);</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="88"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="89"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>retrieving<sp/>the<sp/>state<sp/>of<sp/>the<sp/>CTRLAP<sp/>event.</highlight></codeline>
<codeline lineno="90"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="91"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="92"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>event<sp/>Event<sp/>to<sp/>be<sp/>checked.</highlight></codeline>
<codeline lineno="93"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="94"><highlight class="comment"><sp/>*<sp/>@retval<sp/>true<sp/><sp/>The<sp/>event<sp/>has<sp/>been<sp/>generated.</highlight></codeline>
<codeline lineno="95"><highlight class="comment"><sp/>*<sp/>@retval<sp/>false<sp/>The<sp/>event<sp/>has<sp/>not<sp/>been<sp/>generated.</highlight></codeline>
<codeline lineno="96"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrf__ctrlap__hal_1gad9aeb6cdd877b7be8f36552d3e165437" kindref="member">nrf_ctrlap_event_check</ref>(NRF_CTRLAPPERI_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__ctrlap__hal_1gac9b5cbc4dd049f0dd0476e28ecb0ab3c" kindref="member">nrf_ctrlap_event_t</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>event);</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="100"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="101"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>the<sp/>address<sp/>of<sp/>the<sp/>specified<sp/>CTRLAP<sp/>event<sp/>register.</highlight></codeline>
<codeline lineno="102"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="103"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="104"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>event<sp/>Requested<sp/>event.</highlight></codeline>
<codeline lineno="105"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="106"><highlight class="comment"><sp/>*<sp/>@retval<sp/>Address<sp/>of<sp/>the<sp/>specified<sp/>event<sp/>register.</highlight></codeline>
<codeline lineno="107"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__ctrlap__hal_1gab93d243d2a78982e1dbbe740cb40286a" kindref="member">nrf_ctrlap_event_address_get</ref>(NRF_CTRLAPPERI_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__ctrlap__hal_1gac9b5cbc4dd049f0dd0476e28ecb0ab3c" kindref="member">nrf_ctrlap_event_t</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>event);</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="111"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="112"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>enabling<sp/>the<sp/>specified<sp/>interrupts.</highlight></codeline>
<codeline lineno="113"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="114"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="115"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>mask<sp/><sp/>Mask<sp/>of<sp/>interrupts<sp/>to<sp/>be<sp/>enabled.</highlight></codeline>
<codeline lineno="116"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Use<sp/>@ref<sp/>nrf_ctrlap_int_mask_t<sp/>values<sp/>for<sp/>bit<sp/>masking.</highlight></codeline>
<codeline lineno="117"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__ctrlap__hal_1ga20898b56f719287445eaf0b144f19a09" kindref="member">nrf_ctrlap_int_enable</ref>(NRF_CTRLAPPERI_Type<sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>mask);</highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="120"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="121"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>disabling<sp/>the<sp/>specified<sp/>interrupts.</highlight></codeline>
<codeline lineno="122"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="123"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="124"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>mask<sp/><sp/>Mask<sp/>of<sp/>interrupts<sp/>to<sp/>be<sp/>disabled.</highlight></codeline>
<codeline lineno="125"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Use<sp/>@ref<sp/>nrf_ctrlap_int_mask_t<sp/>values<sp/>for<sp/>bit<sp/>masking.</highlight></codeline>
<codeline lineno="126"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__ctrlap__hal_1gac30e775822a0a067b4fab62f640a8eb9" kindref="member">nrf_ctrlap_int_disable</ref>(NRF_CTRLAPPERI_Type<sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>mask);</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="129"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="130"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>checking<sp/>if<sp/>the<sp/>specified<sp/>interrupts<sp/>are<sp/>enabled.</highlight></codeline>
<codeline lineno="131"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="132"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="133"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>mask<sp/><sp/>Mask<sp/>of<sp/>interrupts<sp/>to<sp/>be<sp/>checked.</highlight></codeline>
<codeline lineno="134"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Use<sp/>@ref<sp/>nrf_ctrlap_int_mask_t<sp/>values<sp/>for<sp/>bit<sp/>masking.</highlight></codeline>
<codeline lineno="135"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="136"><highlight class="comment"><sp/>*<sp/>@retval<sp/>Mask<sp/>of<sp/>enabled<sp/>interrupts.</highlight></codeline>
<codeline lineno="137"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__ctrlap__hal_1gad410c04adc3fc783e9e768bb99ba31bd" kindref="member">nrf_ctrlap_int_enable_check</ref>(NRF_CTRLAPPERI_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mask);</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="141"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="142"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>retrieving<sp/>the<sp/>state<sp/>of<sp/>pending<sp/>interrupts.</highlight></codeline>
<codeline lineno="143"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="144"><highlight class="comment"><sp/>*<sp/>@note<sp/>States<sp/>of<sp/>pending<sp/>interrupt<sp/>are<sp/>saved<sp/>as<sp/>a<sp/>bitmask.</highlight></codeline>
<codeline lineno="145"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>One<sp/>set<sp/>at<sp/>particular<sp/>position<sp/>means<sp/>that<sp/>interrupt<sp/>for<sp/>event<sp/>is<sp/>pending.</highlight></codeline>
<codeline lineno="146"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="147"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="148"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="149"><highlight class="comment"><sp/>*<sp/>@retval<sp/>Bitmask<sp/>with<sp/>information<sp/>about<sp/>pending<sp/>interrupts.</highlight></codeline>
<codeline lineno="150"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Use<sp/>@ref<sp/>nrf_ctrlap_int_mask_t<sp/>values<sp/>for<sp/>bit<sp/>masking.</highlight></codeline>
<codeline lineno="151"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__ctrlap__hal_1gae663f06ef846d60f048a3a7bc489f6e0" kindref="member">nrf_ctrlap_int_pending_get</ref>(NRF_CTRLAPPERI_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="154"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="155"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>reading<sp/>data<sp/>sent<sp/>from<sp/>the<sp/>debugger<sp/>to<sp/>the<sp/>CPU.</highlight></codeline>
<codeline lineno="156"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="157"><highlight class="comment"><sp/>*<sp/>@note<sp/>Reading<sp/>from<sp/>this<sp/>register<sp/>will<sp/>clear<sp/>pending<sp/>status<sp/>of<sp/>RX.</highlight></codeline>
<codeline lineno="158"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="159"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="160"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="161"><highlight class="comment"><sp/>*<sp/>@retval<sp/>Data<sp/>sent<sp/>from<sp/>the<sp/>debugger<sp/>to<sp/>the<sp/>CPU.</highlight></codeline>
<codeline lineno="162"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__ctrlap__hal_1ga03e2fb9407edb0fe0d425fdd5732fc43" kindref="member">nrf_ctrlap_mailbox_rxdata_get</ref>(NRF_CTRLAPPERI_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="165"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="166"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>checking<sp/>if<sp/>data<sp/>sent<sp/>from<sp/>the<sp/>debugger<sp/>to<sp/>the<sp/>CPU<sp/>has<sp/>been<sp/>read.</highlight></codeline>
<codeline lineno="167"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="168"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="169"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="170"><highlight class="comment"><sp/>*<sp/>@retval<sp/>true<sp/><sp/>Data<sp/>pending<sp/>in<sp/>register<sp/>RXDATA.</highlight></codeline>
<codeline lineno="171"><highlight class="comment"><sp/>*<sp/>@retval<sp/>false<sp/>No<sp/>data<sp/>pending<sp/>in<sp/>register<sp/>RXDATA.</highlight></codeline>
<codeline lineno="172"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrf__ctrlap__hal_1gaf44968f7a952c4beec5851a904033500" kindref="member">nrf_ctrlap_mailbox_rxstatus_pending_check</ref>(NRF_CTRLAPPERI_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="175"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="176"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>reading<sp/>data<sp/>sent<sp/>from<sp/>CPU<sp/>to<sp/>debugger.</highlight></codeline>
<codeline lineno="177"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="178"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="179"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="180"><highlight class="comment"><sp/>*<sp/>@retval<sp/>Data<sp/>sent<sp/>from<sp/>the<sp/>CPU<sp/>to<sp/>the<sp/>debugger.</highlight></codeline>
<codeline lineno="181"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__ctrlap__hal_1ga26952946f300db05f464986fb4a2ab93" kindref="member">nrf_ctrlap_mailbox_txdata_get</ref>(NRF_CTRLAPPERI_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="184"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="185"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>writing<sp/>data<sp/>sent<sp/>from<sp/>CPU<sp/>to<sp/>debugger.</highlight></codeline>
<codeline lineno="186"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="187"><highlight class="comment"><sp/>*<sp/>@details<sp/>Writing<sp/>to<sp/>this<sp/>register<sp/>will<sp/>automatically<sp/>set<sp/>field<sp/>@p<sp/>DataPending<sp/>in<sp/>register<sp/>@p<sp/>TXSTATUS.</highlight></codeline>
<codeline lineno="188"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="189"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="190"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>data<sp/><sp/>Data<sp/>to<sp/>send.</highlight></codeline>
<codeline lineno="191"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__ctrlap__hal_1gaf2829f4324c91181a4b7d1b27294c267" kindref="member">nrf_ctrlap_mailbox_txdata_set</ref>(NRF_CTRLAPPERI_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data);</highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="195"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="196"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>checking<sp/>if<sp/>data<sp/>sent<sp/>from<sp/>the<sp/>CPU<sp/>to<sp/>the<sp/>debugger<sp/>has<sp/>been<sp/>read.</highlight></codeline>
<codeline lineno="197"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="198"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="199"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="200"><highlight class="comment"><sp/>*<sp/>@retval<sp/>true<sp/><sp/>Data<sp/>pending<sp/>in<sp/>register<sp/>TXDATA.</highlight></codeline>
<codeline lineno="201"><highlight class="comment"><sp/>*<sp/>@retval<sp/>false<sp/>No<sp/>data<sp/>pending<sp/>in<sp/>register<sp/>TXDATA.</highlight></codeline>
<codeline lineno="202"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrf__ctrlap__hal_1ga3b960c5b6cbb8fb24942e3b077a97e3a" kindref="member">nrf_ctrlap_mailbox_txstatus_pending_check</ref>(NRF_CTRLAPPERI_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="205"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="206"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>checking<sp/>boot<sp/>mode.</highlight></codeline>
<codeline lineno="207"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="208"><highlight class="comment"><sp/>*<sp/>@note<sp/>If<sp/>ROM<sp/>operation<sp/>mode<sp/>is<sp/>set<sp/>the<sp/>MAILBOX<sp/>is<sp/>used<sp/>to<sp/>communicate<sp/>the<sp/>secure<sp/>ROM<sp/>operations.</highlight></codeline>
<codeline lineno="209"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="210"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="211"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="212"><highlight class="comment"><sp/>*<sp/>@return<sp/>Boot<sp/>mode.</highlight></codeline>
<codeline lineno="213"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal">NRF_STATIC_INLINE<sp/><ref refid="group__nrf__ctrlap__hal_1ga0cc0d2d29f672be2421e9aa8d25cb3a8" kindref="member">nrf_ctrlap_bootmode_t</ref></highlight></codeline>
<codeline lineno="215"><highlight class="normal"><ref refid="group__nrf__ctrlap__hal_1ga29823940bfd9dd34d788f1b39fde72ab" kindref="member">nrf_ctrlap_mailbox_bootmode_get</ref>(NRF_CTRLAPPERI_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="217"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="218"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>the<sp/>CTRLAP<sp/>device<sp/>information.</highlight></codeline>
<codeline lineno="219"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="220"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="221"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_data<sp/>Pointer<sp/>to<sp/>the<sp/>device<sp/>information<sp/>structure.</highlight></codeline>
<codeline lineno="222"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__ctrlap__hal_1ga10409a6fe61d8dd46485c6a6a3a77a61" kindref="member">nrf_ctrlap_info_set</ref>(NRF_CTRLAPPERI_Type<sp/><sp/>*<sp/><sp/><sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structnrf__ctrlap__info__t" kindref="compound">nrf_ctrlap_info_t</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_data);</highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="226"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="227"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>the<sp/>CTRLAP<sp/>device<sp/>information.</highlight></codeline>
<codeline lineno="228"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="229"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/><sp/>p_reg<sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="230"><highlight class="comment"><sp/>*<sp/>@param[out]<sp/>p_data<sp/>Pointer<sp/>to<sp/>the<sp/>data<sp/>structure<sp/>to<sp/>be<sp/>filled<sp/>with<sp/>device<sp/>information.</highlight></codeline>
<codeline lineno="231"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__ctrlap__hal_1gaf46b94aa3230b338a9fd4da994f0e93c" kindref="member">nrf_ctrlap_info_get</ref>(NRF_CTRLAPPERI_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structnrf__ctrlap__info__t" kindref="compound">nrf_ctrlap_info_t</ref><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_data);</highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>NRF_DECLARE_ONLY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__ctrlap__hal_1ga0a7052bafa8adf04564244e727b4ef9d" kindref="member">nrf_ctrlap_event_clear</ref>(NRF_CTRLAPPERI_Type<sp/>*<sp/>p_reg,<sp/><ref refid="group__nrf__ctrlap__hal_1gac9b5cbc4dd049f0dd0476e28ecb0ab3c" kindref="member">nrf_ctrlap_event_t</ref><sp/>event)</highlight></codeline>
<codeline lineno="238"><highlight class="normal">{</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/>*((</highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint32_t<sp/>*)((uint8_t<sp/>*)p_reg<sp/>+<sp/>(uint32_t)event))<sp/>=<sp/>0x0UL;</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/>nrf_event_readback((uint8_t<sp/>*)p_reg<sp/>+<sp/>(uint32_t)event);</highlight></codeline>
<codeline lineno="241"><highlight class="normal">}</highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrf__ctrlap__hal_1gad9aeb6cdd877b7be8f36552d3e165437" kindref="member">nrf_ctrlap_event_check</ref>(NRF_CTRLAPPERI_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__ctrlap__hal_1gac9b5cbc4dd049f0dd0476e28ecb0ab3c" kindref="member">nrf_ctrlap_event_t</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>event)</highlight></codeline>
<codeline lineno="245"><highlight class="normal">{</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>nrf_event_check(p_reg,<sp/>event);</highlight></codeline>
<codeline lineno="247"><highlight class="normal">}</highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__ctrlap__hal_1gab93d243d2a78982e1dbbe740cb40286a" kindref="member">nrf_ctrlap_event_address_get</ref>(NRF_CTRLAPPERI_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__ctrlap__hal_1gac9b5cbc4dd049f0dd0476e28ecb0ab3c" kindref="member">nrf_ctrlap_event_t</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>event)</highlight></codeline>
<codeline lineno="251"><highlight class="normal">{</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((uint32_t)p_reg<sp/>+<sp/>(uint32_t)event);</highlight></codeline>
<codeline lineno="253"><highlight class="normal">}</highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__ctrlap__hal_1ga20898b56f719287445eaf0b144f19a09" kindref="member">nrf_ctrlap_int_enable</ref>(NRF_CTRLAPPERI_Type<sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>mask)</highlight></codeline>
<codeline lineno="256"><highlight class="normal">{</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;INTENSET<sp/>=<sp/>mask;</highlight></codeline>
<codeline lineno="258"><highlight class="normal">}</highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__ctrlap__hal_1gac30e775822a0a067b4fab62f640a8eb9" kindref="member">nrf_ctrlap_int_disable</ref>(NRF_CTRLAPPERI_Type<sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>mask)</highlight></codeline>
<codeline lineno="261"><highlight class="normal">{</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;INTENCLR<sp/>=<sp/>mask;</highlight></codeline>
<codeline lineno="263"><highlight class="normal">}</highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__ctrlap__hal_1gad410c04adc3fc783e9e768bb99ba31bd" kindref="member">nrf_ctrlap_int_enable_check</ref>(NRF_CTRLAPPERI_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mask)</highlight></codeline>
<codeline lineno="267"><highlight class="normal">{</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p_reg-&gt;INTENSET<sp/>&amp;<sp/>mask;</highlight></codeline>
<codeline lineno="269"><highlight class="normal">}</highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__ctrlap__hal_1gae663f06ef846d60f048a3a7bc489f6e0" kindref="member">nrf_ctrlap_int_pending_get</ref>(NRF_CTRLAPPERI_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="272"><highlight class="normal">{</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p_reg-&gt;INTPEND;</highlight></codeline>
<codeline lineno="274"><highlight class="normal">}</highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__ctrlap__hal_1ga03e2fb9407edb0fe0d425fdd5732fc43" kindref="member">nrf_ctrlap_mailbox_rxdata_get</ref>(NRF_CTRLAPPERI_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="277"><highlight class="normal">{</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p_reg-&gt;MAILBOX.RXDATA;</highlight></codeline>
<codeline lineno="279"><highlight class="normal">}</highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrf__ctrlap__hal_1gaf44968f7a952c4beec5851a904033500" kindref="member">nrf_ctrlap_mailbox_rxstatus_pending_check</ref>(NRF_CTRLAPPERI_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="282"><highlight class="normal">{</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">)p_reg-&gt;MAILBOX.RXSTATUS;</highlight></codeline>
<codeline lineno="284"><highlight class="normal">}</highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__ctrlap__hal_1ga26952946f300db05f464986fb4a2ab93" kindref="member">nrf_ctrlap_mailbox_txdata_get</ref>(NRF_CTRLAPPERI_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="287"><highlight class="normal">{</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p_reg-&gt;MAILBOX.TXDATA;</highlight></codeline>
<codeline lineno="289"><highlight class="normal">}</highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__ctrlap__hal_1gaf2829f4324c91181a4b7d1b27294c267" kindref="member">nrf_ctrlap_mailbox_txdata_set</ref>(NRF_CTRLAPPERI_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data)</highlight></codeline>
<codeline lineno="293"><highlight class="normal">{</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;MAILBOX.TXDATA<sp/>=<sp/>data;</highlight></codeline>
<codeline lineno="295"><highlight class="normal">}</highlight></codeline>
<codeline lineno="296"><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrf__ctrlap__hal_1ga3b960c5b6cbb8fb24942e3b077a97e3a" kindref="member">nrf_ctrlap_mailbox_txstatus_pending_check</ref>(NRF_CTRLAPPERI_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="298"><highlight class="normal">{</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">)p_reg-&gt;MAILBOX.TXSTATUS;</highlight></codeline>
<codeline lineno="300"><highlight class="normal">}</highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal">NRF_STATIC_INLINE<sp/><ref refid="group__nrf__ctrlap__hal_1ga0cc0d2d29f672be2421e9aa8d25cb3a8" kindref="member">nrf_ctrlap_bootmode_t</ref></highlight></codeline>
<codeline lineno="303"><highlight class="normal"><ref refid="group__nrf__ctrlap__hal_1ga29823940bfd9dd34d788f1b39fde72ab" kindref="member">nrf_ctrlap_mailbox_bootmode_get</ref>(NRF_CTRLAPPERI_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="304"><highlight class="normal">{</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="group__nrf__ctrlap__hal_1ga0cc0d2d29f672be2421e9aa8d25cb3a8" kindref="member">nrf_ctrlap_bootmode_t</ref>)p_reg-&gt;MAILBOX.BOOTMODE;</highlight></codeline>
<codeline lineno="306"><highlight class="normal">}</highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__ctrlap__hal_1ga10409a6fe61d8dd46485c6a6a3a77a61" kindref="member">nrf_ctrlap_info_set</ref>(NRF_CTRLAPPERI_Type<sp/>*<sp/><sp/><sp/><sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structnrf__ctrlap__info__t" kindref="compound">nrf_ctrlap_info_t</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_data)</highlight></codeline>
<codeline lineno="310"><highlight class="normal">{</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;INFO.PARTNO<sp/><sp/><sp/><sp/><sp/>=<sp/>p_data-&gt;<ref refid="structnrf__ctrlap__info__t_1a3c75ec33b8d044834990a1b0493347df" kindref="member">partno</ref>;</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;INFO.HWREVISION<sp/>=<sp/>p_data-&gt;<ref refid="structnrf__ctrlap__info__t_1a11aae1a90586f9afef6483117c4a65e0" kindref="member">hw_revision</ref>;</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;INFO.READY<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>!p_data-&gt;<ref refid="structnrf__ctrlap__info__t_1a87a993786f47c9a688627d3059adde57" kindref="member">ready</ref>;</highlight></codeline>
<codeline lineno="314"><highlight class="normal">}</highlight></codeline>
<codeline lineno="315"><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__ctrlap__hal_1gaf46b94aa3230b338a9fd4da994f0e93c" kindref="member">nrf_ctrlap_info_get</ref>(NRF_CTRLAPPERI_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structnrf__ctrlap__info__t" kindref="compound">nrf_ctrlap_info_t</ref><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_data)</highlight></codeline>
<codeline lineno="318"><highlight class="normal">{</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/>p_data-&gt;<ref refid="structnrf__ctrlap__info__t_1a3c75ec33b8d044834990a1b0493347df" kindref="member">partno</ref><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>p_reg-&gt;INFO.PARTNO;</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/>p_data-&gt;<ref refid="structnrf__ctrlap__info__t_1a11aae1a90586f9afef6483117c4a65e0" kindref="member">hw_revision</ref><sp/>=<sp/>p_reg-&gt;INFO.HWREVISION;</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/>p_data-&gt;<ref refid="structnrf__ctrlap__info__t_1a87a993786f47c9a688627d3059adde57" kindref="member">ready</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>!p_reg-&gt;INFO.READY;</highlight></codeline>
<codeline lineno="322"><highlight class="normal">}</highlight></codeline>
<codeline lineno="323"><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRF_DECLARE_ONLY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="326"><highlight class="comment">/**<sp/>@}<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal">}</highlight></codeline>
<codeline lineno="330"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRF_CTRLAP_H__</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="hal/nrf_ctrlap.h"/>
  </compounddef>
</doxygen>
