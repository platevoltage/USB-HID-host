<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="nrf__systick_8h" kind="file" language="C++">
    <compoundname>nrf_systick.h</compoundname>
    <includes local="no">nrfx.h</includes>
    <includedby refid="nrfx__systick_8h" local="no">drivers/include/nrfx_systick.h</includedby>
    <incdepgraph>
      <node id="1">
        <label>hal/nrf_systick.h</label>
        <link refid="nrf__systick_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>nrfx.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__nrf__systick__hal_1ga434dd61eb082c4d2f9e9f9c4ba9b1971" prot="public" static="no">
        <name>NRF_SYSTICK_VAL_MASK</name>
        <initializer>SysTick_VAL_CURRENT_Msk</initializer>
        <briefdescription>
<para>Mask of usable bits in the SysTick value. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_systick.h" line="60" column="9" bodyfile="hal/nrf_systick.h" bodystart="60" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="group__nrf__systick__hal_1ga49c38556c98d5fd6a215ae8ed4bba32c" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_systick_csr_flags_t</name>
        <enumvalue id="group__nrf__systick__hal_1gga49c38556c98d5fd6a215ae8ed4bba32ca21d950914ecb5f93457431319d8ccaa4" prot="public">
          <name>NRF_SYSTICK_CSR_COUNTFLAG_MASK</name>
          <initializer>= SysTick_CTRL_COUNTFLAG_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Status flag: Returns 1 if timer counted to 0 since the last read of this register. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__systick__hal_1gga49c38556c98d5fd6a215ae8ed4bba32ca63171e9eb85492e1d63fda00714c066e" prot="public">
          <name>NRF_SYSTICK_CSR_CLKSOURCE_MASK</name>
          <initializer>= SysTick_CTRL_CLKSOURCE_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Configuration bit: Select the SysTick clock source. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__systick__hal_1gga49c38556c98d5fd6a215ae8ed4bba32ca39661f9793008a87b696a2ab86161610" prot="public">
          <name>NRF_SYSTICK_CSR_CLKSOURCE_REF</name>
          <initializer>= 0U &lt;&lt; SysTick_CTRL_CLKSOURCE_Pos</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Configuration value: Select reference clock. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__systick__hal_1gga49c38556c98d5fd6a215ae8ed4bba32ca3c16ccf807a7b213e2e48352523810b8" prot="public">
          <name>NRF_SYSTICK_CSR_CLKSOURCE_CPU</name>
          <initializer>= 1U &lt;&lt; SysTick_CTRL_CLKSOURCE_Pos</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Configuration value: Select CPU clock. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__systick__hal_1gga49c38556c98d5fd6a215ae8ed4bba32cae609da6726edc0c0df396a1364aaea3f" prot="public">
          <name>NRF_SYSTICK_CSR_TICKINT_MASK</name>
          <initializer>= SysTick_CTRL_TICKINT_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Configuration bit: Enables SysTick exception request. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__systick__hal_1gga49c38556c98d5fd6a215ae8ed4bba32ca3a0bac7fa41895d840e9374cfcdf3599" prot="public">
          <name>NRF_SYSTICK_CSR_TICKINT_ENABLE</name>
          <initializer>= 1U &lt;&lt; SysTick_CTRL_TICKINT_Pos</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Configuration value: Counting down to zero does not assert the SysTick exception request. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__systick__hal_1gga49c38556c98d5fd6a215ae8ed4bba32ca83b301e2e96072ea339d854d15c15cfa" prot="public">
          <name>NRF_SYSTICK_CSR_TICKINT_DISABLE</name>
          <initializer>= 0U &lt;&lt; SysTick_CTRL_TICKINT_Pos</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Configuration value: Counting down to zero to asserts the SysTick exception request. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__systick__hal_1gga49c38556c98d5fd6a215ae8ed4bba32caf3cb7d6c53cf531fb3aa0eb78e5c6c0f" prot="public">
          <name>NRF_SYSTICK_CSR_ENABLE_MASK</name>
          <initializer>= SysTick_CTRL_ENABLE_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Configuration bit: Enable the SysTick timer. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__systick__hal_1gga49c38556c98d5fd6a215ae8ed4bba32ca89a2c3538df94c8703dee3d5fbc4b1d3" prot="public">
          <name>NRF_SYSTICK_CSR_ENABLE</name>
          <initializer>= 1U &lt;&lt; SysTick_CTRL_ENABLE_Pos</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Configuration value: Counter enabled. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__systick__hal_1gga49c38556c98d5fd6a215ae8ed4bba32cae21aa2ccd44d0f004447b0ba0e9580bd" prot="public">
          <name>NRF_SYSTICK_CSR_DISABLE</name>
          <initializer>= 0U &lt;&lt; SysTick_CTRL_ENABLE_Pos</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Configuration value: Counter disabled. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Flags used by SysTick configuration. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__nrf__systick__hal_1ga351895fef0d7850af00a1f7cf9921ad1" kindref="member">nrf_systick_csr_set</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__nrf__systick__hal_1ga44ac47ecb274c1f2aae9acc586df5325" kindref="member">nrf_systick_csr_get</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_systick.h" line="68" column="1" bodyfile="hal/nrf_systick.h" bodystart="68" bodyend="82"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__nrf__systick__hal_1ga44ac47ecb274c1f2aae9acc586df5325" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_systick_csr_get</definition>
        <argsstring>(void)</argsstring>
        <name>nrf_systick_csr_get</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Function for getting Configuration and Status Register. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>The <ref refid="group__nrf__systick__hal_1gga49c38556c98d5fd6a215ae8ed4bba32ca21d950914ecb5f93457431319d8ccaa4" kindref="member">NRF_SYSTICK_CSR_COUNTFLAG_MASK</ref> value is cleared when CSR register is read. </para>
</simplesect>
<simplesect kind="return"><para>Values composed by <ref refid="group__nrf__systick__hal_1ga49c38556c98d5fd6a215ae8ed4bba32c" kindref="member">nrf_systick_csr_flags_t</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_systick.h" line="139" column="28" bodyfile="hal/nrf_systick.h" bodystart="139" bodyend="142" declfile="hal/nrf_systick.h" declline="90" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__systick__hal_1ga351895fef0d7850af00a1f7cf9921ad1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_systick_csr_set</definition>
        <argsstring>(uint32_t val)</argsstring>
        <name>nrf_systick_csr_set</name>
        <param>
          <type>uint32_t</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Function for setting Configuration and Status Register. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">val</parametername>
</parameternamelist>
<parameterdescription>
<para>The value composed from <ref refid="group__nrf__systick__hal_1ga49c38556c98d5fd6a215ae8ed4bba32c" kindref="member">nrf_systick_csr_flags_t</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_systick.h" line="144" column="24" bodyfile="hal/nrf_systick.h" bodystart="144" bodyend="147" declfile="hal/nrf_systick.h" declline="97" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__systick__hal_1ga925fa429e98306a044401ae07e423f9f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_systick_load_get</definition>
        <argsstring>(void)</argsstring>
        <name>nrf_systick_load_get</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Function for getting the current reload value. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The reload register value. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_systick.h" line="149" column="28" bodyfile="hal/nrf_systick.h" bodystart="149" bodyend="152" declfile="hal/nrf_systick.h" declline="104" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__systick__hal_1gaae480344be5bd0c8f78ebfedd2919e21" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_systick_load_set</definition>
        <argsstring>(uint32_t val)</argsstring>
        <name>nrf_systick_load_set</name>
        <param>
          <type>uint32_t</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Function for configuring the reload value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">val</parametername>
</parameternamelist>
<parameterdescription>
<para>The value to be set in the reload register. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_systick.h" line="154" column="24" bodyfile="hal/nrf_systick.h" bodystart="154" bodyend="157" declfile="hal/nrf_systick.h" declline="111" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__systick__hal_1ga85c20d332df8a2bb7bc80a3788fe9bc5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_systick_val_get</definition>
        <argsstring>(void)</argsstring>
        <name>nrf_systick_val_get</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Function for reading the SysTick current value. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The current SysTick value </para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__nrf__systick__hal_1ga434dd61eb082c4d2f9e9f9c4ba9b1971" kindref="member">NRF_SYSTICK_VAL_MASK</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_systick.h" line="159" column="28" bodyfile="hal/nrf_systick.h" bodystart="159" bodyend="162" declfile="hal/nrf_systick.h" declline="119" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__systick__hal_1ga9a48ffc929c473edacec41f8e5f2acd5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_systick_val_clear</definition>
        <argsstring>(void)</argsstring>
        <name>nrf_systick_val_clear</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Function for clearing the SysTick current value. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>The SysTick does not allow setting current value. Any write to VAL register would clear the timer. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_systick.h" line="164" column="24" bodyfile="hal/nrf_systick.h" bodystart="164" bodyend="167" declfile="hal/nrf_systick.h" declline="127" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__systick__hal_1ga52a8a38f77d462712756f26a0272bbba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_systick_calib_get</definition>
        <argsstring>(void)</argsstring>
        <name>nrf_systick_calib_get</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Function for reading the calibration register. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The calibration register value. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_systick.h" line="169" column="28" bodyfile="hal/nrf_systick.h" bodystart="169" bodyend="172" declfile="hal/nrf_systick.h" declline="134" declcolumn="28"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2016<sp/>-<sp/>2024,<sp/>Nordic<sp/>Semiconductor<sp/>ASA</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>All<sp/>rights<sp/>reserved.</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>SPDX-License-Identifier:<sp/>BSD-3-Clause</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions<sp/>are<sp/>met:</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>1.<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright<sp/>notice,<sp/>this</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>2.<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the<sp/>distribution.</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/>3.<sp/>Neither<sp/>the<sp/>name<sp/>of<sp/>the<sp/>copyright<sp/>holder<sp/>nor<sp/>the<sp/>names<sp/>of<sp/>its</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>contributors<sp/>may<sp/>be<sp/>used<sp/>to<sp/>endorse<sp/>or<sp/>promote<sp/>products<sp/>derived<sp/>from<sp/>this</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>software<sp/>without<sp/>specific<sp/>prior<sp/>written<sp/>permission.</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>COPYRIGHT<sp/>HOLDERS<sp/>AND<sp/>CONTRIBUTORS<sp/>&quot;AS<sp/>IS&quot;</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/>AND<sp/>ANY<sp/>EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>THE</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*<sp/>ARE<sp/>DISCLAIMED.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>COPYRIGHT<sp/>HOLDER<sp/>OR<sp/>CONTRIBUTORS<sp/>BE</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,<sp/>SPECIAL,<sp/>EXEMPLARY,<sp/>OR</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>PROCUREMENT<sp/>OF</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>*<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,<sp/>DATA,<sp/>OR<sp/>PROFITS;<sp/>OR<sp/>BUSINESS</highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/>*<sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY<sp/>THEORY<sp/>OF<sp/>LIABILITY,<sp/>WHETHER<sp/>IN</highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/>*<sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR<sp/>OTHERWISE)</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/>*<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE<sp/>OF<sp/>THIS<sp/>SOFTWARE,<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/>*<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight></codeline>
<codeline lineno="32"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>NRF_SYSTICK_H__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_SYSTICK_H__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;nrfx.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="43"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="44"><highlight class="comment"><sp/>*<sp/>@defgroup<sp/>nrf_systick_hal<sp/>SYSTICK<sp/>HAL</highlight></codeline>
<codeline lineno="45"><highlight class="comment"><sp/>*<sp/>@{</highlight></codeline>
<codeline lineno="46"><highlight class="comment"><sp/>*<sp/>@ingroup<sp/>nrf_systick</highlight></codeline>
<codeline lineno="47"><highlight class="comment"><sp/>*<sp/>@brief<sp/><sp/><sp/>Hardware<sp/>access<sp/>layer<sp/>(HAL)<sp/>for<sp/>managing<sp/>the<sp/>SYSTICK<sp/>peripheral.</highlight></codeline>
<codeline lineno="48"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="49"><highlight class="comment"><sp/>*<sp/>SYSTICK<sp/>is<sp/>a<sp/>peripheral<sp/>designed<sp/>by<sp/>ARM.</highlight></codeline>
<codeline lineno="50"><highlight class="comment"><sp/>*<sp/>This<sp/>means<sp/>that<sp/>it<sp/>does<sp/>not<sp/>feature<sp/>the<sp/>typical<sp/>Nordic<sp/>interface<sp/>with<sp/>Tasks<sp/>and<sp/>Events.</highlight></codeline>
<codeline lineno="51"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="52"><highlight class="comment"><sp/>*<sp/>Its<sp/>usage<sp/>is<sp/>limited<sp/>here<sp/>to<sp/>the<sp/>implementation<sp/>of<sp/>simple<sp/>delays.</highlight></codeline>
<codeline lineno="53"><highlight class="comment"><sp/>*<sp/>Moreover,<sp/>keep<sp/>in<sp/>mind<sp/>that<sp/>this<sp/>timer<sp/>will<sp/>be<sp/>stopped<sp/>when<sp/>CPU<sp/>is<sp/>sleeping</highlight></codeline>
<codeline lineno="54"><highlight class="comment"><sp/>*<sp/>(WFE/WFI<sp/>instruction<sp/>is<sp/>successfully<sp/>executed).</highlight></codeline>
<codeline lineno="55"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="57"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="58"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Mask<sp/>of<sp/>usable<sp/>bits<sp/>in<sp/>the<sp/>SysTick<sp/>value.</highlight></codeline>
<codeline lineno="59"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_SYSTICK_VAL_MASK<sp/>SysTick_VAL_CURRENT_Msk</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="62"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="63"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Flags<sp/>used<sp/>by<sp/>SysTick<sp/>configuration.</highlight></codeline>
<codeline lineno="64"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="65"><highlight class="comment"><sp/>*<sp/>@sa<sp/>nrf_systick_csr_set</highlight></codeline>
<codeline lineno="66"><highlight class="comment"><sp/>*<sp/>@sa<sp/>nrf_systick_csr_get</highlight></codeline>
<codeline lineno="67"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__systick__hal_1gga49c38556c98d5fd6a215ae8ed4bba32ca21d950914ecb5f93457431319d8ccaa4" kindref="member">NRF_SYSTICK_CSR_COUNTFLAG_MASK</ref><sp/><sp/>=<sp/>SysTick_CTRL_COUNTFLAG_Msk,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Status<sp/>flag:<sp/>Returns<sp/>1<sp/>if<sp/>timer<sp/>counted<sp/>to<sp/>0<sp/>since<sp/>the<sp/>last<sp/>read<sp/>of<sp/>this<sp/>register.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__systick__hal_1gga49c38556c98d5fd6a215ae8ed4bba32ca63171e9eb85492e1d63fda00714c066e" kindref="member">NRF_SYSTICK_CSR_CLKSOURCE_MASK</ref><sp/><sp/>=<sp/>SysTick_CTRL_CLKSOURCE_Msk,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Configuration<sp/>bit:<sp/>Select<sp/>the<sp/>SysTick<sp/>clock<sp/>source.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__systick__hal_1gga49c38556c98d5fd6a215ae8ed4bba32ca39661f9793008a87b696a2ab86161610" kindref="member">NRF_SYSTICK_CSR_CLKSOURCE_REF</ref><sp/><sp/><sp/>=<sp/>0U<sp/>&lt;&lt;<sp/>SysTick_CTRL_CLKSOURCE_Pos,<sp/></highlight><highlight class="comment">/**&lt;<sp/>Configuration<sp/>value:<sp/>Select<sp/>reference<sp/>clock.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__systick__hal_1gga49c38556c98d5fd6a215ae8ed4bba32ca3c16ccf807a7b213e2e48352523810b8" kindref="member">NRF_SYSTICK_CSR_CLKSOURCE_CPU</ref><sp/><sp/><sp/>=<sp/>1U<sp/>&lt;&lt;<sp/>SysTick_CTRL_CLKSOURCE_Pos,<sp/></highlight><highlight class="comment">/**&lt;<sp/>Configuration<sp/>value:<sp/>Select<sp/>CPU<sp/>clock.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__systick__hal_1gga49c38556c98d5fd6a215ae8ed4bba32cae609da6726edc0c0df396a1364aaea3f" kindref="member">NRF_SYSTICK_CSR_TICKINT_MASK</ref><sp/><sp/><sp/><sp/>=<sp/>SysTick_CTRL_TICKINT_Msk,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Configuration<sp/>bit:<sp/>Enables<sp/>SysTick<sp/>exception<sp/>request.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__systick__hal_1gga49c38556c98d5fd6a215ae8ed4bba32ca3a0bac7fa41895d840e9374cfcdf3599" kindref="member">NRF_SYSTICK_CSR_TICKINT_ENABLE</ref><sp/><sp/>=<sp/>1U<sp/>&lt;&lt;<sp/>SysTick_CTRL_TICKINT_Pos,<sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Configuration<sp/>value:<sp/>Counting<sp/>down<sp/>to<sp/>zero<sp/>does<sp/>not<sp/>assert<sp/>the<sp/>SysTick<sp/>exception<sp/>request.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__systick__hal_1gga49c38556c98d5fd6a215ae8ed4bba32ca83b301e2e96072ea339d854d15c15cfa" kindref="member">NRF_SYSTICK_CSR_TICKINT_DISABLE</ref><sp/>=<sp/>0U<sp/>&lt;&lt;<sp/>SysTick_CTRL_TICKINT_Pos,<sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Configuration<sp/>value:<sp/>Counting<sp/>down<sp/>to<sp/>zero<sp/>to<sp/>asserts<sp/>the<sp/>SysTick<sp/>exception<sp/>request.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__systick__hal_1gga49c38556c98d5fd6a215ae8ed4bba32caf3cb7d6c53cf531fb3aa0eb78e5c6c0f" kindref="member">NRF_SYSTICK_CSR_ENABLE_MASK</ref><sp/><sp/><sp/><sp/><sp/>=<sp/>SysTick_CTRL_ENABLE_Msk,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Configuration<sp/>bit:<sp/>Enable<sp/>the<sp/>SysTick<sp/>timer.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__systick__hal_1gga49c38556c98d5fd6a215ae8ed4bba32ca89a2c3538df94c8703dee3d5fbc4b1d3" kindref="member">NRF_SYSTICK_CSR_ENABLE</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>1U<sp/>&lt;&lt;<sp/>SysTick_CTRL_ENABLE_Pos,<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Configuration<sp/>value:<sp/>Counter<sp/>enabled.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__systick__hal_1gga49c38556c98d5fd6a215ae8ed4bba32cae21aa2ccd44d0f004447b0ba0e9580bd" kindref="member">NRF_SYSTICK_CSR_DISABLE</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0U<sp/>&lt;&lt;<sp/>SysTick_CTRL_ENABLE_Pos<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Configuration<sp/>value:<sp/>Counter<sp/>disabled.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal">}<sp/><ref refid="group__nrf__systick__hal_1ga49c38556c98d5fd6a215ae8ed4bba32c" kindref="member">nrf_systick_csr_flags_t</ref>;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="84"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="85"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>Configuration<sp/>and<sp/>Status<sp/>Register.</highlight></codeline>
<codeline lineno="86"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="87"><highlight class="comment"><sp/>*<sp/>@note<sp/>The<sp/>@ref<sp/>NRF_SYSTICK_CSR_COUNTFLAG_MASK<sp/>value<sp/>is<sp/>cleared<sp/>when<sp/>CSR<sp/>register<sp/>is<sp/>read.</highlight></codeline>
<codeline lineno="88"><highlight class="comment"><sp/>*<sp/>@return<sp/>Values<sp/>composed<sp/>by<sp/>@ref<sp/>nrf_systick_csr_flags_t.</highlight></codeline>
<codeline lineno="89"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__systick__hal_1ga44ac47ecb274c1f2aae9acc586df5325" kindref="member">nrf_systick_csr_get</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="92"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="93"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>Configuration<sp/>and<sp/>Status<sp/>Register.</highlight></codeline>
<codeline lineno="94"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="95"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>val<sp/>The<sp/>value<sp/>composed<sp/>from<sp/>@ref<sp/>nrf_systick_csr_flags_t.</highlight></codeline>
<codeline lineno="96"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__systick__hal_1ga351895fef0d7850af00a1f7cf9921ad1" kindref="member">nrf_systick_csr_set</ref>(uint32_t<sp/>val);</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="99"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="100"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>the<sp/>current<sp/>reload<sp/>value.</highlight></codeline>
<codeline lineno="101"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="102"><highlight class="comment"><sp/>*<sp/>@return<sp/>The<sp/>reload<sp/>register<sp/>value.</highlight></codeline>
<codeline lineno="103"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__systick__hal_1ga925fa429e98306a044401ae07e423f9f" kindref="member">nrf_systick_load_get</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="106"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="107"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>configuring<sp/>the<sp/>reload<sp/>value.</highlight></codeline>
<codeline lineno="108"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="109"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>val<sp/>The<sp/>value<sp/>to<sp/>be<sp/>set<sp/>in<sp/>the<sp/>reload<sp/>register.</highlight></codeline>
<codeline lineno="110"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__systick__hal_1gaae480344be5bd0c8f78ebfedd2919e21" kindref="member">nrf_systick_load_set</ref>(uint32_t<sp/>val);</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="113"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="114"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>reading<sp/>the<sp/>SysTick<sp/>current<sp/>value.</highlight></codeline>
<codeline lineno="115"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="116"><highlight class="comment"><sp/>*<sp/>@return<sp/>The<sp/>current<sp/>SysTick<sp/>value</highlight></codeline>
<codeline lineno="117"><highlight class="comment"><sp/>*<sp/>@sa<sp/>NRF_SYSTICK_VAL_MASK</highlight></codeline>
<codeline lineno="118"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__systick__hal_1ga85c20d332df8a2bb7bc80a3788fe9bc5" kindref="member">nrf_systick_val_get</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="121"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="122"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>clearing<sp/>the<sp/>SysTick<sp/>current<sp/>value.</highlight></codeline>
<codeline lineno="123"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="124"><highlight class="comment"><sp/>*<sp/>@note<sp/>The<sp/>SysTick<sp/>does<sp/>not<sp/>allow<sp/>setting<sp/>current<sp/>value.</highlight></codeline>
<codeline lineno="125"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>Any<sp/>write<sp/>to<sp/>VAL<sp/>register<sp/>would<sp/>clear<sp/>the<sp/>timer.</highlight></codeline>
<codeline lineno="126"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__systick__hal_1ga9a48ffc929c473edacec41f8e5f2acd5" kindref="member">nrf_systick_val_clear</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="129"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="130"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>reading<sp/>the<sp/>calibration<sp/>register.</highlight></codeline>
<codeline lineno="131"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="132"><highlight class="comment"><sp/>*<sp/>@return<sp/>The<sp/>calibration<sp/>register<sp/>value.</highlight></codeline>
<codeline lineno="133"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__systick__hal_1ga52a8a38f77d462712756f26a0272bbba" kindref="member">nrf_systick_calib_get</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>NRF_DECLARE_ONLY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__systick__hal_1ga44ac47ecb274c1f2aae9acc586df5325" kindref="member">nrf_systick_csr_get</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="140"><highlight class="normal">{</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SysTick-&gt;CTRL;</highlight></codeline>
<codeline lineno="142"><highlight class="normal">}</highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__systick__hal_1ga351895fef0d7850af00a1f7cf9921ad1" kindref="member">nrf_systick_csr_set</ref>(uint32_t<sp/>val)</highlight></codeline>
<codeline lineno="145"><highlight class="normal">{</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/>SysTick-&gt;CTRL<sp/>=<sp/>val;</highlight></codeline>
<codeline lineno="147"><highlight class="normal">}</highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__systick__hal_1ga925fa429e98306a044401ae07e423f9f" kindref="member">nrf_systick_load_get</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="150"><highlight class="normal">{</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SysTick-&gt;LOAD;</highlight></codeline>
<codeline lineno="152"><highlight class="normal">}</highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__systick__hal_1gaae480344be5bd0c8f78ebfedd2919e21" kindref="member">nrf_systick_load_set</ref>(uint32_t<sp/>val)</highlight></codeline>
<codeline lineno="155"><highlight class="normal">{</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/>SysTick-&gt;LOAD<sp/>=<sp/>val;</highlight></codeline>
<codeline lineno="157"><highlight class="normal">}</highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__systick__hal_1ga85c20d332df8a2bb7bc80a3788fe9bc5" kindref="member">nrf_systick_val_get</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="160"><highlight class="normal">{</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SysTick-&gt;VAL;</highlight></codeline>
<codeline lineno="162"><highlight class="normal">}</highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__systick__hal_1ga9a48ffc929c473edacec41f8e5f2acd5" kindref="member">nrf_systick_val_clear</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="165"><highlight class="normal">{</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/>SysTick-&gt;VAL<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="167"><highlight class="normal">}</highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__systick__hal_1ga52a8a38f77d462712756f26a0272bbba" kindref="member">nrf_systick_calib_get</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="170"><highlight class="normal">{</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SysTick-&gt;CALIB;</highlight></codeline>
<codeline lineno="172"><highlight class="normal">}</highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>NRF_DECLARE_ONLY<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="176"><highlight class="comment">/**<sp/>@}<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal">}</highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>NRF_SYSTICK_H__<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="hal/nrf_systick.h"/>
  </compounddef>
</doxygen>
