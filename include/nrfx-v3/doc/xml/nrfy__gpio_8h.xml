<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="nrfy__gpio_8h" kind="file" language="C++">
    <compoundname>nrfy_gpio.h</compoundname>
    <includes local="no">nrfx.h</includes>
    <includes refid="nrf__gpio_8h" local="no">hal/nrf_gpio.h</includes>
    <includedby refid="nrfx__gpiote_8h" local="no">drivers/include/nrfx_gpiote.h</includedby>
    <includedby refid="nrfx__spim_8h" local="no">drivers/include/nrfx_spim.h</includedby>
    <includedby refid="nrfx__spis_8h" local="no">drivers/include/nrfx_spis.h</includedby>
    <incdepgraph>
      <node id="1">
        <label>haly/nrfy_gpio.h</label>
        <link refid="nrfy__gpio_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>nrfx.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__nrfy__gpio_1gae436987b8918cd3975e5926738c9986e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRFY_STATIC_INLINE void</type>
        <definition>NRFY_STATIC_INLINE void nrfy_gpio_range_cfg_output</definition>
        <argsstring>(uint32_t pin_range_start, uint32_t pin_range_end)</argsstring>
        <name>nrfy_gpio_range_cfg_output</name>
        <param>
          <type>uint32_t</type>
          <declname>pin_range_start</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>pin_range_end</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__nrf__gpio__hal_1ga2a34295e713d0e29a858a0dd31d619b3" kindref="member">nrf_gpio_range_cfg_output</ref>  Function for configuring the GPIO pin range as output pins with normal drive strength. This function can be used to configure pin range as simple output with gate driving GPIO_PIN_CNF_DRIVE_S0S1 (normal cases).  </para>
</simplesect>
</para>
<para><simplesect kind="note"><para>For configuring only one pin as output, use <ref refid="group__nrf__gpio__hal_1gaa417905af0907e63baae651c1679d01a" kindref="member">nrf_gpio_cfg_output</ref>. Sense capability on the pin is disabled and input is disconnected from the buffer as the pins are configured as output.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pin_range_start</parametername>
</parameternamelist>
<parameterdescription>
<para>Specifies the start number (inclusive) in the range of pin numbers to be configured. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pin_range_end</parametername>
</parameternamelist>
<parameterdescription>
<para>Specifies the end number (inclusive) in the range of pin numbers to be configured.   </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="haly/nrfy_gpio.h" line="52" column="25" bodyfile="haly/nrfy_gpio.h" bodystart="52" bodyend="57"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfy__gpio_1ga1e02692166c27f3f5d0bb504e6eb6577" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRFY_STATIC_INLINE void</type>
        <definition>NRFY_STATIC_INLINE void nrfy_gpio_range_cfg_input</definition>
        <argsstring>(uint32_t pin_range_start, uint32_t pin_range_end, nrf_gpio_pin_pull_t pull_config)</argsstring>
        <name>nrfy_gpio_range_cfg_input</name>
        <param>
          <type>uint32_t</type>
          <declname>pin_range_start</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>pin_range_end</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__gpio__hal_1ga07e0c8c0b30499cf0a7b79dbe62d3fcc" kindref="member">nrf_gpio_pin_pull_t</ref></type>
          <declname>pull_config</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__nrf__gpio__hal_1gacde48e9647b3961591336ff75de8b02e" kindref="member">nrf_gpio_range_cfg_input</ref>  Function for configuring the GPIO pin range as input pins with given initial value set, hiding inner details. This function can be used to configure pin range as simple input.  </para>
</simplesect>
</para>
<para><simplesect kind="note"><para>For configuring only one pin as input, use <ref refid="group__nrf__gpio__hal_1ga2f960eb1827bd613a08d7b48651711b4" kindref="member">nrf_gpio_cfg_input</ref>. Sense capability on the pin is disabled and input is connected to buffer so that the GPIO-&gt;IN register is readable.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pin_range_start</parametername>
</parameternamelist>
<parameterdescription>
<para>Specifies the start number (inclusive) in the range of pin numbers to be configured. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pin_range_end</parametername>
</parameternamelist>
<parameterdescription>
<para>Specifies the end number (inclusive) in the range of pin numbers to be configured. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pull_config</parametername>
</parameternamelist>
<parameterdescription>
<para>State of the pin range pull resistor (no pull, pulled down, or pulled high).   </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="haly/nrfy_gpio.h" line="60" column="25" bodyfile="haly/nrfy_gpio.h" bodystart="60" bodyend="66"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfy__gpio_1ga880d2c8aee41754f269d32b3c3cb50e9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRFY_STATIC_INLINE void</type>
        <definition>NRFY_STATIC_INLINE void nrfy_gpio_cfg</definition>
        <argsstring>(uint32_t pin_number, nrf_gpio_pin_dir_t dir, nrf_gpio_pin_input_t input, nrf_gpio_pin_pull_t pull, nrf_gpio_pin_drive_t drive, nrf_gpio_pin_sense_t sense)</argsstring>
        <name>nrfy_gpio_cfg</name>
        <param>
          <type>uint32_t</type>
          <declname>pin_number</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__gpio__hal_1ga4089fa9e3311c34d254d4d00029911bc" kindref="member">nrf_gpio_pin_dir_t</ref></type>
          <declname>dir</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__gpio__hal_1ga94d8c546b86a236b5f7636703b8f5fb3" kindref="member">nrf_gpio_pin_input_t</ref></type>
          <declname>input</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__gpio__hal_1ga07e0c8c0b30499cf0a7b79dbe62d3fcc" kindref="member">nrf_gpio_pin_pull_t</ref></type>
          <declname>pull</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__gpio__hal_1gabb86c9557487ac1eda0cec28f258a725" kindref="member">nrf_gpio_pin_drive_t</ref></type>
          <declname>drive</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__gpio__hal_1ga0708136c752d69015962a2ccb4c59fbd" kindref="member">nrf_gpio_pin_sense_t</ref></type>
          <declname>sense</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__nrf__gpio__hal_1gad89e946ef28fb1e130237c8a074bc7bb" kindref="member">nrf_gpio_cfg</ref>  Pin configuration function.  </para>
</simplesect>
</para>
<para>The main pin configuration function. This function allows to set any aspect in PIN_CNF register.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pin_number</parametername>
</parameternamelist>
<parameterdescription>
<para>Specifies the pin number. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dir</parametername>
</parameternamelist>
<parameterdescription>
<para>Pin direction. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>input</parametername>
</parameternamelist>
<parameterdescription>
<para>Connect or disconnect the input buffer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pull</parametername>
</parameternamelist>
<parameterdescription>
<para>Pull configuration. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>drive</parametername>
</parameternamelist>
<parameterdescription>
<para>Drive configuration. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sense</parametername>
</parameternamelist>
<parameterdescription>
<para>Pin sensing mechanism.   </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="haly/nrfy_gpio.h" line="69" column="25" bodyfile="haly/nrfy_gpio.h" bodystart="69" bodyend="78"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfy__gpio_1gac7af9e0414b42c780649037e43c48781" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRFY_STATIC_INLINE void</type>
        <definition>NRFY_STATIC_INLINE void nrfy_gpio_reconfigure</definition>
        <argsstring>(uint32_t pin_number, const nrf_gpio_pin_dir_t *p_dir, const nrf_gpio_pin_input_t *p_input, const nrf_gpio_pin_pull_t *p_pull, const nrf_gpio_pin_drive_t *p_drive, const nrf_gpio_pin_sense_t *p_sense)</argsstring>
        <name>nrfy_gpio_reconfigure</name>
        <param>
          <type>uint32_t</type>
          <declname>pin_number</declname>
        </param>
        <param>
          <type>const <ref refid="group__nrf__gpio__hal_1ga4089fa9e3311c34d254d4d00029911bc" kindref="member">nrf_gpio_pin_dir_t</ref> *</type>
          <declname>p_dir</declname>
        </param>
        <param>
          <type>const <ref refid="group__nrf__gpio__hal_1ga94d8c546b86a236b5f7636703b8f5fb3" kindref="member">nrf_gpio_pin_input_t</ref> *</type>
          <declname>p_input</declname>
        </param>
        <param>
          <type>const <ref refid="group__nrf__gpio__hal_1ga07e0c8c0b30499cf0a7b79dbe62d3fcc" kindref="member">nrf_gpio_pin_pull_t</ref> *</type>
          <declname>p_pull</declname>
        </param>
        <param>
          <type>const <ref refid="group__nrf__gpio__hal_1gabb86c9557487ac1eda0cec28f258a725" kindref="member">nrf_gpio_pin_drive_t</ref> *</type>
          <declname>p_drive</declname>
        </param>
        <param>
          <type>const <ref refid="group__nrf__gpio__hal_1ga0708136c752d69015962a2ccb4c59fbd" kindref="member">nrf_gpio_pin_sense_t</ref> *</type>
          <declname>p_sense</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__nrf__gpio__hal_1gaac51df09d9290f1d8047a4a46657bc35" kindref="member">nrf_gpio_reconfigure</ref>  Function for reconfiguring pin.  </para>
</simplesect>
</para>
<para><simplesect kind="note"><para>This function selectively updates fields in PIN_CNF register. Reconfiguration is performed in single register write. Fields for which new configuration is not provided remain unchanged.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pin_number</parametername>
</parameternamelist>
<parameterdescription>
<para>Specifies the pin number. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_dir</parametername>
</parameternamelist>
<parameterdescription>
<para>Pin direction. If NULL, previous setting remains. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_input</parametername>
</parameternamelist>
<parameterdescription>
<para>Connect or disconnect the input buffer. If NULL, previous setting remains. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_pull</parametername>
</parameternamelist>
<parameterdescription>
<para>Pull configuration. If NULL, previous setting remains. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_drive</parametername>
</parameternamelist>
<parameterdescription>
<para>Drive configuration. If NULL, previous setting remains. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_sense</parametername>
</parameternamelist>
<parameterdescription>
<para>Pin sensing mechanism. If NULL, previous setting remains.   </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="haly/nrfy_gpio.h" line="81" column="25" bodyfile="haly/nrfy_gpio.h" bodystart="81" bodyend="90"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfy__gpio_1ga42382784269fa660b436f687de185d00" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRFY_STATIC_INLINE void</type>
        <definition>NRFY_STATIC_INLINE void nrfy_gpio_cfg_output</definition>
        <argsstring>(uint32_t pin_number)</argsstring>
        <name>nrfy_gpio_cfg_output</name>
        <param>
          <type>uint32_t</type>
          <declname>pin_number</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__nrf__gpio__hal_1gaa417905af0907e63baae651c1679d01a" kindref="member">nrf_gpio_cfg_output</ref>  Function for configuring the given GPIO pin number as output, hiding inner details. This function can be used to configure a pin as simple output with gate driving GPIO_PIN_CNF_DRIVE_S0S1 (normal cases).  </para>
</simplesect>
</para>
<para><simplesect kind="note"><para>Sense capability on the pin is disabled and input is disconnected from the buffer as the pins are configured as output.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pin_number</parametername>
</parameternamelist>
<parameterdescription>
<para>Specifies the pin number.   </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="haly/nrfy_gpio.h" line="93" column="25" bodyfile="haly/nrfy_gpio.h" bodystart="93" bodyend="97"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfy__gpio_1gab7764dddb14d7070c59b16509e3d1d41" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRFY_STATIC_INLINE void</type>
        <definition>NRFY_STATIC_INLINE void nrfy_gpio_cfg_input</definition>
        <argsstring>(uint32_t pin_number, nrf_gpio_pin_pull_t pull_config)</argsstring>
        <name>nrfy_gpio_cfg_input</name>
        <param>
          <type>uint32_t</type>
          <declname>pin_number</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__gpio__hal_1ga07e0c8c0b30499cf0a7b79dbe62d3fcc" kindref="member">nrf_gpio_pin_pull_t</ref></type>
          <declname>pull_config</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__nrf__gpio__hal_1ga2f960eb1827bd613a08d7b48651711b4" kindref="member">nrf_gpio_cfg_input</ref>  Function for configuring the given GPIO pin number as input, hiding inner details. This function can be used to configure a pin as simple input.  </para>
</simplesect>
</para>
<para><simplesect kind="note"><para>Sense capability on the pin is disabled and input is connected to buffer so that the GPIO-&gt;IN register is readable.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pin_number</parametername>
</parameternamelist>
<parameterdescription>
<para>Specifies the pin number. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pull_config</parametername>
</parameternamelist>
<parameterdescription>
<para>State of the pin range pull resistor (no pull, pulled down, or pulled high).   </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="haly/nrfy_gpio.h" line="100" column="25" bodyfile="haly/nrfy_gpio.h" bodystart="100" bodyend="104"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfy__gpio_1ga9f4ec5d15234cb3e7c039bcd90a8da51" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRFY_STATIC_INLINE void</type>
        <definition>NRFY_STATIC_INLINE void nrfy_gpio_cfg_default</definition>
        <argsstring>(uint32_t pin_number)</argsstring>
        <name>nrfy_gpio_cfg_default</name>
        <param>
          <type>uint32_t</type>
          <declname>pin_number</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__nrf__gpio__hal_1ga34cf00314729a3fd0cc04de9f4b74a64" kindref="member">nrf_gpio_cfg_default</ref>  Function for resetting pin configuration to its default state.  </para>
</simplesect>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pin_number</parametername>
</parameternamelist>
<parameterdescription>
<para>Specifies the pin number.   </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="haly/nrfy_gpio.h" line="107" column="25" bodyfile="haly/nrfy_gpio.h" bodystart="107" bodyend="111"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfy__gpio_1gad355838eba5df79a6350900ddb22c412" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRFY_STATIC_INLINE void</type>
        <definition>NRFY_STATIC_INLINE void nrfy_gpio_cfg_watcher</definition>
        <argsstring>(uint32_t pin_number)</argsstring>
        <name>nrfy_gpio_cfg_watcher</name>
        <param>
          <type>uint32_t</type>
          <declname>pin_number</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__nrf__gpio__hal_1gad1026666584b2d04c02db558230ecc6f" kindref="member">nrf_gpio_cfg_watcher</ref>  Function for configuring the given GPIO pin number as a watcher. Only input is connected.  </para>
</simplesect>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pin_number</parametername>
</parameternamelist>
<parameterdescription>
<para>Specifies the pin number.   </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="haly/nrfy_gpio.h" line="114" column="25" bodyfile="haly/nrfy_gpio.h" bodystart="114" bodyend="119"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfy__gpio_1gaa2a8da91d648a739e7c872ab8bdb9d18" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRFY_STATIC_INLINE void</type>
        <definition>NRFY_STATIC_INLINE void nrfy_gpio_input_disconnect</definition>
        <argsstring>(uint32_t pin_number)</argsstring>
        <name>nrfy_gpio_input_disconnect</name>
        <param>
          <type>uint32_t</type>
          <declname>pin_number</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__nrf__gpio__hal_1ga63c36e49d1c38772316209aa7d9c5e9e" kindref="member">nrf_gpio_input_disconnect</ref>  Function for disconnecting input for the given GPIO.  </para>
</simplesect>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pin_number</parametername>
</parameternamelist>
<parameterdescription>
<para>Specifies the pin number.   </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="haly/nrfy_gpio.h" line="122" column="25" bodyfile="haly/nrfy_gpio.h" bodystart="122" bodyend="127"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfy__gpio_1ga28a1c0ea032a0b32de3dc366fc1778f0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRFY_STATIC_INLINE void</type>
        <definition>NRFY_STATIC_INLINE void nrfy_gpio_cfg_sense_input</definition>
        <argsstring>(uint32_t pin_number, nrf_gpio_pin_pull_t pull_config, nrf_gpio_pin_sense_t sense_config)</argsstring>
        <name>nrfy_gpio_cfg_sense_input</name>
        <param>
          <type>uint32_t</type>
          <declname>pin_number</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__gpio__hal_1ga07e0c8c0b30499cf0a7b79dbe62d3fcc" kindref="member">nrf_gpio_pin_pull_t</ref></type>
          <declname>pull_config</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__gpio__hal_1ga0708136c752d69015962a2ccb4c59fbd" kindref="member">nrf_gpio_pin_sense_t</ref></type>
          <declname>sense_config</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__nrf__gpio__hal_1ga9f56f2de7bbb5d20c3ed3a88d844e1ca" kindref="member">nrf_gpio_cfg_sense_input</ref>  Function for configuring the given GPIO pin number as input, hiding inner details. This function can be used to configure pin range as simple input. Sense capability on the pin is configurable and input is connected to buffer so that the GPIO-&gt;IN register is readable.  </para>
</simplesect>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pin_number</parametername>
</parameternamelist>
<parameterdescription>
<para>Specifies the pin number. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pull_config</parametername>
</parameternamelist>
<parameterdescription>
<para>State of the pin pull resistor (no pull, pulled down, or pulled high). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sense_config</parametername>
</parameternamelist>
<parameterdescription>
<para>Sense level of the pin (no sense, sense low, or sense high).   </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="haly/nrfy_gpio.h" line="130" column="25" bodyfile="haly/nrfy_gpio.h" bodystart="130" bodyend="136"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfy__gpio_1ga204c31257de5c7433dd0e4ec22d7bf10" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRFY_STATIC_INLINE void</type>
        <definition>NRFY_STATIC_INLINE void nrfy_gpio_cfg_sense_set</definition>
        <argsstring>(uint32_t pin_number, nrf_gpio_pin_sense_t sense_config)</argsstring>
        <name>nrfy_gpio_cfg_sense_set</name>
        <param>
          <type>uint32_t</type>
          <declname>pin_number</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__gpio__hal_1ga0708136c752d69015962a2ccb4c59fbd" kindref="member">nrf_gpio_pin_sense_t</ref></type>
          <declname>sense_config</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__nrf__gpio__hal_1ga6e55de9a5b5c97a9eb430094d7012ad6" kindref="member">nrf_gpio_cfg_sense_set</ref>  Function for configuring sense level for the given GPIO.  </para>
</simplesect>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pin_number</parametername>
</parameternamelist>
<parameterdescription>
<para>Specifies the pin number. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sense_config</parametername>
</parameternamelist>
<parameterdescription>
<para>Sense configuration.   </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="haly/nrfy_gpio.h" line="139" column="25" bodyfile="haly/nrfy_gpio.h" bodystart="139" bodyend="145"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfy__gpio_1ga718585ecfa301cb6f22134950dae2638" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRFY_STATIC_INLINE void</type>
        <definition>NRFY_STATIC_INLINE void nrfy_gpio_pin_dir_set</definition>
        <argsstring>(uint32_t pin_number, nrf_gpio_pin_dir_t direction)</argsstring>
        <name>nrfy_gpio_pin_dir_set</name>
        <param>
          <type>uint32_t</type>
          <declname>pin_number</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__gpio__hal_1ga4089fa9e3311c34d254d4d00029911bc" kindref="member">nrf_gpio_pin_dir_t</ref></type>
          <declname>direction</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__nrf__gpio__hal_1ga6cfe68a6a36eb51d65a23d4b9e8dc192" kindref="member">nrf_gpio_pin_dir_set</ref>  Function for setting the direction for a GPIO pin.  </para>
</simplesect>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pin_number</parametername>
</parameternamelist>
<parameterdescription>
<para>Specifies the pin number for which to set the direction. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>direction</parametername>
</parameternamelist>
<parameterdescription>
<para>Specifies the direction.   </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="haly/nrfy_gpio.h" line="148" column="25" bodyfile="haly/nrfy_gpio.h" bodystart="148" bodyend="152"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfy__gpio_1ga4ca6ec6e36dd30f30c97b0997ebf76fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRFY_STATIC_INLINE void</type>
        <definition>NRFY_STATIC_INLINE void nrfy_gpio_pin_set</definition>
        <argsstring>(uint32_t pin_number)</argsstring>
        <name>nrfy_gpio_pin_set</name>
        <param>
          <type>uint32_t</type>
          <declname>pin_number</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__nrf__gpio__hal_1gab702c07d3087905e6c80c287116052fd" kindref="member">nrf_gpio_pin_set</ref>  Function for setting a GPIO pin.  </para>
</simplesect>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pin_number</parametername>
</parameternamelist>
<parameterdescription>
<para>Specifies the pin number to be set.   </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="haly/nrfy_gpio.h" line="155" column="25" bodyfile="haly/nrfy_gpio.h" bodystart="155" bodyend="159"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfy__gpio_1ga2876310725226073e9082a7f2c76dfc5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRFY_STATIC_INLINE void</type>
        <definition>NRFY_STATIC_INLINE void nrfy_gpio_pin_clear</definition>
        <argsstring>(uint32_t pin_number)</argsstring>
        <name>nrfy_gpio_pin_clear</name>
        <param>
          <type>uint32_t</type>
          <declname>pin_number</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__nrf__gpio__hal_1ga40b1e64cb60fac12e2fdebb5975c18ad" kindref="member">nrf_gpio_pin_clear</ref>  Function for clearing a GPIO pin.  </para>
</simplesect>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pin_number</parametername>
</parameternamelist>
<parameterdescription>
<para>Specifies the pin number to clear.   </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="haly/nrfy_gpio.h" line="162" column="25" bodyfile="haly/nrfy_gpio.h" bodystart="162" bodyend="166"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfy__gpio_1gae951b87876f6d94f10c84a9d11c396ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRFY_STATIC_INLINE void</type>
        <definition>NRFY_STATIC_INLINE void nrfy_gpio_pin_toggle</definition>
        <argsstring>(uint32_t pin_number)</argsstring>
        <name>nrfy_gpio_pin_toggle</name>
        <param>
          <type>uint32_t</type>
          <declname>pin_number</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__nrf__gpio__hal_1ga01229c1afac385b135cb5441814de618" kindref="member">nrf_gpio_pin_toggle</ref>  Function for toggling a GPIO pin.  </para>
</simplesect>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pin_number</parametername>
</parameternamelist>
<parameterdescription>
<para>Specifies the pin number to toggle.   </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="haly/nrfy_gpio.h" line="169" column="25" bodyfile="haly/nrfy_gpio.h" bodystart="169" bodyend="173"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfy__gpio_1ga563b123022e8bffd7722b636903f9239" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRFY_STATIC_INLINE void</type>
        <definition>NRFY_STATIC_INLINE void nrfy_gpio_pin_write</definition>
        <argsstring>(uint32_t pin_number, uint32_t value)</argsstring>
        <name>nrfy_gpio_pin_write</name>
        <param>
          <type>uint32_t</type>
          <declname>pin_number</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__nrf__gpio__hal_1gaf00dc5b966c72c25fb615f5db6ebef59" kindref="member">nrf_gpio_pin_write</ref>  Function for writing a value to a GPIO pin.  </para>
</simplesect>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pin_number</parametername>
</parameternamelist>
<parameterdescription>
<para>Specifies the pin number to write. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Specifies the value to be written to the pin. <itemizedlist>
<listitem><para>0 Clears the pin. </para>
</listitem>
<listitem><para>&gt;=1 Sets the pin.   </para>
</listitem>
</itemizedlist>
</para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="haly/nrfy_gpio.h" line="176" column="25" bodyfile="haly/nrfy_gpio.h" bodystart="176" bodyend="180"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfy__gpio_1ga6a641efc98be41d8b652d7179ed53279" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRFY_STATIC_INLINE uint32_t</type>
        <definition>NRFY_STATIC_INLINE uint32_t nrfy_gpio_pin_read</definition>
        <argsstring>(uint32_t pin_number)</argsstring>
        <name>nrfy_gpio_pin_read</name>
        <param>
          <type>uint32_t</type>
          <declname>pin_number</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__nrf__gpio__hal_1gae6af1c0ef7379540dff84f1fd21c75ee" kindref="member">nrf_gpio_pin_read</ref>  Function for reading the input level of a GPIO pin.  </para>
</simplesect>
</para>
<para>If the value returned by this function is to be valid, the pin&apos;s input buffer must be connected.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pin_number</parametername>
</parameternamelist>
<parameterdescription>
<para>Specifies the pin number to read.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if the pin input level is low. Positive value if the pin is high.   </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="haly/nrfy_gpio.h" line="183" column="29" bodyfile="haly/nrfy_gpio.h" bodystart="183" bodyend="189"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfy__gpio_1ga0320fad698de79f698c3b781689e7871" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRFY_STATIC_INLINE uint32_t</type>
        <definition>NRFY_STATIC_INLINE uint32_t nrfy_gpio_pin_out_read</definition>
        <argsstring>(uint32_t pin_number)</argsstring>
        <name>nrfy_gpio_pin_out_read</name>
        <param>
          <type>uint32_t</type>
          <declname>pin_number</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__nrf__gpio__hal_1ga86fff8083c47b1466caae966709cee94" kindref="member">nrf_gpio_pin_out_read</ref>  Function for reading the output level of a GPIO pin.  </para>
</simplesect>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pin_number</parametername>
</parameternamelist>
<parameterdescription>
<para>Specifies the pin number to read.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if the pin output level is low. Positive value if pin output is high.   </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="haly/nrfy_gpio.h" line="192" column="29" bodyfile="haly/nrfy_gpio.h" bodystart="192" bodyend="198"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfy__gpio_1ga2a5b251d98bbe7b6cb23f169aae66d17" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRFY_STATIC_INLINE <ref refid="group__nrf__gpio__hal_1ga0708136c752d69015962a2ccb4c59fbd" kindref="member">nrf_gpio_pin_sense_t</ref></type>
        <definition>NRFY_STATIC_INLINE nrf_gpio_pin_sense_t nrfy_gpio_pin_sense_get</definition>
        <argsstring>(uint32_t pin_number)</argsstring>
        <name>nrfy_gpio_pin_sense_get</name>
        <param>
          <type>uint32_t</type>
          <declname>pin_number</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__nrf__gpio__hal_1ga969bfaba6910e532972bc61aa3d36d8e" kindref="member">nrf_gpio_pin_sense_get</ref>  Function for reading the sense configuration of a GPIO pin.  </para>
</simplesect>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pin_number</parametername>
</parameternamelist>
<parameterdescription>
<para>Specifies the pin number to read.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Sense configuration.   </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="haly/nrfy_gpio.h" line="201" column="41" bodyfile="haly/nrfy_gpio.h" bodystart="201" bodyend="207"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfy__gpio_1ga61004598073e470813aac44a63793117" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRFY_STATIC_INLINE <ref refid="group__nrf__gpio__hal_1ga4089fa9e3311c34d254d4d00029911bc" kindref="member">nrf_gpio_pin_dir_t</ref></type>
        <definition>NRFY_STATIC_INLINE nrf_gpio_pin_dir_t nrfy_gpio_pin_dir_get</definition>
        <argsstring>(uint32_t pin_number)</argsstring>
        <name>nrfy_gpio_pin_dir_get</name>
        <param>
          <type>uint32_t</type>
          <declname>pin_number</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__nrf__gpio__hal_1gaaf646c2b3741b320043623984b4bb594" kindref="member">nrf_gpio_pin_dir_get</ref>  Function for reading the direction configuration of a GPIO pin.  </para>
</simplesect>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pin_number</parametername>
</parameternamelist>
<parameterdescription>
<para>Specifies the pin number to read.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Direction configuration.   </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="haly/nrfy_gpio.h" line="210" column="39" bodyfile="haly/nrfy_gpio.h" bodystart="210" bodyend="216"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfy__gpio_1ga5e43bd81f7b918eb66bd7c7ec1c5d3ad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRFY_STATIC_INLINE <ref refid="group__nrf__gpio__hal_1ga94d8c546b86a236b5f7636703b8f5fb3" kindref="member">nrf_gpio_pin_input_t</ref></type>
        <definition>NRFY_STATIC_INLINE nrf_gpio_pin_input_t nrfy_gpio_pin_input_get</definition>
        <argsstring>(uint32_t pin_number)</argsstring>
        <name>nrfy_gpio_pin_input_get</name>
        <param>
          <type>uint32_t</type>
          <declname>pin_number</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__nrf__gpio__hal_1ga256a5cb4921ab72223471db221d5119d" kindref="member">nrf_gpio_pin_input_get</ref>  Function for reading the status of GPIO pin input buffer.  </para>
</simplesect>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pin_number</parametername>
</parameternamelist>
<parameterdescription>
<para>Pin number to be read.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>Input</parametername>
</parameternamelist>
<parameterdescription>
<para>buffer configuration.   </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="haly/nrfy_gpio.h" line="219" column="41" bodyfile="haly/nrfy_gpio.h" bodystart="219" bodyend="225"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfy__gpio_1ga9980e0a3df6d4ff37ff4e7c736caf162" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRFY_STATIC_INLINE <ref refid="group__nrf__gpio__hal_1ga07e0c8c0b30499cf0a7b79dbe62d3fcc" kindref="member">nrf_gpio_pin_pull_t</ref></type>
        <definition>NRFY_STATIC_INLINE nrf_gpio_pin_pull_t nrfy_gpio_pin_pull_get</definition>
        <argsstring>(uint32_t pin_number)</argsstring>
        <name>nrfy_gpio_pin_pull_get</name>
        <param>
          <type>uint32_t</type>
          <declname>pin_number</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__nrf__gpio__hal_1ga160fad0da6f67e982cfe169bbfcc84e9" kindref="member">nrf_gpio_pin_pull_get</ref>  Function for reading the pull configuration of a GPIO pin.  </para>
</simplesect>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pin_number</parametername>
</parameternamelist>
<parameterdescription>
<para>Specifies the pin number to read.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>Pull</parametername>
</parameternamelist>
<parameterdescription>
<para>configuration.   </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="haly/nrfy_gpio.h" line="228" column="40" bodyfile="haly/nrfy_gpio.h" bodystart="228" bodyend="234"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfy__gpio_1ga15e2b4ea630ac2c2280049cf4be932da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRFY_STATIC_INLINE void</type>
        <definition>NRFY_STATIC_INLINE void nrfy_gpio_port_dir_output_set</definition>
        <argsstring>(NRF_GPIO_Type *p_reg, uint32_t out_mask)</argsstring>
        <name>nrfy_gpio_port_dir_output_set</name>
        <param>
          <type>NRF_GPIO_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>out_mask</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__nrf__gpio__hal_1ga0aeaeacba06d85d45eabbc7d139f4ec9" kindref="member">nrf_gpio_port_dir_output_set</ref>  Function for setting output direction on the selected pins on the given port.  </para>
</simplesect>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>out_mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask specifying the pins to set as output.   </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="haly/nrfy_gpio.h" line="237" column="25" bodyfile="haly/nrfy_gpio.h" bodystart="237" bodyend="241"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfy__gpio_1ga5e8109f0dd2e8df011cf6831b9f2771c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRFY_STATIC_INLINE void</type>
        <definition>NRFY_STATIC_INLINE void nrfy_gpio_port_dir_input_set</definition>
        <argsstring>(NRF_GPIO_Type *p_reg, uint32_t in_mask)</argsstring>
        <name>nrfy_gpio_port_dir_input_set</name>
        <param>
          <type>NRF_GPIO_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>in_mask</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__nrf__gpio__hal_1gadb8e58d4708cdfad3b0f3836363feb75" kindref="member">nrf_gpio_port_dir_input_set</ref>  Function for setting input direction on selected pins on a given port.  </para>
</simplesect>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>in_mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask that specifies the pins to be set as input.   </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="haly/nrfy_gpio.h" line="244" column="25" bodyfile="haly/nrfy_gpio.h" bodystart="244" bodyend="248"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfy__gpio_1ga03504c36017f2bc2a3d9198bb81e550e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRFY_STATIC_INLINE void</type>
        <definition>NRFY_STATIC_INLINE void nrfy_gpio_port_dir_write</definition>
        <argsstring>(NRF_GPIO_Type *p_reg, uint32_t dir_mask)</argsstring>
        <name>nrfy_gpio_port_dir_write</name>
        <param>
          <type>NRF_GPIO_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>dir_mask</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__nrf__gpio__hal_1gac7ad85f30246f270a8a21cc42bed0d43" kindref="member">nrf_gpio_port_dir_write</ref>  Function for writing the direction configuration of the GPIO pins in the given port.  </para>
</simplesect>
</para>
<para><simplesect kind="warning"><para>This register is retained when retention is enabled.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dir_mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask that specifies the direction of pins. Bit set means that the given pin is configured as output.   </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="haly/nrfy_gpio.h" line="251" column="25" bodyfile="haly/nrfy_gpio.h" bodystart="251" bodyend="255"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfy__gpio_1gab545c1f6cf85d70d3f0698e7d27585fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRFY_STATIC_INLINE uint32_t</type>
        <definition>NRFY_STATIC_INLINE uint32_t nrfy_gpio_port_dir_read</definition>
        <argsstring>(NRF_GPIO_Type const *p_reg)</argsstring>
        <name>nrfy_gpio_port_dir_read</name>
        <param>
          <type>NRF_GPIO_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__nrf__gpio__hal_1ga8554b214bf18c42f2a16105cf56b151a" kindref="member">nrf_gpio_port_dir_read</ref>  Function for reading the direction configuration of a GPIO port.  </para>
</simplesect>
</para>
<para><simplesect kind="warning"><para>This register is retained when retention is enabled.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pin configuration of the current direction settings. Bit set means that the given pin is configured as output.   </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="haly/nrfy_gpio.h" line="258" column="29" bodyfile="haly/nrfy_gpio.h" bodystart="258" bodyend="264"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfy__gpio_1gacc4be38c2897e8da74e84b657ea27422" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRFY_STATIC_INLINE uint32_t</type>
        <definition>NRFY_STATIC_INLINE uint32_t nrfy_gpio_port_in_read</definition>
        <argsstring>(NRF_GPIO_Type const *p_reg)</argsstring>
        <name>nrfy_gpio_port_in_read</name>
        <param>
          <type>NRF_GPIO_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__nrf__gpio__hal_1gad41aefaa71c794cd90fcc4ff4c451029" kindref="member">nrf_gpio_port_in_read</ref>  Function for reading the input signals of the GPIO pins on the given port.  </para>
</simplesect>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the peripheral registers structure.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Port input values.   </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="haly/nrfy_gpio.h" line="267" column="29" bodyfile="haly/nrfy_gpio.h" bodystart="267" bodyend="273"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfy__gpio_1ga59362f91a83e4d6ca06d10f25a07a2f5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRFY_STATIC_INLINE uint32_t</type>
        <definition>NRFY_STATIC_INLINE uint32_t nrfy_gpio_port_out_read</definition>
        <argsstring>(NRF_GPIO_Type const *p_reg)</argsstring>
        <name>nrfy_gpio_port_out_read</name>
        <param>
          <type>NRF_GPIO_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__nrf__gpio__hal_1ga7c28f84af83564240cc4113864590929" kindref="member">nrf_gpio_port_out_read</ref>  Function for reading the output signals of the GPIO pins on the given port.  </para>
</simplesect>
</para>
<para><simplesect kind="warning"><para>This register is retained when retention is enabled.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the peripheral registers structure.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Port output values.   </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="haly/nrfy_gpio.h" line="276" column="29" bodyfile="haly/nrfy_gpio.h" bodystart="276" bodyend="282"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfy__gpio_1gab6f750801416b246c639d526780ae96c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRFY_STATIC_INLINE void</type>
        <definition>NRFY_STATIC_INLINE void nrfy_gpio_port_out_write</definition>
        <argsstring>(NRF_GPIO_Type *p_reg, uint32_t value)</argsstring>
        <name>nrfy_gpio_port_out_write</name>
        <param>
          <type>NRF_GPIO_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__nrf__gpio__hal_1ga73488ca11ae3da5a656cb867a15e4772" kindref="member">nrf_gpio_port_out_write</ref>  Function for writing the GPIO pins output on a given port.  </para>
</simplesect>
</para>
<para><simplesect kind="warning"><para>This register is retained when retention is enabled.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Output port mask.   </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="haly/nrfy_gpio.h" line="285" column="25" bodyfile="haly/nrfy_gpio.h" bodystart="285" bodyend="289"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfy__gpio_1ga8992c10fa5e6efea20e2964c228c71c0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRFY_STATIC_INLINE void</type>
        <definition>NRFY_STATIC_INLINE void nrfy_gpio_port_out_set</definition>
        <argsstring>(NRF_GPIO_Type *p_reg, uint32_t set_mask)</argsstring>
        <name>nrfy_gpio_port_out_set</name>
        <param>
          <type>NRF_GPIO_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>set_mask</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__nrf__gpio__hal_1ga7fb94e6618e4c1a3a4422d08bf8c45ff" kindref="member">nrf_gpio_port_out_set</ref>  Function for setting high level on selected the GPIO pins on the given port.  </para>
</simplesect>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>set_mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask with pins to be set as logical high level.   </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="haly/nrfy_gpio.h" line="292" column="25" bodyfile="haly/nrfy_gpio.h" bodystart="292" bodyend="296"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfy__gpio_1ga604cdca48e7408ee434df23605164332" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRFY_STATIC_INLINE void</type>
        <definition>NRFY_STATIC_INLINE void nrfy_gpio_port_out_clear</definition>
        <argsstring>(NRF_GPIO_Type *p_reg, uint32_t clr_mask)</argsstring>
        <name>nrfy_gpio_port_out_clear</name>
        <param>
          <type>NRF_GPIO_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>clr_mask</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__nrf__gpio__hal_1ga24044cd107738fa0d9be177a492d1b3f" kindref="member">nrf_gpio_port_out_clear</ref>  Function for setting low level on selected the GPIO pins on the given port.  </para>
</simplesect>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>clr_mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask with pins to be set as logical low level.   </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="haly/nrfy_gpio.h" line="299" column="25" bodyfile="haly/nrfy_gpio.h" bodystart="299" bodyend="303"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfy__gpio_1ga867793545deb1296f1eeda6f84c3c4d0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRFY_STATIC_INLINE void</type>
        <definition>NRFY_STATIC_INLINE void nrfy_gpio_ports_read</definition>
        <argsstring>(uint32_t start_port, uint32_t length, uint32_t *p_masks)</argsstring>
        <name>nrfy_gpio_ports_read</name>
        <param>
          <type>uint32_t</type>
          <declname>start_port</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>length</declname>
        </param>
        <param>
          <type>uint32_t *</type>
          <declname>p_masks</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__nrf__gpio__hal_1ga0f64b944223b8a410ce46bbd0b06c550" kindref="member">nrf_gpio_ports_read</ref>  Function for reading pin state of multiple consecutive ports.  </para>
</simplesect>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>start_port</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of the first port to read. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>length</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of ports to read. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_masks</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to output array where port states will be stored.   </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="haly/nrfy_gpio.h" line="306" column="25" bodyfile="haly/nrfy_gpio.h" bodystart="306" bodyend="313"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfy__gpio_1ga13b87de921c587318cbe3382059dff83" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRFY_STATIC_INLINE bool</type>
        <definition>NRFY_STATIC_INLINE bool nrfy_gpio_pin_present_check</definition>
        <argsstring>(uint32_t pin_number)</argsstring>
        <name>nrfy_gpio_pin_present_check</name>
        <param>
          <type>uint32_t</type>
          <declname>pin_number</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__nrf__gpio__hal_1ga4438cf0e5a3c3adb1700c63cfb6ed0f3" kindref="member">nrf_gpio_pin_present_check</ref>  Function for checking if provided pin is present on the MCU.  </para>
</simplesect>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pin_number</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of the pin to be checked.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>Pin is present. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>Pin is not present.   </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="haly/nrfy_gpio.h" line="382" column="25" bodyfile="haly/nrfy_gpio.h" bodystart="382" bodyend="385"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfy__gpio_1ga8684e3716deab63f7351181299b5c723" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRFY_STATIC_INLINE uint32_t</type>
        <definition>NRFY_STATIC_INLINE uint32_t nrfy_gpio_pin_port_number_extract</definition>
        <argsstring>(uint32_t *p_pin)</argsstring>
        <name>nrfy_gpio_pin_port_number_extract</name>
        <param>
          <type>uint32_t *</type>
          <declname>p_pin</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__nrf__gpio__hal_1gafc364966f195670481ef5fcc4e509a73" kindref="member">nrf_gpio_pin_port_number_extract</ref>  Function for extracting port number and the relative pin number from the absolute pin number.  </para>
</simplesect>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">p_pin</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the absolute pin number overridden by the pin number that is relative to the port.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Port number.   </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="haly/nrfy_gpio.h" line="388" column="29" bodyfile="haly/nrfy_gpio.h" bodystart="388" bodyend="391"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2021<sp/>-<sp/>2024,<sp/>Nordic<sp/>Semiconductor<sp/>ASA</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>All<sp/>rights<sp/>reserved.</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>SPDX-License-Identifier:<sp/>BSD-3-Clause</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions<sp/>are<sp/>met:</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>1.<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright<sp/>notice,<sp/>this</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>2.<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the<sp/>distribution.</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/>3.<sp/>Neither<sp/>the<sp/>name<sp/>of<sp/>the<sp/>copyright<sp/>holder<sp/>nor<sp/>the<sp/>names<sp/>of<sp/>its</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>contributors<sp/>may<sp/>be<sp/>used<sp/>to<sp/>endorse<sp/>or<sp/>promote<sp/>products<sp/>derived<sp/>from<sp/>this</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>software<sp/>without<sp/>specific<sp/>prior<sp/>written<sp/>permission.</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>COPYRIGHT<sp/>HOLDERS<sp/>AND<sp/>CONTRIBUTORS<sp/>&quot;AS<sp/>IS&quot;</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/>AND<sp/>ANY<sp/>EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>THE</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*<sp/>ARE<sp/>DISCLAIMED.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>COPYRIGHT<sp/>HOLDER<sp/>OR<sp/>CONTRIBUTORS<sp/>BE</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,<sp/>SPECIAL,<sp/>EXEMPLARY,<sp/>OR</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>PROCUREMENT<sp/>OF</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>*<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,<sp/>DATA,<sp/>OR<sp/>PROFITS;<sp/>OR<sp/>BUSINESS</highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/>*<sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY<sp/>THEORY<sp/>OF<sp/>LIABILITY,<sp/>WHETHER<sp/>IN</highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/>*<sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR<sp/>OTHERWISE)</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/>*<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE<sp/>OF<sp/>THIS<sp/>SOFTWARE,<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/>*<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight></codeline>
<codeline lineno="32"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>NRFY_GPIO_H__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRFY_GPIO_H__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;nrfx.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;hal/nrf_gpio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="44"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="45"><highlight class="comment"><sp/>*<sp/>@defgroup<sp/>nrfy_gpio<sp/>GPIO<sp/>HALY</highlight></codeline>
<codeline lineno="46"><highlight class="comment"><sp/>*<sp/>@{</highlight></codeline>
<codeline lineno="47"><highlight class="comment"><sp/>*<sp/>@ingroup<sp/>nrf_gpio</highlight></codeline>
<codeline lineno="48"><highlight class="comment"><sp/>*<sp/>@brief<sp/><sp/><sp/>Hardware<sp/>access<sp/>layer<sp/>with<sp/>cache<sp/>and<sp/>barrier<sp/>support<sp/>for<sp/>managing<sp/>the<sp/>GPIO<sp/>peripheral.</highlight></codeline>
<codeline lineno="49"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="51"><highlight class="comment">/**<sp/>@refhal{nrf_gpio_range_cfg_output}<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal">NRFY_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrfy__gpio_1gae436987b8918cd3975e5926738c9986e" kindref="member">nrfy_gpio_range_cfg_output</ref>(uint32_t<sp/>pin_range_start,</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>pin_range_end)</highlight></codeline>
<codeline lineno="54"><highlight class="normal">{</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__gpio__hal_1ga2a34295e713d0e29a858a0dd31d619b3" kindref="member">nrf_gpio_range_cfg_output</ref>(pin_range_start,<sp/>pin_range_end);</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/>nrf_barrier_w();</highlight></codeline>
<codeline lineno="57"><highlight class="normal">}</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="59"><highlight class="comment">/**<sp/>@refhal{nrf_gpio_range_cfg_input}<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal">NRFY_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrfy__gpio_1ga1e02692166c27f3f5d0bb504e6eb6577" kindref="member">nrfy_gpio_range_cfg_input</ref>(uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pin_range_start,</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pin_range_end,</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__gpio__hal_1ga07e0c8c0b30499cf0a7b79dbe62d3fcc" kindref="member">nrf_gpio_pin_pull_t</ref><sp/>pull_config)</highlight></codeline>
<codeline lineno="63"><highlight class="normal">{</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__gpio__hal_1gacde48e9647b3961591336ff75de8b02e" kindref="member">nrf_gpio_range_cfg_input</ref>(pin_range_start,<sp/>pin_range_end,<sp/>pull_config);</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/>nrf_barrier_w();</highlight></codeline>
<codeline lineno="66"><highlight class="normal">}</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="68"><highlight class="comment">/**<sp/>@refhal{nrf_gpio_cfg}<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal">NRFY_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrfy__gpio_1ga880d2c8aee41754f269d32b3c3cb50e9" kindref="member">nrfy_gpio_cfg</ref>(uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pin_number,</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__gpio__hal_1ga4089fa9e3311c34d254d4d00029911bc" kindref="member">nrf_gpio_pin_dir_t</ref><sp/><sp/><sp/>dir,</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__gpio__hal_1ga94d8c546b86a236b5f7636703b8f5fb3" kindref="member">nrf_gpio_pin_input_t</ref><sp/>input,</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__gpio__hal_1ga07e0c8c0b30499cf0a7b79dbe62d3fcc" kindref="member">nrf_gpio_pin_pull_t</ref><sp/><sp/>pull,</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__gpio__hal_1gabb86c9557487ac1eda0cec28f258a725" kindref="member">nrf_gpio_pin_drive_t</ref><sp/>drive,</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__gpio__hal_1ga0708136c752d69015962a2ccb4c59fbd" kindref="member">nrf_gpio_pin_sense_t</ref><sp/>sense)</highlight></codeline>
<codeline lineno="75"><highlight class="normal">{</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__gpio__hal_1gad89e946ef28fb1e130237c8a074bc7bb" kindref="member">nrf_gpio_cfg</ref>(pin_number,<sp/>dir,<sp/>input,<sp/>pull,<sp/>drive,<sp/>sense);</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/>nrf_barrier_w();</highlight></codeline>
<codeline lineno="78"><highlight class="normal">}</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="80"><highlight class="comment">/**<sp/>@refhal{nrf_gpio_reconfigure}<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal">NRFY_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrfy__gpio_1gac7af9e0414b42c780649037e43c48781" kindref="member">nrfy_gpio_reconfigure</ref>(uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pin_number,</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="group__nrf__gpio__hal_1ga4089fa9e3311c34d254d4d00029911bc" kindref="member">nrf_gpio_pin_dir_t</ref><sp/>*<sp/><sp/><sp/>p_dir,</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="group__nrf__gpio__hal_1ga94d8c546b86a236b5f7636703b8f5fb3" kindref="member">nrf_gpio_pin_input_t</ref><sp/>*<sp/>p_input,</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="group__nrf__gpio__hal_1ga07e0c8c0b30499cf0a7b79dbe62d3fcc" kindref="member">nrf_gpio_pin_pull_t</ref><sp/>*<sp/><sp/>p_pull,</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="group__nrf__gpio__hal_1gabb86c9557487ac1eda0cec28f258a725" kindref="member">nrf_gpio_pin_drive_t</ref><sp/>*<sp/>p_drive,</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="group__nrf__gpio__hal_1ga0708136c752d69015962a2ccb4c59fbd" kindref="member">nrf_gpio_pin_sense_t</ref><sp/>*<sp/>p_sense)</highlight></codeline>
<codeline lineno="87"><highlight class="normal">{</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__gpio__hal_1gaac51df09d9290f1d8047a4a46657bc35" kindref="member">nrf_gpio_reconfigure</ref>(pin_number,<sp/>p_dir,<sp/>p_input,<sp/>p_pull,<sp/>p_drive,<sp/>p_sense);</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/>nrf_barrier_w();</highlight></codeline>
<codeline lineno="90"><highlight class="normal">}</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="92"><highlight class="comment">/**<sp/>@refhal{nrf_gpio_cfg_output}<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal">NRFY_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrfy__gpio_1ga42382784269fa660b436f687de185d00" kindref="member">nrfy_gpio_cfg_output</ref>(uint32_t<sp/>pin_number)</highlight></codeline>
<codeline lineno="94"><highlight class="normal">{</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__gpio__hal_1gaa417905af0907e63baae651c1679d01a" kindref="member">nrf_gpio_cfg_output</ref>(pin_number);</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/>nrf_barrier_w();</highlight></codeline>
<codeline lineno="97"><highlight class="normal">}</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="99"><highlight class="comment">/**<sp/>@refhal{nrf_gpio_cfg_input}<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal">NRFY_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrfy__gpio_1gab7764dddb14d7070c59b16509e3d1d41" kindref="member">nrfy_gpio_cfg_input</ref>(uint32_t<sp/>pin_number,<sp/><ref refid="group__nrf__gpio__hal_1ga07e0c8c0b30499cf0a7b79dbe62d3fcc" kindref="member">nrf_gpio_pin_pull_t</ref><sp/>pull_config)</highlight></codeline>
<codeline lineno="101"><highlight class="normal">{</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__gpio__hal_1ga2f960eb1827bd613a08d7b48651711b4" kindref="member">nrf_gpio_cfg_input</ref>(pin_number,<sp/>pull_config);</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/>nrf_barrier_w();</highlight></codeline>
<codeline lineno="104"><highlight class="normal">}</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="106"><highlight class="comment">/**<sp/>@refhal{nrf_gpio_cfg_default}<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal">NRFY_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrfy__gpio_1ga9f4ec5d15234cb3e7c039bcd90a8da51" kindref="member">nrfy_gpio_cfg_default</ref>(uint32_t<sp/>pin_number)</highlight></codeline>
<codeline lineno="108"><highlight class="normal">{</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__gpio__hal_1ga34cf00314729a3fd0cc04de9f4b74a64" kindref="member">nrf_gpio_cfg_default</ref>(pin_number);</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/>nrf_barrier_w();</highlight></codeline>
<codeline lineno="111"><highlight class="normal">}</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="113"><highlight class="comment">/**<sp/>@refhal{nrf_gpio_cfg_watcher}<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal">NRFY_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrfy__gpio_1gad355838eba5df79a6350900ddb22c412" kindref="member">nrfy_gpio_cfg_watcher</ref>(uint32_t<sp/>pin_number)</highlight></codeline>
<codeline lineno="115"><highlight class="normal">{</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/>nrf_barrier_r();</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__gpio__hal_1gad1026666584b2d04c02db558230ecc6f" kindref="member">nrf_gpio_cfg_watcher</ref>(pin_number);</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/>nrf_barrier_rw();</highlight></codeline>
<codeline lineno="119"><highlight class="normal">}</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="121"><highlight class="comment">/**<sp/>@refhal{nrf_gpio_input_disconnect}<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal">NRFY_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrfy__gpio_1gaa2a8da91d648a739e7c872ab8bdb9d18" kindref="member">nrfy_gpio_input_disconnect</ref>(uint32_t<sp/>pin_number)</highlight></codeline>
<codeline lineno="123"><highlight class="normal">{</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/>nrf_barrier_r();</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__gpio__hal_1ga63c36e49d1c38772316209aa7d9c5e9e" kindref="member">nrf_gpio_input_disconnect</ref>(pin_number);</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/>nrf_barrier_rw();</highlight></codeline>
<codeline lineno="127"><highlight class="normal">}</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="129"><highlight class="comment">/**<sp/>@refhal{nrf_gpio_cfg_sense_input}<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal">NRFY_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrfy__gpio_1ga28a1c0ea032a0b32de3dc366fc1778f0" kindref="member">nrfy_gpio_cfg_sense_input</ref>(uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pin_number,</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__gpio__hal_1ga07e0c8c0b30499cf0a7b79dbe62d3fcc" kindref="member">nrf_gpio_pin_pull_t</ref><sp/><sp/>pull_config,</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__gpio__hal_1ga0708136c752d69015962a2ccb4c59fbd" kindref="member">nrf_gpio_pin_sense_t</ref><sp/>sense_config)</highlight></codeline>
<codeline lineno="133"><highlight class="normal">{</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__gpio__hal_1ga9f56f2de7bbb5d20c3ed3a88d844e1ca" kindref="member">nrf_gpio_cfg_sense_input</ref>(pin_number,<sp/>pull_config,<sp/>sense_config);</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/>nrf_barrier_w();</highlight></codeline>
<codeline lineno="136"><highlight class="normal">}</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="138"><highlight class="comment">/**<sp/>@refhal{nrf_gpio_cfg_sense_set}<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal">NRFY_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrfy__gpio_1ga204c31257de5c7433dd0e4ec22d7bf10" kindref="member">nrfy_gpio_cfg_sense_set</ref>(uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pin_number,</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__gpio__hal_1ga0708136c752d69015962a2ccb4c59fbd" kindref="member">nrf_gpio_pin_sense_t</ref><sp/>sense_config)</highlight></codeline>
<codeline lineno="141"><highlight class="normal">{</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/>nrf_barrier_r();</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__gpio__hal_1ga6e55de9a5b5c97a9eb430094d7012ad6" kindref="member">nrf_gpio_cfg_sense_set</ref>(pin_number,<sp/>sense_config);</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/>nrf_barrier_rw();</highlight></codeline>
<codeline lineno="145"><highlight class="normal">}</highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="147"><highlight class="comment">/**<sp/>@refhal{nrf_gpio_pin_dir_set}<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal">NRFY_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrfy__gpio_1ga718585ecfa301cb6f22134950dae2638" kindref="member">nrfy_gpio_pin_dir_set</ref>(uint32_t<sp/>pin_number,<sp/><ref refid="group__nrf__gpio__hal_1ga4089fa9e3311c34d254d4d00029911bc" kindref="member">nrf_gpio_pin_dir_t</ref><sp/>direction)</highlight></codeline>
<codeline lineno="149"><highlight class="normal">{</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__gpio__hal_1ga6cfe68a6a36eb51d65a23d4b9e8dc192" kindref="member">nrf_gpio_pin_dir_set</ref>(pin_number,<sp/>direction);</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/>nrf_barrier_w();</highlight></codeline>
<codeline lineno="152"><highlight class="normal">}</highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="154"><highlight class="comment">/**<sp/>@refhal{nrf_gpio_pin_set}<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal">NRFY_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrfy__gpio_1ga4ca6ec6e36dd30f30c97b0997ebf76fe" kindref="member">nrfy_gpio_pin_set</ref>(uint32_t<sp/>pin_number)</highlight></codeline>
<codeline lineno="156"><highlight class="normal">{</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__gpio__hal_1gab702c07d3087905e6c80c287116052fd" kindref="member">nrf_gpio_pin_set</ref>(pin_number);</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/>nrf_barrier_w();</highlight></codeline>
<codeline lineno="159"><highlight class="normal">}</highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="161"><highlight class="comment">/**<sp/>@refhal{nrf_gpio_pin_clear}<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal">NRFY_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrfy__gpio_1ga2876310725226073e9082a7f2c76dfc5" kindref="member">nrfy_gpio_pin_clear</ref>(uint32_t<sp/>pin_number)</highlight></codeline>
<codeline lineno="163"><highlight class="normal">{</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__gpio__hal_1ga40b1e64cb60fac12e2fdebb5975c18ad" kindref="member">nrf_gpio_pin_clear</ref>(pin_number);</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/>nrf_barrier_w();</highlight></codeline>
<codeline lineno="166"><highlight class="normal">}</highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="168"><highlight class="comment">/**<sp/>@refhal{nrf_gpio_pin_toggle}<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal">NRFY_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrfy__gpio_1gae951b87876f6d94f10c84a9d11c396ee" kindref="member">nrfy_gpio_pin_toggle</ref>(uint32_t<sp/>pin_number)</highlight></codeline>
<codeline lineno="170"><highlight class="normal">{</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__gpio__hal_1ga01229c1afac385b135cb5441814de618" kindref="member">nrf_gpio_pin_toggle</ref>(pin_number);</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/>nrf_barrier_w();</highlight></codeline>
<codeline lineno="173"><highlight class="normal">}</highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="175"><highlight class="comment">/**<sp/>@refhal{nrf_gpio_pin_write}<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal">NRFY_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrfy__gpio_1ga563b123022e8bffd7722b636903f9239" kindref="member">nrfy_gpio_pin_write</ref>(uint32_t<sp/>pin_number,<sp/>uint32_t<sp/>value)</highlight></codeline>
<codeline lineno="177"><highlight class="normal">{</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__gpio__hal_1gaf00dc5b966c72c25fb615f5db6ebef59" kindref="member">nrf_gpio_pin_write</ref>(pin_number,<sp/>value);</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/>nrf_barrier_w();</highlight></codeline>
<codeline lineno="180"><highlight class="normal">}</highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="182"><highlight class="comment">/**<sp/>@refhal{nrf_gpio_pin_read}<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal">NRFY_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrfy__gpio_1ga6a641efc98be41d8b652d7179ed53279" kindref="member">nrfy_gpio_pin_read</ref>(uint32_t<sp/>pin_number)</highlight></codeline>
<codeline lineno="184"><highlight class="normal">{</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/>nrf_barrier_r();</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>pin<sp/>=<sp/><ref refid="group__nrf__gpio__hal_1gae6af1c0ef7379540dff84f1fd21c75ee" kindref="member">nrf_gpio_pin_read</ref>(pin_number);</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/>nrf_barrier_r();</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pin;</highlight></codeline>
<codeline lineno="189"><highlight class="normal">}</highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="191"><highlight class="comment">/**<sp/>@refhal{nrf_gpio_pin_out_read}<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal">NRFY_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrfy__gpio_1ga0320fad698de79f698c3b781689e7871" kindref="member">nrfy_gpio_pin_out_read</ref>(uint32_t<sp/>pin_number)</highlight></codeline>
<codeline lineno="193"><highlight class="normal">{</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/>nrf_barrier_rw();</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>pin<sp/>=<sp/><ref refid="group__nrf__gpio__hal_1ga86fff8083c47b1466caae966709cee94" kindref="member">nrf_gpio_pin_out_read</ref>(pin_number);</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/>nrf_barrier_r();</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pin;</highlight></codeline>
<codeline lineno="198"><highlight class="normal">}</highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="200"><highlight class="comment">/**<sp/>@refhal{nrf_gpio_pin_sense_get}<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal">NRFY_STATIC_INLINE<sp/><ref refid="group__nrf__gpio__hal_1ga0708136c752d69015962a2ccb4c59fbd" kindref="member">nrf_gpio_pin_sense_t</ref><sp/><ref refid="group__nrfy__gpio_1ga2a5b251d98bbe7b6cb23f169aae66d17" kindref="member">nrfy_gpio_pin_sense_get</ref>(uint32_t<sp/>pin_number)</highlight></codeline>
<codeline lineno="202"><highlight class="normal">{</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/>nrf_barrier_rw();</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__gpio__hal_1ga0708136c752d69015962a2ccb4c59fbd" kindref="member">nrf_gpio_pin_sense_t</ref><sp/>pin_sense<sp/>=<sp/><ref refid="group__nrf__gpio__hal_1ga969bfaba6910e532972bc61aa3d36d8e" kindref="member">nrf_gpio_pin_sense_get</ref>(pin_number);</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/>nrf_barrier_r();</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pin_sense;</highlight></codeline>
<codeline lineno="207"><highlight class="normal">}</highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="209"><highlight class="comment">/**<sp/>@refhal{nrf_gpio_pin_dir_get}<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal">NRFY_STATIC_INLINE<sp/><ref refid="group__nrf__gpio__hal_1ga4089fa9e3311c34d254d4d00029911bc" kindref="member">nrf_gpio_pin_dir_t</ref><sp/><ref refid="group__nrfy__gpio_1ga61004598073e470813aac44a63793117" kindref="member">nrfy_gpio_pin_dir_get</ref>(uint32_t<sp/>pin_number)</highlight></codeline>
<codeline lineno="211"><highlight class="normal">{</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/>nrf_barrier_rw();</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__gpio__hal_1ga4089fa9e3311c34d254d4d00029911bc" kindref="member">nrf_gpio_pin_dir_t</ref><sp/>pin_dir<sp/>=<sp/><ref refid="group__nrf__gpio__hal_1gaaf646c2b3741b320043623984b4bb594" kindref="member">nrf_gpio_pin_dir_get</ref>(pin_number);</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/>nrf_barrier_r();</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pin_dir;</highlight></codeline>
<codeline lineno="216"><highlight class="normal">}</highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="218"><highlight class="comment">/**<sp/>@refhal{nrf_gpio_pin_input_get}<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal">NRFY_STATIC_INLINE<sp/><ref refid="group__nrf__gpio__hal_1ga94d8c546b86a236b5f7636703b8f5fb3" kindref="member">nrf_gpio_pin_input_t</ref><sp/><ref refid="group__nrfy__gpio_1ga5e43bd81f7b918eb66bd7c7ec1c5d3ad" kindref="member">nrfy_gpio_pin_input_get</ref>(uint32_t<sp/>pin_number)</highlight></codeline>
<codeline lineno="220"><highlight class="normal">{</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/>nrf_barrier_rw();</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__gpio__hal_1ga94d8c546b86a236b5f7636703b8f5fb3" kindref="member">nrf_gpio_pin_input_t</ref><sp/>pin_input<sp/>=<sp/><ref refid="group__nrf__gpio__hal_1ga256a5cb4921ab72223471db221d5119d" kindref="member">nrf_gpio_pin_input_get</ref>(pin_number);</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/>nrf_barrier_r();</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pin_input;</highlight></codeline>
<codeline lineno="225"><highlight class="normal">}</highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="227"><highlight class="comment">/**<sp/>@refhal{nrf_gpio_pin_pull_get}<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal">NRFY_STATIC_INLINE<sp/><ref refid="group__nrf__gpio__hal_1ga07e0c8c0b30499cf0a7b79dbe62d3fcc" kindref="member">nrf_gpio_pin_pull_t</ref><sp/><ref refid="group__nrfy__gpio_1ga9980e0a3df6d4ff37ff4e7c736caf162" kindref="member">nrfy_gpio_pin_pull_get</ref>(uint32_t<sp/>pin_number)</highlight></codeline>
<codeline lineno="229"><highlight class="normal">{</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/>nrf_barrier_rw();</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__gpio__hal_1ga07e0c8c0b30499cf0a7b79dbe62d3fcc" kindref="member">nrf_gpio_pin_pull_t</ref><sp/>pin_pull<sp/>=<sp/><ref refid="group__nrf__gpio__hal_1ga160fad0da6f67e982cfe169bbfcc84e9" kindref="member">nrf_gpio_pin_pull_get</ref>(pin_number);</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/>nrf_barrier_r();</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pin_pull;</highlight></codeline>
<codeline lineno="234"><highlight class="normal">}</highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="236"><highlight class="comment">/**<sp/>@refhal{nrf_gpio_port_dir_output_set}<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal">NRFY_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrfy__gpio_1ga15e2b4ea630ac2c2280049cf4be932da" kindref="member">nrfy_gpio_port_dir_output_set</ref>(NRF_GPIO_Type<sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>out_mask)</highlight></codeline>
<codeline lineno="238"><highlight class="normal">{</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__gpio__hal_1ga0aeaeacba06d85d45eabbc7d139f4ec9" kindref="member">nrf_gpio_port_dir_output_set</ref>(p_reg,<sp/>out_mask);</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/>nrf_barrier_w();</highlight></codeline>
<codeline lineno="241"><highlight class="normal">}</highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="243"><highlight class="comment">/**<sp/>@refhal{nrf_gpio_port_dir_input_set}<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal">NRFY_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrfy__gpio_1ga5e8109f0dd2e8df011cf6831b9f2771c" kindref="member">nrfy_gpio_port_dir_input_set</ref>(NRF_GPIO_Type<sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>in_mask)</highlight></codeline>
<codeline lineno="245"><highlight class="normal">{</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__gpio__hal_1gadb8e58d4708cdfad3b0f3836363feb75" kindref="member">nrf_gpio_port_dir_input_set</ref>(p_reg,<sp/>in_mask);</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/>nrf_barrier_w();</highlight></codeline>
<codeline lineno="248"><highlight class="normal">}</highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="250"><highlight class="comment">/**<sp/>@refhal{nrf_gpio_port_dir_write}<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal">NRFY_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrfy__gpio_1ga03504c36017f2bc2a3d9198bb81e550e" kindref="member">nrfy_gpio_port_dir_write</ref>(NRF_GPIO_Type<sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>dir_mask)</highlight></codeline>
<codeline lineno="252"><highlight class="normal">{</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__gpio__hal_1gac7ad85f30246f270a8a21cc42bed0d43" kindref="member">nrf_gpio_port_dir_write</ref>(p_reg,<sp/>dir_mask);</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/>nrf_barrier_w();</highlight></codeline>
<codeline lineno="255"><highlight class="normal">}</highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="257"><highlight class="comment">/**<sp/>@refhal{nrf_gpio_port_dir_read}<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal">NRFY_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrfy__gpio_1gab545c1f6cf85d70d3f0698e7d27585fc" kindref="member">nrfy_gpio_port_dir_read</ref>(NRF_GPIO_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="259"><highlight class="normal">{</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/>nrf_barrier_rw();</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>port_dir<sp/>=<sp/><ref refid="group__nrf__gpio__hal_1ga8554b214bf18c42f2a16105cf56b151a" kindref="member">nrf_gpio_port_dir_read</ref>(p_reg);</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/>nrf_barrier_r();</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>port_dir;</highlight></codeline>
<codeline lineno="264"><highlight class="normal">}</highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="266"><highlight class="comment">/**<sp/>@refhal{nrf_gpio_port_in_read}<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal">NRFY_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrfy__gpio_1gacc4be38c2897e8da74e84b657ea27422" kindref="member">nrfy_gpio_port_in_read</ref>(NRF_GPIO_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="268"><highlight class="normal">{</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/>nrf_barrier_rw();</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>port_in<sp/>=<sp/><ref refid="group__nrf__gpio__hal_1gad41aefaa71c794cd90fcc4ff4c451029" kindref="member">nrf_gpio_port_in_read</ref>(p_reg);</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/>nrf_barrier_r();</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>port_in;</highlight></codeline>
<codeline lineno="273"><highlight class="normal">}</highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="275"><highlight class="comment">/**<sp/>@refhal{nrf_gpio_port_out_read}<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal">NRFY_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrfy__gpio_1ga59362f91a83e4d6ca06d10f25a07a2f5" kindref="member">nrfy_gpio_port_out_read</ref>(NRF_GPIO_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="277"><highlight class="normal">{</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/>nrf_barrier_rw();</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>port_out<sp/>=<sp/><ref refid="group__nrf__gpio__hal_1ga7c28f84af83564240cc4113864590929" kindref="member">nrf_gpio_port_out_read</ref>(p_reg);</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/>nrf_barrier_r();</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>port_out;</highlight></codeline>
<codeline lineno="282"><highlight class="normal">}</highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="284"><highlight class="comment">/**<sp/>@refhal{nrf_gpio_port_out_write}<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal">NRFY_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrfy__gpio_1gab6f750801416b246c639d526780ae96c" kindref="member">nrfy_gpio_port_out_write</ref>(NRF_GPIO_Type<sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>value)</highlight></codeline>
<codeline lineno="286"><highlight class="normal">{</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__gpio__hal_1ga73488ca11ae3da5a656cb867a15e4772" kindref="member">nrf_gpio_port_out_write</ref>(p_reg,<sp/>value);</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/>nrf_barrier_w();</highlight></codeline>
<codeline lineno="289"><highlight class="normal">}</highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="291"><highlight class="comment">/**<sp/>@refhal{nrf_gpio_port_out_set}<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal">NRFY_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrfy__gpio_1ga8992c10fa5e6efea20e2964c228c71c0" kindref="member">nrfy_gpio_port_out_set</ref>(NRF_GPIO_Type<sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>set_mask)</highlight></codeline>
<codeline lineno="293"><highlight class="normal">{</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__gpio__hal_1ga7fb94e6618e4c1a3a4422d08bf8c45ff" kindref="member">nrf_gpio_port_out_set</ref>(p_reg,<sp/>set_mask);</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/>nrf_barrier_w();</highlight></codeline>
<codeline lineno="296"><highlight class="normal">}</highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="298"><highlight class="comment">/**<sp/>@refhal{nrf_gpio_port_out_clear}<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal">NRFY_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrfy__gpio_1ga604cdca48e7408ee434df23605164332" kindref="member">nrfy_gpio_port_out_clear</ref>(NRF_GPIO_Type<sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>clr_mask)</highlight></codeline>
<codeline lineno="300"><highlight class="normal">{</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__gpio__hal_1ga24044cd107738fa0d9be177a492d1b3f" kindref="member">nrf_gpio_port_out_clear</ref>(p_reg,<sp/>clr_mask);</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/>nrf_barrier_w();</highlight></codeline>
<codeline lineno="303"><highlight class="normal">}</highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="305"><highlight class="comment">/**<sp/>@refhal{nrf_gpio_ports_read}<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal">NRFY_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrfy__gpio_1ga867793545deb1296f1eeda6f84c3c4d0" kindref="member">nrfy_gpio_ports_read</ref>(uint32_t<sp/><sp/><sp/>start_port,</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/>length,</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>*<sp/>p_masks)</highlight></codeline>
<codeline lineno="309"><highlight class="normal">{</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/>nrf_barrier_r();</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__gpio__hal_1ga0f64b944223b8a410ce46bbd0b06c550" kindref="member">nrf_gpio_ports_read</ref>(start_port,<sp/>length,<sp/>p_masks);</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/>nrf_barrier_r();</highlight></codeline>
<codeline lineno="313"><highlight class="normal">}</highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(NRF_GPIO_LATCH_PRESENT)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="316"><highlight class="comment">/**<sp/>@refhal{nrf_gpio_latches_read}<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal">NRFY_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>nrfy_gpio_latches_read(uint32_t<sp/><sp/><sp/>start_port,</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/>length,</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>*<sp/>p_masks)</highlight></codeline>
<codeline lineno="320"><highlight class="normal">{</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/>nrf_barrier_r();</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__gpio__hal_1ga9e33213e819a67d831438e0389ecfee7" kindref="member">nrf_gpio_latches_read</ref>(start_port,<sp/>length,<sp/>p_masks);</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/>nrf_barrier_r();</highlight></codeline>
<codeline lineno="324"><highlight class="normal">}</highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="326"><highlight class="comment">/**<sp/>@refhal{nrf_gpio_latches_read_and_clear}<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal">NRFY_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>nrfy_gpio_latches_read_and_clear(uint32_t<sp/><sp/><sp/>start_port,</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/>length,</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>*<sp/>p_masks)</highlight></codeline>
<codeline lineno="330"><highlight class="normal">{</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/>nrf_barrier_r();</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__gpio__hal_1gabac37b1a5bb08529542cfac292a8e1cd" kindref="member">nrf_gpio_latches_read_and_clear</ref>(start_port,<sp/>length,<sp/>p_masks);</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/>nrf_barrier_rw();</highlight></codeline>
<codeline lineno="334"><highlight class="normal">}</highlight></codeline>
<codeline lineno="335"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="336"><highlight class="comment">/**<sp/>@refhal{nrf_gpio_pin_latch_get}<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal">NRFY_STATIC_INLINE<sp/>uint32_t<sp/>nrfy_gpio_pin_latch_get(uint32_t<sp/>pin_number)</highlight></codeline>
<codeline lineno="338"><highlight class="normal">{</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/>nrf_barrier_r();</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>pin_latch<sp/>=<sp/><ref refid="group__nrf__gpio__hal_1ga1b48d2d829dc4b22e307d60b0a12b2c6" kindref="member">nrf_gpio_pin_latch_get</ref>(pin_number);</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/>nrf_barrier_r();</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pin_latch;</highlight></codeline>
<codeline lineno="343"><highlight class="normal">}</highlight></codeline>
<codeline lineno="344"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="345"><highlight class="comment">/**<sp/>@refhal{nrf_gpio_pin_latch_clear}<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal">NRFY_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>nrfy_gpio_pin_latch_clear(uint32_t<sp/>pin_number)</highlight></codeline>
<codeline lineno="347"><highlight class="normal">{</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__gpio__hal_1ga17ab0ef05caabca53cbef3bbe8ad7bab" kindref="member">nrf_gpio_pin_latch_clear</ref>(pin_number);</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/>nrf_barrier_w();</highlight></codeline>
<codeline lineno="350"><highlight class="normal">}</highlight></codeline>
<codeline lineno="351"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>defined(NRF_GPIO_LATCH_PRESENT)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_GPIO_HAS_SEL</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="354"><highlight class="comment">/**<sp/>@refhal{nrf_gpio_pin_control_select}<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal">NRFY_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>nrfy_gpio_pin_control_select(uint32_t<sp/>pin_number,<sp/><ref refid="group__nrf__gpio__hal_1gabcfe09507cd81936b478b544a7d06cbd" kindref="member">nrf_gpio_pin_sel_t</ref><sp/>ctrl)</highlight></codeline>
<codeline lineno="356"><highlight class="normal">{</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/>nrf_barrier_r();</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__gpio__hal_1ga100ea469df06fdd0de4e6cfcbfad09c7" kindref="member">nrf_gpio_pin_control_select</ref>(pin_number,<sp/>ctrl);</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/>nrf_barrier_rw();</highlight></codeline>
<codeline lineno="360"><highlight class="normal">}</highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_GPIO_HAS_CLOCKPIN</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="364"><highlight class="comment">/**<sp/>@refhal{nrf_gpio_pin_clock_set}<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal">NRFY_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>nrfy_gpio_pin_clock_set(uint32_t<sp/>pin_number,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>enable)</highlight></codeline>
<codeline lineno="366"><highlight class="normal">{</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__gpio__hal_1gae30d35cb6a873fcae4a7d71747eb9844" kindref="member">nrf_gpio_pin_clock_set</ref>(pin_number,<sp/>enable);</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/>nrf_barrier_w();</highlight></codeline>
<codeline lineno="369"><highlight class="normal">}</highlight></codeline>
<codeline lineno="370"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="371"><highlight class="comment">/**<sp/>@refhal{nrf_gpio_pin_clock_check}<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal">NRFY_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>nrfy_gpio_pin_clock_check(uint32_t<sp/>pin_number)</highlight></codeline>
<codeline lineno="373"><highlight class="normal">{</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/>nrf_barrier_rw();</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>pin_clock<sp/>=<sp/><ref refid="group__nrf__gpio__hal_1ga38705139f2960b426e8f3bc04517d0d5" kindref="member">nrf_gpio_pin_clock_check</ref>(pin_number);</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/>nrf_barrier_r();</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pin_clock;</highlight></codeline>
<codeline lineno="378"><highlight class="normal">}</highlight></codeline>
<codeline lineno="379"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="380"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="381"><highlight class="comment">/**<sp/>@refhal{nrf_gpio_pin_present_check}<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal">NRFY_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrfy__gpio_1ga13b87de921c587318cbe3382059dff83" kindref="member">nrfy_gpio_pin_present_check</ref>(uint32_t<sp/>pin_number)</highlight></codeline>
<codeline lineno="383"><highlight class="normal">{</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__nrf__gpio__hal_1ga4438cf0e5a3c3adb1700c63cfb6ed0f3" kindref="member">nrf_gpio_pin_present_check</ref>(pin_number);</highlight></codeline>
<codeline lineno="385"><highlight class="normal">}</highlight></codeline>
<codeline lineno="386"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="387"><highlight class="comment">/**<sp/>@refhal{nrf_gpio_pin_port_number_extract}<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal">NRFY_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrfy__gpio_1ga8684e3716deab63f7351181299b5c723" kindref="member">nrfy_gpio_pin_port_number_extract</ref>(uint32_t<sp/>*<sp/>p_pin)</highlight></codeline>
<codeline lineno="389"><highlight class="normal">{</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__nrf__gpio__hal_1gafc364966f195670481ef5fcc4e509a73" kindref="member">nrf_gpio_pin_port_number_extract</ref>(p_pin);</highlight></codeline>
<codeline lineno="391"><highlight class="normal">}</highlight></codeline>
<codeline lineno="392"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="393"><highlight class="comment">/**<sp/>@}<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="396"><highlight class="normal">}</highlight></codeline>
<codeline lineno="397"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="398"><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRFY_GPIO_H__</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="haly/nrfy_gpio.h"/>
  </compounddef>
</doxygen>
