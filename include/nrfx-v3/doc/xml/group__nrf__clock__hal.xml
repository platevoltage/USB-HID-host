<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="group__nrf__clock__hal" kind="group">
    <compoundname>nrf_clock_hal</compoundname>
    <title>Clock HAL</title>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="group__nrf__clock__hal_1ga5b00bcdc07defd8187f2be8a2ec7a597" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_clock_lfclk_t</name>
        <enumvalue id="group__nrf__clock__hal_1gga5b00bcdc07defd8187f2be8a2ec7a597abbf41d486a54192b0710aaec4fc80c57" prot="public">
          <name>NRF_CLOCK_LFCLK_LFULP</name>
          <initializer>= CLOCK_LFCLKSRC_SRC_LFULP</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Internal 32 kHz Ultra-low power oscillator. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__clock__hal_1gga5b00bcdc07defd8187f2be8a2ec7a597ae2a6613188db56db98d2a71a1656556d" prot="public">
          <name>NRF_CLOCK_LFCLK_RC</name>
          <initializer>= CLOCK_LFCLKSRC_SRC_RC</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Internal 32 kHz RC oscillator. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__clock__hal_1gga5b00bcdc07defd8187f2be8a2ec7a597a0488e22c4ffb91ea744b59010f9d413c" prot="public">
          <name>NRF_CLOCK_LFCLK_XTAL</name>
          <initializer>= CLOCK_LFCLKSRC_SRC_Xtal</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>External 32 kHz crystal. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__clock__hal_1gga5b00bcdc07defd8187f2be8a2ec7a597a75d19341d350c8c24a9d036ab45e7a9e" prot="public">
          <name>NRF_CLOCK_LFCLK_SYNTH</name>
          <initializer>= CLOCK_LFCLKSRC_SRC_Synth</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Internal 32 kHz synthesized from HFCLK system clock. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__clock__hal_1gga5b00bcdc07defd8187f2be8a2ec7a597a6267606ab850cb0772e20bcd51a2ba31" prot="public">
          <name>NRF_CLOCK_LFCLK_XTAL_LOW_SWING</name>
          <initializer>= (CLOCK_LFCLKSRC_SRC_Xtal |
        (CLOCK_LFCLKSRC_EXTERNAL_Enabled &lt;&lt; CLOCK_LFCLKSRC_EXTERNAL_Pos))</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>External 32 kHz low swing signal. Used only with the LFCLKSRC register. For the others <ref refid="group__nrf__clock__hal_1gga5b00bcdc07defd8187f2be8a2ec7a597a0488e22c4ffb91ea744b59010f9d413c" kindref="member">NRF_CLOCK_LFCLK_XTAL</ref> is returned for this setting. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__clock__hal_1gga5b00bcdc07defd8187f2be8a2ec7a597abe6c2514d4e6aad768354e24674bd1fc" prot="public">
          <name>NRF_CLOCK_LFCLK_XTAL_FULL_SWING</name>
          <initializer>= (CLOCK_LFCLKSRC_SRC_Xtal |
        (CLOCK_LFCLKSRC_BYPASS_Enabled   &lt;&lt; CLOCK_LFCLKSRC_BYPASS_Pos) |
        (CLOCK_LFCLKSRC_EXTERNAL_Enabled &lt;&lt; CLOCK_LFCLKSRC_EXTERNAL_Pos))</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>External 32 kHz full swing signal. Used only with the LFCLKSRC register. For the others <ref refid="group__nrf__clock__hal_1gga5b00bcdc07defd8187f2be8a2ec7a597a0488e22c4ffb91ea744b59010f9d413c" kindref="member">NRF_CLOCK_LFCLK_XTAL</ref> is returned for this setting. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Low-frequency clock sources. </para>
        </briefdescription>
        <detaileddescription>
<para>Used by LFCLKSRC, LFCLKSTAT, and LFCLKSRCCOPY registers. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_clock.h" line="212" column="1" bodyfile="hal/nrf_clock.h" bodystart="213" bodyend="257"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__clock__hal_1gac89aad0e037b7aeefc5264a4dca76197" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_clock_hfclk_t</name>
        <enumvalue id="group__nrf__clock__hal_1ggac89aad0e037b7aeefc5264a4dca76197acd16ac7a514b4ce5fad5229330d3ee91" prot="public">
          <name>NRF_CLOCK_HFCLK_HIGH_ACCURACY</name>
          <initializer>= CLOCK_HFCLKSTAT_SRC_Xtal</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>External 16 MHz/32 MHz crystal oscillator. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__clock__hal_1ggac89aad0e037b7aeefc5264a4dca76197ac818a771af1b52744004d50920fd584d" prot="public">
          <name>NRF_CLOCK_HFCLK_LOW_ACCURACY</name>
          <initializer>= CLOCK_HFCLKSTAT_SRC_RC</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Internal 16 MHz RC oscillator. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>High-frequency clock sources. </para>
        </briefdescription>
        <detaileddescription>
<para>Used by HFCLKSTAT and HFCLK192MSTAT registers. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_clock.h" line="263" column="1" bodyfile="hal/nrf_clock.h" bodystart="264" bodyend="280"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__clock__hal_1ga1739a9f32e7efbf83dc6e773b05211c1" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_clock_domain_t</name>
        <enumvalue id="group__nrf__clock__hal_1gga1739a9f32e7efbf83dc6e773b05211c1ac8ad29a986fbaf470a540f81ced41929" prot="public">
          <name>NRF_CLOCK_DOMAIN_LFCLK</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__clock__hal_1gga1739a9f32e7efbf83dc6e773b05211c1a62d63ec3705f9c2149022810006ab186" prot="public">
          <name>NRF_CLOCK_DOMAIN_HFCLK</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__clock__hal_1gga1739a9f32e7efbf83dc6e773b05211c1aa0153fc9b37622a8dede499da665221c" prot="public">
          <name>NRF_CLOCK_DOMAIN_HFCLK192M</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__clock__hal_1gga1739a9f32e7efbf83dc6e773b05211c1a78beb20a81bc13eaf1bbb480257b2e14" prot="public">
          <name>NRF_CLOCK_DOMAIN_HFCLKAUDIO</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Clock domains. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_clock.h" line="283" column="1" bodyfile="hal/nrf_clock.h" bodystart="284" bodyend="293"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__clock__hal_1ga4ae12749dff0c4975b250728d6de0ad6" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_clock_hfclk_div_t</name>
        <enumvalue id="group__nrf__clock__hal_1gga4ae12749dff0c4975b250728d6de0ad6a0ac2a5d326b764d7d22e521767996ec8" prot="public">
          <name>NRF_CLOCK_HFCLK_DIV_1</name>
          <initializer>= CLOCK_HFCLKCTRL_HCLK_Div1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Divide HFCLK/HFCLK192M by 1 </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__clock__hal_1gga4ae12749dff0c4975b250728d6de0ad6abea8f4e6147da9de0e57590f23e9fd3c" prot="public">
          <name>NRF_CLOCK_HFCLK_DIV_2</name>
          <initializer>= CLOCK_HFCLKCTRL_HCLK_Div2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Divide HFCLK/HFCLK192M by 2 </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__clock__hal_1gga4ae12749dff0c4975b250728d6de0ad6a1334c6bb50f2d41948a016fa5e17eee8" prot="public">
          <name>NRF_CLOCK_HFCLK_DIV_4</name>
          <initializer>= CLOCK_HFCLK192MCTRL_HCLK192M_Div4</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Divide HFCLK192M by 4 </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>High-frequency clock frequency configuration. </para>
        </briefdescription>
        <detaileddescription>
<para>Used by HFCLKCTRL and HFCLK192MCTRL registers. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_clock.h" line="300" column="1" bodyfile="hal/nrf_clock.h" bodystart="301" bodyend="307"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__clock__hal_1ga0147a15524c768cc1f8aa8a1cd323f1e" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_clock_start_task_status_t</name>
        <enumvalue id="group__nrf__clock__hal_1gga0147a15524c768cc1f8aa8a1cd323f1ea45055344396fd799150ad4543601de89" prot="public">
          <name>NRF_CLOCK_START_TASK_NOT_TRIGGERED</name>
          <initializer>=  CLOCK_LFCLK_RUN_STATUS_NotTriggered</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Task LFCLKSTART/HFCLKSTART has not been triggered definiton. Task LFCLKSTART/HFCLKSTART has not been triggered. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__clock__hal_1gga0147a15524c768cc1f8aa8a1cd323f1ea56bd6949215384c687e25ec8382fbe94" prot="public">
          <name>NRF_CLOCK_START_TASK_TRIGGERED</name>
          <initializer>=  CLOCK_LFCLK_RUN_STATUS_Triggered</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Task LFCLKSTART/HFCLKSTART has been triggered. Task LFCLKSTART/HFCLKSTART has been triggered. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Trigger status of task LFCLKSTART/HFCLKSTART. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This enum is deprecated.</para>
</simplesect>
Used by LFCLKRUN and HFCLKRUN registers. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_clock.h" line="317" column="1" bodyfile="hal/nrf_clock.h" bodystart="318" bodyend="321"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__clock__hal_1ga7ab8220532dae7b1dde0f5c329e81041" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_clock_int_mask_t</name>
        <enumvalue id="group__nrf__clock__hal_1gga7ab8220532dae7b1dde0f5c329e81041ab96bb7ba8e2668d6ccf823ef2e45b6d1" prot="public">
          <name>NRF_CLOCK_INT_HF_STARTED_MASK</name>
          <initializer>=  CLOCK_INTEN_XOSTARTED_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>HF clock bit mask in interrupt register. Interrupt on HFCLKSTARTED event. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__clock__hal_1gga7ab8220532dae7b1dde0f5c329e81041a3cb9f64dae43d178a8d9f5a11253502e" prot="public">
          <name>NRF_CLOCK_INT_LF_STARTED_MASK</name>
          <initializer>=  CLOCK_INTENSET_LFCLKSTARTED_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Interrupt on LFCLKSTARTED event mask definition. Interrupt on LFCLKSTARTED event. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__clock__hal_1gga7ab8220532dae7b1dde0f5c329e81041aa67a87bbb43193939daba915fa46ab8e" prot="public">
          <name>NRFX_CLOCK_INT_PLL_STARTED_MASK</name>
          <initializer>= CLOCK_INTENSET_PLLSTARTED_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Interrupt on PLLSTARTED event. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__clock__hal_1gga7ab8220532dae7b1dde0f5c329e81041a40c10edbbcd14de73fb05aa14bf1a17c" prot="public">
          <name>NRF_CLOCK_INT_DONE_MASK</name>
          <initializer>= CLOCK_INTENSET_DONE_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Interrupt on DONE event. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__clock__hal_1gga7ab8220532dae7b1dde0f5c329e81041a0820ea89bcb64904238b43bb758ebfaa" prot="public">
          <name>NRF_CLOCK_INT_CTTO_MASK</name>
          <initializer>= CLOCK_INTENSET_CTTO_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Interrupt on CTTO event. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__clock__hal_1gga7ab8220532dae7b1dde0f5c329e81041a20f1a621f577542de76fefa9a0e4ff46" prot="public">
          <name>NRF_CLOCK_INT_CTSTARTED_MASK</name>
          <initializer>= CLOCK_INTENSET_CTSTARTED_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Interrupt on CTSTARTED event. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__clock__hal_1gga7ab8220532dae7b1dde0f5c329e81041a962143d35daba16a64de96f9bfa92d7a" prot="public">
          <name>NRF_CLOCK_INT_CTSTOPPED_MASK</name>
          <initializer>= CLOCK_INTENSET_CTSTOPPED_Msk


    NRF_CLOCK_INT_HFAUDIO_STARTED_MASK = CLOCK_INTENSET_HFCLKAUDIOSTARTED_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Interrupt on CTSTOPPED event. Interrupt on HFCLKAUDIOSTARTED event. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__clock__hal_1gga7ab8220532dae7b1dde0f5c329e81041a873c3c6987903b97f5f4a4e415bf3fe2" prot="public">
          <name>NRF_CLOCK_INT_HF192M_STARTED_MASK</name>
          <initializer>= CLOCK_INTENSET_HFCLK192MSTARTED_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Interrupt on HFCLK192MSTARTED event. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Interrupts. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_clock.h" line="324" column="1" bodyfile="hal/nrf_clock.h" bodystart="325" bodyend="349"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__clock__hal_1ga6bf1711bc8cb7614c8ae806155bd3f33" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_clock_task_t</name>
        <enumvalue id="group__nrf__clock__hal_1gga6bf1711bc8cb7614c8ae806155bd3f33a05f479c3cb57882e1f4f9caf8bfe9a8a" prot="public">
          <name>NRF_CLOCK_TASK_HFCLKSTART</name>
          <initializer>= offsetof(NRF_CLOCK_Type, TASKS_XOSTART)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Start HFCLK clock source. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__clock__hal_1gga6bf1711bc8cb7614c8ae806155bd3f33a823dc0e6043cc8f47e48f3749bb34de4" prot="public">
          <name>NRF_CLOCK_TASK_HFCLKSTOP</name>
          <initializer>= offsetof(NRF_CLOCK_Type, TASKS_XOSTOP)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Stop HFCLK clock source. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__clock__hal_1gga6bf1711bc8cb7614c8ae806155bd3f33a5e327e366f08c5a70aae84c69fcb9fa9" prot="public">
          <name>NRF_CLOCK_TASK_PLLSTART</name>
          <initializer>= offsetof(NRF_CLOCK_Type, TASKS_PLLSTART)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Start PLL and keep it running, regardless of the automatic clock requests. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__clock__hal_1gga6bf1711bc8cb7614c8ae806155bd3f33a00dbca23a7eb97a5c0c053b82cb2b00b" prot="public">
          <name>NRF_CLOCK_TASK_PLLSTOP</name>
          <initializer>= offsetof(NRF_CLOCK_Type, TASKS_PLLSTOP)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Stop PLL. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__clock__hal_1gga6bf1711bc8cb7614c8ae806155bd3f33a665f140a53313b4eb7613281653cc6af" prot="public">
          <name>NRF_CLOCK_TASK_LFCLKSTART</name>
          <initializer>= offsetof(NRF_CLOCK_Type, TASKS_LFCLKSTART)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Start LFCLK clock source. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__clock__hal_1gga6bf1711bc8cb7614c8ae806155bd3f33a6165f023d815930d80553ac6b86b9f26" prot="public">
          <name>NRF_CLOCK_TASK_LFCLKSTOP</name>
          <initializer>= offsetof(NRF_CLOCK_Type, TASKS_LFCLKSTOP)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Stop LFCLK clock source. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__clock__hal_1gga6bf1711bc8cb7614c8ae806155bd3f33aac43909700fa7e7449fed9007558e3d7" prot="public">
          <name>NRF_CLOCK_TASK_CAL</name>
          <initializer>= offsetof(NRF_CLOCK_Type, TASKS_CAL)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Start calibration of LFCLK RC oscillator. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__clock__hal_1gga6bf1711bc8cb7614c8ae806155bd3f33a8c1b64a0d977cd142123fcb9a86fe5d4" prot="public">
          <name>NRF_CLOCK_TASK_CTSTART</name>
          <initializer>= offsetof(NRF_CLOCK_Type, TASKS_CTSTART)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Start calibration timer. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__clock__hal_1gga6bf1711bc8cb7614c8ae806155bd3f33a16b1a0dcf1ea9da5a7639b4e14e7d892" prot="public">
          <name>NRF_CLOCK_TASK_CTSTOP</name>
          <initializer>= offsetof(NRF_CLOCK_Type, TASKS_CTSTOP)


    NRF_CLOCK_TASK_HFCLKAUDIOSTART = offsetof(NRF_CLOCK_Type, TASKS_HFCLKAUDIOSTART)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Stop calibration timer. Start HFCLKAUDIO clock source. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__clock__hal_1gga6bf1711bc8cb7614c8ae806155bd3f33ad88378a98026d7231754361ecc0d6277" prot="public">
          <name>NRF_CLOCK_TASK_HFCLKAUDIOSTOP</name>
          <initializer>= offsetof(NRF_CLOCK_Type, TASKS_HFCLKAUDIOSTOP)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Stop HFCLKAUDIO clock source. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__clock__hal_1gga6bf1711bc8cb7614c8ae806155bd3f33ae3aa365e4009bed61581e206d5b9e342" prot="public">
          <name>NRF_CLOCK_TASK_HFCLK192MSTART</name>
          <initializer>= offsetof(NRF_CLOCK_Type, TASKS_HFCLK192MSTART)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Start HFCLK192M clock source. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__clock__hal_1gga6bf1711bc8cb7614c8ae806155bd3f33a6178d7f357cfd604622d53c986446d6b" prot="public">
          <name>NRF_CLOCK_TASK_HFCLK192MSTOP</name>
          <initializer>= offsetof(NRF_CLOCK_Type, TASKS_HFCLK192MSTOP)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Stop HFCLK192M clock source. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Tasks. </para>
        </briefdescription>
        <detaileddescription>
<para>The NRF_CLOCK_TASK_LFCLKSTOP task cannot be set when the low-frequency clock is not running. The NRF_CLOCK_TASK_HFCLKSTOP task cannot be set when the high-frequency clock is not running. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_clock.h" line="357" column="1" bodyfile="hal/nrf_clock.h" bodystart="358" bodyend="387"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__clock__hal_1ga8843dd5805c2b01f9b832ed73d583695" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_clock_event_t</name>
        <enumvalue id="group__nrf__clock__hal_1gga8843dd5805c2b01f9b832ed73d583695abc6d081122f7071932c374f83d38d489" prot="public">
          <name>NRF_CLOCK_EVENT_HFCLKSTARTED</name>
          <initializer>= offsetof(NRF_CLOCK_Type, EVENTS_XOSTARTED)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>HFCLK oscillator started. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__clock__hal_1gga8843dd5805c2b01f9b832ed73d583695ac6647ea9d607760a3bebe2c4f7463961" prot="public">
          <name>NRF_CLOCK_EVENT_PLLSTARTED</name>
          <initializer>= offsetof(NRF_CLOCK_Type, EVENTS_PLLSTARTED)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>PLL started. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__clock__hal_1gga8843dd5805c2b01f9b832ed73d583695ad75ad033bf0be9432bd3aa9b0931f07b" prot="public">
          <name>NRF_CLOCK_EVENT_LFCLKSTARTED</name>
          <initializer>= offsetof(NRF_CLOCK_Type, EVENTS_LFCLKSTARTED)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>LFCLK oscillator started. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__clock__hal_1gga8843dd5805c2b01f9b832ed73d583695aa862d96adb9c7579442fb51670237efb" prot="public">
          <name>NRF_CLOCK_EVENT_DONE</name>
          <initializer>= offsetof(NRF_CLOCK_Type, EVENTS_DONE)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Calibration of LFCLK RC oscillator completed. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__clock__hal_1gga8843dd5805c2b01f9b832ed73d583695ab2c012e2ac3e1a52f320040a598c1375" prot="public">
          <name>NRF_CLOCK_EVENT_CTTO</name>
          <initializer>= offsetof(NRF_CLOCK_Type, EVENTS_CTTO)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Calibration timer time-out. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__clock__hal_1gga8843dd5805c2b01f9b832ed73d583695aa1d704aa864c7e38c09c0a9ca0afd493" prot="public">
          <name>NRF_CLOCK_EVENT_CTSTARTED</name>
          <initializer>= offsetof(NRF_CLOCK_Type, EVENTS_CTSTARTED)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Calibration timer started. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__clock__hal_1gga8843dd5805c2b01f9b832ed73d583695a59e0c66caf3e8f6cad63ecfe007494e2" prot="public">
          <name>NRF_CLOCK_EVENT_CTSTOPPED</name>
          <initializer>= offsetof(NRF_CLOCK_Type, EVENTS_CTSTOPPED)


    NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED = offsetof(NRF_CLOCK_Type, EVENTS_HFCLKAUDIOSTARTED)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Calibration timer stopped. HFCLKAUDIO oscillator started. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__clock__hal_1gga8843dd5805c2b01f9b832ed73d583695a81353d1135143c314380e46df15cfba5" prot="public">
          <name>NRF_CLOCK_EVENT_HFCLK192MSTARTED</name>
          <initializer>= offsetof(NRF_CLOCK_Type, EVENTS_HFCLK192MSTARTED)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>HFCLK192M oscillator started. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Events. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_clock.h" line="390" column="1" bodyfile="hal/nrf_clock.h" bodystart="391" bodyend="417"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__nrf__clock__hal_1gae1a1fecb47d6d05b9b938d5c74314f86" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_clock_int_enable</definition>
        <argsstring>(NRF_CLOCK_Type *p_reg, uint32_t mask)</argsstring>
        <name>nrf_clock_int_enable</name>
        <param>
          <type>NRF_CLOCK_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Function for enabling the specified interrupt. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of interrupts to be enabled. Use <ref refid="group__nrf__clock__hal_1ga7ab8220532dae7b1dde0f5c329e81041" kindref="member">nrf_clock_int_mask_t</ref> values for bit masking. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_clock.h" line="846" column="24" bodyfile="hal/nrf_clock.h" bodystart="846" bodyend="849" declfile="hal/nrf_clock.h" declline="426" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__clock__hal_1gadded9b778880ab73d01775cc0ab4ab77" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_clock_int_disable</definition>
        <argsstring>(NRF_CLOCK_Type *p_reg, uint32_t mask)</argsstring>
        <name>nrf_clock_int_disable</name>
        <param>
          <type>NRF_CLOCK_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Function for disabling the specified interrupt. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of interrupts to be disabled. Use <ref refid="group__nrf__clock__hal_1ga7ab8220532dae7b1dde0f5c329e81041" kindref="member">nrf_clock_int_mask_t</ref> values for bit masking. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_clock.h" line="851" column="24" bodyfile="hal/nrf_clock.h" bodystart="851" bodyend="854" declfile="hal/nrf_clock.h" declline="435" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__clock__hal_1ga3cfc1dfe6d92419878efa3d92203d1f3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_clock_int_enable_check</definition>
        <argsstring>(NRF_CLOCK_Type const *p_reg, uint32_t mask)</argsstring>
        <name>nrf_clock_int_enable_check</name>
        <param>
          <type>NRF_CLOCK_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Function for checking if the specified interrupts are enabled. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of interrupts to be checked. Use <ref refid="group__nrf__clock__hal_1ga7ab8220532dae7b1dde0f5c329e81041" kindref="member">nrf_clock_int_mask_t</ref> values for bit masking.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Mask of enabled interrupts. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_clock.h" line="856" column="28" bodyfile="hal/nrf_clock.h" bodystart="856" bodyend="859" declfile="hal/nrf_clock.h" declline="446" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__clock__hal_1gab667ae60ddf82e1e8bd4ffced897af0c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_clock_task_address_get</definition>
        <argsstring>(NRF_CLOCK_Type const *p_reg, nrf_clock_task_t task)</argsstring>
        <name>nrf_clock_task_address_get</name>
        <param>
          <type>NRF_CLOCK_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__clock__hal_1ga6bf1711bc8cb7614c8ae806155bd3f33" kindref="member">nrf_clock_task_t</ref></type>
          <declname>task</declname>
        </param>
        <briefdescription>
<para>Function for retrieving the address of the specified task. </para>
        </briefdescription>
        <detaileddescription>
<para>This function can be used by the PPI module.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">task</parametername>
</parameternamelist>
<parameterdescription>
<para>CLOCK Task.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Address of the requested task register. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_clock.h" line="861" column="28" bodyfile="hal/nrf_clock.h" bodystart="861" bodyend="865" declfile="hal/nrf_clock.h" declline="457" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__clock__hal_1gaf3e684a3ac2f5e050185d2fa654de394" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_clock_task_trigger</definition>
        <argsstring>(NRF_CLOCK_Type *p_reg, nrf_clock_task_t task)</argsstring>
        <name>nrf_clock_task_trigger</name>
        <param>
          <type>NRF_CLOCK_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__clock__hal_1ga6bf1711bc8cb7614c8ae806155bd3f33" kindref="member">nrf_clock_task_t</ref></type>
          <declname>task</declname>
        </param>
        <briefdescription>
<para>Function for setting the specified task. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">task</parametername>
</parameternamelist>
<parameterdescription>
<para>Task to be activated. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_clock.h" line="867" column="24" bodyfile="hal/nrf_clock.h" bodystart="867" bodyend="870" declfile="hal/nrf_clock.h" declline="466" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__clock__hal_1gab6633ed4e3965b482f4bcf82084ced89" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_clock_event_address_get</definition>
        <argsstring>(NRF_CLOCK_Type const *p_reg, nrf_clock_event_t event)</argsstring>
        <name>nrf_clock_event_address_get</name>
        <param>
          <type>NRF_CLOCK_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__clock__hal_1ga8843dd5805c2b01f9b832ed73d583695" kindref="member">nrf_clock_event_t</ref></type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>Function for retrieving the address of the specified event. </para>
        </briefdescription>
        <detaileddescription>
<para>This function can be used by the PPI module.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>CLOCK Event.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Address of the specified event register. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_clock.h" line="872" column="28" bodyfile="hal/nrf_clock.h" bodystart="872" bodyend="876" declfile="hal/nrf_clock.h" declline="477" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__clock__hal_1ga1f7973a6180d8bf7ab6e93b9f6d3ff7c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_clock_event_clear</definition>
        <argsstring>(NRF_CLOCK_Type *p_reg, nrf_clock_event_t event)</argsstring>
        <name>nrf_clock_event_clear</name>
        <param>
          <type>NRF_CLOCK_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__clock__hal_1ga8843dd5805c2b01f9b832ed73d583695" kindref="member">nrf_clock_event_t</ref></type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>Function for clearing the specified event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event to clear. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_clock.h" line="878" column="24" bodyfile="hal/nrf_clock.h" bodystart="878" bodyend="882" declfile="hal/nrf_clock.h" declline="486" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__clock__hal_1ga8ecb4611627133df496528e764455198" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE bool</type>
        <definition>NRF_STATIC_INLINE bool nrf_clock_event_check</definition>
        <argsstring>(NRF_CLOCK_Type const *p_reg, nrf_clock_event_t event)</argsstring>
        <name>nrf_clock_event_check</name>
        <param>
          <type>NRF_CLOCK_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__clock__hal_1ga8843dd5805c2b01f9b832ed73d583695" kindref="member">nrf_clock_event_t</ref></type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>Function for retrieving the state of the specified event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event to be checked.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>The event has been generated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>The event has not been generated. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_clock.h" line="884" column="24" bodyfile="hal/nrf_clock.h" bodystart="884" bodyend="887" declfile="hal/nrf_clock.h" declline="497" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__clock__hal_1gabed84813929d82ba6c6c647c3d6bf158" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE bool</type>
        <definition>NRF_STATIC_INLINE bool nrf_clock_start_task_check</definition>
        <argsstring>(NRF_CLOCK_Type const *p_reg, nrf_clock_domain_t domain)</argsstring>
        <name>nrf_clock_start_task_check</name>
        <param>
          <type>NRF_CLOCK_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__clock__hal_1ga1739a9f32e7efbf83dc6e773b05211c1" kindref="member">nrf_clock_domain_t</ref></type>
          <declname>domain</declname>
        </param>
        <briefdescription>
<para>Function for retrieving the trigger status of the task START for given domain. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">domain</parametername>
</parameternamelist>
<parameterdescription>
<para>Clock domain.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>The task START for the given domain has not been triggered. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>The task START for the given domain has been triggered. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
<para>&lt; LF clock RUN register definition.</para>
<para>&lt; LF clock RUN status mask definition.</para>
<para>&lt; LF clock RUN status position definition.</para>
<para>&lt; HF clock RUN register definition.</para>
<para>&lt; HF clock RUN status mask definition.</para>
<para>&lt; HF clock RUN status position definition.</para>
        </inbodydescription>
        <location file="hal/nrf_clock.h" line="889" column="24" bodyfile="hal/nrf_clock.h" bodystart="889" bodyend="914" declfile="hal/nrf_clock.h" declline="508" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__clock__hal_1gacdce7b3bd39e2466a100f16b41ac72d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE bool</type>
        <definition>NRF_STATIC_INLINE bool nrf_clock_is_running</definition>
        <argsstring>(NRF_CLOCK_Type const *p_reg, nrf_clock_domain_t domain, void *p_clk_src)</argsstring>
        <name>nrf_clock_is_running</name>
        <param>
          <type>NRF_CLOCK_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__clock__hal_1ga1739a9f32e7efbf83dc6e773b05211c1" kindref="member">nrf_clock_domain_t</ref></type>
          <declname>domain</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>p_clk_src</declname>
        </param>
        <briefdescription>
<para>Function for retrieving the state of the clock. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">domain</parametername>
</parameternamelist>
<parameterdescription>
<para>Clock domain. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">p_clk_src</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to clock source that is running. Set to NULL if not needed. Ignored for HFCLKAUDIO domain. Variable pointed by <computeroutput>p_clk_src</computeroutput> must be of either <ref refid="group__nrf__clock__hal_1ga5b00bcdc07defd8187f2be8a2ec7a597" kindref="member">nrf_clock_lfclk_t</ref> type for LFCLK or <ref refid="group__nrf__clock__hal_1gac89aad0e037b7aeefc5264a4dca76197" kindref="member">nrf_clock_hfclk_t</ref> type for HFCLK and HFCLK192M.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>The clock is not running. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>The clock is running. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
<para>&lt; LF clock STAT register definition.</para>
<para>&lt; LF clock STAT state mask definition.</para>
<para>&lt; LF clock STAT register definition.</para>
<para>&lt; LF clock STAT source mask definition.</para>
<para>&lt; LF clock STAT source position definition.</para>
<para>&lt; HF clock STAT register definition.</para>
<para>&lt; HF clock STAT state mask definition.</para>
        </inbodydescription>
        <location file="hal/nrf_clock.h" line="927" column="24" bodyfile="hal/nrf_clock.h" bodystart="927" bodyend="980" declfile="hal/nrf_clock.h" declline="524" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__clock__hal_1ga24c29888cb9c057a3f01457bf3ceb246" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_clock_lf_src_set</definition>
        <argsstring>(NRF_CLOCK_Type *p_reg, nrf_clock_lfclk_t source)</argsstring>
        <name>nrf_clock_lf_src_set</name>
        <param>
          <type>NRF_CLOCK_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__clock__hal_1ga5b00bcdc07defd8187f2be8a2ec7a597" kindref="member">nrf_clock_lfclk_t</ref></type>
          <declname>source</declname>
        </param>
        <briefdescription>
<para>Function for changing the low-frequency clock source. </para>
        </briefdescription>
        <detaileddescription>
<para>Check in Product Specification if this function can be called when the low-frequency clock is running.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">source</parametername>
</parameternamelist>
<parameterdescription>
<para>New low-frequency clock source. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
<para>&lt; LF clock SRC register definition.</para>
        </inbodydescription>
        <location file="hal/nrf_clock.h" line="986" column="24" bodyfile="hal/nrf_clock.h" bodystart="986" bodyend="989" declfile="hal/nrf_clock.h" declline="536" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__clock__hal_1ga91f9e95a8a8717d0d76cd12c70cdd1c9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE <ref refid="group__nrf__clock__hal_1ga5b00bcdc07defd8187f2be8a2ec7a597" kindref="member">nrf_clock_lfclk_t</ref></type>
        <definition>NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_src_get</definition>
        <argsstring>(NRF_CLOCK_Type const *p_reg)</argsstring>
        <name>nrf_clock_lf_src_get</name>
        <param>
          <type>NRF_CLOCK_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for retrieving the selected source for the low-frequency clock. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>NRF_CLOCK_LFCLK_RC</parametername>
</parameternamelist>
<parameterdescription>
<para>The internal 32 kHz RC oscillator is the selected source for the low-frequency clock. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NRF_CLOCK_LFCLK_Xtal</parametername>
</parameternamelist>
<parameterdescription>
<para>An external 32 kHz crystal oscillator is the selected source for the low-frequency clock. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NRF_CLOCK_LFCLK_Synth</parametername>
</parameternamelist>
<parameterdescription>
<para>The internal 32 kHz synthesized from the HFCLK is the selected source for the low-frequency clock. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
<para>&lt; LF clock SRC register definition.</para>
        </inbodydescription>
        <location file="hal/nrf_clock.h" line="991" column="37" bodyfile="hal/nrf_clock.h" bodystart="991" bodyend="994" declfile="hal/nrf_clock.h" declline="550" declcolumn="37"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__clock__hal_1ga738da128e4aefd63a596c86395a3abb4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE <ref refid="group__nrf__clock__hal_1ga5b00bcdc07defd8187f2be8a2ec7a597" kindref="member">nrf_clock_lfclk_t</ref></type>
        <definition>NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_actv_src_get</definition>
        <argsstring>(NRF_CLOCK_Type const *p_reg)</argsstring>
        <name>nrf_clock_lf_actv_src_get</name>
        <param>
          <type>NRF_CLOCK_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for retrieving the active source of the low-frequency clock. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This function is deprecated. Use <ref refid="group__nrf__clock__hal_1gacdce7b3bd39e2466a100f16b41ac72d1" kindref="member">nrf_clock_is_running</ref> instead.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>NRF_CLOCK_LFCLK_RC</parametername>
</parameternamelist>
<parameterdescription>
<para>The internal 32 kHz RC oscillator is the active source of the low-frequency clock. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NRF_CLOCK_LFCLK_Xtal</parametername>
</parameternamelist>
<parameterdescription>
<para>An external 32 kHz crystal oscillator is the active source of the low-frequency clock. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NRF_CLOCK_LFCLK_Synth</parametername>
</parameternamelist>
<parameterdescription>
<para>The internal 32 kHz synthesized from the HFCLK is the active source of the low-frequency clock. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_clock.h" line="996" column="37" bodyfile="hal/nrf_clock.h" bodystart="996" bodyend="1001" declfile="hal/nrf_clock.h" declline="566" declcolumn="37"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__clock__hal_1gad69ff6c345172118cc4afb226048af3a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE <ref refid="group__nrf__clock__hal_1ga5b00bcdc07defd8187f2be8a2ec7a597" kindref="member">nrf_clock_lfclk_t</ref></type>
        <definition>NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get</definition>
        <argsstring>(NRF_CLOCK_Type const *p_reg)</argsstring>
        <name>nrf_clock_lf_srccopy_get</name>
        <param>
          <type>NRF_CLOCK_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for retrieving the clock source for the LFCLK clock when the task LKCLKSTART is triggered. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>NRF_CLOCK_LFCLK_RC</parametername>
</parameternamelist>
<parameterdescription>
<para>The internal 32 kHz RC oscillator is running and generating the LFCLK clock. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NRF_CLOCK_LFCLK_Xtal</parametername>
</parameternamelist>
<parameterdescription>
<para>An external 32 kHz crystal oscillator is running and generating the LFCLK clock. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NRF_CLOCK_LFCLK_Synth</parametername>
</parameternamelist>
<parameterdescription>
<para>The internal 32 kHz synthesized from the HFCLK is running and generating the LFCLK clock. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
<para>&lt; LF clock SRCCOPY register definition.</para>
<para>&lt; LF clock SRCCOPY status mask definition.</para>
<para>&lt; LF clock SRCCOPY status position definition.</para>
        </inbodydescription>
        <location file="hal/nrf_clock.h" line="1003" column="37" bodyfile="hal/nrf_clock.h" bodystart="1003" bodyend="1007" declfile="hal/nrf_clock.h" declline="581" declcolumn="37"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__clock__hal_1gab68648e381ee3e2f5a1c77b051ae19c0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE bool</type>
        <definition>NRF_STATIC_INLINE bool nrf_clock_lf_is_running</definition>
        <argsstring>(NRF_CLOCK_Type const *p_reg)</argsstring>
        <name>nrf_clock_lf_is_running</name>
        <param>
          <type>NRF_CLOCK_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for retrieving the state of the LFCLK clock. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This function is deprecated. Use <ref refid="group__nrf__clock__hal_1gacdce7b3bd39e2466a100f16b41ac72d1" kindref="member">nrf_clock_is_running</ref> instead.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>The LFCLK clock is not running. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>The LFCLK clock is running. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_clock.h" line="1009" column="24" bodyfile="hal/nrf_clock.h" bodystart="1009" bodyend="1012" declfile="hal/nrf_clock.h" declline="593" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__clock__hal_1ga5e3fc67f9a0e1e612d748a1a9b7b4184" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE <ref refid="group__nrf__clock__hal_1ga0147a15524c768cc1f8aa8a1cd323f1e" kindref="member">nrf_clock_start_task_status_t</ref></type>
        <definition>NRF_STATIC_INLINE nrf_clock_start_task_status_t nrf_clock_lf_start_task_status_get</definition>
        <argsstring>(NRF_CLOCK_Type const *p_reg)</argsstring>
        <name>nrf_clock_lf_start_task_status_get</name>
        <param>
          <type>NRF_CLOCK_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for retrieving the trigger status of the task LFCLKSTART. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This function is deprecated. Use <ref refid="group__nrf__clock__hal_1gabed84813929d82ba6c6c647c3d6bf158" kindref="member">nrf_clock_start_task_check</ref> instead.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>NRF_CLOCK_START_TASK_NOT_TRIGGERED</parametername>
</parameternamelist>
<parameterdescription>
<para>The task LFCLKSTART has not been triggered. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NRF_CLOCK_START_TASK_TRIGGERED</parametername>
</parameternamelist>
<parameterdescription>
<para>The task LFCLKSTART has been triggered. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_clock.h" line="1015" column="31" bodyfile="hal/nrf_clock.h" bodystart="1015" bodyend="1019" declfile="hal/nrf_clock.h" declline="606" declcolumn="31"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__clock__hal_1gab7cab3a3c552786d73ff99c011ddc312" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_clock_hf_src_set</definition>
        <argsstring>(NRF_CLOCK_Type *p_reg, nrf_clock_hfclk_t source)</argsstring>
        <name>nrf_clock_hf_src_set</name>
        <param>
          <type>NRF_CLOCK_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__clock__hal_1gac89aad0e037b7aeefc5264a4dca76197" kindref="member">nrf_clock_hfclk_t</ref></type>
          <declname>source</declname>
        </param>
        <briefdescription>
<para>Function for changing the high-frequency clock source. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">source</parametername>
</parameternamelist>
<parameterdescription>
<para>New high-frequency clock source. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_clock.h" line="1022" column="24" bodyfile="hal/nrf_clock.h" bodystart="1022" bodyend="1025" declfile="hal/nrf_clock.h" declline="615" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__clock__hal_1ga34024ba919471d72f9237c447175faca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE <ref refid="group__nrf__clock__hal_1gac89aad0e037b7aeefc5264a4dca76197" kindref="member">nrf_clock_hfclk_t</ref></type>
        <definition>NRF_STATIC_INLINE nrf_clock_hfclk_t nrf_clock_hf_src_get</definition>
        <argsstring>(NRF_CLOCK_Type const *p_reg)</argsstring>
        <name>nrf_clock_hf_src_get</name>
        <param>
          <type>NRF_CLOCK_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for retrieving the selected source of the high-frequency clock. </para>
        </briefdescription>
        <detaileddescription>
<para>For SoCs not featuring the HFCLKSRC register, this is always also the active source of the high-frequency clock.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>NRF_CLOCK_HFCLK_LOW_ACCURACY</parametername>
</parameternamelist>
<parameterdescription>
<para>The internal RC oscillator is the selected source of the high-frequency clock. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NRF_CLOCK_HFCLK_HIGH_ACCURACY</parametername>
</parameternamelist>
<parameterdescription>
<para>An external crystal oscillator is the selected source of the high-frequency clock. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_clock.h" line="1028" column="37" bodyfile="hal/nrf_clock.h" bodystart="1028" bodyend="1041" declfile="hal/nrf_clock.h" declline="631" declcolumn="37"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__clock__hal_1ga70445979a0eda29dcb76b4be0ef8e03b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE bool</type>
        <definition>NRF_STATIC_INLINE bool nrf_clock_hf_is_running</definition>
        <argsstring>(NRF_CLOCK_Type const *p_reg, nrf_clock_hfclk_t clk_src)</argsstring>
        <name>nrf_clock_hf_is_running</name>
        <param>
          <type>NRF_CLOCK_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__clock__hal_1gac89aad0e037b7aeefc5264a4dca76197" kindref="member">nrf_clock_hfclk_t</ref></type>
          <declname>clk_src</declname>
        </param>
        <briefdescription>
<para>Function for retrieving the state of the HFCLK clock. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This function is deprecated. Use <ref refid="group__nrf__clock__hal_1gacdce7b3bd39e2466a100f16b41ac72d1" kindref="member">nrf_clock_is_running</ref> instead.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">clk_src</parametername>
</parameternamelist>
<parameterdescription>
<para>Clock source to be checked.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>The HFCLK clock is not running. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>The HFCLK clock is running. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_clock.h" line="1043" column="24" bodyfile="hal/nrf_clock.h" bodystart="1043" bodyend="1049" declfile="hal/nrf_clock.h" declline="644" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__clock__hal_1ga32910f934744e72a7544b53be569dfd6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE <ref refid="group__nrf__clock__hal_1ga0147a15524c768cc1f8aa8a1cd323f1e" kindref="member">nrf_clock_start_task_status_t</ref></type>
        <definition>NRF_STATIC_INLINE nrf_clock_start_task_status_t nrf_clock_hf_start_task_status_get</definition>
        <argsstring>(NRF_CLOCK_Type const *p_reg)</argsstring>
        <name>nrf_clock_hf_start_task_status_get</name>
        <param>
          <type>NRF_CLOCK_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for retrieving the trigger status of the task HFCLKSTART. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This function is deprecated. Use <ref refid="group__nrf__clock__hal_1gabed84813929d82ba6c6c647c3d6bf158" kindref="member">nrf_clock_start_task_check</ref> instead.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>NRF_CLOCK_START_TASK_NOT_TRIGGERED</parametername>
</parameternamelist>
<parameterdescription>
<para>The task HFCLKSTART has not been triggered. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NRF_CLOCK_START_TASK_TRIGGERED</parametername>
</parameternamelist>
<parameterdescription>
<para>The task HFCLKSTART has been triggered. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_clock.h" line="1052" column="31" bodyfile="hal/nrf_clock.h" bodystart="1052" bodyend="1056" declfile="hal/nrf_clock.h" declline="658" declcolumn="31"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__clock__hal_1gaf44598c429dfbfcc55d482e11bdf1d4b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_clock_hfclkaudio_config_set</definition>
        <argsstring>(NRF_CLOCK_Type *p_reg, uint16_t freq_value)</argsstring>
        <name>nrf_clock_hfclkaudio_config_set</name>
        <param>
          <type>NRF_CLOCK_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>freq_value</declname>
        </param>
        <briefdescription>
<para>Function for changing the Audio clock FREQ_VALUE. </para>
        </briefdescription>
        <detaileddescription>
<para>The frequency of HFCLKAUDIO ranges from 10.666 MHz to 13.333 MHz in 40.7 Hz steps. To calculate <computeroutput>freq_value</computeroutput> corresponding to the chosen frequency, use the following equation: FREQ_VALUE = 2^16 * ((12 * f_out / 32M) - 4)</para>
<para><simplesect kind="warning"><para>Chosen frequency must fit in 11.176 MHz - 11.402 MHz or 12.165 MHz - 12.411 MHz frequency bands.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">freq_value</parametername>
</parameternamelist>
<parameterdescription>
<para>New FREQ_VALUE </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_clock.h" line="1060" column="6" bodyfile="hal/nrf_clock.h" bodystart="1060" bodyend="1063" declfile="hal/nrf_clock.h" declline="674" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__clock__hal_1gaba822bac96cbd67e5f9f255af89a1f5e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint16_t</type>
        <definition>NRF_STATIC_INLINE uint16_t nrf_clock_hfclkaudio_config_get</definition>
        <argsstring>(NRF_CLOCK_Type const *p_reg)</argsstring>
        <name>nrf_clock_hfclkaudio_config_get</name>
        <param>
          <type>NRF_CLOCK_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for retrieving the Audio clock FREQ_VALUE. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
The frequency of HFCLKAUDIO ranges from 10.666 MHz to 13.333 MHz in 40.7 Hz steps. To calculate frequency corresponding to the returned FREQ_VALUE, use the following equation: f_out = 32M * (4 + FREQ_VALUE * 2^(-16))/12</para>
<para><simplesect kind="return"><para>FREQ_VALUE of the Audio clock. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_clock.h" line="1066" column="10" bodyfile="hal/nrf_clock.h" bodystart="1066" bodyend="1069" declfile="hal/nrf_clock.h" declline="688" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__clock__hal_1ga31257b566ba4812c296bbc4fa63f7886" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_clock_cal_timer_timeout_set</definition>
        <argsstring>(NRF_CLOCK_Type *p_reg, uint32_t interval)</argsstring>
        <name>nrf_clock_cal_timer_timeout_set</name>
        <param>
          <type>NRF_CLOCK_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>interval</declname>
        </param>
        <briefdescription>
<para>Function for changing the calibration timer interval. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">interval</parametername>
</parameternamelist>
<parameterdescription>
<para>New calibration timer interval in 0.25 s resolution (range: 0.25 seconds to 31.75 seconds). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_clock.h" line="1113" column="24" bodyfile="hal/nrf_clock.h" bodystart="1113" bodyend="1116" declfile="hal/nrf_clock.h" declline="699" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__clock__hal_1ga9307f09045353d04c29bf8ca29cc0c28" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_clock_hfclk192m_div_set</definition>
        <argsstring>(NRF_CLOCK_Type *p_reg, nrf_clock_hfclk_div_t divider)</argsstring>
        <name>nrf_clock_hfclk192m_div_set</name>
        <param>
          <type>NRF_CLOCK_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__clock__hal_1ga4ae12749dff0c4975b250728d6de0ad6" kindref="member">nrf_clock_hfclk_div_t</ref></type>
          <declname>divider</declname>
        </param>
        <briefdescription>
<para>Function for changing the HFCLK192M frequency divider. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">divider</parametername>
</parameternamelist>
<parameterdescription>
<para>New HFCLK192M divider. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_clock.h" line="1089" column="6" bodyfile="hal/nrf_clock.h" bodystart="1089" bodyend="1093" declfile="hal/nrf_clock.h" declline="729" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__clock__hal_1ga53f5fd112e0c314b3b2fd677ad029246" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE <ref refid="group__nrf__clock__hal_1ga4ae12749dff0c4975b250728d6de0ad6" kindref="member">nrf_clock_hfclk_div_t</ref></type>
        <definition>NRF_STATIC_INLINE nrf_clock_hfclk_div_t nrf_clock_hfclk192m_div_get</definition>
        <argsstring>(NRF_CLOCK_Type const *p_reg)</argsstring>
        <name>nrf_clock_hfclk192m_div_get</name>
        <param>
          <type>NRF_CLOCK_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for retrieving the HFCLK192M frequency divider. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>HFCLK192M frequency divider. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_clock.h" line="1095" column="41" bodyfile="hal/nrf_clock.h" bodystart="1095" bodyend="1099" declfile="hal/nrf_clock.h" declline="739" declcolumn="41"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__clock__hal_1ga84665d1956d9324a08402a91225fc15c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_clock_hfclk192m_src_set</definition>
        <argsstring>(NRF_CLOCK_Type *p_reg, nrf_clock_hfclk_t source)</argsstring>
        <name>nrf_clock_hfclk192m_src_set</name>
        <param>
          <type>NRF_CLOCK_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__clock__hal_1gac89aad0e037b7aeefc5264a4dca76197" kindref="member">nrf_clock_hfclk_t</ref></type>
          <declname>source</declname>
        </param>
        <briefdescription>
<para>Function for changing the HFCLK192M source. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">source</parametername>
</parameternamelist>
<parameterdescription>
<para>New HFCLK192M source. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_clock.h" line="1101" column="24" bodyfile="hal/nrf_clock.h" bodystart="1101" bodyend="1104" declfile="hal/nrf_clock.h" declline="747" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__clock__hal_1ga4709388f27018bc447eb944ec7f15f2c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE <ref refid="group__nrf__clock__hal_1gac89aad0e037b7aeefc5264a4dca76197" kindref="member">nrf_clock_hfclk_t</ref></type>
        <definition>NRF_STATIC_INLINE nrf_clock_hfclk_t nrf_clock_hfclk192m_src_get</definition>
        <argsstring>(NRF_CLOCK_Type const *p_reg)</argsstring>
        <name>nrf_clock_hfclk192m_src_get</name>
        <param>
          <type>NRF_CLOCK_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for retrieving the selected source of the HFCLK192M. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>NRF_CLOCK_HFCLK_LOW_ACCURACY</parametername>
</parameternamelist>
<parameterdescription>
<para>The internal RC oscillator is the selected source of the HFCLK192M. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NRF_CLOCK_HFCLK_HIGH_ACCURACY</parametername>
</parameternamelist>
<parameterdescription>
<para>An external crystal oscillator is the selected source of the HFCLK192M. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_clock.h" line="1106" column="37" bodyfile="hal/nrf_clock.h" bodystart="1106" bodyend="1109" declfile="hal/nrf_clock.h" declline="760" declcolumn="37"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__clock__hal_1ga842e2ffb161363df7d4769ab67a317ba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_clock_alwaysrun_set</definition>
        <argsstring>(NRF_CLOCK_Type *p_reg, nrf_clock_domain_t domain, bool alwaysrun)</argsstring>
        <name>nrf_clock_alwaysrun_set</name>
        <param>
          <type>NRF_CLOCK_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__clock__hal_1ga1739a9f32e7efbf83dc6e773b05211c1" kindref="member">nrf_clock_domain_t</ref></type>
          <declname>domain</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>alwaysrun</declname>
        </param>
        <briefdescription>
<para>Function for setting the clock domain to always run. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">domain</parametername>
</parameternamelist>
<parameterdescription>
<para>Clock domain. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">alwaysrun</parametername>
</parameternamelist>
<parameterdescription>
<para>Ensure the clock is always running. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
<para>&lt; LF clock ALWAYSRUN register definition.</para>
<para>&lt; LF clock ALWAYSRUN mask definition.</para>
<para>&lt; LF clock ALWAYSRUN position definition.</para>
        </inbodydescription>
        <location file="hal/nrf_clock.h" line="1121" column="24" bodyfile="hal/nrf_clock.h" bodystart="1121" bodyend="1159" declfile="hal/nrf_clock.h" declline="772" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__clock__hal_1ga930ec730c515f7443c2eac61fe829cb1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE bool</type>
        <definition>NRF_STATIC_INLINE bool nrf_clock_alwaysrun_get</definition>
        <argsstring>(NRF_CLOCK_Type const *p_reg, nrf_clock_domain_t domain)</argsstring>
        <name>nrf_clock_alwaysrun_get</name>
        <param>
          <type>NRF_CLOCK_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__clock__hal_1ga1739a9f32e7efbf83dc6e773b05211c1" kindref="member">nrf_clock_domain_t</ref></type>
          <declname>domain</declname>
        </param>
        <briefdescription>
<para>Function for checking if the clock domain is configured to always run. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">domain</parametername>
</parameternamelist>
<parameterdescription>
<para>Clock domain.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>The clock domain is configured to always run. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>The clock domain is not configured to always run. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
<para>&lt; LF clock ALWAYSRUN register definition.</para>
<para>&lt; LF clock ALWAYSRUN position definition.</para>
<para>&lt; LF clock ALWAYSRUN mask definition.</para>
        </inbodydescription>
        <location file="hal/nrf_clock.h" line="1161" column="24" bodyfile="hal/nrf_clock.h" bodystart="1161" bodyend="1190" declfile="hal/nrf_clock.h" declline="784" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__clock__hal_1gad64c2d8e17a381a70ff1c867a3763da2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE bool</type>
        <definition>NRF_STATIC_INLINE bool nrf_clock_alwaysrun_active_get</definition>
        <argsstring>(NRF_CLOCK_Type const *p_reg, nrf_clock_domain_t domain)</argsstring>
        <name>nrf_clock_alwaysrun_active_get</name>
        <param>
          <type>NRF_CLOCK_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__clock__hal_1ga1739a9f32e7efbf83dc6e773b05211c1" kindref="member">nrf_clock_domain_t</ref></type>
          <declname>domain</declname>
        </param>
        <briefdescription>
<para>Function for checking if the clock domain always run setting is active. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">domain</parametername>
</parameternamelist>
<parameterdescription>
<para>Clock domain.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>The clock domain always run setting is active. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>The clock domain always run setting is not active. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
<para>&lt; LF clock STAT register definition.</para>
<para>&lt; LF clock STAT alwaysrunning position definition.</para>
<para>&lt; LF clock STAT alwaysrunning mask definition.</para>
        </inbodydescription>
        <location file="hal/nrf_clock.h" line="1192" column="24" bodyfile="hal/nrf_clock.h" bodystart="1192" bodyend="1221" declfile="hal/nrf_clock.h" declline="795" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__clock__hal_1gad555b0e6d610054730a7beac749ba5c0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_clock_subscribe_set</definition>
        <argsstring>(NRF_CLOCK_Type *p_reg, nrf_clock_task_t task, uint8_t channel)</argsstring>
        <name>nrf_clock_subscribe_set</name>
        <param>
          <type>NRF_CLOCK_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__clock__hal_1ga6bf1711bc8cb7614c8ae806155bd3f33" kindref="member">nrf_clock_task_t</ref></type>
          <declname>task</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>channel</declname>
        </param>
        <briefdescription>
<para>Function for setting the subscribe configuration for a given CLOCK task. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">task</parametername>
</parameternamelist>
<parameterdescription>
<para>Task for which to set the configuration. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">channel</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel through which to subscribe events. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_clock.h" line="809" column="24" declfile="hal/nrf_clock.h" declline="809" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__clock__hal_1gaed03227123a60ea7c8bc4ed832adf6f3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_clock_subscribe_clear</definition>
        <argsstring>(NRF_CLOCK_Type *p_reg, nrf_clock_task_t task)</argsstring>
        <name>nrf_clock_subscribe_clear</name>
        <param>
          <type>NRF_CLOCK_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__clock__hal_1ga6bf1711bc8cb7614c8ae806155bd3f33" kindref="member">nrf_clock_task_t</ref></type>
          <declname>task</declname>
        </param>
        <briefdescription>
<para>Function for clearing the subscribe configuration for a given CLOCK task. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">task</parametername>
</parameternamelist>
<parameterdescription>
<para>Task for which to clear the configuration. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_clock.h" line="820" column="24" declfile="hal/nrf_clock.h" declline="820" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__clock__hal_1gad0b543bcc840e79ffd5a93035f938910" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_clock_publish_set</definition>
        <argsstring>(NRF_CLOCK_Type *p_reg, nrf_clock_event_t event, uint8_t channel)</argsstring>
        <name>nrf_clock_publish_set</name>
        <param>
          <type>NRF_CLOCK_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__clock__hal_1ga8843dd5805c2b01f9b832ed73d583695" kindref="member">nrf_clock_event_t</ref></type>
          <declname>event</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>channel</declname>
        </param>
        <briefdescription>
<para>Function for setting the publish configuration for a given CLOCK event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event for which to set the configuration. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">channel</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel through which to publish the event. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_clock.h" line="830" column="24" declfile="hal/nrf_clock.h" declline="830" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__clock__hal_1ga136d09d2b0eafa0118c76cb977c6f743" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_clock_publish_clear</definition>
        <argsstring>(NRF_CLOCK_Type *p_reg, nrf_clock_event_t event)</argsstring>
        <name>nrf_clock_publish_clear</name>
        <param>
          <type>NRF_CLOCK_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__clock__hal_1ga8843dd5805c2b01f9b832ed73d583695" kindref="member">nrf_clock_event_t</ref></type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>Function for clearing the publish configuration for a given CLOCK event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event for which to clear the configuration. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_clock.h" line="841" column="24" declfile="hal/nrf_clock.h" declline="841" declcolumn="24"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__nrf__clock__hal_1gaeb804e837f460de8222cbe0c4ef0b8a5" prot="public" static="no">
        <name>NRF_CLOCK_HAS_CALIBRATION</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Symbol indicating whether the Low Frequency Clock calibration is present. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_clock.h" line="61" column="9" bodyfile="hal/nrf_clock.h" bodystart="61" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__clock__hal_1ga605ad993f6106e4709673be04e48ecd4" prot="public" static="no">
        <name>NRF_CLOCK_HAS_CALIBRATION_TIMER</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Symbol indicating whether the Low Frequency Clock calibration timer is present. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_clock.h" line="68" column="9" bodyfile="hal/nrf_clock.h" bodystart="68" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__clock__hal_1ga5809cfc28a294963e9e34297893f06c6" prot="public" static="no">
        <name>NRF_CLOCK_HAS_HFCLK192M</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Symbol indicating whether the 192 MHz clock is present. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_clock.h" line="76" column="9" bodyfile="hal/nrf_clock.h" bodystart="76" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__clock__hal_1ga5bc5faa0e579ec12f6c19ace10a17244" prot="public" static="no">
        <name>NRF_CLOCK_HAS_HFCLKAUDIO</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Symbol indicating whether the Audio clock is present. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_clock.h" line="84" column="9" bodyfile="hal/nrf_clock.h" bodystart="84" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__clock__hal_1gad87b23ad582f9c922e90ad8fcc58ec3d" prot="public" static="no">
        <name>NRF_CLOCK_HAS_HFCLK_DIV</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Symbol indicating whether the HFCLK frequency configuration is present. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_clock.h" line="92" column="9" bodyfile="hal/nrf_clock.h" bodystart="92" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__clock__hal_1ga539951935aeb02b293fc7405a77215c5" prot="public" static="no">
        <name>NRF_CLOCK_HAS_LFCLK_ALWAYSRUN</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Symbol indicating whether the ALWAYSRUN register is present for LFCLK. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_clock.h" line="100" column="9" bodyfile="hal/nrf_clock.h" bodystart="100" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__clock__hal_1ga27e62399ab97479fdca9e10320ec5252" prot="public" static="no">
        <name>NRF_CLOCK_HAS_HFCLK_ALWAYSRUN</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Symbol indicating whether the ALWAYSRUN register is present for HFCLK. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_clock.h" line="107" column="9" bodyfile="hal/nrf_clock.h" bodystart="107" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__clock__hal_1ga63128bfbe9597a96928b36bc035a228b" prot="public" static="no">
        <name>NRF_CLOCK_HAS_HFCLKSRC</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Symbol indicating whether the HFCLKSRC register is present. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_clock.h" line="114" column="9" bodyfile="hal/nrf_clock.h" bodystart="114" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__clock__hal_1ga8b1ee1b842ec655dad2a8a0b111a0cc7" prot="public" static="no">
        <name>NRF_CLOCK_HAS_PLL</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Symbol indicating whether the PLL section is present. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_clock.h" line="121" column="9" bodyfile="hal/nrf_clock.h" bodystart="121" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__clock__hal_1ga7923fa404e46e7e1abbf125ad39d3616" prot="public" static="no">
        <name>NRF_CLOCK_HAS_XO</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Symbol indicating whether XO registers are present. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_clock.h" line="128" column="9" bodyfile="hal/nrf_clock.h" bodystart="128" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__clock__hal_1gac1b7c513cc586139180ef595b7b20ecb" prot="public" static="no">
        <name>NRF_CLOCK_HAS_LFCLK_TYPE</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Symbol indicating whether the CLOCK type contains LFCLK subtype. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_clock.h" line="135" column="9" bodyfile="hal/nrf_clock.h" bodystart="135" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__clock__hal_1ga25f77a2fd0ef192c443d7b88cd007d84" prot="public" static="no">
        <name>NRF_CLOCK_LFCLKRUN_STATUS_NotTriggered</name>
        <initializer>CLOCK_LFCLK_RUN_STATUS_NotTriggered</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Task LFCLKSTART/HFCLKSTART has not been triggered definiton. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_clock.h" line="141" column="9" bodyfile="hal/nrf_clock.h" bodystart="141" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__clock__hal_1ga195c4bbb56c69035f161f93144957b65" prot="public" static="no">
        <name>NRF_CLOCK_LFCLKRUN_STATUS_Triggered</name>
        <initializer>CLOCK_LFCLK_RUN_STATUS_Triggered</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Task LFCLKSTART/HFCLKSTART has been triggered. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_clock.h" line="142" column="9" bodyfile="hal/nrf_clock.h" bodystart="142" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__clock__hal_1ga54b345f822889c4b0c04c046f7bba26e" prot="public" static="no">
        <name>NRF_CLOCK_INTENSET_LFCLKSTARTED_Msk</name>
        <initializer>CLOCK_INTENSET_LFCLKSTARTED_Msk</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Interrupt on LFCLKSTARTED event mask definition. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_clock.h" line="143" column="9" bodyfile="hal/nrf_clock.h" bodystart="143" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__clock__hal_1ga9b12ac309fcf52b96ccf121604ad0a8c" prot="public" static="no">
        <name>NRF_LFCLKSRCCOPY</name>
        <initializer>LFCLK.SRCCOPY</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>LF clock SRCCOPY register definition. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_clock.h" line="144" column="9" bodyfile="hal/nrf_clock.h" bodystart="144" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__clock__hal_1ga1672cf47a29571d28693b960d5ac4736" prot="public" static="no">
        <name>NRF_LFCLKRUN</name>
        <initializer>LFCLK.RUN</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>LF clock RUN register definition. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_clock.h" line="145" column="9" bodyfile="hal/nrf_clock.h" bodystart="145" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__clock__hal_1gaff9b8b7e0cb2f785b76026753222d2e5" prot="public" static="no">
        <name>NRF_LFCLKSTAT</name>
        <initializer>LFCLK.STAT</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>LF clock STAT register definition. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_clock.h" line="146" column="9" bodyfile="hal/nrf_clock.h" bodystart="146" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__clock__hal_1gace550db9400bd8ba69c847023ff52549" prot="public" static="no">
        <name>NRF_LFCLKSRC</name>
        <initializer>LFCLK.SRC</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>LF clock SRC register definition. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_clock.h" line="147" column="9" bodyfile="hal/nrf_clock.h" bodystart="147" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__clock__hal_1gaf2adfca656998fd1c0bd5cee3cc15ee1" prot="public" static="no">
        <name>NRF_LFCLKALWAYSRUN</name>
        <initializer>LFCLK.ALWAYSRUN</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>LF clock ALWAYSRUN register definition. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_clock.h" line="148" column="9" bodyfile="hal/nrf_clock.h" bodystart="148" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__clock__hal_1gaf09c25badcc39b2c874044dea30e9d35" prot="public" static="no">
        <name>NRF_CLOCK_LFCLKSRCCOPY_SRC_Msk</name>
        <initializer>CLOCK_LFCLK_SRCCOPY_SRC_Msk</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>LF clock SRCCOPY status mask definition. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_clock.h" line="149" column="9" bodyfile="hal/nrf_clock.h" bodystart="149" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__clock__hal_1gacdf20044a3e28b286cdc47d455cf3291" prot="public" static="no">
        <name>NRF_CLOCK_LFCLKSRCCOPY_SRC_Pos</name>
        <initializer>CLOCK_LFCLK_SRCCOPY_SRC_Pos</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>LF clock SRCCOPY status position definition. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_clock.h" line="150" column="9" bodyfile="hal/nrf_clock.h" bodystart="150" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__clock__hal_1gadb033159a59d2a159e520afa62169298" prot="public" static="no">
        <name>NRF_CLOCK_LFCLKRUN_STATUS_Msk</name>
        <initializer>CLOCK_LFCLK_RUN_STATUS_Msk</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>LF clock RUN status mask definition. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_clock.h" line="151" column="9" bodyfile="hal/nrf_clock.h" bodystart="151" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__clock__hal_1gaf0956809045fc8b9ca93e772e414b3d9" prot="public" static="no">
        <name>NRF_CLOCK_LFCLKRUN_STATUS_Pos</name>
        <initializer>CLOCK_LFCLK_RUN_STATUS_Pos</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>LF clock RUN status position definition. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_clock.h" line="152" column="9" bodyfile="hal/nrf_clock.h" bodystart="152" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__clock__hal_1gabdde88064b5d20e53721f151ba8c8f48" prot="public" static="no">
        <name>NRF_CLOCK_LFCLKSTAT_SRC_Msk</name>
        <initializer>CLOCK_LFCLK_STAT_SRC_Msk</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>LF clock STAT source mask definition. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_clock.h" line="153" column="9" bodyfile="hal/nrf_clock.h" bodystart="153" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__clock__hal_1ga60e48ade4d634efe42a552122e76eeea" prot="public" static="no">
        <name>NRF_CLOCK_LFCLKSTAT_SRC_Pos</name>
        <initializer>CLOCK_LFCLK_STAT_SRC_Pos</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>LF clock STAT source position definition. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_clock.h" line="154" column="9" bodyfile="hal/nrf_clock.h" bodystart="154" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__clock__hal_1ga5484cddb1dfe1ed4d3982ad1307c0cbb" prot="public" static="no">
        <name>NRF_CLOCK_LFCLKSTAT_STATE_Msk</name>
        <initializer>CLOCK_LFCLK_STAT_STATE_Msk</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>LF clock STAT state mask definition. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_clock.h" line="155" column="9" bodyfile="hal/nrf_clock.h" bodystart="155" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__clock__hal_1ga5b359967c40efa2f11c06a2ba4b0ba12" prot="public" static="no">
        <name>NRF_CLOCK_LFCLKSTAT_STATE_Pos</name>
        <initializer>CLOCK_LFCLK_STAT_STATE_Pos</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>LF clock STAT state position definition. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_clock.h" line="156" column="9" bodyfile="hal/nrf_clock.h" bodystart="156" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__clock__hal_1ga2f550a2c6a1a8f58a48c7d8b8262ada2" prot="public" static="no">
        <name>NRF_CLOCK_LFCLKSTAT_ALWAYSRUNNING_Msk</name>
        <initializer>CLOCK_LFCLK_STAT_ALWAYSRUNNING_Msk</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>LF clock STAT alwaysrunning position definition. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_clock.h" line="157" column="9" bodyfile="hal/nrf_clock.h" bodystart="157" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__clock__hal_1gada8946d0e1958e581118011582d9450b" prot="public" static="no">
        <name>NRF_CLOCK_LFCLKSTAT_ALWAYSRUNNING_Pos</name>
        <initializer>CLOCK_LFCLK_STAT_ALWAYSRUNNING_Pos</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>LF clock STAT alwaysrunning mask definition. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_clock.h" line="158" column="9" bodyfile="hal/nrf_clock.h" bodystart="158" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__clock__hal_1gaad7f55c79e5021acde2dc1c9deb91af5" prot="public" static="no">
        <name>NRF_CLOCK_LFCLKALWAYSRUN_ALWAYSRUN_Msk</name>
        <initializer>CLOCK_LFCLK_ALWAYSRUN_ALWAYSRUN_Msk</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>LF clock ALWAYSRUN position definition. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_clock.h" line="159" column="9" bodyfile="hal/nrf_clock.h" bodystart="159" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__clock__hal_1gab91b3624656e5175625ae800f4938a9e" prot="public" static="no">
        <name>NRF_CLOCK_LFCLKALWAYSRUN_ALWAYSRUN_Pos</name>
        <initializer>CLOCK_LFCLK_ALWAYSRUN_ALWAYSRUN_Pos</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>LF clock ALWAYSRUN mask definition. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_clock.h" line="160" column="9" bodyfile="hal/nrf_clock.h" bodystart="160" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__clock__hal_1ga263a8a23be70ebb916ebcbb79ea5bba1" prot="public" static="no">
        <name>NRF_CLOCK_INTENSET_HFCLKSTARTED_Msk</name>
        <initializer>CLOCK_INTEN_XOSTARTED_Msk</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>HF clock bit mask in interrupt register. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_clock.h" line="185" column="9" bodyfile="hal/nrf_clock.h" bodystart="185" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__clock__hal_1gad9c373e812c425d10207063685c96ddf" prot="public" static="no">
        <name>NRF_TASKS_HFCLKSTART</name>
        <initializer>TASKS_XOSTART</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Task HF clock start definition. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_clock.h" line="186" column="9" bodyfile="hal/nrf_clock.h" bodystart="186" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__clock__hal_1ga9e83f9586897ff8da2a3ed2802785c86" prot="public" static="no">
        <name>NRF_TASKS_HFCLKSTOP</name>
        <initializer>TASKS_XOSTOP</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Task HF clock stop definition. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_clock.h" line="187" column="9" bodyfile="hal/nrf_clock.h" bodystart="187" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__clock__hal_1gaf95b079647db2d17dddc9e51bd2896d9" prot="public" static="no">
        <name>NRF_EVENTS_HFCLKSTARTED</name>
        <initializer>EVENTS_XOSTARTED</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Event HF clock startrd definition. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_clock.h" line="188" column="9" bodyfile="hal/nrf_clock.h" bodystart="188" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__clock__hal_1ga31b23257160c1f28e6cd36a469a51194" prot="public" static="no">
        <name>NRF_HFCLKRUN</name>
        <initializer>XO.RUN</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>HF clock RUN register definition. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_clock.h" line="189" column="9" bodyfile="hal/nrf_clock.h" bodystart="189" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__clock__hal_1gad09ab255ce781f2c7d60956b53e055a0" prot="public" static="no">
        <name>NRF_HFCLKSTAT</name>
        <initializer>XO.STAT</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>HF clock STAT register definition. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_clock.h" line="190" column="9" bodyfile="hal/nrf_clock.h" bodystart="190" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__clock__hal_1ga9a8f01a63f230b3a330e8ce140f7a187" prot="public" static="no">
        <name>NRF_CLOCK_HFCLKRUN_STATUS_Msk</name>
        <initializer>CLOCK_XO_RUN_STATUS_Msk</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>HF clock RUN status mask definition. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_clock.h" line="191" column="9" bodyfile="hal/nrf_clock.h" bodystart="191" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__clock__hal_1ga972f816a3a1b384ae4a4453ca80bb1fe" prot="public" static="no">
        <name>NRF_CLOCK_HFCLKRUN_STATUS_Pos</name>
        <initializer>CLOCK_XO_RUN_STATUS_Pos</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>HF clock RUN status position definition. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_clock.h" line="192" column="9" bodyfile="hal/nrf_clock.h" bodystart="192" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__clock__hal_1ga0054b72186e455d70e8ce2164b1eb951" prot="public" static="no">
        <name>NRF_CLOCK_HFCLKSTAT_STATE_Msk</name>
        <initializer>CLOCK_XO_STAT_STATE_Msk</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>HF clock STAT state mask definition. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_clock.h" line="193" column="9" bodyfile="hal/nrf_clock.h" bodystart="193" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__clock__hal_1gab8b8be8d2793585960a11e41706ce6c0" prot="public" static="no">
        <name>NRF_CLOCK_HFCLKSTAT_STATE_Pos</name>
        <initializer>CLOCK_XO_STAT_STATE_Pos</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>HF clock STAT state position definition. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_clock.h" line="194" column="9" bodyfile="hal/nrf_clock.h" bodystart="194" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Hardware access layer for managing the CLOCK peripheral. </para>
    </briefdescription>
    <detaileddescription>
<para>This code can be used to manage low-frequency clock (LFCLK), high-frequency clock (HFCLK), high-frequency 192 MHz clock (HFCLK192M) and high-frequency audio clock (HFCLKAUDIO) settings. </para>
    </detaileddescription>
  </compounddef>
</doxygen>
