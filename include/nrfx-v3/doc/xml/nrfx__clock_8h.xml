<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="nrfx__clock_8h" kind="file" language="C++">
    <compoundname>nrfx_clock.h</compoundname>
    <includes local="no">nrfx.h</includes>
    <includes refid="nrf__clock_8h" local="no">hal/nrf_clock.h</includes>
    <includes refid="nrfx__power__clock_8h" local="no">nrfx_power_clock.h</includes>
    <incdepgraph>
      <node id="1">
        <label>drivers/include/nrfx_clock.h</label>
        <link refid="nrfx__clock_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>nrfx.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="group__nrfx__clock_1gac74fe06485d31da90492fb20bc3694f0" prot="public" static="no" strong="no">
        <type></type>
        <name>nrfx_clock_evt_type_t</name>
        <enumvalue id="group__nrfx__clock_1ggac74fe06485d31da90492fb20bc3694f0ae2a454c2d31cc826a4b36e59f3e8bfa3" prot="public">
          <name>NRFX_CLOCK_EVT_HFCLK_STARTED</name>
          <briefdescription>
<para>HFCLK has been started. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrfx__clock_1ggac74fe06485d31da90492fb20bc3694f0ad45e0132d9aa77089e917eeb3ea4b48b" prot="public">
          <name>NRFX_CLOCK_EVT_LFCLK_STARTED</name>
          <briefdescription>
<para>LFCLK has been started. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrfx__clock_1ggac74fe06485d31da90492fb20bc3694f0aaeaed5a14f8eac06383315d1f9116129" prot="public">
          <name>NRFX_CLOCK_EVT_PLL_STARTED</name>
          <briefdescription>
<para>PLL has been started. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrfx__clock_1ggac74fe06485d31da90492fb20bc3694f0a7163f012ad1019bcbd74f47340320bd0" prot="public">
          <name>NRFX_CLOCK_EVT_CTTO</name>
          <briefdescription>
<para>Calibration timeout. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrfx__clock_1ggac74fe06485d31da90492fb20bc3694f0ae6c539fcc55aec86b97c66271e9eaebc" prot="public">
          <name>NRFX_CLOCK_EVT_CAL_DONE</name>
          <briefdescription>
<para>Calibration has been done. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrfx__clock_1ggac74fe06485d31da90492fb20bc3694f0a8a814bf6fa4e8f553fd69253d13a65c0" prot="public">
          <name>NRFX_CLOCK_EVT_HFCLKAUDIO_STARTED</name>
          <briefdescription>
<para>HFCLKAUDIO has been started. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrfx__clock_1ggac74fe06485d31da90492fb20bc3694f0aa9e57709561b56c65491624a589dbde7" prot="public">
          <name>NRFX_CLOCK_EVT_HFCLK192M_STARTED</name>
          <briefdescription>
<para>HFCLK192M has been started. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Clock events. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/include/nrfx_clock.h" line="53" column="1" bodyfile="drivers/include/nrfx_clock.h" bodystart="54" bodyend="62"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group__nrfx__clock_1gab61bc93661a5532fa90dce6cf3213289" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* nrfx_clock_event_handler_t) (nrfx_clock_evt_type_t event)</definition>
        <argsstring>)(nrfx_clock_evt_type_t event)</argsstring>
        <name>nrfx_clock_event_handler_t</name>
        <briefdescription>
<para>Clock event handler. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/include/nrfx_clock.h" line="69" column="9" bodyfile="drivers/include/nrfx_clock.h" bodystart="69" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__nrfx__clock_1gade48f50b80f5acb42513d31e9e58c9f7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__nrfx__error__codes_1ga2449720f8fa17b22243218068459a24b" kindref="member">nrfx_err_t</ref></type>
        <definition>nrfx_err_t nrfx_clock_init</definition>
        <argsstring>(nrfx_clock_event_handler_t event_handler)</argsstring>
        <name>nrfx_clock_init</name>
        <param>
          <type><ref refid="group__nrfx__clock_1gab61bc93661a5532fa90dce6cf3213289" kindref="member">nrfx_clock_event_handler_t</ref></type>
          <declname>event_handler</declname>
        </param>
        <briefdescription>
<para>Function for initializing internal structures in the nrfx_clock module. </para>
        </briefdescription>
        <detaileddescription>
<para>After initialization, the module is in power off state (clocks are not started).</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">event_handler</parametername>
</parameternamelist>
<parameterdescription>
<para>Event handler provided by the user. If not provided, driver works in blocking mode.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>NRFX_SUCCESS</parametername>
</parameternamelist>
<parameterdescription>
<para>The procedure is successful. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NRFX_ERROR_ALREADY</parametername>
</parameternamelist>
<parameterdescription>
<para>The driver is already initialized. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/include/nrfx_clock.h" line="82" column="12" declfile="drivers/include/nrfx_clock.h" declline="82" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfx__clock_1gaaf29a4b1afa6f5f3065cf56827e97a0f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nrfx_clock_enable</definition>
        <argsstring>(void)</argsstring>
        <name>nrfx_clock_enable</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Function for enabling interrupts in the clock module. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/include/nrfx_clock.h" line="85" column="6" declfile="drivers/include/nrfx_clock.h" declline="85" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfx__clock_1gad27a493977d7971d75e3e829c682bc27" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nrfx_clock_disable</definition>
        <argsstring>(void)</argsstring>
        <name>nrfx_clock_disable</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Function for disabling interrupts in the clock module. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/include/nrfx_clock.h" line="88" column="6" declfile="drivers/include/nrfx_clock.h" declline="88" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfx__clock_1ga78c2e818f97f7da0f5d05a89ecf5766f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nrfx_clock_uninit</definition>
        <argsstring>(void)</argsstring>
        <name>nrfx_clock_uninit</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Function for uninitializing the clock module. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/include/nrfx_clock.h" line="91" column="6" declfile="drivers/include/nrfx_clock.h" declline="91" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfx__clock_1gad7c2277da318355ea47fb43331d781c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool nrfx_clock_init_check</definition>
        <argsstring>(void)</argsstring>
        <name>nrfx_clock_init_check</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Function for checking if the clock driver is initialized. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>Driver is already initialized. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>Driver is not initialized. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/include/nrfx_clock.h" line="99" column="6" declfile="drivers/include/nrfx_clock.h" declline="99" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfx__clock_1ga24fa01bb4b859ff01b3cc6cfdb526a7f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nrfx_clock_start</definition>
        <argsstring>(nrf_clock_domain_t domain)</argsstring>
        <name>nrfx_clock_start</name>
        <param>
          <type><ref refid="group__nrf__clock__hal_1ga1739a9f32e7efbf83dc6e773b05211c1" kindref="member">nrf_clock_domain_t</ref></type>
          <declname>domain</declname>
        </param>
        <briefdescription>
<para>Function for starting the specified clock domain. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">domain</parametername>
</parameternamelist>
<parameterdescription>
<para>Clock domain. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/include/nrfx_clock.h" line="106" column="6" declfile="drivers/include/nrfx_clock.h" declline="106" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfx__clock_1gae6d17f0c0044976379550d7edc34c103" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nrfx_clock_stop</definition>
        <argsstring>(nrf_clock_domain_t domain)</argsstring>
        <name>nrfx_clock_stop</name>
        <param>
          <type><ref refid="group__nrf__clock__hal_1ga1739a9f32e7efbf83dc6e773b05211c1" kindref="member">nrf_clock_domain_t</ref></type>
          <declname>domain</declname>
        </param>
        <briefdescription>
<para>Function for stopping the specified clock domain. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">domain</parametername>
</parameternamelist>
<parameterdescription>
<para>Clock domain. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/include/nrfx_clock.h" line="113" column="6" declfile="drivers/include/nrfx_clock.h" declline="113" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfx__clock_1gaa2695758f2fb17065a77c96f097b5a57" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRFX_STATIC_INLINE bool</type>
        <definition>NRFX_STATIC_INLINE bool nrfx_clock_is_running</definition>
        <argsstring>(nrf_clock_domain_t domain, void *p_clk_src)</argsstring>
        <name>nrfx_clock_is_running</name>
        <param>
          <type><ref refid="group__nrf__clock__hal_1ga1739a9f32e7efbf83dc6e773b05211c1" kindref="member">nrf_clock_domain_t</ref></type>
          <declname>domain</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>p_clk_src</declname>
        </param>
        <briefdescription>
<para>Function for checking the specified clock domain state. </para>
        </briefdescription>
        <detaileddescription>
<para>XTAL source is assumed for domains with multiple sources.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">domain</parametername>
</parameternamelist>
<parameterdescription>
<para>Clock domain. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">p_clk_src</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a clock source that is running. Set to NULL if not needed. Ignored for HFCLKAUDIO domain. Variable pointed by <computeroutput>p_clk_src</computeroutput> must be of either <ref refid="group__nrf__clock__hal_1ga5b00bcdc07defd8187f2be8a2ec7a597" kindref="member">nrf_clock_lfclk_t</ref> type for LFCLK or <ref refid="group__nrf__clock__hal_1gac89aad0e037b7aeefc5264a4dca76197" kindref="member">nrf_clock_hfclk_t</ref> type for HFCLK and HFCLK192M.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>The clock domain is running. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>The clock domain is not running. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/include/nrfx_clock.h" line="342" column="25" bodyfile="drivers/include/nrfx_clock.h" bodystart="342" bodyend="345" declfile="drivers/include/nrfx_clock.h" declline="129" declcolumn="25"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfx__clock_1ga1cadf437a3ebd0cee550f6156bbe84c1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__nrfx__error__codes_1ga2449720f8fa17b22243218068459a24b" kindref="member">nrfx_err_t</ref></type>
        <definition>nrfx_err_t nrfx_clock_divider_set</definition>
        <argsstring>(nrf_clock_domain_t domain, nrf_clock_hfclk_div_t div)</argsstring>
        <name>nrfx_clock_divider_set</name>
        <param>
          <type><ref refid="group__nrf__clock__hal_1ga1739a9f32e7efbf83dc6e773b05211c1" kindref="member">nrf_clock_domain_t</ref></type>
          <declname>domain</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__clock__hal_1ga4ae12749dff0c4975b250728d6de0ad6" kindref="member">nrf_clock_hfclk_div_t</ref></type>
          <declname>div</declname>
        </param>
        <briefdescription>
<para>Function for setting the specified clock domain divider. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">domain</parametername>
</parameternamelist>
<parameterdescription>
<para>Clock domain. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">div</parametername>
</parameternamelist>
<parameterdescription>
<para>New divider for the clock domain.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>NRFX_SUCCESS</parametername>
</parameternamelist>
<parameterdescription>
<para>Divider successfully set. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NRFX_ERROR_NOT_SUPPORTED</parametername>
</parameternamelist>
<parameterdescription>
<para>Domain does not support setting the divider. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NRFX_ERROR_INVALID_PARAM</parametername>
</parameternamelist>
<parameterdescription>
<para>Divider not supported by the specified domain. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/include/nrfx_clock.h" line="143" column="12" declfile="drivers/include/nrfx_clock.h" declline="143" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfx__clock_1ga44f8fd4e7abedb0643bd313d7b300fd0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRFX_STATIC_INLINE <ref refid="group__nrf__clock__hal_1ga4ae12749dff0c4975b250728d6de0ad6" kindref="member">nrf_clock_hfclk_div_t</ref></type>
        <definition>NRFX_STATIC_INLINE nrf_clock_hfclk_div_t nrfx_clock_divider_get</definition>
        <argsstring>(nrf_clock_domain_t domain)</argsstring>
        <name>nrfx_clock_divider_get</name>
        <param>
          <type><ref refid="group__nrf__clock__hal_1ga1739a9f32e7efbf83dc6e773b05211c1" kindref="member">nrf_clock_domain_t</ref></type>
          <declname>domain</declname>
        </param>
        <briefdescription>
<para>Function for getting the specified clock domain divider. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">domain</parametername>
</parameternamelist>
<parameterdescription>
<para>Clock domain.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Current divider for the specified clock domain. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/include/nrfx_clock.h" line="154" column="42" declfile="drivers/include/nrfx_clock.h" declline="154" declcolumn="42"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfx__clock_1gaf6405fe6e9394d83bdb9890106b21c86" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRFX_STATIC_INLINE void</type>
        <definition>NRFX_STATIC_INLINE void nrfx_clock_lfclk_start</definition>
        <argsstring>(void)</argsstring>
        <name>nrfx_clock_lfclk_start</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Function for starting the LFCLK. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This function is deprecated. Use <ref refid="group__nrfx__clock_1ga24fa01bb4b859ff01b3cc6cfdb526a7f" kindref="member">nrfx_clock_start</ref> instead. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/include/nrfx_clock.h" line="312" column="25" bodyfile="drivers/include/nrfx_clock.h" bodystart="312" bodyend="315" declfile="drivers/include/nrfx_clock.h" declline="162" declcolumn="25"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfx__clock_1ga25cca029e00013aea860df9e4cf9a9fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRFX_STATIC_INLINE void</type>
        <definition>NRFX_STATIC_INLINE void nrfx_clock_lfclk_stop</definition>
        <argsstring>(void)</argsstring>
        <name>nrfx_clock_lfclk_stop</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Function for stopping the LFCLK. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This function is deprecated. Use <ref refid="group__nrfx__clock_1gae6d17f0c0044976379550d7edc34c103" kindref="member">nrfx_clock_stop</ref> instead. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/include/nrfx_clock.h" line="317" column="25" bodyfile="drivers/include/nrfx_clock.h" bodystart="317" bodyend="320" declfile="drivers/include/nrfx_clock.h" declline="169" declcolumn="25"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfx__clock_1ga01576d0ccbebc3ca530add443194c92e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRFX_STATIC_INLINE bool</type>
        <definition>NRFX_STATIC_INLINE bool nrfx_clock_lfclk_is_running</definition>
        <argsstring>(void)</argsstring>
        <name>nrfx_clock_lfclk_is_running</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Function for checking the LFCLK state. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This function is deprecated. Use <ref refid="group__nrfx__clock_1gaa2695758f2fb17065a77c96f097b5a57" kindref="member">nrfx_clock_is_running</ref> instead.</para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>The LFCLK is running. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>The LFCLK is not running. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/include/nrfx_clock.h" line="354" column="25" bodyfile="drivers/include/nrfx_clock.h" bodystart="354" bodyend="357" declfile="drivers/include/nrfx_clock.h" declline="179" declcolumn="25"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfx__clock_1ga82276baf92a67846fb23943038646d1d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRFX_STATIC_INLINE void</type>
        <definition>NRFX_STATIC_INLINE void nrfx_clock_hfclk_start</definition>
        <argsstring>(void)</argsstring>
        <name>nrfx_clock_hfclk_start</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Function for starting the high-accuracy source HFCLK. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This function is deprecated. Use <ref refid="group__nrfx__clock_1ga24fa01bb4b859ff01b3cc6cfdb526a7f" kindref="member">nrfx_clock_start</ref> instead. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/include/nrfx_clock.h" line="322" column="25" bodyfile="drivers/include/nrfx_clock.h" bodystart="322" bodyend="325" declfile="drivers/include/nrfx_clock.h" declline="186" declcolumn="25"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfx__clock_1ga3737dd4bbb18008dc4a02d6733e6d526" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRFX_STATIC_INLINE void</type>
        <definition>NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop</definition>
        <argsstring>(void)</argsstring>
        <name>nrfx_clock_hfclk_stop</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Function for stopping the external high-accuracy source HFCLK. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This function is deprecated. Use <ref refid="group__nrfx__clock_1gae6d17f0c0044976379550d7edc34c103" kindref="member">nrfx_clock_stop</ref> instead. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/include/nrfx_clock.h" line="327" column="25" bodyfile="drivers/include/nrfx_clock.h" bodystart="327" bodyend="330" declfile="drivers/include/nrfx_clock.h" declline="193" declcolumn="25"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfx__clock_1ga13f55dfedb4b48b27c861b28eb3656bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRFX_STATIC_INLINE bool</type>
        <definition>NRFX_STATIC_INLINE bool nrfx_clock_hfclk_is_running</definition>
        <argsstring>(void)</argsstring>
        <name>nrfx_clock_hfclk_is_running</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Function for checking the HFCLK state. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This function is deprecated. Use <ref refid="group__nrfx__clock_1gaa2695758f2fb17065a77c96f097b5a57" kindref="member">nrfx_clock_is_running</ref> instead.</para>
</simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>The HFCLK is running (XTAL source). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>The HFCLK is not running. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/include/nrfx_clock.h" line="347" column="25" bodyfile="drivers/include/nrfx_clock.h" bodystart="347" bodyend="352" declfile="drivers/include/nrfx_clock.h" declline="203" declcolumn="25"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfx__clock_1gac340aa1965fb58abd712e4b0dde86898" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRFX_STATIC_INLINE void</type>
        <definition>NRFX_STATIC_INLINE void nrfx_clock_hfclkaudio_config_set</definition>
        <argsstring>(uint16_t freq_value)</argsstring>
        <name>nrfx_clock_hfclkaudio_config_set</name>
        <param>
          <type>uint16_t</type>
          <declname>freq_value</declname>
        </param>
        <briefdescription>
<para>Function for setting the HFCLKAUDIO configuration. </para>
        </briefdescription>
        <detaileddescription>
<para>The frequency of HFCLKAUDIO ranges from 10.666 MHz to 13.333 MHz in 40.7 Hz steps. To calculate <computeroutput>freq_value</computeroutput> corresponding to the chosen frequency, use the following equation: FREQ_VALUE = 2^16 * ((12 * f_out / 32M) - 4)</para>
<para><simplesect kind="warning"><para>Chosen frequency must fit in 11.176 MHz - 11.402 MHz or 12.165 MHz - 12.411 MHz frequency bands.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">freq_value</parametername>
</parameternamelist>
<parameterdescription>
<para>New FREQ_VALUE for HFCLKAUDIO. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/include/nrfx_clock.h" line="219" column="25" declfile="drivers/include/nrfx_clock.h" declline="219" declcolumn="25"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfx__clock_1ga8cb2237b355f32ff611880fe9d36f537" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRFX_STATIC_INLINE uint16_t</type>
        <definition>NRFX_STATIC_INLINE uint16_t nrfx_clock_hfclkaudio_config_get</definition>
        <argsstring>(void)</argsstring>
        <name>nrfx_clock_hfclkaudio_config_get</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Function for getting the HFCLKAUDIO configuration. </para>
        </briefdescription>
        <detaileddescription>
<para>The frequency of HFCLKAUDIO ranges from 10.666 MHz to 13.333 MHz in 40.7 Hz steps. To calculate frequency corresponding to the returned FREQ_VALUE, use the following equation: f_out = 32M * (4 + FREQ_VALUE * 2^(-16))/12</para>
<para><simplesect kind="return"><para>Current value of FREQ_VALUE for HFCLKAUDIO. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/include/nrfx_clock.h" line="230" column="29" declfile="drivers/include/nrfx_clock.h" declline="230" declcolumn="29"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfx__clock_1ga932408ae0df1555998adf6ddee6d8d95" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__nrfx__error__codes_1ga2449720f8fa17b22243218068459a24b" kindref="member">nrfx_err_t</ref></type>
        <definition>nrfx_err_t nrfx_clock_calibration_start</definition>
        <argsstring>(void)</argsstring>
        <name>nrfx_clock_calibration_start</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Function for starting the calibration of internal LFCLK. </para>
        </briefdescription>
        <detaileddescription>
<para>This function starts the calibration process. The process cannot be aborted. LFCLK and HFCLK must be running before this function is called.</para>
<para><parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>NRFX_SUCCESS</parametername>
</parameternamelist>
<parameterdescription>
<para>The procedure is successful. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NRFX_ERROR_INVALID_STATE</parametername>
</parameternamelist>
<parameterdescription>
<para>The low-frequency of high-frequency clock is off. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NRFX_ERROR_BUSY</parametername>
</parameternamelist>
<parameterdescription>
<para>Clock is in the calibration phase. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/include/nrfx_clock.h" line="245" column="12" declfile="drivers/include/nrfx_clock.h" declline="245" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfx__clock_1ga5886931a5275d62bb0f4918b45ab2697" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__nrfx__error__codes_1ga2449720f8fa17b22243218068459a24b" kindref="member">nrfx_err_t</ref></type>
        <definition>nrfx_err_t nrfx_clock_is_calibrating</definition>
        <argsstring>(void)</argsstring>
        <name>nrfx_clock_is_calibrating</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Function for checking if calibration is in progress. </para>
        </briefdescription>
        <detaileddescription>
<para>This function indicates that the system is in calibration phase.</para>
<para><parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>NRFX_SUCCESS</parametername>
</parameternamelist>
<parameterdescription>
<para>The procedure is successful. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NRFX_ERROR_BUSY</parametername>
</parameternamelist>
<parameterdescription>
<para>Clock is in the calibration phase. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/include/nrfx_clock.h" line="255" column="12" declfile="drivers/include/nrfx_clock.h" declline="255" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfx__clock_1gaa44024508cd21c3c4d3f8495ca373250" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nrfx_clock_calibration_timer_start</definition>
        <argsstring>(uint8_t interval)</argsstring>
        <name>nrfx_clock_calibration_timer_start</name>
        <param>
          <type>uint8_t</type>
          <declname>interval</declname>
        </param>
        <briefdescription>
<para>Function for starting calibration timer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">interval</parametername>
</parameternamelist>
<parameterdescription>
<para>Time after which the CTTO event and interrupt will be generated (in 0.25 s units). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/include/nrfx_clock.h" line="264" column="6" declfile="drivers/include/nrfx_clock.h" declline="264" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfx__clock_1ga10ae5f204aeced69133f417ae708a8ff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nrfx_clock_calibration_timer_stop</definition>
        <argsstring>(void)</argsstring>
        <name>nrfx_clock_calibration_timer_stop</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Function for stopping the calibration timer. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/include/nrfx_clock.h" line="267" column="6" declfile="drivers/include/nrfx_clock.h" declline="267" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfx__clock_1gac9cd3143caf49840e911c2d01e99fb93" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRFX_STATIC_INLINE uint32_t</type>
        <definition>NRFX_STATIC_INLINE uint32_t nrfx_clock_task_address_get</definition>
        <argsstring>(nrf_clock_task_t task)</argsstring>
        <name>nrfx_clock_task_address_get</name>
        <param>
          <type><ref refid="group__nrf__clock__hal_1ga6bf1711bc8cb7614c8ae806155bd3f33" kindref="member">nrf_clock_task_t</ref></type>
          <declname>task</declname>
        </param>
        <briefdescription>
<para>Function for returning a requested task address for the clock driver module. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">task</parametername>
</parameternamelist>
<parameterdescription>
<para>One of the peripheral tasks.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Task address. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/include/nrfx_clock.h" line="332" column="29" bodyfile="drivers/include/nrfx_clock.h" bodystart="332" bodyend="335" declfile="drivers/include/nrfx_clock.h" declline="279" declcolumn="29"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfx__clock_1ga50e51e62b438c1cd3fefd236928104dd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRFX_STATIC_INLINE uint32_t</type>
        <definition>NRFX_STATIC_INLINE uint32_t nrfx_clock_event_address_get</definition>
        <argsstring>(nrf_clock_event_t event)</argsstring>
        <name>nrfx_clock_event_address_get</name>
        <param>
          <type><ref refid="group__nrf__clock__hal_1ga8843dd5805c2b01f9b832ed73d583695" kindref="member">nrf_clock_event_t</ref></type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>Function for returning a requested event address for the clock driver module. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>One of the peripheral events.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Event address. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/include/nrfx_clock.h" line="337" column="29" bodyfile="drivers/include/nrfx_clock.h" bodystart="337" bodyend="340" declfile="drivers/include/nrfx_clock.h" declline="288" declcolumn="29"/>
      </memberdef>
      <memberdef kind="function" id="nrfx__clock_8h_1a09aa35df50bfa25493f8f3b64d31203a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nrfx_clock_irq_handler</definition>
        <argsstring>(void)</argsstring>
        <name>nrfx_clock_irq_handler</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/include/nrfx_clock.h" line="378" column="6" declfile="drivers/include/nrfx_clock.h" declline="378" declcolumn="6"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2016<sp/>-<sp/>2024,<sp/>Nordic<sp/>Semiconductor<sp/>ASA</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>All<sp/>rights<sp/>reserved.</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>SPDX-License-Identifier:<sp/>BSD-3-Clause</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions<sp/>are<sp/>met:</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>1.<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright<sp/>notice,<sp/>this</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>2.<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the<sp/>distribution.</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/>3.<sp/>Neither<sp/>the<sp/>name<sp/>of<sp/>the<sp/>copyright<sp/>holder<sp/>nor<sp/>the<sp/>names<sp/>of<sp/>its</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>contributors<sp/>may<sp/>be<sp/>used<sp/>to<sp/>endorse<sp/>or<sp/>promote<sp/>products<sp/>derived<sp/>from<sp/>this</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>software<sp/>without<sp/>specific<sp/>prior<sp/>written<sp/>permission.</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>COPYRIGHT<sp/>HOLDERS<sp/>AND<sp/>CONTRIBUTORS<sp/>&quot;AS<sp/>IS&quot;</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/>AND<sp/>ANY<sp/>EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>THE</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*<sp/>ARE<sp/>DISCLAIMED.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>COPYRIGHT<sp/>HOLDER<sp/>OR<sp/>CONTRIBUTORS<sp/>BE</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,<sp/>SPECIAL,<sp/>EXEMPLARY,<sp/>OR</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>PROCUREMENT<sp/>OF</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>*<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,<sp/>DATA,<sp/>OR<sp/>PROFITS;<sp/>OR<sp/>BUSINESS</highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/>*<sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY<sp/>THEORY<sp/>OF<sp/>LIABILITY,<sp/>WHETHER<sp/>IN</highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/>*<sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR<sp/>OTHERWISE)</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/>*<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE<sp/>OF<sp/>THIS<sp/>SOFTWARE,<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/>*<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight></codeline>
<codeline lineno="32"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>NRFX_CLOCK_H__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRFX_CLOCK_H__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;nrfx.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;hal/nrf_clock.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;nrfx_power_clock.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="45"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="46"><highlight class="comment"><sp/>*<sp/>@defgroup<sp/>nrfx_clock<sp/>CLOCK<sp/>driver</highlight></codeline>
<codeline lineno="47"><highlight class="comment"><sp/>*<sp/>@{</highlight></codeline>
<codeline lineno="48"><highlight class="comment"><sp/>*<sp/>@ingroup<sp/>nrf_clock</highlight></codeline>
<codeline lineno="49"><highlight class="comment"><sp/>*<sp/>@brief<sp/><sp/><sp/>CLOCK<sp/>peripheral<sp/>driver.</highlight></codeline>
<codeline lineno="50"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="52"><highlight class="comment">/**<sp/>@brief<sp/>Clock<sp/>events.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal">{</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__clock_1ggac74fe06485d31da90492fb20bc3694f0ae2a454c2d31cc826a4b36e59f3e8bfa3" kindref="member">NRFX_CLOCK_EVT_HFCLK_STARTED</ref>,<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>HFCLK<sp/>has<sp/>been<sp/>started.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__clock_1ggac74fe06485d31da90492fb20bc3694f0ad45e0132d9aa77089e917eeb3ea4b48b" kindref="member">NRFX_CLOCK_EVT_LFCLK_STARTED</ref>,<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>LFCLK<sp/>has<sp/>been<sp/>started.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__clock_1ggac74fe06485d31da90492fb20bc3694f0aaeaed5a14f8eac06383315d1f9116129" kindref="member">NRFX_CLOCK_EVT_PLL_STARTED</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>PLL<sp/>has<sp/>been<sp/>started.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__clock_1ggac74fe06485d31da90492fb20bc3694f0a7163f012ad1019bcbd74f47340320bd0" kindref="member">NRFX_CLOCK_EVT_CTTO</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Calibration<sp/>timeout.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__clock_1ggac74fe06485d31da90492fb20bc3694f0ae6c539fcc55aec86b97c66271e9eaebc" kindref="member">NRFX_CLOCK_EVT_CAL_DONE</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Calibration<sp/>has<sp/>been<sp/>done.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__clock_1ggac74fe06485d31da90492fb20bc3694f0a8a814bf6fa4e8f553fd69253d13a65c0" kindref="member">NRFX_CLOCK_EVT_HFCLKAUDIO_STARTED</ref>,<sp/></highlight><highlight class="comment">///&lt;<sp/>HFCLKAUDIO<sp/>has<sp/>been<sp/>started.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__clock_1ggac74fe06485d31da90492fb20bc3694f0aa9e57709561b56c65491624a589dbde7" kindref="member">NRFX_CLOCK_EVT_HFCLK192M_STARTED</ref>,<sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>HFCLK192M<sp/>has<sp/>been<sp/>started.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal">}<sp/><ref refid="group__nrfx__clock_1gac74fe06485d31da90492fb20bc3694f0" kindref="member">nrfx_clock_evt_type_t</ref>;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="64"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="65"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Clock<sp/>event<sp/>handler.</highlight></codeline>
<codeline lineno="66"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="67"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>event<sp/>Event.</highlight></codeline>
<codeline lineno="68"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(*<ref refid="group__nrfx__clock_1gab61bc93661a5532fa90dce6cf3213289" kindref="member">nrfx_clock_event_handler_t</ref>)(<ref refid="group__nrfx__clock_1gac74fe06485d31da90492fb20bc3694f0" kindref="member">nrfx_clock_evt_type_t</ref><sp/>event);</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="71"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="72"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>initializing<sp/>internal<sp/>structures<sp/>in<sp/>the<sp/>nrfx_clock<sp/>module.</highlight></codeline>
<codeline lineno="73"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="74"><highlight class="comment"><sp/>*<sp/>After<sp/>initialization,<sp/>the<sp/>module<sp/>is<sp/>in<sp/>power<sp/>off<sp/>state<sp/>(clocks<sp/>are<sp/>not<sp/>started).</highlight></codeline>
<codeline lineno="75"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="76"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>event_handler<sp/>Event<sp/>handler<sp/>provided<sp/>by<sp/>the<sp/>user.</highlight></codeline>
<codeline lineno="77"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>If<sp/>not<sp/>provided,<sp/>driver<sp/>works<sp/>in<sp/>blocking<sp/>mode.</highlight></codeline>
<codeline lineno="78"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="79"><highlight class="comment"><sp/>*<sp/>@retval<sp/>NRFX_SUCCESS<sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>procedure<sp/>is<sp/>successful.</highlight></codeline>
<codeline lineno="80"><highlight class="comment"><sp/>*<sp/>@retval<sp/>NRFX_ERROR_ALREADY<sp/>The<sp/>driver<sp/>is<sp/>already<sp/>initialized.</highlight></codeline>
<codeline lineno="81"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><ref refid="group__nrfx__error__codes_1ga2449720f8fa17b22243218068459a24b" kindref="member">nrfx_err_t</ref><sp/><ref refid="group__nrfx__clock_1gade48f50b80f5acb42513d31e9e58c9f7" kindref="member">nrfx_clock_init</ref>(<ref refid="group__nrfx__clock_1gab61bc93661a5532fa90dce6cf3213289" kindref="member">nrfx_clock_event_handler_t</ref><sp/><sp/>event_handler);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="84"><highlight class="comment">/**<sp/>@brief<sp/>Function<sp/>for<sp/>enabling<sp/>interrupts<sp/>in<sp/>the<sp/>clock<sp/>module.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrfx__clock_1gaaf29a4b1afa6f5f3065cf56827e97a0f" kindref="member">nrfx_clock_enable</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="87"><highlight class="comment">/**<sp/>@brief<sp/>Function<sp/>for<sp/>disabling<sp/>interrupts<sp/>in<sp/>the<sp/>clock<sp/>module.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrfx__clock_1gad27a493977d7971d75e3e829c682bc27" kindref="member">nrfx_clock_disable</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="90"><highlight class="comment">/**<sp/>@brief<sp/>Function<sp/>for<sp/>uninitializing<sp/>the<sp/>clock<sp/>module.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrfx__clock_1ga78c2e818f97f7da0f5d05a89ecf5766f" kindref="member">nrfx_clock_uninit</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="93"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="94"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>checking<sp/>if<sp/>the<sp/>clock<sp/>driver<sp/>is<sp/>initialized.</highlight></codeline>
<codeline lineno="95"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="96"><highlight class="comment"><sp/>*<sp/>@retval<sp/>true<sp/><sp/>Driver<sp/>is<sp/>already<sp/>initialized.</highlight></codeline>
<codeline lineno="97"><highlight class="comment"><sp/>*<sp/>@retval<sp/>false<sp/>Driver<sp/>is<sp/>not<sp/>initialized.</highlight></codeline>
<codeline lineno="98"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrfx__clock_1gad7c2277da318355ea47fb43331d781c2" kindref="member">nrfx_clock_init_check</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="101"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="102"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>starting<sp/>the<sp/>specified<sp/>clock<sp/>domain.</highlight></codeline>
<codeline lineno="103"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="104"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>domain<sp/>Clock<sp/>domain.</highlight></codeline>
<codeline lineno="105"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrfx__clock_1ga24fa01bb4b859ff01b3cc6cfdb526a7f" kindref="member">nrfx_clock_start</ref>(<ref refid="group__nrf__clock__hal_1ga1739a9f32e7efbf83dc6e773b05211c1" kindref="member">nrf_clock_domain_t</ref><sp/>domain);</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="108"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="109"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>stopping<sp/>the<sp/>specified<sp/>clock<sp/>domain.</highlight></codeline>
<codeline lineno="110"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="111"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>domain<sp/>Clock<sp/>domain.</highlight></codeline>
<codeline lineno="112"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrfx__clock_1gae6d17f0c0044976379550d7edc34c103" kindref="member">nrfx_clock_stop</ref>(<ref refid="group__nrf__clock__hal_1ga1739a9f32e7efbf83dc6e773b05211c1" kindref="member">nrf_clock_domain_t</ref><sp/>domain);</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="115"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="116"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>checking<sp/>the<sp/>specified<sp/>clock<sp/>domain<sp/>state.</highlight></codeline>
<codeline lineno="117"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="118"><highlight class="comment"><sp/>*<sp/>XTAL<sp/>source<sp/>is<sp/>assumed<sp/>for<sp/>domains<sp/>with<sp/>multiple<sp/>sources.</highlight></codeline>
<codeline lineno="119"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="120"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/><sp/>domain<sp/><sp/><sp/><sp/>Clock<sp/>domain.</highlight></codeline>
<codeline lineno="121"><highlight class="comment"><sp/>*<sp/>@param[out]<sp/>p_clk_src<sp/>Pointer<sp/>to<sp/>a<sp/>clock<sp/>source<sp/>that<sp/>is<sp/>running.<sp/>Set<sp/>to<sp/>NULL<sp/>if<sp/>not<sp/>needed.</highlight></codeline>
<codeline lineno="122"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Ignored<sp/>for<sp/>HFCLKAUDIO<sp/>domain.<sp/>Variable<sp/>pointed<sp/>by<sp/>@p<sp/>p_clk_src</highlight></codeline>
<codeline lineno="123"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>must<sp/>be<sp/>of<sp/>either<sp/>@ref<sp/>nrf_clock_lfclk_t<sp/>type<sp/>for<sp/>LFCLK</highlight></codeline>
<codeline lineno="124"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>or<sp/>@ref<sp/>nrf_clock_hfclk_t<sp/>type<sp/>for<sp/>HFCLK<sp/>and<sp/>HFCLK192M.</highlight></codeline>
<codeline lineno="125"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="126"><highlight class="comment"><sp/>*<sp/>@retval<sp/>true<sp/><sp/>The<sp/>clock<sp/>domain<sp/>is<sp/>running.</highlight></codeline>
<codeline lineno="127"><highlight class="comment"><sp/>*<sp/>@retval<sp/>false<sp/>The<sp/>clock<sp/>domain<sp/>is<sp/>not<sp/>running.</highlight></codeline>
<codeline lineno="128"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal">NRFX_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrfx__clock_1gaa2695758f2fb17065a77c96f097b5a57" kindref="member">nrfx_clock_is_running</ref>(<ref refid="group__nrf__clock__hal_1ga1739a9f32e7efbf83dc6e773b05211c1" kindref="member">nrf_clock_domain_t</ref><sp/>domain,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/>p_clk_src);</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(CLOCK_FEATURE_HFCLK_DIVIDE_PRESENT)<sp/>||<sp/>NRF_CLOCK_HAS_HFCLK192M<sp/>||<sp/>\</highlight></codeline>
<codeline lineno="132"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="133"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="134"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>the<sp/>specified<sp/>clock<sp/>domain<sp/>divider.</highlight></codeline>
<codeline lineno="135"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="136"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>domain<sp/>Clock<sp/>domain.</highlight></codeline>
<codeline lineno="137"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>div<sp/><sp/><sp/><sp/>New<sp/>divider<sp/>for<sp/>the<sp/>clock<sp/>domain.</highlight></codeline>
<codeline lineno="138"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="139"><highlight class="comment"><sp/>*<sp/>@retval<sp/>NRFX_SUCCESS<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Divider<sp/>successfully<sp/>set.</highlight></codeline>
<codeline lineno="140"><highlight class="comment"><sp/>*<sp/>@retval<sp/>NRFX_ERROR_NOT_SUPPORTED<sp/>Domain<sp/>does<sp/>not<sp/>support<sp/>setting<sp/>the<sp/>divider.</highlight></codeline>
<codeline lineno="141"><highlight class="comment"><sp/>*<sp/>@retval<sp/>NRFX_ERROR_INVALID_PARAM<sp/>Divider<sp/>not<sp/>supported<sp/>by<sp/>the<sp/>specified<sp/>domain.</highlight></codeline>
<codeline lineno="142"><highlight class="comment"><sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><ref refid="group__nrfx__error__codes_1ga2449720f8fa17b22243218068459a24b" kindref="member">nrfx_err_t</ref><sp/><ref refid="group__nrfx__clock_1ga1cadf437a3ebd0cee550f6156bbe84c1" kindref="member">nrfx_clock_divider_set</ref>(<ref refid="group__nrf__clock__hal_1ga1739a9f32e7efbf83dc6e773b05211c1" kindref="member">nrf_clock_domain_t</ref><sp/><sp/><sp/><sp/>domain,</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__clock__hal_1ga4ae12749dff0c4975b250728d6de0ad6" kindref="member">nrf_clock_hfclk_div_t</ref><sp/>div);</highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="146"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="147"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>the<sp/>specified<sp/>clock<sp/>domain<sp/>divider.</highlight></codeline>
<codeline lineno="148"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="149"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>domain<sp/>Clock<sp/>domain.</highlight></codeline>
<codeline lineno="150"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="151"><highlight class="comment"><sp/>*<sp/>@return<sp/>Current<sp/>divider<sp/>for<sp/>the<sp/>specified<sp/>clock<sp/>domain.</highlight></codeline>
<codeline lineno="152"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal">NRFX_STATIC_INLINE<sp/><ref refid="group__nrf__clock__hal_1ga4ae12749dff0c4975b250728d6de0ad6" kindref="member">nrf_clock_hfclk_div_t</ref><sp/><ref refid="group__nrfx__clock_1ga44f8fd4e7abedb0643bd313d7b300fd0" kindref="member">nrfx_clock_divider_get</ref>(<ref refid="group__nrf__clock__hal_1ga1739a9f32e7efbf83dc6e773b05211c1" kindref="member">nrf_clock_domain_t</ref><sp/>domain);</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="157"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="158"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>starting<sp/>the<sp/>LFCLK.</highlight></codeline>
<codeline lineno="159"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="160"><highlight class="comment"><sp/>*<sp/>@note<sp/>This<sp/>function<sp/>is<sp/>deprecated.<sp/>Use<sp/>@ref<sp/>nrfx_clock_start<sp/>instead.</highlight></codeline>
<codeline lineno="161"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal">NRFX_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrfx__clock_1gaf6405fe6e9394d83bdb9890106b21c86" kindref="member">nrfx_clock_lfclk_start</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="164"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="165"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>stopping<sp/>the<sp/>LFCLK.</highlight></codeline>
<codeline lineno="166"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="167"><highlight class="comment"><sp/>*<sp/>@note<sp/>This<sp/>function<sp/>is<sp/>deprecated.<sp/>Use<sp/>@ref<sp/>nrfx_clock_stop<sp/>instead.</highlight></codeline>
<codeline lineno="168"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal">NRFX_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrfx__clock_1ga25cca029e00013aea860df9e4cf9a9fc" kindref="member">nrfx_clock_lfclk_stop</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="171"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="172"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>checking<sp/>the<sp/>LFCLK<sp/>state.</highlight></codeline>
<codeline lineno="173"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="174"><highlight class="comment"><sp/>*<sp/>@note<sp/>This<sp/>function<sp/>is<sp/>deprecated.<sp/>Use<sp/>@ref<sp/>nrfx_clock_is_running<sp/>instead.</highlight></codeline>
<codeline lineno="175"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="176"><highlight class="comment"><sp/>*<sp/>@retval<sp/>true<sp/><sp/>The<sp/>LFCLK<sp/>is<sp/>running.</highlight></codeline>
<codeline lineno="177"><highlight class="comment"><sp/>*<sp/>@retval<sp/>false<sp/>The<sp/>LFCLK<sp/>is<sp/>not<sp/>running.</highlight></codeline>
<codeline lineno="178"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal">NRFX_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrfx__clock_1ga01576d0ccbebc3ca530add443194c92e" kindref="member">nrfx_clock_lfclk_is_running</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="181"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="182"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>starting<sp/>the<sp/>high-accuracy<sp/>source<sp/>HFCLK.</highlight></codeline>
<codeline lineno="183"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="184"><highlight class="comment"><sp/>*<sp/>@note<sp/>This<sp/>function<sp/>is<sp/>deprecated.<sp/>Use<sp/>@ref<sp/>nrfx_clock_start<sp/>instead.</highlight></codeline>
<codeline lineno="185"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal">NRFX_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrfx__clock_1ga82276baf92a67846fb23943038646d1d" kindref="member">nrfx_clock_hfclk_start</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="188"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="189"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>stopping<sp/>the<sp/>external<sp/>high-accuracy<sp/>source<sp/>HFCLK.</highlight></codeline>
<codeline lineno="190"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="191"><highlight class="comment"><sp/>*<sp/>@note<sp/>This<sp/>function<sp/>is<sp/>deprecated.<sp/>Use<sp/>@ref<sp/>nrfx_clock_stop<sp/>instead.</highlight></codeline>
<codeline lineno="192"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal">NRFX_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrfx__clock_1ga3737dd4bbb18008dc4a02d6733e6d526" kindref="member">nrfx_clock_hfclk_stop</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="195"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="196"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>checking<sp/>the<sp/>HFCLK<sp/>state.</highlight></codeline>
<codeline lineno="197"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="198"><highlight class="comment"><sp/>*<sp/>@note<sp/>This<sp/>function<sp/>is<sp/>deprecated.<sp/>Use<sp/>@ref<sp/>nrfx_clock_is_running<sp/>instead.</highlight></codeline>
<codeline lineno="199"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="200"><highlight class="comment"><sp/>*<sp/>@retval<sp/>true<sp/><sp/>The<sp/>HFCLK<sp/>is<sp/>running<sp/>(XTAL<sp/>source).</highlight></codeline>
<codeline lineno="201"><highlight class="comment"><sp/>*<sp/>@retval<sp/>false<sp/>The<sp/>HFCLK<sp/>is<sp/>not<sp/>running.</highlight></codeline>
<codeline lineno="202"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal">NRFX_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrfx__clock_1ga13f55dfedb4b48b27c861b28eb3656bc" kindref="member">nrfx_clock_hfclk_is_running</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_CLOCK_HAS_HFCLKAUDIO<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="207"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="208"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>the<sp/>HFCLKAUDIO<sp/>configuration.</highlight></codeline>
<codeline lineno="209"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="210"><highlight class="comment"><sp/>*<sp/>The<sp/>frequency<sp/>of<sp/>HFCLKAUDIO<sp/>ranges<sp/>from<sp/>10.666<sp/>MHz<sp/>to<sp/>13.333<sp/>MHz<sp/>in<sp/>40.7<sp/>Hz<sp/>steps.</highlight></codeline>
<codeline lineno="211"><highlight class="comment"><sp/>*<sp/>To<sp/>calculate<sp/>@p<sp/>freq_value<sp/>corresponding<sp/>to<sp/>the<sp/>chosen<sp/>frequency,<sp/>use<sp/>the<sp/>following<sp/>equation:</highlight></codeline>
<codeline lineno="212"><highlight class="comment"><sp/>*<sp/>FREQ_VALUE<sp/>=<sp/>2^16<sp/>*<sp/>((12<sp/>*<sp/>f_out<sp/>/<sp/>32M)<sp/>-<sp/>4)</highlight></codeline>
<codeline lineno="213"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="214"><highlight class="comment"><sp/>*<sp/>@warning<sp/>Chosen<sp/>frequency<sp/>must<sp/>fit<sp/>in<sp/>11.176<sp/>MHz<sp/>-<sp/>11.402<sp/>MHz<sp/>or<sp/>12.165<sp/>MHz<sp/>-<sp/>12.411<sp/>MHz</highlight></codeline>
<codeline lineno="215"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>frequency<sp/>bands.</highlight></codeline>
<codeline lineno="216"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="217"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>freq_value<sp/>New<sp/>FREQ_VALUE<sp/>for<sp/>HFCLKAUDIO.</highlight></codeline>
<codeline lineno="218"><highlight class="comment"><sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal">NRFX_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrfx__clock_1gac340aa1965fb58abd712e4b0dde86898" kindref="member">nrfx_clock_hfclkaudio_config_set</ref>(uint16_t<sp/>freq_value);</highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="221"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="222"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>the<sp/>HFCLKAUDIO<sp/>configuration.</highlight></codeline>
<codeline lineno="223"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="224"><highlight class="comment"><sp/>*<sp/>The<sp/>frequency<sp/>of<sp/>HFCLKAUDIO<sp/>ranges<sp/>from<sp/>10.666<sp/>MHz<sp/>to<sp/>13.333<sp/>MHz<sp/>in<sp/>40.7<sp/>Hz<sp/>steps.</highlight></codeline>
<codeline lineno="225"><highlight class="comment"><sp/>*<sp/>To<sp/>calculate<sp/>frequency<sp/>corresponding<sp/>to<sp/>the<sp/>returned<sp/>FREQ_VALUE,<sp/>use<sp/>the<sp/>following<sp/>equation:</highlight></codeline>
<codeline lineno="226"><highlight class="comment"><sp/>*<sp/>f_out<sp/>=<sp/>32M<sp/>*<sp/>(4<sp/>+<sp/>FREQ_VALUE<sp/>*<sp/>2^(-16))/12</highlight></codeline>
<codeline lineno="227"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="228"><highlight class="comment"><sp/>*<sp/>@return<sp/>Current<sp/>value<sp/>of<sp/>FREQ_VALUE<sp/>for<sp/>HFCLKAUDIO.</highlight></codeline>
<codeline lineno="229"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal">NRFX_STATIC_INLINE<sp/>uint16_t<sp/><ref refid="group__nrfx__clock_1ga8cb2237b355f32ff611880fe9d36f537" kindref="member">nrfx_clock_hfclkaudio_config_get</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(NRF_CLOCK_HAS_CALIBRATION<sp/>&amp;&amp;<sp/>NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED))<sp/>||<sp/>\</highlight></codeline>
<codeline lineno="234"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="235"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="236"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>starting<sp/>the<sp/>calibration<sp/>of<sp/>internal<sp/>LFCLK.</highlight></codeline>
<codeline lineno="237"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="238"><highlight class="comment"><sp/>*<sp/>This<sp/>function<sp/>starts<sp/>the<sp/>calibration<sp/>process.<sp/>The<sp/>process<sp/>cannot<sp/>be<sp/>aborted.<sp/>LFCLK<sp/>and<sp/>HFCLK</highlight></codeline>
<codeline lineno="239"><highlight class="comment"><sp/>*<sp/>must<sp/>be<sp/>running<sp/>before<sp/>this<sp/>function<sp/>is<sp/>called.</highlight></codeline>
<codeline lineno="240"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="241"><highlight class="comment"><sp/>*<sp/>@retval<sp/>NRFX_SUCCESS<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>procedure<sp/>is<sp/>successful.</highlight></codeline>
<codeline lineno="242"><highlight class="comment"><sp/>*<sp/>@retval<sp/>NRFX_ERROR_INVALID_STATE<sp/>The<sp/>low-frequency<sp/>of<sp/>high-frequency<sp/>clock<sp/>is<sp/>off.</highlight></codeline>
<codeline lineno="243"><highlight class="comment"><sp/>*<sp/>@retval<sp/>NRFX_ERROR_BUSY<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Clock<sp/>is<sp/>in<sp/>the<sp/>calibration<sp/>phase.</highlight></codeline>
<codeline lineno="244"><highlight class="comment"><sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"><ref refid="group__nrfx__error__codes_1ga2449720f8fa17b22243218068459a24b" kindref="member">nrfx_err_t</ref><sp/><ref refid="group__nrfx__clock_1ga932408ae0df1555998adf6ddee6d8d95" kindref="member">nrfx_clock_calibration_start</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="247"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="248"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>checking<sp/>if<sp/>calibration<sp/>is<sp/>in<sp/>progress.</highlight></codeline>
<codeline lineno="249"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="250"><highlight class="comment"><sp/>*<sp/>This<sp/>function<sp/>indicates<sp/>that<sp/>the<sp/>system<sp/>is<sp/>in<sp/>calibration<sp/>phase.</highlight></codeline>
<codeline lineno="251"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="252"><highlight class="comment"><sp/>*<sp/>@retval<sp/>NRFX_SUCCESS<sp/><sp/><sp/><sp/>The<sp/>procedure<sp/>is<sp/>successful.</highlight></codeline>
<codeline lineno="253"><highlight class="comment"><sp/>*<sp/>@retval<sp/>NRFX_ERROR_BUSY<sp/>Clock<sp/>is<sp/>in<sp/>the<sp/>calibration<sp/>phase.</highlight></codeline>
<codeline lineno="254"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"><ref refid="group__nrfx__error__codes_1ga2449720f8fa17b22243218068459a24b" kindref="member">nrfx_err_t</ref><sp/><ref refid="group__nrfx__clock_1ga5886931a5275d62bb0f4918b45ab2697" kindref="member">nrfx_clock_is_calibrating</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(NRF_CLOCK_HAS_CALIBRATION_TIMER<sp/>&amp;&amp;<sp/>NRFX_CHECK(NRFX_CLOCK_CONFIG_CT_ENABLED))<sp/>||<sp/>\</highlight></codeline>
<codeline lineno="258"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="259"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="260"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>starting<sp/>calibration<sp/>timer.</highlight></codeline>
<codeline lineno="261"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="262"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>interval<sp/>Time<sp/>after<sp/>which<sp/>the<sp/>CTTO<sp/>event<sp/>and<sp/>interrupt<sp/>will<sp/>be<sp/>generated<sp/>(in<sp/>0.25<sp/>s<sp/>units).</highlight></codeline>
<codeline lineno="263"><highlight class="comment"><sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrfx__clock_1gaa44024508cd21c3c4d3f8495ca373250" kindref="member">nrfx_clock_calibration_timer_start</ref>(uint8_t<sp/>interval);</highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="266"><highlight class="comment">/**<sp/>@brief<sp/>Function<sp/>for<sp/>stopping<sp/>the<sp/>calibration<sp/>timer.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrfx__clock_1ga10ae5f204aeced69133f417ae708a8ff" kindref="member">nrfx_clock_calibration_timer_stop</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>(NRF_CLOCK_HAS_CALIBRATION<sp/>&amp;&amp;<sp/>NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED))<sp/>||<sp/>\</highlight></codeline>
<codeline lineno="270"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>defined(__NRFX_DOXYGEN__)<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="272"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="273"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>returning<sp/>a<sp/>requested<sp/>task<sp/>address<sp/>for<sp/>the<sp/>clock<sp/>driver<sp/>module.</highlight></codeline>
<codeline lineno="274"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="275"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>task<sp/>One<sp/>of<sp/>the<sp/>peripheral<sp/>tasks.</highlight></codeline>
<codeline lineno="276"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="277"><highlight class="comment"><sp/>*<sp/>@return<sp/>Task<sp/>address.</highlight></codeline>
<codeline lineno="278"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal">NRFX_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrfx__clock_1gac9cd3143caf49840e911c2d01e99fb93" kindref="member">nrfx_clock_task_address_get</ref>(<ref refid="group__nrf__clock__hal_1ga6bf1711bc8cb7614c8ae806155bd3f33" kindref="member">nrf_clock_task_t</ref><sp/>task);</highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="281"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="282"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>returning<sp/>a<sp/>requested<sp/>event<sp/>address<sp/>for<sp/>the<sp/>clock<sp/>driver<sp/>module.</highlight></codeline>
<codeline lineno="283"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="284"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>event<sp/>One<sp/>of<sp/>the<sp/>peripheral<sp/>events.</highlight></codeline>
<codeline lineno="285"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="286"><highlight class="comment"><sp/>*<sp/>@return<sp/>Event<sp/>address.</highlight></codeline>
<codeline lineno="287"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal">NRFX_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrfx__clock_1ga50e51e62b438c1cd3fefd236928104dd" kindref="member">nrfx_clock_event_address_get</ref>(<ref refid="group__nrf__clock__hal_1ga8843dd5805c2b01f9b832ed73d583695" kindref="member">nrf_clock_event_t</ref><sp/>event);</highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>NRFX_DECLARE_ONLY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(CLOCK_FEATURE_HFCLK_DIVIDE_PRESENT)<sp/>||<sp/>NRF_CLOCK_HAS_HFCLK192M</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal">NRFX_STATIC_INLINE<sp/><ref refid="group__nrf__clock__hal_1ga4ae12749dff0c4975b250728d6de0ad6" kindref="member">nrf_clock_hfclk_div_t</ref><sp/><ref refid="group__nrfx__clock_1ga44f8fd4e7abedb0643bd313d7b300fd0" kindref="member">nrfx_clock_divider_get</ref>(<ref refid="group__nrf__clock__hal_1ga1739a9f32e7efbf83dc6e773b05211c1" kindref="member">nrf_clock_domain_t</ref><sp/>domain)</highlight></codeline>
<codeline lineno="294"><highlight class="normal">{</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(domain)</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(CLOCK_FEATURE_HFCLK_DIVIDE_PRESENT)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>NRF_CLOCK_DOMAIN_HFCLK:</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>nrf_clock_hfclk_div_get(NRF_CLOCK);</highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_CLOCK_HAS_HFCLK192M</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>NRF_CLOCK_DOMAIN_HFCLK192M:</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__nrf__clock__hal_1ga53f5fd112e0c314b3b2fd677ad029246" kindref="member">nrf_clock_hfclk192m_div_get</ref>(NRF_CLOCK);</highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrfx__glue_1ga9698a3f6b6bea455d2b54a79e514ee36" kindref="member">NRFX_ASSERT</ref>(0);</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="group__nrf__clock__hal_1ga4ae12749dff0c4975b250728d6de0ad6" kindref="member">nrf_clock_hfclk_div_t</ref>)0;</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="309"><highlight class="normal">}</highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>defined(CLOCK_FEATURE_HFCLK_DIVIDE_PRESENT)<sp/>||<sp/>NRF_CLOCK_HAS_HFCLK192M</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal">NRFX_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrfx__clock_1gaf6405fe6e9394d83bdb9890106b21c86" kindref="member">nrfx_clock_lfclk_start</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="313"><highlight class="normal">{</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__clock_1ga24fa01bb4b859ff01b3cc6cfdb526a7f" kindref="member">nrfx_clock_start</ref>(NRF_CLOCK_DOMAIN_LFCLK);</highlight></codeline>
<codeline lineno="315"><highlight class="normal">}</highlight></codeline>
<codeline lineno="316"><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal">NRFX_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrfx__clock_1ga25cca029e00013aea860df9e4cf9a9fc" kindref="member">nrfx_clock_lfclk_stop</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="318"><highlight class="normal">{</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__clock_1gae6d17f0c0044976379550d7edc34c103" kindref="member">nrfx_clock_stop</ref>(NRF_CLOCK_DOMAIN_LFCLK);</highlight></codeline>
<codeline lineno="320"><highlight class="normal">}</highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal">NRFX_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrfx__clock_1ga82276baf92a67846fb23943038646d1d" kindref="member">nrfx_clock_hfclk_start</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="323"><highlight class="normal">{</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__clock_1ga24fa01bb4b859ff01b3cc6cfdb526a7f" kindref="member">nrfx_clock_start</ref>(NRF_CLOCK_DOMAIN_HFCLK);</highlight></codeline>
<codeline lineno="325"><highlight class="normal">}</highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal">NRFX_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrfx__clock_1ga3737dd4bbb18008dc4a02d6733e6d526" kindref="member">nrfx_clock_hfclk_stop</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="328"><highlight class="normal">{</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__clock_1gae6d17f0c0044976379550d7edc34c103" kindref="member">nrfx_clock_stop</ref>(NRF_CLOCK_DOMAIN_HFCLK);</highlight></codeline>
<codeline lineno="330"><highlight class="normal">}</highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal">NRFX_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrfx__clock_1gac9cd3143caf49840e911c2d01e99fb93" kindref="member">nrfx_clock_task_address_get</ref>(<ref refid="group__nrf__clock__hal_1ga6bf1711bc8cb7614c8ae806155bd3f33" kindref="member">nrf_clock_task_t</ref><sp/>task)</highlight></codeline>
<codeline lineno="333"><highlight class="normal">{</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__nrf__clock__hal_1gab667ae60ddf82e1e8bd4ffced897af0c" kindref="member">nrf_clock_task_address_get</ref>(NRF_CLOCK,<sp/>task);</highlight></codeline>
<codeline lineno="335"><highlight class="normal">}</highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal">NRFX_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrfx__clock_1ga50e51e62b438c1cd3fefd236928104dd" kindref="member">nrfx_clock_event_address_get</ref>(<ref refid="group__nrf__clock__hal_1ga8843dd5805c2b01f9b832ed73d583695" kindref="member">nrf_clock_event_t</ref><sp/>event)</highlight></codeline>
<codeline lineno="338"><highlight class="normal">{</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__nrf__clock__hal_1gab6633ed4e3965b482f4bcf82084ced89" kindref="member">nrf_clock_event_address_get</ref>(NRF_CLOCK,<sp/>event);</highlight></codeline>
<codeline lineno="340"><highlight class="normal">}</highlight></codeline>
<codeline lineno="341"><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal">NRFX_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrfx__clock_1gaa2695758f2fb17065a77c96f097b5a57" kindref="member">nrfx_clock_is_running</ref>(<ref refid="group__nrf__clock__hal_1ga1739a9f32e7efbf83dc6e773b05211c1" kindref="member">nrf_clock_domain_t</ref><sp/>domain,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/>p_clk_src)</highlight></codeline>
<codeline lineno="343"><highlight class="normal">{</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__nrf__clock__hal_1gacdce7b3bd39e2466a100f16b41ac72d1" kindref="member">nrf_clock_is_running</ref>(NRF_CLOCK,<sp/>domain,<sp/>p_clk_src);</highlight></codeline>
<codeline lineno="345"><highlight class="normal">}</highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal">NRFX_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrfx__clock_1ga13f55dfedb4b48b27c861b28eb3656bc" kindref="member">nrfx_clock_hfclk_is_running</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="348"><highlight class="normal">{</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__clock__hal_1gac89aad0e037b7aeefc5264a4dca76197" kindref="member">nrf_clock_hfclk_t</ref><sp/>clk_src;</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ret<sp/>=<sp/><ref refid="group__nrfx__clock_1gaa2695758f2fb17065a77c96f097b5a57" kindref="member">nrfx_clock_is_running</ref>(NRF_CLOCK_DOMAIN_HFCLK,<sp/>&amp;clk_src);</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(ret<sp/>&amp;&amp;<sp/>(clk_src<sp/>==<sp/><ref refid="group__nrf__clock__hal_1ggac89aad0e037b7aeefc5264a4dca76197acd16ac7a514b4ce5fad5229330d3ee91" kindref="member">NRF_CLOCK_HFCLK_HIGH_ACCURACY</ref>));</highlight></codeline>
<codeline lineno="352"><highlight class="normal">}</highlight></codeline>
<codeline lineno="353"><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal">NRFX_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrfx__clock_1ga01576d0ccbebc3ca530add443194c92e" kindref="member">nrfx_clock_lfclk_is_running</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="355"><highlight class="normal">{</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__nrfx__clock_1gaa2695758f2fb17065a77c96f097b5a57" kindref="member">nrfx_clock_is_running</ref>(NRF_CLOCK_DOMAIN_LFCLK,<sp/>NULL);</highlight></codeline>
<codeline lineno="357"><highlight class="normal">}</highlight></codeline>
<codeline lineno="358"><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_CLOCK_HAS_HFCLKAUDIO</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal">NRFX_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrfx__clock_1gac340aa1965fb58abd712e4b0dde86898" kindref="member">nrfx_clock_hfclkaudio_config_set</ref>(uint16_t<sp/>freq_value)</highlight></codeline>
<codeline lineno="362"><highlight class="normal">{</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__clock__hal_1gaf44598c429dfbfcc55d482e11bdf1d4b" kindref="member">nrf_clock_hfclkaudio_config_set</ref>(NRF_CLOCK,<sp/>freq_value);</highlight></codeline>
<codeline lineno="364"><highlight class="normal">}</highlight></codeline>
<codeline lineno="365"><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal">NRFX_STATIC_INLINE<sp/>uint16_t<sp/><ref refid="group__nrfx__clock_1ga8cb2237b355f32ff611880fe9d36f537" kindref="member">nrfx_clock_hfclkaudio_config_get</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="367"><highlight class="normal">{</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__nrf__clock__hal_1gaba822bac96cbd67e5f9f255af89a1f5e" kindref="member">nrf_clock_hfclkaudio_config_get</ref>(NRF_CLOCK);</highlight></codeline>
<codeline lineno="369"><highlight class="normal">}</highlight></codeline>
<codeline lineno="370"><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRFX_DECLARE_ONLY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="375"><highlight class="comment">/**<sp/>@}<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>nrfx_clock_irq_handler(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="379"><highlight class="normal"></highlight></codeline>
<codeline lineno="380"><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal">}</highlight></codeline>
<codeline lineno="383"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal"></highlight></codeline>
<codeline lineno="385"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRFX_CLOCK_H__</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="drivers/include/nrfx_clock.h"/>
  </compounddef>
</doxygen>
