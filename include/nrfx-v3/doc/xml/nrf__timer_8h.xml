<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="nrf__timer_8h" kind="file" language="C++">
    <compoundname>nrf_timer.h</compoundname>
    <includes local="no">nrfx.h</includes>
    <includedby refid="nrfy__timer_8h" local="no">haly/nrfy_timer.h</includedby>
    <incdepgraph>
      <node id="1">
        <label>hal/nrf_timer.h</label>
        <link refid="nrf__timer_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>nrfx.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__nrf__timer__hal_1ga2e0e97a97cb4193ec2bb6665c1d03ea4" prot="public" static="no">
        <name>NRF_TIMER_INST_GET</name>
        <param><defname>idx</defname></param>
        <initializer><ref refid="group__nrfx__utils_1ga5ea61d0994f6fb1ab5ed59d44f6a7ce9" kindref="member">NRFX_CONCAT</ref>(NRF_, TIMER, idx)</initializer>
        <briefdescription>
<para>Macro getting pointer to the structure of registers of the TIMER peripheral. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">idx</parametername>
</parameternamelist>
<parameterdescription>
<para>TIMER instance index.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to the structure of registers of the TIMER peripheral. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_timer.h" line="57" column="9" bodyfile="hal/nrf_timer.h" bodystart="57" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__timer__hal_1ga1bba9a2d5b5d268daa49f777eb66d89d" prot="public" static="no">
        <name>NRF_TIMER_HAS_CC4</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Symbol indicating whether timer has capture/compare channel 4. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_timer.h" line="61" column="9" bodyfile="hal/nrf_timer.h" bodystart="61" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__timer__hal_1ga5929343e0b043042aeab0c7f68cde351" prot="public" static="no">
        <name>NRF_TIMER_HAS_CC5</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Symbol indicating whether timer has capture/compare channel 5. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_timer.h" line="68" column="9" bodyfile="hal/nrf_timer.h" bodystart="68" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__timer__hal_1ga2b1b0d9c6a68516883ce773fe3a8ec3c" prot="public" static="no">
        <name>NRF_TIMER_HAS_CC6</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Symbol indicating whether timer has capture/compare channel 6. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_timer.h" line="75" column="9" bodyfile="hal/nrf_timer.h" bodystart="75" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__timer__hal_1ga64e0e1c01b3cf4ba27534a35b258bcc9" prot="public" static="no">
        <name>NRF_TIMER_HAS_CC7</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Symbol indicating whether timer has capture/compare channel 7. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_timer.h" line="82" column="9" bodyfile="hal/nrf_timer.h" bodystart="82" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__timer__hal_1gae8beb8e2005eba43128e68ed573212db" prot="public" static="no">
        <name>NRF_TIMER_HAS_LOW_POWER_MODE</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Symbol indicating whether timer supports low power mode. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_timer.h" line="89" column="9" bodyfile="hal/nrf_timer.h" bodystart="89" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__timer__hal_1ga6167b2cca06829969f545c07bf7bee05" prot="public" static="no">
        <name>NRF_TIMER_HAS_ONE_SHOT</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Symbol indicating whether timer supports one-shot operation. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_timer.h" line="96" column="9" bodyfile="hal/nrf_timer.h" bodystart="96" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__timer__hal_1ga73f8bac6d9fc9a98f64f8114e2ce00c0" prot="public" static="no">
        <name>NRF_TIMER_BASE_FREQUENCY_320MHZ</name>
        <initializer>(<ref refid="group__nrfx__common_1ga30e3c68cc0831c3bd64574a0a64439cc" kindref="member">NRFX_MHZ_TO_HZ</ref>(320UL))</initializer>
        <briefdescription>
<para>Base frequency value 320 MHz for TIMER. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_timer.h" line="102" column="9" bodyfile="hal/nrf_timer.h" bodystart="102" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__timer__hal_1ga2e43f129d140d409a491436f7988f923" prot="public" static="no">
        <name>NRF_TIMER_BASE_FREQUENCY_128MHZ</name>
        <initializer>(<ref refid="group__nrfx__common_1ga30e3c68cc0831c3bd64574a0a64439cc" kindref="member">NRFX_MHZ_TO_HZ</ref>(128UL))</initializer>
        <briefdescription>
<para>Base frequency value 128 MHz for TIMER. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_timer.h" line="104" column="9" bodyfile="hal/nrf_timer.h" bodystart="104" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__timer__hal_1gad3ac936a9bc470ab107a28711b1a6a2b" prot="public" static="no">
        <name>NRF_TIMER_BASE_FREQUENCY_64MHZ</name>
        <initializer>(<ref refid="group__nrfx__common_1ga30e3c68cc0831c3bd64574a0a64439cc" kindref="member">NRFX_MHZ_TO_HZ</ref>(64UL))</initializer>
        <briefdescription>
<para>Base frequency value 64 MHz for TIMER. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_timer.h" line="106" column="9" bodyfile="hal/nrf_timer.h" bodystart="106" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__timer__hal_1gac548befeaf0379d5a691eb1fee474197" prot="public" static="no">
        <name>NRF_TIMER_BASE_FREQUENCY_32MHZ</name>
        <initializer>(<ref refid="group__nrfx__common_1ga30e3c68cc0831c3bd64574a0a64439cc" kindref="member">NRFX_MHZ_TO_HZ</ref>(32UL))</initializer>
        <briefdescription>
<para>Base frequency value 32 MHz for TIMER. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_timer.h" line="108" column="9" bodyfile="hal/nrf_timer.h" bodystart="108" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__timer__hal_1ga10dc600fe7ff7d27204f781236a391e1" prot="public" static="no">
        <name>NRF_TIMER_BASE_FREQUENCY_16MHZ</name>
        <initializer>(<ref refid="group__nrfx__common_1ga30e3c68cc0831c3bd64574a0a64439cc" kindref="member">NRFX_MHZ_TO_HZ</ref>(16UL))</initializer>
        <briefdescription>
<para>Base frequency value 16 MHz for TIMER. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_timer.h" line="110" column="9" bodyfile="hal/nrf_timer.h" bodystart="110" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__timer__hal_1ga0206996722160e725012e56ff212f937" prot="public" static="no">
        <name>NRF_TIMER_PRESCALER_MAX</name>
        <initializer>TIMER_PRESCALER_PRESCALER_Max</initializer>
        <briefdescription>
<para>Maximum value of PRESCALER register. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_timer.h" line="114" column="9" bodyfile="hal/nrf_timer.h" bodystart="114" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__timer__hal_1gac1ee97cfd80755ba6774e27396e6ca8d" prot="public" static="no">
        <name>TIMER_MAX_SIZE</name>
        <param><defname>id</defname></param>
        <initializer><ref refid="group__nrfx__common_1gaa78d21b07d22f7a4bfbd1feda51ef1f4" kindref="member">NRFX_CONCAT_3</ref>(TIMER, id, _MAX_SIZE)</initializer>
        <briefdescription>
<para>Macro for getting the maximum bit resolution of the specified timer instance. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">id</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of the specified timer instance.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>Maximum</parametername>
</parameternamelist>
<parameterdescription>
<para>bit resolution of the specified timer instance. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_timer.h" line="126" column="9" bodyfile="hal/nrf_timer.h" bodystart="126" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__timer__hal_1ga36b5cf0a8ef3d8a94269617a2d7170d4" prot="public" static="no">
        <name>TIMER_BIT_WIDTH_MAX</name>
        <param><defname>id</defname></param>
        <param><defname>bit_width</defname></param>
        <initializer>    (<ref refid="group__nrf__timer__hal_1gac1ee97cfd80755ba6774e27396e6ca8d" kindref="member">TIMER_MAX_SIZE</ref>(id) == 8   ? (bit_width == <ref refid="group__nrf__timer__hal_1gga567f81d672267a218a5b2f0155be3043aa6474251dab8733df9c2d6e5c00504b4" kindref="member">NRF_TIMER_BIT_WIDTH_8</ref>)  :  \
    (<ref refid="group__nrf__timer__hal_1gac1ee97cfd80755ba6774e27396e6ca8d" kindref="member">TIMER_MAX_SIZE</ref>(id) == 16  ? (bit_width == <ref refid="group__nrf__timer__hal_1gga567f81d672267a218a5b2f0155be3043aa6474251dab8733df9c2d6e5c00504b4" kindref="member">NRF_TIMER_BIT_WIDTH_8</ref>)  || \
                                 (bit_width == <ref refid="group__nrf__timer__hal_1gga567f81d672267a218a5b2f0155be3043a4c8f9ba039c905e7d207203ad06e8d4d" kindref="member">NRF_TIMER_BIT_WIDTH_16</ref>)  : \
    (<ref refid="group__nrf__timer__hal_1gac1ee97cfd80755ba6774e27396e6ca8d" kindref="member">TIMER_MAX_SIZE</ref>(id) == 24  ? (bit_width == <ref refid="group__nrf__timer__hal_1gga567f81d672267a218a5b2f0155be3043aa6474251dab8733df9c2d6e5c00504b4" kindref="member">NRF_TIMER_BIT_WIDTH_8</ref>)  || \
                                 (bit_width == <ref refid="group__nrf__timer__hal_1gga567f81d672267a218a5b2f0155be3043a4c8f9ba039c905e7d207203ad06e8d4d" kindref="member">NRF_TIMER_BIT_WIDTH_16</ref>) || \
                                 (bit_width == <ref refid="group__nrf__timer__hal_1gga567f81d672267a218a5b2f0155be3043a86bf8b22c7433f96a050fdeacbb89d5d" kindref="member">NRF_TIMER_BIT_WIDTH_24</ref>) :  \
    (<ref refid="group__nrf__timer__hal_1gac1ee97cfd80755ba6774e27396e6ca8d" kindref="member">TIMER_MAX_SIZE</ref>(id) == 32  ? (bit_width == <ref refid="group__nrf__timer__hal_1gga567f81d672267a218a5b2f0155be3043aa6474251dab8733df9c2d6e5c00504b4" kindref="member">NRF_TIMER_BIT_WIDTH_8</ref>)  || \
                                 (bit_width == <ref refid="group__nrf__timer__hal_1gga567f81d672267a218a5b2f0155be3043a4c8f9ba039c905e7d207203ad06e8d4d" kindref="member">NRF_TIMER_BIT_WIDTH_16</ref>) || \
                                 (bit_width == <ref refid="group__nrf__timer__hal_1gga567f81d672267a218a5b2f0155be3043a86bf8b22c7433f96a050fdeacbb89d5d" kindref="member">NRF_TIMER_BIT_WIDTH_24</ref>) || \
                                 (bit_width == <ref refid="group__nrf__timer__hal_1gga567f81d672267a218a5b2f0155be3043ab2e052c7b94c85bff69d313c50a630a5" kindref="member">NRF_TIMER_BIT_WIDTH_32</ref>) :  \
    false))))</initializer>
        <briefdescription>
<para>Macro for validating the correctness of the bit width resolution setting. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">id</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of the specified timer instance. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">bit_width</parametername>
</parameternamelist>
<parameterdescription>
<para>Bit width resolution value to be checked.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>Timer instance supports the specified bit width resolution value. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>Timer instance does not support the specified bit width resolution value. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_timer.h" line="137" column="9" bodyfile="hal/nrf_timer.h" bodystart="137" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__timer__hal_1gaca75b92f9c105ebc42eed1390fd8dfee" prot="public" static="no">
        <name>NRF_TIMER_IS_BIT_WIDTH_VALID</name>
        <param><defname>p_reg</defname></param>
        <param><defname>bit_width</defname></param>
        <briefdescription>
<para>Macro for checking correctness of bit width configuration for the specified timer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Timer instance register. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">bit_width</parametername>
</parameternamelist>
<parameterdescription>
<para>Bit width resolution value to be checked.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>Timer instance supports the specified bit width resolution value. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>Timer instance does not support the specified bit width resolution value. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_timer.h" line="159" column="9" bodyfile="hal/nrf_timer.h" bodystart="159" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__timer__hal_1ga15223384d2f89ad36b96aada9aab509f" prot="public" static="no">
        <name>NRF_TIMER_IS_320MHZ_TIMER</name>
        <param><defname>p_reg</defname></param>
        <initializer>    (<ref refid="group__nrfx__utils_1ga3759226de0d998545425ded334168058" kindref="member">NRFX_COND_CODE_1</ref>(<ref refid="group__nrfx__common_1ga9cc7f9da377228c1f0b191bd660577af" kindref="member">NRFX_INSTANCE_PRESENT</ref>(TIMER120), (p_reg == NRF_TIMER120), (false)) || \
     <ref refid="group__nrfx__utils_1ga3759226de0d998545425ded334168058" kindref="member">NRFX_COND_CODE_1</ref>(<ref refid="group__nrfx__common_1ga9cc7f9da377228c1f0b191bd660577af" kindref="member">NRFX_INSTANCE_PRESENT</ref>(TIMER121), (p_reg == NRF_TIMER121), (false)))</initializer>
        <briefdescription>
<para>Macro for checking whether the base frequency for the specified timer is 320 MHz. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_timer.h" line="211" column="9" bodyfile="hal/nrf_timer.h" bodystart="211" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__timer__hal_1gaf4ee713f133b991c4267f9d0c5839cd8" prot="public" static="no">
        <name>NRF_TIMER_IS_128MHZ_TIMER</name>
        <param><defname>p_reg</defname></param>
        <initializer>    (<ref refid="group__nrfx__utils_1ga3759226de0d998545425ded334168058" kindref="member">NRFX_COND_CODE_1</ref>(<ref refid="group__nrfx__utils_1ga238278032464c932dc46946bedd44473" kindref="member">NRFX_IS_ENABLED</ref>(NRF_CPU_FREQ_IS_128MHZ),                               \
        (<ref refid="group__nrfx__utils_1ga3759226de0d998545425ded334168058" kindref="member">NRFX_COND_CODE_1</ref>(<ref refid="group__nrfx__common_1ga9cc7f9da377228c1f0b191bd660577af" kindref="member">NRFX_INSTANCE_PRESENT</ref>(TIMER00), (p_reg == NRF_TIMER00), (false))), \
        (false)))</initializer>
        <briefdescription>
<para>Macro for checking whether the base frequency for the specified timer is 128 MHz. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_timer.h" line="218" column="9" bodyfile="hal/nrf_timer.h" bodystart="218" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__timer__hal_1ga88b543fbb177b6f8f2c9378d6dd00615" prot="public" static="no">
        <name>NRF_TIMER_IS_64MHZ_TIMER</name>
        <param><defname>p_reg</defname></param>
        <initializer>    (<ref refid="group__nrfx__utils_1ga3759226de0d998545425ded334168058" kindref="member">NRFX_COND_CODE_1</ref>(<ref refid="group__nrfx__utils_1ga238278032464c932dc46946bedd44473" kindref="member">NRFX_IS_ENABLED</ref>(NRF_CPU_FREQ_IS_64MHZ),                                \
        (<ref refid="group__nrfx__utils_1ga3759226de0d998545425ded334168058" kindref="member">NRFX_COND_CODE_1</ref>(<ref refid="group__nrfx__common_1ga9cc7f9da377228c1f0b191bd660577af" kindref="member">NRFX_INSTANCE_PRESENT</ref>(TIMER00), (p_reg == NRF_TIMER00), (false))), \
        (false)))</initializer>
        <briefdescription>
<para>Macro for checking whether the base frequency for the specified timer is 64 MHz. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_timer.h" line="226" column="9" bodyfile="hal/nrf_timer.h" bodystart="226" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__timer__hal_1gaee09ea134dae78c7b3e42634416324cf" prot="public" static="no">
        <name>NRF_TIMER_IS_32MHZ_TIMER</name>
        <param><defname>p_reg</defname></param>
        <initializer>    (<ref refid="group__nrfx__utils_1ga3759226de0d998545425ded334168058" kindref="member">NRFX_COND_CODE_1</ref>(<ref refid="group__nrfx__common_1ga9cc7f9da377228c1f0b191bd660577af" kindref="member">NRFX_INSTANCE_PRESENT</ref>(TIMER020), (p_reg == NRF_TIMER020), (false)) || \
     <ref refid="group__nrfx__utils_1ga3759226de0d998545425ded334168058" kindref="member">NRFX_COND_CODE_1</ref>(<ref refid="group__nrfx__common_1ga9cc7f9da377228c1f0b191bd660577af" kindref="member">NRFX_INSTANCE_PRESENT</ref>(TIMER021), (p_reg == NRF_TIMER021), (false)) || \
     <ref refid="group__nrfx__utils_1ga3759226de0d998545425ded334168058" kindref="member">NRFX_COND_CODE_1</ref>(<ref refid="group__nrfx__common_1ga9cc7f9da377228c1f0b191bd660577af" kindref="member">NRFX_INSTANCE_PRESENT</ref>(TIMER022), (p_reg == NRF_TIMER022), (false)) || \
     <ref refid="group__nrfx__utils_1ga3759226de0d998545425ded334168058" kindref="member">NRFX_COND_CODE_1</ref>(<ref refid="group__nrfx__common_1ga9cc7f9da377228c1f0b191bd660577af" kindref="member">NRFX_INSTANCE_PRESENT</ref>(TIMER10),  (p_reg == NRF_TIMER10),  (false)))</initializer>
        <briefdescription>
<para>Macro for checking whether the base frequency for the specified timer is 32 MHz. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_timer.h" line="234" column="9" bodyfile="hal/nrf_timer.h" bodystart="234" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__timer__hal_1ga018c5fef9d84458226b20249a4b28f6d" prot="public" static="no">
        <name>NRF_TIMER_BASE_FREQUENCY_GET</name>
        <param><defname>p_reg</defname></param>
        <initializer>    ((<ref refid="group__nrf__timer__hal_1ga15223384d2f89ad36b96aada9aab509f" kindref="member">NRF_TIMER_IS_320MHZ_TIMER</ref>(p_reg)) ? (<ref refid="group__nrf__timer__hal_1ga73f8bac6d9fc9a98f64f8114e2ce00c0" kindref="member">NRF_TIMER_BASE_FREQUENCY_320MHZ</ref>): \
    ((<ref refid="group__nrf__timer__hal_1gaf4ee713f133b991c4267f9d0c5839cd8" kindref="member">NRF_TIMER_IS_128MHZ_TIMER</ref>(p_reg)) ? (<ref refid="group__nrf__timer__hal_1ga2e43f129d140d409a491436f7988f923" kindref="member">NRF_TIMER_BASE_FREQUENCY_128MHZ</ref>): \
    ((<ref refid="group__nrf__timer__hal_1ga88b543fbb177b6f8f2c9378d6dd00615" kindref="member">NRF_TIMER_IS_64MHZ_TIMER</ref>(p_reg))  ? (<ref refid="group__nrf__timer__hal_1gad3ac936a9bc470ab107a28711b1a6a2b" kindref="member">NRF_TIMER_BASE_FREQUENCY_64MHZ</ref>) : \
    ((<ref refid="group__nrf__timer__hal_1gaee09ea134dae78c7b3e42634416324cf" kindref="member">NRF_TIMER_IS_32MHZ_TIMER</ref>(p_reg))  ? (<ref refid="group__nrf__timer__hal_1gac548befeaf0379d5a691eb1fee474197" kindref="member">NRF_TIMER_BASE_FREQUENCY_32MHZ</ref>) : \
    (<ref refid="group__nrf__timer__hal_1ga10dc600fe7ff7d27204f781236a391e1" kindref="member">NRF_TIMER_BASE_FREQUENCY_16MHZ</ref>)))))</initializer>
        <briefdescription>
<para>Macro for getting base frequency value in Hz for the specified timer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_timer.h" line="246" column="9" bodyfile="hal/nrf_timer.h" bodystart="246" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__timer__hal_1gabda69ecc14a1123aacf303a8e004d2a5" prot="public" static="no">
        <name>NRF_TIMER_PRESCALER_CALCULATE</name>
        <param><defname>base_freq</defname></param>
        <param><defname>frequency</defname></param>
        <initializer>        NRF_CTZ((uint32_t)(base_freq) / (uint32_t)(frequency))</initializer>
        <briefdescription>
<para>Macro for computing prescaler value for given base frequency and desired frequency. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>Not every combination of base frequency and desired frequency is supported.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">base_freq</parametername>
</parameternamelist>
<parameterdescription>
<para>Base clock frequency for timer in Hz. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">frequency</parametername>
</parameternamelist>
<parameterdescription>
<para>Desired frequency value in Hz. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_timer.h" line="261" column="9" bodyfile="hal/nrf_timer.h" bodystart="261" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__timer__hal_1ga039a5c273ecc5106956fd93ff587d7d8" prot="public" static="no">
        <name>NRF_TIMER_FREQUENCY_STATIC_CHECK</name>
        <param><defname>p_reg</defname></param>
        <param><defname>frequency</defname></param>
        <initializer>    <ref refid="group__nrfx__glue_1gab3edd9fe23f460c77b83defb81fc4983" kindref="member">NRFX_STATIC_ASSERT</ref>(                                                                          \
        (<ref refid="group__nrf__timer__hal_1ga018c5fef9d84458226b20249a4b28f6d" kindref="member">NRF_TIMER_BASE_FREQUENCY_GET</ref>(p_reg) == frequency) ||                                    \
        ((<ref refid="group__nrf__timer__hal_1ga018c5fef9d84458226b20249a4b28f6d" kindref="member">NRF_TIMER_BASE_FREQUENCY_GET</ref>(p_reg) % frequency == 0) &amp;&amp;                               \
         <ref refid="group__nrfx__common_1gad915509e5196347904abacd49406158f" kindref="member">NRFX_IS_POWER_OF_TWO</ref>(<ref refid="group__nrf__timer__hal_1ga018c5fef9d84458226b20249a4b28f6d" kindref="member">NRF_TIMER_BASE_FREQUENCY_GET</ref>(p_reg) / (uint32_t)frequency) &amp;&amp;      \
         ((<ref refid="group__nrf__timer__hal_1ga018c5fef9d84458226b20249a4b28f6d" kindref="member">NRF_TIMER_BASE_FREQUENCY_GET</ref>(p_reg) / frequency) &lt;= (1 &lt;&lt; <ref refid="group__nrf__timer__hal_1ga0206996722160e725012e56ff212f937" kindref="member">NRF_TIMER_PRESCALER_MAX</ref>))))</initializer>
        <briefdescription>
<para>Macro for checking whether specified frequency can be achived for given timer instance. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Macro is using compile time assertion.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">frequency</parametername>
</parameternamelist>
<parameterdescription>
<para>Desired frequency value in Hz. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_timer.h" line="272" column="9" bodyfile="hal/nrf_timer.h" bodystart="272" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__timer__hal_1gab6dbfc4ca839addb0a44eff1f69108f8" prot="public" static="no">
        <name>NRF_TIMER_CC_CHANNEL_COUNT</name>
        <param><defname>id</defname></param>
        <initializer><ref refid="group__nrfx__common_1gaa78d21b07d22f7a4bfbd1feda51ef1f4" kindref="member">NRFX_CONCAT_3</ref>(TIMER, id, _CC_NUM)</initializer>
        <briefdescription>
<para>Macro for getting the number of capture/compare channels available in a given timer instance. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">id</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of the specified timer instance. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_timer.h" line="285" column="9" bodyfile="hal/nrf_timer.h" bodystart="285" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__timer__hal_1ga7abd2e5156d512be8aff97b3bc0c2691" prot="public" static="no">
        <name>NRF_TIMER_CC_COUNT_MAX</name>
        <initializer><ref refid="group__nrfx__common_1gafbf1f8a50035b7d9f6c1cc1155ed1989" kindref="member">NRFX_ARRAY_SIZE</ref>(((NRF_TIMER_Type*)0)-&gt;EVENTS_COMPARE)</initializer>
        <briefdescription>
<para>Symbol specifying maximum number of available compare channels. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_timer.h" line="288" column="9" bodyfile="hal/nrf_timer.h" bodystart="288" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__timer__hal_1gacf9cefaaeab5f9005e54228c7ebf0ff4" prot="public" static="no">
        <name>NRF_TIMER_ALL_CHANNELS_INT_MASK</name>
        <initializer>        ((uint32_t)((1 &lt;&lt; <ref refid="group__nrf__timer__hal_1ga7abd2e5156d512be8aff97b3bc0c2691" kindref="member">NRF_TIMER_CC_COUNT_MAX</ref>) - 1) &lt;&lt; TIMER_INTENSET_COMPARE0_Pos)</initializer>
        <briefdescription>
<para>Symbol for creating the interrupt bitmask for all compare channels. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_timer.h" line="291" column="9" bodyfile="hal/nrf_timer.h" bodystart="291" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="group__nrf__timer__hal_1ga1db410e4a6b7e38de383220b20724906" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_timer_task_t</name>
        <enumvalue id="group__nrf__timer__hal_1gga1db410e4a6b7e38de383220b20724906ab2af686e5e4bf199b32a330f009f1ae0" prot="public">
          <name>NRF_TIMER_TASK_START</name>
          <initializer>= offsetof(NRF_TIMER_Type, TASKS_START)</initializer>
          <briefdescription>
<para>Task for starting the timer. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__timer__hal_1gga1db410e4a6b7e38de383220b20724906a171226edb83da69efd7189e0f7593990" prot="public">
          <name>NRF_TIMER_TASK_STOP</name>
          <initializer>= offsetof(NRF_TIMER_Type, TASKS_STOP)</initializer>
          <briefdescription>
<para>Task for stopping the timer. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__timer__hal_1gga1db410e4a6b7e38de383220b20724906a5bde5d2faa0fde13590ffbae0a216650" prot="public">
          <name>NRF_TIMER_TASK_COUNT</name>
          <initializer>= offsetof(NRF_TIMER_Type, TASKS_COUNT)</initializer>
          <briefdescription>
<para>Task for incrementing the timer (in counter mode). </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__timer__hal_1gga1db410e4a6b7e38de383220b20724906ab956c87716b91ed2e00a34056399e384" prot="public">
          <name>NRF_TIMER_TASK_CLEAR</name>
          <initializer>= offsetof(NRF_TIMER_Type, TASKS_CLEAR)</initializer>
          <briefdescription>
<para>Task for resetting the timer value. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__timer__hal_1gga1db410e4a6b7e38de383220b20724906a70ae5a97962ac35439e77e973f8e1aba" prot="public">
          <name>NRF_TIMER_TASK_SHUTDOWN</name>
          <initializer>= offsetof(NRF_TIMER_Type, TASKS_SHUTDOWN)</initializer>
          <briefdescription>
<para>Task for powering off the timer. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__timer__hal_1gga1db410e4a6b7e38de383220b20724906a1596e7e7cea8a8d7017e0c2964f88f4a" prot="public">
          <name>NRF_TIMER_TASK_CAPTURE0</name>
          <initializer>= offsetof(NRF_TIMER_Type, TASKS_CAPTURE[0])</initializer>
          <briefdescription>
<para>Task for capturing the timer value on channel 0. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__timer__hal_1gga1db410e4a6b7e38de383220b20724906aa111674be32dba6853cfad957a3c3c17" prot="public">
          <name>NRF_TIMER_TASK_CAPTURE1</name>
          <initializer>= offsetof(NRF_TIMER_Type, TASKS_CAPTURE[1])</initializer>
          <briefdescription>
<para>Task for capturing the timer value on channel 1. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__timer__hal_1gga1db410e4a6b7e38de383220b20724906ae571cd4149d48b96dcd56d015dd828c6" prot="public">
          <name>NRF_TIMER_TASK_CAPTURE2</name>
          <initializer>= offsetof(NRF_TIMER_Type, TASKS_CAPTURE[2])</initializer>
          <briefdescription>
<para>Task for capturing the timer value on channel 2. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__timer__hal_1gga1db410e4a6b7e38de383220b20724906ac99434e7c1b808007a4052bdb6edae83" prot="public">
          <name>NRF_TIMER_TASK_CAPTURE3</name>
          <initializer>= offsetof(NRF_TIMER_Type, TASKS_CAPTURE[3])</initializer>
          <briefdescription>
<para>Task for capturing the timer value on channel 3. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__timer__hal_1gga1db410e4a6b7e38de383220b20724906aceb184002f93b7dcd65e4601202994c1" prot="public">
          <name>NRF_TIMER_TASK_CAPTURE4</name>
          <initializer>= offsetof(NRF_TIMER_Type, TASKS_CAPTURE[4])</initializer>
          <briefdescription>
<para>Task for capturing the timer value on channel 4. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__timer__hal_1gga1db410e4a6b7e38de383220b20724906a2d5f09f8db223252d69b222a516b0fb6" prot="public">
          <name>NRF_TIMER_TASK_CAPTURE5</name>
          <initializer>= offsetof(NRF_TIMER_Type, TASKS_CAPTURE[5])</initializer>
          <briefdescription>
<para>Task for capturing the timer value on channel 5. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__timer__hal_1gga1db410e4a6b7e38de383220b20724906aac8890bf8407ca05b16cd271e63a3d32" prot="public">
          <name>NRF_TIMER_TASK_CAPTURE6</name>
          <initializer>= offsetof(NRF_TIMER_Type, TASKS_CAPTURE[6])</initializer>
          <briefdescription>
<para>Task for capturing the timer value on channel 6. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__timer__hal_1gga1db410e4a6b7e38de383220b20724906a42923b80df0bde85c4c4c32b0a00ac44" prot="public">
          <name>NRF_TIMER_TASK_CAPTURE7</name>
          <initializer>= offsetof(NRF_TIMER_Type, TASKS_CAPTURE[7])</initializer>
          <briefdescription>
<para>Task for capturing the timer value on channel 7. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Timer tasks. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_timer.h" line="295" column="1" bodyfile="hal/nrf_timer.h" bodystart="296" bodyend="318"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__timer__hal_1ga6c7c835fd175129175fe2c08237af3c3" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_timer_event_t</name>
        <enumvalue id="group__nrf__timer__hal_1gga6c7c835fd175129175fe2c08237af3c3ad00ff73ba0ee5ea626289842ff9a209e" prot="public">
          <name>NRF_TIMER_EVENT_COMPARE0</name>
          <initializer>= offsetof(NRF_TIMER_Type, EVENTS_COMPARE[0])</initializer>
          <briefdescription>
<para>Event from compare channel 0. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__timer__hal_1gga6c7c835fd175129175fe2c08237af3c3af1963f4d77921395beae5cb9cc96e540" prot="public">
          <name>NRF_TIMER_EVENT_COMPARE1</name>
          <initializer>= offsetof(NRF_TIMER_Type, EVENTS_COMPARE[1])</initializer>
          <briefdescription>
<para>Event from compare channel 1. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__timer__hal_1gga6c7c835fd175129175fe2c08237af3c3a59bd12d538b43c38c52d044fddf1264a" prot="public">
          <name>NRF_TIMER_EVENT_COMPARE2</name>
          <initializer>= offsetof(NRF_TIMER_Type, EVENTS_COMPARE[2])</initializer>
          <briefdescription>
<para>Event from compare channel 2. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__timer__hal_1gga6c7c835fd175129175fe2c08237af3c3a62f321a35d357f116681bcefc956ab9d" prot="public">
          <name>NRF_TIMER_EVENT_COMPARE3</name>
          <initializer>= offsetof(NRF_TIMER_Type, EVENTS_COMPARE[3])</initializer>
          <briefdescription>
<para>Event from compare channel 3. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__timer__hal_1gga6c7c835fd175129175fe2c08237af3c3ad3ec1e6e7389be59d8621a643278a3d0" prot="public">
          <name>NRF_TIMER_EVENT_COMPARE4</name>
          <initializer>= offsetof(NRF_TIMER_Type, EVENTS_COMPARE[4])</initializer>
          <briefdescription>
<para>Event from compare channel 4. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__timer__hal_1gga6c7c835fd175129175fe2c08237af3c3a2373cf69bfaf2c43e9dcdd0cf45778fd" prot="public">
          <name>NRF_TIMER_EVENT_COMPARE5</name>
          <initializer>= offsetof(NRF_TIMER_Type, EVENTS_COMPARE[5])</initializer>
          <briefdescription>
<para>Event from compare channel 5. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__timer__hal_1gga6c7c835fd175129175fe2c08237af3c3a60747bf50f6bb4a3231bac181cd0b44e" prot="public">
          <name>NRF_TIMER_EVENT_COMPARE6</name>
          <initializer>= offsetof(NRF_TIMER_Type, EVENTS_COMPARE[6])</initializer>
          <briefdescription>
<para>Event from compare channel 6. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__timer__hal_1gga6c7c835fd175129175fe2c08237af3c3ad2db8124628821dce60a420ffd6af577" prot="public">
          <name>NRF_TIMER_EVENT_COMPARE7</name>
          <initializer>= offsetof(NRF_TIMER_Type, EVENTS_COMPARE[7])</initializer>
          <briefdescription>
<para>Event from compare channel 7. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Timer events. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_timer.h" line="321" column="1" bodyfile="hal/nrf_timer.h" bodystart="322" bodyend="339"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__timer__hal_1ga1dee3ab20f9dfa38bacf2502a8d1688c" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_timer_short_mask_t</name>
        <enumvalue id="group__nrf__timer__hal_1gga1dee3ab20f9dfa38bacf2502a8d1688cae953a4526a33bba2c89e2f240f7957d3" prot="public">
          <name>NRF_TIMER_SHORT_COMPARE0_STOP_MASK</name>
          <initializer>= TIMER_SHORTS_COMPARE0_STOP_Msk</initializer>
          <briefdescription>
<para>Shortcut for stopping the timer based on compare 0. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__timer__hal_1gga1dee3ab20f9dfa38bacf2502a8d1688ca25579236da5e7e307f35bf2472e53a06" prot="public">
          <name>NRF_TIMER_SHORT_COMPARE1_STOP_MASK</name>
          <initializer>= TIMER_SHORTS_COMPARE1_STOP_Msk</initializer>
          <briefdescription>
<para>Shortcut for stopping the timer based on compare 1. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__timer__hal_1gga1dee3ab20f9dfa38bacf2502a8d1688caeb8fbf05e1ecfab4ed6e59068e4edbe5" prot="public">
          <name>NRF_TIMER_SHORT_COMPARE2_STOP_MASK</name>
          <initializer>= TIMER_SHORTS_COMPARE2_STOP_Msk</initializer>
          <briefdescription>
<para>Shortcut for stopping the timer based on compare 2. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__timer__hal_1gga1dee3ab20f9dfa38bacf2502a8d1688ca7da4ad704f6d771c6242169885cff6c9" prot="public">
          <name>NRF_TIMER_SHORT_COMPARE3_STOP_MASK</name>
          <initializer>= TIMER_SHORTS_COMPARE3_STOP_Msk</initializer>
          <briefdescription>
<para>Shortcut for stopping the timer based on compare 3. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__timer__hal_1gga1dee3ab20f9dfa38bacf2502a8d1688ca3fea27648f52abf13cbd79b541cc2fa8" prot="public">
          <name>NRF_TIMER_SHORT_COMPARE4_STOP_MASK</name>
          <initializer>= TIMER_SHORTS_COMPARE4_STOP_Msk</initializer>
          <briefdescription>
<para>Shortcut for stopping the timer based on compare 4. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__timer__hal_1gga1dee3ab20f9dfa38bacf2502a8d1688cadd25209fb55d3053e0fea49fa7bf5a30" prot="public">
          <name>NRF_TIMER_SHORT_COMPARE5_STOP_MASK</name>
          <initializer>= TIMER_SHORTS_COMPARE5_STOP_Msk</initializer>
          <briefdescription>
<para>Shortcut for stopping the timer based on compare 5. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__timer__hal_1gga1dee3ab20f9dfa38bacf2502a8d1688cabe3383ecf928f64cb36b740a213cfa61" prot="public">
          <name>NRF_TIMER_SHORT_COMPARE6_STOP_MASK</name>
          <initializer>= TIMER_SHORTS_COMPARE6_STOP_Msk</initializer>
          <briefdescription>
<para>Shortcut for stopping the timer based on compare 6. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__timer__hal_1gga1dee3ab20f9dfa38bacf2502a8d1688cada6b4270434d037936ad6e37bd515eee" prot="public">
          <name>NRF_TIMER_SHORT_COMPARE7_STOP_MASK</name>
          <initializer>= TIMER_SHORTS_COMPARE7_STOP_Msk</initializer>
          <briefdescription>
<para>Shortcut for stopping the timer based on compare 7. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__timer__hal_1gga1dee3ab20f9dfa38bacf2502a8d1688ca98029953aa61f28bc923ff4ff9ab3a1d" prot="public">
          <name>NRF_TIMER_SHORT_COMPARE0_CLEAR_MASK</name>
          <initializer>= TIMER_SHORTS_COMPARE0_CLEAR_Msk</initializer>
          <briefdescription>
<para>Shortcut for clearing the timer based on compare 0. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__timer__hal_1gga1dee3ab20f9dfa38bacf2502a8d1688caee8d5836b72db83dcaee3c736edcc15a" prot="public">
          <name>NRF_TIMER_SHORT_COMPARE1_CLEAR_MASK</name>
          <initializer>= TIMER_SHORTS_COMPARE1_CLEAR_Msk</initializer>
          <briefdescription>
<para>Shortcut for clearing the timer based on compare 1. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__timer__hal_1gga1dee3ab20f9dfa38bacf2502a8d1688ca957c0d0f913ef652cfeb12b00fbcb16c" prot="public">
          <name>NRF_TIMER_SHORT_COMPARE2_CLEAR_MASK</name>
          <initializer>= TIMER_SHORTS_COMPARE2_CLEAR_Msk</initializer>
          <briefdescription>
<para>Shortcut for clearing the timer based on compare 2. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__timer__hal_1gga1dee3ab20f9dfa38bacf2502a8d1688cac183d1023a358683c0fd9152049c1d2f" prot="public">
          <name>NRF_TIMER_SHORT_COMPARE3_CLEAR_MASK</name>
          <initializer>= TIMER_SHORTS_COMPARE3_CLEAR_Msk</initializer>
          <briefdescription>
<para>Shortcut for clearing the timer based on compare 3. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__timer__hal_1gga1dee3ab20f9dfa38bacf2502a8d1688ca5a6362fd670f3d56124fa70d5ace963f" prot="public">
          <name>NRF_TIMER_SHORT_COMPARE4_CLEAR_MASK</name>
          <initializer>= TIMER_SHORTS_COMPARE4_CLEAR_Msk</initializer>
          <briefdescription>
<para>Shortcut for clearing the timer based on compare 4. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__timer__hal_1gga1dee3ab20f9dfa38bacf2502a8d1688ca7e3d851f156bc34a5bede57f40a68a77" prot="public">
          <name>NRF_TIMER_SHORT_COMPARE5_CLEAR_MASK</name>
          <initializer>= TIMER_SHORTS_COMPARE5_CLEAR_Msk</initializer>
          <briefdescription>
<para>Shortcut for clearing the timer based on compare 5. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__timer__hal_1gga1dee3ab20f9dfa38bacf2502a8d1688caffc6ebbe170e6c6af5594e4a24a6b433" prot="public">
          <name>NRF_TIMER_SHORT_COMPARE6_CLEAR_MASK</name>
          <initializer>= TIMER_SHORTS_COMPARE6_CLEAR_Msk</initializer>
          <briefdescription>
<para>Shortcut for clearing the timer based on compare 6. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__timer__hal_1gga1dee3ab20f9dfa38bacf2502a8d1688ca155ecf8913b698fdb329d6595c869566" prot="public">
          <name>NRF_TIMER_SHORT_COMPARE7_CLEAR_MASK</name>
          <initializer>= TIMER_SHORTS_COMPARE7_CLEAR_Msk</initializer>
          <briefdescription>
<para>Shortcut for clearing the timer based on compare 7. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Types of timer shortcuts. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_timer.h" line="342" column="1" bodyfile="hal/nrf_timer.h" bodystart="343" bodyend="376"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__timer__hal_1ga61044c286dc20ccb08df3988bc57a6f2" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_timer_mode_t</name>
        <enumvalue id="group__nrf__timer__hal_1gga61044c286dc20ccb08df3988bc57a6f2ad7bea280ee3b3c84bd9e89e2dc7f1f41" prot="public">
          <name>NRF_TIMER_MODE_TIMER</name>
          <initializer>= TIMER_MODE_MODE_Timer</initializer>
          <briefdescription>
<para>Timer mode: timer. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__timer__hal_1gga61044c286dc20ccb08df3988bc57a6f2a6cbeb70606627497a974c5f7f0064cc0" prot="public">
          <name>NRF_TIMER_MODE_COUNTER</name>
          <initializer>= TIMER_MODE_MODE_Counter</initializer>
          <briefdescription>
<para>Timer mode: counter. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__timer__hal_1gga61044c286dc20ccb08df3988bc57a6f2ac8924c802962ea8c7ee492403b339388" prot="public">
          <name>NRF_TIMER_MODE_LOW_POWER_COUNTER</name>
          <initializer>= TIMER_MODE_MODE_LowPowerCounter</initializer>
          <briefdescription>
<para>Timer mode: low-power counter. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Timer modes. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_timer.h" line="379" column="1" bodyfile="hal/nrf_timer.h" bodystart="380" bodyend="386"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__timer__hal_1ga567f81d672267a218a5b2f0155be3043" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_timer_bit_width_t</name>
        <enumvalue id="group__nrf__timer__hal_1gga567f81d672267a218a5b2f0155be3043aa6474251dab8733df9c2d6e5c00504b4" prot="public">
          <name>NRF_TIMER_BIT_WIDTH_8</name>
          <initializer>= TIMER_BITMODE_BITMODE_08Bit</initializer>
          <briefdescription>
<para>Timer bit width 8 bit. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__timer__hal_1gga567f81d672267a218a5b2f0155be3043a4c8f9ba039c905e7d207203ad06e8d4d" prot="public">
          <name>NRF_TIMER_BIT_WIDTH_16</name>
          <initializer>= TIMER_BITMODE_BITMODE_16Bit</initializer>
          <briefdescription>
<para>Timer bit width 16 bit. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__timer__hal_1gga567f81d672267a218a5b2f0155be3043a86bf8b22c7433f96a050fdeacbb89d5d" prot="public">
          <name>NRF_TIMER_BIT_WIDTH_24</name>
          <initializer>= TIMER_BITMODE_BITMODE_24Bit</initializer>
          <briefdescription>
<para>Timer bit width 24 bit. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__timer__hal_1gga567f81d672267a218a5b2f0155be3043ab2e052c7b94c85bff69d313c50a630a5" prot="public">
          <name>NRF_TIMER_BIT_WIDTH_32</name>
          <initializer>= TIMER_BITMODE_BITMODE_32Bit</initializer>
          <briefdescription>
<para>Timer bit width 32 bit. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Timer bit width. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_timer.h" line="389" column="1" bodyfile="hal/nrf_timer.h" bodystart="390" bodyend="395"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__timer__hal_1ga28862835cd77a9c8481ed04c7b1918eb" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_timer_frequency_t</name>
        <enumvalue id="group__nrf__timer__hal_1gga28862835cd77a9c8481ed04c7b1918eba91c798f0a0aaf8459805c081168dab56" prot="public">
          <name>NRF_TIMER_FREQ_16MHz</name>
          <initializer>= 0</initializer>
          <briefdescription>
<para>Timer frequency 16 MHz. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__timer__hal_1gga28862835cd77a9c8481ed04c7b1918ebae596ee499f96f4595a47aa7bd0dfa89d" prot="public">
          <name>NRF_TIMER_FREQ_8MHz</name>
          <briefdescription>
<para>Timer frequency 8 MHz. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__timer__hal_1gga28862835cd77a9c8481ed04c7b1918eba25f331254bd4ba10e83f19d3372991ca" prot="public">
          <name>NRF_TIMER_FREQ_4MHz</name>
          <briefdescription>
<para>Timer frequency 4 MHz. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__timer__hal_1gga28862835cd77a9c8481ed04c7b1918eba75544c550c24bafe6cf84486cece8d91" prot="public">
          <name>NRF_TIMER_FREQ_2MHz</name>
          <briefdescription>
<para>Timer frequency 2 MHz. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__timer__hal_1gga28862835cd77a9c8481ed04c7b1918eba6f65deaeeb070e60c8b5bef30638faf6" prot="public">
          <name>NRF_TIMER_FREQ_1MHz</name>
          <briefdescription>
<para>Timer frequency 1 MHz. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__timer__hal_1gga28862835cd77a9c8481ed04c7b1918ebae42c5424d5dd2d69cd9ff64d37ccf09e" prot="public">
          <name>NRF_TIMER_FREQ_500kHz</name>
          <briefdescription>
<para>Timer frequency 500 kHz. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__timer__hal_1gga28862835cd77a9c8481ed04c7b1918eba0e0638388bdf4cfe3d7ec244faa66a2f" prot="public">
          <name>NRF_TIMER_FREQ_250kHz</name>
          <briefdescription>
<para>Timer frequency 250 kHz. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__timer__hal_1gga28862835cd77a9c8481ed04c7b1918eba081b58c48f3689e22550c01da1133037" prot="public">
          <name>NRF_TIMER_FREQ_125kHz</name>
          <briefdescription>
<para>Timer frequency 125 kHz. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__timer__hal_1gga28862835cd77a9c8481ed04c7b1918ebafc1d448cb0ba552a99cf190b74c10dd9" prot="public">
          <name>NRF_TIMER_FREQ_62500Hz</name>
          <briefdescription>
<para>Timer frequency 62500 Hz. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__timer__hal_1gga28862835cd77a9c8481ed04c7b1918eba655fbfee370adade8e7b9c4aae223074" prot="public">
          <name>NRF_TIMER_FREQ_31250Hz</name>
          <briefdescription>
<para>Timer frequency 31250 Hz. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Timer prescalers. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_timer.h" line="398" column="1" bodyfile="hal/nrf_timer.h" bodystart="399" bodyend="410"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__timer__hal_1ga21336e3aff87c90e95f08eff763d91a8" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_timer_cc_channel_t</name>
        <enumvalue id="group__nrf__timer__hal_1gga21336e3aff87c90e95f08eff763d91a8a4aa8e808ba8c07831a11629524c61229" prot="public">
          <name>NRF_TIMER_CC_CHANNEL0</name>
          <initializer>= 0</initializer>
          <briefdescription>
<para>Timer capture/compare channel 0. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__timer__hal_1gga21336e3aff87c90e95f08eff763d91a8addf444442bb72b96874cc391bfd4af08" prot="public">
          <name>NRF_TIMER_CC_CHANNEL1</name>
          <briefdescription>
<para>Timer capture/compare channel 1. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__timer__hal_1gga21336e3aff87c90e95f08eff763d91a8a3e39cb70edb24f15805ac9105adcc9e3" prot="public">
          <name>NRF_TIMER_CC_CHANNEL2</name>
          <briefdescription>
<para>Timer capture/compare channel 2. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__timer__hal_1gga21336e3aff87c90e95f08eff763d91a8a87d5787396b9bca963c2ca9595bce6ab" prot="public">
          <name>NRF_TIMER_CC_CHANNEL3</name>
          <briefdescription>
<para>Timer capture/compare channel 3. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__timer__hal_1gga21336e3aff87c90e95f08eff763d91a8a8ef055e22ea3256b53c653f87b33102b" prot="public">
          <name>NRF_TIMER_CC_CHANNEL4</name>
          <briefdescription>
<para>Timer capture/compare channel 4. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__timer__hal_1gga21336e3aff87c90e95f08eff763d91a8a1f8731bc426b0141221601ad6df51f33" prot="public">
          <name>NRF_TIMER_CC_CHANNEL5</name>
          <briefdescription>
<para>Timer capture/compare channel 5. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__timer__hal_1gga21336e3aff87c90e95f08eff763d91a8a8de0f8a75fd5ea17f8a4f18769f04fc7" prot="public">
          <name>NRF_TIMER_CC_CHANNEL6</name>
          <briefdescription>
<para>Timer capture/compare channel 6. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__timer__hal_1gga21336e3aff87c90e95f08eff763d91a8a603d9b0c68ef2cd8332dedd9b12e9ffc" prot="public">
          <name>NRF_TIMER_CC_CHANNEL7</name>
          <briefdescription>
<para>Timer capture/compare channel 7. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Timer capture/compare channels. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_timer.h" line="413" column="1" bodyfile="hal/nrf_timer.h" bodystart="414" bodyend="431"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__timer__hal_1ga55adb42b75222256195fa003f8c0dc20" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_timer_int_mask_t</name>
        <enumvalue id="group__nrf__timer__hal_1gga55adb42b75222256195fa003f8c0dc20a7c79e9f26e48942dca235affefad9912" prot="public">
          <name>NRF_TIMER_INT_COMPARE0_MASK</name>
          <initializer>= TIMER_INTENSET_COMPARE0_Msk</initializer>
          <briefdescription>
<para>Timer interrupt from compare event on channel 0. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__timer__hal_1gga55adb42b75222256195fa003f8c0dc20a4d31316d8822406ad42cda430705f638" prot="public">
          <name>NRF_TIMER_INT_COMPARE1_MASK</name>
          <initializer>= TIMER_INTENSET_COMPARE1_Msk</initializer>
          <briefdescription>
<para>Timer interrupt from compare event on channel 1. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__timer__hal_1gga55adb42b75222256195fa003f8c0dc20a7f49a5f098147d06ff40ba96f4b08019" prot="public">
          <name>NRF_TIMER_INT_COMPARE2_MASK</name>
          <initializer>= TIMER_INTENSET_COMPARE2_Msk</initializer>
          <briefdescription>
<para>Timer interrupt from compare event on channel 2. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__timer__hal_1gga55adb42b75222256195fa003f8c0dc20ac7d7b7c195cf94a303159820f3543825" prot="public">
          <name>NRF_TIMER_INT_COMPARE3_MASK</name>
          <initializer>= TIMER_INTENSET_COMPARE3_Msk</initializer>
          <briefdescription>
<para>Timer interrupt from compare event on channel 3. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__timer__hal_1gga55adb42b75222256195fa003f8c0dc20a140064126c1ed2d57d6b413c7e7a32f0" prot="public">
          <name>NRF_TIMER_INT_COMPARE4_MASK</name>
          <initializer>= TIMER_INTENSET_COMPARE4_Msk</initializer>
          <briefdescription>
<para>Timer interrupt from compare event on channel 4. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__timer__hal_1gga55adb42b75222256195fa003f8c0dc20a340d6d967dae619c3ea666e8e7070e37" prot="public">
          <name>NRF_TIMER_INT_COMPARE5_MASK</name>
          <initializer>= TIMER_INTENSET_COMPARE5_Msk</initializer>
          <briefdescription>
<para>Timer interrupt from compare event on channel 5. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__timer__hal_1gga55adb42b75222256195fa003f8c0dc20ad275d7d3ed6be95919874e2b7b06a373" prot="public">
          <name>NRF_TIMER_INT_COMPARE6_MASK</name>
          <initializer>= TIMER_INTENSET_COMPARE6_Msk</initializer>
          <briefdescription>
<para>Timer interrupt from compare event on channel 6. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__timer__hal_1gga55adb42b75222256195fa003f8c0dc20ad2655abf66de31b8d58151d24252c956" prot="public">
          <name>NRF_TIMER_INT_COMPARE7_MASK</name>
          <initializer>= TIMER_INTENSET_COMPARE7_Msk</initializer>
          <briefdescription>
<para>Timer interrupt from compare event on channel 7. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Timer interrupts. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_timer.h" line="434" column="1" bodyfile="hal/nrf_timer.h" bodystart="435" bodyend="452"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__nrf__timer__hal_1ga5e804fd21a6351e80e20ed94a95e1745" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_timer_prescaler_set</definition>
        <argsstring>(NRF_TIMER_Type *p_reg, uint32_t prescaler_factor)</argsstring>
        <name>nrf_timer_prescaler_set</name>
        <param>
          <type>NRF_TIMER_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>prescaler_factor</declname>
        </param>
        <briefdescription>
<para>Function for setting the prescaler factor. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Prescaler value is expressed as <formula id="0">$ 2^{prescaler\_factor} $</formula>.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">prescaler_factor</parametername>
</parameternamelist>
<parameterdescription>
<para>Prescaler factor. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_timer.h" line="911" column="24" bodyfile="hal/nrf_timer.h" bodystart="911" bodyend="915" declfile="hal/nrf_timer.h" declline="463" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__timer__hal_1ga8018856d922dc9cd77c5f5b74f533f25" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_timer_prescaler_get</definition>
        <argsstring>(NRF_TIMER_Type const *p_reg)</argsstring>
        <name>nrf_timer_prescaler_get</name>
        <param>
          <type>NRF_TIMER_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for retrieving the prescaler factor. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Prescaler factor. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_timer.h" line="917" column="28" bodyfile="hal/nrf_timer.h" bodystart="917" bodyend="920" declfile="hal/nrf_timer.h" declline="472" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__timer__hal_1gacdcc887e5536df70fb766e2705711b65" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_timer_task_trigger</definition>
        <argsstring>(NRF_TIMER_Type *p_reg, nrf_timer_task_t task)</argsstring>
        <name>nrf_timer_task_trigger</name>
        <param>
          <type>NRF_TIMER_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__timer__hal_1ga1db410e4a6b7e38de383220b20724906" kindref="member">nrf_timer_task_t</ref></type>
          <declname>task</declname>
        </param>
        <briefdescription>
<para>Function for activating the specified timer task. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">task</parametername>
</parameternamelist>
<parameterdescription>
<para>Task to be activated. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_timer.h" line="780" column="24" bodyfile="hal/nrf_timer.h" bodystart="780" bodyend="784" declfile="hal/nrf_timer.h" declline="480" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__timer__hal_1ga2f4e47e68b4d1af3726747f2a34bb581" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_timer_task_address_get</definition>
        <argsstring>(NRF_TIMER_Type const *p_reg, nrf_timer_task_t task)</argsstring>
        <name>nrf_timer_task_address_get</name>
        <param>
          <type>NRF_TIMER_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__timer__hal_1ga1db410e4a6b7e38de383220b20724906" kindref="member">nrf_timer_task_t</ref></type>
          <declname>task</declname>
        </param>
        <briefdescription>
<para>Function for getting the address of the specified timer task register. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">task</parametername>
</parameternamelist>
<parameterdescription>
<para>The specified task.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Address of the specified task register. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_timer.h" line="786" column="28" bodyfile="hal/nrf_timer.h" bodystart="786" bodyend="790" declfile="hal/nrf_timer.h" declline="491" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__timer__hal_1ga46788eabb1ad085616c4796bb609c016" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_timer_event_clear</definition>
        <argsstring>(NRF_TIMER_Type *p_reg, nrf_timer_event_t event)</argsstring>
        <name>nrf_timer_event_clear</name>
        <param>
          <type>NRF_TIMER_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__timer__hal_1ga6c7c835fd175129175fe2c08237af3c3" kindref="member">nrf_timer_event_t</ref></type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>Function for clearing the specified timer event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event to clear. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_timer.h" line="792" column="24" bodyfile="hal/nrf_timer.h" bodystart="792" bodyend="797" declfile="hal/nrf_timer.h" declline="500" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__timer__hal_1ga594ee9df9b86ae535bc4daf1384d5348" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE bool</type>
        <definition>NRF_STATIC_INLINE bool nrf_timer_event_check</definition>
        <argsstring>(NRF_TIMER_Type const *p_reg, nrf_timer_event_t event)</argsstring>
        <name>nrf_timer_event_check</name>
        <param>
          <type>NRF_TIMER_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__timer__hal_1ga6c7c835fd175129175fe2c08237af3c3" kindref="member">nrf_timer_event_t</ref></type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>Function for retrieving the state of the TIMER event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event to be checked.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>The event has been generated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>The event has not been generated. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_timer.h" line="799" column="24" bodyfile="hal/nrf_timer.h" bodystart="799" bodyend="803" declfile="hal/nrf_timer.h" declline="512" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__timer__hal_1ga9ad70342f0808182e18ef591d23b0561" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_timer_event_address_get</definition>
        <argsstring>(NRF_TIMER_Type const *p_reg, nrf_timer_event_t event)</argsstring>
        <name>nrf_timer_event_address_get</name>
        <param>
          <type>NRF_TIMER_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__timer__hal_1ga6c7c835fd175129175fe2c08237af3c3" kindref="member">nrf_timer_event_t</ref></type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>Function for getting the address of the specified timer event register. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>The specified event.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Address of the specified event register. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_timer.h" line="805" column="28" bodyfile="hal/nrf_timer.h" bodystart="805" bodyend="809" declfile="hal/nrf_timer.h" declline="523" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__timer__hal_1ga8efef095c7570c50f519dfe46539db90" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_timer_shorts_enable</definition>
        <argsstring>(NRF_TIMER_Type *p_reg, uint32_t mask)</argsstring>
        <name>nrf_timer_shorts_enable</name>
        <param>
          <type>NRF_TIMER_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Function for enabling the specified shortcuts. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Shortcuts to be enabled. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_timer.h" line="811" column="24" bodyfile="hal/nrf_timer.h" bodystart="811" bodyend="815" declfile="hal/nrf_timer.h" declline="532" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__timer__hal_1ga269330ebccab15e3e819cc2c805629ac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_timer_shorts_disable</definition>
        <argsstring>(NRF_TIMER_Type *p_reg, uint32_t mask)</argsstring>
        <name>nrf_timer_shorts_disable</name>
        <param>
          <type>NRF_TIMER_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Function for disabling the specified shortcuts. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Shortcuts to be disabled. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_timer.h" line="817" column="24" bodyfile="hal/nrf_timer.h" bodystart="817" bodyend="821" declfile="hal/nrf_timer.h" declline="541" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__timer__hal_1ga2d9291fbd5262d1f5a3d755e76d175d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_timer_shorts_set</definition>
        <argsstring>(NRF_TIMER_Type *p_reg, uint32_t mask)</argsstring>
        <name>nrf_timer_shorts_set</name>
        <param>
          <type>NRF_TIMER_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Function for setting the specified shortcuts. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Shortcuts to be set. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_timer.h" line="823" column="24" bodyfile="hal/nrf_timer.h" bodystart="823" bodyend="827" declfile="hal/nrf_timer.h" declline="550" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__timer__hal_1ga470366a9f03a7ad5ce5b4634b4cf81ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE <ref refid="group__nrf__timer__hal_1ga1dee3ab20f9dfa38bacf2502a8d1688c" kindref="member">nrf_timer_short_mask_t</ref></type>
        <definition>NRF_STATIC_INLINE nrf_timer_short_mask_t nrf_timer_short_compare_clear_get</definition>
        <argsstring>(uint8_t channel)</argsstring>
        <name>nrf_timer_short_compare_clear_get</name>
        <param>
          <type>uint8_t</type>
          <declname>channel</declname>
        </param>
        <briefdescription>
<para>Function for getting COMPARE_CLEAR short mask for the specified channel. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">channel</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Short mask. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_timer.h" line="829" column="42" bodyfile="hal/nrf_timer.h" bodystart="829" bodyend="832" declfile="hal/nrf_timer.h" declline="560" declcolumn="42"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__timer__hal_1gac773155b1c68ed77f90f29cb1f3a4e35" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE <ref refid="group__nrf__timer__hal_1ga1dee3ab20f9dfa38bacf2502a8d1688c" kindref="member">nrf_timer_short_mask_t</ref></type>
        <definition>NRF_STATIC_INLINE nrf_timer_short_mask_t nrf_timer_short_compare_stop_get</definition>
        <argsstring>(uint8_t channel)</argsstring>
        <name>nrf_timer_short_compare_stop_get</name>
        <param>
          <type>uint8_t</type>
          <declname>channel</declname>
        </param>
        <briefdescription>
<para>Function for getting COMPARE_STOP short mask for the specified channel. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">channel</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Short mask. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_timer.h" line="834" column="42" bodyfile="hal/nrf_timer.h" bodystart="834" bodyend="837" declfile="hal/nrf_timer.h" declline="569" declcolumn="42"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__timer__hal_1gaca84981e7f515192ffc4cb28ce18e554" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_timer_int_enable</definition>
        <argsstring>(NRF_TIMER_Type *p_reg, uint32_t mask)</argsstring>
        <name>nrf_timer_int_enable</name>
        <param>
          <type>NRF_TIMER_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Function for enabling the specified interrupts. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of interrupts to be enabled. Use <ref refid="group__nrf__timer__hal_1ga55adb42b75222256195fa003f8c0dc20" kindref="member">nrf_timer_int_mask_t</ref> values for bit masking. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_timer.h" line="839" column="24" bodyfile="hal/nrf_timer.h" bodystart="839" bodyend="843" declfile="hal/nrf_timer.h" declline="578" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__timer__hal_1gab26b26a0a091b12491246d4b1f4e65c8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_timer_int_disable</definition>
        <argsstring>(NRF_TIMER_Type *p_reg, uint32_t mask)</argsstring>
        <name>nrf_timer_int_disable</name>
        <param>
          <type>NRF_TIMER_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Function for disabling the specified interrupts. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of interrupts to be disabled. Use <ref refid="group__nrf__timer__hal_1ga55adb42b75222256195fa003f8c0dc20" kindref="member">nrf_timer_int_mask_t</ref> values for bit masking. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_timer.h" line="845" column="24" bodyfile="hal/nrf_timer.h" bodystart="845" bodyend="849" declfile="hal/nrf_timer.h" declline="588" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__timer__hal_1gaa6902537565850e0cfd62fa31a1b9083" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_timer_int_enable_check</definition>
        <argsstring>(NRF_TIMER_Type const *p_reg, uint32_t mask)</argsstring>
        <name>nrf_timer_int_enable_check</name>
        <param>
          <type>NRF_TIMER_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Function for checking if the specified interrupts are enabled. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of interrupts to be checked. Use <ref refid="group__nrf__timer__hal_1ga55adb42b75222256195fa003f8c0dc20" kindref="member">nrf_timer_int_mask_t</ref> values for bit masking.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Mask of enabled interrupts. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_timer.h" line="851" column="28" bodyfile="hal/nrf_timer.h" bodystart="851" bodyend="854" declfile="hal/nrf_timer.h" declline="600" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__timer__hal_1gabcfd966f5844ba4c22476ea36f944bca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_timer_subscribe_set</definition>
        <argsstring>(NRF_TIMER_Type *p_reg, nrf_timer_task_t task, uint8_t channel)</argsstring>
        <name>nrf_timer_subscribe_set</name>
        <param>
          <type>NRF_TIMER_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__timer__hal_1ga1db410e4a6b7e38de383220b20724906" kindref="member">nrf_timer_task_t</ref></type>
          <declname>task</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>channel</declname>
        </param>
        <briefdescription>
<para>Function for setting the subscribe configuration for a given TIMER task. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">task</parametername>
</parameternamelist>
<parameterdescription>
<para>Task for which to set the configuration. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">channel</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel through which to subscribe events. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_timer.h" line="611" column="24" declfile="hal/nrf_timer.h" declline="611" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__timer__hal_1gafce2e496e07c100add401597ad9d82b2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_timer_subscribe_clear</definition>
        <argsstring>(NRF_TIMER_Type *p_reg, nrf_timer_task_t task)</argsstring>
        <name>nrf_timer_subscribe_clear</name>
        <param>
          <type>NRF_TIMER_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__timer__hal_1ga1db410e4a6b7e38de383220b20724906" kindref="member">nrf_timer_task_t</ref></type>
          <declname>task</declname>
        </param>
        <briefdescription>
<para>Function for clearing the subscribe configuration for a given TIMER task. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">task</parametername>
</parameternamelist>
<parameterdescription>
<para>Task for which to clear the configuration. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_timer.h" line="622" column="24" declfile="hal/nrf_timer.h" declline="622" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__timer__hal_1gaa8e16ed891e6014d425b908daabfa498" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_timer_publish_set</definition>
        <argsstring>(NRF_TIMER_Type *p_reg, nrf_timer_event_t event, uint8_t channel)</argsstring>
        <name>nrf_timer_publish_set</name>
        <param>
          <type>NRF_TIMER_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__timer__hal_1ga6c7c835fd175129175fe2c08237af3c3" kindref="member">nrf_timer_event_t</ref></type>
          <declname>event</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>channel</declname>
        </param>
        <briefdescription>
<para>Function for setting the publish configuration for a given TIMER event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event for which to set the configuration. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">channel</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel through which to publish the event. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_timer.h" line="633" column="24" declfile="hal/nrf_timer.h" declline="633" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__timer__hal_1gafef86d00be35fa22765f9823c17fc6f0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_timer_publish_clear</definition>
        <argsstring>(NRF_TIMER_Type *p_reg, nrf_timer_event_t event)</argsstring>
        <name>nrf_timer_publish_clear</name>
        <param>
          <type>NRF_TIMER_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__timer__hal_1ga6c7c835fd175129175fe2c08237af3c3" kindref="member">nrf_timer_event_t</ref></type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>Function for clearing the publish configuration for a given TIMER event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event for which to clear the configuration. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_timer.h" line="644" column="24" declfile="hal/nrf_timer.h" declline="644" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__timer__hal_1ga1c02aebd9fc392af80ea2da5dca7ed61" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_timer_mode_set</definition>
        <argsstring>(NRF_TIMER_Type *p_reg, nrf_timer_mode_t mode)</argsstring>
        <name>nrf_timer_mode_set</name>
        <param>
          <type>NRF_TIMER_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__timer__hal_1ga61044c286dc20ccb08df3988bc57a6f2" kindref="member">nrf_timer_mode_t</ref></type>
          <declname>mode</declname>
        </param>
        <briefdescription>
<para>Function for setting the timer mode. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mode</parametername>
</parameternamelist>
<parameterdescription>
<para>Timer mode. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_timer.h" line="886" column="24" bodyfile="hal/nrf_timer.h" bodystart="886" bodyend="891" declfile="hal/nrf_timer.h" declline="654" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__timer__hal_1gaf0dbbc911f7fbf8952d261da81bb0aff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE <ref refid="group__nrf__timer__hal_1ga61044c286dc20ccb08df3988bc57a6f2" kindref="member">nrf_timer_mode_t</ref></type>
        <definition>NRF_STATIC_INLINE nrf_timer_mode_t nrf_timer_mode_get</definition>
        <argsstring>(NRF_TIMER_Type const *p_reg)</argsstring>
        <name>nrf_timer_mode_get</name>
        <param>
          <type>NRF_TIMER_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for retrieving the timer mode. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Timer mode. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_timer.h" line="893" column="36" bodyfile="hal/nrf_timer.h" bodystart="893" bodyend="896" declfile="hal/nrf_timer.h" declline="664" declcolumn="36"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__timer__hal_1ga1bf04327bb1bcbcafb66be1e0d69da39" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_timer_bit_width_set</definition>
        <argsstring>(NRF_TIMER_Type *p_reg, nrf_timer_bit_width_t bit_width)</argsstring>
        <name>nrf_timer_bit_width_set</name>
        <param>
          <type>NRF_TIMER_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__timer__hal_1ga567f81d672267a218a5b2f0155be3043" kindref="member">nrf_timer_bit_width_t</ref></type>
          <declname>bit_width</declname>
        </param>
        <briefdescription>
<para>Function for setting the timer bit width. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">bit_width</parametername>
</parameternamelist>
<parameterdescription>
<para>Timer bit width. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_timer.h" line="898" column="24" bodyfile="hal/nrf_timer.h" bodystart="898" bodyend="904" declfile="hal/nrf_timer.h" declline="672" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__timer__hal_1gaf2be8f99a56547edd3d37a59b7be2602" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE <ref refid="group__nrf__timer__hal_1ga567f81d672267a218a5b2f0155be3043" kindref="member">nrf_timer_bit_width_t</ref></type>
        <definition>NRF_STATIC_INLINE nrf_timer_bit_width_t nrf_timer_bit_width_get</definition>
        <argsstring>(NRF_TIMER_Type const *p_reg)</argsstring>
        <name>nrf_timer_bit_width_get</name>
        <param>
          <type>NRF_TIMER_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for retrieving the timer bit width. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Timer bit width. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_timer.h" line="906" column="41" bodyfile="hal/nrf_timer.h" bodystart="906" bodyend="909" declfile="hal/nrf_timer.h" declline="682" declcolumn="41"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__timer__hal_1ga8778ec1e21e5a8306d720ab4e69a199b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_timer_cc_set</definition>
        <argsstring>(NRF_TIMER_Type *p_reg, nrf_timer_cc_channel_t cc_channel, uint32_t cc_value)</argsstring>
        <name>nrf_timer_cc_set</name>
        <param>
          <type>NRF_TIMER_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__timer__hal_1ga21336e3aff87c90e95f08eff763d91a8" kindref="member">nrf_timer_cc_channel_t</ref></type>
          <declname>cc_channel</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>cc_value</declname>
        </param>
        <briefdescription>
<para>Function for setting the capture/compare register for the specified channel. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">cc_channel</parametername>
</parameternamelist>
<parameterdescription>
<para>The specified capture/compare channel. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">cc_value</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to write to the capture/compare register. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_timer.h" line="922" column="24" bodyfile="hal/nrf_timer.h" bodystart="922" bodyend="927" declfile="hal/nrf_timer.h" declline="691" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__timer__hal_1ga237a16bb2596cc350a15f741665b7e75" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_timer_cc_get</definition>
        <argsstring>(NRF_TIMER_Type const *p_reg, nrf_timer_cc_channel_t cc_channel)</argsstring>
        <name>nrf_timer_cc_get</name>
        <param>
          <type>NRF_TIMER_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__timer__hal_1ga21336e3aff87c90e95f08eff763d91a8" kindref="member">nrf_timer_cc_channel_t</ref></type>
          <declname>cc_channel</declname>
        </param>
        <briefdescription>
<para>Function for retrieving the capture/compare value for a specified channel. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">cc_channel</parametername>
</parameternamelist>
<parameterdescription>
<para>The specified capture/compare channel.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Value from the specified capture/compare register. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_timer.h" line="929" column="28" bodyfile="hal/nrf_timer.h" bodystart="929" bodyend="933" declfile="hal/nrf_timer.h" declline="703" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__timer__hal_1ga992b4f8249b638159cc2abedcca7ba6a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE <ref refid="group__nrf__timer__hal_1ga1db410e4a6b7e38de383220b20724906" kindref="member">nrf_timer_task_t</ref></type>
        <definition>NRF_STATIC_INLINE nrf_timer_task_t nrf_timer_capture_task_get</definition>
        <argsstring>(uint8_t channel)</argsstring>
        <name>nrf_timer_capture_task_get</name>
        <param>
          <type>uint8_t</type>
          <declname>channel</declname>
        </param>
        <briefdescription>
<para>Function for getting the specified timer capture task. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">channel</parametername>
</parameternamelist>
<parameterdescription>
<para>Capture channel.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Capture task. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_timer.h" line="935" column="36" bodyfile="hal/nrf_timer.h" bodystart="935" bodyend="938" declfile="hal/nrf_timer.h" declline="713" declcolumn="36"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__timer__hal_1ga2e446c45ecb7958a1a15f8f08cdc2c40" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE <ref refid="group__nrf__timer__hal_1ga6c7c835fd175129175fe2c08237af3c3" kindref="member">nrf_timer_event_t</ref></type>
        <definition>NRF_STATIC_INLINE nrf_timer_event_t nrf_timer_compare_event_get</definition>
        <argsstring>(uint8_t channel)</argsstring>
        <name>nrf_timer_compare_event_get</name>
        <param>
          <type>uint8_t</type>
          <declname>channel</declname>
        </param>
        <briefdescription>
<para>Function for getting the specified timer compare event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">channel</parametername>
</parameternamelist>
<parameterdescription>
<para>Compare channel.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Compare event. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_timer.h" line="940" column="37" bodyfile="hal/nrf_timer.h" bodystart="940" bodyend="943" declfile="hal/nrf_timer.h" declline="722" declcolumn="37"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__timer__hal_1gac8210bc33f954ef3dacd78f3aabaf0bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE <ref refid="group__nrf__timer__hal_1ga55adb42b75222256195fa003f8c0dc20" kindref="member">nrf_timer_int_mask_t</ref></type>
        <definition>NRF_STATIC_INLINE nrf_timer_int_mask_t nrf_timer_compare_int_get</definition>
        <argsstring>(uint8_t channel)</argsstring>
        <name>nrf_timer_compare_int_get</name>
        <param>
          <type>uint8_t</type>
          <declname>channel</declname>
        </param>
        <briefdescription>
<para>Function for getting the specified timer compare interrupt. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">channel</parametername>
</parameternamelist>
<parameterdescription>
<para>Compare channel.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Compare interrupt. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_timer.h" line="945" column="40" bodyfile="hal/nrf_timer.h" bodystart="945" bodyend="949" declfile="hal/nrf_timer.h" declline="731" declcolumn="40"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__timer__hal_1ga9b471b98803bcac06bd272feb38ceca5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_timer_us_to_ticks</definition>
        <argsstring>(uint32_t time_us, nrf_timer_frequency_t frequency)</argsstring>
        <name>nrf_timer_us_to_ticks</name>
        <param>
          <type>uint32_t</type>
          <declname>time_us</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__timer__hal_1ga28862835cd77a9c8481ed04c7b1918eb" kindref="member">nrf_timer_frequency_t</ref></type>
          <declname>frequency</declname>
        </param>
        <briefdescription>
<para>Function for calculating the number of timer ticks for a given time (in microseconds) and timer frequency. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">time_us</parametername>
</parameternamelist>
<parameterdescription>
<para>Time in microseconds. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">frequency</parametername>
</parameternamelist>
<parameterdescription>
<para>Timer frequency.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Number of timer ticks. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_timer.h" line="951" column="28" bodyfile="hal/nrf_timer.h" bodystart="951" bodyend="960" declfile="hal/nrf_timer.h" declline="742" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__timer__hal_1ga4f52b3d15736f23db37552fc777a8253" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_timer_ms_to_ticks</definition>
        <argsstring>(uint32_t time_ms, nrf_timer_frequency_t frequency)</argsstring>
        <name>nrf_timer_ms_to_ticks</name>
        <param>
          <type>uint32_t</type>
          <declname>time_ms</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__timer__hal_1ga28862835cd77a9c8481ed04c7b1918eb" kindref="member">nrf_timer_frequency_t</ref></type>
          <declname>frequency</declname>
        </param>
        <briefdescription>
<para>Function for calculating the number of timer ticks for a given time (in milliseconds) and timer frequency. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">time_ms</parametername>
</parameternamelist>
<parameterdescription>
<para>Time in milliseconds. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">frequency</parametername>
</parameternamelist>
<parameterdescription>
<para>Timer frequency.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Number of timer ticks. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_timer.h" line="962" column="28" bodyfile="hal/nrf_timer.h" bodystart="962" bodyend="971" declfile="hal/nrf_timer.h" declline="754" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__timer__hal_1ga5b34388603484fa4043803f1ebca04c0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_timer_one_shot_enable</definition>
        <argsstring>(NRF_TIMER_Type *p_reg, nrf_timer_cc_channel_t cc_channel)</argsstring>
        <name>nrf_timer_one_shot_enable</name>
        <param>
          <type>NRF_TIMER_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__timer__hal_1ga21336e3aff87c90e95f08eff763d91a8" kindref="member">nrf_timer_cc_channel_t</ref></type>
          <declname>cc_channel</declname>
        </param>
        <briefdescription>
<para>Function for enabling one-shot operation for the specified capture/compare channel. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">cc_channel</parametername>
</parameternamelist>
<parameterdescription>
<para>Capture/compare channel. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_timer.h" line="974" column="24" bodyfile="hal/nrf_timer.h" bodystart="974" bodyend="978" declfile="hal/nrf_timer.h" declline="764" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__timer__hal_1ga85ee7ab4a9d8e7368602aa73ef560556" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_timer_one_shot_disable</definition>
        <argsstring>(NRF_TIMER_Type *p_reg, nrf_timer_cc_channel_t cc_channel)</argsstring>
        <name>nrf_timer_one_shot_disable</name>
        <param>
          <type>NRF_TIMER_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__timer__hal_1ga21336e3aff87c90e95f08eff763d91a8" kindref="member">nrf_timer_cc_channel_t</ref></type>
          <declname>cc_channel</declname>
        </param>
        <briefdescription>
<para>Function for disabling one-shot operation for the specified capture/compare channel. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">cc_channel</parametername>
</parameternamelist>
<parameterdescription>
<para>Capture/compare channel. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_timer.h" line="980" column="24" bodyfile="hal/nrf_timer.h" bodystart="980" bodyend="984" declfile="hal/nrf_timer.h" declline="773" declcolumn="24"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2014<sp/>-<sp/>2024,<sp/>Nordic<sp/>Semiconductor<sp/>ASA</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>All<sp/>rights<sp/>reserved.</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>SPDX-License-Identifier:<sp/>BSD-3-Clause</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions<sp/>are<sp/>met:</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>1.<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright<sp/>notice,<sp/>this</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>2.<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the<sp/>distribution.</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/>3.<sp/>Neither<sp/>the<sp/>name<sp/>of<sp/>the<sp/>copyright<sp/>holder<sp/>nor<sp/>the<sp/>names<sp/>of<sp/>its</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>contributors<sp/>may<sp/>be<sp/>used<sp/>to<sp/>endorse<sp/>or<sp/>promote<sp/>products<sp/>derived<sp/>from<sp/>this</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>software<sp/>without<sp/>specific<sp/>prior<sp/>written<sp/>permission.</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>COPYRIGHT<sp/>HOLDERS<sp/>AND<sp/>CONTRIBUTORS<sp/>&quot;AS<sp/>IS&quot;</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/>AND<sp/>ANY<sp/>EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>THE</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*<sp/>ARE<sp/>DISCLAIMED.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>COPYRIGHT<sp/>HOLDER<sp/>OR<sp/>CONTRIBUTORS<sp/>BE</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,<sp/>SPECIAL,<sp/>EXEMPLARY,<sp/>OR</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>PROCUREMENT<sp/>OF</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>*<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,<sp/>DATA,<sp/>OR<sp/>PROFITS;<sp/>OR<sp/>BUSINESS</highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/>*<sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY<sp/>THEORY<sp/>OF<sp/>LIABILITY,<sp/>WHETHER<sp/>IN</highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/>*<sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR<sp/>OTHERWISE)</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/>*<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE<sp/>OF<sp/>THIS<sp/>SOFTWARE,<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/>*<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight></codeline>
<codeline lineno="32"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>NRF_TIMER_H__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_TIMER_H__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;nrfx.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="43"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="44"><highlight class="comment"><sp/>*<sp/>@defgroup<sp/>nrf_timer_hal<sp/>TIMER<sp/>HAL</highlight></codeline>
<codeline lineno="45"><highlight class="comment"><sp/>*<sp/>@{</highlight></codeline>
<codeline lineno="46"><highlight class="comment"><sp/>*<sp/>@ingroup<sp/>nrf_timer</highlight></codeline>
<codeline lineno="47"><highlight class="comment"><sp/>*<sp/>@brief<sp/><sp/><sp/>Hardware<sp/>access<sp/>layer<sp/>for<sp/>managing<sp/>the<sp/>TIMER<sp/>peripheral.</highlight></codeline>
<codeline lineno="48"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="50"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="51"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Macro<sp/>getting<sp/>pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>TIMER<sp/>peripheral.</highlight></codeline>
<codeline lineno="52"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="53"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>idx<sp/>TIMER<sp/>instance<sp/>index.</highlight></codeline>
<codeline lineno="54"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="55"><highlight class="comment"><sp/>*<sp/>@return<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>TIMER<sp/>peripheral.</highlight></codeline>
<codeline lineno="56"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_TIMER_INST_GET(idx)<sp/>NRFX_CONCAT(NRF_,<sp/>TIMER,<sp/>idx)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(TIMER_INTENSET_COMPARE4_Msk)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="60"><highlight class="comment">/**<sp/>@brief<sp/>Symbol<sp/>indicating<sp/>whether<sp/>timer<sp/>has<sp/>capture/compare<sp/>channel<sp/>4.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_TIMER_HAS_CC4<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_TIMER_HAS_CC4<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(TIMER_INTENSET_COMPARE5_Msk)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="67"><highlight class="comment">/**<sp/>@brief<sp/>Symbol<sp/>indicating<sp/>whether<sp/>timer<sp/>has<sp/>capture/compare<sp/>channel<sp/>5.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_TIMER_HAS_CC5<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_TIMER_HAS_CC5<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(TIMER_INTENSET_COMPARE6_Msk)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="74"><highlight class="comment">/**<sp/>@brief<sp/>Symbol<sp/>indicating<sp/>whether<sp/>timer<sp/>has<sp/>capture/compare<sp/>channel<sp/>6.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_TIMER_HAS_CC6<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_TIMER_HAS_CC6<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(TIMER_INTENSET_COMPARE7_Msk)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="81"><highlight class="comment">/**<sp/>@brief<sp/>Symbol<sp/>indicating<sp/>whether<sp/>timer<sp/>has<sp/>capture/compare<sp/>channel<sp/>7.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_TIMER_HAS_CC7<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_TIMER_HAS_CC7<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(TIMER_MODE_MODE_LowPowerCounter)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="88"><highlight class="comment">/**<sp/>@brief<sp/>Symbol<sp/>indicating<sp/>whether<sp/>timer<sp/>supports<sp/>low<sp/>power<sp/>mode.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_TIMER_HAS_LOW_POWER_MODE<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_TIMER_HAS_LOW_POWER_MODE<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(TIMER_ONESHOTEN_ONESHOTEN_Msk)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="95"><highlight class="comment">/**<sp/>@brief<sp/>Symbol<sp/>indicating<sp/>whether<sp/>timer<sp/>supports<sp/>one-shot<sp/>operation.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_TIMER_HAS_ONE_SHOT<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_TIMER_HAS_ONE_SHOT<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="101"><highlight class="comment">/**<sp/>@brief<sp/>Base<sp/>frequency<sp/>value<sp/>320<sp/>MHz<sp/>for<sp/>TIMER.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_TIMER_BASE_FREQUENCY_320MHZ<sp/>(NRFX_MHZ_TO_HZ(320UL))</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="103"><highlight class="comment">/**<sp/>@brief<sp/>Base<sp/>frequency<sp/>value<sp/>128<sp/>MHz<sp/>for<sp/>TIMER.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_TIMER_BASE_FREQUENCY_128MHZ<sp/>(NRFX_MHZ_TO_HZ(128UL))</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="105"><highlight class="comment">/**<sp/>@brief<sp/>Base<sp/>frequency<sp/>value<sp/>64<sp/>MHz<sp/>for<sp/>TIMER.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_TIMER_BASE_FREQUENCY_64MHZ<sp/><sp/>(NRFX_MHZ_TO_HZ(64UL))</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="107"><highlight class="comment">/**<sp/>@brief<sp/>Base<sp/>frequency<sp/>value<sp/>32<sp/>MHz<sp/>for<sp/>TIMER.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_TIMER_BASE_FREQUENCY_32MHZ<sp/><sp/>(NRFX_MHZ_TO_HZ(32UL))</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="109"><highlight class="comment">/**<sp/>@brief<sp/>Base<sp/>frequency<sp/>value<sp/>16<sp/>MHz<sp/>for<sp/>TIMER.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_TIMER_BASE_FREQUENCY_16MHZ<sp/><sp/>(NRFX_MHZ_TO_HZ(16UL))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(TIMER_PRESCALER_PRESCALER_Max)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="113"><highlight class="comment">/**<sp/>@brief<sp/>Maximum<sp/>value<sp/>of<sp/>PRESCALER<sp/>register.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_TIMER_PRESCALER_MAX<sp/>TIMER_PRESCALER_PRESCALER_Max</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_TIMER_PRESCALER_MAX<sp/>9</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="119"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="120"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Macro<sp/>for<sp/>getting<sp/>the<sp/>maximum<sp/>bit<sp/>resolution<sp/>of<sp/>the<sp/>specified<sp/>timer<sp/>instance.</highlight></codeline>
<codeline lineno="121"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="122"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>id<sp/>Index<sp/>of<sp/>the<sp/>specified<sp/>timer<sp/>instance.</highlight></codeline>
<codeline lineno="123"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="124"><highlight class="comment"><sp/>*<sp/>@retval<sp/>Maximum<sp/>bit<sp/>resolution<sp/>of<sp/>the<sp/>specified<sp/>timer<sp/>instance.</highlight></codeline>
<codeline lineno="125"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TIMER_MAX_SIZE(id)<sp/><sp/>NRFX_CONCAT_3(TIMER,<sp/>id,<sp/>_MAX_SIZE)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="128"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="129"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Macro<sp/>for<sp/>validating<sp/>the<sp/>correctness<sp/>of<sp/>the<sp/>bit<sp/>width<sp/>resolution<sp/>setting.</highlight></codeline>
<codeline lineno="130"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="131"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>id<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Index<sp/>of<sp/>the<sp/>specified<sp/>timer<sp/>instance.</highlight></codeline>
<codeline lineno="132"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>bit_width<sp/>Bit<sp/>width<sp/>resolution<sp/>value<sp/>to<sp/>be<sp/>checked.</highlight></codeline>
<codeline lineno="133"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="134"><highlight class="comment"><sp/>*<sp/>@retval<sp/>true<sp/><sp/>Timer<sp/>instance<sp/>supports<sp/>the<sp/>specified<sp/>bit<sp/>width<sp/>resolution<sp/>value.</highlight></codeline>
<codeline lineno="135"><highlight class="comment"><sp/>*<sp/>@retval<sp/>false<sp/>Timer<sp/>instance<sp/>does<sp/>not<sp/>support<sp/>the<sp/>specified<sp/>bit<sp/>width<sp/>resolution<sp/>value.</highlight></codeline>
<codeline lineno="136"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TIMER_BIT_WIDTH_MAX(id,<sp/>bit_width)<sp/>\</highlight></codeline>
<codeline lineno="138"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>(TIMER_MAX_SIZE(id)<sp/>==<sp/>8<sp/><sp/><sp/>?<sp/>(bit_width<sp/>==<sp/>NRF_TIMER_BIT_WIDTH_8)<sp/><sp/>:<sp/><sp/>\</highlight></codeline>
<codeline lineno="139"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>(TIMER_MAX_SIZE(id)<sp/>==<sp/>16<sp/><sp/>?<sp/>(bit_width<sp/>==<sp/>NRF_TIMER_BIT_WIDTH_8)<sp/><sp/>||<sp/>\</highlight></codeline>
<codeline lineno="140"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(bit_width<sp/>==<sp/>NRF_TIMER_BIT_WIDTH_16)<sp/><sp/>:<sp/>\</highlight></codeline>
<codeline lineno="141"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>(TIMER_MAX_SIZE(id)<sp/>==<sp/>24<sp/><sp/>?<sp/>(bit_width<sp/>==<sp/>NRF_TIMER_BIT_WIDTH_8)<sp/><sp/>||<sp/>\</highlight></codeline>
<codeline lineno="142"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(bit_width<sp/>==<sp/>NRF_TIMER_BIT_WIDTH_16)<sp/>||<sp/>\</highlight></codeline>
<codeline lineno="143"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(bit_width<sp/>==<sp/>NRF_TIMER_BIT_WIDTH_24)<sp/>:<sp/><sp/>\</highlight></codeline>
<codeline lineno="144"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>(TIMER_MAX_SIZE(id)<sp/>==<sp/>32<sp/><sp/>?<sp/>(bit_width<sp/>==<sp/>NRF_TIMER_BIT_WIDTH_8)<sp/><sp/>||<sp/>\</highlight></codeline>
<codeline lineno="145"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(bit_width<sp/>==<sp/>NRF_TIMER_BIT_WIDTH_16)<sp/>||<sp/>\</highlight></codeline>
<codeline lineno="146"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(bit_width<sp/>==<sp/>NRF_TIMER_BIT_WIDTH_24)<sp/>||<sp/>\</highlight></codeline>
<codeline lineno="147"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(bit_width<sp/>==<sp/>NRF_TIMER_BIT_WIDTH_32)<sp/>:<sp/><sp/>\</highlight></codeline>
<codeline lineno="148"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>false))))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="150"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="151"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Macro<sp/>for<sp/>checking<sp/>correctness<sp/>of<sp/>bit<sp/>width<sp/>configuration<sp/>for<sp/>the<sp/>specified<sp/>timer.</highlight></codeline>
<codeline lineno="152"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="153"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/><sp/><sp/><sp/>Timer<sp/>instance<sp/>register.</highlight></codeline>
<codeline lineno="154"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>bit_width<sp/>Bit<sp/>width<sp/>resolution<sp/>value<sp/>to<sp/>be<sp/>checked.</highlight></codeline>
<codeline lineno="155"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="156"><highlight class="comment"><sp/>*<sp/>@retval<sp/>true<sp/><sp/>Timer<sp/>instance<sp/>supports<sp/>the<sp/>specified<sp/>bit<sp/>width<sp/>resolution<sp/>value.</highlight></codeline>
<codeline lineno="157"><highlight class="comment"><sp/>*<sp/>@retval<sp/>false<sp/>Timer<sp/>instance<sp/>does<sp/>not<sp/>support<sp/>the<sp/>specified<sp/>bit<sp/>width<sp/>resolution<sp/>value.</highlight></codeline>
<codeline lineno="158"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_TIMER_IS_BIT_WIDTH_VALID(p_reg,<sp/>bit_width)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="160"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>(NRFX_COND_CODE_1(NRFX_INSTANCE_PRESENT(TIMER0),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="161"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(((p_reg<sp/>==<sp/>NRF_TIMER0)<sp/><sp/><sp/>&amp;&amp;<sp/>TIMER_BIT_WIDTH_MAX(0,<sp/>bit_width))),<sp/><sp/><sp/>(false))<sp/>||<sp/>\</highlight></codeline>
<codeline lineno="162"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>NRFX_COND_CODE_1(NRFX_INSTANCE_PRESENT(TIMER1),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="163"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(((p_reg<sp/>==<sp/>NRF_TIMER1)<sp/><sp/><sp/>&amp;&amp;<sp/>TIMER_BIT_WIDTH_MAX(1,<sp/>bit_width))),<sp/><sp/><sp/>(false))<sp/>||<sp/>\</highlight></codeline>
<codeline lineno="164"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>NRFX_COND_CODE_1(NRFX_INSTANCE_PRESENT(TIMER2),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="165"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(((p_reg<sp/>==<sp/>NRF_TIMER2)<sp/><sp/><sp/>&amp;&amp;<sp/>TIMER_BIT_WIDTH_MAX(2,<sp/>bit_width))),<sp/><sp/><sp/>(false))<sp/>||<sp/>\</highlight></codeline>
<codeline lineno="166"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>NRFX_COND_CODE_1(NRFX_INSTANCE_PRESENT(TIMER3),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="167"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(((p_reg<sp/>==<sp/>NRF_TIMER3)<sp/><sp/><sp/>&amp;&amp;<sp/>TIMER_BIT_WIDTH_MAX(3,<sp/>bit_width))),<sp/><sp/><sp/>(false))<sp/>||<sp/>\</highlight></codeline>
<codeline lineno="168"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>NRFX_COND_CODE_1(NRFX_INSTANCE_PRESENT(TIMER4),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="169"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(((p_reg<sp/>==<sp/>NRF_TIMER4)<sp/><sp/><sp/>&amp;&amp;<sp/>TIMER_BIT_WIDTH_MAX(4,<sp/>bit_width))),<sp/><sp/><sp/>(false))<sp/>||<sp/>\</highlight></codeline>
<codeline lineno="170"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>NRFX_COND_CODE_1(NRFX_INSTANCE_PRESENT(TIMER00),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="171"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(((p_reg<sp/>==<sp/>NRF_TIMER00)<sp/><sp/>&amp;&amp;<sp/>TIMER_BIT_WIDTH_MAX(00,<sp/>bit_width))),<sp/><sp/>(false))<sp/>||<sp/>\</highlight></codeline>
<codeline lineno="172"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>NRFX_COND_CODE_1(NRFX_INSTANCE_PRESENT(TIMER10),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="173"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(((p_reg<sp/>==<sp/>NRF_TIMER10)<sp/><sp/>&amp;&amp;<sp/>TIMER_BIT_WIDTH_MAX(10,<sp/>bit_width))),<sp/><sp/>(false))<sp/>||<sp/>\</highlight></codeline>
<codeline lineno="174"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>NRFX_COND_CODE_1(NRFX_INSTANCE_PRESENT(TIMER20),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="175"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(((p_reg<sp/>==<sp/>NRF_TIMER20)<sp/><sp/>&amp;&amp;<sp/>TIMER_BIT_WIDTH_MAX(20,<sp/>bit_width))),<sp/><sp/>(false))<sp/>||<sp/>\</highlight></codeline>
<codeline lineno="176"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>NRFX_COND_CODE_1(NRFX_INSTANCE_PRESENT(TIMER21),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="177"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(((p_reg<sp/>==<sp/>NRF_TIMER21)<sp/><sp/>&amp;&amp;<sp/>TIMER_BIT_WIDTH_MAX(21,<sp/>bit_width))),<sp/><sp/>(false))<sp/>||<sp/>\</highlight></codeline>
<codeline lineno="178"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>NRFX_COND_CODE_1(NRFX_INSTANCE_PRESENT(TIMER22),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="179"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(((p_reg<sp/>==<sp/>NRF_TIMER22)<sp/><sp/>&amp;&amp;<sp/>TIMER_BIT_WIDTH_MAX(22,<sp/>bit_width))),<sp/><sp/>(false))<sp/>||<sp/>\</highlight></codeline>
<codeline lineno="180"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>NRFX_COND_CODE_1(NRFX_INSTANCE_PRESENT(TIMER23),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="181"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(((p_reg<sp/>==<sp/>NRF_TIMER23)<sp/><sp/>&amp;&amp;<sp/>TIMER_BIT_WIDTH_MAX(23,<sp/>bit_width))),<sp/><sp/>(false))<sp/>||<sp/>\</highlight></codeline>
<codeline lineno="182"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>NRFX_COND_CODE_1(NRFX_INSTANCE_PRESENT(TIMER24),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="183"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(((p_reg<sp/>==<sp/>NRF_TIMER24)<sp/><sp/>&amp;&amp;<sp/>TIMER_BIT_WIDTH_MAX(24,<sp/>bit_width))),<sp/><sp/>(false))<sp/>||<sp/>\</highlight></codeline>
<codeline lineno="184"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>NRFX_COND_CODE_1(NRFX_INSTANCE_PRESENT(TIMER020),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="185"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(((p_reg<sp/>==<sp/>NRF_TIMER020)<sp/>&amp;&amp;<sp/>TIMER_BIT_WIDTH_MAX(020,<sp/>bit_width))),<sp/>(false))<sp/>||<sp/>\</highlight></codeline>
<codeline lineno="186"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>NRFX_COND_CODE_1(NRFX_INSTANCE_PRESENT(TIMER021),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="187"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(((p_reg<sp/>==<sp/>NRF_TIMER021)<sp/>&amp;&amp;<sp/>TIMER_BIT_WIDTH_MAX(021,<sp/>bit_width))),<sp/>(false))<sp/>||<sp/>\</highlight></codeline>
<codeline lineno="188"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>NRFX_COND_CODE_1(NRFX_INSTANCE_PRESENT(TIMER022),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="189"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(((p_reg<sp/>==<sp/>NRF_TIMER022)<sp/>&amp;&amp;<sp/>TIMER_BIT_WIDTH_MAX(022,<sp/>bit_width))),<sp/>(false))<sp/>||<sp/>\</highlight></codeline>
<codeline lineno="190"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>NRFX_COND_CODE_1(NRFX_INSTANCE_PRESENT(TIMER120),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="191"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(((p_reg<sp/>==<sp/>NRF_TIMER120)<sp/>&amp;&amp;<sp/>TIMER_BIT_WIDTH_MAX(120,<sp/>bit_width))),<sp/>(false))<sp/>||<sp/>\</highlight></codeline>
<codeline lineno="192"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>NRFX_COND_CODE_1(NRFX_INSTANCE_PRESENT(TIMER130),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="193"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(((p_reg<sp/>==<sp/>NRF_TIMER130)<sp/>&amp;&amp;<sp/>TIMER_BIT_WIDTH_MAX(130,<sp/>bit_width))),<sp/>(false))<sp/>||<sp/>\</highlight></codeline>
<codeline lineno="194"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>NRFX_COND_CODE_1(NRFX_INSTANCE_PRESENT(TIMER131),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="195"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(((p_reg<sp/>==<sp/>NRF_TIMER131)<sp/>&amp;&amp;<sp/>TIMER_BIT_WIDTH_MAX(131,<sp/>bit_width))),<sp/>(false))<sp/>||<sp/>\</highlight></codeline>
<codeline lineno="196"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>NRFX_COND_CODE_1(NRFX_INSTANCE_PRESENT(TIMER132),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="197"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(((p_reg<sp/>==<sp/>NRF_TIMER132)<sp/>&amp;&amp;<sp/>TIMER_BIT_WIDTH_MAX(132,<sp/>bit_width))),<sp/>(false))<sp/>||<sp/>\</highlight></codeline>
<codeline lineno="198"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>NRFX_COND_CODE_1(NRFX_INSTANCE_PRESENT(TIMER133),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="199"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(((p_reg<sp/>==<sp/>NRF_TIMER133)<sp/>&amp;&amp;<sp/>TIMER_BIT_WIDTH_MAX(133,<sp/>bit_width))),<sp/>(false))<sp/>||<sp/>\</highlight></codeline>
<codeline lineno="200"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>NRFX_COND_CODE_1(NRFX_INSTANCE_PRESENT(TIMER134),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="201"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(((p_reg<sp/>==<sp/>NRF_TIMER134)<sp/>&amp;&amp;<sp/>TIMER_BIT_WIDTH_MAX(134,<sp/>bit_width))),<sp/>(false))<sp/>||<sp/>\</highlight></codeline>
<codeline lineno="202"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>NRFX_COND_CODE_1(NRFX_INSTANCE_PRESENT(TIMER135),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="203"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(((p_reg<sp/>==<sp/>NRF_TIMER135)<sp/>&amp;&amp;<sp/>TIMER_BIT_WIDTH_MAX(135,<sp/>bit_width))),<sp/>(false))<sp/>||<sp/>\</highlight></codeline>
<codeline lineno="204"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>NRFX_COND_CODE_1(NRFX_INSTANCE_PRESENT(TIMER136),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="205"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(((p_reg<sp/>==<sp/>NRF_TIMER136)<sp/>&amp;&amp;<sp/>TIMER_BIT_WIDTH_MAX(136,<sp/>bit_width))),<sp/>(false))<sp/>||<sp/>\</highlight></codeline>
<codeline lineno="206"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>NRFX_COND_CODE_1(NRFX_INSTANCE_PRESENT(TIMER137),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="207"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(((p_reg<sp/>==<sp/>NRF_TIMER137)<sp/>&amp;&amp;<sp/>TIMER_BIT_WIDTH_MAX(137,<sp/>bit_width))),<sp/>(false)))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(NRF_TIMER_IS_320MHZ_TIMER)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="210"><highlight class="comment">/**<sp/>@brief<sp/>Macro<sp/>for<sp/>checking<sp/>whether<sp/>the<sp/>base<sp/>frequency<sp/>for<sp/>the<sp/>specified<sp/>timer<sp/>is<sp/>320<sp/>MHz.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_TIMER_IS_320MHZ_TIMER(p_reg)<sp/>\</highlight></codeline>
<codeline lineno="212"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>(NRFX_COND_CODE_1(NRFX_INSTANCE_PRESENT(TIMER120),<sp/>(p_reg<sp/>==<sp/>NRF_TIMER120),<sp/>(false))<sp/>||<sp/>\</highlight></codeline>
<codeline lineno="213"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>NRFX_COND_CODE_1(NRFX_INSTANCE_PRESENT(TIMER121),<sp/>(p_reg<sp/>==<sp/>NRF_TIMER121),<sp/>(false)))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(NRF_TIMER_IS_128MHZ_TIMER)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="217"><highlight class="comment">/**<sp/>@brief<sp/>Macro<sp/>for<sp/>checking<sp/>whether<sp/>the<sp/>base<sp/>frequency<sp/>for<sp/>the<sp/>specified<sp/>timer<sp/>is<sp/>128<sp/>MHz.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_TIMER_IS_128MHZ_TIMER(p_reg)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="219"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>(NRFX_COND_CODE_1(NRFX_IS_ENABLED(NRF_CPU_FREQ_IS_128MHZ),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="220"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(NRFX_COND_CODE_1(NRFX_INSTANCE_PRESENT(TIMER00),<sp/>(p_reg<sp/>==<sp/>NRF_TIMER00),<sp/>(false))),<sp/>\</highlight></codeline>
<codeline lineno="221"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(false)))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(NRF_TIMER_IS_64MHZ_TIMER)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="225"><highlight class="comment">/**<sp/>@brief<sp/>Macro<sp/>for<sp/>checking<sp/>whether<sp/>the<sp/>base<sp/>frequency<sp/>for<sp/>the<sp/>specified<sp/>timer<sp/>is<sp/>64<sp/>MHz.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_TIMER_IS_64MHZ_TIMER(p_reg)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="227"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>(NRFX_COND_CODE_1(NRFX_IS_ENABLED(NRF_CPU_FREQ_IS_64MHZ),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="228"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(NRFX_COND_CODE_1(NRFX_INSTANCE_PRESENT(TIMER00),<sp/>(p_reg<sp/>==<sp/>NRF_TIMER00),<sp/>(false))),<sp/>\</highlight></codeline>
<codeline lineno="229"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(false)))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(NRF_TIMER_IS_32MHZ_TIMER)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="233"><highlight class="comment">/**<sp/>@brief<sp/>Macro<sp/>for<sp/>checking<sp/>whether<sp/>the<sp/>base<sp/>frequency<sp/>for<sp/>the<sp/>specified<sp/>timer<sp/>is<sp/>32<sp/>MHz.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_TIMER_IS_32MHZ_TIMER(p_reg)<sp/>\</highlight></codeline>
<codeline lineno="235"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>(NRFX_COND_CODE_1(NRFX_INSTANCE_PRESENT(TIMER020),<sp/>(p_reg<sp/>==<sp/>NRF_TIMER020),<sp/>(false))<sp/>||<sp/>\</highlight></codeline>
<codeline lineno="236"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>NRFX_COND_CODE_1(NRFX_INSTANCE_PRESENT(TIMER021),<sp/>(p_reg<sp/>==<sp/>NRF_TIMER021),<sp/>(false))<sp/>||<sp/>\</highlight></codeline>
<codeline lineno="237"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>NRFX_COND_CODE_1(NRFX_INSTANCE_PRESENT(TIMER022),<sp/>(p_reg<sp/>==<sp/>NRF_TIMER022),<sp/>(false))<sp/>||<sp/>\</highlight></codeline>
<codeline lineno="238"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>NRFX_COND_CODE_1(NRFX_INSTANCE_PRESENT(TIMER10),<sp/><sp/>(p_reg<sp/>==<sp/>NRF_TIMER10),<sp/><sp/>(false)))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="241"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="242"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Macro<sp/>for<sp/>getting<sp/>base<sp/>frequency<sp/>value<sp/>in<sp/>Hz<sp/>for<sp/>the<sp/>specified<sp/>timer.</highlight></codeline>
<codeline lineno="243"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="244"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="245"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_TIMER_BASE_FREQUENCY_GET(p_reg)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="247"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>((NRF_TIMER_IS_320MHZ_TIMER(p_reg))<sp/>?<sp/>(NRF_TIMER_BASE_FREQUENCY_320MHZ):<sp/>\</highlight></codeline>
<codeline lineno="248"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>((NRF_TIMER_IS_128MHZ_TIMER(p_reg))<sp/>?<sp/>(NRF_TIMER_BASE_FREQUENCY_128MHZ):<sp/>\</highlight></codeline>
<codeline lineno="249"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>((NRF_TIMER_IS_64MHZ_TIMER(p_reg))<sp/><sp/>?<sp/>(NRF_TIMER_BASE_FREQUENCY_64MHZ)<sp/>:<sp/>\</highlight></codeline>
<codeline lineno="250"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>((NRF_TIMER_IS_32MHZ_TIMER(p_reg))<sp/><sp/>?<sp/>(NRF_TIMER_BASE_FREQUENCY_32MHZ)<sp/>:<sp/>\</highlight></codeline>
<codeline lineno="251"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>(NRF_TIMER_BASE_FREQUENCY_16MHZ)))))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="253"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="254"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Macro<sp/>for<sp/>computing<sp/>prescaler<sp/>value<sp/>for<sp/>given<sp/>base<sp/>frequency<sp/>and<sp/>desired<sp/>frequency.</highlight></codeline>
<codeline lineno="255"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="256"><highlight class="comment"><sp/>*<sp/>@warning<sp/>Not<sp/>every<sp/>combination<sp/>of<sp/>base<sp/>frequency<sp/>and<sp/>desired<sp/>frequency<sp/>is<sp/>supported.</highlight></codeline>
<codeline lineno="257"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="258"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>base_freq<sp/>Base<sp/>clock<sp/>frequency<sp/>for<sp/>timer<sp/>in<sp/>Hz.</highlight></codeline>
<codeline lineno="259"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>frequency<sp/>Desired<sp/>frequency<sp/>value<sp/>in<sp/>Hz.</highlight></codeline>
<codeline lineno="260"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_TIMER_PRESCALER_CALCULATE(base_freq,<sp/>frequency)<sp/>\</highlight></codeline>
<codeline lineno="262"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NRF_CTZ((uint32_t)(base_freq)<sp/>/<sp/>(uint32_t)(frequency))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="264"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="265"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Macro<sp/>for<sp/>checking<sp/>whether<sp/>specified<sp/>frequency<sp/>can<sp/>be<sp/>achived<sp/>for<sp/>given<sp/>timer<sp/>instance.</highlight></codeline>
<codeline lineno="266"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="267"><highlight class="comment"><sp/>*<sp/>@note<sp/>Macro<sp/>is<sp/>using<sp/>compile<sp/>time<sp/>assertion.</highlight></codeline>
<codeline lineno="268"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="269"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="270"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>frequency<sp/>Desired<sp/>frequency<sp/>value<sp/>in<sp/>Hz.</highlight></codeline>
<codeline lineno="271"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_TIMER_FREQUENCY_STATIC_CHECK(p_reg,<sp/>frequency)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="273"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>NRFX_STATIC_ASSERT(<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="274"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(NRF_TIMER_BASE_FREQUENCY_GET(p_reg)<sp/>==<sp/>frequency)<sp/>||<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="275"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((NRF_TIMER_BASE_FREQUENCY_GET(p_reg)<sp/>%<sp/>frequency<sp/>==<sp/>0)<sp/>&amp;&amp;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="276"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NRFX_IS_POWER_OF_TWO(NRF_TIMER_BASE_FREQUENCY_GET(p_reg)<sp/>/<sp/>(uint32_t)frequency)<sp/>&amp;&amp;<sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="277"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((NRF_TIMER_BASE_FREQUENCY_GET(p_reg)<sp/>/<sp/>frequency)<sp/>&lt;=<sp/>(1<sp/>&lt;&lt;<sp/>NRF_TIMER_PRESCALER_MAX))))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="279"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="280"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Macro<sp/>for<sp/>getting<sp/>the<sp/>number<sp/>of<sp/>capture/compare<sp/>channels<sp/>available</highlight></codeline>
<codeline lineno="281"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>in<sp/>a<sp/>given<sp/>timer<sp/>instance.</highlight></codeline>
<codeline lineno="282"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="283"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>id<sp/>Index<sp/>of<sp/>the<sp/>specified<sp/>timer<sp/>instance.</highlight></codeline>
<codeline lineno="284"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_TIMER_CC_CHANNEL_COUNT(id)<sp/>NRFX_CONCAT_3(TIMER,<sp/>id,<sp/>_CC_NUM)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="287"><highlight class="comment">/**<sp/>@brief<sp/>Symbol<sp/>specifying<sp/>maximum<sp/>number<sp/>of<sp/>available<sp/>compare<sp/>channels.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_TIMER_CC_COUNT_MAX<sp/>NRFX_ARRAY_SIZE(((NRF_TIMER_Type*)0)-&gt;EVENTS_COMPARE)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="290"><highlight class="comment">/**<sp/>@brief<sp/>Symbol<sp/>for<sp/>creating<sp/>the<sp/>interrupt<sp/>bitmask<sp/>for<sp/>all<sp/>compare<sp/>channels.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_TIMER_ALL_CHANNELS_INT_MASK<sp/>\</highlight></codeline>
<codeline lineno="292"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)((1<sp/>&lt;&lt;<sp/>NRF_TIMER_CC_COUNT_MAX)<sp/>-<sp/>1)<sp/>&lt;&lt;<sp/>TIMER_INTENSET_COMPARE0_Pos)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="294"><highlight class="comment">/**<sp/>@brief<sp/>Timer<sp/>tasks.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal">{</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__timer__hal_1gga1db410e4a6b7e38de383220b20724906ab2af686e5e4bf199b32a330f009f1ae0" kindref="member">NRF_TIMER_TASK_START</ref><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_TIMER_Type,<sp/>TASKS_START),<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Task<sp/>for<sp/>starting<sp/>the<sp/>timer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__timer__hal_1gga1db410e4a6b7e38de383220b20724906a171226edb83da69efd7189e0f7593990" kindref="member">NRF_TIMER_TASK_STOP</ref><sp/><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_TIMER_Type,<sp/>TASKS_STOP),<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Task<sp/>for<sp/>stopping<sp/>the<sp/>timer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__timer__hal_1gga1db410e4a6b7e38de383220b20724906a5bde5d2faa0fde13590ffbae0a216650" kindref="member">NRF_TIMER_TASK_COUNT</ref><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_TIMER_Type,<sp/>TASKS_COUNT),<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Task<sp/>for<sp/>incrementing<sp/>the<sp/>timer<sp/>(in<sp/>counter<sp/>mode).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__timer__hal_1gga1db410e4a6b7e38de383220b20724906ab956c87716b91ed2e00a34056399e384" kindref="member">NRF_TIMER_TASK_CLEAR</ref><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_TIMER_Type,<sp/>TASKS_CLEAR),<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Task<sp/>for<sp/>resetting<sp/>the<sp/>timer<sp/>value.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__timer__hal_1gga1db410e4a6b7e38de383220b20724906a70ae5a97962ac35439e77e973f8e1aba" kindref="member">NRF_TIMER_TASK_SHUTDOWN</ref><sp/>=<sp/>offsetof(NRF_TIMER_Type,<sp/>TASKS_SHUTDOWN),<sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Task<sp/>for<sp/>powering<sp/>off<sp/>the<sp/>timer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__timer__hal_1gga1db410e4a6b7e38de383220b20724906a1596e7e7cea8a8d7017e0c2964f88f4a" kindref="member">NRF_TIMER_TASK_CAPTURE0</ref><sp/>=<sp/>offsetof(NRF_TIMER_Type,<sp/>TASKS_CAPTURE[0]),<sp/></highlight><highlight class="comment">///&lt;<sp/>Task<sp/>for<sp/>capturing<sp/>the<sp/>timer<sp/>value<sp/>on<sp/>channel<sp/>0.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__timer__hal_1gga1db410e4a6b7e38de383220b20724906aa111674be32dba6853cfad957a3c3c17" kindref="member">NRF_TIMER_TASK_CAPTURE1</ref><sp/>=<sp/>offsetof(NRF_TIMER_Type,<sp/>TASKS_CAPTURE[1]),<sp/></highlight><highlight class="comment">///&lt;<sp/>Task<sp/>for<sp/>capturing<sp/>the<sp/>timer<sp/>value<sp/>on<sp/>channel<sp/>1.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__timer__hal_1gga1db410e4a6b7e38de383220b20724906ae571cd4149d48b96dcd56d015dd828c6" kindref="member">NRF_TIMER_TASK_CAPTURE2</ref><sp/>=<sp/>offsetof(NRF_TIMER_Type,<sp/>TASKS_CAPTURE[2]),<sp/></highlight><highlight class="comment">///&lt;<sp/>Task<sp/>for<sp/>capturing<sp/>the<sp/>timer<sp/>value<sp/>on<sp/>channel<sp/>2.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__timer__hal_1gga1db410e4a6b7e38de383220b20724906ac99434e7c1b808007a4052bdb6edae83" kindref="member">NRF_TIMER_TASK_CAPTURE3</ref><sp/>=<sp/>offsetof(NRF_TIMER_Type,<sp/>TASKS_CAPTURE[3]),<sp/></highlight><highlight class="comment">///&lt;<sp/>Task<sp/>for<sp/>capturing<sp/>the<sp/>timer<sp/>value<sp/>on<sp/>channel<sp/>3.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_TIMER_HAS_CC4</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__timer__hal_1gga1db410e4a6b7e38de383220b20724906aceb184002f93b7dcd65e4601202994c1" kindref="member">NRF_TIMER_TASK_CAPTURE4</ref><sp/>=<sp/>offsetof(NRF_TIMER_Type,<sp/>TASKS_CAPTURE[4]),<sp/></highlight><highlight class="comment">///&lt;<sp/>Task<sp/>for<sp/>capturing<sp/>the<sp/>timer<sp/>value<sp/>on<sp/>channel<sp/>4.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_TIMER_HAS_CC5</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__timer__hal_1gga1db410e4a6b7e38de383220b20724906a2d5f09f8db223252d69b222a516b0fb6" kindref="member">NRF_TIMER_TASK_CAPTURE5</ref><sp/>=<sp/>offsetof(NRF_TIMER_Type,<sp/>TASKS_CAPTURE[5]),<sp/></highlight><highlight class="comment">///&lt;<sp/>Task<sp/>for<sp/>capturing<sp/>the<sp/>timer<sp/>value<sp/>on<sp/>channel<sp/>5.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_TIMER_HAS_CC6</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__timer__hal_1gga1db410e4a6b7e38de383220b20724906aac8890bf8407ca05b16cd271e63a3d32" kindref="member">NRF_TIMER_TASK_CAPTURE6</ref><sp/>=<sp/>offsetof(NRF_TIMER_Type,<sp/>TASKS_CAPTURE[6]),<sp/></highlight><highlight class="comment">///&lt;<sp/>Task<sp/>for<sp/>capturing<sp/>the<sp/>timer<sp/>value<sp/>on<sp/>channel<sp/>6.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_TIMER_HAS_CC7</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__timer__hal_1gga1db410e4a6b7e38de383220b20724906a42923b80df0bde85c4c4c32b0a00ac44" kindref="member">NRF_TIMER_TASK_CAPTURE7</ref><sp/>=<sp/>offsetof(NRF_TIMER_Type,<sp/>TASKS_CAPTURE[7]),<sp/></highlight><highlight class="comment">///&lt;<sp/>Task<sp/>for<sp/>capturing<sp/>the<sp/>timer<sp/>value<sp/>on<sp/>channel<sp/>7.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal">}<sp/><ref refid="group__nrf__timer__hal_1ga1db410e4a6b7e38de383220b20724906" kindref="member">nrf_timer_task_t</ref>;</highlight></codeline>
<codeline lineno="319"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="320"><highlight class="comment">/**<sp/>@brief<sp/>Timer<sp/>events.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal">{</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__timer__hal_1gga6c7c835fd175129175fe2c08237af3c3ad00ff73ba0ee5ea626289842ff9a209e" kindref="member">NRF_TIMER_EVENT_COMPARE0</ref><sp/>=<sp/>offsetof(NRF_TIMER_Type,<sp/>EVENTS_COMPARE[0]),<sp/></highlight><highlight class="comment">///&lt;<sp/>Event<sp/>from<sp/>compare<sp/>channel<sp/>0.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__timer__hal_1gga6c7c835fd175129175fe2c08237af3c3af1963f4d77921395beae5cb9cc96e540" kindref="member">NRF_TIMER_EVENT_COMPARE1</ref><sp/>=<sp/>offsetof(NRF_TIMER_Type,<sp/>EVENTS_COMPARE[1]),<sp/></highlight><highlight class="comment">///&lt;<sp/>Event<sp/>from<sp/>compare<sp/>channel<sp/>1.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__timer__hal_1gga6c7c835fd175129175fe2c08237af3c3a59bd12d538b43c38c52d044fddf1264a" kindref="member">NRF_TIMER_EVENT_COMPARE2</ref><sp/>=<sp/>offsetof(NRF_TIMER_Type,<sp/>EVENTS_COMPARE[2]),<sp/></highlight><highlight class="comment">///&lt;<sp/>Event<sp/>from<sp/>compare<sp/>channel<sp/>2.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__timer__hal_1gga6c7c835fd175129175fe2c08237af3c3a62f321a35d357f116681bcefc956ab9d" kindref="member">NRF_TIMER_EVENT_COMPARE3</ref><sp/>=<sp/>offsetof(NRF_TIMER_Type,<sp/>EVENTS_COMPARE[3]),<sp/></highlight><highlight class="comment">///&lt;<sp/>Event<sp/>from<sp/>compare<sp/>channel<sp/>3.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_TIMER_HAS_CC4</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__timer__hal_1gga6c7c835fd175129175fe2c08237af3c3ad3ec1e6e7389be59d8621a643278a3d0" kindref="member">NRF_TIMER_EVENT_COMPARE4</ref><sp/>=<sp/>offsetof(NRF_TIMER_Type,<sp/>EVENTS_COMPARE[4]),<sp/></highlight><highlight class="comment">///&lt;<sp/>Event<sp/>from<sp/>compare<sp/>channel<sp/>4.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_TIMER_HAS_CC5</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__timer__hal_1gga6c7c835fd175129175fe2c08237af3c3a2373cf69bfaf2c43e9dcdd0cf45778fd" kindref="member">NRF_TIMER_EVENT_COMPARE5</ref><sp/>=<sp/>offsetof(NRF_TIMER_Type,<sp/>EVENTS_COMPARE[5]),<sp/></highlight><highlight class="comment">///&lt;<sp/>Event<sp/>from<sp/>compare<sp/>channel<sp/>5.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_TIMER_HAS_CC6</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__timer__hal_1gga6c7c835fd175129175fe2c08237af3c3a60747bf50f6bb4a3231bac181cd0b44e" kindref="member">NRF_TIMER_EVENT_COMPARE6</ref><sp/>=<sp/>offsetof(NRF_TIMER_Type,<sp/>EVENTS_COMPARE[6]),<sp/></highlight><highlight class="comment">///&lt;<sp/>Event<sp/>from<sp/>compare<sp/>channel<sp/>6.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_TIMER_HAS_CC7</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__timer__hal_1gga6c7c835fd175129175fe2c08237af3c3ad2db8124628821dce60a420ffd6af577" kindref="member">NRF_TIMER_EVENT_COMPARE7</ref><sp/>=<sp/>offsetof(NRF_TIMER_Type,<sp/>EVENTS_COMPARE[7]),<sp/></highlight><highlight class="comment">///&lt;<sp/>Event<sp/>from<sp/>compare<sp/>channel<sp/>7.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal">}<sp/><ref refid="group__nrf__timer__hal_1ga6c7c835fd175129175fe2c08237af3c3" kindref="member">nrf_timer_event_t</ref>;</highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="341"><highlight class="comment">/**<sp/>@brief<sp/>Types<sp/>of<sp/>timer<sp/>shortcuts.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal">{</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__timer__hal_1gga1dee3ab20f9dfa38bacf2502a8d1688cae953a4526a33bba2c89e2f240f7957d3" kindref="member">NRF_TIMER_SHORT_COMPARE0_STOP_MASK</ref><sp/>=<sp/>TIMER_SHORTS_COMPARE0_STOP_Msk,<sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Shortcut<sp/>for<sp/>stopping<sp/>the<sp/>timer<sp/>based<sp/>on<sp/>compare<sp/>0.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__timer__hal_1gga1dee3ab20f9dfa38bacf2502a8d1688ca25579236da5e7e307f35bf2472e53a06" kindref="member">NRF_TIMER_SHORT_COMPARE1_STOP_MASK</ref><sp/>=<sp/>TIMER_SHORTS_COMPARE1_STOP_Msk,<sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Shortcut<sp/>for<sp/>stopping<sp/>the<sp/>timer<sp/>based<sp/>on<sp/>compare<sp/>1.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__timer__hal_1gga1dee3ab20f9dfa38bacf2502a8d1688caeb8fbf05e1ecfab4ed6e59068e4edbe5" kindref="member">NRF_TIMER_SHORT_COMPARE2_STOP_MASK</ref><sp/>=<sp/>TIMER_SHORTS_COMPARE2_STOP_Msk,<sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Shortcut<sp/>for<sp/>stopping<sp/>the<sp/>timer<sp/>based<sp/>on<sp/>compare<sp/>2.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__timer__hal_1gga1dee3ab20f9dfa38bacf2502a8d1688ca7da4ad704f6d771c6242169885cff6c9" kindref="member">NRF_TIMER_SHORT_COMPARE3_STOP_MASK</ref><sp/>=<sp/>TIMER_SHORTS_COMPARE3_STOP_Msk,<sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Shortcut<sp/>for<sp/>stopping<sp/>the<sp/>timer<sp/>based<sp/>on<sp/>compare<sp/>3.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_TIMER_HAS_CC4</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__timer__hal_1gga1dee3ab20f9dfa38bacf2502a8d1688ca3fea27648f52abf13cbd79b541cc2fa8" kindref="member">NRF_TIMER_SHORT_COMPARE4_STOP_MASK</ref><sp/>=<sp/>TIMER_SHORTS_COMPARE4_STOP_Msk,<sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Shortcut<sp/>for<sp/>stopping<sp/>the<sp/>timer<sp/>based<sp/>on<sp/>compare<sp/>4.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_TIMER_HAS_CC5</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__timer__hal_1gga1dee3ab20f9dfa38bacf2502a8d1688cadd25209fb55d3053e0fea49fa7bf5a30" kindref="member">NRF_TIMER_SHORT_COMPARE5_STOP_MASK</ref><sp/>=<sp/>TIMER_SHORTS_COMPARE5_STOP_Msk,<sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Shortcut<sp/>for<sp/>stopping<sp/>the<sp/>timer<sp/>based<sp/>on<sp/>compare<sp/>5.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_TIMER_HAS_CC6</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__timer__hal_1gga1dee3ab20f9dfa38bacf2502a8d1688cabe3383ecf928f64cb36b740a213cfa61" kindref="member">NRF_TIMER_SHORT_COMPARE6_STOP_MASK</ref><sp/>=<sp/>TIMER_SHORTS_COMPARE6_STOP_Msk,<sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Shortcut<sp/>for<sp/>stopping<sp/>the<sp/>timer<sp/>based<sp/>on<sp/>compare<sp/>6.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_TIMER_HAS_CC7</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__timer__hal_1gga1dee3ab20f9dfa38bacf2502a8d1688cada6b4270434d037936ad6e37bd515eee" kindref="member">NRF_TIMER_SHORT_COMPARE7_STOP_MASK</ref><sp/>=<sp/>TIMER_SHORTS_COMPARE7_STOP_Msk,<sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Shortcut<sp/>for<sp/>stopping<sp/>the<sp/>timer<sp/>based<sp/>on<sp/>compare<sp/>7.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__timer__hal_1gga1dee3ab20f9dfa38bacf2502a8d1688ca98029953aa61f28bc923ff4ff9ab3a1d" kindref="member">NRF_TIMER_SHORT_COMPARE0_CLEAR_MASK</ref><sp/>=<sp/>TIMER_SHORTS_COMPARE0_CLEAR_Msk,<sp/></highlight><highlight class="comment">///&lt;<sp/>Shortcut<sp/>for<sp/>clearing<sp/>the<sp/>timer<sp/>based<sp/>on<sp/>compare<sp/>0.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__timer__hal_1gga1dee3ab20f9dfa38bacf2502a8d1688caee8d5836b72db83dcaee3c736edcc15a" kindref="member">NRF_TIMER_SHORT_COMPARE1_CLEAR_MASK</ref><sp/>=<sp/>TIMER_SHORTS_COMPARE1_CLEAR_Msk,<sp/></highlight><highlight class="comment">///&lt;<sp/>Shortcut<sp/>for<sp/>clearing<sp/>the<sp/>timer<sp/>based<sp/>on<sp/>compare<sp/>1.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__timer__hal_1gga1dee3ab20f9dfa38bacf2502a8d1688ca957c0d0f913ef652cfeb12b00fbcb16c" kindref="member">NRF_TIMER_SHORT_COMPARE2_CLEAR_MASK</ref><sp/>=<sp/>TIMER_SHORTS_COMPARE2_CLEAR_Msk,<sp/></highlight><highlight class="comment">///&lt;<sp/>Shortcut<sp/>for<sp/>clearing<sp/>the<sp/>timer<sp/>based<sp/>on<sp/>compare<sp/>2.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__timer__hal_1gga1dee3ab20f9dfa38bacf2502a8d1688cac183d1023a358683c0fd9152049c1d2f" kindref="member">NRF_TIMER_SHORT_COMPARE3_CLEAR_MASK</ref><sp/>=<sp/>TIMER_SHORTS_COMPARE3_CLEAR_Msk,<sp/></highlight><highlight class="comment">///&lt;<sp/>Shortcut<sp/>for<sp/>clearing<sp/>the<sp/>timer<sp/>based<sp/>on<sp/>compare<sp/>3.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_TIMER_HAS_CC4</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__timer__hal_1gga1dee3ab20f9dfa38bacf2502a8d1688ca5a6362fd670f3d56124fa70d5ace963f" kindref="member">NRF_TIMER_SHORT_COMPARE4_CLEAR_MASK</ref><sp/>=<sp/>TIMER_SHORTS_COMPARE4_CLEAR_Msk,<sp/></highlight><highlight class="comment">///&lt;<sp/>Shortcut<sp/>for<sp/>clearing<sp/>the<sp/>timer<sp/>based<sp/>on<sp/>compare<sp/>4.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_TIMER_HAS_CC5</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__timer__hal_1gga1dee3ab20f9dfa38bacf2502a8d1688ca7e3d851f156bc34a5bede57f40a68a77" kindref="member">NRF_TIMER_SHORT_COMPARE5_CLEAR_MASK</ref><sp/>=<sp/>TIMER_SHORTS_COMPARE5_CLEAR_Msk,<sp/></highlight><highlight class="comment">///&lt;<sp/>Shortcut<sp/>for<sp/>clearing<sp/>the<sp/>timer<sp/>based<sp/>on<sp/>compare<sp/>5.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_TIMER_HAS_CC6</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__timer__hal_1gga1dee3ab20f9dfa38bacf2502a8d1688caffc6ebbe170e6c6af5594e4a24a6b433" kindref="member">NRF_TIMER_SHORT_COMPARE6_CLEAR_MASK</ref><sp/>=<sp/>TIMER_SHORTS_COMPARE6_CLEAR_Msk,<sp/></highlight><highlight class="comment">///&lt;<sp/>Shortcut<sp/>for<sp/>clearing<sp/>the<sp/>timer<sp/>based<sp/>on<sp/>compare<sp/>6.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_TIMER_HAS_CC7</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__timer__hal_1gga1dee3ab20f9dfa38bacf2502a8d1688ca155ecf8913b698fdb329d6595c869566" kindref="member">NRF_TIMER_SHORT_COMPARE7_CLEAR_MASK</ref><sp/>=<sp/>TIMER_SHORTS_COMPARE7_CLEAR_Msk,<sp/></highlight><highlight class="comment">///&lt;<sp/>Shortcut<sp/>for<sp/>clearing<sp/>the<sp/>timer<sp/>based<sp/>on<sp/>compare<sp/>7.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="375"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal">}<sp/><ref refid="group__nrf__timer__hal_1ga1dee3ab20f9dfa38bacf2502a8d1688c" kindref="member">nrf_timer_short_mask_t</ref>;</highlight></codeline>
<codeline lineno="377"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="378"><highlight class="comment">/**<sp/>@brief<sp/>Timer<sp/>modes.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="380"><highlight class="normal">{</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__timer__hal_1gga61044c286dc20ccb08df3988bc57a6f2ad7bea280ee3b3c84bd9e89e2dc7f1f41" kindref="member">NRF_TIMER_MODE_TIMER</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>TIMER_MODE_MODE_Timer,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Timer<sp/>mode:<sp/>timer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__timer__hal_1gga61044c286dc20ccb08df3988bc57a6f2a6cbeb70606627497a974c5f7f0064cc0" kindref="member">NRF_TIMER_MODE_COUNTER</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>TIMER_MODE_MODE_Counter,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Timer<sp/>mode:<sp/>counter.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_TIMER_HAS_LOW_POWER_MODE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__timer__hal_1gga61044c286dc20ccb08df3988bc57a6f2ac8924c802962ea8c7ee492403b339388" kindref="member">NRF_TIMER_MODE_LOW_POWER_COUNTER</ref><sp/>=<sp/>TIMER_MODE_MODE_LowPowerCounter,<sp/></highlight><highlight class="comment">///&lt;<sp/>Timer<sp/>mode:<sp/>low-power<sp/>counter.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="385"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal">}<sp/><ref refid="group__nrf__timer__hal_1ga61044c286dc20ccb08df3988bc57a6f2" kindref="member">nrf_timer_mode_t</ref>;</highlight></codeline>
<codeline lineno="387"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="388"><highlight class="comment">/**<sp/>@brief<sp/>Timer<sp/>bit<sp/>width.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="389"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal">{</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__timer__hal_1gga567f81d672267a218a5b2f0155be3043aa6474251dab8733df9c2d6e5c00504b4" kindref="member">NRF_TIMER_BIT_WIDTH_8</ref><sp/><sp/>=<sp/>TIMER_BITMODE_BITMODE_08Bit,<sp/></highlight><highlight class="comment">///&lt;<sp/>Timer<sp/>bit<sp/>width<sp/>8<sp/>bit.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__timer__hal_1gga567f81d672267a218a5b2f0155be3043a4c8f9ba039c905e7d207203ad06e8d4d" kindref="member">NRF_TIMER_BIT_WIDTH_16</ref><sp/>=<sp/>TIMER_BITMODE_BITMODE_16Bit,<sp/></highlight><highlight class="comment">///&lt;<sp/>Timer<sp/>bit<sp/>width<sp/>16<sp/>bit.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__timer__hal_1gga567f81d672267a218a5b2f0155be3043a86bf8b22c7433f96a050fdeacbb89d5d" kindref="member">NRF_TIMER_BIT_WIDTH_24</ref><sp/>=<sp/>TIMER_BITMODE_BITMODE_24Bit,<sp/></highlight><highlight class="comment">///&lt;<sp/>Timer<sp/>bit<sp/>width<sp/>24<sp/>bit.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__timer__hal_1gga567f81d672267a218a5b2f0155be3043ab2e052c7b94c85bff69d313c50a630a5" kindref="member">NRF_TIMER_BIT_WIDTH_32</ref><sp/>=<sp/>TIMER_BITMODE_BITMODE_32Bit<sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Timer<sp/>bit<sp/>width<sp/>32<sp/>bit.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal">}<sp/><ref refid="group__nrf__timer__hal_1ga567f81d672267a218a5b2f0155be3043" kindref="member">nrf_timer_bit_width_t</ref>;</highlight></codeline>
<codeline lineno="396"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="397"><highlight class="comment">/**<sp/>@brief<sp/>Timer<sp/>prescalers.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="398"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal">{</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__timer__hal_1gga28862835cd77a9c8481ed04c7b1918eba91c798f0a0aaf8459805c081168dab56" kindref="member">NRF_TIMER_FREQ_16MHz</ref><sp/>=<sp/>0,<sp/></highlight><highlight class="comment">///&lt;<sp/>Timer<sp/>frequency<sp/>16<sp/>MHz.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__timer__hal_1gga28862835cd77a9c8481ed04c7b1918ebae596ee499f96f4595a47aa7bd0dfa89d" kindref="member">NRF_TIMER_FREQ_8MHz</ref>,<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Timer<sp/>frequency<sp/>8<sp/>MHz.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__timer__hal_1gga28862835cd77a9c8481ed04c7b1918eba25f331254bd4ba10e83f19d3372991ca" kindref="member">NRF_TIMER_FREQ_4MHz</ref>,<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Timer<sp/>frequency<sp/>4<sp/>MHz.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__timer__hal_1gga28862835cd77a9c8481ed04c7b1918eba75544c550c24bafe6cf84486cece8d91" kindref="member">NRF_TIMER_FREQ_2MHz</ref>,<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Timer<sp/>frequency<sp/>2<sp/>MHz.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__timer__hal_1gga28862835cd77a9c8481ed04c7b1918eba6f65deaeeb070e60c8b5bef30638faf6" kindref="member">NRF_TIMER_FREQ_1MHz</ref>,<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Timer<sp/>frequency<sp/>1<sp/>MHz.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__timer__hal_1gga28862835cd77a9c8481ed04c7b1918ebae42c5424d5dd2d69cd9ff64d37ccf09e" kindref="member">NRF_TIMER_FREQ_500kHz</ref>,<sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Timer<sp/>frequency<sp/>500<sp/>kHz.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__timer__hal_1gga28862835cd77a9c8481ed04c7b1918eba0e0638388bdf4cfe3d7ec244faa66a2f" kindref="member">NRF_TIMER_FREQ_250kHz</ref>,<sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Timer<sp/>frequency<sp/>250<sp/>kHz.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__timer__hal_1gga28862835cd77a9c8481ed04c7b1918eba081b58c48f3689e22550c01da1133037" kindref="member">NRF_TIMER_FREQ_125kHz</ref>,<sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Timer<sp/>frequency<sp/>125<sp/>kHz.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__timer__hal_1gga28862835cd77a9c8481ed04c7b1918ebafc1d448cb0ba552a99cf190b74c10dd9" kindref="member">NRF_TIMER_FREQ_62500Hz</ref>,<sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Timer<sp/>frequency<sp/>62500<sp/>Hz.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__timer__hal_1gga28862835cd77a9c8481ed04c7b1918eba655fbfee370adade8e7b9c4aae223074" kindref="member">NRF_TIMER_FREQ_31250Hz</ref><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Timer<sp/>frequency<sp/>31250<sp/>Hz.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal">}<sp/><ref refid="group__nrf__timer__hal_1ga28862835cd77a9c8481ed04c7b1918eb" kindref="member">nrf_timer_frequency_t</ref>;</highlight></codeline>
<codeline lineno="411"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="412"><highlight class="comment">/**<sp/>@brief<sp/>Timer<sp/>capture/compare<sp/>channels.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="414"><highlight class="normal">{</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__timer__hal_1gga21336e3aff87c90e95f08eff763d91a8a4aa8e808ba8c07831a11629524c61229" kindref="member">NRF_TIMER_CC_CHANNEL0</ref><sp/>=<sp/>0,<sp/></highlight><highlight class="comment">///&lt;<sp/>Timer<sp/>capture/compare<sp/>channel<sp/>0.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__timer__hal_1gga21336e3aff87c90e95f08eff763d91a8addf444442bb72b96874cc391bfd4af08" kindref="member">NRF_TIMER_CC_CHANNEL1</ref>,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Timer<sp/>capture/compare<sp/>channel<sp/>1.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__timer__hal_1gga21336e3aff87c90e95f08eff763d91a8a3e39cb70edb24f15805ac9105adcc9e3" kindref="member">NRF_TIMER_CC_CHANNEL2</ref>,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Timer<sp/>capture/compare<sp/>channel<sp/>2.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__timer__hal_1gga21336e3aff87c90e95f08eff763d91a8a87d5787396b9bca963c2ca9595bce6ab" kindref="member">NRF_TIMER_CC_CHANNEL3</ref>,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Timer<sp/>capture/compare<sp/>channel<sp/>3.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="419"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_TIMER_HAS_CC4</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__timer__hal_1gga21336e3aff87c90e95f08eff763d91a8a8ef055e22ea3256b53c653f87b33102b" kindref="member">NRF_TIMER_CC_CHANNEL4</ref>,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Timer<sp/>capture/compare<sp/>channel<sp/>4.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_TIMER_HAS_CC5</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__timer__hal_1gga21336e3aff87c90e95f08eff763d91a8a1f8731bc426b0141221601ad6df51f33" kindref="member">NRF_TIMER_CC_CHANNEL5</ref>,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Timer<sp/>capture/compare<sp/>channel<sp/>5.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_TIMER_HAS_CC6</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__timer__hal_1gga21336e3aff87c90e95f08eff763d91a8a8de0f8a75fd5ea17f8a4f18769f04fc7" kindref="member">NRF_TIMER_CC_CHANNEL6</ref>,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Timer<sp/>capture/compare<sp/>channel<sp/>6.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="427"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="428"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_TIMER_HAS_CC7</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__timer__hal_1gga21336e3aff87c90e95f08eff763d91a8a603d9b0c68ef2cd8332dedd9b12e9ffc" kindref="member">NRF_TIMER_CC_CHANNEL7</ref>,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Timer<sp/>capture/compare<sp/>channel<sp/>7.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="431"><highlight class="normal">}<sp/><ref refid="group__nrf__timer__hal_1ga21336e3aff87c90e95f08eff763d91a8" kindref="member">nrf_timer_cc_channel_t</ref>;</highlight></codeline>
<codeline lineno="432"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="433"><highlight class="comment">/**<sp/>@brief<sp/>Timer<sp/>interrupts.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="434"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="435"><highlight class="normal">{</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__timer__hal_1gga55adb42b75222256195fa003f8c0dc20a7c79e9f26e48942dca235affefad9912" kindref="member">NRF_TIMER_INT_COMPARE0_MASK</ref><sp/>=<sp/>TIMER_INTENSET_COMPARE0_Msk,<sp/></highlight><highlight class="comment">///&lt;<sp/>Timer<sp/>interrupt<sp/>from<sp/>compare<sp/>event<sp/>on<sp/>channel<sp/>0.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__timer__hal_1gga55adb42b75222256195fa003f8c0dc20a4d31316d8822406ad42cda430705f638" kindref="member">NRF_TIMER_INT_COMPARE1_MASK</ref><sp/>=<sp/>TIMER_INTENSET_COMPARE1_Msk,<sp/></highlight><highlight class="comment">///&lt;<sp/>Timer<sp/>interrupt<sp/>from<sp/>compare<sp/>event<sp/>on<sp/>channel<sp/>1.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__timer__hal_1gga55adb42b75222256195fa003f8c0dc20a7f49a5f098147d06ff40ba96f4b08019" kindref="member">NRF_TIMER_INT_COMPARE2_MASK</ref><sp/>=<sp/>TIMER_INTENSET_COMPARE2_Msk,<sp/></highlight><highlight class="comment">///&lt;<sp/>Timer<sp/>interrupt<sp/>from<sp/>compare<sp/>event<sp/>on<sp/>channel<sp/>2.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__timer__hal_1gga55adb42b75222256195fa003f8c0dc20ac7d7b7c195cf94a303159820f3543825" kindref="member">NRF_TIMER_INT_COMPARE3_MASK</ref><sp/>=<sp/>TIMER_INTENSET_COMPARE3_Msk,<sp/></highlight><highlight class="comment">///&lt;<sp/>Timer<sp/>interrupt<sp/>from<sp/>compare<sp/>event<sp/>on<sp/>channel<sp/>3.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="440"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_TIMER_HAS_CC4</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__timer__hal_1gga55adb42b75222256195fa003f8c0dc20a140064126c1ed2d57d6b413c7e7a32f0" kindref="member">NRF_TIMER_INT_COMPARE4_MASK</ref><sp/>=<sp/>TIMER_INTENSET_COMPARE4_Msk,<sp/></highlight><highlight class="comment">///&lt;<sp/>Timer<sp/>interrupt<sp/>from<sp/>compare<sp/>event<sp/>on<sp/>channel<sp/>4.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="442"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="443"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_TIMER_HAS_CC5</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__timer__hal_1gga55adb42b75222256195fa003f8c0dc20a340d6d967dae619c3ea666e8e7070e37" kindref="member">NRF_TIMER_INT_COMPARE5_MASK</ref><sp/>=<sp/>TIMER_INTENSET_COMPARE5_Msk,<sp/></highlight><highlight class="comment">///&lt;<sp/>Timer<sp/>interrupt<sp/>from<sp/>compare<sp/>event<sp/>on<sp/>channel<sp/>5.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="445"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="446"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_TIMER_HAS_CC6</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__timer__hal_1gga55adb42b75222256195fa003f8c0dc20ad275d7d3ed6be95919874e2b7b06a373" kindref="member">NRF_TIMER_INT_COMPARE6_MASK</ref><sp/>=<sp/>TIMER_INTENSET_COMPARE6_Msk,<sp/></highlight><highlight class="comment">///&lt;<sp/>Timer<sp/>interrupt<sp/>from<sp/>compare<sp/>event<sp/>on<sp/>channel<sp/>6.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="448"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="449"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_TIMER_HAS_CC7</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__timer__hal_1gga55adb42b75222256195fa003f8c0dc20ad2655abf66de31b8d58151d24252c956" kindref="member">NRF_TIMER_INT_COMPARE7_MASK</ref><sp/>=<sp/>TIMER_INTENSET_COMPARE7_Msk,<sp/></highlight><highlight class="comment">///&lt;<sp/>Timer<sp/>interrupt<sp/>from<sp/>compare<sp/>event<sp/>on<sp/>channel<sp/>7.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="451"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="452"><highlight class="normal">}<sp/><ref refid="group__nrf__timer__hal_1ga55adb42b75222256195fa003f8c0dc20" kindref="member">nrf_timer_int_mask_t</ref>;</highlight></codeline>
<codeline lineno="453"><highlight class="normal"></highlight></codeline>
<codeline lineno="454"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="455"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="456"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>the<sp/>prescaler<sp/>factor.</highlight></codeline>
<codeline lineno="457"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="458"><highlight class="comment"><sp/>*<sp/>@note<sp/>Prescaler<sp/>value<sp/>is<sp/>expressed<sp/>as<sp/>\f$<sp/>2^{prescaler\_factor}<sp/>\f$.</highlight></codeline>
<codeline lineno="459"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="460"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="461"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>prescaler_factor<sp/>Prescaler<sp/>factor.</highlight></codeline>
<codeline lineno="462"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="463"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__timer__hal_1ga5e804fd21a6351e80e20ed94a95e1745" kindref="member">nrf_timer_prescaler_set</ref>(NRF_TIMER_Type<sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>prescaler_factor);</highlight></codeline>
<codeline lineno="464"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="465"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="466"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>retrieving<sp/>the<sp/>prescaler<sp/>factor.</highlight></codeline>
<codeline lineno="467"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="468"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="469"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="470"><highlight class="comment"><sp/>*<sp/>@return<sp/>Prescaler<sp/>factor.</highlight></codeline>
<codeline lineno="471"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="472"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__timer__hal_1ga8018856d922dc9cd77c5f5b74f533f25" kindref="member">nrf_timer_prescaler_get</ref>(NRF_TIMER_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="473"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="474"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="475"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>activating<sp/>the<sp/>specified<sp/>timer<sp/>task.</highlight></codeline>
<codeline lineno="476"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="477"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="478"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>task<sp/><sp/>Task<sp/>to<sp/>be<sp/>activated.</highlight></codeline>
<codeline lineno="479"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="480"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__timer__hal_1gacdcc887e5536df70fb766e2705711b65" kindref="member">nrf_timer_task_trigger</ref>(NRF_TIMER_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__timer__hal_1ga1db410e4a6b7e38de383220b20724906" kindref="member">nrf_timer_task_t</ref><sp/>task);</highlight></codeline>
<codeline lineno="482"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="483"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="484"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>the<sp/>address<sp/>of<sp/>the<sp/>specified<sp/>timer<sp/>task<sp/>register.</highlight></codeline>
<codeline lineno="485"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="486"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="487"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>task<sp/><sp/>The<sp/>specified<sp/>task.</highlight></codeline>
<codeline lineno="488"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="489"><highlight class="comment"><sp/>*<sp/>@return<sp/>Address<sp/>of<sp/>the<sp/>specified<sp/>task<sp/>register.</highlight></codeline>
<codeline lineno="490"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="491"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__timer__hal_1ga2f4e47e68b4d1af3726747f2a34bb581" kindref="member">nrf_timer_task_address_get</ref>(NRF_TIMER_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__timer__hal_1ga1db410e4a6b7e38de383220b20724906" kindref="member">nrf_timer_task_t</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>task);</highlight></codeline>
<codeline lineno="493"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="494"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="495"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>clearing<sp/>the<sp/>specified<sp/>timer<sp/>event.</highlight></codeline>
<codeline lineno="496"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="497"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="498"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>event<sp/>Event<sp/>to<sp/>clear.</highlight></codeline>
<codeline lineno="499"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="500"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__timer__hal_1ga46788eabb1ad085616c4796bb609c016" kindref="member">nrf_timer_event_clear</ref>(NRF_TIMER_Type<sp/>*<sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__timer__hal_1ga6c7c835fd175129175fe2c08237af3c3" kindref="member">nrf_timer_event_t</ref><sp/>event);</highlight></codeline>
<codeline lineno="502"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="503"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="504"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>retrieving<sp/>the<sp/>state<sp/>of<sp/>the<sp/>TIMER<sp/>event.</highlight></codeline>
<codeline lineno="505"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="506"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="507"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>event<sp/>Event<sp/>to<sp/>be<sp/>checked.</highlight></codeline>
<codeline lineno="508"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="509"><highlight class="comment"><sp/>*<sp/>@retval<sp/>true<sp/><sp/>The<sp/>event<sp/>has<sp/>been<sp/>generated.</highlight></codeline>
<codeline lineno="510"><highlight class="comment"><sp/>*<sp/>@retval<sp/>false<sp/>The<sp/>event<sp/>has<sp/>not<sp/>been<sp/>generated.</highlight></codeline>
<codeline lineno="511"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="512"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrf__timer__hal_1ga594ee9df9b86ae535bc4daf1384d5348" kindref="member">nrf_timer_event_check</ref>(NRF_TIMER_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__timer__hal_1ga6c7c835fd175129175fe2c08237af3c3" kindref="member">nrf_timer_event_t</ref><sp/><sp/><sp/><sp/><sp/><sp/>event);</highlight></codeline>
<codeline lineno="514"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="515"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="516"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>the<sp/>address<sp/>of<sp/>the<sp/>specified<sp/>timer<sp/>event<sp/>register.</highlight></codeline>
<codeline lineno="517"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="518"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="519"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>event<sp/>The<sp/>specified<sp/>event.</highlight></codeline>
<codeline lineno="520"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="521"><highlight class="comment"><sp/>*<sp/>@return<sp/>Address<sp/>of<sp/>the<sp/>specified<sp/>event<sp/>register.</highlight></codeline>
<codeline lineno="522"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="523"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__timer__hal_1ga9ad70342f0808182e18ef591d23b0561" kindref="member">nrf_timer_event_address_get</ref>(NRF_TIMER_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__timer__hal_1ga6c7c835fd175129175fe2c08237af3c3" kindref="member">nrf_timer_event_t</ref><sp/><sp/><sp/><sp/><sp/><sp/>event);</highlight></codeline>
<codeline lineno="525"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="526"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="527"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>enabling<sp/>the<sp/>specified<sp/>shortcuts.</highlight></codeline>
<codeline lineno="528"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="529"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="530"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>mask<sp/><sp/>Shortcuts<sp/>to<sp/>be<sp/>enabled.</highlight></codeline>
<codeline lineno="531"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="532"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__timer__hal_1ga8efef095c7570c50f519dfe46539db90" kindref="member">nrf_timer_shorts_enable</ref>(NRF_TIMER_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mask);</highlight></codeline>
<codeline lineno="534"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="535"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="536"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>disabling<sp/>the<sp/>specified<sp/>shortcuts.</highlight></codeline>
<codeline lineno="537"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="538"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="539"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>mask<sp/><sp/>Shortcuts<sp/>to<sp/>be<sp/>disabled.</highlight></codeline>
<codeline lineno="540"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="541"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__timer__hal_1ga269330ebccab15e3e819cc2c805629ac" kindref="member">nrf_timer_shorts_disable</ref>(NRF_TIMER_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mask);</highlight></codeline>
<codeline lineno="543"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="544"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="545"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>the<sp/>specified<sp/>shortcuts.</highlight></codeline>
<codeline lineno="546"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="547"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="548"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>mask<sp/><sp/>Shortcuts<sp/>to<sp/>be<sp/>set.</highlight></codeline>
<codeline lineno="549"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="550"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__timer__hal_1ga2d9291fbd5262d1f5a3d755e76d175d9" kindref="member">nrf_timer_shorts_set</ref>(NRF_TIMER_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mask);</highlight></codeline>
<codeline lineno="552"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="553"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="554"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>COMPARE_CLEAR<sp/>short<sp/>mask<sp/>for<sp/>the<sp/>specified<sp/>channel.</highlight></codeline>
<codeline lineno="555"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="556"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>channel<sp/>Channel.</highlight></codeline>
<codeline lineno="557"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="558"><highlight class="comment"><sp/>*<sp/>@return<sp/>Short<sp/>mask.</highlight></codeline>
<codeline lineno="559"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="560"><highlight class="normal">NRF_STATIC_INLINE<sp/><ref refid="group__nrf__timer__hal_1ga1dee3ab20f9dfa38bacf2502a8d1688c" kindref="member">nrf_timer_short_mask_t</ref><sp/><ref refid="group__nrf__timer__hal_1ga470366a9f03a7ad5ce5b4634b4cf81ef" kindref="member">nrf_timer_short_compare_clear_get</ref>(uint8_t<sp/>channel);</highlight></codeline>
<codeline lineno="561"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="562"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="563"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>COMPARE_STOP<sp/>short<sp/>mask<sp/>for<sp/>the<sp/>specified<sp/>channel.</highlight></codeline>
<codeline lineno="564"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="565"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>channel<sp/>Channel.</highlight></codeline>
<codeline lineno="566"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="567"><highlight class="comment"><sp/>*<sp/>@return<sp/>Short<sp/>mask.</highlight></codeline>
<codeline lineno="568"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="569"><highlight class="normal">NRF_STATIC_INLINE<sp/><ref refid="group__nrf__timer__hal_1ga1dee3ab20f9dfa38bacf2502a8d1688c" kindref="member">nrf_timer_short_mask_t</ref><sp/><ref refid="group__nrf__timer__hal_1gac773155b1c68ed77f90f29cb1f3a4e35" kindref="member">nrf_timer_short_compare_stop_get</ref>(uint8_t<sp/>channel);</highlight></codeline>
<codeline lineno="570"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="571"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="572"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>enabling<sp/>the<sp/>specified<sp/>interrupts.</highlight></codeline>
<codeline lineno="573"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="574"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="575"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>mask<sp/><sp/>Mask<sp/>of<sp/>interrupts<sp/>to<sp/>be<sp/>enabled.</highlight></codeline>
<codeline lineno="576"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Use<sp/>@ref<sp/>nrf_timer_int_mask_t<sp/>values<sp/>for<sp/>bit<sp/>masking.</highlight></codeline>
<codeline lineno="577"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="578"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__timer__hal_1gaca84981e7f515192ffc4cb28ce18e554" kindref="member">nrf_timer_int_enable</ref>(NRF_TIMER_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mask);</highlight></codeline>
<codeline lineno="580"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="581"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="582"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>disabling<sp/>the<sp/>specified<sp/>interrupts.</highlight></codeline>
<codeline lineno="583"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="584"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="585"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>mask<sp/><sp/>Mask<sp/>of<sp/>interrupts<sp/>to<sp/>be<sp/>disabled.</highlight></codeline>
<codeline lineno="586"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Use<sp/>@ref<sp/>nrf_timer_int_mask_t<sp/>values<sp/>for<sp/>bit<sp/>masking.</highlight></codeline>
<codeline lineno="587"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="588"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__timer__hal_1gab26b26a0a091b12491246d4b1f4e65c8" kindref="member">nrf_timer_int_disable</ref>(NRF_TIMER_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mask);</highlight></codeline>
<codeline lineno="590"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="591"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="592"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>checking<sp/>if<sp/>the<sp/>specified<sp/>interrupts<sp/>are<sp/>enabled.</highlight></codeline>
<codeline lineno="593"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="594"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="595"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>mask<sp/><sp/>Mask<sp/>of<sp/>interrupts<sp/>to<sp/>be<sp/>checked.</highlight></codeline>
<codeline lineno="596"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Use<sp/>@ref<sp/>nrf_timer_int_mask_t<sp/>values<sp/>for<sp/>bit<sp/>masking.</highlight></codeline>
<codeline lineno="597"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="598"><highlight class="comment"><sp/>*<sp/>@return<sp/>Mask<sp/>of<sp/>enabled<sp/>interrupts.</highlight></codeline>
<codeline lineno="599"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="600"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__timer__hal_1gaa6902537565850e0cfd62fa31a1b9083" kindref="member">nrf_timer_int_enable_check</ref>(NRF_TIMER_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>mask);</highlight></codeline>
<codeline lineno="601"><highlight class="normal"></highlight></codeline>
<codeline lineno="602"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(DPPI_PRESENT)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="603"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="604"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>the<sp/>subscribe<sp/>configuration<sp/>for<sp/>a<sp/>given</highlight></codeline>
<codeline lineno="605"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TIMER<sp/>task.</highlight></codeline>
<codeline lineno="606"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="607"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="608"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>task<sp/><sp/><sp/><sp/>Task<sp/>for<sp/>which<sp/>to<sp/>set<sp/>the<sp/>configuration.</highlight></codeline>
<codeline lineno="609"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>channel<sp/>Channel<sp/>through<sp/>which<sp/>to<sp/>subscribe<sp/>events.</highlight></codeline>
<codeline lineno="610"><highlight class="comment"><sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="611"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__timer__hal_1gabcfd966f5844ba4c22476ea36f944bca" kindref="member">nrf_timer_subscribe_set</ref>(NRF_TIMER_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__timer__hal_1ga1db410e4a6b7e38de383220b20724906" kindref="member">nrf_timer_task_t</ref><sp/>task,</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>channel);</highlight></codeline>
<codeline lineno="614"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="615"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="616"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>clearing<sp/>the<sp/>subscribe<sp/>configuration<sp/>for<sp/>a<sp/>given</highlight></codeline>
<codeline lineno="617"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TIMER<sp/>task.</highlight></codeline>
<codeline lineno="618"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="619"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="620"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>task<sp/><sp/>Task<sp/>for<sp/>which<sp/>to<sp/>clear<sp/>the<sp/>configuration.</highlight></codeline>
<codeline lineno="621"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="622"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__timer__hal_1gafce2e496e07c100add401597ad9d82b2" kindref="member">nrf_timer_subscribe_clear</ref>(NRF_TIMER_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__timer__hal_1ga1db410e4a6b7e38de383220b20724906" kindref="member">nrf_timer_task_t</ref><sp/>task);</highlight></codeline>
<codeline lineno="624"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="625"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="626"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>the<sp/>publish<sp/>configuration<sp/>for<sp/>a<sp/>given</highlight></codeline>
<codeline lineno="627"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TIMER<sp/>event.</highlight></codeline>
<codeline lineno="628"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="629"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="630"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>event<sp/><sp/><sp/>Event<sp/>for<sp/>which<sp/>to<sp/>set<sp/>the<sp/>configuration.</highlight></codeline>
<codeline lineno="631"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>channel<sp/>Channel<sp/>through<sp/>which<sp/>to<sp/>publish<sp/>the<sp/>event.</highlight></codeline>
<codeline lineno="632"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="633"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__timer__hal_1gaa8e16ed891e6014d425b908daabfa498" kindref="member">nrf_timer_publish_set</ref>(NRF_TIMER_Type<sp/>*<sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__timer__hal_1ga6c7c835fd175129175fe2c08237af3c3" kindref="member">nrf_timer_event_t</ref><sp/>event,</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>channel);</highlight></codeline>
<codeline lineno="636"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="637"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="638"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>clearing<sp/>the<sp/>publish<sp/>configuration<sp/>for<sp/>a<sp/>given</highlight></codeline>
<codeline lineno="639"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TIMER<sp/>event.</highlight></codeline>
<codeline lineno="640"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="641"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="642"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>event<sp/>Event<sp/>for<sp/>which<sp/>to<sp/>clear<sp/>the<sp/>configuration.</highlight></codeline>
<codeline lineno="643"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="644"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__timer__hal_1gafef86d00be35fa22765f9823c17fc6f0" kindref="member">nrf_timer_publish_clear</ref>(NRF_TIMER_Type<sp/>*<sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__timer__hal_1ga6c7c835fd175129175fe2c08237af3c3" kindref="member">nrf_timer_event_t</ref><sp/>event);</highlight></codeline>
<codeline lineno="646"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>defined(DPPI_PRESENT)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="647"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="648"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="649"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>the<sp/>timer<sp/>mode.</highlight></codeline>
<codeline lineno="650"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="651"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="652"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>mode<sp/><sp/>Timer<sp/>mode.</highlight></codeline>
<codeline lineno="653"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="654"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__timer__hal_1ga1c02aebd9fc392af80ea2da5dca7ed61" kindref="member">nrf_timer_mode_set</ref>(NRF_TIMER_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__timer__hal_1ga61044c286dc20ccb08df3988bc57a6f2" kindref="member">nrf_timer_mode_t</ref><sp/>mode);</highlight></codeline>
<codeline lineno="656"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="657"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="658"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>retrieving<sp/>the<sp/>timer<sp/>mode.</highlight></codeline>
<codeline lineno="659"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="660"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="661"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="662"><highlight class="comment"><sp/>*<sp/>@return<sp/>Timer<sp/>mode.</highlight></codeline>
<codeline lineno="663"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="664"><highlight class="normal">NRF_STATIC_INLINE<sp/><ref refid="group__nrf__timer__hal_1ga61044c286dc20ccb08df3988bc57a6f2" kindref="member">nrf_timer_mode_t</ref><sp/><ref refid="group__nrf__timer__hal_1gaf0dbbc911f7fbf8952d261da81bb0aff" kindref="member">nrf_timer_mode_get</ref>(NRF_TIMER_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="665"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="666"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="667"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>the<sp/>timer<sp/>bit<sp/>width.</highlight></codeline>
<codeline lineno="668"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="669"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="670"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>bit_width<sp/>Timer<sp/>bit<sp/>width.</highlight></codeline>
<codeline lineno="671"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="672"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__timer__hal_1ga1bf04327bb1bcbcafb66be1e0d69da39" kindref="member">nrf_timer_bit_width_set</ref>(NRF_TIMER_Type<sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__timer__hal_1ga567f81d672267a218a5b2f0155be3043" kindref="member">nrf_timer_bit_width_t</ref><sp/>bit_width);</highlight></codeline>
<codeline lineno="674"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="675"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="676"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>retrieving<sp/>the<sp/>timer<sp/>bit<sp/>width.</highlight></codeline>
<codeline lineno="677"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="678"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="679"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="680"><highlight class="comment"><sp/>*<sp/>@return<sp/>Timer<sp/>bit<sp/>width.</highlight></codeline>
<codeline lineno="681"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="682"><highlight class="normal">NRF_STATIC_INLINE<sp/><ref refid="group__nrf__timer__hal_1ga567f81d672267a218a5b2f0155be3043" kindref="member">nrf_timer_bit_width_t</ref><sp/><ref refid="group__nrf__timer__hal_1gaf2be8f99a56547edd3d37a59b7be2602" kindref="member">nrf_timer_bit_width_get</ref>(NRF_TIMER_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="683"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="684"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="685"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>the<sp/>capture/compare<sp/>register<sp/>for<sp/>the<sp/>specified<sp/>channel.</highlight></codeline>
<codeline lineno="686"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="687"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/><sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="688"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>cc_channel<sp/>The<sp/>specified<sp/>capture/compare<sp/>channel.</highlight></codeline>
<codeline lineno="689"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>cc_value<sp/><sp/><sp/>Value<sp/>to<sp/>write<sp/>to<sp/>the<sp/>capture/compare<sp/>register.</highlight></codeline>
<codeline lineno="690"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="691"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__timer__hal_1ga8778ec1e21e5a8306d720ab4e69a199b" kindref="member">nrf_timer_cc_set</ref>(NRF_TIMER_Type<sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__timer__hal_1ga21336e3aff87c90e95f08eff763d91a8" kindref="member">nrf_timer_cc_channel_t</ref><sp/>cc_channel,</highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cc_value);</highlight></codeline>
<codeline lineno="694"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="695"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="696"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>retrieving<sp/>the<sp/>capture/compare<sp/>value<sp/>for<sp/>a<sp/>specified<sp/>channel.</highlight></codeline>
<codeline lineno="697"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="698"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/><sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="699"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>cc_channel<sp/>The<sp/>specified<sp/>capture/compare<sp/>channel.</highlight></codeline>
<codeline lineno="700"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="701"><highlight class="comment"><sp/>*<sp/>@return<sp/>Value<sp/>from<sp/>the<sp/>specified<sp/>capture/compare<sp/>register.</highlight></codeline>
<codeline lineno="702"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="703"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__timer__hal_1ga237a16bb2596cc350a15f741665b7e75" kindref="member">nrf_timer_cc_get</ref>(NRF_TIMER_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__timer__hal_1ga21336e3aff87c90e95f08eff763d91a8" kindref="member">nrf_timer_cc_channel_t</ref><sp/>cc_channel);</highlight></codeline>
<codeline lineno="705"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="706"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="707"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>the<sp/>specified<sp/>timer<sp/>capture<sp/>task.</highlight></codeline>
<codeline lineno="708"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="709"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>channel<sp/>Capture<sp/>channel.</highlight></codeline>
<codeline lineno="710"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="711"><highlight class="comment"><sp/>*<sp/>@return<sp/>Capture<sp/>task.</highlight></codeline>
<codeline lineno="712"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="713"><highlight class="normal">NRF_STATIC_INLINE<sp/><ref refid="group__nrf__timer__hal_1ga1db410e4a6b7e38de383220b20724906" kindref="member">nrf_timer_task_t</ref><sp/><ref refid="group__nrf__timer__hal_1ga992b4f8249b638159cc2abedcca7ba6a" kindref="member">nrf_timer_capture_task_get</ref>(uint8_t<sp/>channel);</highlight></codeline>
<codeline lineno="714"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="715"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="716"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>the<sp/>specified<sp/>timer<sp/>compare<sp/>event.</highlight></codeline>
<codeline lineno="717"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="718"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>channel<sp/>Compare<sp/>channel.</highlight></codeline>
<codeline lineno="719"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="720"><highlight class="comment"><sp/>*<sp/>@return<sp/>Compare<sp/>event.</highlight></codeline>
<codeline lineno="721"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="722"><highlight class="normal">NRF_STATIC_INLINE<sp/><ref refid="group__nrf__timer__hal_1ga6c7c835fd175129175fe2c08237af3c3" kindref="member">nrf_timer_event_t</ref><sp/><ref refid="group__nrf__timer__hal_1ga2e446c45ecb7958a1a15f8f08cdc2c40" kindref="member">nrf_timer_compare_event_get</ref>(uint8_t<sp/>channel);</highlight></codeline>
<codeline lineno="723"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="724"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="725"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>the<sp/>specified<sp/>timer<sp/>compare<sp/>interrupt.</highlight></codeline>
<codeline lineno="726"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="727"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>channel<sp/>Compare<sp/>channel.</highlight></codeline>
<codeline lineno="728"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="729"><highlight class="comment"><sp/>*<sp/>@return<sp/>Compare<sp/>interrupt.</highlight></codeline>
<codeline lineno="730"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="731"><highlight class="normal">NRF_STATIC_INLINE<sp/><ref refid="group__nrf__timer__hal_1ga55adb42b75222256195fa003f8c0dc20" kindref="member">nrf_timer_int_mask_t</ref><sp/><ref refid="group__nrf__timer__hal_1gac8210bc33f954ef3dacd78f3aabaf0bc" kindref="member">nrf_timer_compare_int_get</ref>(uint8_t<sp/>channel);</highlight></codeline>
<codeline lineno="732"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="733"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="734"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>calculating<sp/>the<sp/>number<sp/>of<sp/>timer<sp/>ticks<sp/>for<sp/>a<sp/>given<sp/>time</highlight></codeline>
<codeline lineno="735"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(in<sp/>microseconds)<sp/>and<sp/>timer<sp/>frequency.</highlight></codeline>
<codeline lineno="736"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="737"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>time_us<sp/><sp/><sp/>Time<sp/>in<sp/>microseconds.</highlight></codeline>
<codeline lineno="738"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>frequency<sp/>Timer<sp/>frequency.</highlight></codeline>
<codeline lineno="739"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="740"><highlight class="comment"><sp/>*<sp/>@return<sp/>Number<sp/>of<sp/>timer<sp/>ticks.</highlight></codeline>
<codeline lineno="741"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="742"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__timer__hal_1ga9b471b98803bcac06bd272feb38ceca5" kindref="member">nrf_timer_us_to_ticks</ref>(uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>time_us,</highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__timer__hal_1ga28862835cd77a9c8481ed04c7b1918eb" kindref="member">nrf_timer_frequency_t</ref><sp/>frequency);</highlight></codeline>
<codeline lineno="744"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="745"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="746"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>calculating<sp/>the<sp/>number<sp/>of<sp/>timer<sp/>ticks<sp/>for<sp/>a<sp/>given<sp/>time</highlight></codeline>
<codeline lineno="747"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(in<sp/>milliseconds)<sp/>and<sp/>timer<sp/>frequency.</highlight></codeline>
<codeline lineno="748"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="749"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>time_ms<sp/><sp/><sp/>Time<sp/>in<sp/>milliseconds.</highlight></codeline>
<codeline lineno="750"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>frequency<sp/>Timer<sp/>frequency.</highlight></codeline>
<codeline lineno="751"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="752"><highlight class="comment"><sp/>*<sp/>@return<sp/>Number<sp/>of<sp/>timer<sp/>ticks.</highlight></codeline>
<codeline lineno="753"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="754"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__timer__hal_1ga4f52b3d15736f23db37552fc777a8253" kindref="member">nrf_timer_ms_to_ticks</ref>(uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>time_ms,</highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__timer__hal_1ga28862835cd77a9c8481ed04c7b1918eb" kindref="member">nrf_timer_frequency_t</ref><sp/>frequency);</highlight></codeline>
<codeline lineno="756"><highlight class="normal"></highlight></codeline>
<codeline lineno="757"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_TIMER_HAS_ONE_SHOT</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="758"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="759"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>enabling<sp/>one-shot<sp/>operation<sp/>for<sp/>the<sp/>specified<sp/>capture/compare<sp/>channel.</highlight></codeline>
<codeline lineno="760"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="761"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/><sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="762"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>cc_channel<sp/>Capture/compare<sp/>channel.</highlight></codeline>
<codeline lineno="763"><highlight class="comment"><sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="764"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__timer__hal_1ga5b34388603484fa4043803f1ebca04c0" kindref="member">nrf_timer_one_shot_enable</ref>(NRF_TIMER_Type<sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__timer__hal_1ga21336e3aff87c90e95f08eff763d91a8" kindref="member">nrf_timer_cc_channel_t</ref><sp/>cc_channel);</highlight></codeline>
<codeline lineno="766"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="767"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="768"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>disabling<sp/>one-shot<sp/>operation<sp/>for<sp/>the<sp/>specified<sp/>capture/compare<sp/>channel.</highlight></codeline>
<codeline lineno="769"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="770"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/><sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="771"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>cc_channel<sp/>Capture/compare<sp/>channel.</highlight></codeline>
<codeline lineno="772"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="773"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__timer__hal_1ga85ee7ab4a9d8e7368602aa73ef560556" kindref="member">nrf_timer_one_shot_disable</ref>(NRF_TIMER_Type<sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__timer__hal_1ga21336e3aff87c90e95f08eff763d91a8" kindref="member">nrf_timer_cc_channel_t</ref><sp/>cc_channel);</highlight></codeline>
<codeline lineno="775"><highlight class="normal"></highlight></codeline>
<codeline lineno="776"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRF_TIMER_HAS_ONE_SHOT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="777"><highlight class="normal"></highlight></codeline>
<codeline lineno="778"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>NRF_DECLARE_ONLY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="779"><highlight class="normal"></highlight></codeline>
<codeline lineno="780"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__timer__hal_1gacdcc887e5536df70fb766e2705711b65" kindref="member">nrf_timer_task_trigger</ref>(NRF_TIMER_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__timer__hal_1ga1db410e4a6b7e38de383220b20724906" kindref="member">nrf_timer_task_t</ref><sp/>task)</highlight></codeline>
<codeline lineno="782"><highlight class="normal">{</highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/><sp/><sp/>*((</highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint32_t<sp/>*)((uint8_t<sp/>*)p_reg<sp/>+<sp/>(uint32_t)task))<sp/>=<sp/>0x1UL;</highlight></codeline>
<codeline lineno="784"><highlight class="normal">}</highlight></codeline>
<codeline lineno="785"><highlight class="normal"></highlight></codeline>
<codeline lineno="786"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__timer__hal_1ga2f4e47e68b4d1af3726747f2a34bb581" kindref="member">nrf_timer_task_address_get</ref>(NRF_TIMER_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__timer__hal_1ga1db410e4a6b7e38de383220b20724906" kindref="member">nrf_timer_task_t</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>task)</highlight></codeline>
<codeline lineno="788"><highlight class="normal">{</highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>nrf_task_event_address_get(p_reg,<sp/>task);</highlight></codeline>
<codeline lineno="790"><highlight class="normal">}</highlight></codeline>
<codeline lineno="791"><highlight class="normal"></highlight></codeline>
<codeline lineno="792"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__timer__hal_1ga46788eabb1ad085616c4796bb609c016" kindref="member">nrf_timer_event_clear</ref>(NRF_TIMER_Type<sp/>*<sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__timer__hal_1ga6c7c835fd175129175fe2c08237af3c3" kindref="member">nrf_timer_event_t</ref><sp/>event)</highlight></codeline>
<codeline lineno="794"><highlight class="normal">{</highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/><sp/><sp/>*((</highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint32_t<sp/>*)((uint8_t<sp/>*)p_reg<sp/>+<sp/>(uint32_t)event))<sp/>=<sp/>0x0UL;</highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/><sp/><sp/>nrf_event_readback((uint8_t<sp/>*)p_reg<sp/>+<sp/>(uint32_t)event);</highlight></codeline>
<codeline lineno="797"><highlight class="normal">}</highlight></codeline>
<codeline lineno="798"><highlight class="normal"></highlight></codeline>
<codeline lineno="799"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrf__timer__hal_1ga594ee9df9b86ae535bc4daf1384d5348" kindref="member">nrf_timer_event_check</ref>(NRF_TIMER_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__timer__hal_1ga6c7c835fd175129175fe2c08237af3c3" kindref="member">nrf_timer_event_t</ref><sp/><sp/><sp/><sp/><sp/><sp/>event)</highlight></codeline>
<codeline lineno="801"><highlight class="normal">{</highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>nrf_event_check(p_reg,<sp/>event);</highlight></codeline>
<codeline lineno="803"><highlight class="normal">}</highlight></codeline>
<codeline lineno="804"><highlight class="normal"></highlight></codeline>
<codeline lineno="805"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__timer__hal_1ga9ad70342f0808182e18ef591d23b0561" kindref="member">nrf_timer_event_address_get</ref>(NRF_TIMER_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__timer__hal_1ga6c7c835fd175129175fe2c08237af3c3" kindref="member">nrf_timer_event_t</ref><sp/><sp/><sp/><sp/><sp/><sp/>event)</highlight></codeline>
<codeline lineno="807"><highlight class="normal">{</highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>nrf_task_event_address_get(p_reg,<sp/>event);</highlight></codeline>
<codeline lineno="809"><highlight class="normal">}</highlight></codeline>
<codeline lineno="810"><highlight class="normal"></highlight></codeline>
<codeline lineno="811"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__timer__hal_1ga8efef095c7570c50f519dfe46539db90" kindref="member">nrf_timer_shorts_enable</ref>(NRF_TIMER_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mask)</highlight></codeline>
<codeline lineno="813"><highlight class="normal">{</highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;SHORTS<sp/>|=<sp/>mask;</highlight></codeline>
<codeline lineno="815"><highlight class="normal">}</highlight></codeline>
<codeline lineno="816"><highlight class="normal"></highlight></codeline>
<codeline lineno="817"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__timer__hal_1ga269330ebccab15e3e819cc2c805629ac" kindref="member">nrf_timer_shorts_disable</ref>(NRF_TIMER_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mask)</highlight></codeline>
<codeline lineno="819"><highlight class="normal">{</highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;SHORTS<sp/>&amp;=<sp/>~(mask);</highlight></codeline>
<codeline lineno="821"><highlight class="normal">}</highlight></codeline>
<codeline lineno="822"><highlight class="normal"></highlight></codeline>
<codeline lineno="823"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__timer__hal_1ga2d9291fbd5262d1f5a3d755e76d175d9" kindref="member">nrf_timer_shorts_set</ref>(NRF_TIMER_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mask)</highlight></codeline>
<codeline lineno="825"><highlight class="normal">{</highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;SHORTS<sp/>=<sp/>mask;</highlight></codeline>
<codeline lineno="827"><highlight class="normal">}</highlight></codeline>
<codeline lineno="828"><highlight class="normal"></highlight></codeline>
<codeline lineno="829"><highlight class="normal">NRF_STATIC_INLINE<sp/><ref refid="group__nrf__timer__hal_1ga1dee3ab20f9dfa38bacf2502a8d1688c" kindref="member">nrf_timer_short_mask_t</ref><sp/><ref refid="group__nrf__timer__hal_1ga470366a9f03a7ad5ce5b4634b4cf81ef" kindref="member">nrf_timer_short_compare_clear_get</ref>(uint8_t<sp/>channel)</highlight></codeline>
<codeline lineno="830"><highlight class="normal">{</highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="group__nrf__timer__hal_1ga1dee3ab20f9dfa38bacf2502a8d1688c" kindref="member">nrf_timer_short_mask_t</ref>)((uint32_t)<ref refid="group__nrf__timer__hal_1gga1dee3ab20f9dfa38bacf2502a8d1688ca98029953aa61f28bc923ff4ff9ab3a1d" kindref="member">NRF_TIMER_SHORT_COMPARE0_CLEAR_MASK</ref><sp/>&lt;&lt;<sp/>channel);</highlight></codeline>
<codeline lineno="832"><highlight class="normal">}</highlight></codeline>
<codeline lineno="833"><highlight class="normal"></highlight></codeline>
<codeline lineno="834"><highlight class="normal">NRF_STATIC_INLINE<sp/><ref refid="group__nrf__timer__hal_1ga1dee3ab20f9dfa38bacf2502a8d1688c" kindref="member">nrf_timer_short_mask_t</ref><sp/><ref refid="group__nrf__timer__hal_1gac773155b1c68ed77f90f29cb1f3a4e35" kindref="member">nrf_timer_short_compare_stop_get</ref>(uint8_t<sp/>channel)</highlight></codeline>
<codeline lineno="835"><highlight class="normal">{</highlight></codeline>
<codeline lineno="836"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="group__nrf__timer__hal_1ga1dee3ab20f9dfa38bacf2502a8d1688c" kindref="member">nrf_timer_short_mask_t</ref>)((uint32_t)<ref refid="group__nrf__timer__hal_1gga1dee3ab20f9dfa38bacf2502a8d1688cae953a4526a33bba2c89e2f240f7957d3" kindref="member">NRF_TIMER_SHORT_COMPARE0_STOP_MASK</ref><sp/>&lt;&lt;<sp/>channel);</highlight></codeline>
<codeline lineno="837"><highlight class="normal">}</highlight></codeline>
<codeline lineno="838"><highlight class="normal"></highlight></codeline>
<codeline lineno="839"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__timer__hal_1gaca84981e7f515192ffc4cb28ce18e554" kindref="member">nrf_timer_int_enable</ref>(NRF_TIMER_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mask)</highlight></codeline>
<codeline lineno="841"><highlight class="normal">{</highlight></codeline>
<codeline lineno="842"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;INTENSET<sp/>=<sp/>mask;</highlight></codeline>
<codeline lineno="843"><highlight class="normal">}</highlight></codeline>
<codeline lineno="844"><highlight class="normal"></highlight></codeline>
<codeline lineno="845"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__timer__hal_1gab26b26a0a091b12491246d4b1f4e65c8" kindref="member">nrf_timer_int_disable</ref>(NRF_TIMER_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mask)</highlight></codeline>
<codeline lineno="847"><highlight class="normal">{</highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;INTENCLR<sp/>=<sp/>mask;</highlight></codeline>
<codeline lineno="849"><highlight class="normal">}</highlight></codeline>
<codeline lineno="850"><highlight class="normal"></highlight></codeline>
<codeline lineno="851"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__timer__hal_1gaa6902537565850e0cfd62fa31a1b9083" kindref="member">nrf_timer_int_enable_check</ref>(NRF_TIMER_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>mask)</highlight></codeline>
<codeline lineno="852"><highlight class="normal">{</highlight></codeline>
<codeline lineno="853"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p_reg-&gt;INTENSET<sp/>&amp;<sp/>mask;</highlight></codeline>
<codeline lineno="854"><highlight class="normal">}</highlight></codeline>
<codeline lineno="855"><highlight class="normal"></highlight></codeline>
<codeline lineno="856"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(DPPI_PRESENT)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="857"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__timer__hal_1gabcfd966f5844ba4c22476ea36f944bca" kindref="member">nrf_timer_subscribe_set</ref>(NRF_TIMER_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__timer__hal_1ga1db410e4a6b7e38de383220b20724906" kindref="member">nrf_timer_task_t</ref><sp/>task,</highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>channel)</highlight></codeline>
<codeline lineno="860"><highlight class="normal">{</highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/><sp/><sp/>*((</highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint32_t<sp/>*)<sp/>((uint8_t<sp/>*)<sp/>p_reg<sp/>+<sp/>(uint32_t)<sp/>task<sp/>+<sp/>0x80uL))<sp/>=</highlight></codeline>
<codeline lineno="862"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)channel<sp/>|<sp/>NRF_SUBSCRIBE_PUBLISH_ENABLE);</highlight></codeline>
<codeline lineno="863"><highlight class="normal">}</highlight></codeline>
<codeline lineno="864"><highlight class="normal"></highlight></codeline>
<codeline lineno="865"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__timer__hal_1gafce2e496e07c100add401597ad9d82b2" kindref="member">nrf_timer_subscribe_clear</ref>(NRF_TIMER_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="866"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__timer__hal_1ga1db410e4a6b7e38de383220b20724906" kindref="member">nrf_timer_task_t</ref><sp/>task)</highlight></codeline>
<codeline lineno="867"><highlight class="normal">{</highlight></codeline>
<codeline lineno="868"><highlight class="normal"><sp/><sp/><sp/><sp/>*((</highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint32_t<sp/>*)<sp/>((uint8_t<sp/>*)<sp/>p_reg<sp/>+<sp/>(uint32_t)<sp/>task<sp/>+<sp/>0x80uL))<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="869"><highlight class="normal">}</highlight></codeline>
<codeline lineno="870"><highlight class="normal"></highlight></codeline>
<codeline lineno="871"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__timer__hal_1gaa8e16ed891e6014d425b908daabfa498" kindref="member">nrf_timer_publish_set</ref>(NRF_TIMER_Type<sp/>*<sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="872"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__timer__hal_1ga6c7c835fd175129175fe2c08237af3c3" kindref="member">nrf_timer_event_t</ref><sp/>event,</highlight></codeline>
<codeline lineno="873"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>channel)</highlight></codeline>
<codeline lineno="874"><highlight class="normal">{</highlight></codeline>
<codeline lineno="875"><highlight class="normal"><sp/><sp/><sp/><sp/>*((</highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint32_t<sp/>*)<sp/>((uint8_t<sp/>*)<sp/>p_reg<sp/>+<sp/>(uint32_t)<sp/>event<sp/>+<sp/>0x80uL))<sp/>=</highlight></codeline>
<codeline lineno="876"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)channel<sp/>|<sp/>NRF_SUBSCRIBE_PUBLISH_ENABLE);</highlight></codeline>
<codeline lineno="877"><highlight class="normal">}</highlight></codeline>
<codeline lineno="878"><highlight class="normal"></highlight></codeline>
<codeline lineno="879"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__timer__hal_1gafef86d00be35fa22765f9823c17fc6f0" kindref="member">nrf_timer_publish_clear</ref>(NRF_TIMER_Type<sp/>*<sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="880"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__timer__hal_1ga6c7c835fd175129175fe2c08237af3c3" kindref="member">nrf_timer_event_t</ref><sp/>event)</highlight></codeline>
<codeline lineno="881"><highlight class="normal">{</highlight></codeline>
<codeline lineno="882"><highlight class="normal"><sp/><sp/><sp/><sp/>*((</highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint32_t<sp/>*)<sp/>((uint8_t<sp/>*)<sp/>p_reg<sp/>+<sp/>(uint32_t)<sp/>event<sp/>+<sp/>0x80uL))<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="883"><highlight class="normal">}</highlight></codeline>
<codeline lineno="884"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>defined(DPPI_PRESENT)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="885"><highlight class="normal"></highlight></codeline>
<codeline lineno="886"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__timer__hal_1ga1c02aebd9fc392af80ea2da5dca7ed61" kindref="member">nrf_timer_mode_set</ref>(NRF_TIMER_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="887"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__timer__hal_1ga61044c286dc20ccb08df3988bc57a6f2" kindref="member">nrf_timer_mode_t</ref><sp/>mode)</highlight></codeline>
<codeline lineno="888"><highlight class="normal">{</highlight></codeline>
<codeline lineno="889"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;MODE<sp/>=<sp/>(p_reg-&gt;MODE<sp/>&amp;<sp/>~TIMER_MODE_MODE_Msk)<sp/>|</highlight></codeline>
<codeline lineno="890"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((mode<sp/>&lt;&lt;<sp/>TIMER_MODE_MODE_Pos)<sp/>&amp;<sp/>TIMER_MODE_MODE_Msk);</highlight></codeline>
<codeline lineno="891"><highlight class="normal">}</highlight></codeline>
<codeline lineno="892"><highlight class="normal"></highlight></codeline>
<codeline lineno="893"><highlight class="normal">NRF_STATIC_INLINE<sp/><ref refid="group__nrf__timer__hal_1ga61044c286dc20ccb08df3988bc57a6f2" kindref="member">nrf_timer_mode_t</ref><sp/><ref refid="group__nrf__timer__hal_1gaf0dbbc911f7fbf8952d261da81bb0aff" kindref="member">nrf_timer_mode_get</ref>(NRF_TIMER_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="894"><highlight class="normal">{</highlight></codeline>
<codeline lineno="895"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="group__nrf__timer__hal_1ga61044c286dc20ccb08df3988bc57a6f2" kindref="member">nrf_timer_mode_t</ref>)(p_reg-&gt;MODE);</highlight></codeline>
<codeline lineno="896"><highlight class="normal">}</highlight></codeline>
<codeline lineno="897"><highlight class="normal"></highlight></codeline>
<codeline lineno="898"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__timer__hal_1ga1bf04327bb1bcbcafb66be1e0d69da39" kindref="member">nrf_timer_bit_width_set</ref>(NRF_TIMER_Type<sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="899"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__timer__hal_1ga567f81d672267a218a5b2f0155be3043" kindref="member">nrf_timer_bit_width_t</ref><sp/>bit_width)</highlight></codeline>
<codeline lineno="900"><highlight class="normal">{</highlight></codeline>
<codeline lineno="901"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;BITMODE<sp/>=<sp/>(p_reg-&gt;BITMODE<sp/>&amp;<sp/>~TIMER_BITMODE_BITMODE_Msk)<sp/>|</highlight></codeline>
<codeline lineno="902"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((bit_width<sp/>&lt;&lt;<sp/>TIMER_BITMODE_BITMODE_Pos)<sp/>&amp;</highlight></codeline>
<codeline lineno="903"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TIMER_BITMODE_BITMODE_Msk);</highlight></codeline>
<codeline lineno="904"><highlight class="normal">}</highlight></codeline>
<codeline lineno="905"><highlight class="normal"></highlight></codeline>
<codeline lineno="906"><highlight class="normal">NRF_STATIC_INLINE<sp/><ref refid="group__nrf__timer__hal_1ga567f81d672267a218a5b2f0155be3043" kindref="member">nrf_timer_bit_width_t</ref><sp/><ref refid="group__nrf__timer__hal_1gaf2be8f99a56547edd3d37a59b7be2602" kindref="member">nrf_timer_bit_width_get</ref>(NRF_TIMER_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="907"><highlight class="normal">{</highlight></codeline>
<codeline lineno="908"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="group__nrf__timer__hal_1ga567f81d672267a218a5b2f0155be3043" kindref="member">nrf_timer_bit_width_t</ref>)(p_reg-&gt;BITMODE);</highlight></codeline>
<codeline lineno="909"><highlight class="normal">}</highlight></codeline>
<codeline lineno="910"><highlight class="normal"></highlight></codeline>
<codeline lineno="911"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__timer__hal_1ga5e804fd21a6351e80e20ed94a95e1745" kindref="member">nrf_timer_prescaler_set</ref>(NRF_TIMER_Type<sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>prescaler_factor)</highlight></codeline>
<codeline lineno="912"><highlight class="normal">{</highlight></codeline>
<codeline lineno="913"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__glue_1ga9698a3f6b6bea455d2b54a79e514ee36" kindref="member">NRFX_ASSERT</ref>(prescaler_factor<sp/>&lt;=<sp/><ref refid="group__nrf__timer__hal_1ga0206996722160e725012e56ff212f937" kindref="member">NRF_TIMER_PRESCALER_MAX</ref>);</highlight></codeline>
<codeline lineno="914"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;PRESCALER<sp/>=<sp/>prescaler_factor;</highlight></codeline>
<codeline lineno="915"><highlight class="normal">}</highlight></codeline>
<codeline lineno="916"><highlight class="normal"></highlight></codeline>
<codeline lineno="917"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__timer__hal_1ga8018856d922dc9cd77c5f5b74f533f25" kindref="member">nrf_timer_prescaler_get</ref>(NRF_TIMER_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="918"><highlight class="normal">{</highlight></codeline>
<codeline lineno="919"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p_reg-&gt;PRESCALER;</highlight></codeline>
<codeline lineno="920"><highlight class="normal">}</highlight></codeline>
<codeline lineno="921"><highlight class="normal"></highlight></codeline>
<codeline lineno="922"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__timer__hal_1ga8778ec1e21e5a8306d720ab4e69a199b" kindref="member">nrf_timer_cc_set</ref>(NRF_TIMER_Type<sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="923"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__timer__hal_1ga21336e3aff87c90e95f08eff763d91a8" kindref="member">nrf_timer_cc_channel_t</ref><sp/>cc_channel,</highlight></codeline>
<codeline lineno="924"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cc_value)</highlight></codeline>
<codeline lineno="925"><highlight class="normal">{</highlight></codeline>
<codeline lineno="926"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;CC[cc_channel]<sp/>=<sp/>cc_value;</highlight></codeline>
<codeline lineno="927"><highlight class="normal">}</highlight></codeline>
<codeline lineno="928"><highlight class="normal"></highlight></codeline>
<codeline lineno="929"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__timer__hal_1ga237a16bb2596cc350a15f741665b7e75" kindref="member">nrf_timer_cc_get</ref>(NRF_TIMER_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="930"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__timer__hal_1ga21336e3aff87c90e95f08eff763d91a8" kindref="member">nrf_timer_cc_channel_t</ref><sp/>cc_channel)</highlight></codeline>
<codeline lineno="931"><highlight class="normal">{</highlight></codeline>
<codeline lineno="932"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(uint32_t)p_reg-&gt;CC[cc_channel];</highlight></codeline>
<codeline lineno="933"><highlight class="normal">}</highlight></codeline>
<codeline lineno="934"><highlight class="normal"></highlight></codeline>
<codeline lineno="935"><highlight class="normal">NRF_STATIC_INLINE<sp/><ref refid="group__nrf__timer__hal_1ga1db410e4a6b7e38de383220b20724906" kindref="member">nrf_timer_task_t</ref><sp/><ref refid="group__nrf__timer__hal_1ga992b4f8249b638159cc2abedcca7ba6a" kindref="member">nrf_timer_capture_task_get</ref>(uint8_t<sp/>channel)</highlight></codeline>
<codeline lineno="936"><highlight class="normal">{</highlight></codeline>
<codeline lineno="937"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="group__nrf__timer__hal_1ga1db410e4a6b7e38de383220b20724906" kindref="member">nrf_timer_task_t</ref>)<ref refid="group__nrfx__common_1gaf356c97c2527d9ac57b04dd9f12fc9d3" kindref="member">NRFX_OFFSETOF</ref>(NRF_TIMER_Type,<sp/>TASKS_CAPTURE[channel]);</highlight></codeline>
<codeline lineno="938"><highlight class="normal">}</highlight></codeline>
<codeline lineno="939"><highlight class="normal"></highlight></codeline>
<codeline lineno="940"><highlight class="normal">NRF_STATIC_INLINE<sp/><ref refid="group__nrf__timer__hal_1ga6c7c835fd175129175fe2c08237af3c3" kindref="member">nrf_timer_event_t</ref><sp/><ref refid="group__nrf__timer__hal_1ga2e446c45ecb7958a1a15f8f08cdc2c40" kindref="member">nrf_timer_compare_event_get</ref>(uint8_t<sp/>channel)</highlight></codeline>
<codeline lineno="941"><highlight class="normal">{</highlight></codeline>
<codeline lineno="942"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="group__nrf__timer__hal_1ga6c7c835fd175129175fe2c08237af3c3" kindref="member">nrf_timer_event_t</ref>)<ref refid="group__nrfx__common_1gaf356c97c2527d9ac57b04dd9f12fc9d3" kindref="member">NRFX_OFFSETOF</ref>(NRF_TIMER_Type,<sp/>EVENTS_COMPARE[channel]);</highlight></codeline>
<codeline lineno="943"><highlight class="normal">}</highlight></codeline>
<codeline lineno="944"><highlight class="normal"></highlight></codeline>
<codeline lineno="945"><highlight class="normal">NRF_STATIC_INLINE<sp/><ref refid="group__nrf__timer__hal_1ga55adb42b75222256195fa003f8c0dc20" kindref="member">nrf_timer_int_mask_t</ref><sp/><ref refid="group__nrf__timer__hal_1gac8210bc33f954ef3dacd78f3aabaf0bc" kindref="member">nrf_timer_compare_int_get</ref>(uint8_t<sp/>channel)</highlight></codeline>
<codeline lineno="946"><highlight class="normal">{</highlight></codeline>
<codeline lineno="947"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="group__nrf__timer__hal_1ga55adb42b75222256195fa003f8c0dc20" kindref="member">nrf_timer_int_mask_t</ref>)</highlight></codeline>
<codeline lineno="948"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)<ref refid="group__nrf__timer__hal_1gga55adb42b75222256195fa003f8c0dc20a7c79e9f26e48942dca235affefad9912" kindref="member">NRF_TIMER_INT_COMPARE0_MASK</ref><sp/>&lt;&lt;<sp/>channel);</highlight></codeline>
<codeline lineno="949"><highlight class="normal">}</highlight></codeline>
<codeline lineno="950"><highlight class="normal"></highlight></codeline>
<codeline lineno="951"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__timer__hal_1ga9b471b98803bcac06bd272feb38ceca5" kindref="member">nrf_timer_us_to_ticks</ref>(uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>time_us,</highlight></codeline>
<codeline lineno="952"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__timer__hal_1ga28862835cd77a9c8481ed04c7b1918eb" kindref="member">nrf_timer_frequency_t</ref><sp/>frequency)</highlight></codeline>
<codeline lineno="953"><highlight class="normal">{</highlight></codeline>
<codeline lineno="954"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>&quot;frequency&quot;<sp/>parameter<sp/>here<sp/>is<sp/>actually<sp/>the<sp/>prescaler<sp/>value,<sp/>and<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="955"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>timer<sp/>runs<sp/>at<sp/>the<sp/>following<sp/>frequency:<sp/>f<sp/>=<sp/>16<sp/>MHz<sp/>/<sp/>2^prescaler.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="956"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>prescaler<sp/>=<sp/>(uint32_t)frequency;</highlight></codeline>
<codeline lineno="957"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>ticks<sp/>=<sp/>((time_us<sp/>*<sp/>16ULL)<sp/>&gt;&gt;<sp/>prescaler);</highlight></codeline>
<codeline lineno="958"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__glue_1ga9698a3f6b6bea455d2b54a79e514ee36" kindref="member">NRFX_ASSERT</ref>(ticks<sp/>&lt;=<sp/>UINT32_MAX);</highlight></codeline>
<codeline lineno="959"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(uint32_t)ticks;</highlight></codeline>
<codeline lineno="960"><highlight class="normal">}</highlight></codeline>
<codeline lineno="961"><highlight class="normal"></highlight></codeline>
<codeline lineno="962"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__timer__hal_1ga4f52b3d15736f23db37552fc777a8253" kindref="member">nrf_timer_ms_to_ticks</ref>(uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>time_ms,</highlight></codeline>
<codeline lineno="963"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__timer__hal_1ga28862835cd77a9c8481ed04c7b1918eb" kindref="member">nrf_timer_frequency_t</ref><sp/>frequency)</highlight></codeline>
<codeline lineno="964"><highlight class="normal">{</highlight></codeline>
<codeline lineno="965"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>&quot;frequency&quot;<sp/>parameter<sp/>here<sp/>is<sp/>actually<sp/>the<sp/>prescaler<sp/>value,<sp/>and<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="966"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>timer<sp/>runs<sp/>at<sp/>the<sp/>following<sp/>frequency:<sp/>f<sp/>=<sp/>16000<sp/>kHz<sp/>/<sp/>2^prescaler.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="967"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>prescaler<sp/>=<sp/>(uint32_t)frequency;</highlight></codeline>
<codeline lineno="968"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>ticks<sp/>=<sp/>((time_ms<sp/>*<sp/>16000ULL)<sp/>&gt;&gt;<sp/>prescaler);</highlight></codeline>
<codeline lineno="969"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__glue_1ga9698a3f6b6bea455d2b54a79e514ee36" kindref="member">NRFX_ASSERT</ref>(ticks<sp/>&lt;=<sp/>UINT32_MAX);</highlight></codeline>
<codeline lineno="970"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(uint32_t)ticks;</highlight></codeline>
<codeline lineno="971"><highlight class="normal">}</highlight></codeline>
<codeline lineno="972"><highlight class="normal"></highlight></codeline>
<codeline lineno="973"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_TIMER_HAS_ONE_SHOT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="974"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__timer__hal_1ga5b34388603484fa4043803f1ebca04c0" kindref="member">nrf_timer_one_shot_enable</ref>(NRF_TIMER_Type<sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="975"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__timer__hal_1ga21336e3aff87c90e95f08eff763d91a8" kindref="member">nrf_timer_cc_channel_t</ref><sp/>cc_channel)</highlight></codeline>
<codeline lineno="976"><highlight class="normal">{</highlight></codeline>
<codeline lineno="977"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;ONESHOTEN[cc_channel]<sp/>=<sp/>TIMER_ONESHOTEN_ONESHOTEN_Msk;</highlight></codeline>
<codeline lineno="978"><highlight class="normal">}</highlight></codeline>
<codeline lineno="979"><highlight class="normal"></highlight></codeline>
<codeline lineno="980"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__timer__hal_1ga85ee7ab4a9d8e7368602aa73ef560556" kindref="member">nrf_timer_one_shot_disable</ref>(NRF_TIMER_Type<sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="981"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__timer__hal_1ga21336e3aff87c90e95f08eff763d91a8" kindref="member">nrf_timer_cc_channel_t</ref><sp/>cc_channel)</highlight></codeline>
<codeline lineno="982"><highlight class="normal">{</highlight></codeline>
<codeline lineno="983"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;ONESHOTEN[cc_channel]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="984"><highlight class="normal">}</highlight></codeline>
<codeline lineno="985"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRF_TIMER_HAS_ONE_SHOT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="986"><highlight class="normal"></highlight></codeline>
<codeline lineno="987"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRF_DECLARE_ONLY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="988"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="989"><highlight class="comment">/**<sp/>@}<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="990"><highlight class="normal"></highlight></codeline>
<codeline lineno="991"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="992"><highlight class="normal">}</highlight></codeline>
<codeline lineno="993"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="994"><highlight class="normal"></highlight></codeline>
<codeline lineno="995"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRF_TIMER_H__</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="hal/nrf_timer.h"/>
  </compounddef>
</doxygen>
