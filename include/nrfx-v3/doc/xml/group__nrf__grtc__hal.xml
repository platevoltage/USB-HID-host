<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="group__nrf__grtc__hal" kind="group">
    <compoundname>nrf_grtc_hal</compoundname>
    <title>GRTC HAL</title>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="group__nrf__grtc__hal_1ga3ead45038f169b586ca21cd6ef8acde9" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_grtc_task_t</name>
        <enumvalue id="group__nrf__grtc__hal_1gga3ead45038f169b586ca21cd6ef8acde9af0bbe53668b3def13ca5427c7155d8aa" prot="public">
          <name>NRF_GRTC_TASK_START</name>
          <initializer>= offsetof(NRF_GRTC_Type, TASKS_START)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Start. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__grtc__hal_1gga3ead45038f169b586ca21cd6ef8acde9aa371c89207c911044474b41a5af4ea13" prot="public">
          <name>NRF_GRTC_TASK_STOP</name>
          <initializer>= offsetof(NRF_GRTC_Type, TASKS_STOP)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Stop. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__grtc__hal_1gga3ead45038f169b586ca21cd6ef8acde9a9bdac9230cd2cfee5b1612f638846356" prot="public">
          <name>NRF_GRTC_TASK_CLEAR</name>
          <initializer>= offsetof(NRF_GRTC_Type, TASKS_CLEAR)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Clear. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__grtc__hal_1gga3ead45038f169b586ca21cd6ef8acde9ad3004ba2b2a693c014d62b5a71f07566" prot="public">
          <name>NRF_GRTC_TASK_PWM_START</name>
          <initializer>= offsetof(NRF_GRTC_Type, TASKS_PWMSTART)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Start the PWM. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__grtc__hal_1gga3ead45038f169b586ca21cd6ef8acde9ad5423f202e7edb947cbf9ec6b7af8c88" prot="public">
          <name>NRF_GRTC_TASK_PWM_STOP</name>
          <initializer>= offsetof(NRF_GRTC_Type, TASKS_PWMSTOP)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Stop the PWM. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__grtc__hal_1gga3ead45038f169b586ca21cd6ef8acde9a5949f268a2fc7554d0e2c276dc93c14b" prot="public">
          <name>NRF_GRTC_TASK_CAPTURE_0</name>
          <initializer>= offsetof(NRF_GRTC_Type, TASKS_CAPTURE[0])</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Capture the counter value on channel 0. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__grtc__hal_1gga3ead45038f169b586ca21cd6ef8acde9aac6dcc164760956521dcfc075ab1deef" prot="public">
          <name>NRF_GRTC_TASK_CAPTURE_1</name>
          <initializer>= offsetof(NRF_GRTC_Type, TASKS_CAPTURE[1])</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Capture the counter value on channel 1. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__grtc__hal_1gga3ead45038f169b586ca21cd6ef8acde9a399cd3aa72c654c87230fae19fc24eea" prot="public">
          <name>NRF_GRTC_TASK_CAPTURE_2</name>
          <initializer>= offsetof(NRF_GRTC_Type, TASKS_CAPTURE[2])</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Capture the counter value on channel 2. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__grtc__hal_1gga3ead45038f169b586ca21cd6ef8acde9a47e71b927d8b31125aaff6d73e1957a0" prot="public">
          <name>NRF_GRTC_TASK_CAPTURE_3</name>
          <initializer>= offsetof(NRF_GRTC_Type, TASKS_CAPTURE[3])</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Capture the counter value on channel 3. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__grtc__hal_1gga3ead45038f169b586ca21cd6ef8acde9a836940b45d931ff2bd34bff22710b330" prot="public">
          <name>NRF_GRTC_TASK_CAPTURE_4</name>
          <initializer>= offsetof(NRF_GRTC_Type, TASKS_CAPTURE[4])</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Capture the counter value on channel 4. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__grtc__hal_1gga3ead45038f169b586ca21cd6ef8acde9aabd9a032a26683ea0d18f4398310cea6" prot="public">
          <name>NRF_GRTC_TASK_CAPTURE_5</name>
          <initializer>= offsetof(NRF_GRTC_Type, TASKS_CAPTURE[5])</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Capture the counter value on channel 5. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__grtc__hal_1gga3ead45038f169b586ca21cd6ef8acde9a5521fd3420eee20a1b892dd4c66eb5b2" prot="public">
          <name>NRF_GRTC_TASK_CAPTURE_6</name>
          <initializer>= offsetof(NRF_GRTC_Type, TASKS_CAPTURE[6])</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Capture the counter value on channel 6. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__grtc__hal_1gga3ead45038f169b586ca21cd6ef8acde9af8de2bd05925d7ab43a41b910d1cc726" prot="public">
          <name>NRF_GRTC_TASK_CAPTURE_7</name>
          <initializer>= offsetof(NRF_GRTC_Type, TASKS_CAPTURE[7])</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Capture the counter value on channel 7. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__grtc__hal_1gga3ead45038f169b586ca21cd6ef8acde9abcdb82464e75549c95dabe076e5bfbdd" prot="public">
          <name>NRF_GRTC_TASK_CAPTURE_8</name>
          <initializer>= offsetof(NRF_GRTC_Type, TASKS_CAPTURE[8])</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Capture the counter value on channel 8. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__grtc__hal_1gga3ead45038f169b586ca21cd6ef8acde9a8e8faef7f39c2427913b7640f96fc79a" prot="public">
          <name>NRF_GRTC_TASK_CAPTURE_9</name>
          <initializer>= offsetof(NRF_GRTC_Type, TASKS_CAPTURE[9])</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Capture the counter value on channel 9. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__grtc__hal_1gga3ead45038f169b586ca21cd6ef8acde9a99cbe42cc269c0dd9001f28966539634" prot="public">
          <name>NRF_GRTC_TASK_CAPTURE_10</name>
          <initializer>= offsetof(NRF_GRTC_Type, TASKS_CAPTURE[10])</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Capture the counter value on channel 10. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__grtc__hal_1gga3ead45038f169b586ca21cd6ef8acde9a7a445851264eddc9f1615700ccb6353e" prot="public">
          <name>NRF_GRTC_TASK_CAPTURE_11</name>
          <initializer>= offsetof(NRF_GRTC_Type, TASKS_CAPTURE[11])</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Capture the counter value on channel 11. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>GRTC tasks. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_grtc.h" line="208" column="1" bodyfile="hal/nrf_grtc.h" bodystart="209" bodyend="253"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__grtc__hal_1ga7ae05a37545fa5a2c94e90d048bb2b65" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_grtc_event_t</name>
        <enumvalue id="group__nrf__grtc__hal_1gga7ae05a37545fa5a2c94e90d048bb2b65a51eb4303db2e53642fc468398e4e8cbc" prot="public">
          <name>NRF_GRTC_EVENT_COMPARE_0</name>
          <initializer>= offsetof(NRF_GRTC_Type, EVENTS_COMPARE[0])</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Compare 0 event. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__grtc__hal_1gga7ae05a37545fa5a2c94e90d048bb2b65ab27781e89a7dc0ce608f699ef09c00a2" prot="public">
          <name>NRF_GRTC_EVENT_COMPARE_1</name>
          <initializer>= offsetof(NRF_GRTC_Type, EVENTS_COMPARE[1])</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Compare 1 event. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__grtc__hal_1gga7ae05a37545fa5a2c94e90d048bb2b65a06fef006f68b5c71f28188c088d7ecc0" prot="public">
          <name>NRF_GRTC_EVENT_COMPARE_2</name>
          <initializer>= offsetof(NRF_GRTC_Type, EVENTS_COMPARE[2])</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Compare 2 event. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__grtc__hal_1gga7ae05a37545fa5a2c94e90d048bb2b65a067729010761ff964c173a0f5c4019a7" prot="public">
          <name>NRF_GRTC_EVENT_COMPARE_3</name>
          <initializer>= offsetof(NRF_GRTC_Type, EVENTS_COMPARE[3])</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Compare 3 event. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__grtc__hal_1gga7ae05a37545fa5a2c94e90d048bb2b65aa363885fa824af7cd3661a9cedeca534" prot="public">
          <name>NRF_GRTC_EVENT_COMPARE_4</name>
          <initializer>= offsetof(NRF_GRTC_Type, EVENTS_COMPARE[4])</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Compare 4 event. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__grtc__hal_1gga7ae05a37545fa5a2c94e90d048bb2b65a6d74b058f6c66e2f59cbd5c1c6b03fef" prot="public">
          <name>NRF_GRTC_EVENT_COMPARE_5</name>
          <initializer>= offsetof(NRF_GRTC_Type, EVENTS_COMPARE[5])</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Compare 5 event. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__grtc__hal_1gga7ae05a37545fa5a2c94e90d048bb2b65a4dbdf3235893ffcbacefd3ad93eb290f" prot="public">
          <name>NRF_GRTC_EVENT_COMPARE_6</name>
          <initializer>= offsetof(NRF_GRTC_Type, EVENTS_COMPARE[6])</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Compare 6 event. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__grtc__hal_1gga7ae05a37545fa5a2c94e90d048bb2b65ad105ff9439c6d5f8b14fa8636bbc2a70" prot="public">
          <name>NRF_GRTC_EVENT_COMPARE_7</name>
          <initializer>= offsetof(NRF_GRTC_Type, EVENTS_COMPARE[7])</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Compare 7 event. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__grtc__hal_1gga7ae05a37545fa5a2c94e90d048bb2b65a176351c02a9143e7d8e481b9341aba7b" prot="public">
          <name>NRF_GRTC_EVENT_COMPARE_8</name>
          <initializer>= offsetof(NRF_GRTC_Type, EVENTS_COMPARE[8])</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Compare 8 event. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__grtc__hal_1gga7ae05a37545fa5a2c94e90d048bb2b65a96e4602e66298a40e16d81eaa4a5bb77" prot="public">
          <name>NRF_GRTC_EVENT_COMPARE_9</name>
          <initializer>= offsetof(NRF_GRTC_Type, EVENTS_COMPARE[9])</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Compare 9 event. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__grtc__hal_1gga7ae05a37545fa5a2c94e90d048bb2b65afa77c726823878043979348ebd8198c6" prot="public">
          <name>NRF_GRTC_EVENT_COMPARE_10</name>
          <initializer>= offsetof(NRF_GRTC_Type, EVENTS_COMPARE[10])</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Compare 10 event. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__grtc__hal_1gga7ae05a37545fa5a2c94e90d048bb2b65a4d16126ecf78752cecb01e249f9343b2" prot="public">
          <name>NRF_GRTC_EVENT_COMPARE_11</name>
          <initializer>= offsetof(NRF_GRTC_Type, EVENTS_COMPARE[11])</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Compare 11 event. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__grtc__hal_1gga7ae05a37545fa5a2c94e90d048bb2b65aed54a6f5672eb5327102b72ba1f0092d" prot="public">
          <name>NRF_GRTC_EVENT_COMPARE_12</name>
          <initializer>= offsetof(NRF_GRTC_Type, EVENTS_COMPARE[12])</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Compare 12 event. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__grtc__hal_1gga7ae05a37545fa5a2c94e90d048bb2b65aaf77e55d0b716fe06c2b56f2faa275a4" prot="public">
          <name>NRF_GRTC_EVENT_RTCOMPARE</name>
          <initializer>= offsetof(NRF_GRTC_Type, EVENTS_RTCOMPARE)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>RTCOUNTER compare event. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__grtc__hal_1gga7ae05a37545fa5a2c94e90d048bb2b65ae7e815bcad2414fc4de6025fc9329e7c" prot="public">
          <name>NRF_GRTC_EVENT_RTCOMPARESYNC</name>
          <initializer>= offsetof(NRF_GRTC_Type, EVENTS_RTCOMPARESYNC)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>RTCOUNTER synchronized compare event. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__grtc__hal_1gga7ae05a37545fa5a2c94e90d048bb2b65ab123f82a38ece536dd9de212c385046d" prot="public">
          <name>NRF_GRTC_EVENT_SYSCOUNTERVALID</name>
          <initializer>= offsetof(NRF_GRTC_Type, EVENTS_SYSCOUNTERVALID)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>SYSCOUNTER value valid event. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__grtc__hal_1gga7ae05a37545fa5a2c94e90d048bb2b65a1135fb3652d2cfca4ef71e55904203c2" prot="public">
          <name>NRF_GRTC_EVENT_PWM_PERIOD_END</name>
          <initializer>= offsetof(NRF_GRTC_Type, EVENTS_PWMPERIODEND)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>End of PWM period event. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>GRTC events. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_grtc.h" line="256" column="1" bodyfile="hal/nrf_grtc.h" bodystart="257" bodyend="300"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__grtc__hal_1ga123d5e58c5e2a9fc7f7ff2d3aa4f82df" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_grtc_short_mask_t</name>
        <enumvalue id="group__nrf__grtc__hal_1gga123d5e58c5e2a9fc7f7ff2d3aa4f82dfac9e912a90becb727d32dc58faf9aefb3" prot="public">
          <name>NRF_GRTC_SHORT_RTCOMPARE_CLEAR_MASK</name>
          <initializer>= GRTC_SHORTS_RTCOMPARE_CLEAR_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Shortcut between RTCOMPARE event and CLEAR task. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Types of GRTC shortcuts. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_grtc.h" line="304" column="1" bodyfile="hal/nrf_grtc.h" bodystart="305" bodyend="307"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__grtc__hal_1ga4e34fb922643e9f448f248b410e2e8e4" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_grtc_cc_add_reference_t</name>
        <enumvalue id="group__nrf__grtc__hal_1gga4e34fb922643e9f448f248b410e2e8e4a7d1e9d741d2bd841434da14196c05c34" prot="public">
          <name>NRF_GRTC_CC_ADD_REFERENCE_SYSCOUNTER</name>
          <initializer>= GRTC_CC_CCADD_REFERENCE_SYSCOUNTER</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>The SYSCOUNTER register&apos;s content will be used as the reference. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__grtc__hal_1gga4e34fb922643e9f448f248b410e2e8e4a871b28e84ca812e2bd1a71a12b17354f" prot="public">
          <name>NRF_GRTC_CC_ADD_REFERENCE_CC</name>
          <initializer>= GRTC_CC_CCADD_REFERENCE_CC</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>The CC[n] register&apos;s content will be used as the reference. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Types of GRTC CC references. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_grtc.h" line="311" column="1" bodyfile="hal/nrf_grtc.h" bodystart="312" bodyend="315"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__grtc__hal_1gad1e632ee175d9af435e2246cd7927822" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_grtc_int_mask_t</name>
        <enumvalue id="group__nrf__grtc__hal_1ggad1e632ee175d9af435e2246cd7927822a695bd0df2fa8ffbd8353f78b536011e2" prot="public">
          <name>NRF_GRTC_INT_COMPARE0_MASK</name>
          <initializer>= GRTC_INTENSET0_COMPARE0_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>GRTC interrupt from compare event on channel 0. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__grtc__hal_1ggad1e632ee175d9af435e2246cd7927822a34201202bce60d2bf69d21ecdc4f197c" prot="public">
          <name>NRF_GRTC_INT_COMPARE1_MASK</name>
          <initializer>= GRTC_INTENSET0_COMPARE1_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>GRTC interrupt from compare event on channel 1. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__grtc__hal_1ggad1e632ee175d9af435e2246cd7927822afab614c03e60337d4c4e61e9e5fbb220" prot="public">
          <name>NRF_GRTC_INT_COMPARE2_MASK</name>
          <initializer>= GRTC_INTENSET0_COMPARE2_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>GRTC interrupt from compare event on channel 2. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__grtc__hal_1ggad1e632ee175d9af435e2246cd7927822a8e786fe3e5d073f991529f472079237a" prot="public">
          <name>NRF_GRTC_INT_COMPARE3_MASK</name>
          <initializer>= GRTC_INTENSET0_COMPARE3_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>GRTC interrupt from compare event on channel 3. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__grtc__hal_1ggad1e632ee175d9af435e2246cd7927822a3e8257930c176bec7770e7789b9cb6d3" prot="public">
          <name>NRF_GRTC_INT_COMPARE4_MASK</name>
          <initializer>= GRTC_INTENSET0_COMPARE4_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>GRTC interrupt from compare event on channel 4. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__grtc__hal_1ggad1e632ee175d9af435e2246cd7927822a077d1f7976f18b5ffdd429a1d661f79d" prot="public">
          <name>NRF_GRTC_INT_COMPARE5_MASK</name>
          <initializer>= GRTC_INTENSET0_COMPARE5_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>GRTC interrupt from compare event on channel 5. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__grtc__hal_1ggad1e632ee175d9af435e2246cd7927822a2c1e01317d660e0a4860904cb3635916" prot="public">
          <name>NRF_GRTC_INT_COMPARE6_MASK</name>
          <initializer>= GRTC_INTENSET0_COMPARE6_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>GRTC interrupt from compare event on channel 6. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__grtc__hal_1ggad1e632ee175d9af435e2246cd7927822a760ea75a3ab6fd7286497bbc6b77ea53" prot="public">
          <name>NRF_GRTC_INT_COMPARE7_MASK</name>
          <initializer>= GRTC_INTENSET0_COMPARE7_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>GRTC interrupt from compare event on channel 7. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__grtc__hal_1ggad1e632ee175d9af435e2246cd7927822a946402fa9a810ba86bf9e935ef37ff51" prot="public">
          <name>NRF_GRTC_INT_COMPARE8_MASK</name>
          <initializer>= GRTC_INTENSET0_COMPARE8_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>GRTC interrupt from compare event on channel 8. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__grtc__hal_1ggad1e632ee175d9af435e2246cd7927822a291fc6e8ab07573bd1d79496a5f1cf05" prot="public">
          <name>NRF_GRTC_INT_COMPARE9_MASK</name>
          <initializer>= GRTC_INTENSET0_COMPARE9_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>GRTC interrupt from compare event on channel 9. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__grtc__hal_1ggad1e632ee175d9af435e2246cd7927822a6c76dfd5b835f2730d4e963bd0200a07" prot="public">
          <name>NRF_GRTC_INT_COMPARE10_MASK</name>
          <initializer>= GRTC_INTENSET0_COMPARE10_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>GRTC interrupt from compare event on channel 10. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__grtc__hal_1ggad1e632ee175d9af435e2246cd7927822a3cbf6c473a0f8d7a64fb755e21a2c7f0" prot="public">
          <name>NRF_GRTC_INT_COMPARE11_MASK</name>
          <initializer>= GRTC_INTENSET0_COMPARE11_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>GRTC interrupt from compare event on channel 11. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__grtc__hal_1ggad1e632ee175d9af435e2246cd7927822a0cbd1a997373bce120647b54737c1252" prot="public">
          <name>NRF_GRTC_INT_RTCOMPARE_MASK</name>
          <initializer>= GRTC_INTENSET0_RTCOMPARE_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>GRTC interrupt from RTCOUNTER compare event. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__grtc__hal_1ggad1e632ee175d9af435e2246cd7927822a0cd9a94953494b1e019ef6aa147228b6" prot="public">
          <name>NRF_GRTC_INT_RTCOMPARESYNC_MASK</name>
          <initializer>= GRTC_INTENSET0_RTCOMPARESYNC_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>GRTC interrupt from RTCOUNTER synchronized compare event. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__grtc__hal_1ggad1e632ee175d9af435e2246cd7927822a3e345bce4b3041e7c6a107a414836416" prot="public">
          <name>NRF_GRTC_INT_SYSCOUNTERVALID_MASK</name>
          <initializer>= GRTC_INTENSET0_SYSCOUNTERVALID_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>GRTC interrupt from SYSCOUNTER valid event. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>GRTC interrupts. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_grtc.h" line="318" column="1" bodyfile="hal/nrf_grtc.h" bodystart="319" bodyend="359"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__grtc__hal_1gacdc216d006ac43c34a154cffdf0ca69a" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_grtc_clkout_t</name>
        <enumvalue id="group__nrf__grtc__hal_1ggacdc216d006ac43c34a154cffdf0ca69aa9cfdf0a20c98491c4d10fb8d4fa71eab" prot="public">
          <name>NRF_GRTC_CLKOUT_32K</name>
          <initializer>= GRTC_CLKOUT_CLKOUT32K_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Enable 32K clock output on pin. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__grtc__hal_1ggacdc216d006ac43c34a154cffdf0ca69aa8c567e4397959b7eb25b9f618d1f0bd8" prot="public">
          <name>NRF_GRTC_CLKOUT_FAST</name>
          <initializer>= GRTC_CLKOUT_CLKOUTFAST_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Enable fast clock output on pin. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Configuration of clock output. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_grtc.h" line="363" column="1" bodyfile="hal/nrf_grtc.h" bodystart="364" bodyend="367"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__grtc__hal_1gae439fae87a8f39984fe088a02960a7ae" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_grtc_clksel_t</name>
        <enumvalue id="group__nrf__grtc__hal_1ggae439fae87a8f39984fe088a02960a7aeaa368a3cd935c774cad02682aea3d98ac" prot="public">
          <name>NRF_GRTC_CLKSEL_LFXO</name>
          <initializer>= GRTC_CLKCFG_CLKSEL_LFXO</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>LFXO oscillator as the clock source. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__grtc__hal_1ggae439fae87a8f39984fe088a02960a7aea0c8fe6bcb92cb8d2f64521082d556676" prot="public">
          <name>NRF_GRTC_CLKSEL_LFCLK</name>
          <initializer>= GRTC_CLKCFG_CLKSEL_SystemLFCLK</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>System LFCLK as the clock source. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Configuration of the GRTC clock source selection. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_grtc.h" line="372" column="1" bodyfile="hal/nrf_grtc.h" bodystart="373" bodyend="376"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__nrf__grtc__hal_1gaafb4da6fab8ddad328e0f8689e1e2ff5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_grtc_sys_counter_cc_set</definition>
        <argsstring>(NRF_GRTC_Type *p_reg, uint8_t cc_channel, uint64_t cc_value)</argsstring>
        <name>nrf_grtc_sys_counter_cc_set</name>
        <param>
          <type>NRF_GRTC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>cc_channel</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>cc_value</declname>
        </param>
        <briefdescription>
<para>Function for setting the compare value of channel for the SYSCOUNTER. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>The corresponding event is automatically disabled by hardware during the operation.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">cc_channel</parametername>
</parameternamelist>
<parameterdescription>
<para>The specified capture/compare channel. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">cc_value</parametername>
</parameternamelist>
<parameterdescription>
<para>Compare value to be set in 1 MHz units. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_grtc.h" line="1014" column="24" bodyfile="hal/nrf_grtc.h" bodystart="1014" bodyend="1029" declfile="hal/nrf_grtc.h" declline="388" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__grtc__hal_1gaa250ccd626fce4e373842b6df5e97096" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint64_t</type>
        <definition>NRF_STATIC_INLINE uint64_t nrf_grtc_sys_counter_cc_get</definition>
        <argsstring>(NRF_GRTC_Type const *p_reg, uint8_t cc_channel)</argsstring>
        <name>nrf_grtc_sys_counter_cc_get</name>
        <param>
          <type>NRF_GRTC_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>cc_channel</declname>
        </param>
        <briefdescription>
<para>Function for getting the capture/compare value of channel for the SYSCOUNTER. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">cc_channel</parametername>
</parameternamelist>
<parameterdescription>
<para>The specified capture/compare channel.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Value from the specified capture/compare register in 1MHz units. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_grtc.h" line="1031" column="28" bodyfile="hal/nrf_grtc.h" bodystart="1031" bodyend="1043" declfile="hal/nrf_grtc.h" declline="400" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__grtc__hal_1gae7bc99a50731a75e6b76e8d058772bb7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_grtc_sys_counter_cc_add_set</definition>
        <argsstring>(NRF_GRTC_Type *p_reg, uint8_t cc_channel, uint32_t value, nrf_grtc_cc_add_reference_t reference)</argsstring>
        <name>nrf_grtc_sys_counter_cc_add_set</name>
        <param>
          <type>NRF_GRTC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>cc_channel</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>value</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__grtc__hal_1ga4e34fb922643e9f448f248b410e2e8e4" kindref="member">nrf_grtc_cc_add_reference_t</ref></type>
          <declname>reference</declname>
        </param>
        <briefdescription>
<para>Function for setting the value to be added to capture/compare register for the SYSCOUNTER. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>There are two available configurations of adding operation: When <computeroutput>reference</computeroutput> value equals <ref refid="group__nrf__grtc__hal_1gga4e34fb922643e9f448f248b410e2e8e4a7d1e9d741d2bd841434da14196c05c34" kindref="member">NRF_GRTC_CC_ADD_REFERENCE_SYSCOUNTER</ref> then the final value of capture/compare register is a sum of SYSCOUNTER current value and <computeroutput>value</computeroutput>. When <computeroutput>reference</computeroutput> value equals <ref refid="group__nrf__grtc__hal_1gga4e34fb922643e9f448f248b410e2e8e4a871b28e84ca812e2bd1a71a12b17354f" kindref="member">NRF_GRTC_CC_ADD_REFERENCE_CC</ref> then the final value of capture/compare register is a sum of current capture/compare value and <computeroutput>value</computeroutput>. If the capture/compare register overflows after this write, then the corresponding event is generated immediately.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">cc_channel</parametername>
</parameternamelist>
<parameterdescription>
<para>The specified capture/compare channel. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to be added in 1 MHz units. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">reference</parametername>
</parameternamelist>
<parameterdescription>
<para>Configuration of adding mode. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_grtc.h" line="1045" column="24" bodyfile="hal/nrf_grtc.h" bodystart="1045" bodyend="1060" declfile="hal/nrf_grtc.h" declline="422" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__grtc__hal_1ga45a090610eefa2264e4f12602b7f9d9b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_grtc_rt_counter_cc_set</definition>
        <argsstring>(NRF_GRTC_Type *p_reg, uint64_t cc_value, bool sync)</argsstring>
        <name>nrf_grtc_rt_counter_cc_set</name>
        <param>
          <type>NRF_GRTC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>cc_value</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>sync</declname>
        </param>
        <briefdescription>
<para>Function for setting a compare value for the RTCOUNTER. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>The internal synchronization mechanism ensures that the desired value will be properly latched by the GRTC. However when <computeroutput>sync</computeroutput> parameter is true then the process of capturing the value lasts up to two 32 kHz cycles. If the <computeroutput>sync</computeroutput> parameter is false then the capturing the value will occur on the following rising edge of 32 kHz clock. In this case it is user&apos;s responsibility to execute the function between the 32 kHz rising edges.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">cc_value</parametername>
</parameternamelist>
<parameterdescription>
<para>Compare value to be set in 32 kHz units. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">sync</parametername>
</parameternamelist>
<parameterdescription>
<para>True if the internal synchronization mechanism shall be used, false otherwise. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_grtc.h" line="1063" column="24" bodyfile="hal/nrf_grtc.h" bodystart="1063" bodyend="1080" declfile="hal/nrf_grtc.h" declline="443" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__grtc__hal_1ga2f5e743ecea72ace3f5fb81816b56d94" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint64_t</type>
        <definition>NRF_STATIC_INLINE uint64_t nrf_grtc_rt_counter_cc_get</definition>
        <argsstring>(NRF_GRTC_Type const *p_reg)</argsstring>
        <name>nrf_grtc_rt_counter_cc_get</name>
        <param>
          <type>NRF_GRTC_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for returning the compare value for the RTCOUNTER. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Value from the capture/compare register in 32 kHz units. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_grtc.h" line="1082" column="28" bodyfile="hal/nrf_grtc.h" bodystart="1082" bodyend="1087" declfile="hal/nrf_grtc.h" declline="454" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__grtc__hal_1gabc8bebf2390d859f55d96ae141499c11" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_grtc_int_enable</definition>
        <argsstring>(NRF_GRTC_Type *p_reg, uint32_t mask)</argsstring>
        <name>nrf_grtc_int_enable</name>
        <param>
          <type>NRF_GRTC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Function for enabling specified interrupts. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of interrupts to be enabled. Use <ref refid="group__nrf__grtc__hal_1gad1e632ee175d9af435e2246cd7927822" kindref="member">nrf_grtc_int_mask_t</ref> values for bit masking. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_grtc.h" line="1090" column="24" bodyfile="hal/nrf_grtc.h" bodystart="1090" bodyend="1093" declfile="hal/nrf_grtc.h" declline="464" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__grtc__hal_1ga8b77b156aaa2a75e9faf07d52119342e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_grtc_int_disable</definition>
        <argsstring>(NRF_GRTC_Type *p_reg, uint32_t mask)</argsstring>
        <name>nrf_grtc_int_disable</name>
        <param>
          <type>NRF_GRTC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Function for disabling specified interrupts. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of interrupts to be disabled. Use <ref refid="group__nrf__grtc__hal_1gad1e632ee175d9af435e2246cd7927822" kindref="member">nrf_grtc_int_mask_t</ref> values for bit masking. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_grtc.h" line="1095" column="24" bodyfile="hal/nrf_grtc.h" bodystart="1095" bodyend="1098" declfile="hal/nrf_grtc.h" declline="473" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__grtc__hal_1gada5181d48f4f1d68d0f768efedf71c5c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_grtc_int_enable_check</definition>
        <argsstring>(NRF_GRTC_Type const *p_reg, uint32_t mask)</argsstring>
        <name>nrf_grtc_int_enable_check</name>
        <param>
          <type>NRF_GRTC_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Function for checking if the specified interrupts are enabled. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of interrupts to be checked. Use <ref refid="group__nrf__grtc__hal_1gad1e632ee175d9af435e2246cd7927822" kindref="member">nrf_grtc_int_mask_t</ref> values for bit masking.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Mask of enabled interrupts. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_grtc.h" line="1100" column="28" bodyfile="hal/nrf_grtc.h" bodystart="1100" bodyend="1103" declfile="hal/nrf_grtc.h" declline="484" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__grtc__hal_1gafd34374e937c50084e2b9969913a591c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_grtc_int_pending_get</definition>
        <argsstring>(NRF_GRTC_Type const *p_reg)</argsstring>
        <name>nrf_grtc_int_pending_get</name>
        <param>
          <type>NRF_GRTC_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for retrieving the state of pending interrupts. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>States of pending interrupt are saved as a bitmask. One set at particular position means that interrupt for event is pending.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Bitmask with information about pending interrupts. Use <ref refid="group__nrf__grtc__hal_1gad1e632ee175d9af435e2246cd7927822" kindref="member">nrf_grtc_int_mask_t</ref> values for bit masking. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_grtc.h" line="1105" column="28" bodyfile="hal/nrf_grtc.h" bodystart="1105" bodyend="1108" declfile="hal/nrf_grtc.h" declline="497" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__grtc__hal_1ga9a1958c032dc53090c3dd059bab22f06" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_grtc_event_enable</definition>
        <argsstring>(NRF_GRTC_Type *p_reg, uint32_t mask)</argsstring>
        <name>nrf_grtc_event_enable</name>
        <param>
          <type>NRF_GRTC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Function for enabling events. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Only specific events can be individually enabled or disabled.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of event flags to be enabled. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_grtc.h" line="1111" column="24" bodyfile="hal/nrf_grtc.h" bodystart="1111" bodyend="1114" declfile="hal/nrf_grtc.h" declline="508" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__grtc__hal_1gae9f734e1d6265aeb32c7ce376e6c58ac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_grtc_event_disable</definition>
        <argsstring>(NRF_GRTC_Type *p_reg, uint32_t mask)</argsstring>
        <name>nrf_grtc_event_disable</name>
        <param>
          <type>NRF_GRTC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Function for disabling events. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Only specific events can be individually enabled or disabled.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of event flags to be disabled. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_grtc.h" line="1116" column="24" bodyfile="hal/nrf_grtc.h" bodystart="1116" bodyend="1119" declfile="hal/nrf_grtc.h" declline="518" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__grtc__hal_1gac5690d49bef4f831062094fc728bda33" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_grtc_shorts_enable</definition>
        <argsstring>(NRF_GRTC_Type *p_reg, uint32_t mask)</argsstring>
        <name>nrf_grtc_shorts_enable</name>
        <param>
          <type>NRF_GRTC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Function for enabling the specified shortcuts. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Bitmask of shortcuts to be enabled. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_grtc.h" line="1123" column="24" bodyfile="hal/nrf_grtc.h" bodystart="1123" bodyend="1126" declfile="hal/nrf_grtc.h" declline="528" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__grtc__hal_1ga03a9d5d7e98462b9c3cdd8bfabacd806" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_grtc_shorts_disable</definition>
        <argsstring>(NRF_GRTC_Type *p_reg, uint32_t mask)</argsstring>
        <name>nrf_grtc_shorts_disable</name>
        <param>
          <type>NRF_GRTC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Function for disabling the specified shortcuts. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Bitmask of shortcuts to be disabled. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_grtc.h" line="1128" column="24" bodyfile="hal/nrf_grtc.h" bodystart="1128" bodyend="1131" declfile="hal/nrf_grtc.h" declline="536" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__grtc__hal_1gaf7747e1873e5594b2d2e4df6394f9ab9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_grtc_shorts_set</definition>
        <argsstring>(NRF_GRTC_Type *p_reg, uint32_t mask)</argsstring>
        <name>nrf_grtc_shorts_set</name>
        <param>
          <type>NRF_GRTC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Function for setting the specified shortcuts. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Bitmask of shortcuts to be set. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_grtc.h" line="1133" column="24" bodyfile="hal/nrf_grtc.h" bodystart="1133" bodyend="1136" declfile="hal/nrf_grtc.h" declline="544" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__grtc__hal_1ga19e3d64a1f7fa2c2e524b63910135ef8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_grtc_subscribe_set</definition>
        <argsstring>(NRF_GRTC_Type *p_reg, nrf_grtc_task_t task, uint8_t channel)</argsstring>
        <name>nrf_grtc_subscribe_set</name>
        <param>
          <type>NRF_GRTC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__grtc__hal_1ga3ead45038f169b586ca21cd6ef8acde9" kindref="member">nrf_grtc_task_t</ref></type>
          <declname>task</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>channel</declname>
        </param>
        <briefdescription>
<para>Function for setting the subscribe configuration for a given GRTC task. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Not every task has its corresponding subscribe register. Refer to the Product Specification for more information.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">task</parametername>
</parameternamelist>
<parameterdescription>
<para>Task for which to set the configuration. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">channel</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel through which to subscribe events. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_grtc.h" line="1139" column="24" bodyfile="hal/nrf_grtc.h" bodystart="1139" bodyend="1151" declfile="hal/nrf_grtc.h" declline="558" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__grtc__hal_1gae8dbd19ec8fb112e7254ffc0a32aba40" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_grtc_subscribe_clear</definition>
        <argsstring>(NRF_GRTC_Type *p_reg, nrf_grtc_task_t task)</argsstring>
        <name>nrf_grtc_subscribe_clear</name>
        <param>
          <type>NRF_GRTC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__grtc__hal_1ga3ead45038f169b586ca21cd6ef8acde9" kindref="member">nrf_grtc_task_t</ref></type>
          <declname>task</declname>
        </param>
        <briefdescription>
<para>Function for clearing the subscribe configuration for a given GRTC task. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Not every task has its corresponding subscribe register. Refer to the Product Specification for more information.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">task</parametername>
</parameternamelist>
<parameterdescription>
<para>Task for which to clear the configuration. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_grtc.h" line="1153" column="24" bodyfile="hal/nrf_grtc.h" bodystart="1153" bodyend="1163" declfile="hal/nrf_grtc.h" declline="572" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__grtc__hal_1ga28ca8bcda6222fc60e172767c67d7469" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_grtc_publish_set</definition>
        <argsstring>(NRF_GRTC_Type *p_reg, nrf_grtc_event_t event, uint8_t channel)</argsstring>
        <name>nrf_grtc_publish_set</name>
        <param>
          <type>NRF_GRTC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__grtc__hal_1ga7ae05a37545fa5a2c94e90d048bb2b65" kindref="member">nrf_grtc_event_t</ref></type>
          <declname>event</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>channel</declname>
        </param>
        <briefdescription>
<para>Function for setting the publish configuration for a given GRTC event. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Not every event has its corresponding publish register. Refer to the Product Specification for more information.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event for which to set the configuration. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">channel</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel through which to publish the event. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_grtc.h" line="1165" column="24" bodyfile="hal/nrf_grtc.h" bodystart="1165" bodyend="1176" declfile="hal/nrf_grtc.h" declline="586" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__grtc__hal_1ga1dde9445416963417a00e2b678de7121" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_grtc_publish_clear</definition>
        <argsstring>(NRF_GRTC_Type *p_reg, nrf_grtc_event_t event)</argsstring>
        <name>nrf_grtc_publish_clear</name>
        <param>
          <type>NRF_GRTC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__grtc__hal_1ga7ae05a37545fa5a2c94e90d048bb2b65" kindref="member">nrf_grtc_event_t</ref></type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>Function for clearing the publish configuration for a given GRTC event. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Not every event has its corresponding publish register. Refer to the Product Specification for more information.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event for which to clear the configuration. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_grtc.h" line="1178" column="24" bodyfile="hal/nrf_grtc.h" bodystart="1178" bodyend="1187" declfile="hal/nrf_grtc.h" declline="600" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__grtc__hal_1ga8c4cf763128d803a8e653669afac8918" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE bool</type>
        <definition>NRF_STATIC_INLINE bool nrf_grtc_event_check</definition>
        <argsstring>(NRF_GRTC_Type const *p_reg, nrf_grtc_event_t event)</argsstring>
        <name>nrf_grtc_event_check</name>
        <param>
          <type>NRF_GRTC_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__grtc__hal_1ga7ae05a37545fa5a2c94e90d048bb2b65" kindref="member">nrf_grtc_event_t</ref></type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>Function for retrieving the state of the GRTC event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event to be checked.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>The event has been generated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>The event has not been generated. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_grtc.h" line="1189" column="24" bodyfile="hal/nrf_grtc.h" bodystart="1189" bodyend="1192" declfile="hal/nrf_grtc.h" declline="612" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__grtc__hal_1gaa9967aaf0b8cf60576ac6625e2a56759" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_grtc_event_clear</definition>
        <argsstring>(NRF_GRTC_Type *p_reg, nrf_grtc_event_t event)</argsstring>
        <name>nrf_grtc_event_clear</name>
        <param>
          <type>NRF_GRTC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__grtc__hal_1ga7ae05a37545fa5a2c94e90d048bb2b65" kindref="member">nrf_grtc_event_t</ref></type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>Function for clearing an event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event to be cleared. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_grtc.h" line="1194" column="24" bodyfile="hal/nrf_grtc.h" bodystart="1194" bodyend="1200" declfile="hal/nrf_grtc.h" declline="620" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__grtc__hal_1gae364666c46ac47cc496a071195194ae0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_grtc_rt_counter_low_get</definition>
        <argsstring>(NRF_GRTC_Type const *p_reg)</argsstring>
        <name>nrf_grtc_rt_counter_low_get</name>
        <param>
          <type>NRF_GRTC_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for returning the lower 32-bits of RTCOUNTER value. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>The whole RTCOUNTER value is latched when <ref refid="group__nrf__grtc__hal_1gae364666c46ac47cc496a071195194ae0" kindref="member">nrf_grtc_rt_counter_low_get</ref> function is executed. Thus <ref refid="group__nrf__grtc__hal_1gae364666c46ac47cc496a071195194ae0" kindref="member">nrf_grtc_rt_counter_low_get</ref> must be executed before calling <ref refid="group__nrf__grtc__hal_1ga2aaf34328a3c13cb8912fa89f51354c8" kindref="member">nrf_grtc_rt_counter_high_get</ref>.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Lower part of RTCOUNTER value. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_grtc.h" line="1203" column="28" bodyfile="hal/nrf_grtc.h" bodystart="1203" bodyend="1206" declfile="hal/nrf_grtc.h" declline="634" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__grtc__hal_1ga2aaf34328a3c13cb8912fa89f51354c8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_grtc_rt_counter_high_get</definition>
        <argsstring>(NRF_GRTC_Type const *p_reg)</argsstring>
        <name>nrf_grtc_rt_counter_high_get</name>
        <param>
          <type>NRF_GRTC_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for returning the higher 32-bits of RTCOUNTER value. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>The whole RTCOUNTER value is latched when <ref refid="group__nrf__grtc__hal_1gae364666c46ac47cc496a071195194ae0" kindref="member">nrf_grtc_rt_counter_low_get</ref> function is executed. Thus <ref refid="group__nrf__grtc__hal_1gae364666c46ac47cc496a071195194ae0" kindref="member">nrf_grtc_rt_counter_low_get</ref> must be executed before calling <ref refid="group__nrf__grtc__hal_1ga2aaf34328a3c13cb8912fa89f51354c8" kindref="member">nrf_grtc_rt_counter_high_get</ref>.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Higher part of RTCOUNTER value. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_grtc.h" line="1208" column="28" bodyfile="hal/nrf_grtc.h" bodystart="1208" bodyend="1211" declfile="hal/nrf_grtc.h" declline="647" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__grtc__hal_1ga0b0c5b513db954011586e86547ed1ce9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_grtc_sys_counter_low_get</definition>
        <argsstring>(NRF_GRTC_Type const *p_reg)</argsstring>
        <name>nrf_grtc_sys_counter_low_get</name>
        <param>
          <type>NRF_GRTC_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for returning the lower 32-bits of SYSCOUNTER value. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para><ref refid="group__nrf__grtc__hal_1ga0b0c5b513db954011586e86547ed1ce9" kindref="member">nrf_grtc_sys_counter_low_get</ref> must be executed before calling <ref refid="group__nrf__grtc__hal_1ga80b9dd38536653a93d61443bc6e0d2a0" kindref="member">nrf_grtc_sys_counter_high_get</ref>. In addition, after this, <ref refid="group__nrf__grtc__hal_1ga9eab767581794e74e4ae08a70ea60c8b" kindref="member">nrf_grtc_sys_counter_overflow_check</ref> should be called. If it retuns true, whole procedure should be repeated.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Lower part of SYSCOUNTER value. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_grtc.h" line="1214" column="28" bodyfile="hal/nrf_grtc.h" bodystart="1214" bodyend="1221" declfile="hal/nrf_grtc.h" declline="662" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__grtc__hal_1ga80b9dd38536653a93d61443bc6e0d2a0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_grtc_sys_counter_high_get</definition>
        <argsstring>(NRF_GRTC_Type const *p_reg)</argsstring>
        <name>nrf_grtc_sys_counter_high_get</name>
        <param>
          <type>NRF_GRTC_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for returning the higher 32-bits of SYSCOUNTER value. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para><ref refid="group__nrf__grtc__hal_1ga0b0c5b513db954011586e86547ed1ce9" kindref="member">nrf_grtc_sys_counter_low_get</ref> must be executed before calling <ref refid="group__nrf__grtc__hal_1ga80b9dd38536653a93d61443bc6e0d2a0" kindref="member">nrf_grtc_sys_counter_high_get</ref>. In addition, after this, <ref refid="group__nrf__grtc__hal_1ga9eab767581794e74e4ae08a70ea60c8b" kindref="member">nrf_grtc_sys_counter_overflow_check</ref> should be called. If it retuns true, whole procedure should be repeated.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Higher part SYSCOUNTER value. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_grtc.h" line="1223" column="28" bodyfile="hal/nrf_grtc.h" bodystart="1223" bodyend="1230" declfile="hal/nrf_grtc.h" declline="676" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__grtc__hal_1gac24bd3d8ecf7ddab6443e854ac0eadb7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint64_t</type>
        <definition>NRF_STATIC_INLINE uint64_t nrf_grtc_sys_counter_get</definition>
        <argsstring>(NRF_GRTC_Type const *p_reg)</argsstring>
        <name>nrf_grtc_sys_counter_get</name>
        <param>
          <type>NRF_GRTC_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for returning the 64-bit SYSCOUNTER value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>SYSCOUNTER value. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_grtc.h" line="1232" column="28" bodyfile="hal/nrf_grtc.h" bodystart="1232" bodyend="1239" declfile="hal/nrf_grtc.h" declline="685" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__grtc__hal_1ga9eab767581794e74e4ae08a70ea60c8b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE bool</type>
        <definition>NRF_STATIC_INLINE bool nrf_grtc_sys_counter_overflow_check</definition>
        <argsstring>(NRF_GRTC_Type const *p_reg)</argsstring>
        <name>nrf_grtc_sys_counter_overflow_check</name>
        <param>
          <type>NRF_GRTC_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for checking whether the lower 32-bits of SYSCOUNTER overflowed after last execution of <ref refid="group__nrf__grtc__hal_1ga0b0c5b513db954011586e86547ed1ce9" kindref="member">nrf_grtc_sys_counter_low_get</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>True</parametername>
</parameternamelist>
<parameterdescription>
<para>if the lower 32-bits of SYSCOUNTER overflowed, false otherwise. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_grtc.h" line="1241" column="24" bodyfile="hal/nrf_grtc.h" bodystart="1241" bodyend="1249" declfile="hal/nrf_grtc.h" declline="695" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__grtc__hal_1ga5c1bce12a2b33339177c00b29bf8e332" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_grtc_sys_counter_active_set</definition>
        <argsstring>(NRF_GRTC_Type *p_reg, bool enable)</argsstring>
        <name>nrf_grtc_sys_counter_active_set</name>
        <param>
          <type>NRF_GRTC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>enable</declname>
        </param>
        <briefdescription>
<para>Function for setting the request to keep the specified SYSCOUNTER channel active. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">enable</parametername>
</parameternamelist>
<parameterdescription>
<para>True if the SYSCOUNTER channel is to be kept active, false otherwise. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_grtc.h" line="1252" column="24" bodyfile="hal/nrf_grtc.h" bodystart="1252" bodyend="1258" declfile="hal/nrf_grtc.h" declline="704" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__grtc__hal_1gaf2aab3b971214da6438ece86ec435146" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE bool</type>
        <definition>NRF_STATIC_INLINE bool nrf_grtc_sys_counter_active_check</definition>
        <argsstring>(NRF_GRTC_Type const *p_reg)</argsstring>
        <name>nrf_grtc_sys_counter_active_check</name>
        <param>
          <type>NRF_GRTC_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for checking whether the specified SYSCOUNTER channel is requested to remain active. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>True</parametername>
</parameternamelist>
<parameterdescription>
<para>if SYSCOUNTER channel is requested to remain active, false otherwise. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_grtc.h" line="1260" column="24" bodyfile="hal/nrf_grtc.h" bodystart="1260" bodyend="1264" declfile="hal/nrf_grtc.h" declline="714" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__grtc__hal_1ga0ef4ff14ec092be3fb37ef38576514f0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_grtc_event_address_get</definition>
        <argsstring>(NRF_GRTC_Type const *p_reg, nrf_grtc_event_t event)</argsstring>
        <name>nrf_grtc_event_address_get</name>
        <param>
          <type>NRF_GRTC_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__grtc__hal_1ga7ae05a37545fa5a2c94e90d048bb2b65" kindref="member">nrf_grtc_event_t</ref></type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>Function for returning the address of an event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>Requested event.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Address of the requested event register. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_grtc.h" line="1267" column="28" bodyfile="hal/nrf_grtc.h" bodystart="1267" bodyend="1271" declfile="hal/nrf_grtc.h" declline="725" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__grtc__hal_1ga60e00f5ace03a5c5b72fa45acda805d2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_grtc_task_address_get</definition>
        <argsstring>(NRF_GRTC_Type const *p_reg, nrf_grtc_task_t task)</argsstring>
        <name>nrf_grtc_task_address_get</name>
        <param>
          <type>NRF_GRTC_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__grtc__hal_1ga3ead45038f169b586ca21cd6ef8acde9" kindref="member">nrf_grtc_task_t</ref></type>
          <declname>task</declname>
        </param>
        <briefdescription>
<para>Function for returning the address of a task. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">task</parametername>
</parameternamelist>
<parameterdescription>
<para>Requested task.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Address of the requested task register. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_grtc.h" line="1273" column="28" bodyfile="hal/nrf_grtc.h" bodystart="1273" bodyend="1277" declfile="hal/nrf_grtc.h" declline="736" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__grtc__hal_1gaa52de35bb6ecb5ebc17c22e2d28a6480" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_grtc_task_trigger</definition>
        <argsstring>(NRF_GRTC_Type *p_reg, nrf_grtc_task_t task)</argsstring>
        <name>nrf_grtc_task_trigger</name>
        <param>
          <type>NRF_GRTC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__grtc__hal_1ga3ead45038f169b586ca21cd6ef8acde9" kindref="member">nrf_grtc_task_t</ref></type>
          <declname>task</declname>
        </param>
        <briefdescription>
<para>Function for starting a task. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">task</parametername>
</parameternamelist>
<parameterdescription>
<para>Requested task. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_grtc.h" line="1279" column="24" bodyfile="hal/nrf_grtc.h" bodystart="1279" bodyend="1282" declfile="hal/nrf_grtc.h" declline="745" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__grtc__hal_1gade023fd81fb28e313e10352daf01d9e3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE <ref refid="group__nrf__grtc__hal_1ga3ead45038f169b586ca21cd6ef8acde9" kindref="member">nrf_grtc_task_t</ref></type>
        <definition>NRF_STATIC_INLINE nrf_grtc_task_t nrf_grtc_sys_counter_capture_task_get</definition>
        <argsstring>(uint8_t cc_channel)</argsstring>
        <name>nrf_grtc_sys_counter_capture_task_get</name>
        <param>
          <type>uint8_t</type>
          <declname>cc_channel</declname>
        </param>
        <briefdescription>
<para>Function for getting the 1 MHz SYSCOUNTER timer capture task associated with the specified channel. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">cc_channel</parametername>
</parameternamelist>
<parameterdescription>
<para>Capture channel.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Capture task. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_grtc.h" line="1284" column="35" bodyfile="hal/nrf_grtc.h" bodystart="1284" bodyend="1287" declfile="hal/nrf_grtc.h" declline="755" declcolumn="35"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__grtc__hal_1ga7d6f2b3291aaebfb0165d2487e3a03fd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_grtc_sys_counter_compare_event_enable</definition>
        <argsstring>(NRF_GRTC_Type *p_reg, uint8_t cc_channel)</argsstring>
        <name>nrf_grtc_sys_counter_compare_event_enable</name>
        <param>
          <type>NRF_GRTC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>cc_channel</declname>
        </param>
        <briefdescription>
<para>Function for enabling SYSCOUNTER compare event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">cc_channel</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel number of compare event to be enabled. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_grtc.h" line="1289" column="24" bodyfile="hal/nrf_grtc.h" bodystart="1289" bodyend="1300" declfile="hal/nrf_grtc.h" declline="763" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__grtc__hal_1gae04c6f373955979278eb18060ff3a4a8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_grtc_sys_counter_compare_event_disable</definition>
        <argsstring>(NRF_GRTC_Type *p_reg, uint8_t cc_channel)</argsstring>
        <name>nrf_grtc_sys_counter_compare_event_disable</name>
        <param>
          <type>NRF_GRTC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>cc_channel</declname>
        </param>
        <briefdescription>
<para>Function for disabling SYSCOUNTER compare event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">cc_channel</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel number of compare event to be disabled. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_grtc.h" line="1302" column="24" bodyfile="hal/nrf_grtc.h" bodystart="1302" bodyend="1312" declfile="hal/nrf_grtc.h" declline="772" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__grtc__hal_1ga32ea992e597b134f4b3d41a8c62f5879" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE <ref refid="group__nrf__grtc__hal_1ga7ae05a37545fa5a2c94e90d048bb2b65" kindref="member">nrf_grtc_event_t</ref></type>
        <definition>NRF_STATIC_INLINE nrf_grtc_event_t nrf_grtc_sys_counter_compare_event_get</definition>
        <argsstring>(uint8_t cc_channel)</argsstring>
        <name>nrf_grtc_sys_counter_compare_event_get</name>
        <param>
          <type>uint8_t</type>
          <declname>cc_channel</declname>
        </param>
        <briefdescription>
<para>Function for getting the SYSCOUNTER compare event associated with the specified compare cc_channel. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">cc_channel</parametername>
</parameternamelist>
<parameterdescription>
<para>Compare channel number.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Requested compare event. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_grtc.h" line="1314" column="36" bodyfile="hal/nrf_grtc.h" bodystart="1314" bodyend="1317" declfile="hal/nrf_grtc.h" declline="783" declcolumn="36"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__grtc__hal_1ga7faf1283a0d67f2428ad6d8d6d03f53e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE bool</type>
        <definition>NRF_STATIC_INLINE bool nrf_grtc_sys_counter_cc_enable_check</definition>
        <argsstring>(NRF_GRTC_Type const *p_reg, uint8_t cc_channel)</argsstring>
        <name>nrf_grtc_sys_counter_cc_enable_check</name>
        <param>
          <type>NRF_GRTC_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>cc_channel</declname>
        </param>
        <briefdescription>
<para>Function for checking whether the specified capture/compare channel is enabled. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">cc_channel</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel to be checked.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>Specified channel is enabled. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>Specified channel is disabled. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_grtc.h" line="1319" column="24" bodyfile="hal/nrf_grtc.h" bodystart="1319" bodyend="1324" declfile="hal/nrf_grtc.h" declline="794" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__grtc__hal_1ga86af4577d105dafbdae927ed086b8b2f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_grtc_sys_counter_set</definition>
        <argsstring>(NRF_GRTC_Type *p_reg, bool enable)</argsstring>
        <name>nrf_grtc_sys_counter_set</name>
        <param>
          <type>NRF_GRTC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>enable</declname>
        </param>
        <briefdescription>
<para>Function for setting the SYSCOUNTER. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>When the SYSCOUNTER is disabled the GRTC uses RTCOUNTER by default.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">enable</parametername>
</parameternamelist>
<parameterdescription>
<para>True if SYSCOUNTER is to be enabled, false otherwise. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_grtc.h" line="1327" column="24" bodyfile="hal/nrf_grtc.h" bodystart="1327" bodyend="1332" declfile="hal/nrf_grtc.h" declline="806" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__grtc__hal_1gaafb45e5bee0a2344906f9a02f4d59a71" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_grtc_sys_counter_auto_mode_set</definition>
        <argsstring>(NRF_GRTC_Type *p_reg, bool enable)</argsstring>
        <name>nrf_grtc_sys_counter_auto_mode_set</name>
        <param>
          <type>NRF_GRTC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>enable</declname>
        </param>
        <briefdescription>
<para>Function for setting automatic mode for the SYSCOUNTER. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>When <computeroutput>enable</computeroutput> is false then the SYSCOUNTER remains active when KEEPRUNNING is set, or any task register, INT register or SYSCOUNTER register is being accessed. When <computeroutput>enable</computeroutput> is true then in addition the SYSCOUNTER remains active when any local CPU that is not sleeping keeps the SYSCOUNTER active.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">enable</parametername>
</parameternamelist>
<parameterdescription>
<para>True if the automatic mode is to be enabled, false otherwise. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_grtc.h" line="1334" column="24" bodyfile="hal/nrf_grtc.h" bodystart="1334" bodyend="1339" declfile="hal/nrf_grtc.h" declline="819" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__grtc__hal_1ga9dab8e70b7c645b97fc70833003f4dda" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE bool</type>
        <definition>NRF_STATIC_INLINE bool nrf_grtc_sys_counter_auto_mode_check</definition>
        <argsstring>(NRF_GRTC_Type *p_reg)</argsstring>
        <name>nrf_grtc_sys_counter_auto_mode_check</name>
        <param>
          <type>NRF_GRTC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for checking whether the SYSCOUNTER has automatic mode enabled. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True Automatic mode is enabled. </para>
</simplesect>
<simplesect kind="return"><para>False Automatic mode is disabled. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_grtc.h" line="1341" column="24" bodyfile="hal/nrf_grtc.h" bodystart="1341" bodyend="1344" declfile="hal/nrf_grtc.h" declline="829" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__grtc__hal_1ga3289a3d075afcbc7b8562a8c5a48adae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE bool</type>
        <definition>NRF_STATIC_INLINE bool nrf_grtc_sys_counter_check</definition>
        <argsstring>(NRF_GRTC_Type const *p_reg)</argsstring>
        <name>nrf_grtc_sys_counter_check</name>
        <param>
          <type>NRF_GRTC_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for checking whether the SYSCOUNTER is in active state. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>True</parametername>
</parameternamelist>
<parameterdescription>
<para>if the SYSCOUNTER is active, false otherwise. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_grtc.h" line="1348" column="24" bodyfile="hal/nrf_grtc.h" bodystart="1348" bodyend="1351" declfile="hal/nrf_grtc.h" declline="839" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__grtc__hal_1gac0d0dba9e8fbfd84eef88aad1d048b86" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_grtc_sys_counter_active_state_request_set</definition>
        <argsstring>(NRF_GRTC_Type *p_reg, bool enable)</argsstring>
        <name>nrf_grtc_sys_counter_active_state_request_set</name>
        <param>
          <type>NRF_GRTC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>enable</declname>
        </param>
        <briefdescription>
<para>Function for setting the request to keep the SYSCOUNTER active. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This function modifies the KEEPRUNNING register, which possesses information whether any local CPU needs keeping the SYSCOUNTER active.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">enable</parametername>
</parameternamelist>
<parameterdescription>
<para>True if the automatic mode is to be enabled, false otherwise. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_grtc.h" line="1353" column="24" bodyfile="hal/nrf_grtc.h" bodystart="1353" bodyend="1367" declfile="hal/nrf_grtc.h" declline="850" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__grtc__hal_1gaa1f8757bb0c09e0bf86e0cdefa9af124" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE bool</type>
        <definition>NRF_STATIC_INLINE bool nrf_grtc_sys_counter_active_state_request_check</definition>
        <argsstring>(NRF_GRTC_Type const *p_reg)</argsstring>
        <name>nrf_grtc_sys_counter_active_state_request_check</name>
        <param>
          <type>NRF_GRTC_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for checking whether the SYSCOUNTER is requested to remain active. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>True</parametername>
</parameternamelist>
<parameterdescription>
<para>if request for keeping the SYSCOUNTER is active, false otherwise. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_grtc.h" line="1370" column="6" bodyfile="hal/nrf_grtc.h" bodystart="1370" bodyend="1379" declfile="hal/nrf_grtc.h" declline="861" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__grtc__hal_1ga26a1b100c80264f41628f7578e330d9f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_grtc_sys_counter_active_state_request_get</definition>
        <argsstring>(NRF_GRTC_Type const *p_reg, uint32_t mask)</argsstring>
        <name>nrf_grtc_sys_counter_active_state_request_get</name>
        <param>
          <type>NRF_GRTC_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Function for getting the domains that requested the SYSCOUNTER to remain active. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Domains mask.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>Bitmask</parametername>
</parameternamelist>
<parameterdescription>
<para>of domains that keep the SYSCOUNTER active. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_grtc.h" line="1382" column="10" bodyfile="hal/nrf_grtc.h" bodystart="1382" bodyend="1386" declfile="hal/nrf_grtc.h" declline="872" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__grtc__hal_1ga467b68e18e9c2cfc248baf75b587810f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_grtc_sys_counter_interval_set</definition>
        <argsstring>(NRF_GRTC_Type *p_reg, uint32_t value)</argsstring>
        <name>nrf_grtc_sys_counter_interval_set</name>
        <param>
          <type>NRF_GRTC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Function for setting the periodic compare event for capture/compare channel 0. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>Period value in 1 MHz units. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_grtc.h" line="1389" column="24" bodyfile="hal/nrf_grtc.h" bodystart="1389" bodyend="1392" declfile="hal/nrf_grtc.h" declline="881" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__grtc__hal_1ga2d1cad3bd0f794e0c8b5c9d5be80e813" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_grtc_sys_counter_interval_get</definition>
        <argsstring>(NRF_GRTC_Type const *p_reg)</argsstring>
        <name>nrf_grtc_sys_counter_interval_get</name>
        <param>
          <type>NRF_GRTC_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting the value of interval for periodic capture/compare event for channel 0. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>Value</parametername>
</parameternamelist>
<parameterdescription>
<para>of the interval in 1 MHz units. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_grtc.h" line="1394" column="28" bodyfile="hal/nrf_grtc.h" bodystart="1394" bodyend="1397" declfile="hal/nrf_grtc.h" declline="891" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__grtc__hal_1ga8b3480c8301f0beb550f8cf8247a3452" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_grtc_timeout_set</definition>
        <argsstring>(NRF_GRTC_Type *p_reg, uint32_t value)</argsstring>
        <name>nrf_grtc_timeout_set</name>
        <param>
          <type>NRF_GRTC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Function for setting the timeout value for GRTC. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Timeout between all CPUs going to sleep and stopping the SYSCOUNTER.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>Timeout value in 32 kHz units. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_grtc.h" line="1399" column="24" bodyfile="hal/nrf_grtc.h" bodystart="1399" bodyend="1403" declfile="hal/nrf_grtc.h" declline="901" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__grtc__hal_1gae1ce6ee813308fce0a2901fb55459678" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_grtc_timeout_get</definition>
        <argsstring>(NRF_GRTC_Type const *p_reg)</argsstring>
        <name>nrf_grtc_timeout_get</name>
        <param>
          <type>NRF_GRTC_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting the value of the timeout value for GRTC. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>Value</parametername>
</parameternamelist>
<parameterdescription>
<para>of the timeout in 32 kHz units. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_grtc.h" line="1405" column="28" bodyfile="hal/nrf_grtc.h" bodystart="1405" bodyend="1408" declfile="hal/nrf_grtc.h" declline="910" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__grtc__hal_1gabf6543ddb24a2c79a2ef1ab8aeb335f1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_grtc_waketime_set</definition>
        <argsstring>(NRF_GRTC_Type *p_reg, uint32_t value)</argsstring>
        <name>nrf_grtc_waketime_set</name>
        <param>
          <type>NRF_GRTC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Function for setting the wake time value for GRTC. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>The wake time is maximum number of 32 kHz cycles takes to restore the APB registers when waking from sleep state.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>Wake time value in 32 kHz units. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_grtc.h" line="1410" column="24" bodyfile="hal/nrf_grtc.h" bodystart="1410" bodyend="1414" declfile="hal/nrf_grtc.h" declline="921" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__grtc__hal_1ga19246ff59e790e2a5d11219c8ad60c8d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_grtc_waketime_get</definition>
        <argsstring>(NRF_GRTC_Type const *p_reg)</argsstring>
        <name>nrf_grtc_waketime_get</name>
        <param>
          <type>NRF_GRTC_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting the wake time value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>Value</parametername>
</parameternamelist>
<parameterdescription>
<para>of wake time in 32 kHz units. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_grtc.h" line="1416" column="28" bodyfile="hal/nrf_grtc.h" bodystart="1416" bodyend="1419" declfile="hal/nrf_grtc.h" declline="930" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__grtc__hal_1ga421c91decb698f3e46897b94ad9ab4c9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_grtc_pwm_compare_set</definition>
        <argsstring>(NRF_GRTC_Type *p_reg, uint32_t value)</argsstring>
        <name>nrf_grtc_pwm_compare_set</name>
        <param>
          <type>NRF_GRTC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Function for setting the PWM compare value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>PWM compare value. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_grtc.h" line="1423" column="24" bodyfile="hal/nrf_grtc.h" bodystart="1423" bodyend="1426" declfile="hal/nrf_grtc.h" declline="940" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__grtc__hal_1gae208d47c196fd01485ff5916d0c7a882" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_grtc_pwm_compare_get</definition>
        <argsstring>(NRF_GRTC_Type const *p_reg)</argsstring>
        <name>nrf_grtc_pwm_compare_get</name>
        <param>
          <type>NRF_GRTC_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting the PWM compare value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>Value</parametername>
</parameternamelist>
<parameterdescription>
<para>of PWM compare. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_grtc.h" line="1428" column="28" bodyfile="hal/nrf_grtc.h" bodystart="1428" bodyend="1431" declfile="hal/nrf_grtc.h" declline="949" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__grtc__hal_1gaecaf461188701a90c6be463db4298f9e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_grtc_clkout_set</definition>
        <argsstring>(NRF_GRTC_Type *p_reg, nrf_grtc_clkout_t clkout, bool enable)</argsstring>
        <name>nrf_grtc_clkout_set</name>
        <param>
          <type>NRF_GRTC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__grtc__hal_1gacdc216d006ac43c34a154cffdf0ca69a" kindref="member">nrf_grtc_clkout_t</ref></type>
          <declname>clkout</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>enable</declname>
        </param>
        <briefdescription>
<para>Function for setting the specified clock source to be connected to output pin. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">clkout</parametername>
</parameternamelist>
<parameterdescription>
<para>Selected clkout source. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">enable</parametername>
</parameternamelist>
<parameterdescription>
<para>True if the clkout source is to be enabled, false otherwise. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_grtc.h" line="1435" column="24" bodyfile="hal/nrf_grtc.h" bodystart="1435" bodyend="1447" declfile="hal/nrf_grtc.h" declline="960" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__grtc__hal_1ga03419f816fcd0f2380d0b9e45d44e55c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE bool</type>
        <definition>NRF_STATIC_INLINE bool nrf_grtc_clkout_enable_check</definition>
        <argsstring>(NRF_GRTC_Type const *p_reg, nrf_grtc_clkout_t clkout)</argsstring>
        <name>nrf_grtc_clkout_enable_check</name>
        <param>
          <type>NRF_GRTC_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__grtc__hal_1gacdc216d006ac43c34a154cffdf0ca69a" kindref="member">nrf_grtc_clkout_t</ref></type>
          <declname>clkout</declname>
        </param>
        <briefdescription>
<para>Function for checking whether clock source is connected to clkout pin. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">clkout</parametername>
</parameternamelist>
<parameterdescription>
<para>Selected clkout source.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>True</parametername>
</parameternamelist>
<parameterdescription>
<para>if the clkout source is enabled, false otherwise. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_grtc.h" line="1449" column="24" bodyfile="hal/nrf_grtc.h" bodystart="1449" bodyend="1453" declfile="hal/nrf_grtc.h" declline="972" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__grtc__hal_1ga6aed79f13e1b69ba1a6d9167d2b876d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_grtc_clkout_divider_set</definition>
        <argsstring>(NRF_GRTC_Type *p_reg, uint32_t value)</argsstring>
        <name>nrf_grtc_clkout_divider_set</name>
        <param>
          <type>NRF_GRTC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Function for setting the fast clock divisor value of clock output. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>Fast clock divisor value. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_grtc.h" line="1455" column="24" bodyfile="hal/nrf_grtc.h" bodystart="1455" bodyend="1460" declfile="hal/nrf_grtc.h" declline="981" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__grtc__hal_1ga3371a887f116e28c9476de431d1145b3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_grtc_clkout_divider_get</definition>
        <argsstring>(NRF_GRTC_Type const *p_reg)</argsstring>
        <name>nrf_grtc_clkout_divider_get</name>
        <param>
          <type>NRF_GRTC_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting the fast clock divisor value of clock output. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>Fast</parametername>
</parameternamelist>
<parameterdescription>
<para>clock divisor value. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_grtc.h" line="1462" column="28" bodyfile="hal/nrf_grtc.h" bodystart="1462" bodyend="1465" declfile="hal/nrf_grtc.h" declline="990" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__grtc__hal_1ga8210f5a14a3afcadf3c40435dcf0fed0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_grtc_clksel_set</definition>
        <argsstring>(NRF_GRTC_Type *p_reg, nrf_grtc_clksel_t clksel)</argsstring>
        <name>nrf_grtc_clksel_set</name>
        <param>
          <type>NRF_GRTC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__grtc__hal_1gae439fae87a8f39984fe088a02960a7ae" kindref="member">nrf_grtc_clksel_t</ref></type>
          <declname>clksel</declname>
        </param>
        <briefdescription>
<para>Function for setting the clock source for the GRTC low-frequency clock. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">clksel</parametername>
</parameternamelist>
<parameterdescription>
<para>Selected clock source. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_grtc.h" line="1469" column="24" bodyfile="hal/nrf_grtc.h" bodystart="1469" bodyend="1473" declfile="hal/nrf_grtc.h" declline="1000" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__grtc__hal_1ga3fc756bda45d4b3626a953c47540b635" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE <ref refid="group__nrf__grtc__hal_1gae439fae87a8f39984fe088a02960a7ae" kindref="member">nrf_grtc_clksel_t</ref></type>
        <definition>NRF_STATIC_INLINE nrf_grtc_clksel_t nrf_grtc_clksel_get</definition>
        <argsstring>(NRF_GRTC_Type const *p_reg)</argsstring>
        <name>nrf_grtc_clksel_get</name>
        <param>
          <type>NRF_GRTC_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting the clock source of the GRTC low-frequency clock. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Clock source configuration. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_grtc.h" line="1475" column="37" bodyfile="hal/nrf_grtc.h" bodystart="1475" bodyend="1478" declfile="hal/nrf_grtc.h" declline="1009" declcolumn="37"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__nrf__grtc__hal_1ga0841097c36e66c0e92af4bb18e55306e" prot="public" static="no">
        <name>NRF_GRTC_HAS_PWM</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Symbol indicating whether GRTC has PWM registers. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_grtc.h" line="75" column="9" bodyfile="hal/nrf_grtc.h" bodystart="75" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__grtc__hal_1gab7b25f5a9aa326b09338a81444a606d7" prot="public" static="no">
        <name>NRF_GRTC_HAS_CLKOUT</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Symbol indicating whether GRTC has clock output registers. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_grtc.h" line="82" column="9" bodyfile="hal/nrf_grtc.h" bodystart="82" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__grtc__hal_1ga8efa4c87940880528af108038b17afc9" prot="public" static="no">
        <name>NRF_GRTC_HAS_CLKSEL</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Symbol indicating whether GRTC has clock source selection. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_grtc.h" line="89" column="9" bodyfile="hal/nrf_grtc.h" bodystart="89" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__grtc__hal_1gac4c995b5f8c088c4111b7df4eddea77c" prot="public" static="no">
        <name>NRF_GRTC_HAS_SYSCOUNTER_ARRAY</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Symbol indicating whether GRTC has multiple SYSCOUNTER registers. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_grtc.h" line="96" column="9" bodyfile="hal/nrf_grtc.h" bodystart="96" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__grtc__hal_1ga3b85ea347cb98f30e0c68ee41c4ae042" prot="public" static="no">
        <name>NRF_GRTC_HAS_RTCOUNTER</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Symbol indicating whether GRTC has RTCOUNTER. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_grtc.h" line="103" column="9" bodyfile="hal/nrf_grtc.h" bodystart="103" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__grtc__hal_1ga61929b54151e67375d10be7abf7e1d12" prot="public" static="no">
        <name>NRF_GRTC_HAS_EXTENDED</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Symbol indicating whether GRTC has extended functionality. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_grtc.h" line="111" column="9" bodyfile="hal/nrf_grtc.h" bodystart="111" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__grtc__hal_1ga71240f9b3bad3f5ca00b1c478e0d3031" prot="public" static="no">
        <name>NRF_GRTC_DOMAIN_INDEX</name>
        <initializer>GRTC_IRQ_GROUP</initializer>
        <briefdescription>
<para>Symbol indicating actual domain index. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_grtc.h" line="118" column="9" bodyfile="hal/nrf_grtc.h" bodystart="118" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__grtc__hal_1ga2120f43b9a34776148fd46b062701fd2" prot="public" static="no">
        <name>GRTC_SYSCOUNTER</name>
        <initializer>SYSCOUNTER[<ref refid="group__nrf__grtc__hal_1ga71240f9b3bad3f5ca00b1c478e0d3031" kindref="member">NRF_GRTC_DOMAIN_INDEX</ref>]</initializer>
        <briefdescription>
<para>Symbol indicating actual SYSCOUNTER index. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_grtc.h" line="122" column="13" bodyfile="hal/nrf_grtc.h" bodystart="122" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__grtc__hal_1gaa31e9680edd85057405df62072a8d640" prot="public" static="no">
        <name>GRTC_INTEN</name>
        <initializer><ref refid="group__nrfx__common_1ga9fced903f4d0fc450e63d40426050236" kindref="member">NRFX_CONCAT_2</ref>(INTEN, GRTC_IRQ_GROUP)</initializer>
        <briefdescription>
<para>Interrupts INTEN register definition. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_grtc.h" line="126" column="9" bodyfile="hal/nrf_grtc.h" bodystart="126" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__grtc__hal_1gad5d619ef8c1424d3237f25342bb79544" prot="public" static="no">
        <name>GRTC_INTENSET</name>
        <initializer><ref refid="group__nrfx__common_1ga9fced903f4d0fc450e63d40426050236" kindref="member">NRFX_CONCAT_2</ref>(INTENSET, GRTC_IRQ_GROUP)</initializer>
        <briefdescription>
<para>Interrupts INTENSET register definition. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_grtc.h" line="128" column="9" bodyfile="hal/nrf_grtc.h" bodystart="128" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__grtc__hal_1gab53c1f367ee365a9b4f8f33d91febe03" prot="public" static="no">
        <name>GRTC_INTENCLR</name>
        <initializer><ref refid="group__nrfx__common_1ga9fced903f4d0fc450e63d40426050236" kindref="member">NRFX_CONCAT_2</ref>(INTENCLR, GRTC_IRQ_GROUP)</initializer>
        <briefdescription>
<para>Interrupts INTENCLR register definition. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_grtc.h" line="130" column="9" bodyfile="hal/nrf_grtc.h" bodystart="130" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__grtc__hal_1gaf0ad8b000c23d07a8c9ef44e4d2f62e9" prot="public" static="no">
        <name>GRTC_INTPEND</name>
        <initializer><ref refid="group__nrfx__common_1ga9fced903f4d0fc450e63d40426050236" kindref="member">NRFX_CONCAT_2</ref>(INTPEND, GRTC_IRQ_GROUP)</initializer>
        <briefdescription>
<para>Interrupts INTPEND register definition. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_grtc.h" line="132" column="9" bodyfile="hal/nrf_grtc.h" bodystart="132" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__grtc__hal_1gaa11e308058c2e3e9b355c829a5e1e681" prot="public" static="no">
        <name>NRF_GRTC_SYSCOUNTER_MAIN_FREQUENCY_HZ</name>
        <initializer>1000000UL</initializer>
        <briefdescription>
<para>Main SYSCOUNTER frequency in Hz. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_grtc.h" line="135" column="9" bodyfile="hal/nrf_grtc.h" bodystart="135" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__grtc__hal_1gac03efae4e8b2495c871b4d341e5dc91f" prot="public" static="no">
        <name>NRF_GRTC_SYSCOUNTER_CC_COUNT</name>
        <initializer>GRTC_CC_MaxCount</initializer>
        <briefdescription>
<para>Number of capture/compare channels for SYSCOUNTER. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_grtc.h" line="138" column="9" bodyfile="hal/nrf_grtc.h" bodystart="138" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__grtc__hal_1gaff76541ce29eb096698b926b88142805" prot="public" static="no">
        <name>NRF_GRTC_SYSCOUNTER_CCH_MASK</name>
        <initializer>GRTC_CC_CCH_CCH_Msk</initializer>
        <briefdescription>
<para>Bitmask of the higher 32-bits of capture/compare register for the SYSCOUNTER. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_grtc.h" line="141" column="9" bodyfile="hal/nrf_grtc.h" bodystart="141" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__grtc__hal_1ga193b8ed0f28ed7d64ea6bfa95ecd3a07" prot="public" static="no">
        <name>NRF_GRTC_SYSCOUNTER_CCADD_MASK</name>
        <initializer>GRTC_CC_CCADD_VALUE_Msk</initializer>
        <briefdescription>
<para>Bitmask of CCADD register for the SYSCOUNTER. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_grtc.h" line="144" column="9" bodyfile="hal/nrf_grtc.h" bodystart="144" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__grtc__hal_1gadb96a954038b1c035ecc220af8ac4c2f" prot="public" static="no">
        <name>NRF_GRTC_SYSCOUNTERL_VALUE_MASK</name>
        <initializer>GRTC_SYSCOUNTERL_VALUE_Msk</initializer>
        <briefdescription>
<para>Bitmask of the lower part of the SYSCOUNTER value. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_grtc.h" line="148" column="9" bodyfile="hal/nrf_grtc.h" bodystart="148" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__grtc__hal_1gad960259cb7ad785d8a214cc37288e85a" prot="public" static="no">
        <name>NRF_GRTC_SYSCOUNTERH_VALUE_MASK</name>
        <initializer>GRTC_SYSCOUNTERH_VALUE_Msk</initializer>
        <briefdescription>
<para>Bitmask of the higher part of the SYSCOUNTER value. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_grtc.h" line="155" column="9" bodyfile="hal/nrf_grtc.h" bodystart="155" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__grtc__hal_1gaff3a8f28baecd4ce22bb39970414f632" prot="public" static="no">
        <name>NRF_GRTC_RTCOUNTER_CCH_MASK</name>
        <initializer>GRTC_RTCOMPAREH_VALUE_Msk</initializer>
        <briefdescription>
<para>Bitmask of the higher 32-bits of capture/compare register for the RTCOUNTER. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_grtc.h" line="161" column="9" bodyfile="hal/nrf_grtc.h" bodystart="161" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__grtc__hal_1gad1d60809dd90a494641564b20c4a10e0" prot="public" static="no">
        <name>NRF_GRTC_SYSCOUNTERH_OVERFLOW_MASK</name>
        <initializer>GRTC_SYSCOUNTERH_OVERFLOW_Msk</initializer>
        <briefdescription>
<para>Bitmask of the OVERFLOW bit. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_grtc.h" line="165" column="9" bodyfile="hal/nrf_grtc.h" bodystart="165" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__grtc__hal_1ga03475a3749a02e9c20b83a611e3f3a10" prot="public" static="no">
        <name>NRF_GRTC_SYSCOUNTERH_BUSY_MASK</name>
        <initializer>GRTC_SYSCOUNTERH_BUSY_Msk</initializer>
        <briefdescription>
<para>Bitmask of the BUSY bit. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_grtc.h" line="172" column="9" bodyfile="hal/nrf_grtc.h" bodystart="172" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__grtc__hal_1ga083eb0824e3b84717948e630bfa13620" prot="public" static="no">
        <name>NRF_GRTC_TIMEOUT_MAX_VALUE</name>
        <initializer>(GRTC_TIMEOUT_VALUE_Msk &gt;&gt; GRTC_TIMEOUT_VALUE_Pos)</initializer>
        <briefdescription>
<para>Maximum value of TIMEOUT register content. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_grtc.h" line="178" column="9" bodyfile="hal/nrf_grtc.h" bodystart="178" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__grtc__hal_1gad6bba458b2062f2579d0ba8870987f35" prot="public" static="no">
        <name>NRF_GRTC_WAKETIME_MAX_VALUE</name>
        <initializer>(GRTC_WAKETIME_VALUE_Msk &gt;&gt; GRTC_WAKETIME_VALUE_Pos)</initializer>
        <briefdescription>
<para>Maximum value of WAKETIME register content. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_grtc.h" line="181" column="9" bodyfile="hal/nrf_grtc.h" bodystart="181" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__grtc__hal_1ga10c0a45ec2f9543c7c13bdac2b65ee15" prot="public" static="no">
        <name>NRF_GRTC_CLKCFG_CLKFASTDIV_MAX_VALUE</name>
        <initializer>GRTC_CLKCFG_CLKFASTDIV_Max</initializer>
        <briefdescription>
<para>Maximum value of CLKFASTDIV register content. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_grtc.h" line="184" column="9" bodyfile="hal/nrf_grtc.h" bodystart="184" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__grtc__hal_1gad62af60c5fa70bd36771ee843411f09e" prot="public" static="no">
        <name>NRF_GRTC_CHANNEL_INT_MASK</name>
        <param><defname>ch</defname></param>
        <initializer>((uint32_t)(<ref refid="group__nrf__grtc__hal_1ggad1e632ee175d9af435e2246cd7927822a695bd0df2fa8ffbd8353f78b536011e2" kindref="member">NRF_GRTC_INT_COMPARE0_MASK</ref>) &lt;&lt; (ch))</initializer>
        <briefdescription>
<para>Macro for creating the interrupt bitmask for the specified compare channel. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_grtc.h" line="187" column="9" bodyfile="hal/nrf_grtc.h" bodystart="187" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__grtc__hal_1ga2b51af58a7b22a002b5fb11ba9fc1147" prot="public" static="no">
        <name>NRF_GRTC_MAIN_CC_CHANNEL</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Main channel that can be used only by the owner of GRTC. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_grtc.h" line="197" column="10" bodyfile="hal/nrf_grtc.h" bodystart="197" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__grtc__hal_1ga779ea44eefe93b1659368937c6d92b9d" prot="public" static="no">
        <name>NRF_GRTC_INTEN_MASK</name>
        <initializer><ref refid="group__nrfx__common_1ga5297a05d3568750308e0f3e33074235c" kindref="member">NRFX_BIT_MASK</ref>(GRTC_CC_MaxCount)</initializer>
        <briefdescription>
<para>Bitmask of interrupt enable. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_grtc.h" line="201" column="9" bodyfile="hal/nrf_grtc.h" bodystart="201" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__grtc__hal_1gadeccbbfcabae01bb49072784d90df213" prot="public" static="no">
        <name>NRF_GRTC_SYSCOUNTER_ALL_CHANNELS_INT_MASK</name>
        <initializer>    ((uint32_t)(((1 &lt;&lt; <ref refid="group__nrf__grtc__hal_1gac03efae4e8b2495c871b4d341e5dc91f" kindref="member">NRF_GRTC_SYSCOUNTER_CC_COUNT</ref>) - 1) &lt;&lt; GRTC_INTEN0_COMPARE0_Pos))</initializer>
        <briefdescription>
<para>Mask for all channels represented by CC channels. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_grtc.h" line="204" column="9" bodyfile="hal/nrf_grtc.h" bodystart="204" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Hardware access layer for managing the Global Real Time Counter (GRTC) peripheral. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
