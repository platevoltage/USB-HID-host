<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="group__nrf__saadc__hal" kind="group">
    <compoundname>nrf_saadc_hal</compoundname>
    <title>SAADC HAL</title>
    <innerclass refid="structnrf__saadc__config__t" prot="public">nrf_saadc_config_t</innerclass>
    <innerclass refid="structnrf__saadc__channel__config__t" prot="public">nrf_saadc_channel_config_t</innerclass>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="group__nrf__saadc__hal_1gaeb0690ef4bdb8ec1cfac1f6c6a496630" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_saadc_resolution_t</name>
        <enumvalue id="group__nrf__saadc__hal_1ggaeb0690ef4bdb8ec1cfac1f6c6a496630a9c906fc4ba0c92e8cd641f2b361e0dca" prot="public">
          <name>NRF_SAADC_RESOLUTION_8BIT</name>
          <initializer>= SAADC_RESOLUTION_VAL_8bit</initializer>
          <briefdescription>
<para>8 bit resolution. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__saadc__hal_1ggaeb0690ef4bdb8ec1cfac1f6c6a496630a0b1d34632f8e3ef1cf2d4f18a23bd667" prot="public">
          <name>NRF_SAADC_RESOLUTION_10BIT</name>
          <initializer>= SAADC_RESOLUTION_VAL_10bit</initializer>
          <briefdescription>
<para>10 bit resolution. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__saadc__hal_1ggaeb0690ef4bdb8ec1cfac1f6c6a496630a07b412d0ffcffd71026ceb4effbdb31e" prot="public">
          <name>NRF_SAADC_RESOLUTION_12BIT</name>
          <initializer>= SAADC_RESOLUTION_VAL_12bit</initializer>
          <briefdescription>
<para>12 bit resolution. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__saadc__hal_1ggaeb0690ef4bdb8ec1cfac1f6c6a496630a3b01ada0cfa0aba5a95b5b222169756b" prot="public">
          <name>NRF_SAADC_RESOLUTION_14BIT</name>
          <initializer>= SAADC_RESOLUTION_VAL_14bit</initializer>
          <briefdescription>
<para>14 bit resolution. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Resolution of the analog-to-digital converter. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_saadc.h" line="133" column="1" bodyfile="hal/nrf_saadc.h" bodystart="134" bodyend="139"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__saadc__hal_1ga62ca4cd30bcc0c4a306135c957f7ed39" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_saadc_oversample_t</name>
        <enumvalue id="group__nrf__saadc__hal_1gga62ca4cd30bcc0c4a306135c957f7ed39a07bd46d3a4b42947b73e5ffbf77de0bf" prot="public">
          <name>NRF_SAADC_OVERSAMPLE_DISABLED</name>
          <initializer>= SAADC_OVERSAMPLE_OVERSAMPLE_Bypass</initializer>
          <briefdescription>
<para>No oversampling. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__saadc__hal_1gga62ca4cd30bcc0c4a306135c957f7ed39ac33692f15f098ea8ef6777c353009a17" prot="public">
          <name>NRF_SAADC_OVERSAMPLE_2X</name>
          <initializer>= SAADC_OVERSAMPLE_OVERSAMPLE_Over2x</initializer>
          <briefdescription>
<para>Oversample 2x. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__saadc__hal_1gga62ca4cd30bcc0c4a306135c957f7ed39afa0ae6d243f9da65d42e382e10574647" prot="public">
          <name>NRF_SAADC_OVERSAMPLE_4X</name>
          <initializer>= SAADC_OVERSAMPLE_OVERSAMPLE_Over4x</initializer>
          <briefdescription>
<para>Oversample 4x. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__saadc__hal_1gga62ca4cd30bcc0c4a306135c957f7ed39a678abd8d9f3856e95979fa9cd60d02ea" prot="public">
          <name>NRF_SAADC_OVERSAMPLE_8X</name>
          <initializer>= SAADC_OVERSAMPLE_OVERSAMPLE_Over8x</initializer>
          <briefdescription>
<para>Oversample 8x. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__saadc__hal_1gga62ca4cd30bcc0c4a306135c957f7ed39a108b3c93033a3f08715e9127c76e9eac" prot="public">
          <name>NRF_SAADC_OVERSAMPLE_16X</name>
          <initializer>= SAADC_OVERSAMPLE_OVERSAMPLE_Over16x</initializer>
          <briefdescription>
<para>Oversample 16x. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__saadc__hal_1gga62ca4cd30bcc0c4a306135c957f7ed39a2e0670954aafc7b52b37e16737db12a6" prot="public">
          <name>NRF_SAADC_OVERSAMPLE_32X</name>
          <initializer>= SAADC_OVERSAMPLE_OVERSAMPLE_Over32x</initializer>
          <briefdescription>
<para>Oversample 32x. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__saadc__hal_1gga62ca4cd30bcc0c4a306135c957f7ed39ab51b06d2c5bcd8a85c81aac8e5979323" prot="public">
          <name>NRF_SAADC_OVERSAMPLE_64X</name>
          <initializer>= SAADC_OVERSAMPLE_OVERSAMPLE_Over64x</initializer>
          <briefdescription>
<para>Oversample 64x. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__saadc__hal_1gga62ca4cd30bcc0c4a306135c957f7ed39a301c27ff073e372fb03397683b29222f" prot="public">
          <name>NRF_SAADC_OVERSAMPLE_128X</name>
          <initializer>= SAADC_OVERSAMPLE_OVERSAMPLE_Over128x</initializer>
          <briefdescription>
<para>Oversample 128x. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__saadc__hal_1gga62ca4cd30bcc0c4a306135c957f7ed39ace10f1369e776f3b86de8b69cff6065c" prot="public">
          <name>NRF_SAADC_OVERSAMPLE_256X</name>
          <initializer>= SAADC_OVERSAMPLE_OVERSAMPLE_Over256x</initializer>
          <briefdescription>
<para>Oversample 256x. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Analog-to-digital converter oversampling mode. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_saadc.h" line="188" column="1" bodyfile="hal/nrf_saadc.h" bodystart="189" bodyend="199"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__saadc__hal_1ga1ac6795cf7f0c7c87df12a6c87fb4303" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_saadc_resistor_t</name>
        <enumvalue id="group__nrf__saadc__hal_1gga1ac6795cf7f0c7c87df12a6c87fb4303ac941d50e00494def50bfb5c2ab32c84d" prot="public">
          <name>NRF_SAADC_RESISTOR_DISABLED</name>
          <initializer>= SAADC_CH_CONFIG_RESP_Bypass</initializer>
          <briefdescription>
<para>Bypass resistor ladder. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__saadc__hal_1gga1ac6795cf7f0c7c87df12a6c87fb4303abfe4b85be11a4f7da453017634a808c0" prot="public">
          <name>NRF_SAADC_RESISTOR_PULLDOWN</name>
          <initializer>= SAADC_CH_CONFIG_RESP_Pulldown</initializer>
          <briefdescription>
<para>Pull-down to GND. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__saadc__hal_1gga1ac6795cf7f0c7c87df12a6c87fb4303a5f5486c3fa0bd560b4d3cf0eead03328" prot="public">
          <name>NRF_SAADC_RESISTOR_PULLUP</name>
          <initializer>= SAADC_CH_CONFIG_RESP_Pullup</initializer>
          <briefdescription>
<para>Pull-up to VDD. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__saadc__hal_1gga1ac6795cf7f0c7c87df12a6c87fb4303a459416062bf0c090f5558d033103bb54" prot="public">
          <name>NRF_SAADC_RESISTOR_VDD1_2</name>
          <initializer>= SAADC_CH_CONFIG_RESP_VDD1_2</initializer>
          <briefdescription>
<para>Set input at VDD/2. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Analog-to-digital converter channel resistor control. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_saadc.h" line="203" column="1" bodyfile="hal/nrf_saadc.h" bodystart="204" bodyend="214"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__saadc__hal_1gadda2525fbe5db392d1c1980c4a1286a0" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_saadc_gain_t</name>
        <enumvalue id="group__nrf__saadc__hal_1ggadda2525fbe5db392d1c1980c4a1286a0a51b7e2b28fe46a742870328ad6d48cc2" prot="public">
          <name>NRF_SAADC_GAIN1_6</name>
          <initializer>= SAADC_CH_CONFIG_GAIN_Gain1_6</initializer>
          <briefdescription>
<para>Gain factor 1/6. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__saadc__hal_1ggadda2525fbe5db392d1c1980c4a1286a0a6b6ea2d94564978e0a04ec27eb36dcaf" prot="public">
          <name>NRF_SAADC_GAIN1_5</name>
          <initializer>= SAADC_CH_CONFIG_GAIN_Gain1_5</initializer>
          <briefdescription>
<para>Gain factor 1/5. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__saadc__hal_1ggadda2525fbe5db392d1c1980c4a1286a0a8bdf3696726cc885b69a8edd16842340" prot="public">
          <name>NRF_SAADC_GAIN1_4</name>
          <initializer>= SAADC_CH_CONFIG_GAIN_Gain1_4</initializer>
          <briefdescription>
<para>Gain factor 1/4. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__saadc__hal_1ggadda2525fbe5db392d1c1980c4a1286a0ac03a3022d2b16e4e148e0e3f4c2a9030" prot="public">
          <name>NRF_SAADC_GAIN2_7</name>
          <initializer>= SAADC_CH_CONFIG_GAIN_Gain2_7</initializer>
          <briefdescription>
<para>Gain factor 2/7. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__saadc__hal_1ggadda2525fbe5db392d1c1980c4a1286a0af07ee87058d9573360b9886f0d197b23" prot="public">
          <name>NRF_SAADC_GAIN1_3</name>
          <initializer>= SAADC_CH_CONFIG_GAIN_Gain1_3</initializer>
          <briefdescription>
<para>Gain factor 1/3. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__saadc__hal_1ggadda2525fbe5db392d1c1980c4a1286a0ae199bbb85013b0d8d22cf70a3dc48c1e" prot="public">
          <name>NRF_SAADC_GAIN2_5</name>
          <initializer>= SAADC_CH_CONFIG_GAIN_Gain2_5</initializer>
          <briefdescription>
<para>Gain factor 2/5. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__saadc__hal_1ggadda2525fbe5db392d1c1980c4a1286a0a1aafa7a93cf70c82f808db67c74f6e61" prot="public">
          <name>NRF_SAADC_GAIN1_2</name>
          <initializer>= SAADC_CH_CONFIG_GAIN_Gain1_2</initializer>
          <briefdescription>
<para>Gain factor 1/2. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__saadc__hal_1ggadda2525fbe5db392d1c1980c4a1286a0ad2f1c75838cec0ee85719b7f756bff75" prot="public">
          <name>NRF_SAADC_GAIN2_3</name>
          <initializer>= SAADC_CH_CONFIG_GAIN_Gain2_3</initializer>
          <briefdescription>
<para>Gain factor 2/3. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__saadc__hal_1ggadda2525fbe5db392d1c1980c4a1286a0a49a79897cf1a7f924965c566a41880e7" prot="public">
          <name>NRF_SAADC_GAIN1</name>
          <initializer>= SAADC_CH_CONFIG_GAIN_Gain1</initializer>
          <briefdescription>
<para>Gain factor 1. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__saadc__hal_1ggadda2525fbe5db392d1c1980c4a1286a0aaf44b0f743dd2eb51ef662fc82b9c09d" prot="public">
          <name>NRF_SAADC_GAIN2</name>
          <initializer>= SAADC_CH_CONFIG_GAIN_Gain2</initializer>
          <briefdescription>
<para>Gain factor 2. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__saadc__hal_1ggadda2525fbe5db392d1c1980c4a1286a0ab24781a885803059e306560ac6ef4de3" prot="public">
          <name>NRF_SAADC_GAIN4</name>
          <initializer>= SAADC_CH_CONFIG_GAIN_Gain4</initializer>
          <briefdescription>
<para>Gain factor 4. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Gain factor of the analog-to-digital converter input. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_saadc.h" line="218" column="1" bodyfile="hal/nrf_saadc.h" bodystart="219" bodyend="255"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__saadc__hal_1gad540c22a2e06a7828a5ce6c71bc8a5d4" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_saadc_reference_t</name>
        <enumvalue id="group__nrf__saadc__hal_1ggad540c22a2e06a7828a5ce6c71bc8a5d4a45e4751bab9abc4fb0e8cf281f2010fc" prot="public">
          <name>NRF_SAADC_REFERENCE_INTERNAL</name>
          <initializer>= SAADC_CH_CONFIG_REFSEL_Internal</initializer>
          <briefdescription>
<para>Internal reference. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__saadc__hal_1ggad540c22a2e06a7828a5ce6c71bc8a5d4aac8f8c9c960da2c5edba27c84b776d45" prot="public">
          <name>NRF_SAADC_REFERENCE_VDD4</name>
          <initializer>= SAADC_CH_CONFIG_REFSEL_VDD1_4


    NRF_SAADC_REFERENCE_EXTERNAL = SAADC_CH_CONFIG_REFSEL_External</initializer>
          <briefdescription>
<para>VDD/4 as reference. </para>
          </briefdescription>
          <detaileddescription>
<para>External reference. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Reference selection for the analog-to-digital converter. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_saadc.h" line="258" column="1" bodyfile="hal/nrf_saadc.h" bodystart="259" bodyend="269"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__saadc__hal_1ga125831a7eb192939bd96d99ab1e7a742" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_saadc_acqtime_t</name>
        <enumvalue id="group__nrf__saadc__hal_1gga125831a7eb192939bd96d99ab1e7a742a91b53f4264eafab02d15d6885db5acbd" prot="public">
          <name>NRF_SAADC_ACQTIME_3US</name>
          <initializer>= SAADC_CH_CONFIG_TACQ_3us</initializer>
          <briefdescription>
<para>3 us. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__saadc__hal_1gga125831a7eb192939bd96d99ab1e7a742a440d0922fa9ede3513dff2c0132e6abf" prot="public">
          <name>NRF_SAADC_ACQTIME_5US</name>
          <initializer>= SAADC_CH_CONFIG_TACQ_5us</initializer>
          <briefdescription>
<para>5 us. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__saadc__hal_1gga125831a7eb192939bd96d99ab1e7a742a7452b8e0b08b260e95c8cdcc949a0eed" prot="public">
          <name>NRF_SAADC_ACQTIME_10US</name>
          <initializer>= SAADC_CH_CONFIG_TACQ_10us</initializer>
          <briefdescription>
<para>10 us. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__saadc__hal_1gga125831a7eb192939bd96d99ab1e7a742a32eb0eead4bd3bff1add85aedbfb34c6" prot="public">
          <name>NRF_SAADC_ACQTIME_15US</name>
          <initializer>= SAADC_CH_CONFIG_TACQ_15us</initializer>
          <briefdescription>
<para>15 us. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__saadc__hal_1gga125831a7eb192939bd96d99ab1e7a742abd6f18b68b384ee5cf466f2ddade6e49" prot="public">
          <name>NRF_SAADC_ACQTIME_20US</name>
          <initializer>= SAADC_CH_CONFIG_TACQ_20us</initializer>
          <briefdescription>
<para>20 us. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__saadc__hal_1gga125831a7eb192939bd96d99ab1e7a742a0dfc455375a35f2747539aeadb9d77cd" prot="public">
          <name>NRF_SAADC_ACQTIME_40US</name>
          <initializer>= SAADC_CH_CONFIG_TACQ_40us</initializer>
          <briefdescription>
<para>40 us. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Analog-to-digital converter acquisition time. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_saadc.h" line="273" column="1" bodyfile="hal/nrf_saadc.h" bodystart="274" bodyend="281"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__saadc__hal_1ga4436d07f1135db83c486397781e718c2" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_saadc_mode_t</name>
        <enumvalue id="group__nrf__saadc__hal_1gga4436d07f1135db83c486397781e718c2ad0ce3a0327c0393e981db20d43c709f8" prot="public">
          <name>NRF_SAADC_MODE_SINGLE_ENDED</name>
          <initializer>= SAADC_CH_CONFIG_MODE_SE</initializer>
          <briefdescription>
<para>Single-ended mode. PSELN will be ignored, negative input to ADC shorted to GND. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__saadc__hal_1gga4436d07f1135db83c486397781e718c2a4c57cd1fc309cd665870b257f4c50767" prot="public">
          <name>NRF_SAADC_MODE_DIFFERENTIAL</name>
          <initializer>= SAADC_CH_CONFIG_MODE_Diff</initializer>
          <briefdescription>
<para>Differential mode. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Analog-to-digital converter channel mode. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_saadc.h" line="287" column="1" bodyfile="hal/nrf_saadc.h" bodystart="288" bodyend="291"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__saadc__hal_1ga46239c9f1d0af686aa09373d68c9a61a" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_saadc_burst_t</name>
        <enumvalue id="group__nrf__saadc__hal_1gga46239c9f1d0af686aa09373d68c9a61aa605705545f3c481ada5c0c068c26dd28" prot="public">
          <name>NRF_SAADC_BURST_DISABLED</name>
          <initializer>= SAADC_CH_CONFIG_BURST_Disabled</initializer>
          <briefdescription>
<para>Burst mode is disabled (normal operation). </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__saadc__hal_1gga46239c9f1d0af686aa09373d68c9a61aa67d75ecddee833d170c2b924ad8b1ef2" prot="public">
          <name>NRF_SAADC_BURST_ENABLED</name>
          <initializer>= SAADC_CH_CONFIG_BURST_Enabled</initializer>
          <briefdescription>
<para>Burst mode is enabled. SAADC takes 2^OVERSAMPLE number of samples as fast as it can, and sends the average to Data RAM. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Analog-to-digital converter channel burst mode. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_saadc.h" line="294" column="1" bodyfile="hal/nrf_saadc.h" bodystart="295" bodyend="298"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__saadc__hal_1gacde3c3040c12e04f9edc2bc92c1b2276" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_saadc_task_t</name>
        <enumvalue id="group__nrf__saadc__hal_1ggacde3c3040c12e04f9edc2bc92c1b2276a7900b2c3694c7cc4da64f5de28da8b9b" prot="public">
          <name>NRF_SAADC_TASK_START</name>
          <initializer>= offsetof(NRF_SAADC_Type, TASKS_START)</initializer>
          <briefdescription>
<para>Start the ADC and prepare the result buffer in RAM. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__saadc__hal_1ggacde3c3040c12e04f9edc2bc92c1b2276a268763796f741cda6eea1a51f348b204" prot="public">
          <name>NRF_SAADC_TASK_STOP</name>
          <initializer>= offsetof(NRF_SAADC_Type, TASKS_STOP)</initializer>
          <briefdescription>
<para>Stop the ADC and terminate any ongoing conversion. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__saadc__hal_1ggacde3c3040c12e04f9edc2bc92c1b2276a53f835ed3f4b6e9ff24d1550ead3c941" prot="public">
          <name>NRF_SAADC_TASK_SAMPLE</name>
          <initializer>= offsetof(NRF_SAADC_Type, TASKS_SAMPLE)</initializer>
          <briefdescription>
<para>Take one ADC sample. If scan is enabled, all channels are sampled. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__saadc__hal_1ggacde3c3040c12e04f9edc2bc92c1b2276a541cf2b16d6bd1ca797afcb691e47603" prot="public">
          <name>NRF_SAADC_TASK_CALIBRATEOFFSET</name>
          <initializer>= offsetof(NRF_SAADC_Type, TASKS_CALIBRATEOFFSET)</initializer>
          <briefdescription>
<para>Starts offset auto-calibration. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Analog-to-digital converter tasks. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_saadc.h" line="301" column="1" bodyfile="hal/nrf_saadc.h" bodystart="302" bodyend="307"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__saadc__hal_1ga54a401b89bf604a64fce520429bbbdd1" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_saadc_event_t</name>
        <enumvalue id="group__nrf__saadc__hal_1gga54a401b89bf604a64fce520429bbbdd1a8802cfd4ef157b181acf414cff6ff409" prot="public">
          <name>NRF_SAADC_EVENT_STARTED</name>
          <initializer>= offsetof(NRF_SAADC_Type, EVENTS_STARTED)</initializer>
          <briefdescription>
<para>The ADC has started. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__saadc__hal_1gga54a401b89bf604a64fce520429bbbdd1a3caea189d3feb4fb51f3eeeaa31a7d51" prot="public">
          <name>NRF_SAADC_EVENT_END</name>
          <initializer>= offsetof(NRF_SAADC_Type, EVENTS_DMA.END)</initializer>
          <briefdescription>
<para>The ADC has filled up the result buffer. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__saadc__hal_1gga54a401b89bf604a64fce520429bbbdd1a38a3b65b88b278c566528173ee6f3403" prot="public">
          <name>NRF_SAADC_EVENT_DONE</name>
          <initializer>= offsetof(NRF_SAADC_Type, EVENTS_DONE)</initializer>
          <briefdescription>
<para>A conversion task has been completed. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__saadc__hal_1gga54a401b89bf604a64fce520429bbbdd1af1aea0c0901456d0e677ed29e33e918a" prot="public">
          <name>NRF_SAADC_EVENT_RESULTDONE</name>
          <initializer>= offsetof(NRF_SAADC_Type, EVENTS_RESULTDONE)</initializer>
          <briefdescription>
<para>A result is ready to get transferred to RAM. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__saadc__hal_1gga54a401b89bf604a64fce520429bbbdd1abc9496dabfb62fe70c1ab872400bf75b" prot="public">
          <name>NRF_SAADC_EVENT_CALIBRATEDONE</name>
          <initializer>= offsetof(NRF_SAADC_Type, EVENTS_CALIBRATEDONE)</initializer>
          <briefdescription>
<para>Calibration is complete. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__saadc__hal_1gga54a401b89bf604a64fce520429bbbdd1ab74a57373475fe680c97c82ac7b73938" prot="public">
          <name>NRF_SAADC_EVENT_STOPPED</name>
          <initializer>= offsetof(NRF_SAADC_Type, EVENTS_STOPPED)</initializer>
          <briefdescription>
<para>The ADC has stopped. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__saadc__hal_1gga54a401b89bf604a64fce520429bbbdd1adb37680e1256ecb958a572fa385ee739" prot="public">
          <name>NRF_SAADC_EVENT_CH0_LIMITH</name>
          <initializer>= offsetof(NRF_SAADC_Type, EVENTS_CH[0].LIMITH)</initializer>
          <briefdescription>
<para>Last result is equal or above CH[0].LIMIT.HIGH. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__saadc__hal_1gga54a401b89bf604a64fce520429bbbdd1afeeb02e7df74fb429bf2f01cc45b7f82" prot="public">
          <name>NRF_SAADC_EVENT_CH0_LIMITL</name>
          <initializer>= offsetof(NRF_SAADC_Type, EVENTS_CH[0].LIMITL)</initializer>
          <briefdescription>
<para>Last result is equal or below CH[0].LIMIT.LOW. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__saadc__hal_1gga54a401b89bf604a64fce520429bbbdd1ac39d01a0de5b6705b86bff7f7210e2a9" prot="public">
          <name>NRF_SAADC_EVENT_CH1_LIMITH</name>
          <initializer>= offsetof(NRF_SAADC_Type, EVENTS_CH[1].LIMITH)</initializer>
          <briefdescription>
<para>Last result is equal or above CH[1].LIMIT.HIGH. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__saadc__hal_1gga54a401b89bf604a64fce520429bbbdd1ad247142de8549552b7a7446ed604e4af" prot="public">
          <name>NRF_SAADC_EVENT_CH1_LIMITL</name>
          <initializer>= offsetof(NRF_SAADC_Type, EVENTS_CH[1].LIMITL)</initializer>
          <briefdescription>
<para>Last result is equal or below CH[1].LIMIT.LOW. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__saadc__hal_1gga54a401b89bf604a64fce520429bbbdd1afc3c9fe35a2721ed3618df52b62e6f1f" prot="public">
          <name>NRF_SAADC_EVENT_CH2_LIMITH</name>
          <initializer>= offsetof(NRF_SAADC_Type, EVENTS_CH[2].LIMITH)</initializer>
          <briefdescription>
<para>Last result is equal or above CH[2].LIMIT.HIGH. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__saadc__hal_1gga54a401b89bf604a64fce520429bbbdd1aef66a24727e5dc12d2dcbd3b8a00583f" prot="public">
          <name>NRF_SAADC_EVENT_CH2_LIMITL</name>
          <initializer>= offsetof(NRF_SAADC_Type, EVENTS_CH[2].LIMITL)</initializer>
          <briefdescription>
<para>Last result is equal or below CH[2].LIMIT.LOW. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__saadc__hal_1gga54a401b89bf604a64fce520429bbbdd1a148cbb2a196f1656413179089b63d6ab" prot="public">
          <name>NRF_SAADC_EVENT_CH3_LIMITH</name>
          <initializer>= offsetof(NRF_SAADC_Type, EVENTS_CH[3].LIMITH)</initializer>
          <briefdescription>
<para>Last result is equal or above CH[3].LIMIT.HIGH. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__saadc__hal_1gga54a401b89bf604a64fce520429bbbdd1ada7b054199e1fa667ddee5bffd790213" prot="public">
          <name>NRF_SAADC_EVENT_CH3_LIMITL</name>
          <initializer>= offsetof(NRF_SAADC_Type, EVENTS_CH[3].LIMITL)</initializer>
          <briefdescription>
<para>Last result is equal or below CH[3].LIMIT.LOW. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__saadc__hal_1gga54a401b89bf604a64fce520429bbbdd1a9179d81d5f56dbcb487b45fbb23a6c20" prot="public">
          <name>NRF_SAADC_EVENT_CH4_LIMITH</name>
          <initializer>= offsetof(NRF_SAADC_Type, EVENTS_CH[4].LIMITH)</initializer>
          <briefdescription>
<para>Last result is equal or above CH[4].LIMIT.HIGH. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__saadc__hal_1gga54a401b89bf604a64fce520429bbbdd1a19d836edc59abc15f62cd0630ea58cc8" prot="public">
          <name>NRF_SAADC_EVENT_CH4_LIMITL</name>
          <initializer>= offsetof(NRF_SAADC_Type, EVENTS_CH[4].LIMITL)</initializer>
          <briefdescription>
<para>Last result is equal or below CH[4].LIMIT.LOW. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__saadc__hal_1gga54a401b89bf604a64fce520429bbbdd1ae14d0343df57c333a35458ab1cb08a1f" prot="public">
          <name>NRF_SAADC_EVENT_CH5_LIMITH</name>
          <initializer>= offsetof(NRF_SAADC_Type, EVENTS_CH[5].LIMITH)</initializer>
          <briefdescription>
<para>Last result is equal or above CH[5].LIMIT.HIGH. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__saadc__hal_1gga54a401b89bf604a64fce520429bbbdd1a0ffc3add15b391667be38015a5f8418e" prot="public">
          <name>NRF_SAADC_EVENT_CH5_LIMITL</name>
          <initializer>= offsetof(NRF_SAADC_Type, EVENTS_CH[5].LIMITL)</initializer>
          <briefdescription>
<para>Last result is equal or below CH[5].LIMIT.LOW. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__saadc__hal_1gga54a401b89bf604a64fce520429bbbdd1a814747e44cb3ce2dad5bef354eef155e" prot="public">
          <name>NRF_SAADC_EVENT_CH6_LIMITH</name>
          <initializer>= offsetof(NRF_SAADC_Type, EVENTS_CH[6].LIMITH)</initializer>
          <briefdescription>
<para>Last result is equal or above CH[6].LIMIT.HIGH. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__saadc__hal_1gga54a401b89bf604a64fce520429bbbdd1a82ef01bcaf54abc8bb1a2f2932651ae4" prot="public">
          <name>NRF_SAADC_EVENT_CH6_LIMITL</name>
          <initializer>= offsetof(NRF_SAADC_Type, EVENTS_CH[6].LIMITL)</initializer>
          <briefdescription>
<para>Last result is equal or below CH[6].LIMIT.LOW. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__saadc__hal_1gga54a401b89bf604a64fce520429bbbdd1a2b4acf6c8a8f5ac233849c3e4a260529" prot="public">
          <name>NRF_SAADC_EVENT_CH7_LIMITH</name>
          <initializer>= offsetof(NRF_SAADC_Type, EVENTS_CH[7].LIMITH)</initializer>
          <briefdescription>
<para>Last result is equal or above CH[7].LIMIT.HIGH. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__saadc__hal_1gga54a401b89bf604a64fce520429bbbdd1a0d0e19a21605e1a5f560bbb9d94fbe3f" prot="public">
          <name>NRF_SAADC_EVENT_CH7_LIMITL</name>
          <initializer>= offsetof(NRF_SAADC_Type, EVENTS_CH[7].LIMITL)</initializer>
          <briefdescription>
<para>Last result is equal or below CH[7].LIMIT.LOW. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Analog-to-digital converter events. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_saadc.h" line="310" column="1" bodyfile="hal/nrf_saadc.h" bodystart="311" bodyend="338"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__saadc__hal_1ga82c6d9ccbed7aa753b044ae4216a52e7" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_saadc_int_mask_t</name>
        <enumvalue id="group__nrf__saadc__hal_1gga82c6d9ccbed7aa753b044ae4216a52e7aa045e1687b7eaf51827129bccfae99ae" prot="public">
          <name>NRF_SAADC_INT_STARTED</name>
          <initializer>= SAADC_INTENSET_STARTED_Msk</initializer>
          <briefdescription>
<para>Interrupt on EVENTS_STARTED event. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__saadc__hal_1gga82c6d9ccbed7aa753b044ae4216a52e7a1dfee95542a3a3499cbb5875eb33808d" prot="public">
          <name>NRF_SAADC_INT_END</name>
          <initializer>= SAADC_INTENSET_DMAEND_Msk</initializer>
          <briefdescription>
<para>Interrupt on EVENTS_END event. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__saadc__hal_1gga82c6d9ccbed7aa753b044ae4216a52e7a1ce20cb57f783d5feae941dec4348920" prot="public">
          <name>NRF_SAADC_INT_DONE</name>
          <initializer>= SAADC_INTENSET_DONE_Msk</initializer>
          <briefdescription>
<para>Interrupt on EVENTS_DONE event. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__saadc__hal_1gga82c6d9ccbed7aa753b044ae4216a52e7a0b08e2221943faac470b466d3c59745b" prot="public">
          <name>NRF_SAADC_INT_RESULTDONE</name>
          <initializer>= SAADC_INTENSET_RESULTDONE_Msk</initializer>
          <briefdescription>
<para>Interrupt on EVENTS_RESULTDONE event. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__saadc__hal_1gga82c6d9ccbed7aa753b044ae4216a52e7a3d488af5afe59a781c026af9ebea6f0d" prot="public">
          <name>NRF_SAADC_INT_CALIBRATEDONE</name>
          <initializer>= SAADC_INTENSET_CALIBRATEDONE_Msk</initializer>
          <briefdescription>
<para>Interrupt on EVENTS_CALIBRATEDONE event. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__saadc__hal_1gga82c6d9ccbed7aa753b044ae4216a52e7a8bd1e8a4f530a9ecbfdaf9b6dd5dd805" prot="public">
          <name>NRF_SAADC_INT_STOPPED</name>
          <initializer>= SAADC_INTENSET_STOPPED_Msk</initializer>
          <briefdescription>
<para>Interrupt on EVENTS_STOPPED event. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__saadc__hal_1gga82c6d9ccbed7aa753b044ae4216a52e7a807ef5f8b39d6d5d05353d817d2b7fd3" prot="public">
          <name>NRF_SAADC_INT_CH0LIMITH</name>
          <initializer>= SAADC_INTENSET_CH0LIMITH_Msk</initializer>
          <briefdescription>
<para>Interrupt on EVENTS_CH[0].LIMITH event. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__saadc__hal_1gga82c6d9ccbed7aa753b044ae4216a52e7a2ee8aba4ca294b8d94266252268193db" prot="public">
          <name>NRF_SAADC_INT_CH0LIMITL</name>
          <initializer>= SAADC_INTENSET_CH0LIMITL_Msk</initializer>
          <briefdescription>
<para>Interrupt on EVENTS_CH[0].LIMITL event. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__saadc__hal_1gga82c6d9ccbed7aa753b044ae4216a52e7a08e9613aa09aa07c0c18fb57e65208e2" prot="public">
          <name>NRF_SAADC_INT_CH1LIMITH</name>
          <initializer>= SAADC_INTENSET_CH1LIMITH_Msk</initializer>
          <briefdescription>
<para>Interrupt on EVENTS_CH[1].LIMITH event. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__saadc__hal_1gga82c6d9ccbed7aa753b044ae4216a52e7ae4cee39513094642ccc5490e58adee8e" prot="public">
          <name>NRF_SAADC_INT_CH1LIMITL</name>
          <initializer>= SAADC_INTENSET_CH1LIMITL_Msk</initializer>
          <briefdescription>
<para>Interrupt on EVENTS_CH[1].LIMITL event. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__saadc__hal_1gga82c6d9ccbed7aa753b044ae4216a52e7a54a04edc15cc38bc4a657657ea4ae34c" prot="public">
          <name>NRF_SAADC_INT_CH2LIMITH</name>
          <initializer>= SAADC_INTENSET_CH2LIMITH_Msk</initializer>
          <briefdescription>
<para>Interrupt on EVENTS_CH[2].LIMITH event. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__saadc__hal_1gga82c6d9ccbed7aa753b044ae4216a52e7a360826a886f90b76b79b23409fc620f2" prot="public">
          <name>NRF_SAADC_INT_CH2LIMITL</name>
          <initializer>= SAADC_INTENSET_CH2LIMITL_Msk</initializer>
          <briefdescription>
<para>Interrupt on EVENTS_CH[2].LIMITL event. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__saadc__hal_1gga82c6d9ccbed7aa753b044ae4216a52e7abedd76d10671c7c1c133533d85d380d8" prot="public">
          <name>NRF_SAADC_INT_CH3LIMITH</name>
          <initializer>= SAADC_INTENSET_CH3LIMITH_Msk</initializer>
          <briefdescription>
<para>Interrupt on EVENTS_CH[3].LIMITH event. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__saadc__hal_1gga82c6d9ccbed7aa753b044ae4216a52e7af42b94420fb86b061df28a9b96b2965f" prot="public">
          <name>NRF_SAADC_INT_CH3LIMITL</name>
          <initializer>= SAADC_INTENSET_CH3LIMITL_Msk</initializer>
          <briefdescription>
<para>Interrupt on EVENTS_CH[3].LIMITL event. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__saadc__hal_1gga82c6d9ccbed7aa753b044ae4216a52e7a5a21ec6f00929f84fdb9ce142bee81be" prot="public">
          <name>NRF_SAADC_INT_CH4LIMITH</name>
          <initializer>= SAADC_INTENSET_CH4LIMITH_Msk</initializer>
          <briefdescription>
<para>Interrupt on EVENTS_CH[4].LIMITH event. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__saadc__hal_1gga82c6d9ccbed7aa753b044ae4216a52e7a53150d22c5c0fb63137bd9661a5c0cb1" prot="public">
          <name>NRF_SAADC_INT_CH4LIMITL</name>
          <initializer>= SAADC_INTENSET_CH4LIMITL_Msk</initializer>
          <briefdescription>
<para>Interrupt on EVENTS_CH[4].LIMITL event. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__saadc__hal_1gga82c6d9ccbed7aa753b044ae4216a52e7af470bd28c2f8969dc5f48929d9ab118e" prot="public">
          <name>NRF_SAADC_INT_CH5LIMITH</name>
          <initializer>= SAADC_INTENSET_CH5LIMITH_Msk</initializer>
          <briefdescription>
<para>Interrupt on EVENTS_CH[5].LIMITH event. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__saadc__hal_1gga82c6d9ccbed7aa753b044ae4216a52e7ae5e6d12e0184a74139ff8f22a143ab7b" prot="public">
          <name>NRF_SAADC_INT_CH5LIMITL</name>
          <initializer>= SAADC_INTENSET_CH5LIMITL_Msk</initializer>
          <briefdescription>
<para>Interrupt on EVENTS_CH[5].LIMITL event. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__saadc__hal_1gga82c6d9ccbed7aa753b044ae4216a52e7a9f7bfd9b5c7129332bfd67ac87b8d27d" prot="public">
          <name>NRF_SAADC_INT_CH6LIMITH</name>
          <initializer>= SAADC_INTENSET_CH6LIMITH_Msk</initializer>
          <briefdescription>
<para>Interrupt on EVENTS_CH[6].LIMITH event. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__saadc__hal_1gga82c6d9ccbed7aa753b044ae4216a52e7af3ad11a95f62e6ca0095217f952319c6" prot="public">
          <name>NRF_SAADC_INT_CH6LIMITL</name>
          <initializer>= SAADC_INTENSET_CH6LIMITL_Msk</initializer>
          <briefdescription>
<para>Interrupt on EVENTS_CH[6].LIMITL event. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__saadc__hal_1gga82c6d9ccbed7aa753b044ae4216a52e7a5f90ab95293f53a04c1c1fad010af3c6" prot="public">
          <name>NRF_SAADC_INT_CH7LIMITH</name>
          <initializer>= SAADC_INTENSET_CH7LIMITH_Msk</initializer>
          <briefdescription>
<para>Interrupt on EVENTS_CH[7].LIMITH event. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__saadc__hal_1gga82c6d9ccbed7aa753b044ae4216a52e7ac55d76dc332dc0301d5bb5110033f7c7" prot="public">
          <name>NRF_SAADC_INT_CH7LIMITL</name>
          <initializer>= SAADC_INTENSET_CH7LIMITL_Msk</initializer>
          <briefdescription>
<para>Interrupt on EVENTS_CH[7].LIMITL event. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__saadc__hal_1gga82c6d9ccbed7aa753b044ae4216a52e7ae3e630effb1b905a3d661461cc86c4b5" prot="public">
          <name>NRF_SAADC_INT_ALL</name>
          <initializer>= 0x7FFFFFFFUL</initializer>
          <briefdescription>
<para>Mask of all interrupts. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Analog-to-digital converter interrupt masks. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_saadc.h" line="341" column="1" bodyfile="hal/nrf_saadc.h" bodystart="342" bodyend="370"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__saadc__hal_1gad3a1aa4df4fa236684487f209f438a3d" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_saadc_limit_t</name>
        <enumvalue id="group__nrf__saadc__hal_1ggad3a1aa4df4fa236684487f209f438a3da668f96bfc2e19db0c72fd6c7ebc2a4f6" prot="public">
          <name>NRF_SAADC_LIMIT_LOW</name>
          <initializer>= 0</initializer>
          <briefdescription>
<para>Low limit type. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__saadc__hal_1ggad3a1aa4df4fa236684487f209f438a3da80f852093bfb4fd581b30f154322cc49" prot="public">
          <name>NRF_SAADC_LIMIT_HIGH</name>
          <initializer>= 1</initializer>
          <briefdescription>
<para>High limit type. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Analog-to-digital converter value limit type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_saadc.h" line="373" column="1" bodyfile="hal/nrf_saadc.h" bodystart="374" bodyend="377"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group__nrf__saadc__hal_1ga28f7a2c0a47d0a5f1254ae6a23fb71e2" prot="public" static="no">
        <type>uint32_t</type>
        <definition>typedef uint32_t nrf_saadc_input_t</definition>
        <argsstring></argsstring>
        <name>nrf_saadc_input_t</name>
        <briefdescription>
<para>Analog input type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_saadc.h" line="143" column="18" bodyfile="hal/nrf_saadc.h" bodystart="143" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__nrf__saadc__hal_1gab991b20f4e170101f92956881889b755" prot="public" static="no">
        <type>void</type>
        <definition>typedef void nrf_saadc_value_t</definition>
        <argsstring></argsstring>
        <name>nrf_saadc_value_t</name>
        <briefdescription>
<para>Type of a single ADC conversion result. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_saadc.h" line="381" column="14" bodyfile="hal/nrf_saadc.h" bodystart="381" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__nrf__saadc__hal_1gafaffd78a579b5fb3aa119c140d4271d3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_saadc_task_trigger</definition>
        <argsstring>(NRF_SAADC_Type *p_reg, nrf_saadc_task_t task)</argsstring>
        <name>nrf_saadc_task_trigger</name>
        <param>
          <type>NRF_SAADC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__saadc__hal_1gacde3c3040c12e04f9edc2bc92c1b2276" kindref="member">nrf_saadc_task_t</ref></type>
          <declname>task</declname>
        </param>
        <briefdescription>
<para>Function for triggering the specified SAADC task. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">task</parametername>
</parameternamelist>
<parameterdescription>
<para>SAADC task. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_saadc.h" line="836" column="24" bodyfile="hal/nrf_saadc.h" bodystart="836" bodyend="839" declfile="hal/nrf_saadc.h" declline="419" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__saadc__hal_1ga2d7ab93e620dd1357e61015e67c38419" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_saadc_task_address_get</definition>
        <argsstring>(NRF_SAADC_Type const *p_reg, nrf_saadc_task_t task)</argsstring>
        <name>nrf_saadc_task_address_get</name>
        <param>
          <type>NRF_SAADC_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__saadc__hal_1gacde3c3040c12e04f9edc2bc92c1b2276" kindref="member">nrf_saadc_task_t</ref></type>
          <declname>task</declname>
        </param>
        <briefdescription>
<para>Function for getting the address of the specified SAADC task register. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">task</parametername>
</parameternamelist>
<parameterdescription>
<para>SAADC task.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Address of the specified SAADC task. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_saadc.h" line="841" column="28" bodyfile="hal/nrf_saadc.h" bodystart="841" bodyend="845" declfile="hal/nrf_saadc.h" declline="430" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__saadc__hal_1ga302a420e63a91a87aa5a81e3f5aebada" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE bool</type>
        <definition>NRF_STATIC_INLINE bool nrf_saadc_event_check</definition>
        <argsstring>(NRF_SAADC_Type const *p_reg, nrf_saadc_event_t event)</argsstring>
        <name>nrf_saadc_event_check</name>
        <param>
          <type>NRF_SAADC_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__saadc__hal_1ga54a401b89bf604a64fce520429bbbdd1" kindref="member">nrf_saadc_event_t</ref></type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>Function for retrieving the state of the SAADC event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event to be checked.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>The event has been generated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>The event has not been generated. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_saadc.h" line="847" column="24" bodyfile="hal/nrf_saadc.h" bodystart="847" bodyend="850" declfile="hal/nrf_saadc.h" declline="442" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__saadc__hal_1gafd8a1fe786b649956ebbcc6a905a7054" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_saadc_event_clear</definition>
        <argsstring>(NRF_SAADC_Type *p_reg, nrf_saadc_event_t event)</argsstring>
        <name>nrf_saadc_event_clear</name>
        <param>
          <type>NRF_SAADC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__saadc__hal_1ga54a401b89bf604a64fce520429bbbdd1" kindref="member">nrf_saadc_event_t</ref></type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>Function for clearing the specific SAADC event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>SAADC event. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_saadc.h" line="852" column="24" bodyfile="hal/nrf_saadc.h" bodystart="852" bodyend="856" declfile="hal/nrf_saadc.h" declline="451" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__saadc__hal_1gadeade61bf67c5bdeea1af3a3cfbfa886" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_saadc_event_address_get</definition>
        <argsstring>(NRF_SAADC_Type const *p_reg, nrf_saadc_event_t event)</argsstring>
        <name>nrf_saadc_event_address_get</name>
        <param>
          <type>NRF_SAADC_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__saadc__hal_1ga54a401b89bf604a64fce520429bbbdd1" kindref="member">nrf_saadc_event_t</ref></type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>Function for getting the address of the specified SAADC event register. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>SAADC event.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Address of the specified SAADC event. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_saadc.h" line="858" column="29" bodyfile="hal/nrf_saadc.h" bodystart="858" bodyend="862" declfile="hal/nrf_saadc.h" declline="462" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__saadc__hal_1gaa129d5679cafb3c0d2a0b561c3f59f90" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_saadc_subscribe_set</definition>
        <argsstring>(NRF_SAADC_Type *p_reg, nrf_saadc_task_t task, uint8_t channel)</argsstring>
        <name>nrf_saadc_subscribe_set</name>
        <param>
          <type>NRF_SAADC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__saadc__hal_1gacde3c3040c12e04f9edc2bc92c1b2276" kindref="member">nrf_saadc_task_t</ref></type>
          <declname>task</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>channel</declname>
        </param>
        <briefdescription>
<para>Function for setting the subscribe configuration for a given SAADC task. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">task</parametername>
</parameternamelist>
<parameterdescription>
<para>Task for which to set the configuration. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">channel</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel through which to subscribe events. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_saadc.h" line="474" column="24" declfile="hal/nrf_saadc.h" declline="474" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__saadc__hal_1ga73ca056baa1bcd338b41180933724cbd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_saadc_subscribe_clear</definition>
        <argsstring>(NRF_SAADC_Type *p_reg, nrf_saadc_task_t task)</argsstring>
        <name>nrf_saadc_subscribe_clear</name>
        <param>
          <type>NRF_SAADC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__saadc__hal_1gacde3c3040c12e04f9edc2bc92c1b2276" kindref="member">nrf_saadc_task_t</ref></type>
          <declname>task</declname>
        </param>
        <briefdescription>
<para>Function for clearing the subscribe configuration for a given SAADC task. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">task</parametername>
</parameternamelist>
<parameterdescription>
<para>Task for which to clear the configuration. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_saadc.h" line="485" column="24" declfile="hal/nrf_saadc.h" declline="485" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__saadc__hal_1ga9cc7ba9f6ead07f9a11c97a34ba813c7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_saadc_publish_set</definition>
        <argsstring>(NRF_SAADC_Type *p_reg, nrf_saadc_event_t event, uint8_t channel)</argsstring>
        <name>nrf_saadc_publish_set</name>
        <param>
          <type>NRF_SAADC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__saadc__hal_1ga54a401b89bf604a64fce520429bbbdd1" kindref="member">nrf_saadc_event_t</ref></type>
          <declname>event</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>channel</declname>
        </param>
        <briefdescription>
<para>Function for setting the publish configuration for a given SAADC event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event for which to set the configuration. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">channel</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel through which to publish the event. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_saadc.h" line="496" column="24" declfile="hal/nrf_saadc.h" declline="496" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__saadc__hal_1gad675daf087af3c40989b5a75eb163d42" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_saadc_publish_clear</definition>
        <argsstring>(NRF_SAADC_Type *p_reg, nrf_saadc_event_t event)</argsstring>
        <name>nrf_saadc_publish_clear</name>
        <param>
          <type>NRF_SAADC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__saadc__hal_1ga54a401b89bf604a64fce520429bbbdd1" kindref="member">nrf_saadc_event_t</ref></type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>Function for clearing the publish configuration for a given SAADC event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event for which to clear the configuration. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_saadc.h" line="507" column="24" declfile="hal/nrf_saadc.h" declline="507" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__saadc__hal_1ga55a1e59db07bbcee1c6a0ae2f6c9bea1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE <ref refid="group__nrf__saadc__hal_1ga54a401b89bf604a64fce520429bbbdd1" kindref="member">nrf_saadc_event_t</ref></type>
        <definition>NRF_STATIC_INLINE nrf_saadc_event_t nrf_saadc_limit_event_get</definition>
        <argsstring>(uint8_t channel, nrf_saadc_limit_t limit_type)</argsstring>
        <name>nrf_saadc_limit_event_get</name>
        <param>
          <type>uint8_t</type>
          <declname>channel</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__saadc__hal_1gad3a1aa4df4fa236684487f209f438a3d" kindref="member">nrf_saadc_limit_t</ref></type>
          <declname>limit_type</declname>
        </param>
        <briefdescription>
<para>Function for getting the SAADC channel monitoring limit events. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">channel</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel number. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">limit_type</parametername>
</parameternamelist>
<parameterdescription>
<para>Low limit or high limit.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The SAADC channel monitoring limit event. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_saadc.h" line="892" column="37" bodyfile="hal/nrf_saadc.h" bodystart="892" bodyend="903" declfile="hal/nrf_saadc.h" declline="519" declcolumn="37"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__saadc__hal_1ga4aabfc8ebe63a4e31e55188ec4fc4d9c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_saadc_channel_input_set</definition>
        <argsstring>(NRF_SAADC_Type *p_reg, uint8_t channel, nrf_saadc_input_t pselp, nrf_saadc_input_t pseln)</argsstring>
        <name>nrf_saadc_channel_input_set</name>
        <param>
          <type>NRF_SAADC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>channel</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__saadc__hal_1ga28f7a2c0a47d0a5f1254ae6a23fb71e2" kindref="member">nrf_saadc_input_t</ref></type>
          <declname>pselp</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__saadc__hal_1ga28f7a2c0a47d0a5f1254ae6a23fb71e2" kindref="member">nrf_saadc_input_t</ref></type>
          <declname>pseln</declname>
        </param>
        <briefdescription>
<para>Function for configuring the input pins for the specified SAADC channel. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">channel</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel number. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pselp</parametername>
</parameternamelist>
<parameterdescription>
<para>Positive input. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pseln</parametername>
</parameternamelist>
<parameterdescription>
<para>Negative input. Set to <ref refid="group__nrf__saadc__hal_1gab2b904fd842250f953752e186fd7ba66" kindref="member">NRF_SAADC_INPUT_DISABLED</ref> in single ended mode. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_saadc.h" line="905" column="24" bodyfile="hal/nrf_saadc.h" bodystart="905" bodyend="925" declfile="hal/nrf_saadc.h" declline="530" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__saadc__hal_1ga727fff4c406e29364c28ad51f4422108" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_saadc_channel_pos_input_set</definition>
        <argsstring>(NRF_SAADC_Type *p_reg, uint8_t channel, nrf_saadc_input_t pselp)</argsstring>
        <name>nrf_saadc_channel_pos_input_set</name>
        <param>
          <type>NRF_SAADC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>channel</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__saadc__hal_1ga28f7a2c0a47d0a5f1254ae6a23fb71e2" kindref="member">nrf_saadc_input_t</ref></type>
          <declname>pselp</declname>
        </param>
        <briefdescription>
<para>Function for configuring the positive input pin for the specified SAADC channel. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">channel</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel number. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pselp</parametername>
</parameternamelist>
<parameterdescription>
<para>Positive input. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_saadc.h" line="927" column="24" bodyfile="hal/nrf_saadc.h" bodystart="927" bodyend="940" declfile="hal/nrf_saadc.h" declline="542" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__saadc__hal_1ga4c26cdf7597a21a26f0656dcd0211fd1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_saadc_channel_limits_set</definition>
        <argsstring>(NRF_SAADC_Type *p_reg, uint8_t channel, int16_t low, int16_t high)</argsstring>
        <name>nrf_saadc_channel_limits_set</name>
        <param>
          <type>NRF_SAADC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>channel</declname>
        </param>
        <param>
          <type>int16_t</type>
          <declname>low</declname>
        </param>
        <param>
          <type>int16_t</type>
          <declname>high</declname>
        </param>
        <briefdescription>
<para>Function for setting the SAADC channel monitoring limits. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">channel</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel number. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">low</parametername>
</parameternamelist>
<parameterdescription>
<para>Low limit. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">high</parametername>
</parameternamelist>
<parameterdescription>
<para>High limit. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_saadc.h" line="942" column="24" bodyfile="hal/nrf_saadc.h" bodystart="942" bodyend="950" declfile="hal/nrf_saadc.h" declline="554" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__saadc__hal_1gaabd7bf41a8bcbcd011e0b4b0625ad8b2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_saadc_int_set</definition>
        <argsstring>(NRF_SAADC_Type *p_reg, uint32_t mask)</argsstring>
        <name>nrf_saadc_int_set</name>
        <param>
          <type>NRF_SAADC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Function for setting the configuration of SAADC interrupts. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Interrupts configuration to be set. Use <ref refid="group__nrf__saadc__hal_1ga82c6d9ccbed7aa753b044ae4216a52e7" kindref="member">nrf_saadc_int_mask_t</ref> values for bit masking. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_saadc.h" line="952" column="24" bodyfile="hal/nrf_saadc.h" bodystart="952" bodyend="955" declfile="hal/nrf_saadc.h" declline="566" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__saadc__hal_1gaa8487e94e0de1dd9fc3cb9eda33a896d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_saadc_int_enable</definition>
        <argsstring>(NRF_SAADC_Type *p_reg, uint32_t mask)</argsstring>
        <name>nrf_saadc_int_enable</name>
        <param>
          <type>NRF_SAADC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Function for enabling specified SAADC interrupts. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of interrupts to be enabled. Use <ref refid="group__nrf__saadc__hal_1ga82c6d9ccbed7aa753b044ae4216a52e7" kindref="member">nrf_saadc_int_mask_t</ref> values for bit masking. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_saadc.h" line="957" column="24" bodyfile="hal/nrf_saadc.h" bodystart="957" bodyend="960" declfile="hal/nrf_saadc.h" declline="575" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__saadc__hal_1ga3a9a24e83f68aa22fad03a04648bad51" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_saadc_int_enable_check</definition>
        <argsstring>(NRF_SAADC_Type const *p_reg, uint32_t mask)</argsstring>
        <name>nrf_saadc_int_enable_check</name>
        <param>
          <type>NRF_SAADC_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Function for checking if the specified interrupts are enabled. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of interrupts to be checked. Use <ref refid="group__nrf__saadc__hal_1ga82c6d9ccbed7aa753b044ae4216a52e7" kindref="member">nrf_saadc_int_mask_t</ref> values for bit masking.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Mask of enabled interrupts. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_saadc.h" line="962" column="28" bodyfile="hal/nrf_saadc.h" bodystart="962" bodyend="965" declfile="hal/nrf_saadc.h" declline="586" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__saadc__hal_1gaae53ced5f63daece6fcb751ac7ed6918" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_saadc_int_disable</definition>
        <argsstring>(NRF_SAADC_Type *p_reg, uint32_t mask)</argsstring>
        <name>nrf_saadc_int_disable</name>
        <param>
          <type>NRF_SAADC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Function for disabling specified interrupts. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of interrupts to be disabled. Use <ref refid="group__nrf__saadc__hal_1ga82c6d9ccbed7aa753b044ae4216a52e7" kindref="member">nrf_saadc_int_mask_t</ref> values for bit masking. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_saadc.h" line="967" column="24" bodyfile="hal/nrf_saadc.h" bodystart="967" bodyend="970" declfile="hal/nrf_saadc.h" declline="595" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__saadc__hal_1gab80147c8bd32b89c716f66e0f44664b2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_saadc_limit_int_get</definition>
        <argsstring>(uint8_t channel, nrf_saadc_limit_t limit_type)</argsstring>
        <name>nrf_saadc_limit_int_get</name>
        <param>
          <type>uint8_t</type>
          <declname>channel</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__saadc__hal_1gad3a1aa4df4fa236684487f209f438a3d" kindref="member">nrf_saadc_limit_t</ref></type>
          <declname>limit_type</declname>
        </param>
        <briefdescription>
<para>Function for generating masks for SAADC channel limit interrupts. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">channel</parametername>
</parameternamelist>
<parameterdescription>
<para>SAADC channel number. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">limit_type</parametername>
</parameternamelist>
<parameterdescription>
<para>Limit type.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Interrupt mask. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_saadc.h" line="972" column="28" bodyfile="hal/nrf_saadc.h" bodystart="972" bodyend="979" declfile="hal/nrf_saadc.h" declline="605" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__saadc__hal_1gab25084e697b176775ed9ebf6b8b9a3fd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE bool</type>
        <definition>NRF_STATIC_INLINE bool nrf_saadc_busy_check</definition>
        <argsstring>(NRF_SAADC_Type const *p_reg)</argsstring>
        <name>nrf_saadc_busy_check</name>
        <param>
          <type>NRF_SAADC_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for checking whether the SAADC is busy. </para>
        </briefdescription>
        <detaileddescription>
<para>This function checks whether the analog-to-digital converter is busy with a conversion.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>The SAADC is busy. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>The SAADC is not busy. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_saadc.h" line="981" column="24" bodyfile="hal/nrf_saadc.h" bodystart="981" bodyend="984" declfile="hal/nrf_saadc.h" declline="618" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__saadc__hal_1ga5fd952bc71c0d7bfc1227570b8e74f6e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_saadc_enable</definition>
        <argsstring>(NRF_SAADC_Type *p_reg)</argsstring>
        <name>nrf_saadc_enable</name>
        <param>
          <type>NRF_SAADC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for enabling the SAADC. </para>
        </briefdescription>
        <detaileddescription>
<para>The analog-to-digital converter must be enabled before use.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_saadc.h" line="986" column="24" bodyfile="hal/nrf_saadc.h" bodystart="986" bodyend="989" declfile="hal/nrf_saadc.h" declline="627" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__saadc__hal_1ga44b8bee69dcb4efea99b2996eecf7956" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_saadc_disable</definition>
        <argsstring>(NRF_SAADC_Type *p_reg)</argsstring>
        <name>nrf_saadc_disable</name>
        <param>
          <type>NRF_SAADC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for disabling the SAADC. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_saadc.h" line="991" column="24" bodyfile="hal/nrf_saadc.h" bodystart="991" bodyend="994" declfile="hal/nrf_saadc.h" declline="634" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__saadc__hal_1ga37805e60b6f56abe9faed4aa1e9ce61c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE bool</type>
        <definition>NRF_STATIC_INLINE bool nrf_saadc_enable_check</definition>
        <argsstring>(NRF_SAADC_Type const *p_reg)</argsstring>
        <name>nrf_saadc_enable_check</name>
        <param>
          <type>NRF_SAADC_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for checking if the SAADC is enabled. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>The SAADC is enabled. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>The SAADC is not enabled. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_saadc.h" line="996" column="24" bodyfile="hal/nrf_saadc.h" bodystart="996" bodyend="999" declfile="hal/nrf_saadc.h" declline="644" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__saadc__hal_1gac1986dcb3b95d37d79d55c0263680867" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_saadc_buffer_init</definition>
        <argsstring>(NRF_SAADC_Type *p_reg, nrf_saadc_value_t *p_buffer, uint32_t size)</argsstring>
        <name>nrf_saadc_buffer_init</name>
        <param>
          <type>NRF_SAADC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__saadc__hal_1gab991b20f4e170101f92956881889b755" kindref="member">nrf_saadc_value_t</ref> *</type>
          <declname>p_buffer</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Function for initializing the SAADC result buffer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">p_buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the result buffer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">size</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the buffer (in 8-bit or 16-bit samples). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_saadc.h" line="1001" column="24" bodyfile="hal/nrf_saadc.h" bodystart="1001" bodyend="1019" declfile="hal/nrf_saadc.h" declline="653" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__saadc__hal_1ga1facfe7d84b1304b2bb4dc2d14111e8a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_saadc_buffer_pointer_set</definition>
        <argsstring>(NRF_SAADC_Type *p_reg, nrf_saadc_value_t *p_buffer)</argsstring>
        <name>nrf_saadc_buffer_pointer_set</name>
        <param>
          <type>NRF_SAADC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__saadc__hal_1gab991b20f4e170101f92956881889b755" kindref="member">nrf_saadc_value_t</ref> *</type>
          <declname>p_buffer</declname>
        </param>
        <briefdescription>
<para>Function for setting the SAADC result buffer pointer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">p_buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the result buffer. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_saadc.h" line="1021" column="24" bodyfile="hal/nrf_saadc.h" bodystart="1021" bodyend="1029" declfile="hal/nrf_saadc.h" declline="663" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__saadc__hal_1ga2a76ad513d6670515127f3b97810667e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE <ref refid="group__nrf__saadc__hal_1gab991b20f4e170101f92956881889b755" kindref="member">nrf_saadc_value_t</ref> *</type>
        <definition>NRF_STATIC_INLINE nrf_saadc_value_t * nrf_saadc_buffer_pointer_get</definition>
        <argsstring>(NRF_SAADC_Type const *p_reg)</argsstring>
        <name>nrf_saadc_buffer_pointer_get</name>
        <param>
          <type>NRF_SAADC_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting the SAADC result buffer pointer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to the result buffer. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_saadc.h" line="1031" column="38" bodyfile="hal/nrf_saadc.h" bodystart="1031" bodyend="1038" declfile="hal/nrf_saadc.h" declline="673" declcolumn="38"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__saadc__hal_1gab0c2fd3c8bd02b9ea19876ff6a856e98" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint16_t</type>
        <definition>NRF_STATIC_INLINE uint16_t nrf_saadc_amount_get</definition>
        <argsstring>(NRF_SAADC_Type const *p_reg)</argsstring>
        <name>nrf_saadc_amount_get</name>
        <param>
          <type>NRF_SAADC_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting the number of samples written to the result buffer since the previous START task. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Number of 8-bit or 16-bit samples written to the buffer. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_saadc.h" line="1040" column="28" bodyfile="hal/nrf_saadc.h" bodystart="1040" bodyend="1056" declfile="hal/nrf_saadc.h" declline="683" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__saadc__hal_1gae3a1f1453c20051e27cb75ce2616fe33" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_saadc_resolution_set</definition>
        <argsstring>(NRF_SAADC_Type *p_reg, nrf_saadc_resolution_t resolution)</argsstring>
        <name>nrf_saadc_resolution_set</name>
        <param>
          <type>NRF_SAADC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__saadc__hal_1gaeb0690ef4bdb8ec1cfac1f6c6a496630" kindref="member">nrf_saadc_resolution_t</ref></type>
          <declname>resolution</declname>
        </param>
        <briefdescription>
<para>Function for setting the SAADC sample resolution. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">resolution</parametername>
</parameternamelist>
<parameterdescription>
<para>Bit resolution. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_saadc.h" line="1058" column="24" bodyfile="hal/nrf_saadc.h" bodystart="1058" bodyend="1062" declfile="hal/nrf_saadc.h" declline="691" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__saadc__hal_1ga9c6df1f0637afe78a841e59d6c0d05da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE <ref refid="group__nrf__saadc__hal_1gaeb0690ef4bdb8ec1cfac1f6c6a496630" kindref="member">nrf_saadc_resolution_t</ref></type>
        <definition>NRF_STATIC_INLINE nrf_saadc_resolution_t nrf_saadc_resolution_get</definition>
        <argsstring>(NRF_SAADC_Type const *p_reg)</argsstring>
        <name>nrf_saadc_resolution_get</name>
        <param>
          <type>NRF_SAADC_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting the SAADC sample resolution. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Sample resolution. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_saadc.h" line="1064" column="42" bodyfile="hal/nrf_saadc.h" bodystart="1064" bodyend="1067" declfile="hal/nrf_saadc.h" declline="701" declcolumn="42"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__saadc__hal_1ga73dd0c72c90270e07a4fccbb88a7e635" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_saadc_oversample_set</definition>
        <argsstring>(NRF_SAADC_Type *p_reg, nrf_saadc_oversample_t oversample)</argsstring>
        <name>nrf_saadc_oversample_set</name>
        <param>
          <type>NRF_SAADC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__saadc__hal_1ga62ca4cd30bcc0c4a306135c957f7ed39" kindref="member">nrf_saadc_oversample_t</ref></type>
          <declname>oversample</declname>
        </param>
        <briefdescription>
<para>Function for configuring the oversampling feature. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">oversample</parametername>
</parameternamelist>
<parameterdescription>
<para>Oversampling mode. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_saadc.h" line="1069" column="24" bodyfile="hal/nrf_saadc.h" bodystart="1069" bodyend="1073" declfile="hal/nrf_saadc.h" declline="709" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__saadc__hal_1gae2e2bd4002cb6badb4ce4c65d630d1d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE <ref refid="group__nrf__saadc__hal_1ga62ca4cd30bcc0c4a306135c957f7ed39" kindref="member">nrf_saadc_oversample_t</ref></type>
        <definition>NRF_STATIC_INLINE nrf_saadc_oversample_t nrf_saadc_oversample_get</definition>
        <argsstring>(NRF_SAADC_Type const *p_reg)</argsstring>
        <name>nrf_saadc_oversample_get</name>
        <param>
          <type>NRF_SAADC_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting the oversampling feature configuration. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Oversampling configuration. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_saadc.h" line="1075" column="42" bodyfile="hal/nrf_saadc.h" bodystart="1075" bodyend="1078" declfile="hal/nrf_saadc.h" declline="719" declcolumn="42"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__saadc__hal_1ga2111f43b238ee2297026937fd63122ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_saadc_oversample_sample_count_get</definition>
        <argsstring>(nrf_saadc_oversample_t oversample)</argsstring>
        <name>nrf_saadc_oversample_sample_count_get</name>
        <param>
          <type><ref refid="group__nrf__saadc__hal_1ga62ca4cd30bcc0c4a306135c957f7ed39" kindref="member">nrf_saadc_oversample_t</ref></type>
          <declname>oversample</declname>
        </param>
        <briefdescription>
<para>Function for getting the sample count needed for one averaged result for a given oversampling configuration. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">oversample</parametername>
</parameternamelist>
<parameterdescription>
<para>Oversampling configuration.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Sample count. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_saadc.h" line="1080" column="28" bodyfile="hal/nrf_saadc.h" bodystart="1080" bodyend="1083" declfile="hal/nrf_saadc.h" declline="729" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__saadc__hal_1gafe3f681a38517ddd7a7b510ff028f630" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_saadc_continuous_mode_enable</definition>
        <argsstring>(NRF_SAADC_Type *p_reg, uint16_t cc)</argsstring>
        <name>nrf_saadc_continuous_mode_enable</name>
        <param>
          <type>NRF_SAADC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>cc</declname>
        </param>
        <briefdescription>
<para>Function for enabling the continuous sampling. </para>
        </briefdescription>
        <detaileddescription>
<para>This function configures the SAADC internal timer to automatically take new samples at a fixed sample rate. Trigger the START task to begin continuous sampling. To stop the sampling, trigger the STOP task.</para>
<para><simplesect kind="note"><para>The internal timer can only be used when a single input channel is enabled.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">cc</parametername>
</parameternamelist>
<parameterdescription>
<para>Capture and compare value. Sample rate is 16 MHz/cc. Valid <computeroutput>CC</computeroutput> range is from 80 to 2047. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_saadc.h" line="1085" column="24" bodyfile="hal/nrf_saadc.h" bodystart="1085" bodyend="1090" declfile="hal/nrf_saadc.h" declline="744" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__saadc__hal_1gaed86f2ee2f007709d6743c431bf9a6fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE bool</type>
        <definition>NRF_STATIC_INLINE bool nrf_saadc_continuous_mode_enable_check</definition>
        <argsstring>(NRF_SAADC_Type const *p_reg)</argsstring>
        <name>nrf_saadc_continuous_mode_enable_check</name>
        <param>
          <type>NRF_SAADC_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for checking if the continuous sampling is enabled. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>The continuous sampling is enabled. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>The continuous sampling is disabled. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_saadc.h" line="1092" column="24" bodyfile="hal/nrf_saadc.h" bodystart="1092" bodyend="1096" declfile="hal/nrf_saadc.h" declline="755" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__saadc__hal_1ga2d83cf54c0286dc51724f910a9155056" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_saadc_continuous_mode_disable</definition>
        <argsstring>(NRF_SAADC_Type *p_reg)</argsstring>
        <name>nrf_saadc_continuous_mode_disable</name>
        <param>
          <type>NRF_SAADC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for disabling the continuous sampling. </para>
        </briefdescription>
        <detaileddescription>
<para>New samples can still be acquired by manually triggering the SAMPLE task or by PPI.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_saadc.h" line="1098" column="24" bodyfile="hal/nrf_saadc.h" bodystart="1098" bodyend="1101" declfile="hal/nrf_saadc.h" declline="764" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__saadc__hal_1ga1032292d6a90f73e484c7d6afaa2cb34" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_saadc_linearity_calibration_coeff_set</definition>
        <argsstring>(NRF_SAADC_Type *p_reg, uint8_t index, uint32_t coeff)</argsstring>
        <name>nrf_saadc_linearity_calibration_coeff_set</name>
        <param>
          <type>NRF_SAADC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>index</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>coeff</declname>
        </param>
        <briefdescription>
<para>Function for setting linearity calibration coefficient. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">index</parametername>
</parameternamelist>
<parameterdescription>
<para>Coefficient number. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">coeff</parametername>
</parameternamelist>
<parameterdescription>
<para>Value of the coefficient. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_saadc.h" line="1104" column="24" bodyfile="hal/nrf_saadc.h" bodystart="1104" bodyend="1111" declfile="hal/nrf_saadc.h" declline="774" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__saadc__hal_1gad11784fbf6f342900ce6fe4339a9ed1c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_saadc_linearity_calibration_coeff_get</definition>
        <argsstring>(NRF_SAADC_Type const *p_reg, uint8_t index)</argsstring>
        <name>nrf_saadc_linearity_calibration_coeff_get</name>
        <param>
          <type>NRF_SAADC_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Function for getting linearity calibration coefficient. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">index</parametername>
</parameternamelist>
<parameterdescription>
<para>Coefficient number.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Value of the coefficient. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_saadc.h" line="1113" column="28" bodyfile="hal/nrf_saadc.h" bodystart="1113" bodyend="1118" declfile="hal/nrf_saadc.h" declline="786" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__saadc__hal_1ga941ace352581ba7295b0f3c09a3570f1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_saadc_channel_init</definition>
        <argsstring>(NRF_SAADC_Type *p_reg, uint8_t channel, nrf_saadc_channel_config_t const *config)</argsstring>
        <name>nrf_saadc_channel_init</name>
        <param>
          <type>NRF_SAADC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>channel</declname>
        </param>
        <param>
          <type><ref refid="structnrf__saadc__channel__config__t" kindref="compound">nrf_saadc_channel_config_t</ref> const *</type>
          <declname>config</declname>
        </param>
        <briefdescription>
<para>Function for initializing the SAADC channel. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">channel</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel number. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">config</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the channel configuration structure. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_saadc.h" line="1121" column="24" bodyfile="hal/nrf_saadc.h" bodystart="1121" bodyend="1144" declfile="hal/nrf_saadc.h" declline="797" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__saadc__hal_1ga0e2c3e00c21adb8298fcf13eb618bb93" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_saadc_burst_set</definition>
        <argsstring>(NRF_SAADC_Type *p_reg, uint8_t channel, nrf_saadc_burst_t burst)</argsstring>
        <name>nrf_saadc_burst_set</name>
        <param>
          <type>NRF_SAADC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>channel</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__saadc__hal_1ga46239c9f1d0af686aa09373d68c9a61a" kindref="member">nrf_saadc_burst_t</ref></type>
          <declname>burst</declname>
        </param>
        <briefdescription>
<para>Function for configuring the burst mode for the specified channel. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">channel</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel number. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">burst</parametername>
</parameternamelist>
<parameterdescription>
<para>Burst mode setting. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_saadc.h" line="1146" column="24" bodyfile="hal/nrf_saadc.h" bodystart="1146" bodyend="1152" declfile="hal/nrf_saadc.h" declline="808" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__saadc__hal_1ga428c82af7d71a2d4ac62fea00d0ec66b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE int16_t</type>
        <definition>NRF_STATIC_INLINE int16_t nrf_saadc_value_min_get</definition>
        <argsstring>(nrf_saadc_resolution_t resolution)</argsstring>
        <name>nrf_saadc_value_min_get</name>
        <param>
          <type><ref refid="group__nrf__saadc__hal_1gaeb0690ef4bdb8ec1cfac1f6c6a496630" kindref="member">nrf_saadc_resolution_t</ref></type>
          <declname>resolution</declname>
        </param>
        <briefdescription>
<para>Function for getting the minimum value of the conversion result. </para>
        </briefdescription>
        <detaileddescription>
<para>The minimum value of the conversion result depends on the configured resolution.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">resolution</parametername>
</parameternamelist>
<parameterdescription>
<para>Bit resolution.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Minimum value of the conversion result. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_saadc.h" line="1154" column="27" bodyfile="hal/nrf_saadc.h" bodystart="1154" bodyend="1175" declfile="hal/nrf_saadc.h" declline="821" declcolumn="27"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__saadc__hal_1gafee2b4a40ff7fdb6c5b8ade61b859878" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE int16_t</type>
        <definition>NRF_STATIC_INLINE int16_t nrf_saadc_value_max_get</definition>
        <argsstring>(nrf_saadc_resolution_t resolution)</argsstring>
        <name>nrf_saadc_value_max_get</name>
        <param>
          <type><ref refid="group__nrf__saadc__hal_1gaeb0690ef4bdb8ec1cfac1f6c6a496630" kindref="member">nrf_saadc_resolution_t</ref></type>
          <declname>resolution</declname>
        </param>
        <briefdescription>
<para>Function for getting the maximum value of the conversion result. </para>
        </briefdescription>
        <detaileddescription>
<para>The maximum value of the conversion result depends on the configured resolution.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">resolution</parametername>
</parameternamelist>
<parameterdescription>
<para>Bit resolution.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Maximum value of the conversion result. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_saadc.h" line="1177" column="27" bodyfile="hal/nrf_saadc.h" bodystart="1177" bodyend="1198" declfile="hal/nrf_saadc.h" declline="832" declcolumn="27"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__nrf__saadc__hal_1ga8beaf4b8656ae5a6e08370cd6b93dbe7" prot="public" static="no">
        <name>NRF_SAADC_LIMITS_INT_OFFSET</name>
        <initializer>    <ref refid="group__nrfx__common_1ga3a3c912a8618b4181054a51dc49e6bd4" kindref="member">NRFX_MIN</ref>(SAADC_INTENSET_CH0LIMITH_Pos, SAADC_INTENSET_CH0LIMITL_Pos)</initializer>
        <briefdescription>
<para>Symbol specifying the offset of interrupt bitmask for limits of all channels. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_saadc.h" line="51" column="9" bodyfile="hal/nrf_saadc.h" bodystart="51" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__saadc__hal_1gac20d814557511379d047a7fae9f50286" prot="public" static="no">
        <name>NRF_SAADC_ALL_CHANNELS_LIMITS_INT_MASK</name>
        <initializer>    ((uint32_t)(((1 &lt;&lt; SAADC_CH_NUM) - 1) &lt;&lt; <ref refid="group__nrf__saadc__hal_1ga8beaf4b8656ae5a6e08370cd6b93dbe7" kindref="member">NRF_SAADC_LIMITS_INT_OFFSET</ref>))</initializer>
        <briefdescription>
<para>Symbol specifying the interrupt bitmask for limits of all channels. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_saadc.h" line="55" column="9" bodyfile="hal/nrf_saadc.h" bodystart="55" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__saadc__hal_1gaf8ecd89d6dff458ea7b5758720f2206c" prot="public" static="no">
        <name>NRF_SAADC_HAS_ACQTIME_ENUM</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Symbol indicating whether the configuration of acquisition time using predefined values is present. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_saadc.h" line="60" column="9" bodyfile="hal/nrf_saadc.h" bodystart="60" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__saadc__hal_1ga1ad1584b87bf46e7128b24569c51994f" prot="public" static="no">
        <name>NRF_SAADC_HAS_CONVTIME</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Symbol indicating whether the configuration of conversion time is present. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_saadc.h" line="67" column="9" bodyfile="hal/nrf_saadc.h" bodystart="67" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__saadc__hal_1ga404180f8c1f70181c1fa18f80fa5c2b2" prot="public" static="no">
        <name>NRF_SAADC_HAS_LIN_CAL</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Symbol indicating whether the configuration of linearity calibration coefficients is present. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_saadc.h" line="74" column="9" bodyfile="hal/nrf_saadc.h" bodystart="74" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__saadc__hal_1gad208af8488dff8665cc7d26294101ddb" prot="public" static="no">
        <name>NRF_SAADC_HAS_AIN_AS_PIN</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Symbol indicating whether configuration of analog input using pin number is present. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_saadc.h" line="81" column="9" bodyfile="hal/nrf_saadc.h" bodystart="81" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__saadc__hal_1ga55baf1fdbd14824d4bf32a16f01ef33d" prot="public" static="no">
        <name>NRF_SAADC_HAS_DMA_REG</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Symbol indicating whether dedicated DMA register is present. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_saadc.h" line="88" column="9" bodyfile="hal/nrf_saadc.h" bodystart="88" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__saadc__hal_1ga81f350f2227ba02ecfdef11a9ad99d9f" prot="public" static="no">
        <name>NRF_SAADC_HAS_DMA_EVENTS</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Symbol indicating whether SAADC DMA events are present. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_saadc.h" line="95" column="9" bodyfile="hal/nrf_saadc.h" bodystart="95" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__saadc__hal_1gaa5661e8ffcbe53a029c29d6ba0583c44" prot="public" static="no">
        <name>NRF_SAADC_HAS_CH_CONFIG_RES</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Symbol indicating whether SAADC channel resistor control is present. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_saadc.h" line="102" column="9" bodyfile="hal/nrf_saadc.h" bodystart="102" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__saadc__hal_1gad502160997b1d84e2920f7a12b12c1b4" prot="public" static="no">
        <name>NRF_SAADC_CONVTIME_MAX</name>
        <initializer>SAADC_CH_CONFIG_TCONV_Max</initializer>
        <briefdescription>
<para>Symbol specifying maximum value of conversion time. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_saadc.h" line="114" column="9" bodyfile="hal/nrf_saadc.h" bodystart="114" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__saadc__hal_1ga8787fbd8eab6641623e0a879f573623b" prot="public" static="no">
        <name>NRF_SAADC_LIN_CAL_MAX_COUNT</name>
        <initializer>SAADC_TRIM_LINCALCOEFF_MaxCount</initializer>
        <briefdescription>
<para>Symbol specifying maximum count of linearity calibration coefficients. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_saadc.h" line="119" column="9" bodyfile="hal/nrf_saadc.h" bodystart="119" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__saadc__hal_1gad5fbfcb2d28ba5939df9d9e690a02918" prot="public" static="no">
        <name>NRF_SAADC_LIN_CAL_MAX</name>
        <initializer>SAADC_TRIM_LINCALCOEFF_VAL_Max</initializer>
        <briefdescription>
<para>Symbol specifying maximum value of linearity calibration coefficient. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_saadc.h" line="122" column="9" bodyfile="hal/nrf_saadc.h" bodystart="122" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__saadc__hal_1ga86e4c313938ca27b03ce26de863d6aaf" prot="public" static="no">
        <name>NRF_SAADC_8BIT_SAMPLE_WIDTH</name>
        <initializer>8</initializer>
        <briefdescription>
<para>Symbol specifying width of the 8-bit sample in bits. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_saadc.h" line="127" column="9" bodyfile="hal/nrf_saadc.h" bodystart="127" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__saadc__hal_1gab2b904fd842250f953752e186fd7ba66" prot="public" static="no">
        <name>NRF_SAADC_INPUT_DISABLED</name>
        <initializer>((<ref refid="group__nrf__saadc__hal_1ga28f7a2c0a47d0a5f1254ae6a23fb71e2" kindref="member">nrf_saadc_input_t</ref>)UINT32_MAX)</initializer>
        <briefdescription>
<para>Symbol specifying disconnected analog input. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_saadc.h" line="146" column="9" bodyfile="hal/nrf_saadc.h" bodystart="146" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Hardware access layer for managing the SAADC peripheral. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
