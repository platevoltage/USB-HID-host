<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="group__nrfx__ram__ctrl" kind="group">
    <compoundname>nrfx_ram_ctrl</compoundname>
    <title>Generic RAM Control layer</title>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__nrfx__ram__ctrl_1ga1df9dda02a1a203e609c3180f3949c66" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nrfx_ram_ctrl_power_enable_set</definition>
        <argsstring>(void const *p_object, size_t length, bool enable)</argsstring>
        <name>nrfx_ram_ctrl_power_enable_set</name>
        <param>
          <type>void const *</type>
          <declname>p_object</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>length</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>enable</declname>
        </param>
        <briefdescription>
<para>Function for setting if the RAM sections containing specified object are to be powered on or off. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_object</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">length</parametername>
</parameternamelist>
<parameterdescription>
<para>Object size in bytes. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">enable</parametername>
</parameternamelist>
<parameterdescription>
<para>True if RAM sections are to be powered on, false otherwise. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="helpers/nrfx_ram_ctrl.h" line="69" column="6" declfile="helpers/nrfx_ram_ctrl.h" declline="69" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfx__ram__ctrl_1gaf962fe570801ebbcece341f3e7c3aae6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nrfx_ram_ctrl_retention_enable_set</definition>
        <argsstring>(void const *p_object, size_t length, bool enable)</argsstring>
        <name>nrfx_ram_ctrl_retention_enable_set</name>
        <param>
          <type>void const *</type>
          <declname>p_object</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>length</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>enable</declname>
        </param>
        <briefdescription>
<para>Function for setting if the RAM sections containing specified object are to be retained or not. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_object</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">length</parametername>
</parameternamelist>
<parameterdescription>
<para>Object size in bytes. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">enable</parametername>
</parameternamelist>
<parameterdescription>
<para>True if RAM sections are to be retained, false otherwise. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="helpers/nrfx_ram_ctrl.h" line="79" column="6" declfile="helpers/nrfx_ram_ctrl.h" declline="79" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfx__ram__ctrl_1ga46f15cb796caab1f7f75a38f2575fb21" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>__STATIC_INLINE void</type>
        <definition>__STATIC_INLINE void nrfx_ram_ctrl_section_power_mask_enable_set</definition>
        <argsstring>(uint8_t block_idx, uint32_t section_mask, bool enable)</argsstring>
        <name>nrfx_ram_ctrl_section_power_mask_enable_set</name>
        <param>
          <type>uint8_t</type>
          <declname>block_idx</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>section_mask</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>enable</declname>
        </param>
        <briefdescription>
<para>Function for setting if the specified mask of RAM sections contained within given RAM block is to be powered on or off. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">block_idx</parametername>
</parameternamelist>
<parameterdescription>
<para>RAM block index. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">section_mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of RAM sections. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">enable</parametername>
</parameternamelist>
<parameterdescription>
<para>True if RAM sections are to be powered on, false otherwise. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="helpers/nrfx_ram_ctrl.h" line="89" column="22" bodyfile="helpers/nrfx_ram_ctrl.h" bodystart="89" bodyend="118"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfx__ram__ctrl_1ga23338224caa229051cfc09c98d661f6d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>__STATIC_INLINE void</type>
        <definition>__STATIC_INLINE void nrfx_ram_ctrl_section_retention_mask_enable_set</definition>
        <argsstring>(uint8_t block_idx, uint32_t section_mask, bool enable)</argsstring>
        <name>nrfx_ram_ctrl_section_retention_mask_enable_set</name>
        <param>
          <type>uint8_t</type>
          <declname>block_idx</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>section_mask</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>enable</declname>
        </param>
        <briefdescription>
<para>Function for setting if the specified mask of RAM sections contained within given RAM block is to be retained or not. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">block_idx</parametername>
</parameternamelist>
<parameterdescription>
<para>RAM block index. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">section_mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of RAM sections. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">enable</parametername>
</parameternamelist>
<parameterdescription>
<para>True if RAM sections are to be retained, false otherwise. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="helpers/nrfx_ram_ctrl.h" line="128" column="22" bodyfile="helpers/nrfx_ram_ctrl.h" bodystart="128" bodyend="157"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Helper layer that provides a uniform way of controlling the RAM power and retention settings. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
