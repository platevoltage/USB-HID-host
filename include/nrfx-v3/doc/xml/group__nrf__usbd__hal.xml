<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="group__nrf__usbd__hal" kind="group">
    <compoundname>nrf_usbd_hal</compoundname>
    <title>USBD HAL</title>
      <sectiondef kind="user-defined">
      <header>Setup command frame functions.</header>
      <description><para>Functions for setting up command frame part access. </para>
</description>
      <memberdef kind="function" id="group__nrf__usbd__hal_1gad9fa77301e304f15905f04db5ace16de" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint8_t</type>
        <definition>NRF_STATIC_INLINE uint8_t nrf_usbd_setup_bmrequesttype_get</definition>
        <argsstring>(NRF_USBD_Type const *p_reg)</argsstring>
        <name>nrf_usbd_setup_bmrequesttype_get</name>
        <param>
          <type>NRF_USBD_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for reading BMREQUESTTYPE - part of the SETUP packet. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Value of BREQUESTTYPE on the last received SETUP frame. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_usbd.h" line="1179" column="27" bodyfile="hal/nrf_usbd.h" bodystart="1179" bodyend="1182" declfile="hal/nrf_usbd.h" declline="774" declcolumn="31"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__usbd__hal_1ga5fd0236b99b50a8003d22e84b8571f45" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint8_t</type>
        <definition>NRF_STATIC_INLINE uint8_t nrf_usbd_setup_brequest_get</definition>
        <argsstring>(NRF_USBD_Type const *p_reg)</argsstring>
        <name>nrf_usbd_setup_brequest_get</name>
        <param>
          <type>NRF_USBD_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for reading BMREQUEST - part of the SETUP packet. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Value of BREQUEST on the last received SETUP frame. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_usbd.h" line="1184" column="27" bodyfile="hal/nrf_usbd.h" bodystart="1184" bodyend="1187" declfile="hal/nrf_usbd.h" declline="783" declcolumn="31"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__usbd__hal_1gaa425fab84d090108aa23fdab54c4fae3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint16_t</type>
        <definition>NRF_STATIC_INLINE uint16_t nrf_usbd_setup_wvalue_get</definition>
        <argsstring>(NRF_USBD_Type const *p_reg)</argsstring>
        <name>nrf_usbd_setup_wvalue_get</name>
        <param>
          <type>NRF_USBD_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for reading WVALUE - part of the SETUP packet. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Value of WVALUE on the last received SETUP frame. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_usbd.h" line="1189" column="28" bodyfile="hal/nrf_usbd.h" bodystart="1189" bodyend="1193" declfile="hal/nrf_usbd.h" declline="792" declcolumn="32"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__usbd__hal_1gafb4fa211dba6564eb365c50bbebd8c5a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint16_t</type>
        <definition>NRF_STATIC_INLINE uint16_t nrf_usbd_setup_windex_get</definition>
        <argsstring>(NRF_USBD_Type const *p_reg)</argsstring>
        <name>nrf_usbd_setup_windex_get</name>
        <param>
          <type>NRF_USBD_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for reading WINDEX - part of the SETUP packet. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Value of WINDEX on the last received SETUP frame. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_usbd.h" line="1195" column="28" bodyfile="hal/nrf_usbd.h" bodystart="1195" bodyend="1199" declfile="hal/nrf_usbd.h" declline="801" declcolumn="32"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__usbd__hal_1ga0ad7b416191ca996a435e79b2f6c60cd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint16_t</type>
        <definition>NRF_STATIC_INLINE uint16_t nrf_usbd_setup_wlength_get</definition>
        <argsstring>(NRF_USBD_Type const *p_reg)</argsstring>
        <name>nrf_usbd_setup_wlength_get</name>
        <param>
          <type>NRF_USBD_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for reading WLENGTH - part of the SETUP packet. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Value of WLENGTH on the last received SETUP frame. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_usbd.h" line="1201" column="28" bodyfile="hal/nrf_usbd.h" bodystart="1201" bodyend="1205" declfile="hal/nrf_usbd.h" declline="810" declcolumn="32"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="group__nrf__usbd__hal_1gacef518da985b1dea4e65fb035cc3ffb7" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_usbd_task_t</name>
        <enumvalue id="group__nrf__usbd__hal_1ggacef518da985b1dea4e65fb035cc3ffb7aaa692795b5120e01bf399355bf90c18c" prot="public">
          <name>NRF_USBD_TASK_STARTEPIN0</name>
          <initializer>= offsetof(NRF_USBD_Type, TASKS_STARTEPIN[0] )</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Captures the EPIN[0].PTR, EPIN[0].MAXCNT, and EPIN[0].CONFIG registers values, and enables control endpoint IN 0 to respond to traffic from host. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__usbd__hal_1ggacef518da985b1dea4e65fb035cc3ffb7a47bbcd684ff4a662d5ef07efbca96c7d" prot="public">
          <name>NRF_USBD_TASK_STARTEPIN1</name>
          <initializer>= offsetof(NRF_USBD_Type, TASKS_STARTEPIN[1] )</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Captures the EPIN[1].PTR, EPIN[1].MAXCNT, and EPIN[1].CONFIG registers values, and enables data endpoint IN 1 to respond to traffic from host. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__usbd__hal_1ggacef518da985b1dea4e65fb035cc3ffb7a0ab46fe3aca622bb2dbeef5237433e42" prot="public">
          <name>NRF_USBD_TASK_STARTEPIN2</name>
          <initializer>= offsetof(NRF_USBD_Type, TASKS_STARTEPIN[2] )</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Captures the EPIN[2].PTR, EPIN[2].MAXCNT, and EPIN[2].CONFIG registers values, and enables data endpoint IN 2 to respond to traffic from host. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__usbd__hal_1ggacef518da985b1dea4e65fb035cc3ffb7a2814d3219dd0804b7287411f30f91ead" prot="public">
          <name>NRF_USBD_TASK_STARTEPIN3</name>
          <initializer>= offsetof(NRF_USBD_Type, TASKS_STARTEPIN[3] )</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Captures the EPIN[3].PTR, EPIN[3].MAXCNT, and EPIN[3].CONFIG registers values, and enables data endpoint IN 3 to respond to traffic from host. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__usbd__hal_1ggacef518da985b1dea4e65fb035cc3ffb7ae804a47cbdd93d97696bfd18c36a94ee" prot="public">
          <name>NRF_USBD_TASK_STARTEPIN4</name>
          <initializer>= offsetof(NRF_USBD_Type, TASKS_STARTEPIN[4] )</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Captures the EPIN[4].PTR, EPIN[4].MAXCNT, and EPIN[4].CONFIG registers values, and enables data endpoint IN 4 to respond to traffic from host. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__usbd__hal_1ggacef518da985b1dea4e65fb035cc3ffb7af6e7f1750309ae67fe20f3032af514b9" prot="public">
          <name>NRF_USBD_TASK_STARTEPIN5</name>
          <initializer>= offsetof(NRF_USBD_Type, TASKS_STARTEPIN[5] )</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Captures the EPIN[5].PTR, EPIN[5].MAXCNT, and EPIN[5].CONFIG registers values, and enables data endpoint IN 5 to respond to traffic from host. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__usbd__hal_1ggacef518da985b1dea4e65fb035cc3ffb7ad26ab7b45ef225a275e8d239cf0cedf1" prot="public">
          <name>NRF_USBD_TASK_STARTEPIN6</name>
          <initializer>= offsetof(NRF_USBD_Type, TASKS_STARTEPIN[6] )</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Captures the EPIN[6].PTR, EPIN[6].MAXCNT, and EPIN[6].CONFIG registers values, and enables data endpoint IN 6 to respond to traffic from host. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__usbd__hal_1ggacef518da985b1dea4e65fb035cc3ffb7ae5181a7dab48989bbe300e67a26703cd" prot="public">
          <name>NRF_USBD_TASK_STARTEPIN7</name>
          <initializer>= offsetof(NRF_USBD_Type, TASKS_STARTEPIN[7] )</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Captures the EPIN[7].PTR, EPIN[7].MAXCNT, and EPIN[7].CONFIG registers values, and enables data endpoint IN 7 to respond to traffic from host. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__usbd__hal_1ggacef518da985b1dea4e65fb035cc3ffb7a0907bfacd52e75c55970b06b40c6f1d6" prot="public">
          <name>NRF_USBD_TASK_STARTISOIN</name>
          <initializer>= offsetof(NRF_USBD_Type, TASKS_STARTISOIN   )</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Captures the ISOIN.PTR, ISOIN.MAXCNT, and ISOIN.CONFIG registers values, and enables sending data on ISO endpoint 8. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__usbd__hal_1ggacef518da985b1dea4e65fb035cc3ffb7a3a2aa3531997cacc5c710f0b6a3a8bca" prot="public">
          <name>NRF_USBD_TASK_STARTEPOUT0</name>
          <initializer>= offsetof(NRF_USBD_Type, TASKS_STARTEPOUT[0])</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Captures the EPOUT[0].PTR, EPOUT[0].MAXCNT, and EPOUT[0].CONFIG registers values, and enables control endpoint 0 to respond to traffic from host. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__usbd__hal_1ggacef518da985b1dea4e65fb035cc3ffb7aeff7635ea0a9fc83aa4533927c2cb12d" prot="public">
          <name>NRF_USBD_TASK_STARTEPOUT1</name>
          <initializer>= offsetof(NRF_USBD_Type, TASKS_STARTEPOUT[1])</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Captures the EPOUT[1].PTR, EPOUT[1].MAXCNT, and EPOUT[1].CONFIG registers values, and enables data endpoint 1 to respond to traffic from host. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__usbd__hal_1ggacef518da985b1dea4e65fb035cc3ffb7a6ac488aaacf506e91c384e41406254bb" prot="public">
          <name>NRF_USBD_TASK_STARTEPOUT2</name>
          <initializer>= offsetof(NRF_USBD_Type, TASKS_STARTEPOUT[2])</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Captures the EPOUT[2].PTR, EPOUT[2].MAXCNT, and EPOUT[2].CONFIG registers values, and enables data endpoint 2 to respond to traffic from host. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__usbd__hal_1ggacef518da985b1dea4e65fb035cc3ffb7ac1afd870aca0d6f544cd7f8c8dec77b8" prot="public">
          <name>NRF_USBD_TASK_STARTEPOUT3</name>
          <initializer>= offsetof(NRF_USBD_Type, TASKS_STARTEPOUT[3])</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Captures the EPOUT[3].PTR, EPOUT[3].MAXCNT, and EPOUT[3].CONFIG registers values, and enables data endpoint 3 to respond to traffic from host. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__usbd__hal_1ggacef518da985b1dea4e65fb035cc3ffb7a6c070678faad2173be91ecf9c130d803" prot="public">
          <name>NRF_USBD_TASK_STARTEPOUT4</name>
          <initializer>= offsetof(NRF_USBD_Type, TASKS_STARTEPOUT[4])</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Captures the EPOUT[4].PTR, EPOUT[4].MAXCNT, and EPOUT[4].CONFIG registers values, and enables data endpoint 4 to respond to traffic from host. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__usbd__hal_1ggacef518da985b1dea4e65fb035cc3ffb7a6082df80a2229390a497b6a7ad8eaf50" prot="public">
          <name>NRF_USBD_TASK_STARTEPOUT5</name>
          <initializer>= offsetof(NRF_USBD_Type, TASKS_STARTEPOUT[5])</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Captures the EPOUT[5].PTR, EPOUT[5].MAXCNT, and EPOUT[5].CONFIG registers values, and enables data endpoint 5 to respond to traffic from host. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__usbd__hal_1ggacef518da985b1dea4e65fb035cc3ffb7adcda72f0323184b6daa5be2cdf2c8300" prot="public">
          <name>NRF_USBD_TASK_STARTEPOUT6</name>
          <initializer>= offsetof(NRF_USBD_Type, TASKS_STARTEPOUT[6])</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Captures the EPOUT[6].PTR, EPOUT[6].MAXCNT, and EPOUT[6].CONFIG registers values, and enables data endpoint 6 to respond to traffic from host. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__usbd__hal_1ggacef518da985b1dea4e65fb035cc3ffb7aea65678c751ab58f6fed90df07ebf70e" prot="public">
          <name>NRF_USBD_TASK_STARTEPOUT7</name>
          <initializer>= offsetof(NRF_USBD_Type, TASKS_STARTEPOUT[7])</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Captures the EPOUT[7].PTR, EPOUT[7].MAXCNT, and EPOUT[7].CONFIG registers values, and enables data endpoint 7 to respond to traffic from host. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__usbd__hal_1ggacef518da985b1dea4e65fb035cc3ffb7ab1d149e5b95fbb7297a22e196222cb36" prot="public">
          <name>NRF_USBD_TASK_STARTISOOUT</name>
          <initializer>= offsetof(NRF_USBD_Type, TASKS_STARTISOOUT  )</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Captures the ISOOUT.PTR, ISOOUT.MAXCNT, and ISOOUT.CONFIG registers values, and enables receiving of data on ISO endpoint 8. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__usbd__hal_1ggacef518da985b1dea4e65fb035cc3ffb7a4972fc44d7c126e2d70108582c6808d5" prot="public">
          <name>NRF_USBD_TASK_EP0RCVOUT</name>
          <initializer>= offsetof(NRF_USBD_Type, TASKS_EP0RCVOUT    )</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Allows OUT data stage on the control endpoint 0. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__usbd__hal_1ggacef518da985b1dea4e65fb035cc3ffb7a52811cb45db47f85042ab844929e8638" prot="public">
          <name>NRF_USBD_TASK_EP0STATUS</name>
          <initializer>= offsetof(NRF_USBD_Type, TASKS_EP0STATUS    )</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Allows status stage on the control endpoint 0. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__usbd__hal_1ggacef518da985b1dea4e65fb035cc3ffb7ad4a98ee0874ff4f64285dbbebf258bd9" prot="public">
          <name>NRF_USBD_TASK_EP0STALL</name>
          <initializer>= offsetof(NRF_USBD_Type, TASKS_EP0STALL     )</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>STALLs data and status stage on the control endpoint 0. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__usbd__hal_1ggacef518da985b1dea4e65fb035cc3ffb7ac9ba27e40be0a06543e210ae50915cca" prot="public">
          <name>NRF_USBD_TASK_DRIVEDPDM</name>
          <initializer>= offsetof(NRF_USBD_Type, TASKS_DPDMDRIVE    )</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Forces D+ and D-lines to the state defined in the DPDMVALUE register. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__usbd__hal_1ggacef518da985b1dea4e65fb035cc3ffb7a3344ae7c97a03e4c3a24c456f13f50e2" prot="public">
          <name>NRF_USBD_TASK_NODRIVEDPDM</name>
          <initializer>= offsetof(NRF_USBD_Type, TASKS_DPDMNODRIVE  )</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Stops forcing D+ and D- lines to any state (USB engine takes control). </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>USBD tasks. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_usbd.h" line="52" column="1" bodyfile="hal/nrf_usbd.h" bodystart="53" bodyend="77"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__usbd__hal_1ga0187f1cfcba4bbd00158f9b04ec06fe6" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_usbd_event_t</name>
        <enumvalue id="group__nrf__usbd__hal_1gga0187f1cfcba4bbd00158f9b04ec06fe6af83cb0aff273a343ea398411ec6e1537" prot="public">
          <name>NRF_USBD_EVENT_USBRESET</name>
          <initializer>= offsetof(NRF_USBD_Type, EVENTS_USBRESET   )</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Signals that a USB reset condition is detected on the USB lines. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__usbd__hal_1gga0187f1cfcba4bbd00158f9b04ec06fe6ae841c340feff31143770e2b3384a12fb" prot="public">
          <name>NRF_USBD_EVENT_STARTED</name>
          <initializer>= offsetof(NRF_USBD_Type, EVENTS_STARTED    )</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Confirms that the EPIN[n].PTR, EPIN[n].MAXCNT, EPIN[n].CONFIG, or EPOUT[n].PTR, EPOUT[n].MAXCNT, and EPOUT[n].CONFIG registers have been captured on all endpoints reported in the EPSTATUS register. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__usbd__hal_1gga0187f1cfcba4bbd00158f9b04ec06fe6ad04c0755ec5ce1eafe1a12e46c898822" prot="public">
          <name>NRF_USBD_EVENT_ENDEPIN0</name>
          <initializer>= offsetof(NRF_USBD_Type, EVENTS_ENDEPIN[0] )</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>The whole EPIN[0] buffer has been consumed. The RAM buffer can be accessed safely by software. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__usbd__hal_1gga0187f1cfcba4bbd00158f9b04ec06fe6a658cd1bb7e3c3e6f9ea2c9311e0e3162" prot="public">
          <name>NRF_USBD_EVENT_ENDEPIN1</name>
          <initializer>= offsetof(NRF_USBD_Type, EVENTS_ENDEPIN[1] )</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>The whole EPIN[1] buffer has been consumed. The RAM buffer can be accessed safely by software. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__usbd__hal_1gga0187f1cfcba4bbd00158f9b04ec06fe6a2145cb9e6a9f5de4a3ccc0f323b7de3d" prot="public">
          <name>NRF_USBD_EVENT_ENDEPIN2</name>
          <initializer>= offsetof(NRF_USBD_Type, EVENTS_ENDEPIN[2] )</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>The whole EPIN[2] buffer has been consumed. The RAM buffer can be accessed safely by software. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__usbd__hal_1gga0187f1cfcba4bbd00158f9b04ec06fe6a28a65e73e6e125682f483734fdbeb238" prot="public">
          <name>NRF_USBD_EVENT_ENDEPIN3</name>
          <initializer>= offsetof(NRF_USBD_Type, EVENTS_ENDEPIN[3] )</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>The whole EPIN[3] buffer has been consumed. The RAM buffer can be accessed safely by software. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__usbd__hal_1gga0187f1cfcba4bbd00158f9b04ec06fe6a917c50a3234d56030ef445541dda9141" prot="public">
          <name>NRF_USBD_EVENT_ENDEPIN4</name>
          <initializer>= offsetof(NRF_USBD_Type, EVENTS_ENDEPIN[4] )</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>The whole EPIN[4] buffer has been consumed. The RAM buffer can be accessed safely by software. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__usbd__hal_1gga0187f1cfcba4bbd00158f9b04ec06fe6a28b6c47ec54fccae0dcbab0bc332ce28" prot="public">
          <name>NRF_USBD_EVENT_ENDEPIN5</name>
          <initializer>= offsetof(NRF_USBD_Type, EVENTS_ENDEPIN[5] )</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>The whole EPIN[5] buffer has been consumed. The RAM buffer can be accessed safely by software. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__usbd__hal_1gga0187f1cfcba4bbd00158f9b04ec06fe6a1ece33d3fd52f5dd11e82f4a40ba9c42" prot="public">
          <name>NRF_USBD_EVENT_ENDEPIN6</name>
          <initializer>= offsetof(NRF_USBD_Type, EVENTS_ENDEPIN[6] )</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>The whole EPIN[6] buffer has been consumed. The RAM buffer can be accessed safely by software. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__usbd__hal_1gga0187f1cfcba4bbd00158f9b04ec06fe6a24ede0a7230ba2f6705c5594963db249" prot="public">
          <name>NRF_USBD_EVENT_ENDEPIN7</name>
          <initializer>= offsetof(NRF_USBD_Type, EVENTS_ENDEPIN[7] )</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>The whole EPIN[7] buffer has been consumed. The RAM buffer can be accessed safely by software. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__usbd__hal_1gga0187f1cfcba4bbd00158f9b04ec06fe6a5d8be992cabec77f4753060597a1eddc" prot="public">
          <name>NRF_USBD_EVENT_EP0DATADONE</name>
          <initializer>= offsetof(NRF_USBD_Type, EVENTS_EP0DATADONE)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>An acknowledged data transfer has taken place on the control endpoint. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__usbd__hal_1gga0187f1cfcba4bbd00158f9b04ec06fe6a5f870f773392a17f08d9494d7c8f10c6" prot="public">
          <name>NRF_USBD_EVENT_ENDISOIN0</name>
          <initializer>= offsetof(NRF_USBD_Type, EVENTS_ENDISOIN   )</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>The whole ISOIN buffer has been consumed. The RAM buffer can be accessed safely by software. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__usbd__hal_1gga0187f1cfcba4bbd00158f9b04ec06fe6ad5936ba41dfccd2915fc0e2ec3a887bd" prot="public">
          <name>NRF_USBD_EVENT_ENDEPOUT0</name>
          <initializer>= offsetof(NRF_USBD_Type, EVENTS_ENDEPOUT[0])</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>The whole EPOUT[0] buffer has been consumed. The RAM buffer can be accessed safely by software. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__usbd__hal_1gga0187f1cfcba4bbd00158f9b04ec06fe6af21e07f0978c2fbeb063a8ae6155276d" prot="public">
          <name>NRF_USBD_EVENT_ENDEPOUT1</name>
          <initializer>= offsetof(NRF_USBD_Type, EVENTS_ENDEPOUT[1])</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>The whole EPOUT[1] buffer has been consumed. The RAM buffer can be accessed safely by software. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__usbd__hal_1gga0187f1cfcba4bbd00158f9b04ec06fe6abf3746cb4bdbd6e337d9c6c8fd38e6af" prot="public">
          <name>NRF_USBD_EVENT_ENDEPOUT2</name>
          <initializer>= offsetof(NRF_USBD_Type, EVENTS_ENDEPOUT[2])</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>The whole EPOUT[2] buffer has been consumed. The RAM buffer can be accessed safely by software. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__usbd__hal_1gga0187f1cfcba4bbd00158f9b04ec06fe6aa9f75a485be35880d29c84ab369e9c7b" prot="public">
          <name>NRF_USBD_EVENT_ENDEPOUT3</name>
          <initializer>= offsetof(NRF_USBD_Type, EVENTS_ENDEPOUT[3])</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>The whole EPOUT[3] buffer has been consumed. The RAM buffer can be accessed safely by software. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__usbd__hal_1gga0187f1cfcba4bbd00158f9b04ec06fe6a612f10f64675333dffb9fe6b5823e377" prot="public">
          <name>NRF_USBD_EVENT_ENDEPOUT4</name>
          <initializer>= offsetof(NRF_USBD_Type, EVENTS_ENDEPOUT[4])</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>The whole EPOUT[4] buffer has been consumed. The RAM buffer can be accessed safely by software. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__usbd__hal_1gga0187f1cfcba4bbd00158f9b04ec06fe6acca649675f717f169d01aaad0b919f0d" prot="public">
          <name>NRF_USBD_EVENT_ENDEPOUT5</name>
          <initializer>= offsetof(NRF_USBD_Type, EVENTS_ENDEPOUT[5])</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>The whole EPOUT[5] buffer has been consumed. The RAM buffer can be accessed safely by software. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__usbd__hal_1gga0187f1cfcba4bbd00158f9b04ec06fe6a10187f674c06474e4370bca5e4b6df18" prot="public">
          <name>NRF_USBD_EVENT_ENDEPOUT6</name>
          <initializer>= offsetof(NRF_USBD_Type, EVENTS_ENDEPOUT[6])</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>The whole EPOUT[6] buffer has been consumed. The RAM buffer can be accessed safely by software. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__usbd__hal_1gga0187f1cfcba4bbd00158f9b04ec06fe6adf9facfc2406fe5808076c8751d6f2b0" prot="public">
          <name>NRF_USBD_EVENT_ENDEPOUT7</name>
          <initializer>= offsetof(NRF_USBD_Type, EVENTS_ENDEPOUT[7])</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>The whole EPOUT[7] buffer has been consumed. The RAM buffer can be accessed safely by software. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__usbd__hal_1gga0187f1cfcba4bbd00158f9b04ec06fe6a4bbee040b5f6b31a32febdbf90bad881" prot="public">
          <name>NRF_USBD_EVENT_ENDISOOUT0</name>
          <initializer>= offsetof(NRF_USBD_Type, EVENTS_ENDISOOUT  )</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>The whole ISOOUT buffer has been consumed. The RAM buffer can be accessed safely by software. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__usbd__hal_1gga0187f1cfcba4bbd00158f9b04ec06fe6ae3cb91560fe95b107f7e7e324ecc69af" prot="public">
          <name>NRF_USBD_EVENT_SOF</name>
          <initializer>= offsetof(NRF_USBD_Type, EVENTS_SOF        )</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Signals that a SOF (start of frame) condition has been detected on the USB lines. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__usbd__hal_1gga0187f1cfcba4bbd00158f9b04ec06fe6a4dd28ded5479d8b579e4641aa486af00" prot="public">
          <name>NRF_USBD_EVENT_USBEVENT</name>
          <initializer>= offsetof(NRF_USBD_Type, EVENTS_USBEVENT   )</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>An event or an error not covered by the specified events has occurred, check EVENTCAUSE register to find the cause. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__usbd__hal_1gga0187f1cfcba4bbd00158f9b04ec06fe6ac660ce8ed22d201c0af693732a218026" prot="public">
          <name>NRF_USBD_EVENT_EP0SETUP</name>
          <initializer>= offsetof(NRF_USBD_Type, EVENTS_EP0SETUP   )</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>A valid SETUP token has been received (and acknowledged) on the control endpoint. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__usbd__hal_1gga0187f1cfcba4bbd00158f9b04ec06fe6aad1c28abf725d8d615738836e651c24c" prot="public">
          <name>NRF_USBD_EVENT_DATAEP</name>
          <initializer>= offsetof(NRF_USBD_Type, EVENTS_EPDATA     )</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>A data transfer has occurred on a data endpoint, indicated by the EPDATASTATUS register. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>USBD events. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_usbd.h" line="80" column="1" bodyfile="hal/nrf_usbd.h" bodystart="81" bodyend="107"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__usbd__hal_1gafdd0cd13c3c89afb8a05dae04306a81f" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_usbd_short_mask_t</name>
        <enumvalue id="group__nrf__usbd__hal_1ggafdd0cd13c3c89afb8a05dae04306a81fa1b7356a0a28ca3d52198b78ad6fefe4c" prot="public">
          <name>NRF_USBD_SHORT_EP0DATADONE_STARTEPIN0_MASK</name>
          <initializer>= USBD_SHORTS_EP0DATADONE_STARTEPIN0_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Shortcut between EP0DATADONE event and STARTEPIN0 task. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__usbd__hal_1ggafdd0cd13c3c89afb8a05dae04306a81fa0b3f874c1ef8311e523b801fadd4b3e9" prot="public">
          <name>NRF_USBD_SHORT_EP0DATADONE_STARTEPOUT0_MASK</name>
          <initializer>= USBD_SHORTS_EP0DATADONE_STARTEPOUT0_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Shortcut between EP0DATADONE event and STARTEPOUT0 task. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__usbd__hal_1ggafdd0cd13c3c89afb8a05dae04306a81fa81e66f5768d57e60244893d93c1d3bc8" prot="public">
          <name>NRF_USBD_SHORT_EP0DATADONE_EP0STATUS_MASK</name>
          <initializer>= USBD_SHORTS_EP0DATADONE_EP0STATUS_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Shortcut between EP0DATADONE event and EP0STATUS task. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__usbd__hal_1ggafdd0cd13c3c89afb8a05dae04306a81fad0617183c52a6bb7ca15c4e36b3d6e38" prot="public">
          <name>NRF_USBD_SHORT_ENDEPOUT0_EP0STATUS_MASK</name>
          <initializer>= USBD_SHORTS_ENDEPOUT0_EP0STATUS_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Shortcut between ENDEPOUT[0] event and EP0STATUS task. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__usbd__hal_1ggafdd0cd13c3c89afb8a05dae04306a81fa1d863080219bf895b1e723b8201fb2a9" prot="public">
          <name>NRF_USBD_SHORT_ENDEPOUT0_EP0RCVOUT_MASK</name>
          <initializer>= USBD_SHORTS_ENDEPOUT0_EP0RCVOUT_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Shortcut between ENDEPOUT[0] event and EP0RCVOUT task. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>USBD shorts. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_usbd.h" line="110" column="1" bodyfile="hal/nrf_usbd.h" bodystart="111" bodyend="117"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__usbd__hal_1gabb0886b59ca193e84b9405ea55444e99" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_usbd_int_mask_t</name>
        <enumvalue id="group__nrf__usbd__hal_1ggabb0886b59ca193e84b9405ea55444e99ac37d68fdbd9aef08827ce94b49330ad7" prot="public">
          <name>NRF_USBD_INT_USBRESET_MASK</name>
          <initializer>= USBD_INTEN_USBRESET_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Enable or disable interrupt for USBRESET event. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__usbd__hal_1ggabb0886b59ca193e84b9405ea55444e99ada4192c314b47c030ca33d8c4e586305" prot="public">
          <name>NRF_USBD_INT_STARTED_MASK</name>
          <initializer>= USBD_INTEN_STARTED_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Enable or disable interrupt for STARTED event. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__usbd__hal_1ggabb0886b59ca193e84b9405ea55444e99af575309faaea4de9909ee01d1da6debb" prot="public">
          <name>NRF_USBD_INT_ENDEPIN0_MASK</name>
          <initializer>= USBD_INTEN_ENDEPIN0_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Enable or disable interrupt for ENDEPIN[0] event. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__usbd__hal_1ggabb0886b59ca193e84b9405ea55444e99ae5422bd3dce7ac7c604a82c56c565fba" prot="public">
          <name>NRF_USBD_INT_ENDEPIN1_MASK</name>
          <initializer>= USBD_INTEN_ENDEPIN1_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Enable or disable interrupt for ENDEPIN[1] event. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__usbd__hal_1ggabb0886b59ca193e84b9405ea55444e99ae6dd16ba2e80c5d6e42b28925f214e53" prot="public">
          <name>NRF_USBD_INT_ENDEPIN2_MASK</name>
          <initializer>= USBD_INTEN_ENDEPIN2_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Enable or disable interrupt for ENDEPIN[2] event. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__usbd__hal_1ggabb0886b59ca193e84b9405ea55444e99a6fa982339a54bc3a3dd70ee379033a68" prot="public">
          <name>NRF_USBD_INT_ENDEPIN3_MASK</name>
          <initializer>= USBD_INTEN_ENDEPIN3_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Enable or disable interrupt for ENDEPIN[3] event. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__usbd__hal_1ggabb0886b59ca193e84b9405ea55444e99a47f1b11f42f5fabd892f23ef98917b43" prot="public">
          <name>NRF_USBD_INT_ENDEPIN4_MASK</name>
          <initializer>= USBD_INTEN_ENDEPIN4_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Enable or disable interrupt for ENDEPIN[4] event. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__usbd__hal_1ggabb0886b59ca193e84b9405ea55444e99accdc728d1dd0ffb3aa683b2d1dcb1126" prot="public">
          <name>NRF_USBD_INT_ENDEPIN5_MASK</name>
          <initializer>= USBD_INTEN_ENDEPIN5_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Enable or disable interrupt for ENDEPIN[5] event. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__usbd__hal_1ggabb0886b59ca193e84b9405ea55444e99a90c66c4312063be527effed166ef0189" prot="public">
          <name>NRF_USBD_INT_ENDEPIN6_MASK</name>
          <initializer>= USBD_INTEN_ENDEPIN6_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Enable or disable interrupt for ENDEPIN[6] event. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__usbd__hal_1ggabb0886b59ca193e84b9405ea55444e99afd0bbd63552837726376b0294c1ec614" prot="public">
          <name>NRF_USBD_INT_ENDEPIN7_MASK</name>
          <initializer>= USBD_INTEN_ENDEPIN7_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Enable or disable interrupt for ENDEPIN[7] event. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__usbd__hal_1ggabb0886b59ca193e84b9405ea55444e99a748b2373c4e31c7b325bf21ec76cb0f4" prot="public">
          <name>NRF_USBD_INT_EP0DATADONE_MASK</name>
          <initializer>= USBD_INTEN_EP0DATADONE_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Enable or disable interrupt for EP0DATADONE event. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__usbd__hal_1ggabb0886b59ca193e84b9405ea55444e99a880f7153500a33e64bdc99d47281d18e" prot="public">
          <name>NRF_USBD_INT_ENDISOIN0_MASK</name>
          <initializer>= USBD_INTEN_ENDISOIN_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Enable or disable interrupt for ENDISOIN[0] event. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__usbd__hal_1ggabb0886b59ca193e84b9405ea55444e99a5bd2330fe36dd832277019d9486c1120" prot="public">
          <name>NRF_USBD_INT_ENDEPOUT0_MASK</name>
          <initializer>= USBD_INTEN_ENDEPOUT0_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Enable or disable interrupt for ENDEPOUT[0] event. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__usbd__hal_1ggabb0886b59ca193e84b9405ea55444e99ac38bd0cd841901151c1b6454b27a4e06" prot="public">
          <name>NRF_USBD_INT_ENDEPOUT1_MASK</name>
          <initializer>= USBD_INTEN_ENDEPOUT1_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Enable or disable interrupt for ENDEPOUT[1] event. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__usbd__hal_1ggabb0886b59ca193e84b9405ea55444e99a9e00b89329eff80a86818b090a174d09" prot="public">
          <name>NRF_USBD_INT_ENDEPOUT2_MASK</name>
          <initializer>= USBD_INTEN_ENDEPOUT2_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Enable or disable interrupt for ENDEPOUT[2] event. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__usbd__hal_1ggabb0886b59ca193e84b9405ea55444e99a76a9c94091a0e32af6d059bdfbdca865" prot="public">
          <name>NRF_USBD_INT_ENDEPOUT3_MASK</name>
          <initializer>= USBD_INTEN_ENDEPOUT3_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Enable or disable interrupt for ENDEPOUT[3] event. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__usbd__hal_1ggabb0886b59ca193e84b9405ea55444e99aa2151d91bb090113401dfd2c83d491d3" prot="public">
          <name>NRF_USBD_INT_ENDEPOUT4_MASK</name>
          <initializer>= USBD_INTEN_ENDEPOUT4_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Enable or disable interrupt for ENDEPOUT[4] event. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__usbd__hal_1ggabb0886b59ca193e84b9405ea55444e99a767506405908faf164481e4db334484a" prot="public">
          <name>NRF_USBD_INT_ENDEPOUT5_MASK</name>
          <initializer>= USBD_INTEN_ENDEPOUT5_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Enable or disable interrupt for ENDEPOUT[5] event. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__usbd__hal_1ggabb0886b59ca193e84b9405ea55444e99a3fca2864d752b289e59be96918792298" prot="public">
          <name>NRF_USBD_INT_ENDEPOUT6_MASK</name>
          <initializer>= USBD_INTEN_ENDEPOUT6_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Enable or disable interrupt for ENDEPOUT[6] event. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__usbd__hal_1ggabb0886b59ca193e84b9405ea55444e99ab115f6cb829a6b69c5a89c23ddef6ecf" prot="public">
          <name>NRF_USBD_INT_ENDEPOUT7_MASK</name>
          <initializer>= USBD_INTEN_ENDEPOUT7_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Enable or disable interrupt for ENDEPOUT[7] event. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__usbd__hal_1ggabb0886b59ca193e84b9405ea55444e99a241af2b50bf2876d78573d5eae0e2770" prot="public">
          <name>NRF_USBD_INT_ENDISOOUT0_MASK</name>
          <initializer>= USBD_INTEN_ENDISOOUT_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Enable or disable interrupt for ENDISOOUT[0] event. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__usbd__hal_1ggabb0886b59ca193e84b9405ea55444e99a234d4ad6a36d8a9e04b4f1d09ac79540" prot="public">
          <name>NRF_USBD_INT_SOF_MASK</name>
          <initializer>= USBD_INTEN_SOF_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Enable or disable interrupt for SOF event. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__usbd__hal_1ggabb0886b59ca193e84b9405ea55444e99a455c86aa80aa62952865aef26ca3ec6f" prot="public">
          <name>NRF_USBD_INT_USBEVENT_MASK</name>
          <initializer>= USBD_INTEN_USBEVENT_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Enable or disable interrupt for USBEVENT event. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__usbd__hal_1ggabb0886b59ca193e84b9405ea55444e99a596911d01498576994e83241e979d4e5" prot="public">
          <name>NRF_USBD_INT_EP0SETUP_MASK</name>
          <initializer>= USBD_INTEN_EP0SETUP_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Enable or disable interrupt for EP0SETUP event. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__usbd__hal_1ggabb0886b59ca193e84b9405ea55444e99ade8a86638b6c4777f261671ac4a72dca" prot="public">
          <name>NRF_USBD_INT_DATAEP_MASK</name>
          <initializer>= USBD_INTEN_EPDATA_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Enable or disable interrupt for EPDATA event. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>USBD interrupts. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_usbd.h" line="120" column="1" bodyfile="hal/nrf_usbd.h" bodystart="121" bodyend="147"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__usbd__hal_1ga8588a7f666e82f6c441046d924ff197e" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_usbd_eventcause_mask_t</name>
        <enumvalue id="group__nrf__usbd__hal_1gga8588a7f666e82f6c441046d924ff197ea526a378a0bce39373b3521252a404dab" prot="public">
          <name>NRF_USBD_EVENTCAUSE_ISOOUTCRC_MASK</name>
          <initializer>= USBD_EVENTCAUSE_ISOOUTCRC_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>CRC error was detected on isochronous OUT endpoint 8. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__usbd__hal_1gga8588a7f666e82f6c441046d924ff197ea68761f3edd6f26802ec415c63315204d" prot="public">
          <name>NRF_USBD_EVENTCAUSE_SUSPEND_MASK</name>
          <initializer>= USBD_EVENTCAUSE_SUSPEND_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Signals that the USB lines have been seen idle long enough for the device to enter suspend. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__usbd__hal_1gga8588a7f666e82f6c441046d924ff197ea9774c93c16b0f8d3557e1794df33d608" prot="public">
          <name>NRF_USBD_EVENTCAUSE_RESUME_MASK</name>
          <initializer>= USBD_EVENTCAUSE_RESUME_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Signals that a RESUME condition (K state or activity restart) has been detected on the USB lines. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__usbd__hal_1gga8588a7f666e82f6c441046d924ff197eaa71e0597c1c9ca8d665399d56a23b571" prot="public">
          <name>NRF_USBD_EVENTCAUSE_WUREQ_MASK</name>
          <initializer>= USBD_EVENTCAUSE_USBWUALLOWED_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>The USBD peripheral has exited Low Power mode. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__usbd__hal_1gga8588a7f666e82f6c441046d924ff197ea124d310529b710dba2b27bbfeaa23468" prot="public">
          <name>NRF_USBD_EVENTCAUSE_READY_MASK</name>
          <initializer>= USBD_EVENTCAUSE_READY_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>MAC is ready for normal operation, rised few us after USBD enabling. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>EVENTCAUSE register bit masks. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_usbd.h" line="548" column="1" bodyfile="hal/nrf_usbd.h" bodystart="549" bodyend="555"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__usbd__hal_1ga86af0982c97904e6f14200709346f93e" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_usbd_dpdmvalue_t</name>
        <enumvalue id="group__nrf__usbd__hal_1gga86af0982c97904e6f14200709346f93eaa3bb7c1a49d424f6bdfe82463cb86abb" prot="public">
          <name>NRF_USBD_DPDMVALUE_RESUME</name>
          <initializer>= USBD_DPDMVALUE_STATE_Resume</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Generate RESUME signal. Signal is generated for 50<nonbreakablespace/>us or 5<nonbreakablespace/>ms, depending on bus state. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__usbd__hal_1gga86af0982c97904e6f14200709346f93ea5a47d0fdb93688f7dee41660599df12b" prot="public">
          <name>NRF_USBD_DPDMVALUE_J</name>
          <initializer>= USBD_DPDMVALUE_STATE_J</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>D+ Forced high, D- forced low (J state) </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__usbd__hal_1gga86af0982c97904e6f14200709346f93ea5e1e542f5c263ee2d74b5e53887bf7d6" prot="public">
          <name>NRF_USBD_DPMVALUE_K</name>
          <initializer>= USBD_DPDMVALUE_STATE_K</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>D+ Forced low, D- forced high (K state) </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>DPDMVALUE register. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_usbd.h" line="558" column="1" bodyfile="hal/nrf_usbd.h" bodystart="559" bodyend="567"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__usbd__hal_1gac7a52ea2795a7ec86d88d2479115e8ab" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_usbd_dtoggle_t</name>
        <enumvalue id="group__nrf__usbd__hal_1ggac7a52ea2795a7ec86d88d2479115e8abad544fd91f626686855661c029f6783ed" prot="public">
          <name>NRF_USBD_DTOGGLE_NOP</name>
          <initializer>= USBD_DTOGGLE_VALUE_Nop</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>No operation - do not change the current data toggle on the selected endpoint. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__usbd__hal_1ggac7a52ea2795a7ec86d88d2479115e8aba840a6b8fd3f75337a0cf934631722bbe" prot="public">
          <name>NRF_USBD_DTOGGLE_DATA0</name>
          <initializer>= USBD_DTOGGLE_VALUE_Data0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Data toggle is DATA0 on the selected endpoint. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__usbd__hal_1ggac7a52ea2795a7ec86d88d2479115e8aba1457b3fd3ca4bbcdcda2f124bd3bc4d7" prot="public">
          <name>NRF_USBD_DTOGGLE_DATA1</name>
          <initializer>= USBD_DTOGGLE_VALUE_Data1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Data toggle is DATA1 on the selected endpoint. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Data toggle value or operation. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_usbd.h" line="570" column="1" bodyfile="hal/nrf_usbd.h" bodystart="571" bodyend="575"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__usbd__hal_1gadbdc3f9d30d220c792ee698ea3ab290e" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_usbd_epstatus_mask_t</name>
        <enumvalue id="group__nrf__usbd__hal_1ggadbdc3f9d30d220c792ee698ea3ab290ea9930946a2822ff081aa0334b4daaed4b" prot="public">
          <name>NRF_USBD_EPSTATUS_EPIN0_MASK</name>
          <initializer>= USBD_EPSTATUS_EPIN0_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__usbd__hal_1ggadbdc3f9d30d220c792ee698ea3ab290eadf7ba9dc2ea5a140c44e85cde571778d" prot="public">
          <name>NRF_USBD_EPSTATUS_EPIN1_MASK</name>
          <initializer>= USBD_EPSTATUS_EPIN1_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__usbd__hal_1ggadbdc3f9d30d220c792ee698ea3ab290ea9834424b075a571be03f2a43df693707" prot="public">
          <name>NRF_USBD_EPSTATUS_EPIN2_MASK</name>
          <initializer>= USBD_EPSTATUS_EPIN2_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__usbd__hal_1ggadbdc3f9d30d220c792ee698ea3ab290eacd7948757404a6292186f06eba2c0f50" prot="public">
          <name>NRF_USBD_EPSTATUS_EPIN3_MASK</name>
          <initializer>= USBD_EPSTATUS_EPIN3_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__usbd__hal_1ggadbdc3f9d30d220c792ee698ea3ab290ea839d6215c2f8a13f67b29e6738b400ad" prot="public">
          <name>NRF_USBD_EPSTATUS_EPIN4_MASK</name>
          <initializer>= USBD_EPSTATUS_EPIN4_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__usbd__hal_1ggadbdc3f9d30d220c792ee698ea3ab290ea926b99539533e2b23de09e507c8ebaab" prot="public">
          <name>NRF_USBD_EPSTATUS_EPIN5_MASK</name>
          <initializer>= USBD_EPSTATUS_EPIN5_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__usbd__hal_1ggadbdc3f9d30d220c792ee698ea3ab290ea7c858e147834b090dbf109be768b95c6" prot="public">
          <name>NRF_USBD_EPSTATUS_EPIN6_MASK</name>
          <initializer>= USBD_EPSTATUS_EPIN6_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__usbd__hal_1ggadbdc3f9d30d220c792ee698ea3ab290ea145ddd2aec13dc941d405fe517f151fa" prot="public">
          <name>NRF_USBD_EPSTATUS_EPIN7_MASK</name>
          <initializer>= USBD_EPSTATUS_EPIN7_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__usbd__hal_1ggadbdc3f9d30d220c792ee698ea3ab290ea02a098c65ee3bf5d3476af19ec002092" prot="public">
          <name>NRF_USBD_EPSTATUS_EPOUT0_MASK</name>
          <initializer>= USBD_EPSTATUS_EPOUT0_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__usbd__hal_1ggadbdc3f9d30d220c792ee698ea3ab290ea7a00c403af48744512e32ce64eac300d" prot="public">
          <name>NRF_USBD_EPSTATUS_EPOUT1_MASK</name>
          <initializer>= USBD_EPSTATUS_EPOUT1_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__usbd__hal_1ggadbdc3f9d30d220c792ee698ea3ab290ea8b20e0dfa551988c87481553a054e977" prot="public">
          <name>NRF_USBD_EPSTATUS_EPOUT2_MASK</name>
          <initializer>= USBD_EPSTATUS_EPOUT2_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__usbd__hal_1ggadbdc3f9d30d220c792ee698ea3ab290ea0f8f7cacb729f8e647912ebb5767b5c3" prot="public">
          <name>NRF_USBD_EPSTATUS_EPOUT3_MASK</name>
          <initializer>= USBD_EPSTATUS_EPOUT3_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__usbd__hal_1ggadbdc3f9d30d220c792ee698ea3ab290ea7bbe3764bb29a5aeacbe521857688425" prot="public">
          <name>NRF_USBD_EPSTATUS_EPOUT4_MASK</name>
          <initializer>= USBD_EPSTATUS_EPOUT4_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__usbd__hal_1ggadbdc3f9d30d220c792ee698ea3ab290eaea2068754fdffeccd363b3415a42f245" prot="public">
          <name>NRF_USBD_EPSTATUS_EPOUT5_MASK</name>
          <initializer>= USBD_EPSTATUS_EPOUT5_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__usbd__hal_1ggadbdc3f9d30d220c792ee698ea3ab290ea9ac1d86018357bc34f17d2232f227405" prot="public">
          <name>NRF_USBD_EPSTATUS_EPOUT6_MASK</name>
          <initializer>= USBD_EPSTATUS_EPOUT6_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__usbd__hal_1ggadbdc3f9d30d220c792ee698ea3ab290eab00bfaff080250255dbb318aff30727e" prot="public">
          <name>NRF_USBD_EPSTATUS_EPOUT7_MASK</name>
          <initializer>= USBD_EPSTATUS_EPOUT7_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>EPSTATUS bit masks. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_usbd.h" line="578" column="1" bodyfile="hal/nrf_usbd.h" bodystart="579" bodyend="597"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__usbd__hal_1gaf16119bd371d2d9bae89ffe785b8a08b" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_usbd_dataepstatus_mask_t</name>
        <enumvalue id="group__nrf__usbd__hal_1ggaf16119bd371d2d9bae89ffe785b8a08ba26164dd9e22a7bb8d26408dcffafb3a2" prot="public">
          <name>NRF_USBD_EPDATASTATUS_EPIN1_MASK</name>
          <initializer>= USBD_EPDATASTATUS_EPIN1_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__usbd__hal_1ggaf16119bd371d2d9bae89ffe785b8a08bab8c9f4ac55d304226357942d4e97e752" prot="public">
          <name>NRF_USBD_EPDATASTATUS_EPIN2_MASK</name>
          <initializer>= USBD_EPDATASTATUS_EPIN2_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__usbd__hal_1ggaf16119bd371d2d9bae89ffe785b8a08ba8713a0b49a4a76c7b25c3174d9a954cb" prot="public">
          <name>NRF_USBD_EPDATASTATUS_EPIN3_MASK</name>
          <initializer>= USBD_EPDATASTATUS_EPIN3_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__usbd__hal_1ggaf16119bd371d2d9bae89ffe785b8a08baf7deffc53c77167e17de553c0b2e55e5" prot="public">
          <name>NRF_USBD_EPDATASTATUS_EPIN4_MASK</name>
          <initializer>= USBD_EPDATASTATUS_EPIN4_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__usbd__hal_1ggaf16119bd371d2d9bae89ffe785b8a08ba7d620b08703f2f6907b801c1ffea5eaf" prot="public">
          <name>NRF_USBD_EPDATASTATUS_EPIN5_MASK</name>
          <initializer>= USBD_EPDATASTATUS_EPIN5_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__usbd__hal_1ggaf16119bd371d2d9bae89ffe785b8a08ba5a6f4e98cb71616f6dc11228f996a8d2" prot="public">
          <name>NRF_USBD_EPDATASTATUS_EPIN6_MASK</name>
          <initializer>= USBD_EPDATASTATUS_EPIN6_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__usbd__hal_1ggaf16119bd371d2d9bae89ffe785b8a08ba92264f1eade7b382672cc65ceb5f1ea4" prot="public">
          <name>NRF_USBD_EPDATASTATUS_EPIN7_MASK</name>
          <initializer>= USBD_EPDATASTATUS_EPIN7_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__usbd__hal_1ggaf16119bd371d2d9bae89ffe785b8a08ba8788930f35e9a80cc5e38f60d82d035f" prot="public">
          <name>NRF_USBD_EPDATASTATUS_EPOUT1_MASK</name>
          <initializer>= USBD_EPDATASTATUS_EPOUT1_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__usbd__hal_1ggaf16119bd371d2d9bae89ffe785b8a08ba5233a17d82421fb84aa13c72ad6d5a60" prot="public">
          <name>NRF_USBD_EPDATASTATUS_EPOUT2_MASK</name>
          <initializer>= USBD_EPDATASTATUS_EPOUT2_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__usbd__hal_1ggaf16119bd371d2d9bae89ffe785b8a08ba073c3cb6b9886e2d4f6b29a646dccb07" prot="public">
          <name>NRF_USBD_EPDATASTATUS_EPOUT3_MASK</name>
          <initializer>= USBD_EPDATASTATUS_EPOUT3_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__usbd__hal_1ggaf16119bd371d2d9bae89ffe785b8a08ba668b2d97366e75cc6f91920609b140d9" prot="public">
          <name>NRF_USBD_EPDATASTATUS_EPOUT4_MASK</name>
          <initializer>= USBD_EPDATASTATUS_EPOUT4_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__usbd__hal_1ggaf16119bd371d2d9bae89ffe785b8a08ba30b40d896bd6715cde549e410c04d27b" prot="public">
          <name>NRF_USBD_EPDATASTATUS_EPOUT5_MASK</name>
          <initializer>= USBD_EPDATASTATUS_EPOUT5_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__usbd__hal_1ggaf16119bd371d2d9bae89ffe785b8a08ba154cbac580af144e2c4503256b6b3cb4" prot="public">
          <name>NRF_USBD_EPDATASTATUS_EPOUT6_MASK</name>
          <initializer>= USBD_EPDATASTATUS_EPOUT6_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__usbd__hal_1ggaf16119bd371d2d9bae89ffe785b8a08ba5fa040b97a4d7e29188e7012061e1b5b" prot="public">
          <name>NRF_USBD_EPDATASTATUS_EPOUT7_MASK</name>
          <initializer>= USBD_EPDATASTATUS_EPOUT7_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>DATAEPSTATUS bit masks. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_usbd.h" line="600" column="1" bodyfile="hal/nrf_usbd.h" bodystart="601" bodyend="617"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__usbd__hal_1ga2b397851455aff39727f26fa7f52a26c" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_usbd_isosplit_t</name>
        <enumvalue id="group__nrf__usbd__hal_1gga2b397851455aff39727f26fa7f52a26ca75c5f68dab4ec2a06a61f5bedbde1b68" prot="public">
          <name>NRF_USBD_ISOSPLIT_ONEDIR</name>
          <initializer>= USBD_ISOSPLIT_SPLIT_OneDir</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Full buffer dedicated to either ISO IN or OUT. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__usbd__hal_1gga2b397851455aff39727f26fa7f52a26cafa3a5cc6980ae430de05d2fa27941b58" prot="public">
          <name>NRF_USBD_ISOSPLIT_HALF</name>
          <initializer>= USBD_ISOSPLIT_SPLIT_HalfIN</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Buffer divided in half. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>ISOSPLIT configurations. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_usbd.h" line="620" column="1" bodyfile="hal/nrf_usbd.h" bodystart="621" bodyend="624"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__usbd__hal_1ga2328f0becb99ca74db0490cd48af4861" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_usbd_isoinconfig_t</name>
        <enumvalue id="group__nrf__usbd__hal_1gga2328f0becb99ca74db0490cd48af4861af5220a5dd7d3def691031ebfc83e27be" prot="public">
          <name>NRF_USBD_ISOINCONFIG_NORESP</name>
          <initializer>= USBD_ISOINCONFIG_RESPONSE_NoResp</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Endpoint does not respond to an ISO IN token when no data is ready. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__usbd__hal_1gga2328f0becb99ca74db0490cd48af4861ac85cee2b3da471763645cfbf36bbbff5" prot="public">
          <name>NRF_USBD_ISOINCONFIG_ZERODATA</name>
          <initializer>= USBD_ISOINCONFIG_RESPONSE_ZeroData</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Endpoint responds with a zero-length data packet to an ISO IN token when no data is ready. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>ISOINCONFIG configurations. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_usbd.h" line="627" column="1" bodyfile="hal/nrf_usbd.h" bodystart="628" bodyend="631"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__nrf__usbd__hal_1ga5b6305bb613dbbe0fa8fe0c946113053" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_usbd_task_trigger</definition>
        <argsstring>(NRF_USBD_Type *p_reg, nrf_usbd_task_t task)</argsstring>
        <name>nrf_usbd_task_trigger</name>
        <param>
          <type>NRF_USBD_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__usbd__hal_1gacef518da985b1dea4e65fb035cc3ffb7" kindref="member">nrf_usbd_task_t</ref></type>
          <declname>task</declname>
        </param>
        <briefdescription>
<para>Function for activating the specified USBD task. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">task</parametername>
</parameternamelist>
<parameterdescription>
<para>Task to be activated. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_usbd.h" line="322" column="24" bodyfile="hal/nrf_usbd.h" bodystart="322" bodyend="326" declfile="hal/nrf_usbd.h" declline="156" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__usbd__hal_1ga5d91d10e21fdcd9e9256eb2ac99db807" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_usbd_task_address_get</definition>
        <argsstring>(NRF_USBD_Type const *p_reg, nrf_usbd_task_t task)</argsstring>
        <name>nrf_usbd_task_address_get</name>
        <param>
          <type>NRF_USBD_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__usbd__hal_1gacef518da985b1dea4e65fb035cc3ffb7" kindref="member">nrf_usbd_task_t</ref></type>
          <declname>task</declname>
        </param>
        <briefdescription>
<para>Function for returning the address of the specified USBD task register. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">task</parametername>
</parameternamelist>
<parameterdescription>
<para>Task.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Task address. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_usbd.h" line="328" column="28" bodyfile="hal/nrf_usbd.h" bodystart="328" bodyend="332" declfile="hal/nrf_usbd.h" declline="166" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__usbd__hal_1gad3766f49d2d34f7e5bd7a39e2c4cc030" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_usbd_event_clear</definition>
        <argsstring>(NRF_USBD_Type *p_reg, nrf_usbd_event_t event)</argsstring>
        <name>nrf_usbd_event_clear</name>
        <param>
          <type>NRF_USBD_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__usbd__hal_1ga0187f1cfcba4bbd00158f9b04ec06fe6" kindref="member">nrf_usbd_event_t</ref></type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>Function for clearing the specified event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_usbd.h" line="334" column="24" bodyfile="hal/nrf_usbd.h" bodystart="334" bodyend="338" declfile="hal/nrf_usbd.h" declline="175" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__usbd__hal_1ga819a09be036542e509f2fcceccf18c86" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE bool</type>
        <definition>NRF_STATIC_INLINE bool nrf_usbd_event_check</definition>
        <argsstring>(NRF_USBD_Type const *p_reg, nrf_usbd_event_t event)</argsstring>
        <name>nrf_usbd_event_check</name>
        <param>
          <type>NRF_USBD_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__usbd__hal_1ga0187f1cfcba4bbd00158f9b04ec06fe6" kindref="member">nrf_usbd_event_t</ref></type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>Function for retrieving the state of the USBD event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event to be checked.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>The event has been generated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>The event has not been generated. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_usbd.h" line="340" column="24" bodyfile="hal/nrf_usbd.h" bodystart="340" bodyend="343" declfile="hal/nrf_usbd.h" declline="186" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__usbd__hal_1ga6ba54cb078b7ac770ab19407d2dd5b5e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE bool</type>
        <definition>NRF_STATIC_INLINE bool nrf_usbd_event_get_and_clear</definition>
        <argsstring>(NRF_USBD_Type *p_reg, nrf_usbd_event_t event)</argsstring>
        <name>nrf_usbd_event_get_and_clear</name>
        <param>
          <type>NRF_USBD_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__usbd__hal_1ga0187f1cfcba4bbd00158f9b04ec06fe6" kindref="member">nrf_usbd_event_t</ref></type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>Function for getting and clearing the state of the specified event. </para>
        </briefdescription>
        <detaileddescription>
<para>This function checks the state of the event and clears it.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>The event was set. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>The event was not set. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_usbd.h" line="345" column="24" bodyfile="hal/nrf_usbd.h" bodystart="345" bodyend="353" declfile="hal/nrf_usbd.h" declline="199" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__usbd__hal_1gaa8d89568dfc90f11a13cc4ec011614a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_usbd_event_address_get</definition>
        <argsstring>(NRF_USBD_Type const *p_reg, nrf_usbd_event_t event)</argsstring>
        <name>nrf_usbd_event_address_get</name>
        <param>
          <type>NRF_USBD_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__usbd__hal_1ga0187f1cfcba4bbd00158f9b04ec06fe6" kindref="member">nrf_usbd_event_t</ref></type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>Function for returning the address of the specified USBD event register. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Address. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_usbd.h" line="355" column="28" bodyfile="hal/nrf_usbd.h" bodystart="355" bodyend="359" declfile="hal/nrf_usbd.h" declline="209" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__usbd__hal_1ga848a66d0f7750d3c112c6e273b63eab0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_usbd_shorts_enable</definition>
        <argsstring>(NRF_USBD_Type *p_reg, uint32_t mask)</argsstring>
        <name>nrf_usbd_shorts_enable</name>
        <param>
          <type>NRF_USBD_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Function for setting shortcuts. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Shortcut mask. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_usbd.h" line="361" column="24" bodyfile="hal/nrf_usbd.h" bodystart="361" bodyend="364" declfile="hal/nrf_usbd.h" declline="218" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__usbd__hal_1ga2fc4c421f2458cdaca584f38f19fc373" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_usbd_shorts_disable</definition>
        <argsstring>(NRF_USBD_Type *p_reg, uint32_t mask)</argsstring>
        <name>nrf_usbd_shorts_disable</name>
        <param>
          <type>NRF_USBD_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Function for clearing shortcuts. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Shortcut mask. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_usbd.h" line="366" column="24" bodyfile="hal/nrf_usbd.h" bodystart="366" bodyend="377" declfile="hal/nrf_usbd.h" declline="226" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__usbd__hal_1ga4fdfbd1cac43daab01d95d68403799c7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_usbd_shorts_get</definition>
        <argsstring>(NRF_USBD_Type const *p_reg)</argsstring>
        <name>nrf_usbd_shorts_get</name>
        <param>
          <type>NRF_USBD_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting the shortcut mask. </para>
        </briefdescription>
        <detaileddescription>
<para>Function returns shortcut register.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Flags of the currently enabled shortcuts. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_usbd.h" line="379" column="28" bodyfile="hal/nrf_usbd.h" bodystart="379" bodyend="382" declfile="hal/nrf_usbd.h" declline="237" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__usbd__hal_1gab8394a8e2a2238621dd641533827e904" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_usbd_int_enable</definition>
        <argsstring>(NRF_USBD_Type *p_reg, uint32_t mask)</argsstring>
        <name>nrf_usbd_int_enable</name>
        <param>
          <type>NRF_USBD_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Function for enabling the selected interrupts. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of interrupts to be enabled. Use <ref refid="group__nrf__usbd__hal_1gabb0886b59ca193e84b9405ea55444e99" kindref="member">nrf_usbd_int_mask_t</ref> values for bit masking. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_usbd.h" line="384" column="24" bodyfile="hal/nrf_usbd.h" bodystart="384" bodyend="387" declfile="hal/nrf_usbd.h" declline="246" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__usbd__hal_1gacc0de9e2275bb65dd566400f45ac73f2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_usbd_int_enable_check</definition>
        <argsstring>(NRF_USBD_Type const *p_reg, uint32_t mask)</argsstring>
        <name>nrf_usbd_int_enable_check</name>
        <param>
          <type>NRF_USBD_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Function for checking if the specified interrupts are enabled. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of interrupts to be checked. Use <ref refid="group__nrf__usbd__hal_1gabb0886b59ca193e84b9405ea55444e99" kindref="member">nrf_usbd_int_mask_t</ref> values for bit masking.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Mask of enabled interrupts. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_usbd.h" line="389" column="28" bodyfile="hal/nrf_usbd.h" bodystart="389" bodyend="392" declfile="hal/nrf_usbd.h" declline="257" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__usbd__hal_1ga66829e1a9cd3920b2ff5b17fb3d39569" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_usbd_int_enable_get</definition>
        <argsstring>(NRF_USBD_Type const *p_reg)</argsstring>
        <name>nrf_usbd_int_enable_get</name>
        <param>
          <type>NRF_USBD_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for retrieving the information about the enabled interrupts. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The flags of the enabled interrupts. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_usbd.h" line="394" column="28" bodyfile="hal/nrf_usbd.h" bodystart="394" bodyend="397" declfile="hal/nrf_usbd.h" declline="266" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__usbd__hal_1ga71ac25b07069e1509d8005c56902f1fd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_usbd_int_disable</definition>
        <argsstring>(NRF_USBD_Type *p_reg, uint32_t mask)</argsstring>
        <name>nrf_usbd_int_disable</name>
        <param>
          <type>NRF_USBD_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Function for disabling the selected interrupts. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of interrupts to be disabled. Use <ref refid="group__nrf__usbd__hal_1gabb0886b59ca193e84b9405ea55444e99" kindref="member">nrf_usbd_int_mask_t</ref> values for bit masking. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_usbd.h" line="399" column="24" bodyfile="hal/nrf_usbd.h" bodystart="399" bodyend="402" declfile="hal/nrf_usbd.h" declline="275" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__usbd__hal_1ga562e57247a2d9890b9468d0bd73e10ed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_usbd_enable</definition>
        <argsstring>(NRF_USBD_Type *p_reg)</argsstring>
        <name>nrf_usbd_enable</name>
        <param>
          <type>NRF_USBD_Type *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for enabling the USBD. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_usbd.h" line="1092" column="24" bodyfile="hal/nrf_usbd.h" bodystart="1092" bodyend="1096" declfile="hal/nrf_usbd.h" declline="638" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__usbd__hal_1ga560e5d2709b79666577a22053b29d257" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_usbd_disable</definition>
        <argsstring>(NRF_USBD_Type *p_reg)</argsstring>
        <name>nrf_usbd_disable</name>
        <param>
          <type>NRF_USBD_Type *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for disabling the USBD. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_usbd.h" line="1098" column="24" bodyfile="hal/nrf_usbd.h" bodystart="1098" bodyend="1102" declfile="hal/nrf_usbd.h" declline="645" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__usbd__hal_1ga6d9e732f036188c7bcffd40e1af8ddfb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_usbd_eventcause_get</definition>
        <argsstring>(NRF_USBD_Type const *p_reg)</argsstring>
        <name>nrf_usbd_eventcause_get</name>
        <param>
          <type>NRF_USBD_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting the EVENTCAUSE register. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Flag values defined in <ref refid="group__nrf__usbd__hal_1ga8588a7f666e82f6c441046d924ff197e" kindref="member">nrf_usbd_eventcause_mask_t</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_usbd.h" line="1104" column="28" bodyfile="hal/nrf_usbd.h" bodystart="1104" bodyend="1107" declfile="hal/nrf_usbd.h" declline="654" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__usbd__hal_1ga09314d6cf8bf067c28c4be5f6f900ee9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_usbd_eventcause_clear</definition>
        <argsstring>(NRF_USBD_Type *p_reg, uint32_t flags)</argsstring>
        <name>nrf_usbd_eventcause_clear</name>
        <param>
          <type>NRF_USBD_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>flags</declname>
        </param>
        <briefdescription>
<para>Function for clearing the EVENTCAUSE flags. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">flags</parametername>
</parameternamelist>
<parameterdescription>
<para>Flags defined in <ref refid="group__nrf__usbd__hal_1ga8588a7f666e82f6c441046d924ff197e" kindref="member">nrf_usbd_eventcause_mask_t</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_usbd.h" line="1109" column="24" bodyfile="hal/nrf_usbd.h" bodystart="1109" bodyend="1113" declfile="hal/nrf_usbd.h" declline="662" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__usbd__hal_1gafdbf646da698addceb7fccbf6f19562d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_usbd_eventcause_get_and_clear</definition>
        <argsstring>(NRF_USBD_Type *p_reg)</argsstring>
        <name>nrf_usbd_eventcause_get_and_clear</name>
        <param>
          <type>NRF_USBD_Type *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting the EVENTCAUSE register and clearing flags that are set. </para>
        </briefdescription>
        <detaileddescription>
<para>The safest way to return current EVENTCAUSE register. All the flags that are returned would be cleared inside EVENTCAUSE register.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Flag values defined in <ref refid="group__nrf__usbd__hal_1ga8588a7f666e82f6c441046d924ff197e" kindref="member">nrf_usbd_eventcause_mask_t</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_usbd.h" line="1115" column="28" bodyfile="hal/nrf_usbd.h" bodystart="1115" bodyend="1121" declfile="hal/nrf_usbd.h" declline="674" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__usbd__hal_1ga4b4a86b907d9d16354916efa13c913f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_usbd_halted_get</definition>
        <argsstring>(NRF_USBD_Type const *p_reg, uint8_t ep)</argsstring>
        <name>nrf_usbd_halted_get</name>
        <param>
          <type>NRF_USBD_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>ep</declname>
        </param>
        <briefdescription>
<para>Function for getting the HALTEDEPIN register value. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Use this function for the response for GetStatus() request to endpoint. To check whether the endpoint is stalled in the code, use <ref refid="group__nrf__usbd__hal_1gae6a606967bf03d76c70bf22552a94617" kindref="member">nrf_usbd_ep_is_stall</ref>.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">ep</parametername>
</parameternamelist>
<parameterdescription>
<para>Endpoint number with IN or OUT flag.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The value of the HALTEDEPIN or HALTEDOUT register for the selected endpoint. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_usbd.h" line="1123" column="28" bodyfile="hal/nrf_usbd.h" bodystart="1123" bodyend="1134" declfile="hal/nrf_usbd.h" declline="687" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__usbd__hal_1gae6a606967bf03d76c70bf22552a94617" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE bool</type>
        <definition>NRF_STATIC_INLINE bool nrf_usbd_ep_is_stall</definition>
        <argsstring>(NRF_USBD_Type const *p_reg, uint8_t ep)</argsstring>
        <name>nrf_usbd_ep_is_stall</name>
        <param>
          <type>NRF_USBD_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>ep</declname>
        </param>
        <briefdescription>
<para>Function for checking whether the selected endpoint is stalled. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to be used as a syntax sweeter for <ref refid="group__nrf__usbd__hal_1ga4b4a86b907d9d16354916efa13c913f4" kindref="member">nrf_usbd_halted_get</ref>.</para>
<para>Also as the isochronous endpoint cannot be halted - it returns always false if isochronous endpoint is checked.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">ep</parametername>
</parameternamelist>
<parameterdescription>
<para>Endpoint number with IN or OUT flag.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>The endpoint is halted. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>The endpoint is not halted. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_usbd.h" line="1136" column="24" bodyfile="hal/nrf_usbd.h" bodystart="1136" bodyend="1141" declfile="hal/nrf_usbd.h" declline="703" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__usbd__hal_1ga6bf521fe906e06186dc3b1633cd334d0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_usbd_epstatus_get</definition>
        <argsstring>(NRF_USBD_Type const *p_reg)</argsstring>
        <name>nrf_usbd_epstatus_get</name>
        <param>
          <type>NRF_USBD_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting EPSTATUS register value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Flag values defined in <ref refid="group__nrf__usbd__hal_1gadbdc3f9d30d220c792ee698ea3ab290e" kindref="member">nrf_usbd_epstatus_mask_t</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_usbd.h" line="1143" column="28" bodyfile="hal/nrf_usbd.h" bodystart="1143" bodyend="1146" declfile="hal/nrf_usbd.h" declline="712" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__usbd__hal_1ga8aad5300a3ad73ce92b98a123282c714" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_usbd_epstatus_clear</definition>
        <argsstring>(NRF_USBD_Type *p_reg, uint32_t flags)</argsstring>
        <name>nrf_usbd_epstatus_clear</name>
        <param>
          <type>NRF_USBD_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>flags</declname>
        </param>
        <briefdescription>
<para>Function for clearing EPSTATUS register value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">flags</parametername>
</parameternamelist>
<parameterdescription>
<para>Flags defined in <ref refid="group__nrf__usbd__hal_1gadbdc3f9d30d220c792ee698ea3ab290e" kindref="member">nrf_usbd_epstatus_mask_t</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_usbd.h" line="1148" column="24" bodyfile="hal/nrf_usbd.h" bodystart="1148" bodyend="1151" declfile="hal/nrf_usbd.h" declline="720" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__usbd__hal_1gac1a2a0466ceee8179df9d7d3a7e865ad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_usbd_epstatus_get_and_clear</definition>
        <argsstring>(NRF_USBD_Type *p_reg)</argsstring>
        <name>nrf_usbd_epstatus_get_and_clear</name>
        <param>
          <type>NRF_USBD_Type *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting and clearing EPSTATUS register value. </para>
        </briefdescription>
        <detaileddescription>
<para>Function clears all flags in register set before returning its value.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Flag values defined in <ref refid="group__nrf__usbd__hal_1gadbdc3f9d30d220c792ee698ea3ab290e" kindref="member">nrf_usbd_epstatus_mask_t</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_usbd.h" line="1153" column="28" bodyfile="hal/nrf_usbd.h" bodystart="1153" bodyend="1159" declfile="hal/nrf_usbd.h" declline="731" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__usbd__hal_1ga23746eeddcdc074aa2639fe406212a3e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_usbd_epdatastatus_get</definition>
        <argsstring>(NRF_USBD_Type const *p_reg)</argsstring>
        <name>nrf_usbd_epdatastatus_get</name>
        <param>
          <type>NRF_USBD_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting DATAEPSTATUS register value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Flag values defined in <ref refid="group__nrf__usbd__hal_1gaf16119bd371d2d9bae89ffe785b8a08b" kindref="member">nrf_usbd_dataepstatus_mask_t</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_usbd.h" line="1161" column="28" bodyfile="hal/nrf_usbd.h" bodystart="1161" bodyend="1164" declfile="hal/nrf_usbd.h" declline="740" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__usbd__hal_1ga165b2891148dc620c4105f1b430832ca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_usbd_epdatastatus_clear</definition>
        <argsstring>(NRF_USBD_Type *p_reg, uint32_t flags)</argsstring>
        <name>nrf_usbd_epdatastatus_clear</name>
        <param>
          <type>NRF_USBD_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>flags</declname>
        </param>
        <briefdescription>
<para>Function for clearing DATAEPSTATUS register value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">flags</parametername>
</parameternamelist>
<parameterdescription>
<para>Flags defined in <ref refid="group__nrf__usbd__hal_1gaf16119bd371d2d9bae89ffe785b8a08b" kindref="member">nrf_usbd_dataepstatus_mask_t</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_usbd.h" line="1166" column="24" bodyfile="hal/nrf_usbd.h" bodystart="1166" bodyend="1169" declfile="hal/nrf_usbd.h" declline="748" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__usbd__hal_1gadfa04941d3bcefa5119bc69ec39cb259" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_usbd_epdatastatus_get_and_clear</definition>
        <argsstring>(NRF_USBD_Type *p_reg)</argsstring>
        <name>nrf_usbd_epdatastatus_get_and_clear</name>
        <param>
          <type>NRF_USBD_Type *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting and clearing DATAEPSTATUS register value. </para>
        </briefdescription>
        <detaileddescription>
<para>Function clears all flags in register set before returning its value.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Flag values defined in <ref refid="group__nrf__usbd__hal_1gaf16119bd371d2d9bae89ffe785b8a08b" kindref="member">nrf_usbd_dataepstatus_mask_t</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_usbd.h" line="1171" column="28" bodyfile="hal/nrf_usbd.h" bodystart="1171" bodyend="1177" declfile="hal/nrf_usbd.h" declline="759" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__usbd__hal_1ga484d691a3f3ac383b700cafe2b2d2ad2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE size_t</type>
        <definition>NRF_STATIC_INLINE size_t nrf_usbd_epout_size_get</definition>
        <argsstring>(NRF_USBD_Type const *p_reg, uint8_t ep)</argsstring>
        <name>nrf_usbd_epout_size_get</name>
        <param>
          <type>NRF_USBD_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>ep</declname>
        </param>
        <briefdescription>
<para>Function for getting the number of received bytes on the selected endpoint. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This function can be used on bulk, interrupt, and isochronous endpoints. </para>
</simplesect>
<simplesect kind="note"><para>For the function that returns different value for the ISOOUT zero transfer or no transfer at all, see the <ref refid="group__nrf__usbd__hal_1ga781e617b1d8866be26f485f3b7f8320f" kindref="member">nrf_usbd_episoout_size_get</ref> function. This function will return 0 for both cases.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">ep</parametername>
</parameternamelist>
<parameterdescription>
<para>Endpoint identifier.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Number of received bytes. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_usbd.h" line="1207" column="26" bodyfile="hal/nrf_usbd.h" bodystart="1207" bodyend="1223" declfile="hal/nrf_usbd.h" declline="826" declcolumn="26"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__usbd__hal_1ga781e617b1d8866be26f485f3b7f8320f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE size_t</type>
        <definition>NRF_STATIC_INLINE size_t nrf_usbd_episoout_size_get</definition>
        <argsstring>(NRF_USBD_Type const *p_reg, uint8_t ep)</argsstring>
        <name>nrf_usbd_episoout_size_get</name>
        <param>
          <type>NRF_USBD_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>ep</declname>
        </param>
        <briefdescription>
<para>Function for getting number of the received bytes on isochronous endpoint. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">ep</parametername>
</parameternamelist>
<parameterdescription>
<para>Endpoint identifier, must be an isochronous OUT endpoint.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Number of bytes received or <ref refid="group__nrf__usbd__hal_1gae8241e0e42223e58adb98e2fb7b71a3f" kindref="member">NRF_USBD_EPISOOUT_NO_DATA</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_usbd.h" line="1225" column="26" bodyfile="hal/nrf_usbd.h" bodystart="1225" bodyend="1242" declfile="hal/nrf_usbd.h" declline="836" declcolumn="26"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__usbd__hal_1gaf64d7d3c97e6dd3f6cfd0ba8b5297ca2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_usbd_epout_clear</definition>
        <argsstring>(NRF_USBD_Type *p_reg, uint8_t ep)</argsstring>
        <name>nrf_usbd_epout_clear</name>
        <param>
          <type>NRF_USBD_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>ep</declname>
        </param>
        <briefdescription>
<para>Function for clearing OUT endpoint to accept any new incoming traffic. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">ep</parametername>
</parameternamelist>
<parameterdescription>
<para>Endpoint identifier. Only OUT interrupt/bulk endpoints are accepted. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_usbd.h" line="1244" column="24" bodyfile="hal/nrf_usbd.h" bodystart="1244" bodyend="1249" declfile="hal/nrf_usbd.h" declline="844" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__usbd__hal_1gacde4d643e37439183c87b23d9a3a077a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_usbd_pullup_enable</definition>
        <argsstring>(NRF_USBD_Type *p_reg)</argsstring>
        <name>nrf_usbd_pullup_enable</name>
        <param>
          <type>NRF_USBD_Type *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for enabling the USB pullup. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_usbd.h" line="1251" column="24" bodyfile="hal/nrf_usbd.h" bodystart="1251" bodyend="1255" declfile="hal/nrf_usbd.h" declline="851" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__usbd__hal_1gabf52b8f824fcdcb9ff10aaaecdfcabe5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_usbd_pullup_disable</definition>
        <argsstring>(NRF_USBD_Type *p_reg)</argsstring>
        <name>nrf_usbd_pullup_disable</name>
        <param>
          <type>NRF_USBD_Type *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for disabling the USB pullup. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_usbd.h" line="1257" column="24" bodyfile="hal/nrf_usbd.h" bodystart="1257" bodyend="1261" declfile="hal/nrf_usbd.h" declline="858" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__usbd__hal_1ga0c4627bb70c2fdaf5f5e65edca4e2739" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE bool</type>
        <definition>NRF_STATIC_INLINE bool nrf_usbd_pullup_check</definition>
        <argsstring>(NRF_USBD_Type const *p_reg)</argsstring>
        <name>nrf_usbd_pullup_check</name>
        <param>
          <type>NRF_USBD_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for returning the current the USB pullup state. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>The USB pullup is enabled. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>The USB pullup is disabled. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_usbd.h" line="1263" column="24" bodyfile="hal/nrf_usbd.h" bodystart="1263" bodyend="1266" declfile="hal/nrf_usbd.h" declline="868" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__usbd__hal_1ga3f0f369fe4c04df616590d69487339c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_usbd_dpdmvalue_set</definition>
        <argsstring>(NRF_USBD_Type *p_reg, nrf_usbd_dpdmvalue_t val)</argsstring>
        <name>nrf_usbd_dpdmvalue_set</name>
        <param>
          <type>NRF_USBD_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__usbd__hal_1ga86af0982c97904e6f14200709346f93e" kindref="member">nrf_usbd_dpdmvalue_t</ref></type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Function for configuring the value to be forced on the bus on the DRIVEDPDM task. </para>
        </briefdescription>
        <detaileddescription>
<para>The selected state will be forced on the bus when <ref refid="group__nrf__usbd__hal_1ggacef518da985b1dea4e65fb035cc3ffb7ac9ba27e40be0a06543e210ae50915cca" kindref="member">NRF_USBD_TASK_DRIVEDPDM</ref> is set. The state will be removed from the bus on <ref refid="group__nrf__usbd__hal_1ggacef518da985b1dea4e65fb035cc3ffb7a3344ae7c97a03e4c3a24c456f13f50e2" kindref="member">NRF_USBD_TASK_NODRIVEDPDM</ref> and the control will be returned to the USBD peripheral.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">val</parametername>
</parameternamelist>
<parameterdescription>
<para>State to be set. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_usbd.h" line="1268" column="24" bodyfile="hal/nrf_usbd.h" bodystart="1268" bodyend="1271" declfile="hal/nrf_usbd.h" declline="880" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__usbd__hal_1ga60b7f36031cd0ae233d609ab390eae84" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_usbd_dtoggle_set</definition>
        <argsstring>(NRF_USBD_Type *p_reg, uint8_t ep, nrf_usbd_dtoggle_t op)</argsstring>
        <name>nrf_usbd_dtoggle_set</name>
        <param>
          <type>NRF_USBD_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>ep</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__usbd__hal_1gac7a52ea2795a7ec86d88d2479115e8ab" kindref="member">nrf_usbd_dtoggle_t</ref></type>
          <declname>op</declname>
        </param>
        <briefdescription>
<para>Function for setting the data toggle. </para>
        </briefdescription>
        <detaileddescription>
<para>Configuration of the current state of data toggling.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">ep</parametername>
</parameternamelist>
<parameterdescription>
<para>Endpoint number with the information about its direction. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">op</parametername>
</parameternamelist>
<parameterdescription>
<para>Operation to execute. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_usbd.h" line="1273" column="24" bodyfile="hal/nrf_usbd.h" bodystart="1273" bodyend="1282" declfile="hal/nrf_usbd.h" declline="891" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__usbd__hal_1ga1c270f17c425d5d9c844aed147e973a9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE <ref refid="group__nrf__usbd__hal_1gac7a52ea2795a7ec86d88d2479115e8ab" kindref="member">nrf_usbd_dtoggle_t</ref></type>
        <definition>NRF_STATIC_INLINE nrf_usbd_dtoggle_t nrf_usbd_dtoggle_get</definition>
        <argsstring>(NRF_USBD_Type *p_reg, uint8_t ep)</argsstring>
        <name>nrf_usbd_dtoggle_get</name>
        <param>
          <type>NRF_USBD_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>ep</declname>
        </param>
        <briefdescription>
<para>Function for getting the data toggle. </para>
        </briefdescription>
        <detaileddescription>
<para>Get the current state of data toggling.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">ep</parametername>
</parameternamelist>
<parameterdescription>
<para>Endpoint number to return the information about current data toggling.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>NRF_USBD_DTOGGLE_DATA0</parametername>
</parameternamelist>
<parameterdescription>
<para>Data toggle is DATA0 on selected endpoint. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NRF_USBD_DTOGGLE_DATA1</parametername>
</parameternamelist>
<parameterdescription>
<para>Data toggle is DATA1 on selected endpoint. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_usbd.h" line="1284" column="38" bodyfile="hal/nrf_usbd.h" bodystart="1284" bodyend="1291" declfile="hal/nrf_usbd.h" declline="906" declcolumn="38"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__usbd__hal_1gaf17b7e12a6373351f12a81b361c12fff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE bool</type>
        <definition>NRF_STATIC_INLINE bool nrf_usbd_ep_enable_check</definition>
        <argsstring>(NRF_USBD_Type const *p_reg, uint8_t ep)</argsstring>
        <name>nrf_usbd_ep_enable_check</name>
        <param>
          <type>NRF_USBD_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>ep</declname>
        </param>
        <briefdescription>
<para>Function for checking whether the endpoint is enabled. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">ep</parametername>
</parameternamelist>
<parameterdescription>
<para>Endpoint ID to be checked.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>Endpoint is enabled. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>Endpoint is disabled. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_usbd.h" line="1293" column="24" bodyfile="hal/nrf_usbd.h" bodystart="1293" bodyend="1306" declfile="hal/nrf_usbd.h" declline="917" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__usbd__hal_1ga28d51ddddc9b82ce7a0f20d9d0c3eced" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_usbd_ep_enable</definition>
        <argsstring>(NRF_USBD_Type *p_reg, uint8_t ep)</argsstring>
        <name>nrf_usbd_ep_enable</name>
        <param>
          <type>NRF_USBD_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>ep</declname>
        </param>
        <briefdescription>
<para>Function for enabling the selected endpoint. </para>
        </briefdescription>
        <detaileddescription>
<para>The enabled endpoint responds for the tokens on the USB bus.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">ep</parametername>
</parameternamelist>
<parameterdescription>
<para>Endpoint ID to be enabled. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_usbd.h" line="1308" column="24" bodyfile="hal/nrf_usbd.h" bodystart="1308" bodyend="1321" declfile="hal/nrf_usbd.h" declline="927" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__usbd__hal_1ga2ec0b9257ca5204d17bbc0ddbc21eb45" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_usbd_ep_disable</definition>
        <argsstring>(NRF_USBD_Type *p_reg, uint8_t ep)</argsstring>
        <name>nrf_usbd_ep_disable</name>
        <param>
          <type>NRF_USBD_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>ep</declname>
        </param>
        <briefdescription>
<para>Function for disabling the selected endpoint. </para>
        </briefdescription>
        <detaileddescription>
<para>The disabled endpoint does not respond for the tokens on the USB bus.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">ep</parametername>
</parameternamelist>
<parameterdescription>
<para>Endpoint ID to be disabled. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_usbd.h" line="1323" column="24" bodyfile="hal/nrf_usbd.h" bodystart="1323" bodyend="1336" declfile="hal/nrf_usbd.h" declline="937" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__usbd__hal_1gad5097e513286061bb0dd1a104606830e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_usbd_ep_all_disable</definition>
        <argsstring>(NRF_USBD_Type *p_reg)</argsstring>
        <name>nrf_usbd_ep_all_disable</name>
        <param>
          <type>NRF_USBD_Type *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for disabling all endpoints. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_usbd.h" line="1338" column="24" bodyfile="hal/nrf_usbd.h" bodystart="1338" bodyend="1342" declfile="hal/nrf_usbd.h" declline="944" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__usbd__hal_1gae22f114852bc426680af00d510127da4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>void nrf_usbd_ep_default_config</definition>
        <argsstring>(NRF_USBD_Type *p_reg)</argsstring>
        <name>nrf_usbd_ep_default_config</name>
        <param>
          <type>NRF_USBD_Type *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for setting the default endpoint configuration. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>The default configuration means that all endpoints, except for EP0 IN and EP0 OUT, are disabled. Such configuration is used after the USB device reset.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_usbd.h" line="1344" column="6" bodyfile="hal/nrf_usbd.h" bodystart="1344" bodyend="1348" declfile="hal/nrf_usbd.h" declline="955" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__usbd__hal_1gab783f26d050b386fffbcefc2cdf459cf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_usbd_ep_stall</definition>
        <argsstring>(NRF_USBD_Type *p_reg, uint8_t ep)</argsstring>
        <name>nrf_usbd_ep_stall</name>
        <param>
          <type>NRF_USBD_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>ep</declname>
        </param>
        <briefdescription>
<para>Function for stalling the selected endpoint. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This function cannot be called on isochronous endpoint.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">ep</parametername>
</parameternamelist>
<parameterdescription>
<para>Endpoint identifier. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_usbd.h" line="1350" column="24" bodyfile="hal/nrf_usbd.h" bodystart="1350" bodyend="1354" declfile="hal/nrf_usbd.h" declline="965" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__usbd__hal_1gad80e8d94a4ab714d952b28b07e310a14" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_usbd_ep_unstall</definition>
        <argsstring>(NRF_USBD_Type *p_reg, uint8_t ep)</argsstring>
        <name>nrf_usbd_ep_unstall</name>
        <param>
          <type>NRF_USBD_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>ep</declname>
        </param>
        <briefdescription>
<para>Function for unstalling the selected endpoint. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This function cannot be called on isochronous endpoint.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">ep</parametername>
</parameternamelist>
<parameterdescription>
<para>Endpoint identifier </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_usbd.h" line="1356" column="24" bodyfile="hal/nrf_usbd.h" bodystart="1356" bodyend="1360" declfile="hal/nrf_usbd.h" declline="975" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__usbd__hal_1ga012c9fa1b3ef65862f6a37184f5cce33" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_usbd_isosplit_set</definition>
        <argsstring>(NRF_USBD_Type *p_reg, nrf_usbd_isosplit_t split)</argsstring>
        <name>nrf_usbd_isosplit_set</name>
        <param>
          <type>NRF_USBD_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__usbd__hal_1ga2b397851455aff39727f26fa7f52a26c" kindref="member">nrf_usbd_isosplit_t</ref></type>
          <declname>split</declname>
        </param>
        <briefdescription>
<para>Function for configuring the isochronous buffer splitting. </para>
        </briefdescription>
        <detaileddescription>
<para>This function configures isochronous buffer splitting between IN and OUT endpoints.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">split</parametername>
</parameternamelist>
<parameterdescription>
<para>Required configuration. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_usbd.h" line="1362" column="24" bodyfile="hal/nrf_usbd.h" bodystart="1362" bodyend="1365" declfile="hal/nrf_usbd.h" declline="985" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__usbd__hal_1ga3fae989351d356e8e77227861f6ecdd5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE <ref refid="group__nrf__usbd__hal_1ga2b397851455aff39727f26fa7f52a26c" kindref="member">nrf_usbd_isosplit_t</ref></type>
        <definition>NRF_STATIC_INLINE nrf_usbd_isosplit_t nrf_usbd_isosplit_get</definition>
        <argsstring>(NRF_USBD_Type const *p_reg)</argsstring>
        <name>nrf_usbd_isosplit_get</name>
        <param>
          <type>NRF_USBD_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting the isochronous buffer splitting configuration. </para>
        </briefdescription>
        <detaileddescription>
<para>This function gets the current isochronous buffer splitting configuration.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Current configuration. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_usbd.h" line="1367" column="39" bodyfile="hal/nrf_usbd.h" bodystart="1367" bodyend="1371" declfile="hal/nrf_usbd.h" declline="996" declcolumn="39"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__usbd__hal_1gae0ff06baed465b177e31375ce001d0d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_usbd_framecntr_get</definition>
        <argsstring>(NRF_USBD_Type const *p_reg)</argsstring>
        <name>nrf_usbd_framecntr_get</name>
        <param>
          <type>NRF_USBD_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting current frame counter. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Current frame counter. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_usbd.h" line="1373" column="28" bodyfile="hal/nrf_usbd.h" bodystart="1373" bodyend="1376" declfile="hal/nrf_usbd.h" declline="1005" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__usbd__hal_1ga944a5e908b4e3a16461bf04db92bafac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_usbd_lowpower_enable</definition>
        <argsstring>(NRF_USBD_Type *p_reg)</argsstring>
        <name>nrf_usbd_lowpower_enable</name>
        <param>
          <type>NRF_USBD_Type *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for entering into the USB low power mode. </para>
        </briefdescription>
        <detaileddescription>
<para>After this function is called, the clock source from the USBD is disconnected internally. After this function is called, most of the USBD registers cannot be accessed anymore.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="group__nrf__usbd__hal_1ga7553635a772c5cf7496efe211b6e56b9" kindref="member">nrf_usbd_lowpower_disable</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__nrf__usbd__hal_1ga8b635f1aec033d9e66dc4776b4e1e3bd" kindref="member">nrf_usbd_lowpower_check</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_usbd.h" line="1378" column="24" bodyfile="hal/nrf_usbd.h" bodystart="1378" bodyend="1382" declfile="hal/nrf_usbd.h" declline="1018" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__usbd__hal_1ga7553635a772c5cf7496efe211b6e56b9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_usbd_lowpower_disable</definition>
        <argsstring>(NRF_USBD_Type *p_reg)</argsstring>
        <name>nrf_usbd_lowpower_disable</name>
        <param>
          <type>NRF_USBD_Type *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for exiting from the USB low power mode. </para>
        </briefdescription>
        <detaileddescription>
<para>After this function is called, the clock source for the USBD is connected internally. The <ref refid="group__nrf__usbd__hal_1gga8588a7f666e82f6c441046d924ff197eaa71e0597c1c9ca8d665399d56a23b571" kindref="member">NRF_USBD_EVENTCAUSE_WUREQ_MASK</ref> event will be generated and then the USBD registers can be accessed.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="group__nrf__usbd__hal_1ga944a5e908b4e3a16461bf04db92bafac" kindref="member">nrf_usbd_lowpower_enable</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__nrf__usbd__hal_1ga8b635f1aec033d9e66dc4776b4e1e3bd" kindref="member">nrf_usbd_lowpower_check</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_usbd.h" line="1384" column="24" bodyfile="hal/nrf_usbd.h" bodystart="1384" bodyend="1388" declfile="hal/nrf_usbd.h" declline="1032" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__usbd__hal_1ga8b635f1aec033d9e66dc4776b4e1e3bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE bool</type>
        <definition>NRF_STATIC_INLINE bool nrf_usbd_lowpower_check</definition>
        <argsstring>(NRF_USBD_Type const *p_reg)</argsstring>
        <name>nrf_usbd_lowpower_check</name>
        <param>
          <type>NRF_USBD_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for checking the state of the low power mode. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>The USBD is in low power mode. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>The USBD is not in low power mode. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_usbd.h" line="1390" column="24" bodyfile="hal/nrf_usbd.h" bodystart="1390" bodyend="1393" declfile="hal/nrf_usbd.h" declline="1042" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__usbd__hal_1ga8960604f2e9a410468de65bd29bbdddc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_usbd_isoinconfig_set</definition>
        <argsstring>(NRF_USBD_Type *p_reg, nrf_usbd_isoinconfig_t config)</argsstring>
        <name>nrf_usbd_isoinconfig_set</name>
        <param>
          <type>NRF_USBD_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__usbd__hal_1ga2328f0becb99ca74db0490cd48af4861" kindref="member">nrf_usbd_isoinconfig_t</ref></type>
          <declname>config</declname>
        </param>
        <briefdescription>
<para>Function for configuring ISO IN endpoint response to an IN token when no data is ready to be sent. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">config</parametername>
</parameternamelist>
<parameterdescription>
<para>Required configuration. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_usbd.h" line="1395" column="24" bodyfile="hal/nrf_usbd.h" bodystart="1395" bodyend="1399" declfile="hal/nrf_usbd.h" declline="1050" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__usbd__hal_1gaf665a23aabc0f564ecb8262ddd781c33" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE <ref refid="group__nrf__usbd__hal_1ga2328f0becb99ca74db0490cd48af4861" kindref="member">nrf_usbd_isoinconfig_t</ref></type>
        <definition>NRF_STATIC_INLINE nrf_usbd_isoinconfig_t nrf_usbd_isoinconfig_get</definition>
        <argsstring>(NRF_USBD_Type const *p_reg)</argsstring>
        <name>nrf_usbd_isoinconfig_get</name>
        <param>
          <type>NRF_USBD_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting the cofiguration of ISO IN endpoint response to an IN token when no data is ready to be sent. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Current configuration. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_usbd.h" line="1401" column="42" bodyfile="hal/nrf_usbd.h" bodystart="1401" bodyend="1405" declfile="hal/nrf_usbd.h" declline="1060" declcolumn="42"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__usbd__hal_1gaa5a00900f9f1485b4d8aa35fedb0a7f7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_usbd_ep_easydma_set</definition>
        <argsstring>(NRF_USBD_Type *p_reg, uint8_t ep, uint32_t ptr, uint32_t maxcnt)</argsstring>
        <name>nrf_usbd_ep_easydma_set</name>
        <param>
          <type>NRF_USBD_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>ep</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>maxcnt</declname>
        </param>
        <briefdescription>
<para>Function for configuring the EasyDMA channel. </para>
        </briefdescription>
        <detaileddescription>
<para>Configures EasyDMA for the transfer.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">ep</parametername>
</parameternamelist>
<parameterdescription>
<para>Endpoint identifier (with direction). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">maxcnt</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bytes to transfer. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_usbd.h" line="1407" column="24" bodyfile="hal/nrf_usbd.h" bodystart="1407" bodyend="1440" declfile="hal/nrf_usbd.h" declline="1072" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__usbd__hal_1ga6d8ca4b4f0d2a5ce041cd654bfe9884d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_usbd_ep_amount_get</definition>
        <argsstring>(NRF_USBD_Type const *p_reg, uint8_t ep)</argsstring>
        <name>nrf_usbd_ep_amount_get</name>
        <param>
          <type>NRF_USBD_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>ep</declname>
        </param>
        <briefdescription>
<para>Function for getting number of transferred bytes. </para>
        </briefdescription>
        <detaileddescription>
<para>This function gets the number of transferred bytes in the last transaction.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">ep</parametername>
</parameternamelist>
<parameterdescription>
<para>Endpoint identifier.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The content of the AMOUNT register. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_usbd.h" line="1442" column="28" bodyfile="hal/nrf_usbd.h" bodystart="1442" bodyend="1472" declfile="hal/nrf_usbd.h" declline="1087" declcolumn="28"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__nrf__usbd__hal_1ga6bf887bf2b95efe9128ba52eccfae9a9" prot="public" static="no">
        <name>NRF_USBD_FRAMECNTR_SIZE</name>
        <initializer>    ( (USBD_FRAMECNTR_FRAMECNTR_Msk &gt;&gt; USBD_FRAMECNTR_FRAMECNTR_Pos) + 1UL )</initializer>
        <briefdescription>
<para>Frame counter size. </para>
        </briefdescription>
        <detaileddescription>
<para>The number of counts that can be fitted into frame counter. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_usbd.h" line="420" column="9" bodyfile="hal/nrf_usbd.h" bodystart="420" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__usbd__hal_1ga2885b53c22521a2a3e2dbcda0dd0f044" prot="public" static="no">
        <name>NRF_USBD_EPISO_FIRST</name>
        <initializer>8</initializer>
        <briefdescription>
<para>First isochronous endpoint number. </para>
        </briefdescription>
        <detaileddescription>
<para>The number of the first isochronous endpoint. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_usbd.h" line="431" column="9" bodyfile="hal/nrf_usbd.h" bodystart="431" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__usbd__hal_1ga44b9553409d9c4785eebaaadd4586f0f" prot="public" static="no">
        <name>NRF_USBD_EPIN_CNT</name>
        <initializer>9</initializer>
        <briefdescription>
<para>Total number of IN endpoints. </para>
        </briefdescription>
        <detaileddescription>
<para>Total number of IN endpoint (including ISOCHRONOUS). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_usbd.h" line="438" column="9" bodyfile="hal/nrf_usbd.h" bodystart="438" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__usbd__hal_1ga437407a2f8d28b360a4ec9eb816e729d" prot="public" static="no">
        <name>NRF_USBD_EPOUT_CNT</name>
        <initializer>9</initializer>
        <briefdescription>
<para>Total number of OUT endpoints. </para>
        </briefdescription>
        <detaileddescription>
<para>Total number of OUT endpoint (including ISOCHRONOUS). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_usbd.h" line="445" column="9" bodyfile="hal/nrf_usbd.h" bodystart="445" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__usbd__hal_1gafab440dd7f6a642c240348da60092eb3" prot="public" static="no">
        <name>NRF_USBD_EP_DIR_Msk</name>
        <initializer>(1U &lt;&lt; 7)</initializer>
        <briefdescription>
<para>Mask of the direction bit in an endpoint number. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_usbd.h" line="448" column="9" bodyfile="hal/nrf_usbd.h" bodystart="448" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__usbd__hal_1ga6357a6cf3e265f3f1c40077582cdc814" prot="public" static="no">
        <name>NRF_USBD_EP_DIR_IN</name>
        <initializer>(1U &lt;&lt; 7)</initializer>
        <briefdescription>
<para>The value of direction bit for the IN endpoint direction. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_usbd.h" line="451" column="9" bodyfile="hal/nrf_usbd.h" bodystart="451" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__usbd__hal_1ga59e374ef98d3521cb386c425d43dd36d" prot="public" static="no">
        <name>NRF_USBD_EP_DIR_OUT</name>
        <initializer>(0U &lt;&lt; 7)</initializer>
        <briefdescription>
<para>The value of direction bit for the OUT endpoint direction. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_usbd.h" line="454" column="9" bodyfile="hal/nrf_usbd.h" bodystart="454" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__usbd__hal_1ga9be1e5cf3c38d21e1116c2771ab86bcf" prot="public" static="no">
        <name>NRF_USBD_EPIN</name>
        <param><defname>epnr</defname></param>
        <initializer>(((uint8_t)(epnr)) | <ref refid="group__nrf__usbd__hal_1ga6357a6cf3e265f3f1c40077582cdc814" kindref="member">NRF_USBD_EP_DIR_IN</ref>)</initializer>
        <briefdescription>
<para>Macro for making the IN endpoint identifier from endpoint number. </para>
        </briefdescription>
        <detaileddescription>
<para>Macro that sets direction bit to make IN endpoint.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">epnr</parametername>
</parameternamelist>
<parameterdescription>
<para>Endpoint number.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>IN Endpoint identifier. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_usbd.h" line="465" column="9" bodyfile="hal/nrf_usbd.h" bodystart="465" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__usbd__hal_1ga8b6d96a8d69d5283919896d6f5b54b01" prot="public" static="no">
        <name>NRF_USBD_EPOUT</name>
        <param><defname>epnr</defname></param>
        <initializer>(((uint8_t)(epnr)) | <ref refid="group__nrf__usbd__hal_1ga59e374ef98d3521cb386c425d43dd36d" kindref="member">NRF_USBD_EP_DIR_OUT</ref>)</initializer>
        <briefdescription>
<para>Macro for making the OUT endpoint identifier from endpoint number. </para>
        </briefdescription>
        <detaileddescription>
<para>Macro that sets direction bit to make OUT endpoint.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">epnr</parametername>
</parameternamelist>
<parameterdescription>
<para>Endpoint number.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>OUT Endpoint identifier. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_usbd.h" line="476" column="9" bodyfile="hal/nrf_usbd.h" bodystart="476" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__usbd__hal_1gab94e2e9074a572f025cbbbbfb49852ad" prot="public" static="no">
        <name>NRF_USBD_EP_NR_GET</name>
        <param><defname>ep</defname></param>
        <initializer>((uint8_t)(((uint8_t)(ep)) &amp; 0xFU))</initializer>
        <briefdescription>
<para>Macro for extracting the endpoint number from the specified endpoint identifier. </para>
        </briefdescription>
        <detaileddescription>
<para>Macro that strips out the information about endpoint direction.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ep</parametername>
</parameternamelist>
<parameterdescription>
<para>Endpoint identifier.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Endpoint number. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_usbd.h" line="487" column="9" bodyfile="hal/nrf_usbd.h" bodystart="487" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__usbd__hal_1ga3d429071b3003910f7aa3027fc2597d6" prot="public" static="no">
        <name>NRF_USBD_EPIN_CHECK</name>
        <param><defname>ep</defname></param>
        <initializer>( (((uint8_t)(ep)) &amp; <ref refid="group__nrf__usbd__hal_1gafab440dd7f6a642c240348da60092eb3" kindref="member">NRF_USBD_EP_DIR_Msk</ref>) == <ref refid="group__nrf__usbd__hal_1ga6357a6cf3e265f3f1c40077582cdc814" kindref="member">NRF_USBD_EP_DIR_IN</ref>  )</initializer>
        <briefdescription>
<para>Macro for checking the endpoint direction. </para>
        </briefdescription>
        <detaileddescription>
<para>This macro checks if the specified endpoint has the IN direction.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ep</parametername>
</parameternamelist>
<parameterdescription>
<para>Endpoint identifier.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>The endpoint direction is IN. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>The endpoint direction is OUT. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_usbd.h" line="499" column="9" bodyfile="hal/nrf_usbd.h" bodystart="499" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__usbd__hal_1gaa3ed152cfe989b125a93a2687d8f7eae" prot="public" static="no">
        <name>NRF_USBD_EPOUT_CHECK</name>
        <param><defname>ep</defname></param>
        <initializer>( (((uint8_t)(ep)) &amp; <ref refid="group__nrf__usbd__hal_1gafab440dd7f6a642c240348da60092eb3" kindref="member">NRF_USBD_EP_DIR_Msk</ref>) == <ref refid="group__nrf__usbd__hal_1ga59e374ef98d3521cb386c425d43dd36d" kindref="member">NRF_USBD_EP_DIR_OUT</ref> )</initializer>
        <briefdescription>
<para>Macro for checking endpoint direction. </para>
        </briefdescription>
        <detaileddescription>
<para>This macro checks if given endpoint has OUT direction.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ep</parametername>
</parameternamelist>
<parameterdescription>
<para>Endpoint identifier</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>The endpoint direction is OUT </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>The endpoint direction is IN </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_usbd.h" line="511" column="9" bodyfile="hal/nrf_usbd.h" bodystart="511" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__usbd__hal_1ga47229aa88f189c973e6c93a942772a10" prot="public" static="no">
        <name>NRF_USBD_EPISO_CHECK</name>
        <param><defname>ep</defname></param>
        <initializer>(<ref refid="group__nrf__usbd__hal_1gab94e2e9074a572f025cbbbbfb49852ad" kindref="member">NRF_USBD_EP_NR_GET</ref>(ep) &gt;= <ref refid="group__nrf__usbd__hal_1ga2885b53c22521a2a3e2dbcda0dd0f044" kindref="member">NRF_USBD_EPISO_FIRST</ref>)</initializer>
        <briefdescription>
<para>Macro for checking if endpoint is isochronous. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ep</parametername>
</parameternamelist>
<parameterdescription>
<para>It can be endpoint identifier or just endpoint number to be checked.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>The endpoint is isochronous type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>The endpoint is bulk of interrupt type. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_usbd.h" line="521" column="9" bodyfile="hal/nrf_usbd.h" bodystart="521" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__usbd__hal_1ga5517794f8da667831ee7a22bd476a4e3" prot="public" static="no">
        <name>NRF_USBD_EP_VALIDATE</name>
        <param><defname>ep</defname></param>
        <initializer>    (                                              \
    (<ref refid="group__nrf__usbd__hal_1ga3d429071b3003910f7aa3027fc2597d6" kindref="member">NRF_USBD_EPIN_CHECK</ref>(ep) &amp;&amp; (<ref refid="group__nrf__usbd__hal_1gab94e2e9074a572f025cbbbbfb49852ad" kindref="member">NRF_USBD_EP_NR_GET</ref>(ep) &lt; <ref refid="group__nrf__usbd__hal_1ga44b9553409d9c4785eebaaadd4586f0f" kindref="member">NRF_USBD_EPIN_CNT</ref>))   \
    ||                                                                          \
    (<ref refid="group__nrf__usbd__hal_1gaa3ed152cfe989b125a93a2687d8f7eae" kindref="member">NRF_USBD_EPOUT_CHECK</ref>(ep) &amp;&amp; (<ref refid="group__nrf__usbd__hal_1gab94e2e9074a572f025cbbbbfb49852ad" kindref="member">NRF_USBD_EP_NR_GET</ref>(ep) &lt; <ref refid="group__nrf__usbd__hal_1ga437407a2f8d28b360a4ec9eb816e729d" kindref="member">NRF_USBD_EPOUT_CNT</ref>)) \
    )</initializer>
        <briefdescription>
<para>Macro for checking if given number is valid endpoint number. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ep</parametername>
</parameternamelist>
<parameterdescription>
<para>Endpoint number to be checked.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>The endpoint is valid. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>The endpoint is not valid. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_usbd.h" line="531" column="9" bodyfile="hal/nrf_usbd.h" bodystart="531" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__usbd__hal_1gae8241e0e42223e58adb98e2fb7b71a3f" prot="public" static="no">
        <name>NRF_USBD_EPISOOUT_NO_DATA</name>
        <initializer>((size_t)(-1))</initializer>
        <briefdescription>
<para>Not isochronous data frame received. </para>
        </briefdescription>
        <detaileddescription>
<para>Special value returned by <ref refid="group__nrf__usbd__hal_1ga781e617b1d8866be26f485f3b7f8320f" kindref="member">nrf_usbd_episoout_size_get</ref> function that means that data frame was not received at all. This allows differentiate between situations when zero size data comes or no data comes at all on isochronous endpoint. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_usbd.h" line="545" column="9" bodyfile="hal/nrf_usbd.h" bodystart="545" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Hardware access layer for managing the Universal Serial Bus Device (USBD) peripheral. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
