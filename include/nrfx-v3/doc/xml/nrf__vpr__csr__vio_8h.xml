<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="nrf__vpr__csr__vio_8h" kind="file" language="C++">
    <compoundname>nrf_vpr_csr_vio.h</compoundname>
    <includes local="no">nrfx.h</includes>
    <incdepgraph>
      <node id="1">
        <label>hal/nrf_vpr_csr_vio.h</label>
        <link refid="nrf__vpr__csr__vio_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>nrfx.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="structnrf__vpr__csr__vio__mode__out__t" prot="public">nrf_vpr_csr_vio_mode_out_t</innerclass>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="group__nrf__vpr__csr__vio__hal_1gac3198039044ec3b5c19289d8de6440a3" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_vpr_csr_vio_out_shift_t</name>
        <enumvalue id="group__nrf__vpr__csr__vio__hal_1ggac3198039044ec3b5c19289d8de6440a3a3023307749536b76d28271033913ff27" prot="public">
          <name>NRF_VPR_CSR_VIO_OUT_SHIFT_1</name>
          <initializer>= VPRCSR_NORDIC_OUTMODE_SHIFSIZE_SHIFT1</initializer>
          <briefdescription>
<para>Shift OUT by 1 bit. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__vpr__csr__vio__hal_1ggac3198039044ec3b5c19289d8de6440a3a7131871cf64e65709bee4cb1232836c8" prot="public">
          <name>NRF_VPR_CSR_VIO_OUT_SHIFT_2</name>
          <initializer>= VPRCSR_NORDIC_OUTMODE_SHIFSIZE_SHIFT2</initializer>
          <briefdescription>
<para>Shift OUT by 2 bits. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__vpr__csr__vio__hal_1ggac3198039044ec3b5c19289d8de6440a3a19ca5b7dae1c9490028728cf64a79c20" prot="public">
          <name>NRF_VPR_CSR_VIO_OUT_SHIFT_4</name>
          <initializer>= VPRCSR_NORDIC_OUTMODE_SHIFSIZE_SHIFT4</initializer>
          <briefdescription>
<para>Shift OUT by 4 bits. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__vpr__csr__vio__hal_1ggac3198039044ec3b5c19289d8de6440a3a4d1e766cf7793bafaa25dac8c570ee63" prot="public">
          <name>NRF_VPR_CSR_VIO_OUT_SHIFT_8</name>
          <initializer>= VPRCSR_NORDIC_OUTMODE_SHIFSIZE_SHIFT8</initializer>
          <briefdescription>
<para>Shift OUT by 8 bits. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__vpr__csr__vio__hal_1ggac3198039044ec3b5c19289d8de6440a3a84788242526bec6c45289d80f71ad639" prot="public">
          <name>NRF_VPR_CSR_VIO_OUT_SHIFT_16</name>
          <initializer>= VPRCSR_NORDIC_OUTMODE_SHIFSIZE_SHIFT16</initializer>
          <briefdescription>
<para>Shift OUT by 16 bits. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Shift sizes for output. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_vpr_csr_vio.h" line="52" column="1" bodyfile="hal/nrf_vpr_csr_vio.h" bodystart="53" bodyend="59"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__vpr__csr__vio__hal_1ga06a27f23a52d64b49a2558c7f4920fe2" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_vpr_csr_vio_mode_in_t</name>
        <enumvalue id="group__nrf__vpr__csr__vio__hal_1gga06a27f23a52d64b49a2558c7f4920fe2af85ea4a9fe18bd458414244c3895b9b3" prot="public">
          <name>NRF_VPR_CSR_VIO_MODE_IN_CONTINUOUS</name>
          <initializer>= VPRCSR_NORDIC_INMODE_MODE_CONTINUOUS</initializer>
          <briefdescription>
<para>Continuous sampling (if CPU is not sleeping). </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__vpr__csr__vio__hal_1gga06a27f23a52d64b49a2558c7f4920fe2a67384bfeab139878ca23c90b908ad0b2" prot="public">
          <name>NRF_VPR_CSR_VIO_MODE_IN_EVENT</name>
          <initializer>= VPRCSR_NORDIC_INMODE_MODE_EVENT</initializer>
          <briefdescription>
<para>Sampling on Counter 1 event. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Input modes. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_vpr_csr_vio.h" line="70" column="1" bodyfile="hal/nrf_vpr_csr_vio.h" bodystart="71" bodyend="74"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__nrf__vpr__csr__vio__hal_1ga843441f8e5f2adeb3844a544f81e4f6a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint16_t</type>
        <definition>NRF_STATIC_INLINE uint16_t nrf_vpr_csr_vio_dir_get</definition>
        <argsstring>(void)</argsstring>
        <name>nrf_vpr_csr_vio_dir_get</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Function for getting the pin directions mask. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Mask of pin directions. 0 is input, 1 is output. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_vpr_csr_vio.h" line="318" column="28" bodyfile="hal/nrf_vpr_csr_vio.h" bodystart="318" bodyend="321" declfile="hal/nrf_vpr_csr_vio.h" declline="82" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__vpr__csr__vio__hal_1ga01d613ad768f18fbfafbad45c6c768f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_vpr_csr_vio_dir_set</definition>
        <argsstring>(uint16_t value)</argsstring>
        <name>nrf_vpr_csr_vio_dir_set</name>
        <param>
          <type>uint16_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Function for setting the pin directions mask. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of pin directions to be set. 0 is input, 1 is output. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_vpr_csr_vio.h" line="323" column="24" bodyfile="hal/nrf_vpr_csr_vio.h" bodystart="323" bodyend="326" declfile="hal/nrf_vpr_csr_vio.h" declline="89" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__vpr__csr__vio__hal_1gaaf55076e5ee8be09ff7e83a833990d6f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint16_t</type>
        <definition>NRF_STATIC_INLINE uint16_t nrf_vpr_csr_vio_dir_buffered_get</definition>
        <argsstring>(void)</argsstring>
        <name>nrf_vpr_csr_vio_dir_buffered_get</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Function for getting the buffered pin directions mask. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Mask of pin directions. 0 is input, 1 is output. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_vpr_csr_vio.h" line="328" column="28" bodyfile="hal/nrf_vpr_csr_vio.h" bodystart="328" bodyend="331" declfile="hal/nrf_vpr_csr_vio.h" declline="96" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__vpr__csr__vio__hal_1gae4df98335dca2e70c9d741c5dd5c10e4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_vpr_csr_vio_dir_buffered_set</definition>
        <argsstring>(uint16_t value)</argsstring>
        <name>nrf_vpr_csr_vio_dir_buffered_set</name>
        <param>
          <type>uint16_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Function for setting the buffered pin directions mask. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of pin directions to be set. 0 is input, 1 is output. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_vpr_csr_vio.h" line="333" column="24" bodyfile="hal/nrf_vpr_csr_vio.h" bodystart="333" bodyend="336" declfile="hal/nrf_vpr_csr_vio.h" declline="103" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__vpr__csr__vio__hal_1ga28207758cf784f0f0e07679bf53ff306" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE bool</type>
        <definition>NRF_STATIC_INLINE bool nrf_vpr_csr_vio_dir_buffered_dirty_check</definition>
        <argsstring>(void)</argsstring>
        <name>nrf_vpr_csr_vio_dir_buffered_dirty_check</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Function for retrieving the dirty status of buffered pin directions mask. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer is dirty. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fasle</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer is clean. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_vpr_csr_vio.h" line="338" column="24" bodyfile="hal/nrf_vpr_csr_vio.h" bodystart="338" bodyend="342" declfile="hal/nrf_vpr_csr_vio.h" declline="111" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__vpr__csr__vio__hal_1gafab31d6e80a544bb752dd641d738eaf2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_vpr_csr_vio_dir_toggle_set</definition>
        <argsstring>(uint16_t mask)</argsstring>
        <name>nrf_vpr_csr_vio_dir_toggle_set</name>
        <param>
          <type>uint16_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Function for setting the pin directions toggle mask. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of pin directions to be toggled. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_vpr_csr_vio.h" line="344" column="24" bodyfile="hal/nrf_vpr_csr_vio.h" bodystart="344" bodyend="347" declfile="hal/nrf_vpr_csr_vio.h" declline="118" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__vpr__csr__vio__hal_1ga9cb95077487000e8e044b1c8bd0fb0ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_vpr_csr_vio_dir_buffered_toggle_set</definition>
        <argsstring>(uint16_t mask)</argsstring>
        <name>nrf_vpr_csr_vio_dir_buffered_toggle_set</name>
        <param>
          <type>uint16_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Function for setting the buffered pin directions toggle mask. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of pin directions to be toggled. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_vpr_csr_vio.h" line="349" column="24" bodyfile="hal/nrf_vpr_csr_vio.h" bodystart="349" bodyend="352" declfile="hal/nrf_vpr_csr_vio.h" declline="125" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__vpr__csr__vio__hal_1gaaf5ac6058e3c4477d57d82f47eb2677b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint16_t</type>
        <definition>NRF_STATIC_INLINE uint16_t nrf_vpr_csr_vio_in_get</definition>
        <argsstring>(void)</argsstring>
        <name>nrf_vpr_csr_vio_in_get</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Function for getting the input values. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Mask of input states. 0 is low, 1 is high. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_vpr_csr_vio.h" line="354" column="28" bodyfile="hal/nrf_vpr_csr_vio.h" bodystart="354" bodyend="357" declfile="hal/nrf_vpr_csr_vio.h" declline="132" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__vpr__csr__vio__hal_1gaab361fc47f7c435ef16ecc6f70e93f2a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE <ref refid="group__nrf__vpr__csr__vio__hal_1ga06a27f23a52d64b49a2558c7f4920fe2" kindref="member">nrf_vpr_csr_vio_mode_in_t</ref></type>
        <definition>NRF_STATIC_INLINE nrf_vpr_csr_vio_mode_in_t nrf_vpr_csr_vio_mode_in_get</definition>
        <argsstring>(void)</argsstring>
        <name>nrf_vpr_csr_vio_mode_in_get</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Function for getting the input mode. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Input mode. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_vpr_csr_vio.h" line="360" column="45" bodyfile="hal/nrf_vpr_csr_vio.h" bodystart="360" bodyend="363" declfile="hal/nrf_vpr_csr_vio.h" declline="140" declcolumn="45"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__vpr__csr__vio__hal_1gaf82dcf090e591671cb77a251abb792d7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_vpr_csr_vio_mode_in_set</definition>
        <argsstring>(nrf_vpr_csr_vio_mode_in_t mode)</argsstring>
        <name>nrf_vpr_csr_vio_mode_in_set</name>
        <param>
          <type><ref refid="group__nrf__vpr__csr__vio__hal_1ga06a27f23a52d64b49a2558c7f4920fe2" kindref="member">nrf_vpr_csr_vio_mode_in_t</ref></type>
          <declname>mode</declname>
        </param>
        <briefdescription>
<para>Function for setting the input mode. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">mode</parametername>
</parameternamelist>
<parameterdescription>
<para>Input mode to be set. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_vpr_csr_vio.h" line="365" column="24" bodyfile="hal/nrf_vpr_csr_vio.h" bodystart="365" bodyend="368" declfile="hal/nrf_vpr_csr_vio.h" declline="147" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__vpr__csr__vio__hal_1ga21b9a5220529b157e1cba1bc3fd87889" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint16_t</type>
        <definition>NRF_STATIC_INLINE uint16_t nrf_vpr_csr_vio_out_get</definition>
        <argsstring>(void)</argsstring>
        <name>nrf_vpr_csr_vio_out_get</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Function for getting the output values. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Mask of output states. 0 is low, 1 is high. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_vpr_csr_vio.h" line="381" column="28" bodyfile="hal/nrf_vpr_csr_vio.h" bodystart="381" bodyend="384" declfile="hal/nrf_vpr_csr_vio.h" declline="169" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__vpr__csr__vio__hal_1ga0a0f082368a5cb2805fbec2d3ea942ce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_vpr_csr_vio_out_set</definition>
        <argsstring>(uint16_t value)</argsstring>
        <name>nrf_vpr_csr_vio_out_set</name>
        <param>
          <type>uint16_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Function for setting the output values. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of output states to be set. 0 is low, 1 is high. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_vpr_csr_vio.h" line="386" column="24" bodyfile="hal/nrf_vpr_csr_vio.h" bodystart="386" bodyend="389" declfile="hal/nrf_vpr_csr_vio.h" declline="176" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__vpr__csr__vio__hal_1ga6d6ee999f2e7458a658e53d5ee017a21" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_vpr_csr_vio_out_buffered_get</definition>
        <argsstring>(void)</argsstring>
        <name>nrf_vpr_csr_vio_out_buffered_get</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Function for getting the buffered output values. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Mask of output states. 0 is low, 1 is high. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_vpr_csr_vio.h" line="391" column="28" bodyfile="hal/nrf_vpr_csr_vio.h" bodystart="391" bodyend="394" declfile="hal/nrf_vpr_csr_vio.h" declline="183" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__vpr__csr__vio__hal_1ga56386a33701915c9302789dbfbdd3163" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_vpr_csr_vio_out_buffered_set</definition>
        <argsstring>(uint32_t value)</argsstring>
        <name>nrf_vpr_csr_vio_out_buffered_set</name>
        <param>
          <type>uint32_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Function for setting the buffered output values. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of output states to be set. 0 is low, 1 is high. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_vpr_csr_vio.h" line="396" column="24" bodyfile="hal/nrf_vpr_csr_vio.h" bodystart="396" bodyend="399" declfile="hal/nrf_vpr_csr_vio.h" declline="190" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__vpr__csr__vio__hal_1ga2a7f5a9fc8b53bb03bd56c98d159fe4f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE bool</type>
        <definition>NRF_STATIC_INLINE bool nrf_vpr_csr_vio_out_buffered_dirty_check</definition>
        <argsstring>(void)</argsstring>
        <name>nrf_vpr_csr_vio_out_buffered_dirty_check</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Function for retrieving the dirty status of buffered output values. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer is dirty. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fasle</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer is clean. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_vpr_csr_vio.h" line="401" column="24" bodyfile="hal/nrf_vpr_csr_vio.h" bodystart="401" bodyend="405" declfile="hal/nrf_vpr_csr_vio.h" declline="198" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__vpr__csr__vio__hal_1ga62fb441a8ba06daeea565ba96f3b0743" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_vpr_csr_vio_out_toggle_set</definition>
        <argsstring>(uint16_t mask)</argsstring>
        <name>nrf_vpr_csr_vio_out_toggle_set</name>
        <param>
          <type>uint16_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Function for setting the output toggle mask. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of output to be toggled. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_vpr_csr_vio.h" line="407" column="24" bodyfile="hal/nrf_vpr_csr_vio.h" bodystart="407" bodyend="410" declfile="hal/nrf_vpr_csr_vio.h" declline="205" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__vpr__csr__vio__hal_1ga467755f28dfe4f76ad6ad7562034ddd1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_vpr_csr_vio_out_toggle_buffered_set</definition>
        <argsstring>(uint16_t mask)</argsstring>
        <name>nrf_vpr_csr_vio_out_toggle_buffered_set</name>
        <param>
          <type>uint16_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Function for setting the buffered output toggle mask. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of output to be toggled. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_vpr_csr_vio.h" line="412" column="24" bodyfile="hal/nrf_vpr_csr_vio.h" bodystart="412" bodyend="415" declfile="hal/nrf_vpr_csr_vio.h" declline="212" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__vpr__csr__vio__hal_1gaee6d1bda3232ea49311b8b31923e487e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_vpr_csr_vio_out_combined_set</definition>
        <argsstring>(uint32_t value)</argsstring>
        <name>nrf_vpr_csr_vio_out_combined_set</name>
        <param>
          <type>uint32_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Function for setting the combined output and buffered output values. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Lower 16 bits determine the output state, while higher 16 bits determine the buffered output state.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of output states to be set. 0 is low, 1 is high. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_vpr_csr_vio.h" line="417" column="24" bodyfile="hal/nrf_vpr_csr_vio.h" bodystart="417" bodyend="420" declfile="hal/nrf_vpr_csr_vio.h" declline="221" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__vpr__csr__vio__hal_1ga145bfc34279c2b5a08286768c384422e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_vpr_csr_vio_out_combined_toggle_set</definition>
        <argsstring>(uint32_t mask)</argsstring>
        <name>nrf_vpr_csr_vio_out_combined_toggle_set</name>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Function for setting the combined output and buffered output toggle mask. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Lower 16 bits determine the output toggle, while higher 16 bits determine the buffered output toggle.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of output to be toggled. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_vpr_csr_vio.h" line="422" column="24" bodyfile="hal/nrf_vpr_csr_vio.h" bodystart="422" bodyend="425" declfile="hal/nrf_vpr_csr_vio.h" declline="230" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__vpr__csr__vio__hal_1gaf6e433d0fff79f32d0e11986747de431" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE bool</type>
        <definition>NRF_STATIC_INLINE bool nrf_vpr_csr_vio_out_combined_dirty_check</definition>
        <argsstring>(void)</argsstring>
        <name>nrf_vpr_csr_vio_out_combined_dirty_check</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Function for retrieving the dirty status of combined output and buffered output values. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer is dirty. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fasle</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer is clean. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_vpr_csr_vio.h" line="427" column="24" bodyfile="hal/nrf_vpr_csr_vio.h" bodystart="427" bodyend="431" declfile="hal/nrf_vpr_csr_vio.h" declline="238" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__vpr__csr__vio__hal_1ga8895552bd54046f1b589f27822190f37" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_vpr_csr_vio_mode_out_get</definition>
        <argsstring>(nrf_vpr_csr_vio_mode_out_t *p_mode)</argsstring>
        <name>nrf_vpr_csr_vio_mode_out_get</name>
        <param>
          <type><ref refid="structnrf__vpr__csr__vio__mode__out__t" kindref="compound">nrf_vpr_csr_vio_mode_out_t</ref> *</type>
          <declname>p_mode</declname>
        </param>
        <briefdescription>
<para>Function for getting the configuration of output mode. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">p_mode</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure to be filled with output mode. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_vpr_csr_vio.h" line="433" column="24" bodyfile="hal/nrf_vpr_csr_vio.h" bodystart="433" bodyend="442" declfile="hal/nrf_vpr_csr_vio.h" declline="245" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__vpr__csr__vio__hal_1gac0aa33439c729f7c03133afc022a64cb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_vpr_csr_vio_mode_out_set</definition>
        <argsstring>(nrf_vpr_csr_vio_mode_out_t const *p_mode)</argsstring>
        <name>nrf_vpr_csr_vio_mode_out_set</name>
        <param>
          <type><ref refid="structnrf__vpr__csr__vio__mode__out__t" kindref="compound">nrf_vpr_csr_vio_mode_out_t</ref> const *</type>
          <declname>p_mode</declname>
        </param>
        <briefdescription>
<para>Function for setting the configuration of output mode. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_mode</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure with output mode to be set. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_vpr_csr_vio.h" line="444" column="24" bodyfile="hal/nrf_vpr_csr_vio.h" bodystart="444" bodyend="453" declfile="hal/nrf_vpr_csr_vio.h" declline="252" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__vpr__csr__vio__hal_1ga9f0c2e86846f5500a6bf464fef49a057" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_vpr_csr_vio_dirout_get</definition>
        <argsstring>(void)</argsstring>
        <name>nrf_vpr_csr_vio_dirout_get</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Function for getting the combined pin directions mask and output values. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Lower 16 bits determine the output state, while higher 16 bits determine the pin directions.</para>
</simplesect>
<simplesect kind="return"><para>Mask of pin directions and output values. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_vpr_csr_vio.h" line="455" column="28" bodyfile="hal/nrf_vpr_csr_vio.h" bodystart="455" bodyend="458" declfile="hal/nrf_vpr_csr_vio.h" declline="261" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__vpr__csr__vio__hal_1gaa11088c59191d9d1e880742d46df2635" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_vpr_csr_vio_dirout_set</definition>
        <argsstring>(uint32_t value)</argsstring>
        <name>nrf_vpr_csr_vio_dirout_set</name>
        <param>
          <type>uint32_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Function for setting the combined pin directions mask and output values. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Lower 16 bits determine the output state, while higher 16 bits determine the pin directions.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of pin directions and output values. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_vpr_csr_vio.h" line="460" column="24" bodyfile="hal/nrf_vpr_csr_vio.h" bodystart="460" bodyend="463" declfile="hal/nrf_vpr_csr_vio.h" declline="270" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__vpr__csr__vio__hal_1gacf635df7125873797d3784539a47802c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_vpr_csr_vio_dirout_buffered_get</definition>
        <argsstring>(void)</argsstring>
        <name>nrf_vpr_csr_vio_dirout_buffered_get</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Function for getting the combined buffered pin directions mask and buffered output values. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Lower 16 bits determine the buffered output state, while higher 16 bits determine the buffered pin directions.</para>
</simplesect>
<simplesect kind="return"><para>Mask of buffered pin directions and buffered output values. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_vpr_csr_vio.h" line="465" column="28" bodyfile="hal/nrf_vpr_csr_vio.h" bodystart="465" bodyend="468" declfile="hal/nrf_vpr_csr_vio.h" declline="279" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__vpr__csr__vio__hal_1gaa3c91c1e6b20f0dbf06d0eda9895fdae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_vpr_csr_vio_dirout_buffered_set</definition>
        <argsstring>(uint32_t value)</argsstring>
        <name>nrf_vpr_csr_vio_dirout_buffered_set</name>
        <param>
          <type>uint32_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Function for getting the combined buffered pin directions mask and buffered output values. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Lower 16 bits determine the buffered output state, while higher 16 bits determine the buffered pin directions.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of buffered pin directions and buffered output values. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_vpr_csr_vio.h" line="470" column="24" bodyfile="hal/nrf_vpr_csr_vio.h" bodystart="470" bodyend="473" declfile="hal/nrf_vpr_csr_vio.h" declline="288" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__vpr__csr__vio__hal_1ga346964be5a98d56c7aa6ba986466896d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE bool</type>
        <definition>NRF_STATIC_INLINE bool nrf_vpr_csr_vio_dirout_buffered_dirty_check</definition>
        <argsstring>(void)</argsstring>
        <name>nrf_vpr_csr_vio_dirout_buffered_dirty_check</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Function for retrieving the dirty status of combined buffered pin directions mask and buffered output values. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer is dirty. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fasle</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer is clean. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_vpr_csr_vio.h" line="475" column="24" bodyfile="hal/nrf_vpr_csr_vio.h" bodystart="475" bodyend="479" declfile="hal/nrf_vpr_csr_vio.h" declline="296" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__vpr__csr__vio__hal_1ga53befc4f698d1926c33ae25dbc60572b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_vpr_csr_vio_dirout_toggle_set</definition>
        <argsstring>(uint32_t mask)</argsstring>
        <name>nrf_vpr_csr_vio_dirout_toggle_set</name>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Function for setting the combined pin directions and output toggle masks. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Lower 16 bits determine the output toggle, while higher 16 bits determine the pin directions toggle.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of values to be toggled. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_vpr_csr_vio.h" line="481" column="24" bodyfile="hal/nrf_vpr_csr_vio.h" bodystart="481" bodyend="484" declfile="hal/nrf_vpr_csr_vio.h" declline="305" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__vpr__csr__vio__hal_1gafbcd4383f2b84f53ce7adacaa0a4659f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_vpr_csr_vio_dirout_toggle_buffered_set</definition>
        <argsstring>(uint32_t mask)</argsstring>
        <name>nrf_vpr_csr_vio_dirout_toggle_buffered_set</name>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Function for setting the combined buffered pin directions and buffered output toggle masks. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Lower 16 bits determine the buffered output toggle, while higher 16 bits determine the buffered pin directions toggle.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of values to be toggled. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_vpr_csr_vio.h" line="486" column="24" bodyfile="hal/nrf_vpr_csr_vio.h" bodystart="486" bodyend="489" declfile="hal/nrf_vpr_csr_vio.h" declline="314" declcolumn="24"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2023<sp/>-<sp/>2024,<sp/>Nordic<sp/>Semiconductor<sp/>ASA</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>All<sp/>rights<sp/>reserved.</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>SPDX-License-Identifier:<sp/>BSD-3-Clause</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions<sp/>are<sp/>met:</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>1.<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright<sp/>notice,<sp/>this</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>2.<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the<sp/>distribution.</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/>3.<sp/>Neither<sp/>the<sp/>name<sp/>of<sp/>the<sp/>copyright<sp/>holder<sp/>nor<sp/>the<sp/>names<sp/>of<sp/>its</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>contributors<sp/>may<sp/>be<sp/>used<sp/>to<sp/>endorse<sp/>or<sp/>promote<sp/>products<sp/>derived<sp/>from<sp/>this</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>software<sp/>without<sp/>specific<sp/>prior<sp/>written<sp/>permission.</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>COPYRIGHT<sp/>HOLDERS<sp/>AND<sp/>CONTRIBUTORS<sp/>&quot;AS<sp/>IS&quot;</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/>AND<sp/>ANY<sp/>EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>THE</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*<sp/>ARE<sp/>DISCLAIMED.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>COPYRIGHT<sp/>HOLDER<sp/>OR<sp/>CONTRIBUTORS<sp/>BE</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,<sp/>SPECIAL,<sp/>EXEMPLARY,<sp/>OR</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>PROCUREMENT<sp/>OF</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>*<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,<sp/>DATA,<sp/>OR<sp/>PROFITS;<sp/>OR<sp/>BUSINESS</highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/>*<sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY<sp/>THEORY<sp/>OF<sp/>LIABILITY,<sp/>WHETHER<sp/>IN</highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/>*<sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR<sp/>OTHERWISE)</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/>*<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE<sp/>OF<sp/>THIS<sp/>SOFTWARE,<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/>*<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight></codeline>
<codeline lineno="32"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>NRF_VPR_CSR_VIO_H__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_VPR_CSR_VIO_H__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;nrfx.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="43"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="44"><highlight class="comment"><sp/>*<sp/>@defgroup<sp/>nrf_vpr_csr_vio_hal<sp/>VPR<sp/>CSR<sp/>VIO<sp/>HAL</highlight></codeline>
<codeline lineno="45"><highlight class="comment"><sp/>*<sp/>@{</highlight></codeline>
<codeline lineno="46"><highlight class="comment"><sp/>*<sp/>@ingroup<sp/>nrf_vpr</highlight></codeline>
<codeline lineno="47"><highlight class="comment"><sp/>*<sp/>@brief<sp/><sp/><sp/>Hardware<sp/>access<sp/>layer<sp/>for<sp/>managing<sp/>the<sp/>VPR<sp/>RISC-V<sp/>CPU<sp/>Control</highlight></codeline>
<codeline lineno="48"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>and<sp/>Status<sp/>Registers<sp/>for<sp/>VPR<sp/>IO<sp/>(VPR<sp/>CSR<sp/>VIO).</highlight></codeline>
<codeline lineno="49"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="51"><highlight class="comment">/**<sp/>@brief<sp/>Shift<sp/>sizes<sp/>for<sp/>output.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal">{</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__vpr__csr__vio__hal_1ggac3198039044ec3b5c19289d8de6440a3a3023307749536b76d28271033913ff27" kindref="member">NRF_VPR_CSR_VIO_OUT_SHIFT_1</ref><sp/><sp/>=<sp/>VPRCSR_NORDIC_OUTMODE_SHIFSIZE_SHIFT1,<sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Shift<sp/>OUT<sp/>by<sp/>1<sp/>bit.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__vpr__csr__vio__hal_1ggac3198039044ec3b5c19289d8de6440a3a7131871cf64e65709bee4cb1232836c8" kindref="member">NRF_VPR_CSR_VIO_OUT_SHIFT_2</ref><sp/><sp/>=<sp/>VPRCSR_NORDIC_OUTMODE_SHIFSIZE_SHIFT2,<sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Shift<sp/>OUT<sp/>by<sp/>2<sp/>bits.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__vpr__csr__vio__hal_1ggac3198039044ec3b5c19289d8de6440a3a19ca5b7dae1c9490028728cf64a79c20" kindref="member">NRF_VPR_CSR_VIO_OUT_SHIFT_4</ref><sp/><sp/>=<sp/>VPRCSR_NORDIC_OUTMODE_SHIFSIZE_SHIFT4,<sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Shift<sp/>OUT<sp/>by<sp/>4<sp/>bits.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__vpr__csr__vio__hal_1ggac3198039044ec3b5c19289d8de6440a3a4d1e766cf7793bafaa25dac8c570ee63" kindref="member">NRF_VPR_CSR_VIO_OUT_SHIFT_8</ref><sp/><sp/>=<sp/>VPRCSR_NORDIC_OUTMODE_SHIFSIZE_SHIFT8,<sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Shift<sp/>OUT<sp/>by<sp/>8<sp/>bits.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__vpr__csr__vio__hal_1ggac3198039044ec3b5c19289d8de6440a3a84788242526bec6c45289d80f71ad639" kindref="member">NRF_VPR_CSR_VIO_OUT_SHIFT_16</ref><sp/>=<sp/>VPRCSR_NORDIC_OUTMODE_SHIFSIZE_SHIFT16,<sp/></highlight><highlight class="comment">///&lt;<sp/>Shift<sp/>OUT<sp/>by<sp/>16<sp/>bits.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal">}<sp/><ref refid="group__nrf__vpr__csr__vio__hal_1gac3198039044ec3b5c19289d8de6440a3" kindref="member">nrf_vpr_csr_vio_out_shift_t</ref>;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="61"><highlight class="comment">/**<sp/>@brief<sp/>Output<sp/>mode<sp/>structure.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62" refid="structnrf__vpr__csr__vio__mode__out__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal">{</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shift_enable;<sp/></highlight><highlight class="comment">///&lt;<sp/>Enable<sp/>shift<sp/>mode.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__vpr__csr__vio__hal_1gac3198039044ec3b5c19289d8de6440a3" kindref="member">nrf_vpr_csr_vio_out_shift_t</ref><sp/>shift_size;<sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Shift<sp/>size.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal">}<sp/><ref refid="structnrf__vpr__csr__vio__mode__out__t" kindref="compound">nrf_vpr_csr_vio_mode_out_t</ref>;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(NRF54H20_ENGA_XXAA)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="69"><highlight class="comment">/**<sp/>@brief<sp/>Input<sp/>modes.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal">{</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__vpr__csr__vio__hal_1gga06a27f23a52d64b49a2558c7f4920fe2af85ea4a9fe18bd458414244c3895b9b3" kindref="member">NRF_VPR_CSR_VIO_MODE_IN_CONTINUOUS</ref><sp/>=<sp/>VPRCSR_NORDIC_INMODE_MODE_CONTINUOUS,<sp/></highlight><highlight class="comment">///&lt;<sp/>Continuous<sp/>sampling<sp/>(if<sp/>CPU<sp/>is<sp/>not<sp/>sleeping).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__vpr__csr__vio__hal_1gga06a27f23a52d64b49a2558c7f4920fe2a67384bfeab139878ca23c90b908ad0b2" kindref="member">NRF_VPR_CSR_VIO_MODE_IN_EVENT</ref><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>VPRCSR_NORDIC_INMODE_MODE_EVENT,<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Sampling<sp/>on<sp/>Counter<sp/>1<sp/>event.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal">}<sp/><ref refid="group__nrf__vpr__csr__vio__hal_1ga06a27f23a52d64b49a2558c7f4920fe2" kindref="member">nrf_vpr_csr_vio_mode_in_t</ref>;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="77"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="78"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>the<sp/>pin<sp/>directions<sp/>mask.</highlight></codeline>
<codeline lineno="79"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="80"><highlight class="comment"><sp/>*<sp/>@return<sp/>Mask<sp/>of<sp/>pin<sp/>directions.<sp/>0<sp/>is<sp/>input,<sp/>1<sp/>is<sp/>output.</highlight></codeline>
<codeline lineno="81"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint16_t<sp/><ref refid="group__nrf__vpr__csr__vio__hal_1ga843441f8e5f2adeb3844a544f81e4f6a" kindref="member">nrf_vpr_csr_vio_dir_get</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="84"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="85"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>the<sp/>pin<sp/>directions<sp/>mask.</highlight></codeline>
<codeline lineno="86"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="87"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>value<sp/>Mask<sp/>of<sp/>pin<sp/>directions<sp/>to<sp/>be<sp/>set.<sp/>0<sp/>is<sp/>input,<sp/>1<sp/>is<sp/>output.</highlight></codeline>
<codeline lineno="88"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__vpr__csr__vio__hal_1ga01d613ad768f18fbfafbad45c6c768f4" kindref="member">nrf_vpr_csr_vio_dir_set</ref>(uint16_t<sp/>value);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="91"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="92"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>the<sp/>buffered<sp/>pin<sp/>directions<sp/>mask.</highlight></codeline>
<codeline lineno="93"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="94"><highlight class="comment"><sp/>*<sp/>@return<sp/>Mask<sp/>of<sp/>pin<sp/>directions.<sp/>0<sp/>is<sp/>input,<sp/>1<sp/>is<sp/>output.</highlight></codeline>
<codeline lineno="95"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint16_t<sp/><ref refid="group__nrf__vpr__csr__vio__hal_1gaaf55076e5ee8be09ff7e83a833990d6f" kindref="member">nrf_vpr_csr_vio_dir_buffered_get</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="98"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="99"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>the<sp/>buffered<sp/>pin<sp/>directions<sp/>mask.</highlight></codeline>
<codeline lineno="100"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="101"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>value<sp/>Mask<sp/>of<sp/>pin<sp/>directions<sp/>to<sp/>be<sp/>set.<sp/>0<sp/>is<sp/>input,<sp/>1<sp/>is<sp/>output.</highlight></codeline>
<codeline lineno="102"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__vpr__csr__vio__hal_1gae4df98335dca2e70c9d741c5dd5c10e4" kindref="member">nrf_vpr_csr_vio_dir_buffered_set</ref>(uint16_t<sp/>value);</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="105"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="106"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>retrieving<sp/>the<sp/>dirty<sp/>status<sp/>of<sp/>buffered<sp/>pin<sp/>directions<sp/>mask.</highlight></codeline>
<codeline lineno="107"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="108"><highlight class="comment"><sp/>*<sp/>@retval<sp/>true<sp/><sp/>Buffer<sp/>is<sp/>dirty.</highlight></codeline>
<codeline lineno="109"><highlight class="comment"><sp/>*<sp/>@retval<sp/>fasle<sp/>Buffer<sp/>is<sp/>clean.</highlight></codeline>
<codeline lineno="110"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrf__vpr__csr__vio__hal_1ga28207758cf784f0f0e07679bf53ff306" kindref="member">nrf_vpr_csr_vio_dir_buffered_dirty_check</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="113"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="114"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>the<sp/>pin<sp/>directions<sp/>toggle<sp/>mask.</highlight></codeline>
<codeline lineno="115"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="116"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>mask<sp/>Mask<sp/>of<sp/>pin<sp/>directions<sp/>to<sp/>be<sp/>toggled.</highlight></codeline>
<codeline lineno="117"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__vpr__csr__vio__hal_1gafab31d6e80a544bb752dd641d738eaf2" kindref="member">nrf_vpr_csr_vio_dir_toggle_set</ref>(uint16_t<sp/>mask);</highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="120"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="121"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>the<sp/>buffered<sp/>pin<sp/>directions<sp/>toggle<sp/>mask.</highlight></codeline>
<codeline lineno="122"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="123"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>mask<sp/>Mask<sp/>of<sp/>pin<sp/>directions<sp/>to<sp/>be<sp/>toggled.</highlight></codeline>
<codeline lineno="124"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__vpr__csr__vio__hal_1ga9cb95077487000e8e044b1c8bd0fb0ae" kindref="member">nrf_vpr_csr_vio_dir_buffered_toggle_set</ref>(uint16_t<sp/>mask);</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="127"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="128"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>the<sp/>input<sp/>values.</highlight></codeline>
<codeline lineno="129"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="130"><highlight class="comment"><sp/>*<sp/>@return<sp/>Mask<sp/>of<sp/>input<sp/>states.<sp/>0<sp/>is<sp/>low,<sp/>1<sp/>is<sp/>high.</highlight></codeline>
<codeline lineno="131"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint16_t<sp/><ref refid="group__nrf__vpr__csr__vio__hal_1gaaf5ac6058e3c4477d57d82f47eb2677b" kindref="member">nrf_vpr_csr_vio_in_get</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(NRF54H20_ENGA_XXAA)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="135"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="136"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>the<sp/>input<sp/>mode.</highlight></codeline>
<codeline lineno="137"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="138"><highlight class="comment"><sp/>*<sp/>@return<sp/>Input<sp/>mode.</highlight></codeline>
<codeline lineno="139"><highlight class="comment"><sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal">NRF_STATIC_INLINE<sp/><ref refid="group__nrf__vpr__csr__vio__hal_1ga06a27f23a52d64b49a2558c7f4920fe2" kindref="member">nrf_vpr_csr_vio_mode_in_t</ref><sp/><ref refid="group__nrf__vpr__csr__vio__hal_1gaab361fc47f7c435ef16ecc6f70e93f2a" kindref="member">nrf_vpr_csr_vio_mode_in_get</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="142"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="143"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>the<sp/>input<sp/>mode.</highlight></codeline>
<codeline lineno="144"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="145"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>mode<sp/>Input<sp/>mode<sp/>to<sp/>be<sp/>set.</highlight></codeline>
<codeline lineno="146"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__vpr__csr__vio__hal_1gaf82dcf090e591671cb77a251abb792d7" kindref="member">nrf_vpr_csr_vio_mode_in_set</ref>(<ref refid="group__nrf__vpr__csr__vio__hal_1ga06a27f23a52d64b49a2558c7f4920fe2" kindref="member">nrf_vpr_csr_vio_mode_in_t</ref><sp/>mode);</highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="149"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="150"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>the<sp/>input<sp/>mode.</highlight></codeline>
<codeline lineno="151"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="152"><highlight class="comment"><sp/>*<sp/>@return<sp/>Mask<sp/>of<sp/>input<sp/>modes.<sp/>0<sp/>is<sp/>continous<sp/>sampling,<sp/>1<sp/>is<sp/>sampling<sp/>on<sp/>event.</highlight></codeline>
<codeline lineno="153"><highlight class="comment"><sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint16_t<sp/><ref refid="group__nrf__vpr__csr__vio__hal_1gaab361fc47f7c435ef16ecc6f70e93f2a" kindref="member">nrf_vpr_csr_vio_mode_in_get</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="156"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="157"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>the<sp/>input<sp/>mode.</highlight></codeline>
<codeline lineno="158"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="159"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>value<sp/>Mask<sp/>of<sp/>input<sp/>modes<sp/>to<sp/>be<sp/>set.<sp/>0<sp/>is<sp/>continous<sp/>sampling,<sp/>1<sp/>is<sp/>sampling<sp/>on<sp/>event.</highlight></codeline>
<codeline lineno="160"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__vpr__csr__vio__hal_1gaf82dcf090e591671cb77a251abb792d7" kindref="member">nrf_vpr_csr_vio_mode_in_set</ref>(uint16_t<sp/>mode);</highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="164"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="165"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>the<sp/>output<sp/>values.</highlight></codeline>
<codeline lineno="166"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="167"><highlight class="comment"><sp/>*<sp/>@return<sp/>Mask<sp/>of<sp/>output<sp/>states.<sp/>0<sp/>is<sp/>low,<sp/>1<sp/>is<sp/>high.</highlight></codeline>
<codeline lineno="168"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint16_t<sp/><ref refid="group__nrf__vpr__csr__vio__hal_1ga21b9a5220529b157e1cba1bc3fd87889" kindref="member">nrf_vpr_csr_vio_out_get</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="171"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="172"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>the<sp/>output<sp/>values.</highlight></codeline>
<codeline lineno="173"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="174"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>value<sp/>Mask<sp/>of<sp/>output<sp/>states<sp/>to<sp/>be<sp/>set.<sp/>0<sp/>is<sp/>low,<sp/>1<sp/>is<sp/>high.</highlight></codeline>
<codeline lineno="175"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__vpr__csr__vio__hal_1ga0a0f082368a5cb2805fbec2d3ea942ce" kindref="member">nrf_vpr_csr_vio_out_set</ref>(uint16_t<sp/>value);</highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="178"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="179"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>the<sp/>buffered<sp/>output<sp/>values.</highlight></codeline>
<codeline lineno="180"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="181"><highlight class="comment"><sp/>*<sp/>@return<sp/>Mask<sp/>of<sp/>output<sp/>states.<sp/>0<sp/>is<sp/>low,<sp/>1<sp/>is<sp/>high.</highlight></codeline>
<codeline lineno="182"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__vpr__csr__vio__hal_1ga6d6ee999f2e7458a658e53d5ee017a21" kindref="member">nrf_vpr_csr_vio_out_buffered_get</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="185"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="186"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>the<sp/>buffered<sp/>output<sp/>values.</highlight></codeline>
<codeline lineno="187"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="188"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>value<sp/>Mask<sp/>of<sp/>output<sp/>states<sp/>to<sp/>be<sp/>set.<sp/>0<sp/>is<sp/>low,<sp/>1<sp/>is<sp/>high.</highlight></codeline>
<codeline lineno="189"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__vpr__csr__vio__hal_1ga56386a33701915c9302789dbfbdd3163" kindref="member">nrf_vpr_csr_vio_out_buffered_set</ref>(uint32_t<sp/>value);</highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="192"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="193"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>retrieving<sp/>the<sp/>dirty<sp/>status<sp/>of<sp/>buffered<sp/>output<sp/>values.</highlight></codeline>
<codeline lineno="194"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="195"><highlight class="comment"><sp/>*<sp/>@retval<sp/>true<sp/><sp/>Buffer<sp/>is<sp/>dirty.</highlight></codeline>
<codeline lineno="196"><highlight class="comment"><sp/>*<sp/>@retval<sp/>fasle<sp/>Buffer<sp/>is<sp/>clean.</highlight></codeline>
<codeline lineno="197"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrf__vpr__csr__vio__hal_1ga2a7f5a9fc8b53bb03bd56c98d159fe4f" kindref="member">nrf_vpr_csr_vio_out_buffered_dirty_check</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="200"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="201"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>the<sp/>output<sp/>toggle<sp/>mask.</highlight></codeline>
<codeline lineno="202"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="203"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>mask<sp/>Mask<sp/>of<sp/>output<sp/>to<sp/>be<sp/>toggled.</highlight></codeline>
<codeline lineno="204"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__vpr__csr__vio__hal_1ga62fb441a8ba06daeea565ba96f3b0743" kindref="member">nrf_vpr_csr_vio_out_toggle_set</ref>(uint16_t<sp/>mask);</highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="207"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="208"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>the<sp/>buffered<sp/>output<sp/>toggle<sp/>mask.</highlight></codeline>
<codeline lineno="209"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="210"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>mask<sp/>Mask<sp/>of<sp/>output<sp/>to<sp/>be<sp/>toggled.</highlight></codeline>
<codeline lineno="211"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__vpr__csr__vio__hal_1ga467755f28dfe4f76ad6ad7562034ddd1" kindref="member">nrf_vpr_csr_vio_out_toggle_buffered_set</ref>(uint16_t<sp/>mask);</highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="214"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="215"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>the<sp/>combined<sp/>output<sp/>and<sp/>buffered<sp/>output<sp/>values.</highlight></codeline>
<codeline lineno="216"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="217"><highlight class="comment"><sp/>*<sp/>@note<sp/>Lower<sp/>16<sp/>bits<sp/>determine<sp/>the<sp/>output<sp/>state,<sp/>while<sp/>higher<sp/>16<sp/>bits<sp/>determine<sp/>the<sp/>buffered<sp/>output<sp/>state.</highlight></codeline>
<codeline lineno="218"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="219"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>value<sp/>Mask<sp/>of<sp/>output<sp/>states<sp/>to<sp/>be<sp/>set.<sp/>0<sp/>is<sp/>low,<sp/>1<sp/>is<sp/>high.</highlight></codeline>
<codeline lineno="220"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__vpr__csr__vio__hal_1gaee6d1bda3232ea49311b8b31923e487e" kindref="member">nrf_vpr_csr_vio_out_combined_set</ref>(uint32_t<sp/>value);</highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="223"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="224"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>the<sp/>combined<sp/>output<sp/>and<sp/>buffered<sp/>output<sp/>toggle<sp/>mask.</highlight></codeline>
<codeline lineno="225"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="226"><highlight class="comment"><sp/>*<sp/>@note<sp/>Lower<sp/>16<sp/>bits<sp/>determine<sp/>the<sp/>output<sp/>toggle,<sp/>while<sp/>higher<sp/>16<sp/>bits<sp/>determine<sp/>the<sp/>buffered<sp/>output<sp/>toggle.</highlight></codeline>
<codeline lineno="227"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="228"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>mask<sp/>Mask<sp/>of<sp/>output<sp/>to<sp/>be<sp/>toggled.</highlight></codeline>
<codeline lineno="229"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__vpr__csr__vio__hal_1ga145bfc34279c2b5a08286768c384422e" kindref="member">nrf_vpr_csr_vio_out_combined_toggle_set</ref>(uint32_t<sp/>mask);</highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="232"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="233"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>retrieving<sp/>the<sp/>dirty<sp/>status<sp/>of<sp/>combined<sp/>output<sp/>and<sp/>buffered<sp/>output<sp/>values.</highlight></codeline>
<codeline lineno="234"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="235"><highlight class="comment"><sp/>*<sp/>@retval<sp/>true<sp/><sp/>Buffer<sp/>is<sp/>dirty.</highlight></codeline>
<codeline lineno="236"><highlight class="comment"><sp/>*<sp/>@retval<sp/>fasle<sp/>Buffer<sp/>is<sp/>clean.</highlight></codeline>
<codeline lineno="237"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrf__vpr__csr__vio__hal_1gaf6e433d0fff79f32d0e11986747de431" kindref="member">nrf_vpr_csr_vio_out_combined_dirty_check</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="240"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="241"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>the<sp/>configuration<sp/>of<sp/>output<sp/>mode.</highlight></codeline>
<codeline lineno="242"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="243"><highlight class="comment"><sp/>*<sp/>@param[out]<sp/>p_mode<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>to<sp/>be<sp/>filled<sp/>with<sp/>output<sp/>mode.</highlight></codeline>
<codeline lineno="244"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__vpr__csr__vio__hal_1ga8895552bd54046f1b589f27822190f37" kindref="member">nrf_vpr_csr_vio_mode_out_get</ref>(<ref refid="structnrf__vpr__csr__vio__mode__out__t" kindref="compound">nrf_vpr_csr_vio_mode_out_t</ref><sp/>*<sp/>p_mode);</highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="247"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="248"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>the<sp/>configuration<sp/>of<sp/>output<sp/>mode.</highlight></codeline>
<codeline lineno="249"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="250"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_mode<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>with<sp/>output<sp/>mode<sp/>to<sp/>be<sp/>set.</highlight></codeline>
<codeline lineno="251"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__vpr__csr__vio__hal_1gac0aa33439c729f7c03133afc022a64cb" kindref="member">nrf_vpr_csr_vio_mode_out_set</ref>(<ref refid="structnrf__vpr__csr__vio__mode__out__t" kindref="compound">nrf_vpr_csr_vio_mode_out_t</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_mode);</highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="254"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="255"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>the<sp/>combined<sp/>pin<sp/>directions<sp/>mask<sp/>and<sp/>output<sp/>values.</highlight></codeline>
<codeline lineno="256"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="257"><highlight class="comment"><sp/>*<sp/>@note<sp/>Lower<sp/>16<sp/>bits<sp/>determine<sp/>the<sp/>output<sp/>state,<sp/>while<sp/>higher<sp/>16<sp/>bits<sp/>determine<sp/>the<sp/>pin<sp/>directions.</highlight></codeline>
<codeline lineno="258"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="259"><highlight class="comment"><sp/>*<sp/>@return<sp/>Mask<sp/>of<sp/>pin<sp/>directions<sp/>and<sp/>output<sp/>values.</highlight></codeline>
<codeline lineno="260"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__vpr__csr__vio__hal_1ga9f0c2e86846f5500a6bf464fef49a057" kindref="member">nrf_vpr_csr_vio_dirout_get</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="263"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="264"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>the<sp/>combined<sp/>pin<sp/>directions<sp/>mask<sp/>and<sp/>output<sp/>values.</highlight></codeline>
<codeline lineno="265"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="266"><highlight class="comment"><sp/>*<sp/>@note<sp/>Lower<sp/>16<sp/>bits<sp/>determine<sp/>the<sp/>output<sp/>state,<sp/>while<sp/>higher<sp/>16<sp/>bits<sp/>determine<sp/>the<sp/>pin<sp/>directions.</highlight></codeline>
<codeline lineno="267"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="268"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>value<sp/>Mask<sp/>of<sp/>pin<sp/>directions<sp/>and<sp/>output<sp/>values.</highlight></codeline>
<codeline lineno="269"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__vpr__csr__vio__hal_1gaa11088c59191d9d1e880742d46df2635" kindref="member">nrf_vpr_csr_vio_dirout_set</ref>(uint32_t<sp/>value);</highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="272"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="273"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>the<sp/>combined<sp/>buffered<sp/>pin<sp/>directions<sp/>mask<sp/>and<sp/>buffered<sp/>output<sp/>values.</highlight></codeline>
<codeline lineno="274"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="275"><highlight class="comment"><sp/>*<sp/>@note<sp/>Lower<sp/>16<sp/>bits<sp/>determine<sp/>the<sp/>buffered<sp/>output<sp/>state,<sp/>while<sp/>higher<sp/>16<sp/>bits<sp/>determine<sp/>the<sp/>buffered<sp/>pin<sp/>directions.</highlight></codeline>
<codeline lineno="276"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="277"><highlight class="comment"><sp/>*<sp/>@return<sp/>Mask<sp/>of<sp/>buffered<sp/>pin<sp/>directions<sp/>and<sp/>buffered<sp/>output<sp/>values.</highlight></codeline>
<codeline lineno="278"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__vpr__csr__vio__hal_1gacf635df7125873797d3784539a47802c" kindref="member">nrf_vpr_csr_vio_dirout_buffered_get</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="281"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="282"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>the<sp/>combined<sp/>buffered<sp/>pin<sp/>directions<sp/>mask<sp/>and<sp/>buffered<sp/>output<sp/>values.</highlight></codeline>
<codeline lineno="283"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="284"><highlight class="comment"><sp/>*<sp/>@note<sp/>Lower<sp/>16<sp/>bits<sp/>determine<sp/>the<sp/>buffered<sp/>output<sp/>state,<sp/>while<sp/>higher<sp/>16<sp/>bits<sp/>determine<sp/>the<sp/>buffered<sp/>pin<sp/>directions.</highlight></codeline>
<codeline lineno="285"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="286"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>value<sp/>Mask<sp/>of<sp/>buffered<sp/>pin<sp/>directions<sp/>and<sp/>buffered<sp/>output<sp/>values.</highlight></codeline>
<codeline lineno="287"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__vpr__csr__vio__hal_1gaa3c91c1e6b20f0dbf06d0eda9895fdae" kindref="member">nrf_vpr_csr_vio_dirout_buffered_set</ref>(uint32_t<sp/>value);</highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="290"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="291"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>retrieving<sp/>the<sp/>dirty<sp/>status<sp/>of<sp/>combined<sp/>buffered<sp/>pin<sp/>directions<sp/>mask<sp/>and<sp/>buffered<sp/>output<sp/>values.</highlight></codeline>
<codeline lineno="292"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="293"><highlight class="comment"><sp/>*<sp/>@retval<sp/>true<sp/><sp/>Buffer<sp/>is<sp/>dirty.</highlight></codeline>
<codeline lineno="294"><highlight class="comment"><sp/>*<sp/>@retval<sp/>fasle<sp/>Buffer<sp/>is<sp/>clean.</highlight></codeline>
<codeline lineno="295"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrf__vpr__csr__vio__hal_1ga346964be5a98d56c7aa6ba986466896d" kindref="member">nrf_vpr_csr_vio_dirout_buffered_dirty_check</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="298"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="299"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>the<sp/>combined<sp/>pin<sp/>directions<sp/>and<sp/>output<sp/>toggle<sp/>masks.</highlight></codeline>
<codeline lineno="300"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="301"><highlight class="comment"><sp/>*<sp/>@note<sp/>Lower<sp/>16<sp/>bits<sp/>determine<sp/>the<sp/>output<sp/>toggle,<sp/>while<sp/>higher<sp/>16<sp/>bits<sp/>determine<sp/>the<sp/>pin<sp/>directions<sp/>toggle.</highlight></codeline>
<codeline lineno="302"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="303"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>mask<sp/>Mask<sp/>of<sp/>values<sp/>to<sp/>be<sp/>toggled.</highlight></codeline>
<codeline lineno="304"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__vpr__csr__vio__hal_1ga53befc4f698d1926c33ae25dbc60572b" kindref="member">nrf_vpr_csr_vio_dirout_toggle_set</ref>(uint32_t<sp/>mask);</highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="307"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="308"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>the<sp/>combined<sp/>buffered<sp/>pin<sp/>directions<sp/>and<sp/>buffered<sp/>output<sp/>toggle<sp/>masks.</highlight></codeline>
<codeline lineno="309"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="310"><highlight class="comment"><sp/>*<sp/>@note<sp/>Lower<sp/>16<sp/>bits<sp/>determine<sp/>the<sp/>buffered<sp/>output<sp/>toggle,<sp/>while<sp/>higher<sp/>16<sp/>bits<sp/>determine<sp/>the<sp/>buffered<sp/>pin<sp/>directions<sp/>toggle.</highlight></codeline>
<codeline lineno="311"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="312"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>mask<sp/>Mask<sp/>of<sp/>values<sp/>to<sp/>be<sp/>toggled.</highlight></codeline>
<codeline lineno="313"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__vpr__csr__vio__hal_1gafbcd4383f2b84f53ce7adacaa0a4659f" kindref="member">nrf_vpr_csr_vio_dirout_toggle_buffered_set</ref>(uint32_t<sp/>mask);</highlight></codeline>
<codeline lineno="315"><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>NRF_DECLARE_ONLY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint16_t<sp/><ref refid="group__nrf__vpr__csr__vio__hal_1ga843441f8e5f2adeb3844a544f81e4f6a" kindref="member">nrf_vpr_csr_vio_dir_get</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="319"><highlight class="normal">{</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(uint16_t)nrf_csr_read(VPRCSR_NORDIC_DIR);</highlight></codeline>
<codeline lineno="321"><highlight class="normal">}</highlight></codeline>
<codeline lineno="322"><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__vpr__csr__vio__hal_1ga01d613ad768f18fbfafbad45c6c768f4" kindref="member">nrf_vpr_csr_vio_dir_set</ref>(uint16_t<sp/>value)</highlight></codeline>
<codeline lineno="324"><highlight class="normal">{</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/>nrf_csr_write(VPRCSR_NORDIC_DIR,<sp/>value);</highlight></codeline>
<codeline lineno="326"><highlight class="normal">}</highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint16_t<sp/><ref refid="group__nrf__vpr__csr__vio__hal_1gaaf55076e5ee8be09ff7e83a833990d6f" kindref="member">nrf_vpr_csr_vio_dir_buffered_get</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="329"><highlight class="normal">{</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(uint16_t)nrf_csr_read(VPRCSR_NORDIC_DIRB);</highlight></codeline>
<codeline lineno="331"><highlight class="normal">}</highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__vpr__csr__vio__hal_1gae4df98335dca2e70c9d741c5dd5c10e4" kindref="member">nrf_vpr_csr_vio_dir_buffered_set</ref>(uint16_t<sp/>value)</highlight></codeline>
<codeline lineno="334"><highlight class="normal">{</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/>nrf_csr_write(VPRCSR_NORDIC_DIRB,<sp/>value);</highlight></codeline>
<codeline lineno="336"><highlight class="normal">}</highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrf__vpr__csr__vio__hal_1ga28207758cf784f0f0e07679bf53ff306" kindref="member">nrf_vpr_csr_vio_dir_buffered_dirty_check</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="339"><highlight class="normal">{</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((nrf_csr_read(VPRCSR_NORDIC_DIRBS)<sp/>&amp;<sp/>VPRCSR_NORDIC_DIRBS_DIRTYBIT_Msk)</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;<sp/>VPRCSR_NORDIC_DIRBS_DIRTYBIT_Pos)<sp/>==<sp/>VPRCSR_NORDIC_DIRBS_DIRTYBIT_DIRTY;</highlight></codeline>
<codeline lineno="342"><highlight class="normal">}</highlight></codeline>
<codeline lineno="343"><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__vpr__csr__vio__hal_1gafab31d6e80a544bb752dd641d738eaf2" kindref="member">nrf_vpr_csr_vio_dir_toggle_set</ref>(uint16_t<sp/>mask)</highlight></codeline>
<codeline lineno="345"><highlight class="normal">{</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/>nrf_csr_write(VPRCSR_NORDIC_DIRTGL,<sp/>mask);</highlight></codeline>
<codeline lineno="347"><highlight class="normal">}</highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__vpr__csr__vio__hal_1ga9cb95077487000e8e044b1c8bd0fb0ae" kindref="member">nrf_vpr_csr_vio_dir_buffered_toggle_set</ref>(uint16_t<sp/>mask)</highlight></codeline>
<codeline lineno="350"><highlight class="normal">{</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/>nrf_csr_write(VPRCSR_NORDIC_DIRBTGL,<sp/>mask);</highlight></codeline>
<codeline lineno="352"><highlight class="normal">}</highlight></codeline>
<codeline lineno="353"><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint16_t<sp/><ref refid="group__nrf__vpr__csr__vio__hal_1gaaf5ac6058e3c4477d57d82f47eb2677b" kindref="member">nrf_vpr_csr_vio_in_get</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="355"><highlight class="normal">{</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(uint16_t)nrf_csr_read(VPRCSR_NORDIC_IN);</highlight></codeline>
<codeline lineno="357"><highlight class="normal">}</highlight></codeline>
<codeline lineno="358"><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(NRF54H20_ENGA_XXAA)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal">NRF_STATIC_INLINE<sp/><ref refid="group__nrf__vpr__csr__vio__hal_1ga06a27f23a52d64b49a2558c7f4920fe2" kindref="member">nrf_vpr_csr_vio_mode_in_t</ref><sp/><ref refid="group__nrf__vpr__csr__vio__hal_1gaab361fc47f7c435ef16ecc6f70e93f2a" kindref="member">nrf_vpr_csr_vio_mode_in_get</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="361"><highlight class="normal">{</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>nrf_csr_read(VPRCSR_NORDIC_INMODE);</highlight></codeline>
<codeline lineno="363"><highlight class="normal">}</highlight></codeline>
<codeline lineno="364"><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__vpr__csr__vio__hal_1gaf82dcf090e591671cb77a251abb792d7" kindref="member">nrf_vpr_csr_vio_mode_in_set</ref>(<ref refid="group__nrf__vpr__csr__vio__hal_1ga06a27f23a52d64b49a2558c7f4920fe2" kindref="member">nrf_vpr_csr_vio_mode_in_t</ref><sp/>mode)</highlight></codeline>
<codeline lineno="366"><highlight class="normal">{</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/>nrf_csr_write(VPRCSR_NORDIC_INMODE,<sp/>mode);</highlight></codeline>
<codeline lineno="368"><highlight class="normal">}</highlight></codeline>
<codeline lineno="369"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint16_t<sp/><ref refid="group__nrf__vpr__csr__vio__hal_1gaab361fc47f7c435ef16ecc6f70e93f2a" kindref="member">nrf_vpr_csr_vio_mode_in_get</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="371"><highlight class="normal">{</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(uint16_t)nrf_csr_read(VPRCSR_NORDIC_INMODE);</highlight></codeline>
<codeline lineno="373"><highlight class="normal">}</highlight></codeline>
<codeline lineno="374"><highlight class="normal"></highlight></codeline>
<codeline lineno="375"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__vpr__csr__vio__hal_1gaf82dcf090e591671cb77a251abb792d7" kindref="member">nrf_vpr_csr_vio_mode_in_set</ref>(uint16_t<sp/>value)</highlight></codeline>
<codeline lineno="376"><highlight class="normal">{</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/>nrf_csr_write(VPRCSR_NORDIC_INMODE,<sp/>value);</highlight></codeline>
<codeline lineno="378"><highlight class="normal">}</highlight></codeline>
<codeline lineno="379"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="380"><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint16_t<sp/><ref refid="group__nrf__vpr__csr__vio__hal_1ga21b9a5220529b157e1cba1bc3fd87889" kindref="member">nrf_vpr_csr_vio_out_get</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="382"><highlight class="normal">{</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(uint16_t)nrf_csr_read(VPRCSR_NORDIC_OUT);</highlight></codeline>
<codeline lineno="384"><highlight class="normal">}</highlight></codeline>
<codeline lineno="385"><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__vpr__csr__vio__hal_1ga0a0f082368a5cb2805fbec2d3ea942ce" kindref="member">nrf_vpr_csr_vio_out_set</ref>(uint16_t<sp/>value)</highlight></codeline>
<codeline lineno="387"><highlight class="normal">{</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/>nrf_csr_write(VPRCSR_NORDIC_OUT,<sp/>value);</highlight></codeline>
<codeline lineno="389"><highlight class="normal">}</highlight></codeline>
<codeline lineno="390"><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__vpr__csr__vio__hal_1ga6d6ee999f2e7458a658e53d5ee017a21" kindref="member">nrf_vpr_csr_vio_out_buffered_get</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="392"><highlight class="normal">{</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>nrf_csr_read(VPRCSR_NORDIC_OUTB);</highlight></codeline>
<codeline lineno="394"><highlight class="normal">}</highlight></codeline>
<codeline lineno="395"><highlight class="normal"></highlight></codeline>
<codeline lineno="396"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__vpr__csr__vio__hal_1ga56386a33701915c9302789dbfbdd3163" kindref="member">nrf_vpr_csr_vio_out_buffered_set</ref>(uint32_t<sp/>value)</highlight></codeline>
<codeline lineno="397"><highlight class="normal">{</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/>nrf_csr_write(VPRCSR_NORDIC_OUTB,<sp/>value);</highlight></codeline>
<codeline lineno="399"><highlight class="normal">}</highlight></codeline>
<codeline lineno="400"><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrf__vpr__csr__vio__hal_1ga2a7f5a9fc8b53bb03bd56c98d159fe4f" kindref="member">nrf_vpr_csr_vio_out_buffered_dirty_check</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="402"><highlight class="normal">{</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((nrf_csr_read(VPRCSR_NORDIC_OUTBS)<sp/>&amp;<sp/>VPRCSR_NORDIC_OUTBS_DIRTYBIT_Msk)</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;<sp/>VPRCSR_NORDIC_OUTBS_DIRTYBIT_Pos)<sp/>==<sp/>VPRCSR_NORDIC_OUTBS_DIRTYBIT_DIRTY;</highlight></codeline>
<codeline lineno="405"><highlight class="normal">}</highlight></codeline>
<codeline lineno="406"><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__vpr__csr__vio__hal_1ga62fb441a8ba06daeea565ba96f3b0743" kindref="member">nrf_vpr_csr_vio_out_toggle_set</ref>(uint16_t<sp/>mask)</highlight></codeline>
<codeline lineno="408"><highlight class="normal">{</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/>nrf_csr_write(VPRCSR_NORDIC_OUTTGL,<sp/>mask);</highlight></codeline>
<codeline lineno="410"><highlight class="normal">}</highlight></codeline>
<codeline lineno="411"><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__vpr__csr__vio__hal_1ga467755f28dfe4f76ad6ad7562034ddd1" kindref="member">nrf_vpr_csr_vio_out_toggle_buffered_set</ref>(uint16_t<sp/>mask)</highlight></codeline>
<codeline lineno="413"><highlight class="normal">{</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/>nrf_csr_write(VPRCSR_NORDIC_OUTBTGL,<sp/>mask);</highlight></codeline>
<codeline lineno="415"><highlight class="normal">}</highlight></codeline>
<codeline lineno="416"><highlight class="normal"></highlight></codeline>
<codeline lineno="417"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__vpr__csr__vio__hal_1gaee6d1bda3232ea49311b8b31923e487e" kindref="member">nrf_vpr_csr_vio_out_combined_set</ref>(uint32_t<sp/>value)</highlight></codeline>
<codeline lineno="418"><highlight class="normal">{</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/>nrf_csr_write(VPRCSR_NORDIC_OUTBD,<sp/>value);</highlight></codeline>
<codeline lineno="420"><highlight class="normal">}</highlight></codeline>
<codeline lineno="421"><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__vpr__csr__vio__hal_1ga145bfc34279c2b5a08286768c384422e" kindref="member">nrf_vpr_csr_vio_out_combined_toggle_set</ref>(uint32_t<sp/>mask)</highlight></codeline>
<codeline lineno="423"><highlight class="normal">{</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/>nrf_csr_write(VPRCSR_NORDIC_OUTBDTGL,<sp/>mask);</highlight></codeline>
<codeline lineno="425"><highlight class="normal">}</highlight></codeline>
<codeline lineno="426"><highlight class="normal"></highlight></codeline>
<codeline lineno="427"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrf__vpr__csr__vio__hal_1gaf6e433d0fff79f32d0e11986747de431" kindref="member">nrf_vpr_csr_vio_out_combined_dirty_check</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="428"><highlight class="normal">{</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((nrf_csr_read(VPRCSR_NORDIC_OUTBDS)<sp/>&amp;<sp/>VPRCSR_NORDIC_OUTBDS_DIRTYBIT_Msk)</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;<sp/>VPRCSR_NORDIC_OUTBDS_DIRTYBIT_Pos)<sp/>==<sp/>VPRCSR_NORDIC_OUTBDS_DIRTYBIT_DIRTY;</highlight></codeline>
<codeline lineno="431"><highlight class="normal">}</highlight></codeline>
<codeline lineno="432"><highlight class="normal"></highlight></codeline>
<codeline lineno="433"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__vpr__csr__vio__hal_1ga8895552bd54046f1b589f27822190f37" kindref="member">nrf_vpr_csr_vio_mode_out_get</ref>(<ref refid="structnrf__vpr__csr__vio__mode__out__t" kindref="compound">nrf_vpr_csr_vio_mode_out_t</ref><sp/>*<sp/>p_mode)</highlight></codeline>
<codeline lineno="434"><highlight class="normal">{</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>reg<sp/>=<sp/>nrf_csr_read(VPRCSR_NORDIC_OUTMODE);</highlight></codeline>
<codeline lineno="436"><highlight class="normal"></highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/>p_mode-&gt;<ref refid="structnrf__vpr__csr__vio__mode__out__t_1a851069ad2290cd9e43ccc99e3572f8a8" kindref="member">shift_enable</ref><sp/>=<sp/>((reg<sp/>&amp;<sp/>VPRCSR_NORDIC_OUTMODE_SHIFTMODE_Msk)</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;<sp/>VPRCSR_NORDIC_OUTMODE_SHIFTMODE_Pos)</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>==<sp/>VPRCSR_NORDIC_OUTMODE_SHIFTMODE_Enabled<sp/>?<sp/>true<sp/>:<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/>p_mode-&gt;<ref refid="structnrf__vpr__csr__vio__mode__out__t_1aecc994ce183275d780085bbbe17a1fde" kindref="member">shift_size</ref><sp/><sp/><sp/>=<sp/>(reg<sp/>&amp;<sp/>VPRCSR_NORDIC_OUTMODE_SHIFSIZE_Msk)</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;<sp/>VPRCSR_NORDIC_OUTMODE_SHIFSIZE_Pos;</highlight></codeline>
<codeline lineno="442"><highlight class="normal">}</highlight></codeline>
<codeline lineno="443"><highlight class="normal"></highlight></codeline>
<codeline lineno="444"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__vpr__csr__vio__hal_1gac0aa33439c729f7c03133afc022a64cb" kindref="member">nrf_vpr_csr_vio_mode_out_set</ref>(<ref refid="structnrf__vpr__csr__vio__mode__out__t" kindref="compound">nrf_vpr_csr_vio_mode_out_t</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_mode)</highlight></codeline>
<codeline lineno="445"><highlight class="normal">{</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>reg<sp/>=<sp/>((p_mode-&gt;<ref refid="structnrf__vpr__csr__vio__mode__out__t_1a851069ad2290cd9e43ccc99e3572f8a8" kindref="member">shift_enable</ref><sp/>?<sp/>VPRCSR_NORDIC_OUTMODE_SHIFTMODE_Enabled<sp/>:</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VPRCSR_NORDIC_OUTMODE_SHIFTMODE_Disabled)</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>VPRCSR_NORDIC_OUTMODE_SHIFTMODE_Pos)<sp/>|</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((p_mode-&gt;<ref refid="structnrf__vpr__csr__vio__mode__out__t_1aecc994ce183275d780085bbbe17a1fde" kindref="member">shift_size</ref><sp/>&lt;&lt;<sp/>VPRCSR_NORDIC_OUTMODE_SHIFSIZE_Pos)</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;<sp/>VPRCSR_NORDIC_OUTMODE_SHIFSIZE_Msk);</highlight></codeline>
<codeline lineno="451"><highlight class="normal"></highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/>nrf_csr_write(VPRCSR_NORDIC_OUTMODE,<sp/>reg);</highlight></codeline>
<codeline lineno="453"><highlight class="normal">}</highlight></codeline>
<codeline lineno="454"><highlight class="normal"></highlight></codeline>
<codeline lineno="455"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__vpr__csr__vio__hal_1ga9f0c2e86846f5500a6bf464fef49a057" kindref="member">nrf_vpr_csr_vio_dirout_get</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="456"><highlight class="normal">{</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>nrf_csr_read(VPRCSR_NORDIC_DIROUT);</highlight></codeline>
<codeline lineno="458"><highlight class="normal">}</highlight></codeline>
<codeline lineno="459"><highlight class="normal"></highlight></codeline>
<codeline lineno="460"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__vpr__csr__vio__hal_1gaa11088c59191d9d1e880742d46df2635" kindref="member">nrf_vpr_csr_vio_dirout_set</ref>(uint32_t<sp/>value)</highlight></codeline>
<codeline lineno="461"><highlight class="normal">{</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/>nrf_csr_write(VPRCSR_NORDIC_DIROUT,<sp/>value);</highlight></codeline>
<codeline lineno="463"><highlight class="normal">}</highlight></codeline>
<codeline lineno="464"><highlight class="normal"></highlight></codeline>
<codeline lineno="465"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__vpr__csr__vio__hal_1gacf635df7125873797d3784539a47802c" kindref="member">nrf_vpr_csr_vio_dirout_buffered_get</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="466"><highlight class="normal">{</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>nrf_csr_read(VPRCSR_NORDIC_DIROUTB);</highlight></codeline>
<codeline lineno="468"><highlight class="normal">}</highlight></codeline>
<codeline lineno="469"><highlight class="normal"></highlight></codeline>
<codeline lineno="470"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__vpr__csr__vio__hal_1gaa3c91c1e6b20f0dbf06d0eda9895fdae" kindref="member">nrf_vpr_csr_vio_dirout_buffered_set</ref>(uint32_t<sp/>value)</highlight></codeline>
<codeline lineno="471"><highlight class="normal">{</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/>nrf_csr_write(VPRCSR_NORDIC_DIROUTB,<sp/>value);</highlight></codeline>
<codeline lineno="473"><highlight class="normal">}</highlight></codeline>
<codeline lineno="474"><highlight class="normal"></highlight></codeline>
<codeline lineno="475"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrf__vpr__csr__vio__hal_1ga346964be5a98d56c7aa6ba986466896d" kindref="member">nrf_vpr_csr_vio_dirout_buffered_dirty_check</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="476"><highlight class="normal">{</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((nrf_csr_read(VPRCSR_NORDIC_DIROUTBS)<sp/>&amp;<sp/>VPRCSR_NORDIC_DIROUTBS_DIRTYBIT_Msk)</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;<sp/>VPRCSR_NORDIC_DIROUTBS_DIRTYBIT_Pos)<sp/>==<sp/>VPRCSR_NORDIC_DIROUTBS_DIRTYBIT_DIRTY;</highlight></codeline>
<codeline lineno="479"><highlight class="normal">}</highlight></codeline>
<codeline lineno="480"><highlight class="normal"></highlight></codeline>
<codeline lineno="481"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__vpr__csr__vio__hal_1ga53befc4f698d1926c33ae25dbc60572b" kindref="member">nrf_vpr_csr_vio_dirout_toggle_set</ref>(uint32_t<sp/>mask)</highlight></codeline>
<codeline lineno="482"><highlight class="normal">{</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/>nrf_csr_write(VPRCSR_NORDIC_DIROUTTGL,<sp/>mask);</highlight></codeline>
<codeline lineno="484"><highlight class="normal">}</highlight></codeline>
<codeline lineno="485"><highlight class="normal"></highlight></codeline>
<codeline lineno="486"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__vpr__csr__vio__hal_1gafbcd4383f2b84f53ce7adacaa0a4659f" kindref="member">nrf_vpr_csr_vio_dirout_toggle_buffered_set</ref>(uint32_t<sp/>mask)</highlight></codeline>
<codeline lineno="487"><highlight class="normal">{</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/>nrf_csr_write(VPRCSR_NORDIC_DIROUTBTGL,<sp/>mask);</highlight></codeline>
<codeline lineno="489"><highlight class="normal">}</highlight></codeline>
<codeline lineno="490"><highlight class="normal"></highlight></codeline>
<codeline lineno="491"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRF_DECLARE_ONLY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="492"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="493"><highlight class="comment">/**<sp/>@}<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="494"><highlight class="normal"></highlight></codeline>
<codeline lineno="495"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="496"><highlight class="normal">}</highlight></codeline>
<codeline lineno="497"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="498"><highlight class="normal"></highlight></codeline>
<codeline lineno="499"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRF_VPR_CSR_VIO_H__</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="hal/nrf_vpr_csr_vio.h"/>
  </compounddef>
</doxygen>
