<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="group__nrf__resetinfo__hal" kind="group">
    <compoundname>nrf_resetinfo_hal</compoundname>
    <title>RESETINFO HAL</title>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="group__nrf__resetinfo__hal_1gaaa248cd4faf645456d58c8c3157040d5" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_resetinfo_resetreas_global_mask_t</name>
        <enumvalue id="group__nrf__resetinfo__hal_1ggaaa248cd4faf645456d58c8c3157040d5a37d6b175d04d6665bfa035eb31e3df84" prot="public">
          <name>NRF_RESETINFO_RESETREAS_GLOBAL_POR_MASK</name>
          <initializer>= RESETINFO_RESETREAS_GLOBAL_RESETPOR_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Reset from power on reset. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__resetinfo__hal_1ggaaa248cd4faf645456d58c8c3157040d5a332c7e3ed5a703b63d689a25fbb97843" prot="public">
          <name>NRF_RESETINFO_RESETREAS_GLOBAL_PIN_MASK</name>
          <initializer>= RESETINFO_RESETREAS_GLOBAL_RESETPIN_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Reset from pin reset. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__resetinfo__hal_1ggaaa248cd4faf645456d58c8c3157040d5ab733faabe8b155ba2469a05c8c356a07" prot="public">
          <name>NRF_RESETINFO_RESETREAS_GLOBAL_DOG_MASK</name>
          <initializer>= RESETINFO_RESETREAS_GLOBAL_DOG_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Reset from the SysCtrl watchdog timer. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__resetinfo__hal_1ggaaa248cd4faf645456d58c8c3157040d5a55ac7cf5bcc0d27cdb0e27506547b114" prot="public">
          <name>NRF_RESETINFO_RESETREAS_GLOBAL_CTRLAP_MASK</name>
          <initializer>= RESETINFO_RESETREAS_GLOBAL_CTRLAP_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Reset from CTRL-AP. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__resetinfo__hal_1ggaaa248cd4faf645456d58c8c3157040d5a89de58be72aadf69cdf9fd1ced61f6de" prot="public">
          <name>NRF_RESETINFO_RESETREAS_GLOBAL_SECSREQ_MASK</name>
          <initializer>= RESETINFO_RESETREAS_GLOBAL_SECSREQ_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Reset due to secure domain system reset request. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__resetinfo__hal_1ggaaa248cd4faf645456d58c8c3157040d5a6867f907a8ee14c1af04ef66265490f9" prot="public">
          <name>NRF_RESETINFO_RESETREAS_GLOBAL_SECWDT0_MASK</name>
          <initializer>= RESETINFO_RESETREAS_GLOBAL_SECWDT0_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Reset due to secure domain watchdog 0 timer. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__resetinfo__hal_1ggaaa248cd4faf645456d58c8c3157040d5ab94da3a976b43a5b36a33b108da80a4b" prot="public">
          <name>NRF_RESETINFO_RESETREAS_GLOBAL_SECWDT1_MASK</name>
          <initializer>= RESETINFO_RESETREAS_GLOBAL_SECWDT1_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Reset due to secure domain watchdog 1 timer. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__resetinfo__hal_1ggaaa248cd4faf645456d58c8c3157040d5aaf8721565a17784df23d420eb096dc94" prot="public">
          <name>NRF_RESETINFO_RESETREAS_GLOBAL_SECLOCKUP_MASK</name>
          <initializer>= RESETINFO_RESETREAS_GLOBAL_SECLOCKUP_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Reset due to secure domain lockup. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__resetinfo__hal_1ggaaa248cd4faf645456d58c8c3157040d5a528c14bb7c752fb4edaf387d5a9e07e9" prot="public">
          <name>NRF_RESETINFO_RESETREAS_GLOBAL_SECTAMPER_MASK</name>
          <initializer>= RESETINFO_RESETREAS_GLOBAL_SECTAMPER_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Reset due to secure domain tamper detected. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__resetinfo__hal_1ggaaa248cd4faf645456d58c8c3157040d5a72570be78dbb84504e2d145e6e6814a0" prot="public">
          <name>NRF_RESETINFO_RESETREAS_GLOBAL_GPIO_MASK</name>
          <initializer>= RESETINFO_RESETREAS_GLOBAL_OFF_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Reset due to wakeup from System OFF triggered by DETECT signal from GPIO. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__resetinfo__hal_1ggaaa248cd4faf645456d58c8c3157040d5a971577685e0ecd401b4d8fd1d98f4ec5" prot="public">
          <name>NRF_RESETINFO_RESETREAS_GLOBAL_LPCOMP_MASK</name>
          <initializer>= RESETINFO_RESETREAS_GLOBAL_LPCOMP_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Reset due to wakeup from System OFF triggered by LPCOMP. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__resetinfo__hal_1ggaaa248cd4faf645456d58c8c3157040d5a7820813d3a2a95a6845ac275dd7cb783" prot="public">
          <name>NRF_RESETINFO_RESETREAS_GLOBAL_DIF_MASK</name>
          <initializer>= RESETINFO_RESETREAS_GLOBAL_DIF_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Reset due to wakeup from System OFF triggered by entering debug interface mode. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__resetinfo__hal_1ggaaa248cd4faf645456d58c8c3157040d5a563a79aff2dbecaf3c0ef83d8886a9ee" prot="public">
          <name>NRF_RESETINFO_RESETREAS_GLOBAL_GRTC_MASK</name>
          <initializer>= RESETINFO_RESETREAS_GLOBAL_GRTC_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Reset due to wakeup from System OFF triggered by GRTC interrupt. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__resetinfo__hal_1ggaaa248cd4faf645456d58c8c3157040d5a44a6c06d1cb326b04c4ed1f94c543b9a" prot="public">
          <name>NRF_RESETINFO_RESETREAS_GLOBAL_NFC_MASK</name>
          <initializer>= RESETINFO_RESETREAS_GLOBAL_NFC_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Reset due to wakeup from System OFF triggered by NRF field detection in sense mode. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__resetinfo__hal_1ggaaa248cd4faf645456d58c8c3157040d5a4665992dcac52a6dc6f77a6138e7275a" prot="public">
          <name>NRF_RESETINFO_RESETREAS_GLOBAL_VUSB_MASK</name>
          <initializer>= RESETINFO_RESETREAS_GLOBAL_VUSB_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Reset due to wakeup from System OFF triggered by VBUS rising into valid range. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Global reset reason mask. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_resetinfo.h" line="86" column="1" bodyfile="hal/nrf_resetinfo.h" bodystart="87" bodyend="107"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__resetinfo__hal_1ga67d288fe674ad1d9955666038a6db801" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_resetinfo_resetreas_local_mask_t</name>
        <enumvalue id="group__nrf__resetinfo__hal_1gga67d288fe674ad1d9955666038a6db801a494a117d13dee34534c9d04d61429119" prot="public">
          <name>NRF_RESETINFO_RESETREAS_LOCAL_DOG_MASK</name>
          <initializer>= RESETINFO_RESETREAS_LOCAL_DOG_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Reset from the local watchdog timer. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__resetinfo__hal_1gga67d288fe674ad1d9955666038a6db801ac246432fb33b6b4d919d15b371f8b65c" prot="public">
          <name>NRF_RESETINFO_RESETREAS_LOCAL_DOGNS_MASK</name>
          <initializer>= RESETINFO_RESETREAS_LOCAL_DOGNS_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Reset from the local non-secure watchdog timer. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__resetinfo__hal_1gga67d288fe674ad1d9955666038a6db801a80fb72a87c870d9f12307800b3af5b35" prot="public">
          <name>NRF_RESETINFO_RESETREAS_LOCAL_SREQ_MASK</name>
          <initializer>= RESETINFO_RESETREAS_LOCAL_SREQ_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Reset from the local soft reset request. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__resetinfo__hal_1gga67d288fe674ad1d9955666038a6db801a834efc7f9ec6f79328011450be380e46" prot="public">
          <name>NRF_RESETINFO_RESETREAS_LOCAL_LOCKUP_MASK</name>
          <initializer>= RESETINFO_RESETREAS_LOCAL_LOCKUP_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Reset from local CPU lockup. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__resetinfo__hal_1gga67d288fe674ad1d9955666038a6db801abe7f183cecfc2d2913c685e29147de1b" prot="public">
          <name>NRF_RESETINFO_RESETREAS_LOCAL_CROSSDOMAIN_MASK</name>
          <initializer>= RESETINFO_RESETREAS_LOCAL_CROSSDOMAIN_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Reset due to cross domain reset source. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__resetinfo__hal_1gga67d288fe674ad1d9955666038a6db801a9995131f157a432a0537fcc24185324a" prot="public">
          <name>NRF_RESETINFO_RESETREAS_LOCAL_UNRETAINED_MASK</name>
          <initializer>= RESETINFO_RESETREAS_LOCAL_UNRETAINEDWAKE_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Reset due to wake from unretained state. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Local reset reason mask. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_resetinfo.h" line="110" column="1" bodyfile="hal/nrf_resetinfo.h" bodystart="111" bodyend="120"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__nrf__resetinfo__hal_1ga090c958653fc428debbbf09462695f52" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_resetinfo_resetreas_global_set</definition>
        <argsstring>(NRF_RESETINFO_Type *p_reg, uint32_t mask)</argsstring>
        <name>nrf_resetinfo_resetreas_global_set</name>
        <param>
          <type>NRF_RESETINFO_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Function for setting the global reset reason. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of reasons to be set, constructed from <ref refid="group__nrf__resetinfo__hal_1gaaa248cd4faf645456d58c8c3157040d5" kindref="member">nrf_resetinfo_resetreas_global_mask_t</ref> enumerator values. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_resetinfo.h" line="241" column="24" bodyfile="hal/nrf_resetinfo.h" bodystart="241" bodyend="245" declfile="hal/nrf_resetinfo.h" declline="129" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__resetinfo__hal_1gab01fad7e287b739c9474affc90c10f9c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_resetinfo_resetreas_global_get</definition>
        <argsstring>(NRF_RESETINFO_Type const *p_reg)</argsstring>
        <name>nrf_resetinfo_resetreas_global_get</name>
        <param>
          <type>NRF_RESETINFO_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting the global reset reason. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Mask of detected global reset reasons constructed with <ref refid="group__nrf__resetinfo__hal_1gaaa248cd4faf645456d58c8c3157040d5" kindref="member">nrf_resetinfo_resetreas_global_mask_t</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_resetinfo.h" line="247" column="28" bodyfile="hal/nrf_resetinfo.h" bodystart="247" bodyend="250" declfile="hal/nrf_resetinfo.h" declline="139" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__resetinfo__hal_1ga9d2de65409fe394896e0115b290f6c0d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_resetinfo_resetreas_local_set</definition>
        <argsstring>(NRF_RESETINFO_Type *p_reg, uint32_t mask)</argsstring>
        <name>nrf_resetinfo_resetreas_local_set</name>
        <param>
          <type>NRF_RESETINFO_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Function for setting the local reset reason. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of reasons to be set, constructed from <ref refid="group__nrf__resetinfo__hal_1ga67d288fe674ad1d9955666038a6db801" kindref="member">nrf_resetinfo_resetreas_local_mask_t</ref> enumerator values. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_resetinfo.h" line="252" column="24" bodyfile="hal/nrf_resetinfo.h" bodystart="252" bodyend="256" declfile="hal/nrf_resetinfo.h" declline="148" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__resetinfo__hal_1ga5252397ca7381a86bcc15706fe4dc7b7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_resetinfo_resetreas_local_get</definition>
        <argsstring>(NRF_RESETINFO_Type const *p_reg)</argsstring>
        <name>nrf_resetinfo_resetreas_local_get</name>
        <param>
          <type>NRF_RESETINFO_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting the local reset reason. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Mask of detected local reset reasons constructed with <ref refid="group__nrf__resetinfo__hal_1ga67d288fe674ad1d9955666038a6db801" kindref="member">nrf_resetinfo_resetreas_local_mask_t</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_resetinfo.h" line="258" column="28" bodyfile="hal/nrf_resetinfo.h" bodystart="258" bodyend="261" declfile="hal/nrf_resetinfo.h" declline="158" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__resetinfo__hal_1gab3abe465e95cd2c084c41871b874c6a6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_resetinfo_error_status_set</definition>
        <argsstring>(NRF_RESETINFO_Type *p_reg, uint8_t status)</argsstring>
        <name>nrf_resetinfo_error_status_set</name>
        <param>
          <type>NRF_RESETINFO_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>status</declname>
        </param>
        <briefdescription>
<para>Function for setting the reset error status. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">status</parametername>
</parameternamelist>
<parameterdescription>
<para>Reset error status to be set. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_resetinfo.h" line="263" column="24" bodyfile="hal/nrf_resetinfo.h" bodystart="263" bodyend="271" declfile="hal/nrf_resetinfo.h" declline="166" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__resetinfo__hal_1ga99fddd35932550a866bfab4ea0f61c57" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint8_t</type>
        <definition>NRF_STATIC_INLINE uint8_t nrf_resetinfo_error_status_get</definition>
        <argsstring>(NRF_RESETINFO_Type const *p_reg)</argsstring>
        <name>nrf_resetinfo_error_status_get</name>
        <param>
          <type>NRF_RESETINFO_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting the reset error status. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Reset error status. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_resetinfo.h" line="273" column="27" bodyfile="hal/nrf_resetinfo.h" bodystart="273" bodyend="280" declfile="hal/nrf_resetinfo.h" declline="175" declcolumn="27"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__resetinfo__hal_1ga922b39cf0c3e16b680ad73cac8e18463" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_resetinfo_error_address_set</definition>
        <argsstring>(NRF_RESETINFO_Type *p_reg, uint32_t address)</argsstring>
        <name>nrf_resetinfo_error_address_set</name>
        <param>
          <type>NRF_RESETINFO_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>address</declname>
        </param>
        <briefdescription>
<para>Function for setting the reset error address. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">address</parametername>
</parameternamelist>
<parameterdescription>
<para>Reset error address to be set. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_resetinfo.h" line="282" column="24" bodyfile="hal/nrf_resetinfo.h" bodystart="282" bodyend="290" declfile="hal/nrf_resetinfo.h" declline="183" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__resetinfo__hal_1ga9eef6be489a303469809a4638e4901c0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_resetinfo_error_address_get</definition>
        <argsstring>(NRF_RESETINFO_Type const *p_reg)</argsstring>
        <name>nrf_resetinfo_error_address_get</name>
        <param>
          <type>NRF_RESETINFO_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting the reset error address. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Reset error address. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_resetinfo.h" line="292" column="28" bodyfile="hal/nrf_resetinfo.h" bodystart="292" bodyend="299" declfile="hal/nrf_resetinfo.h" declline="193" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__resetinfo__hal_1gab5fbf49c6e79a413cf60e3b8ed27bca0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_resetinfo_restore_valid_set</definition>
        <argsstring>(NRF_RESETINFO_Type *p_reg, bool enable)</argsstring>
        <name>nrf_resetinfo_restore_valid_set</name>
        <param>
          <type>NRF_RESETINFO_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>enable</declname>
        </param>
        <briefdescription>
<para>Function for setting the flag indicating presence of valid restore image in RAM. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">enable</parametername>
</parameternamelist>
<parameterdescription>
<para>True if valid restore image is present in RAM, false otherwise. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_resetinfo.h" line="301" column="24" bodyfile="hal/nrf_resetinfo.h" bodystart="301" bodyend="306" declfile="hal/nrf_resetinfo.h" declline="201" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__resetinfo__hal_1ga734a99987981122724e86052a11781ba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE bool</type>
        <definition>NRF_STATIC_INLINE bool nrf_resetinfo_restore_valid_check</definition>
        <argsstring>(NRF_RESETINFO_Type const *p_reg)</argsstring>
        <name>nrf_resetinfo_restore_valid_check</name>
        <param>
          <type>NRF_RESETINFO_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting the flag indicating presence of valid restore image in RAM. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid restore image is present in RAM. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid restore image is not present in RAM. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_resetinfo.h" line="308" column="24" bodyfile="hal/nrf_resetinfo.h" bodystart="308" bodyend="313" declfile="hal/nrf_resetinfo.h" declline="211" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__resetinfo__hal_1ga863be79e0156ad8c01dd42487657b966" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_resetinfo_mask_lockup_set</definition>
        <argsstring>(NRF_RESETINFO_Type *p_reg, bool enable)</argsstring>
        <name>nrf_resetinfo_mask_lockup_set</name>
        <param>
          <type>NRF_RESETINFO_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>enable</declname>
        </param>
        <briefdescription>
<para>Function for setting the flag indicating if CPU lockup signal is to be masked. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Prevents the CPU lockup signal from triggering a local reset. Needed to be able to start debug session.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">enable</parametername>
</parameternamelist>
<parameterdescription>
<para>True if lockup signal is to be masked, false otherwise. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_resetinfo.h" line="316" column="24" bodyfile="hal/nrf_resetinfo.h" bodystart="316" bodyend="321" declfile="hal/nrf_resetinfo.h" declline="223" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__resetinfo__hal_1ga055edfaa595fb4d79c369ad6ead6dcea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE bool</type>
        <definition>NRF_STATIC_INLINE bool nrf_resetinfo_mask_lockup_check</definition>
        <argsstring>(NRF_RESETINFO_Type const *p_reg)</argsstring>
        <name>nrf_resetinfo_mask_lockup_check</name>
        <param>
          <type>NRF_RESETINFO_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting the flag indicating if CPU lockup signal is to be masked. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Prevents the CPU lockup signal from triggering a local reset. Needed to be able to start debug session.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>CPU lockup signal is to be masked. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>CPU lockup signal is not to be masked. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_resetinfo.h" line="323" column="24" bodyfile="hal/nrf_resetinfo.h" bodystart="323" bodyend="328" declfile="hal/nrf_resetinfo.h" declline="236" declcolumn="24"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__nrf__resetinfo__hal_1ga2c1c894a29f7a5078637a881667d9258" prot="public" static="no">
        <name>NRF_RESETINFO_HAS_RESETREAS_STRUCT</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Symbol indicating whether intermediate RESETREAS structure is present. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_resetinfo.h" line="52" column="9" bodyfile="hal/nrf_resetinfo.h" bodystart="52" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__resetinfo__hal_1ga704fd7a11501b5388bc4b03f1699af88" prot="public" static="no">
        <name>NRF_RESETINFO_HAS_MULTIPLE_SECWDT</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Symbol indicating whether multiple secure domain watchdog resets are present. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_resetinfo.h" line="59" column="9" bodyfile="hal/nrf_resetinfo.h" bodystart="59" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__resetinfo__hal_1gaabc19dc65433a5dabe1896f81cae34f8" prot="public" static="no">
        <name>NRF_RESETINFO_HAS_MASKLOCKUP</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Symbol indicating whether CPU lockup signal masking is present. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_resetinfo.h" line="66" column="9" bodyfile="hal/nrf_resetinfo.h" bodystart="66" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__resetinfo__hal_1gae75557a631d5683e148496f8f5e1d02f" prot="public" static="no">
        <name>NRF_RESETINFO_HAS_LOCAL_CROSSDOMAIN</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Symbol indicating whether CROSSDOMAIN local reset reason is present. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_resetinfo.h" line="73" column="9" bodyfile="hal/nrf_resetinfo.h" bodystart="73" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__resetinfo__hal_1ga7c1a8fb09d4118cad844bb2a9288748e" prot="public" static="no">
        <name>NRF_RESETINFO_ERROR_STATUS_MAX</name>
        <initializer>RESETINFO_ERROR_STATUS_ERRORSTATUS_Msk</initializer>
        <briefdescription>
<para>Maximum value of error status. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_resetinfo.h" line="80" column="9" bodyfile="hal/nrf_resetinfo.h" bodystart="80" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Hardware access layer for managing the Reset information peripheral (RESETINFO). </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
