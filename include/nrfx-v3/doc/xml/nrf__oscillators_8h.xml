<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="nrf__oscillators_8h" kind="file" language="C++">
    <compoundname>nrf_oscillators.h</compoundname>
    <includes local="no">nrfx.h</includes>
    <incdepgraph>
      <node id="1">
        <label>hal/nrf_oscillators.h</label>
        <link refid="nrf__oscillators_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>nrfx.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__nrf__oscillators__hal_1ga266b6c424a0a02f5d99b4f92deefd24a" prot="public" static="no">
        <name>NRF_OSCILLATORS_HAS_PLL</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Symbol indicating whether PLL is present. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_oscillators.h" line="52" column="9" bodyfile="hal/nrf_oscillators.h" bodystart="52" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__oscillators__hal_1gad13423d5764a830e57599cbc3a38d6d0" prot="public" static="no">
        <name>NRF_OSCILLATORS_HAS_CLOCK_QUALITY_IND</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Symbol indicating whether clock quality indicator is present. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_oscillators.h" line="59" column="9" bodyfile="hal/nrf_oscillators.h" bodystart="59" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__oscillators__hal_1ga1747abe0e09891aebbf82f615be84b06" prot="public" static="no">
        <name>NRF_OSCILLATORS_HAS_LFXO_CAP_AS_INT_VALUE</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Symbol indicating whether configuration of internal capacitor using integer value is present. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_oscillators.h" line="66" column="9" bodyfile="hal/nrf_oscillators.h" bodystart="66" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__oscillators__hal_1ga50df05bf362666b1863ed5a43d06cb8c" prot="public" static="no">
        <name>NRF_OSCILLATORS_HAS_LFXO_BYPASS</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Symbol indicating whether LFXO bypass is present. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_oscillators.h" line="73" column="9" bodyfile="hal/nrf_oscillators.h" bodystart="73" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__oscillators__hal_1ga79f80061ebde376cf9327d37d9a86f09" prot="public" static="no">
        <name>OSCILLATORS_HFXO_CAP_CALCULATE</name>
        <param><defname>p_ficr_reg</defname></param>
        <param><defname>cap_val</defname></param>
        <initializer>    ((((p_ficr_reg-&gt;XOSC32MTRIM &amp; FICR_XOSC32MTRIM_SLOPE_Msk) \
       &lt;&lt; FICR_XOSC32MTRIM_SLOPE_Pos) / 16 + 1) *             \
     (cap_val * 2 - 14) +                                     \
     ((p_ficr_reg-&gt;XOSC32MTRIM &amp; FICR_XOSC32MTRIM_OFFSET_Msk) \
       &lt;&lt; FICR_XOSC32MTRIM_OFFSET_Pos))</initializer>
        <briefdescription>
<para>Macro for calculating HFXO internal capacitor value. </para>
        </briefdescription>
        <detaileddescription>
<para>Depending on the SoC used, a range of capacitance of internal capacitors is as follows:<itemizedlist>
<listitem><para>From 7 pF to 20 pF in 0.5 pF steps for nRF5340.</para>
</listitem><listitem><para>From 4 pF to 17 pF in 0.25 pF steps for other SoCs. This macro should be used to calculate argument&apos;s value for <ref refid="group__nrf__oscillators__hal_1gaae87839f39625fa0b38180fe64275411" kindref="member">nrf_oscillators_hfxo_cap_set</ref> function. </para>
</listitem></itemizedlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_oscillators.h" line="87" column="9" bodyfile="hal/nrf_oscillators.h" bodystart="87" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__oscillators__hal_1ga047947a0533ce531b37b6df2933660ab" prot="public" static="no">
        <name>OSCILLATORS_LFXO_CAP_CALCULATE</name>
        <param><defname>p_ficr_reg</defname></param>
        <param><defname>cap_val</defname></param>
        <initializer>    ((((cap_val - 4) * (((p_ficr_reg-&gt;XOSC32KTRIM &amp; FICR_XOSC32KTRIM_SLOPE_Msk) \
                          &lt;&lt; FICR_XOSC32KTRIM_SLOPE_Pos)) + 392) &gt;&gt; 3 +         \
      ((p_ficr_reg-&gt;XOSC32KTRIM &amp; FICR_XOSC32KTRIM_OFFSET_Msk)                  \
       &lt;&lt; FICR_XOSC32KTRIM_OFFSET_Pos)) &gt;&gt; 6)</initializer>
        <briefdescription>
<para>Macro for calculating LFXO internal capacitor value. </para>
        </briefdescription>
        <detaileddescription>
<para>The capacitance of internal capacitors ranges from 4 pF to 18 pF in 0.5 pF steps. This macro should be used to calculate argument&apos;s value for <ref refid="group__nrf__oscillators__hal_1gae73a67c4d38865b984c94bbda581bf1a" kindref="member">nrf_oscillators_lfxo_cap_set</ref> function. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_oscillators.h" line="109" column="9" bodyfile="hal/nrf_oscillators.h" bodystart="109" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__oscillators__hal_1ga8580045a95f733471538a551ba78ab26" prot="public" static="no">
        <name>NRF_OSCILLATORS_LFXO_CAP_EXTERNAL</name>
        <initializer>((<ref refid="group__nrf__oscillators__hal_1gaa5acaa88c6acb9bd9ef6aa7532802dab" kindref="member">nrf_oscillators_lfxo_cap_t</ref>)0)</initializer>
        <briefdescription>
<para>Symbol specifying usage of external capacitors. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_oscillators.h" line="140" column="9" bodyfile="hal/nrf_oscillators.h" bodystart="140" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="group__nrf__oscillators__hal_1gaa04c05f15e5bf501a093ded4de3b8f76" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_oscillators_hfxo_clock_quality_t</name>
        <enumvalue id="group__nrf__oscillators__hal_1ggaa04c05f15e5bf501a093ded4de3b8f76a66b53e5a9c2b8daa0e0edaad0d806a76" prot="public">
          <name>NRF_OSCILLATORS_HFXO_CLOCK_QUALITY_NONE</name>
          <initializer>= OSCILLATORS_XOSC32M_CLOCKQUALITY_INDICATOR_NoStatus</initializer>
          <briefdescription>
<para>Clock XOSC32M status is not defined. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__oscillators__hal_1ggaa04c05f15e5bf501a093ded4de3b8f76adec4bfc16525df27e3f5434101be8d56" prot="public">
          <name>NRF_OSCILLATORS_HFXO_CLOCK_QUALITY_STARTING</name>
          <initializer>= OSCILLATORS_XOSC32M_CLOCKQUALITY_INDICATOR_Starting</initializer>
          <briefdescription>
<para>Clock XOSC32M has started but has not yet reached the specified frequency tolerance requirement fTOL_HFXO. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__oscillators__hal_1ggaa04c05f15e5bf501a093ded4de3b8f76a76c35686f8e3f0c8522fd275ceb40557" prot="public">
          <name>NRF_OSCILLATORS_HFXO_CLOCK_QUALITY_STARTED</name>
          <initializer>= OSCILLATORS_XOSC32M_CLOCKQUALITY_INDICATOR_Started</initializer>
          <briefdescription>
<para>Clock XOSC32M has started and is operating with the specified frequency tolerance requirement fTOL_HFXO. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>HFXO clock quality indicator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_oscillators.h" line="118" column="1" bodyfile="hal/nrf_oscillators.h" bodystart="119" bodyend="123"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__oscillators__hal_1gaab0b531c47d93dee7fed8c5e3b09fe7d" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_oscillators_pll_freq_t</name>
        <enumvalue id="group__nrf__oscillators__hal_1ggaab0b531c47d93dee7fed8c5e3b09fe7da2aa2cf107f1e08e99305b2fb1f0fe512" prot="public">
          <name>NRF_OSCILLATORS_PLL_FREQ_64M</name>
          <initializer>= OSCILLATORS_PLL_FREQ_FREQ_CK64M</initializer>
          <briefdescription>
<para>PLL 64 MHz frequency. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__oscillators__hal_1ggaab0b531c47d93dee7fed8c5e3b09fe7dae792b8e18a3ecc457fe12fc6e758f78a" prot="public">
          <name>NRF_OSCILLATORS_PLL_FREQ_128M</name>
          <initializer>= OSCILLATORS_PLL_FREQ_FREQ_CK128M</initializer>
          <briefdescription>
<para>PLL 128 MHz frequency. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>PLL frequencies. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_oscillators.h" line="128" column="1" bodyfile="hal/nrf_oscillators.h" bodystart="129" bodyend="132"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group__nrf__oscillators__hal_1gaa5acaa88c6acb9bd9ef6aa7532802dab" prot="public" static="no">
        <type>uint32_t</type>
        <definition>typedef uint32_t nrf_oscillators_lfxo_cap_t</definition>
        <argsstring></argsstring>
        <name>nrf_oscillators_lfxo_cap_t</name>
        <briefdescription>
<para>LFXO capacitance type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_oscillators.h" line="137" column="18" bodyfile="hal/nrf_oscillators.h" bodystart="137" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__nrf__oscillators__hal_1gaa8dc167eb6dbfbcc7606d9c0a747b2fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE <ref refid="group__nrf__oscillators__hal_1gaa04c05f15e5bf501a093ded4de3b8f76" kindref="member">nrf_oscillators_hfxo_clock_quality_t</ref></type>
        <definition>NRF_STATIC_INLINE nrf_oscillators_hfxo_clock_quality_t nrf_oscillators_hfxo_clock_quality_get</definition>
        <argsstring>(NRF_OSCILLATORS_Type *p_reg)</argsstring>
        <name>nrf_oscillators_hfxo_clock_quality_get</name>
        <param>
          <type>NRF_OSCILLATORS_Type *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for reading HFXO clock quality indicator. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Clock quality indicator value. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_oscillators.h" line="228" column="1" bodyfile="hal/nrf_oscillators.h" bodystart="228" bodyend="231" declfile="hal/nrf_oscillators.h" declline="164" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__oscillators__hal_1gaa3c30fc5ed67b0402d265839b7297a67" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_oscillators_pll_freq_set</definition>
        <argsstring>(NRF_OSCILLATORS_Type *p_reg, nrf_oscillators_pll_freq_t freq)</argsstring>
        <name>nrf_oscillators_pll_freq_set</name>
        <param>
          <type>NRF_OSCILLATORS_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__oscillators__hal_1gaab0b531c47d93dee7fed8c5e3b09fe7d" kindref="member">nrf_oscillators_pll_freq_t</ref></type>
          <declname>freq</declname>
        </param>
        <briefdescription>
<para>Function for setting PLL frequency. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">freq</parametername>
</parameternamelist>
<parameterdescription>
<para>New PLL frequency. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_oscillators.h" line="235" column="24" bodyfile="hal/nrf_oscillators.h" bodystart="235" bodyend="239" declfile="hal/nrf_oscillators.h" declline="174" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__oscillators__hal_1gae266bb2beffdc7da1fe9d2d0d9dbf064" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE <ref refid="group__nrf__oscillators__hal_1gaab0b531c47d93dee7fed8c5e3b09fe7d" kindref="member">nrf_oscillators_pll_freq_t</ref></type>
        <definition>NRF_STATIC_INLINE nrf_oscillators_pll_freq_t nrf_oscillators_pll_freq_get</definition>
        <argsstring>(NRF_OSCILLATORS_Type *p_reg)</argsstring>
        <name>nrf_oscillators_pll_freq_get</name>
        <param>
          <type>NRF_OSCILLATORS_Type *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting PLL frequency. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Current PLL frequency value. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_oscillators.h" line="242" column="28" bodyfile="hal/nrf_oscillators.h" bodystart="242" bodyend="245" declfile="hal/nrf_oscillators.h" declline="185" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__oscillators__hal_1ga1537df377a5c3231d5b6bc059a64abe7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_oscillators_lfxo_bypass_set</definition>
        <argsstring>(NRF_OSCILLATORS_Type *p_reg, bool enable)</argsstring>
        <name>nrf_oscillators_lfxo_bypass_set</name>
        <param>
          <type>NRF_OSCILLATORS_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>enable</declname>
        </param>
        <briefdescription>
<para>Function for enabling or disabling the bypass of LFXO with external clock source. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">enable</parametername>
</parameternamelist>
<parameterdescription>
<para>True if bypass is to be enabled (use with rail-to-rail external source). False if bypass is to be disabled (use with xtal or low-swing external source). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_oscillators.h" line="249" column="24" bodyfile="hal/nrf_oscillators.h" bodystart="249" bodyend="253" declfile="hal/nrf_oscillators.h" declline="196" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__oscillators__hal_1gae73a67c4d38865b984c94bbda581bf1a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_oscillators_lfxo_cap_set</definition>
        <argsstring>(NRF_OSCILLATORS_Type *p_reg, nrf_oscillators_lfxo_cap_t cap)</argsstring>
        <name>nrf_oscillators_lfxo_cap_set</name>
        <param>
          <type>NRF_OSCILLATORS_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__oscillators__hal_1gaa5acaa88c6acb9bd9ef6aa7532802dab" kindref="member">nrf_oscillators_lfxo_cap_t</ref></type>
          <declname>cap</declname>
        </param>
        <briefdescription>
<para>Function for configuring the internal capacitors of LFXO. </para>
        </briefdescription>
        <detaileddescription>
<para>For SoCs other than nRF5340, to calculate the correct <computeroutput>cap_value</computeroutput>, use <ref refid="group__nrf__oscillators__hal_1ga047947a0533ce531b37b6df2933660ab" kindref="member">OSCILLATORS_LFXO_CAP_CALCULATE</ref> macro.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">cap</parametername>
</parameternamelist>
<parameterdescription>
<para>Capacitors configuration. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_oscillators.h" line="256" column="24" bodyfile="hal/nrf_oscillators.h" bodystart="256" bodyend="260" declfile="hal/nrf_oscillators.h" declline="207" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__oscillators__hal_1gaae87839f39625fa0b38180fe64275411" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_oscillators_hfxo_cap_set</definition>
        <argsstring>(NRF_OSCILLATORS_Type *p_reg, bool enable, uint32_t cap_value)</argsstring>
        <name>nrf_oscillators_hfxo_cap_set</name>
        <param>
          <type>NRF_OSCILLATORS_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>enable</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>cap_value</declname>
        </param>
        <briefdescription>
<para>Function for configuring the internal capacitors of HFXO. </para>
        </briefdescription>
        <detaileddescription>
<para>To calculate the correct <computeroutput>cap_value</computeroutput>, use <ref refid="group__nrf__oscillators__hal_1ga79f80061ebde376cf9327d37d9a86f09" kindref="member">OSCILLATORS_HFXO_CAP_CALCULATE</ref> macro.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">enable</parametername>
</parameternamelist>
<parameterdescription>
<para>True if internal capacitors are to be enabled, false otherwise. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">cap_value</parametername>
</parameternamelist>
<parameterdescription>
<para>Value representing capacitance, calculated using provided equation. Ignored when internal capacitors are disabled. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_oscillators.h" line="262" column="24" bodyfile="hal/nrf_oscillators.h" bodystart="262" bodyend="274" declfile="hal/nrf_oscillators.h" declline="220" declcolumn="24"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2019<sp/>-<sp/>2024,<sp/>Nordic<sp/>Semiconductor<sp/>ASA</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>All<sp/>rights<sp/>reserved.</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>SPDX-License-Identifier:<sp/>BSD-3-Clause</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions<sp/>are<sp/>met:</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>1.<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright<sp/>notice,<sp/>this</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>2.<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the<sp/>distribution.</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/>3.<sp/>Neither<sp/>the<sp/>name<sp/>of<sp/>the<sp/>copyright<sp/>holder<sp/>nor<sp/>the<sp/>names<sp/>of<sp/>its</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>contributors<sp/>may<sp/>be<sp/>used<sp/>to<sp/>endorse<sp/>or<sp/>promote<sp/>products<sp/>derived<sp/>from<sp/>this</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>software<sp/>without<sp/>specific<sp/>prior<sp/>written<sp/>permission.</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>COPYRIGHT<sp/>HOLDERS<sp/>AND<sp/>CONTRIBUTORS<sp/>&quot;AS<sp/>IS&quot;</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/>AND<sp/>ANY<sp/>EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>THE</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*<sp/>ARE<sp/>DISCLAIMED.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>COPYRIGHT<sp/>HOLDER<sp/>OR<sp/>CONTRIBUTORS<sp/>BE</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,<sp/>SPECIAL,<sp/>EXEMPLARY,<sp/>OR</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>PROCUREMENT<sp/>OF</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>*<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,<sp/>DATA,<sp/>OR<sp/>PROFITS;<sp/>OR<sp/>BUSINESS</highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/>*<sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY<sp/>THEORY<sp/>OF<sp/>LIABILITY,<sp/>WHETHER<sp/>IN</highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/>*<sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR<sp/>OTHERWISE)</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/>*<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE<sp/>OF<sp/>THIS<sp/>SOFTWARE,<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/>*<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight></codeline>
<codeline lineno="32"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>NRF_OSCILLATORS_H__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_OSCILLATORS_H__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;nrfx.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="43"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="44"><highlight class="comment"><sp/>*<sp/>@defgroup<sp/>nrf_oscillators_hal<sp/>OSCILLATORS<sp/>HAL</highlight></codeline>
<codeline lineno="45"><highlight class="comment"><sp/>*<sp/>@{</highlight></codeline>
<codeline lineno="46"><highlight class="comment"><sp/>*<sp/>@ingroup<sp/>nrf_clock</highlight></codeline>
<codeline lineno="47"><highlight class="comment"><sp/>*<sp/>@brief<sp/><sp/><sp/>Hardware<sp/>access<sp/>layer<sp/>for<sp/>managing<sp/>the<sp/>OSCILLATORS<sp/>peripheral.</highlight></codeline>
<codeline lineno="48"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(OSCILLATORS_PLL_FREQ_FREQ_Msk)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="51"><highlight class="comment">/**<sp/>@brief<sp/>Symbol<sp/>indicating<sp/>whether<sp/>PLL<sp/>is<sp/>present.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_OSCILLATORS_HAS_PLL<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_OSCILLATORS_HAS_PLL<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(OSCILLATORS_XOSC32M_CLOCKQUALITY_INDICATOR_Msk)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="58"><highlight class="comment">/**<sp/>@brief<sp/>Symbol<sp/>indicating<sp/>whether<sp/>clock<sp/>quality<sp/>indicator<sp/>is<sp/>present.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_OSCILLATORS_HAS_CLOCK_QUALITY_IND<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_OSCILLATORS_HAS_CLOCK_QUALITY_IND<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(OSCILLATORS_XOSC32KI_INTCAP_VAL_Msk)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="65"><highlight class="comment">/**<sp/>@brief<sp/>Symbol<sp/>indicating<sp/>whether<sp/>configuration<sp/>of<sp/>internal<sp/>capacitor<sp/>using<sp/>integer<sp/>value<sp/>is<sp/>present.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_OSCILLATORS_HAS_LFXO_CAP_AS_INT_VALUE<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_OSCILLATORS_HAS_LFXO_CAP_AS_INT_VALUE<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(OSCILLATORS_XOSC32KI_Type)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="72"><highlight class="comment">/**<sp/>@brief<sp/>Symbol<sp/>indicating<sp/>whether<sp/>LFXO<sp/>bypass<sp/>is<sp/>present.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_OSCILLATORS_HAS_LFXO_BYPASS<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_OSCILLATORS_HAS_LFXO_BYPASS<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(NRF5340_XXAA_APPLICATION)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="79"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="80"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Macro<sp/>for<sp/>calculating<sp/>HFXO<sp/>internal<sp/>capacitor<sp/>value.</highlight></codeline>
<codeline lineno="81"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="82"><highlight class="comment"><sp/>*<sp/>Depending<sp/>on<sp/>the<sp/>SoC<sp/>used,<sp/>a<sp/>range<sp/>of<sp/>capacitance<sp/>of<sp/>internal<sp/>capacitors<sp/>is<sp/>as<sp/>follows:</highlight></codeline>
<codeline lineno="83"><highlight class="comment"><sp/>*<sp/>-<sp/>From<sp/>7<sp/>pF<sp/>to<sp/>20<sp/>pF<sp/>in<sp/>0.5<sp/>pF<sp/>steps<sp/>for<sp/>nRF5340.</highlight></codeline>
<codeline lineno="84"><highlight class="comment"><sp/>*<sp/>-<sp/>From<sp/>4<sp/>pF<sp/>to<sp/>17<sp/>pF<sp/>in<sp/>0.25<sp/>pF<sp/>steps<sp/>for<sp/>other<sp/>SoCs.</highlight></codeline>
<codeline lineno="85"><highlight class="comment"><sp/>*<sp/>This<sp/>macro<sp/>should<sp/>be<sp/>used<sp/>to<sp/>calculate<sp/>argument&apos;s<sp/>value<sp/>for<sp/>@ref<sp/>nrf_oscillators_hfxo_cap_set<sp/>function.</highlight></codeline>
<codeline lineno="86"><highlight class="comment">*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>OSCILLATORS_HFXO_CAP_CALCULATE(p_ficr_reg,<sp/>cap_val)<sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="88"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>((((p_ficr_reg-&gt;XOSC32MTRIM<sp/>&amp;<sp/>FICR_XOSC32MTRIM_SLOPE_Msk)<sp/>\</highlight></codeline>
<codeline lineno="89"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>FICR_XOSC32MTRIM_SLOPE_Pos)<sp/>/<sp/>16<sp/>+<sp/>1)<sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="90"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>(cap_val<sp/>*<sp/>2<sp/>-<sp/>14)<sp/>+<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="91"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>((p_ficr_reg-&gt;XOSC32MTRIM<sp/>&amp;<sp/>FICR_XOSC32MTRIM_OFFSET_Msk)<sp/>\</highlight></codeline>
<codeline lineno="92"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>FICR_XOSC32MTRIM_OFFSET_Pos))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>OSCILLATORS_HFXO_CAP_CALCULATE(p_ficr_reg,<sp/>cap_val)<sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="95"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>(((cap_val<sp/>-<sp/>5.5)<sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="96"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>(((p_ficr_reg-&gt;XOSC32MTRIM<sp/>&amp;<sp/>FICR_XOSC32MTRIM_SLOPE_Msk)<sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="97"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>FICR_XOSC32MTRIM_SLOPE_Pos)<sp/>+<sp/>791)<sp/>+<sp/>\</highlight></codeline>
<codeline lineno="98"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>(((p_ficr_reg-&gt;XOSC32MTRIM<sp/>&amp;<sp/>FICR_XOSC32MTRIM_OFFSET_Msk)<sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="99"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>FICR_XOSC32MTRIM_OFFSET_Pos)<sp/>&lt;&lt;<sp/>2))<sp/>&gt;&gt;<sp/>8)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_OSCILLATORS_HAS_LFXO_CAP_AS_INT_VALUE</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="103"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="104"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Macro<sp/>for<sp/>calculating<sp/>LFXO<sp/>internal<sp/>capacitor<sp/>value.</highlight></codeline>
<codeline lineno="105"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="106"><highlight class="comment"><sp/>*<sp/>The<sp/>capacitance<sp/>of<sp/>internal<sp/>capacitors<sp/>ranges<sp/>from<sp/>4<sp/>pF<sp/>to<sp/>18<sp/>pF<sp/>in<sp/>0.5<sp/>pF<sp/>steps.</highlight></codeline>
<codeline lineno="107"><highlight class="comment"><sp/>*<sp/>This<sp/>macro<sp/>should<sp/>be<sp/>used<sp/>to<sp/>calculate<sp/>argument&apos;s<sp/>value<sp/>for<sp/>@ref<sp/>nrf_oscillators_lfxo_cap_set<sp/>function.</highlight></codeline>
<codeline lineno="108"><highlight class="comment">*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>OSCILLATORS_LFXO_CAP_CALCULATE(p_ficr_reg,<sp/>cap_val)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="110"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>((((cap_val<sp/>-<sp/>4)<sp/>*<sp/>(((p_ficr_reg-&gt;XOSC32KTRIM<sp/>&amp;<sp/>FICR_XOSC32KTRIM_SLOPE_Msk)<sp/>\</highlight></codeline>
<codeline lineno="111"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>FICR_XOSC32KTRIM_SLOPE_Pos))<sp/>+<sp/>392)<sp/>&gt;&gt;<sp/>3<sp/>+<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="112"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>((p_ficr_reg-&gt;XOSC32KTRIM<sp/>&amp;<sp/>FICR_XOSC32KTRIM_OFFSET_Msk)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="113"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>FICR_XOSC32KTRIM_OFFSET_Pos))<sp/>&gt;&gt;<sp/>6)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_OSCILLATORS_HAS_CLOCK_QUALITY_IND</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="117"><highlight class="comment">/**<sp/>@brief<sp/>HFXO<sp/>clock<sp/>quality<sp/>indicator.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal">{</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__oscillators__hal_1ggaa04c05f15e5bf501a093ded4de3b8f76a66b53e5a9c2b8daa0e0edaad0d806a76" kindref="member">NRF_OSCILLATORS_HFXO_CLOCK_QUALITY_NONE</ref><sp/><sp/><sp/><sp/><sp/>=<sp/>OSCILLATORS_XOSC32M_CLOCKQUALITY_INDICATOR_NoStatus,<sp/></highlight><highlight class="comment">///&lt;<sp/>Clock<sp/>XOSC32M<sp/>status<sp/>is<sp/>not<sp/>defined.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__oscillators__hal_1ggaa04c05f15e5bf501a093ded4de3b8f76adec4bfc16525df27e3f5434101be8d56" kindref="member">NRF_OSCILLATORS_HFXO_CLOCK_QUALITY_STARTING</ref><sp/>=<sp/>OSCILLATORS_XOSC32M_CLOCKQUALITY_INDICATOR_Starting,<sp/></highlight><highlight class="comment">///&lt;<sp/>Clock<sp/>XOSC32M<sp/>has<sp/>started<sp/>but<sp/>has<sp/>not<sp/>yet<sp/>reached<sp/>the<sp/>specified<sp/>frequency<sp/>tolerance<sp/>requirement<sp/>fTOL_HFXO.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__oscillators__hal_1ggaa04c05f15e5bf501a093ded4de3b8f76a76c35686f8e3f0c8522fd275ceb40557" kindref="member">NRF_OSCILLATORS_HFXO_CLOCK_QUALITY_STARTED</ref><sp/><sp/>=<sp/>OSCILLATORS_XOSC32M_CLOCKQUALITY_INDICATOR_Started<sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Clock<sp/>XOSC32M<sp/>has<sp/>started<sp/>and<sp/>is<sp/>operating<sp/>with<sp/>the<sp/>specified<sp/>frequency<sp/>tolerance<sp/>requirement<sp/>fTOL_HFXO.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal">}<sp/><ref refid="group__nrf__oscillators__hal_1gaa04c05f15e5bf501a093ded4de3b8f76" kindref="member">nrf_oscillators_hfxo_clock_quality_t</ref>;</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_OSCILLATORS_HAS_PLL</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="127"><highlight class="comment">/**<sp/>@brief<sp/>PLL<sp/>frequencies.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal">{</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__oscillators__hal_1ggaab0b531c47d93dee7fed8c5e3b09fe7da2aa2cf107f1e08e99305b2fb1f0fe512" kindref="member">NRF_OSCILLATORS_PLL_FREQ_64M</ref><sp/><sp/>=<sp/>OSCILLATORS_PLL_FREQ_FREQ_CK64M,<sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>PLL<sp/>64<sp/>MHz<sp/>frequency.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__oscillators__hal_1ggaab0b531c47d93dee7fed8c5e3b09fe7dae792b8e18a3ecc457fe12fc6e758f78a" kindref="member">NRF_OSCILLATORS_PLL_FREQ_128M</ref><sp/>=<sp/>OSCILLATORS_PLL_FREQ_FREQ_CK128M,<sp/></highlight><highlight class="comment">///&lt;<sp/>PLL<sp/>128<sp/>MHz<sp/>frequency.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal">}<sp/><ref refid="group__nrf__oscillators__hal_1gaab0b531c47d93dee7fed8c5e3b09fe7d" kindref="member">nrf_oscillators_pll_freq_t</ref>;</highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_OSCILLATORS_HAS_LFXO_CAP_AS_INT_VALUE</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="136"><highlight class="comment">/**<sp/>@brief<sp/>LFXO<sp/>capacitance<sp/>type.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>uint32_t<sp/><ref refid="group__nrf__oscillators__hal_1gaa5acaa88c6acb9bd9ef6aa7532802dab" kindref="member">nrf_oscillators_lfxo_cap_t</ref>;</highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="139"><highlight class="comment">/**<sp/>@brief<sp/>Symbol<sp/>specifying<sp/>usage<sp/>of<sp/>external<sp/>capacitors.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_OSCILLATORS_LFXO_CAP_EXTERNAL<sp/>((nrf_oscillators_lfxo_cap_t)0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="142"><highlight class="comment">/**<sp/>@brief<sp/>Capacitors<sp/>configuration<sp/>for<sp/>LFXO.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal">{</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__oscillators__hal_1ga8580045a95f733471538a551ba78ab26" kindref="member">NRF_OSCILLATORS_LFXO_CAP_EXTERNAL</ref><sp/>=<sp/>OSCILLATORS_XOSC32KI_INTCAP_INTCAP_External,<sp/></highlight><highlight class="comment">///&lt;<sp/>Use<sp/>external<sp/>capacitors.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/>NRF_OSCILLATORS_LFXO_CAP_6PF<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>OSCILLATORS_XOSC32KI_INTCAP_INTCAP_C6PF,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Use<sp/>6<sp/>pF<sp/>internal<sp/>capacitors.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/>NRF_OSCILLATORS_LFXO_CAP_7PF<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>OSCILLATORS_XOSC32KI_INTCAP_INTCAP_C7PF,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Use<sp/>7<sp/>pF<sp/>internal<sp/>capacitors.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/>NRF_OSCILLATORS_LFXO_CAP_9PF<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>OSCILLATORS_XOSC32KI_INTCAP_INTCAP_C9PF,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Use<sp/>9<sp/>pF<sp/>internal<sp/>capacitors.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(OSCILLATORS_XOSC32KI_INTCAP_INTCAP_C11PF)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/>NRF_OSCILLATORS_LFXO_CAP_11PF<sp/><sp/><sp/><sp/><sp/>=<sp/>OSCILLATORS_XOSC32KI_INTCAP_INTCAP_C11PF,<sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Use<sp/>11<sp/>pF<sp/>internal<sp/>capacitors.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal">}<sp/><ref refid="group__nrf__oscillators__hal_1gaa5acaa88c6acb9bd9ef6aa7532802dab" kindref="member">nrf_oscillators_lfxo_cap_t</ref>;</highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_OSCILLATORS_HAS_CLOCK_QUALITY_IND</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="156"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="157"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>reading<sp/>HFXO<sp/>clock<sp/>quality<sp/>indicator.</highlight></codeline>
<codeline lineno="158"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="159"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="160"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="161"><highlight class="comment"><sp/>*<sp/>@return<sp/>Clock<sp/>quality<sp/>indicator<sp/>value.</highlight></codeline>
<codeline lineno="162"><highlight class="comment"><sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal">NRF_STATIC_INLINE<sp/><ref refid="group__nrf__oscillators__hal_1gaa04c05f15e5bf501a093ded4de3b8f76" kindref="member">nrf_oscillators_hfxo_clock_quality_t</ref></highlight></codeline>
<codeline lineno="164"><highlight class="normal"><ref refid="group__nrf__oscillators__hal_1gaa8dc167eb6dbfbcc7606d9c0a747b2fb" kindref="member">nrf_oscillators_hfxo_clock_quality_get</ref>(NRF_OSCILLATORS_Type<sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_OSCILLATORS_HAS_PLL</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="168"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="169"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>PLL<sp/>frequency.</highlight></codeline>
<codeline lineno="170"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="171"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="172"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>freq<sp/><sp/>New<sp/>PLL<sp/>frequency.</highlight></codeline>
<codeline lineno="173"><highlight class="comment"><sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__oscillators__hal_1gaa3c30fc5ed67b0402d265839b7297a67" kindref="member">nrf_oscillators_pll_freq_set</ref>(NRF_OSCILLATORS_Type<sp/>*<sp/><sp/><sp/><sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__oscillators__hal_1gaab0b531c47d93dee7fed8c5e3b09fe7d" kindref="member">nrf_oscillators_pll_freq_t</ref><sp/>freq);</highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="177"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="178"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>PLL<sp/>frequency.</highlight></codeline>
<codeline lineno="179"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="180"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="181"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="182"><highlight class="comment"><sp/>*<sp/>@return<sp/>Current<sp/>PLL<sp/>frequency<sp/>value.</highlight></codeline>
<codeline lineno="183"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal">NRF_STATIC_INLINE</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><ref refid="group__nrf__oscillators__hal_1gaab0b531c47d93dee7fed8c5e3b09fe7d" kindref="member">nrf_oscillators_pll_freq_t</ref><sp/><ref refid="group__nrf__oscillators__hal_1gae266bb2beffdc7da1fe9d2d0d9dbf064" kindref="member">nrf_oscillators_pll_freq_get</ref>(NRF_OSCILLATORS_Type<sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_OSCILLATORS_HAS_LFXO_BYPASS</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="189"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="190"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>enabling<sp/>or<sp/>disabling<sp/>the<sp/>bypass<sp/>of<sp/>LFXO<sp/>with<sp/>external<sp/>clock<sp/>source.</highlight></codeline>
<codeline lineno="191"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="192"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="193"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>enable<sp/>True<sp/>if<sp/>bypass<sp/>is<sp/>to<sp/>be<sp/>enabled<sp/>(use<sp/>with<sp/>rail-to-rail<sp/>external<sp/>source).</highlight></codeline>
<codeline lineno="194"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>False<sp/>if<sp/>bypass<sp/>is<sp/>to<sp/>be<sp/>disabled<sp/>(use<sp/>with<sp/>xtal<sp/>or<sp/>low-swing<sp/>external<sp/>source).</highlight></codeline>
<codeline lineno="195"><highlight class="comment"><sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__oscillators__hal_1ga1537df377a5c3231d5b6bc059a64abe7" kindref="member">nrf_oscillators_lfxo_bypass_set</ref>(NRF_OSCILLATORS_Type<sp/>*<sp/>p_reg,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>enable);</highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="199"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="200"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>configuring<sp/>the<sp/>internal<sp/>capacitors<sp/>of<sp/>LFXO.</highlight></codeline>
<codeline lineno="201"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="202"><highlight class="comment"><sp/>*<sp/>For<sp/>SoCs<sp/>other<sp/>than<sp/>nRF5340,<sp/>to<sp/>calculate<sp/>the<sp/>correct<sp/>@p<sp/>cap_value,<sp/>use<sp/>@ref<sp/>OSCILLATORS_LFXO_CAP_CALCULATE<sp/>macro.</highlight></codeline>
<codeline lineno="203"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="204"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="205"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>cap<sp/><sp/><sp/>Capacitors<sp/>configuration.</highlight></codeline>
<codeline lineno="206"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__oscillators__hal_1gae73a67c4d38865b984c94bbda581bf1a" kindref="member">nrf_oscillators_lfxo_cap_set</ref>(NRF_OSCILLATORS_Type<sp/>*<sp/><sp/><sp/><sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__oscillators__hal_1gaa5acaa88c6acb9bd9ef6aa7532802dab" kindref="member">nrf_oscillators_lfxo_cap_t</ref><sp/>cap);</highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="210"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="211"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>configuring<sp/>the<sp/>internal<sp/>capacitors<sp/>of<sp/>HFXO.</highlight></codeline>
<codeline lineno="212"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="213"><highlight class="comment"><sp/>*<sp/>To<sp/>calculate<sp/>the<sp/>correct<sp/>@p<sp/>cap_value,<sp/>use<sp/>@ref<sp/>OSCILLATORS_HFXO_CAP_CALCULATE<sp/>macro.</highlight></codeline>
<codeline lineno="214"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="215"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="216"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>enable<sp/><sp/><sp/><sp/>True<sp/>if<sp/>internal<sp/>capacitors<sp/>are<sp/>to<sp/>be<sp/>enabled,<sp/>false<sp/>otherwise.</highlight></codeline>
<codeline lineno="217"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>cap_value<sp/>Value<sp/>representing<sp/>capacitance,<sp/>calculated<sp/>using<sp/>provided<sp/>equation.</highlight></codeline>
<codeline lineno="218"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Ignored<sp/>when<sp/>internal<sp/>capacitors<sp/>are<sp/>disabled.</highlight></codeline>
<codeline lineno="219"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__oscillators__hal_1gaae87839f39625fa0b38180fe64275411" kindref="member">nrf_oscillators_hfxo_cap_set</ref>(NRF_OSCILLATORS_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>enable,</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cap_value);</highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>NRF_DECLARE_ONLY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_OSCILLATORS_HAS_CLOCK_QUALITY_IND</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal">NRF_STATIC_INLINE<sp/><ref refid="group__nrf__oscillators__hal_1gaa04c05f15e5bf501a093ded4de3b8f76" kindref="member">nrf_oscillators_hfxo_clock_quality_t</ref></highlight></codeline>
<codeline lineno="228"><highlight class="normal"><ref refid="group__nrf__oscillators__hal_1gaa8dc167eb6dbfbcc7606d9c0a747b2fb" kindref="member">nrf_oscillators_hfxo_clock_quality_get</ref>(NRF_OSCILLATORS_Type<sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="229"><highlight class="normal">{</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="group__nrf__oscillators__hal_1gaa04c05f15e5bf501a093ded4de3b8f76" kindref="member">nrf_oscillators_hfxo_clock_quality_t</ref>)(p_reg-&gt;XOSC32M.CLOCKQUALITY);</highlight></codeline>
<codeline lineno="231"><highlight class="normal">}</highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_OSCILLATORS_HAS_PLL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__oscillators__hal_1gaa3c30fc5ed67b0402d265839b7297a67" kindref="member">nrf_oscillators_pll_freq_set</ref>(NRF_OSCILLATORS_Type<sp/>*<sp/><sp/><sp/><sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__oscillators__hal_1gaab0b531c47d93dee7fed8c5e3b09fe7d" kindref="member">nrf_oscillators_pll_freq_t</ref><sp/>freq)</highlight></codeline>
<codeline lineno="237"><highlight class="normal">{</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;PLL.FREQ<sp/>=<sp/>(uint32_t)freq;</highlight></codeline>
<codeline lineno="239"><highlight class="normal">}</highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal">NRF_STATIC_INLINE</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><ref refid="group__nrf__oscillators__hal_1gaab0b531c47d93dee7fed8c5e3b09fe7d" kindref="member">nrf_oscillators_pll_freq_t</ref><sp/><ref refid="group__nrf__oscillators__hal_1gae266bb2beffdc7da1fe9d2d0d9dbf064" kindref="member">nrf_oscillators_pll_freq_get</ref>(NRF_OSCILLATORS_Type<sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="243"><highlight class="normal">{</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="group__nrf__oscillators__hal_1gaab0b531c47d93dee7fed8c5e3b09fe7d" kindref="member">nrf_oscillators_pll_freq_t</ref>)(p_reg-&gt;PLL.CURRENTFREQ);</highlight></codeline>
<codeline lineno="245"><highlight class="normal">}</highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_OSCILLATORS_HAS_LFXO_BYPASS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__oscillators__hal_1ga1537df377a5c3231d5b6bc059a64abe7" kindref="member">nrf_oscillators_lfxo_bypass_set</ref>(NRF_OSCILLATORS_Type<sp/>*<sp/>p_reg,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>enable)</highlight></codeline>
<codeline lineno="250"><highlight class="normal">{</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;XOSC32KI.BYPASS<sp/>=<sp/>(enable<sp/>?<sp/>OSCILLATORS_XOSC32KI_BYPASS_BYPASS_Enabled<sp/>:</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OSCILLATORS_XOSC32KI_BYPASS_BYPASS_Disabled);</highlight></codeline>
<codeline lineno="253"><highlight class="normal">}</highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__oscillators__hal_1gae73a67c4d38865b984c94bbda581bf1a" kindref="member">nrf_oscillators_lfxo_cap_set</ref>(NRF_OSCILLATORS_Type<sp/>*<sp/><sp/><sp/><sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__oscillators__hal_1gaa5acaa88c6acb9bd9ef6aa7532802dab" kindref="member">nrf_oscillators_lfxo_cap_t</ref><sp/>cap)</highlight></codeline>
<codeline lineno="258"><highlight class="normal">{</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;XOSC32KI.INTCAP<sp/>=<sp/>(uint32_t)cap;</highlight></codeline>
<codeline lineno="260"><highlight class="normal">}</highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__oscillators__hal_1gaae87839f39625fa0b38180fe64275411" kindref="member">nrf_oscillators_hfxo_cap_set</ref>(NRF_OSCILLATORS_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>enable,</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cap_value)</highlight></codeline>
<codeline lineno="265"><highlight class="normal">{</highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(OSCILLATORS_XOSC32MCAPS_CAPVALUE_Msk)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;XOSC32MCAPS<sp/>=</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(enable<sp/>?<sp/>((OSCILLATORS_XOSC32MCAPS_ENABLE_Enabled<sp/>&lt;&lt;<sp/>OSCILLATORS_XOSC32MCAPS_ENABLE_Pos)<sp/>|</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(cap_value<sp/>&lt;&lt;<sp/>OSCILLATORS_XOSC32MCAPS_CAPVALUE_Pos))</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>(OSCILLATORS_XOSC32MCAPS_ENABLE_Disabled<sp/>&lt;&lt;<sp/>OSCILLATORS_XOSC32MCAPS_ENABLE_Pos));</highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;XOSC32M.CONFIG.INTCAP<sp/>=<sp/>enable<sp/>?<sp/>cap_value<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal">}</highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRF_DECLARE_ONLY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="277"><highlight class="comment">/**<sp/>@}<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal">}</highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRF_OSCILLATORS_H__</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="hal/nrf_oscillators.h"/>
  </compounddef>
</doxygen>
