<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="group__nrf__ecb__hal" kind="group">
    <compoundname>nrf_ecb_hal</compoundname>
    <title>AES ECB encryption HAL</title>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="group__nrf__ecb__hal_1gac4ecf0d83e451302bfae6d2b54ed546c" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_ecb_task_t</name>
        <enumvalue id="group__nrf__ecb__hal_1ggac4ecf0d83e451302bfae6d2b54ed546ca338e621bc5d40864b2e0e43f3ef11d1f" prot="public">
          <name>NRF_ECB_TASK_STARTECB</name>
          <initializer>= offsetof(NRF_ECB_Type, TASKS_STARTECB)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Task for starting the ECB block encryption. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__ecb__hal_1ggac4ecf0d83e451302bfae6d2b54ed546ca80a17abd080cb436d7fc488c8bb28f4d" prot="public">
          <name>NRF_ECB_TASK_START</name>
          <initializer>= offsetof(NRF_ECB_Type, TASKS_START)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Task for starting the ECB block encryption. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__ecb__hal_1ggac4ecf0d83e451302bfae6d2b54ed546ca0d7751481f61e9318922e7ab77eb8b39" prot="public">
          <name>NRF_ECB_TASK_STOPECB</name>
          <initializer>= offsetof(NRF_ECB_Type, TASKS_STOPECB)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Task for stopping the ECB block encryption. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__ecb__hal_1ggac4ecf0d83e451302bfae6d2b54ed546ca8f4773a1e9ec7b0b66585185499cefb5" prot="public">
          <name>NRF_ECB_TASK_STOP</name>
          <initializer>= offsetof(NRF_ECB_Type, TASKS_STOP)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Task for stopping the ECB block encryption. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>ECB tasks. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ecb.h" line="157" column="1" bodyfile="hal/nrf_ecb.h" bodystart="158" bodyend="171"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__ecb__hal_1gaeb64b50b89500a23e71c5c41002a0af2" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_ecb_event_t</name>
        <enumvalue id="group__nrf__ecb__hal_1ggaeb64b50b89500a23e71c5c41002a0af2a6c670ee1eb1a525fa8b621f79f7e95c6" prot="public">
          <name>NRF_ECB_EVENT_ENDECB</name>
          <initializer>= offsetof(NRF_ECB_Type, EVENTS_ENDECB)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>ECB block encrypt complete. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__ecb__hal_1ggaeb64b50b89500a23e71c5c41002a0af2ae1e165c2ec808e92aea02ae5b6af7439" prot="public">
          <name>NRF_ECB_EVENT_ERRORECB</name>
          <initializer>= offsetof(NRF_ECB_Type, EVENTS_ERRORECB)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>ECB block encrypt aborted because of a STOPECB task or due to an error. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__ecb__hal_1ggaeb64b50b89500a23e71c5c41002a0af2a0112d42da8b9b75c0d3f21e575f643f1" prot="public">
          <name>NRF_ECB_EVENT_END</name>
          <initializer>= offsetof(NRF_ECB_Type, EVENTS_END)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>ECB block encrypt complete. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__ecb__hal_1ggaeb64b50b89500a23e71c5c41002a0af2a6de90b30a562a730033f4acbd844c567" prot="public">
          <name>NRF_ECB_EVENT_ERROR</name>
          <initializer>= offsetof(NRF_ECB_Type, EVENTS_ERROR)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>ECB block encrypt aborted because of a STOPECB task or due to an error. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>ECB events. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ecb.h" line="174" column="1" bodyfile="hal/nrf_ecb.h" bodystart="175" bodyend="188"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__ecb__hal_1ga91ca43c848863f0c0ce970054f33b478" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_ecb_int_mask_t</name>
        <enumvalue id="group__nrf__ecb__hal_1gga91ca43c848863f0c0ce970054f33b478a568a063e1a79d57acddddefbe65c8e27" prot="public">
          <name>NRF_ECB_INT_ENDECB_MASK</name>
          <initializer>= ECB_INTENSET_ENDECB_Msk</initializer>
          <briefdescription>
<para>Interrupt on ENDECB event. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__ecb__hal_1gga91ca43c848863f0c0ce970054f33b478a68880909012bfb1e6a36f131820e9efd" prot="public">
          <name>NRF_ECB_INT_ERRORECB_MASK</name>
          <initializer>= ECB_INTENSET_ERRORECB_Msk</initializer>
          <briefdescription>
<para>Interrupt on ERRORECB event. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__ecb__hal_1gga91ca43c848863f0c0ce970054f33b478a7b78be029fcf6179329ac034e1e9b95c" prot="public">
          <name>NRF_ECB_INT_END_MASK</name>
          <initializer>= ECB_INTENSET_END_Msk</initializer>
          <briefdescription>
<para>Interrupt on END event. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__ecb__hal_1gga91ca43c848863f0c0ce970054f33b478a625ac92ff666d0fde139e515486d5efd" prot="public">
          <name>NRF_ECB_INT_ERROR_MASK</name>
          <initializer>= ECB_INTENSET_ERROR_Msk</initializer>
          <briefdescription>
<para>Interrupt on ERROR event. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>ECB interrupts. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ecb.h" line="191" column="1" bodyfile="hal/nrf_ecb.h" bodystart="192" bodyend="205"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__nrf__ecb__hal_1gaf192ddaeac6403b793f1f5f3fe8687cb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_ecb_task_trigger</definition>
        <argsstring>(NRF_ECB_Type *p_reg, nrf_ecb_task_t task)</argsstring>
        <name>nrf_ecb_task_trigger</name>
        <param>
          <type>NRF_ECB_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__ecb__hal_1gac4ecf0d83e451302bfae6d2b54ed546c" kindref="member">nrf_ecb_task_t</ref></type>
          <declname>task</declname>
        </param>
        <briefdescription>
<para>Function for activating the specified ECB task. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">task</parametername>
</parameternamelist>
<parameterdescription>
<para>Task to be activated. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ecb.h" line="440" column="24" bodyfile="hal/nrf_ecb.h" bodystart="440" bodyend="443" declfile="hal/nrf_ecb.h" declline="214" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__ecb__hal_1ga718830ff53e97e283dc82aa36c7f4427" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_ecb_task_address_get</definition>
        <argsstring>(NRF_ECB_Type const *p_reg, nrf_ecb_task_t task)</argsstring>
        <name>nrf_ecb_task_address_get</name>
        <param>
          <type>NRF_ECB_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__ecb__hal_1gac4ecf0d83e451302bfae6d2b54ed546c" kindref="member">nrf_ecb_task_t</ref></type>
          <declname>task</declname>
        </param>
        <briefdescription>
<para>Function for getting the address of the specified ECB task register. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">task</parametername>
</parameternamelist>
<parameterdescription>
<para>Requested task.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Address of the specified task register. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ecb.h" line="445" column="28" bodyfile="hal/nrf_ecb.h" bodystart="445" bodyend="449" declfile="hal/nrf_ecb.h" declline="224" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__ecb__hal_1ga3d14a076be4bfc8f08221a1ded6a5160" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_ecb_event_clear</definition>
        <argsstring>(NRF_ECB_Type *p_reg, nrf_ecb_event_t event)</argsstring>
        <name>nrf_ecb_event_clear</name>
        <param>
          <type>NRF_ECB_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__ecb__hal_1gaeb64b50b89500a23e71c5c41002a0af2" kindref="member">nrf_ecb_event_t</ref></type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>Function for clearing the specified ECB event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event to clear. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ecb.h" line="451" column="24" bodyfile="hal/nrf_ecb.h" bodystart="451" bodyend="455" declfile="hal/nrf_ecb.h" declline="233" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__ecb__hal_1ga90ef309d7ab03fc57decfda2cda0d516" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE bool</type>
        <definition>NRF_STATIC_INLINE bool nrf_ecb_event_check</definition>
        <argsstring>(NRF_ECB_Type const *p_reg, nrf_ecb_event_t event)</argsstring>
        <name>nrf_ecb_event_check</name>
        <param>
          <type>NRF_ECB_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__ecb__hal_1gaeb64b50b89500a23e71c5c41002a0af2" kindref="member">nrf_ecb_event_t</ref></type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>Function for retrieving the state of the ECB event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event to be checked.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>The event has been generated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>The event has not been generated. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ecb.h" line="457" column="24" bodyfile="hal/nrf_ecb.h" bodystart="457" bodyend="460" declfile="hal/nrf_ecb.h" declline="244" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__ecb__hal_1gae95d992775c99eb76db324632edd54e8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_ecb_event_address_get</definition>
        <argsstring>(NRF_ECB_Type const *p_reg, nrf_ecb_event_t event)</argsstring>
        <name>nrf_ecb_event_address_get</name>
        <param>
          <type>NRF_ECB_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__ecb__hal_1gaeb64b50b89500a23e71c5c41002a0af2" kindref="member">nrf_ecb_event_t</ref></type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>Function for getting the address of the specified ECB event register. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>Requested event.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Address of the specified event register. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ecb.h" line="462" column="28" bodyfile="hal/nrf_ecb.h" bodystart="462" bodyend="466" declfile="hal/nrf_ecb.h" declline="254" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__ecb__hal_1ga4ddd691e3f86b9e4d706eefbf95d7e7e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_ecb_int_enable</definition>
        <argsstring>(NRF_ECB_Type *p_reg, uint32_t mask)</argsstring>
        <name>nrf_ecb_int_enable</name>
        <param>
          <type>NRF_ECB_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Function for enabling the specified interrupts. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of interrupts to be enabled. Use <ref refid="group__nrf__ecb__hal_1ga91ca43c848863f0c0ce970054f33b478" kindref="member">nrf_ecb_int_mask_t</ref> values for bit masking. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ecb.h" line="468" column="24" bodyfile="hal/nrf_ecb.h" bodystart="468" bodyend="471" declfile="hal/nrf_ecb.h" declline="264" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__ecb__hal_1ga2622bab1db3db81c0431240d2e3e1053" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_ecb_int_disable</definition>
        <argsstring>(NRF_ECB_Type *p_reg, uint32_t mask)</argsstring>
        <name>nrf_ecb_int_disable</name>
        <param>
          <type>NRF_ECB_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Function for disabling the specified interrupts. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of interrupts to be disabled. Use <ref refid="group__nrf__ecb__hal_1ga91ca43c848863f0c0ce970054f33b478" kindref="member">nrf_ecb_int_mask_t</ref> values for bit masking. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ecb.h" line="473" column="24" bodyfile="hal/nrf_ecb.h" bodystart="473" bodyend="476" declfile="hal/nrf_ecb.h" declline="273" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__ecb__hal_1ga536f0db41a066ef0f09ffedc12085479" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_ecb_int_enable_check</definition>
        <argsstring>(NRF_ECB_Type const *p_reg, uint32_t mask)</argsstring>
        <name>nrf_ecb_int_enable_check</name>
        <param>
          <type>NRF_ECB_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Function for checking if the specified interrupts are enabled. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of interrupts to be checked. Use <ref refid="group__nrf__ecb__hal_1ga91ca43c848863f0c0ce970054f33b478" kindref="member">nrf_ecb_int_mask_t</ref> values for bit masking.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Mask of enabled interrupts. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ecb.h" line="478" column="28" bodyfile="hal/nrf_ecb.h" bodystart="478" bodyend="481" declfile="hal/nrf_ecb.h" declline="284" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__ecb__hal_1ga60c24f78d6cce8a37696017e4d4ea5d6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_ecb_data_pointer_set</definition>
        <argsstring>(NRF_ECB_Type *p_reg, void const *p_buffer)</argsstring>
        <name>nrf_ecb_data_pointer_set</name>
        <param>
          <type>NRF_ECB_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>void const *</type>
          <declname>p_buffer</declname>
        </param>
        <briefdescription>
<para>Function for setting the pointer to the ECB data buffer. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>The buffer has to be placed in the Data RAM region. For description of the data structure in this buffer, see the Product Specification.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">p_buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the ECB data buffer. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ecb.h" line="484" column="24" bodyfile="hal/nrf_ecb.h" bodystart="484" bodyend="487" declfile="hal/nrf_ecb.h" declline="296" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__ecb__hal_1gaa162cb7821e54755c378ed5eecd677e1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void *</type>
        <definition>NRF_STATIC_INLINE void * nrf_ecb_data_pointer_get</definition>
        <argsstring>(NRF_ECB_Type const *p_reg)</argsstring>
        <name>nrf_ecb_data_pointer_get</name>
        <param>
          <type>NRF_ECB_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting the pointer to the ECB data buffer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to the ECB data buffer. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ecb.h" line="489" column="25" bodyfile="hal/nrf_ecb.h" bodystart="489" bodyend="492" declfile="hal/nrf_ecb.h" declline="305" declcolumn="25"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__ecb__hal_1gae20d640a432668714bca3554ea4bcded" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_ecb_key_set</definition>
        <argsstring>(NRF_ECB_Type *p_reg, uint32_t const *p_key)</argsstring>
        <name>nrf_ecb_key_set</name>
        <param>
          <type>NRF_ECB_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t const *</type>
          <declname>p_key</declname>
        </param>
        <briefdescription>
<para>Function for setting the AES key. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">p_key</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the AES 128-bit key value. The key shall be stored in big endian byte order. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ecb.h" line="496" column="24" bodyfile="hal/nrf_ecb.h" bodystart="496" bodyend="503" declfile="hal/nrf_ecb.h" declline="316" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__ecb__hal_1ga047a8041657af0eef52bec01fae045fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_ecb_in_ptr_set</definition>
        <argsstring>(NRF_ECB_Type *p_reg, nrf_vdma_job_t const *p_job)</argsstring>
        <name>nrf_ecb_in_ptr_set</name>
        <param>
          <type>NRF_ECB_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="structnrf__vdma__job__t" kindref="compound">nrf_vdma_job_t</ref> const *</type>
          <declname>p_job</declname>
        </param>
        <briefdescription>
<para>Function for setting the pointer to a job list containing unencrypted ECB data structure in Encryption mode or encrypted ECB data structure in Decryption mode. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">p_job</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a job list. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ecb.h" line="507" column="24" bodyfile="hal/nrf_ecb.h" bodystart="507" bodyend="511" declfile="hal/nrf_ecb.h" declline="329" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__ecb__hal_1ga4590a4ccb6dc4416d955f989fed4b45f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE <ref refid="structnrf__vdma__job__t" kindref="compound">nrf_vdma_job_t</ref> *</type>
        <definition>NRF_STATIC_INLINE nrf_vdma_job_t * nrf_ecb_in_ptr_get</definition>
        <argsstring>(NRF_ECB_Type const *p_reg)</argsstring>
        <name>nrf_ecb_in_ptr_get</name>
        <param>
          <type>NRF_ECB_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting the pointer to job list containing unencrypted ECB data structure in Encryption mode or encrypted ECB data structure in Decryption mode. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to a job list. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ecb.h" line="513" column="35" bodyfile="hal/nrf_ecb.h" bodystart="513" bodyend="516" declfile="hal/nrf_ecb.h" declline="341" declcolumn="35"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__ecb__hal_1ga883ac07a3e2db180e3ba3c50aae83b4e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_ecb_in_amount_get</definition>
        <argsstring>(NRF_ECB_Type const *p_reg)</argsstring>
        <name>nrf_ecb_in_amount_get</name>
        <param>
          <type>NRF_ECB_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting number of bytes read from the input data, not including the job list structure. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Number of bytes read from the input data. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ecb.h" line="520" column="28" bodyfile="hal/nrf_ecb.h" bodystart="520" bodyend="523" declfile="hal/nrf_ecb.h" declline="353" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__ecb__hal_1ga514222bacd9f83686cdb6f699421252d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_ecb_out_ptr_set</definition>
        <argsstring>(NRF_ECB_Type *p_reg, nrf_vdma_job_t const *p_job)</argsstring>
        <name>nrf_ecb_out_ptr_set</name>
        <param>
          <type>NRF_ECB_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="structnrf__vdma__job__t" kindref="compound">nrf_vdma_job_t</ref> const *</type>
          <declname>p_job</declname>
        </param>
        <briefdescription>
<para>Function for setting the pointer to a job list containing encrypted ECB data structure in Encryption mode or decrypted ECB data structure in Decryption mode. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">p_job</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a job list. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ecb.h" line="527" column="24" bodyfile="hal/nrf_ecb.h" bodystart="527" bodyend="531" declfile="hal/nrf_ecb.h" declline="365" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__ecb__hal_1gaf9da5cba0f135ce37fb7866ac5d3c137" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE <ref refid="structnrf__vdma__job__t" kindref="compound">nrf_vdma_job_t</ref> *</type>
        <definition>NRF_STATIC_INLINE nrf_vdma_job_t * nrf_ecb_out_ptr_get</definition>
        <argsstring>(NRF_ECB_Type const *p_reg)</argsstring>
        <name>nrf_ecb_out_ptr_get</name>
        <param>
          <type>NRF_ECB_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting the pointer to a job list containing encrypted ECB data structure in Encryption mode or decrypted ECB data structure in Decryption mode. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to the job list. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ecb.h" line="533" column="35" bodyfile="hal/nrf_ecb.h" bodystart="533" bodyend="536" declfile="hal/nrf_ecb.h" declline="377" declcolumn="35"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__ecb__hal_1gac2b097a3b9f27ecf2575e434dfbd3ddf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_ecb_out_amount_get</definition>
        <argsstring>(NRF_ECB_Type const *p_reg)</argsstring>
        <name>nrf_ecb_out_amount_get</name>
        <param>
          <type>NRF_ECB_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting number of bytes available in the output data, not including the job list structure. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Number of bytes available in the output data. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ecb.h" line="540" column="28" bodyfile="hal/nrf_ecb.h" bodystart="540" bodyend="543" declfile="hal/nrf_ecb.h" declline="389" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__ecb__hal_1ga1859cfd6afa9ddd143661b9c089266a5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_ecb_subscribe_set</definition>
        <argsstring>(NRF_ECB_Type *p_reg, nrf_ecb_task_t task, uint8_t channel)</argsstring>
        <name>nrf_ecb_subscribe_set</name>
        <param>
          <type>NRF_ECB_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__ecb__hal_1gac4ecf0d83e451302bfae6d2b54ed546c" kindref="member">nrf_ecb_task_t</ref></type>
          <declname>task</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>channel</declname>
        </param>
        <briefdescription>
<para>Function for setting the subscribe configuration for a given ECB task. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">task</parametername>
</parameternamelist>
<parameterdescription>
<para>Task for which to set the configuration. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">channel</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel through which to subscribe events. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ecb.h" line="401" column="24" declfile="hal/nrf_ecb.h" declline="401" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__ecb__hal_1ga41212c13c2456d8da5729ef465cccbea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_ecb_subscribe_clear</definition>
        <argsstring>(NRF_ECB_Type *p_reg, nrf_ecb_task_t task)</argsstring>
        <name>nrf_ecb_subscribe_clear</name>
        <param>
          <type>NRF_ECB_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__ecb__hal_1gac4ecf0d83e451302bfae6d2b54ed546c" kindref="member">nrf_ecb_task_t</ref></type>
          <declname>task</declname>
        </param>
        <briefdescription>
<para>Function for clearing the subscribe configuration for a given ECB task. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">task</parametername>
</parameternamelist>
<parameterdescription>
<para>Task for which to clear the configuration. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ecb.h" line="412" column="24" declfile="hal/nrf_ecb.h" declline="412" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__ecb__hal_1ga3fbe83f2accb07e50084e3bc7062aabb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_ecb_publish_set</definition>
        <argsstring>(NRF_ECB_Type *p_reg, nrf_ecb_event_t event, uint8_t channel)</argsstring>
        <name>nrf_ecb_publish_set</name>
        <param>
          <type>NRF_ECB_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__ecb__hal_1gaeb64b50b89500a23e71c5c41002a0af2" kindref="member">nrf_ecb_event_t</ref></type>
          <declname>event</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>channel</declname>
        </param>
        <briefdescription>
<para>Function for setting the publish configuration for a given ECB event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event for which to set the configuration. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">channel</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel through which to publish the event. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ecb.h" line="423" column="24" declfile="hal/nrf_ecb.h" declline="423" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__ecb__hal_1gab3d8177e957e0495aa2b84c581b71013" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_ecb_publish_clear</definition>
        <argsstring>(NRF_ECB_Type *p_reg, nrf_ecb_event_t event)</argsstring>
        <name>nrf_ecb_publish_clear</name>
        <param>
          <type>NRF_ECB_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__ecb__hal_1gaeb64b50b89500a23e71c5c41002a0af2" kindref="member">nrf_ecb_event_t</ref></type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>Function for clearing the publish configuration for a given ECB event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event for which to clear the configuration. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ecb.h" line="434" column="24" declfile="hal/nrf_ecb.h" declline="434" declcolumn="24"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__nrf__ecb__hal_1gaaf98e25ae8e6841feb37b37861e5a323" prot="public" static="no">
        <name>NRF_ECB_HAS_TASK_STARTECB</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Presence of the STARTECB task. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ecb.h" line="56" column="9" bodyfile="hal/nrf_ecb.h" bodystart="56" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__ecb__hal_1ga51f8743f705dee195d7a6e2e40484092" prot="public" static="no">
        <name>NRF_ECB_HAS_TASK_START</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Presence of the START task. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ecb.h" line="63" column="9" bodyfile="hal/nrf_ecb.h" bodystart="63" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__ecb__hal_1ga8e2f1bdd5b6b3c5e6d51d15c2525b151" prot="public" static="no">
        <name>NRF_ECB_HAS_TASK_STOPECB</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Presence of the STOPECB task. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ecb.h" line="71" column="9" bodyfile="hal/nrf_ecb.h" bodystart="71" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__ecb__hal_1gad256a3d6af34b09315237c72e03223e0" prot="public" static="no">
        <name>NRF_ECB_HAS_TASK_STOP</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Presence of the STOP task. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ecb.h" line="78" column="9" bodyfile="hal/nrf_ecb.h" bodystart="78" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__ecb__hal_1gae73940f346eadeebf5cc74213377db9e" prot="public" static="no">
        <name>NRF_ECB_HAS_EVENT_ENDECB</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Presence of the ENDECB event. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ecb.h" line="86" column="9" bodyfile="hal/nrf_ecb.h" bodystart="86" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__ecb__hal_1ga3bdbc23a728ead472df18d2c07deebaa" prot="public" static="no">
        <name>NRF_ECB_HAS_EVENT_END</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Presence of the END event. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ecb.h" line="93" column="9" bodyfile="hal/nrf_ecb.h" bodystart="93" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__ecb__hal_1ga3985c099eed272ad2eee813a00e807d6" prot="public" static="no">
        <name>NRF_ECB_HAS_EVENT_ERRORECB</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Presence of the ERRORECB event. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ecb.h" line="101" column="9" bodyfile="hal/nrf_ecb.h" bodystart="101" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__ecb__hal_1gab1b1702f584df0f99e5a56864515fcf8" prot="public" static="no">
        <name>NRF_ECB_HAS_EVENT_ERROR</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Presence of the ERROR event. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ecb.h" line="108" column="9" bodyfile="hal/nrf_ecb.h" bodystart="108" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__ecb__hal_1gae1fba4801d875aea0943ebeb24d723b8" prot="public" static="no">
        <name>NRF_ECB_HAS_KEY</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Presence of the KEY register. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ecb.h" line="115" column="9" bodyfile="hal/nrf_ecb.h" bodystart="115" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__ecb__hal_1ga53cb0779e632fa5fea8d7865a092008f" prot="public" static="no">
        <name>NRF_ECB_HAS_IN_PTR</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Presence of the IN.PTR register. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ecb.h" line="122" column="9" bodyfile="hal/nrf_ecb.h" bodystart="122" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__ecb__hal_1gad4c82e7ee32e2e30cf041cc65a1dfe03" prot="public" static="no">
        <name>NRF_ECB_HAS_IN_AMOUNT</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Presence of the IN.AMOUNT register. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ecb.h" line="129" column="9" bodyfile="hal/nrf_ecb.h" bodystart="129" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__ecb__hal_1gaa6f33d1d8ea9c4b73c4a2f5b0a015a31" prot="public" static="no">
        <name>NRF_ECB_HAS_OUT_PTR</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Presence of the OUT.PTR register. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ecb.h" line="136" column="9" bodyfile="hal/nrf_ecb.h" bodystart="136" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__ecb__hal_1ga89a89c17f8637517757bd00d74ba66ec" prot="public" static="no">
        <name>NRF_ECB_HAS_OUT_AMOUNT</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Presence of the OUT.AMOUNT register. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ecb.h" line="143" column="9" bodyfile="hal/nrf_ecb.h" bodystart="143" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__ecb__hal_1ga8c3d2c0f70f3acc8e3a7e1f3eeaff94f" prot="public" static="no">
        <name>NRF_ECB_HAS_ECBDATAPTR</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Presence of the ECBDATAPTR register. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ecb.h" line="151" column="9" bodyfile="hal/nrf_ecb.h" bodystart="151" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Hardware access layer (HAL) for managing the Advanced Encryption Standard (AES) Electronic Codebook (ECB) peripheral. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
