<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="nrf__rramc_8h" kind="file" language="C++">
    <compoundname>nrf_rramc.h</compoundname>
    <includes local="no">nrfx.h</includes>
    <includes refid="nrf__bitmask_8h" local="no">nrf_bitmask.h</includes>
    <includedby refid="nrfy__rramc_8h" local="no">haly/nrfy_rramc.h</includedby>
    <incdepgraph>
      <node id="1">
        <label>hal/nrf_rramc.h</label>
        <link refid="nrf__rramc_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>nrfx.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="structnrf__rramc__config__t" prot="public">nrf_rramc_config_t</innerclass>
    <innerclass refid="structnrf__rramc__ready__next__timeout__t" prot="public">nrf_rramc_ready_next_timeout_t</innerclass>
    <innerclass refid="structnrf__rramc__power__t" prot="public">nrf_rramc_power_t</innerclass>
    <innerclass refid="structnrf__rramc__region__config__t" prot="public">nrf_rramc_region_config_t</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__nrf__rramc__hal_1ga3c0bbef9aa4ef0796aef6851bc79fe74" prot="public" static="no">
        <name>NRF_RRAMC_CONFIG_WRITE_BUFF_SIZE_MAX</name>
        <initializer>RRAMC_CONFIG_WRITEBUFSIZE_Max</initializer>
        <briefdescription>
<para>Maximum size of a write-buffer in number of 128-bit words. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_rramc.h" line="52" column="9" bodyfile="hal/nrf_rramc.h" bodystart="52" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__rramc__hal_1ga81f6fef9e0d33a32f16b7ff86bfacdd2" prot="public" static="no">
        <name>NRF_RRAMC_READYNEXTTIMEOUT_MAX</name>
        <initializer>RRAMC_READYNEXTTIMEOUT_VALUE_Max</initializer>
        <briefdescription>
<para>Maximum preload timeout value for waiting for a next write. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_rramc.h" line="55" column="9" bodyfile="hal/nrf_rramc.h" bodystart="55" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__rramc__hal_1ga3d969b8a42d8c22b05d44adb5843aad9" prot="public" static="no">
        <name>NRF_RRAMC_REGION_CONFIG_PERM_MASK</name>
        <initializer>                                           (RRAMC_REGION_CONFIG_READ_Msk    | \
                                           RRAMC_REGION_CONFIG_WRITE_Msk   | \
                                           RRAMC_REGION_CONFIG_EXECUTE_Msk | \
                                           RRAMC_REGION_CONFIG_SECURE_Msk)</initializer>
        <briefdescription>
<para>RRAMC region permissions bitmask. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_rramc.h" line="58" column="9" bodyfile="hal/nrf_rramc.h" bodystart="58" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="group__nrf__rramc__hal_1gadf80c0390d89b481d76b4f348b147cc7" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_rramc_task_t</name>
        <enumvalue id="group__nrf__rramc__hal_1ggadf80c0390d89b481d76b4f348b147cc7ae26d52348c5b64e26ef7a0d6fcea2424" prot="public">
          <name>NRF_RRAMC_TASK_WAKEUP</name>
          <initializer>= offsetof(NRF_RRAMC_Type, TASKS_WAKEUP)</initializer>
          <briefdescription>
<para>Wakeup the RRAM from low power mode. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__rramc__hal_1ggadf80c0390d89b481d76b4f348b147cc7ae78e37462cb130d9e84894a34df2dbb4" prot="public">
          <name>NRF_RRAMC_TASK_COMMIT_WRITEBUF</name>
          <initializer>= offsetof(NRF_RRAMC_Type, TASKS_COMMITWRITEBUF)</initializer>
          <briefdescription>
<para>Commit the data stored in internal write-buffer to RRAM. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>RRAMC tasks. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_rramc.h" line="64" column="1" bodyfile="hal/nrf_rramc.h" bodystart="65" bodyend="68"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__rramc__hal_1ga12273d5b8ed1f0e2c15d4eb6b2bb45dd" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_rramc_event_t</name>
        <enumvalue id="group__nrf__rramc__hal_1gga12273d5b8ed1f0e2c15d4eb6b2bb45ddadb6b5788f971630e4599e9e0ff366a36" prot="public">
          <name>NRF_RRAMC_EVENT_WOKENUP</name>
          <initializer>= offsetof(NRF_RRAMC_Type, EVENTS_WOKENUP)</initializer>
          <briefdescription>
<para>The RRAM is woken up from low power mode. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__rramc__hal_1gga12273d5b8ed1f0e2c15d4eb6b2bb45ddaa50022ae45e9aeccf043e9c25b0dc510" prot="public">
          <name>NRF_RRAMC_EVENT_READY</name>
          <initializer>= offsetof(NRF_RRAMC_Type, EVENTS_READY)</initializer>
          <briefdescription>
<para>RRAMC is ready. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__rramc__hal_1gga12273d5b8ed1f0e2c15d4eb6b2bb45dda883352a74d9ebfc2a1868e7ffa080875" prot="public">
          <name>NRF_RRAMC_EVENT_READY_NEXT</name>
          <initializer>= offsetof(NRF_RRAMC_Type, EVENTS_READYNEXT)</initializer>
          <briefdescription>
<para>Ready to accept a new write operation. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__rramc__hal_1gga12273d5b8ed1f0e2c15d4eb6b2bb45dda0ab2fc8a267c9cacfd4d4ef9a31fe968" prot="public">
          <name>NRF_RRAMC_EVENT_ERROR_ACCESS</name>
          <initializer>= offsetof(NRF_RRAMC_Type, EVENTS_ACCESSERROR)</initializer>
          <briefdescription>
<para>RRAM access error. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>RRAMC events. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_rramc.h" line="71" column="1" bodyfile="hal/nrf_rramc.h" bodystart="72" bodyend="77"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__rramc__hal_1ga95ceba960c4e94ed070157dee96947cb" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_rramc_int_mask_t</name>
        <enumvalue id="group__nrf__rramc__hal_1gga95ceba960c4e94ed070157dee96947cba41d959cedef3c33155d7cead48495930" prot="public">
          <name>NRF_RRAMC_INT_WOKENUP_MASK</name>
          <initializer>= RRAMC_INTENSET_WOKENUP_Msk</initializer>
          <briefdescription>
<para>Interrupt on WOKENUP event. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__rramc__hal_1gga95ceba960c4e94ed070157dee96947cba7778d5858a094b102b8ce0b6cfe8727a" prot="public">
          <name>NRF_RRAMC_INT_READY_MASK</name>
          <initializer>= RRAMC_INTENSET_READY_Msk</initializer>
          <briefdescription>
<para>Interrupt on READY event. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__rramc__hal_1gga95ceba960c4e94ed070157dee96947cba5db7e69a7cf1ef91b9d58fcd0ef5ceac" prot="public">
          <name>NRF_RRAMC_INT_READY_NEXT_MASK</name>
          <initializer>= RRAMC_INTENSET_READYNEXT_Msk</initializer>
          <briefdescription>
<para>Interrupt on READYNEXT event. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__rramc__hal_1gga95ceba960c4e94ed070157dee96947cbaf884152357d3a1de7fa0c384c2f3979d" prot="public">
          <name>NRF_RRAMC_INT_ERROR_ACCESS_MASK</name>
          <initializer>= RRAMC_INTENSET_ACCESSERROR_Msk</initializer>
          <briefdescription>
<para>Interrupt on ACCESSERROR event. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__rramc__hal_1gga95ceba960c4e94ed070157dee96947cba2145b2f305d5ea9efa8c8f4a3e96a1f9" prot="public">
          <name>NRF_RRAMC_ALL_INTS_MASK</name>
          <initializer>= NRF_RRAMC_INT_WOKENUP_MASK
                                    | NRF_RRAMC_INT_READY_MASK
                                    | NRF_RRAMC_INT_READY_NEXT_MASK
                                    | NRF_RRAMC_INT_ERROR_ACCESS_MASK</initializer>
          <briefdescription>
<para>All RRAMC interrupts. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>RRAMC interrupts. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_rramc.h" line="80" column="1" bodyfile="hal/nrf_rramc.h" bodystart="81" bodyend="90"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__rramc__hal_1ga579f0477b16e9f6076ed83824c85fd8d" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_rramc_region_perm_mask_t</name>
        <enumvalue id="group__nrf__rramc__hal_1gga579f0477b16e9f6076ed83824c85fd8da68e8704bfea43160bfdcfe1ae657f629" prot="public">
          <name>NRF_RRAMC_REGION_PERM_READ_MASK</name>
          <initializer>= RRAMC_REGION_CONFIG_READ_Msk</initializer>
          <briefdescription>
<para>Read access. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__rramc__hal_1gga579f0477b16e9f6076ed83824c85fd8dad4062c4e387289a6409beb2822c3c704" prot="public">
          <name>NRF_RRAMC_REGION_PERM_WRITE_MASK</name>
          <initializer>= RRAMC_REGION_CONFIG_WRITE_Msk</initializer>
          <briefdescription>
<para>Write access. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__rramc__hal_1gga579f0477b16e9f6076ed83824c85fd8dab7ef9b610bde97c4c05f40ab2b2d157f" prot="public">
          <name>NRF_RRAMC_REGION_PERM_EXECUTE_MASK</name>
          <initializer>= RRAMC_REGION_CONFIG_EXECUTE_Msk</initializer>
          <briefdescription>
<para>Software execute. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__rramc__hal_1gga579f0477b16e9f6076ed83824c85fd8da83b03b5c7fd2e0c12a15061f3b8cb297" prot="public">
          <name>NRF_RRAMC_REGION_PERM_SECURE_MASK</name>
          <initializer>= RRAMC_REGION_CONFIG_SECURE_Msk</initializer>
          <briefdescription>
<para>Secure-only access. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>RRAMC region permissions mask. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>When bit is set, the selected action is allowed. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_rramc.h" line="118" column="1" bodyfile="hal/nrf_rramc.h" bodystart="119" bodyend="124"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__nrf__rramc__hal_1ga489e48359c21e9aeab721abf8110252f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_rramc_task_trigger</definition>
        <argsstring>(NRF_RRAMC_Type *p_reg, nrf_rramc_task_t task)</argsstring>
        <name>nrf_rramc_task_trigger</name>
        <param>
          <type>NRF_RRAMC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__rramc__hal_1gadf80c0390d89b481d76b4f348b147cc7" kindref="member">nrf_rramc_task_t</ref></type>
          <declname>task</declname>
        </param>
        <briefdescription>
<para>Function for activating the specified RRAMC task. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">task</parametername>
</parameternamelist>
<parameterdescription>
<para>Task to be activated. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_rramc.h" line="422" column="24" bodyfile="hal/nrf_rramc.h" bodystart="422" bodyend="425" declfile="hal/nrf_rramc.h" declline="142" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__rramc__hal_1gabca757c359aa7a33adfcc6556f8c0fb0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_rramc_task_address_get</definition>
        <argsstring>(NRF_RRAMC_Type const *p_reg, nrf_rramc_task_t task)</argsstring>
        <name>nrf_rramc_task_address_get</name>
        <param>
          <type>NRF_RRAMC_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__rramc__hal_1gadf80c0390d89b481d76b4f348b147cc7" kindref="member">nrf_rramc_task_t</ref></type>
          <declname>task</declname>
        </param>
        <briefdescription>
<para>Function for getting the address of the specified RRAMC task register. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">task</parametername>
</parameternamelist>
<parameterdescription>
<para>RRAMC task.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Address of the specified task register. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_rramc.h" line="427" column="28" bodyfile="hal/nrf_rramc.h" bodystart="427" bodyend="431" declfile="hal/nrf_rramc.h" declline="152" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__rramc__hal_1ga6a5a2e22bbd6b8d5af4c27fa64f1a9d8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_rramc_event_clear</definition>
        <argsstring>(NRF_RRAMC_Type *p_reg, nrf_rramc_event_t event)</argsstring>
        <name>nrf_rramc_event_clear</name>
        <param>
          <type>NRF_RRAMC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__rramc__hal_1ga12273d5b8ed1f0e2c15d4eb6b2bb45dd" kindref="member">nrf_rramc_event_t</ref></type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>Function for clearing the specified RRAMC event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the peripheral register structure. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event to clear. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_rramc.h" line="433" column="24" bodyfile="hal/nrf_rramc.h" bodystart="433" bodyend="437" declfile="hal/nrf_rramc.h" declline="161" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__rramc__hal_1ga1f57b36da161e1cf21c82aa3876efb77" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE bool</type>
        <definition>NRF_STATIC_INLINE bool nrf_rramc_event_check</definition>
        <argsstring>(NRF_RRAMC_Type const *p_reg, nrf_rramc_event_t event)</argsstring>
        <name>nrf_rramc_event_check</name>
        <param>
          <type>NRF_RRAMC_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__rramc__hal_1ga12273d5b8ed1f0e2c15d4eb6b2bb45dd" kindref="member">nrf_rramc_event_t</ref></type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>Function for retrieving the state of the RRAMC event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event to be checked.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>The event has been generated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>The event has not been generated. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_rramc.h" line="439" column="24" bodyfile="hal/nrf_rramc.h" bodystart="439" bodyend="442" declfile="hal/nrf_rramc.h" declline="172" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__rramc__hal_1ga3eb129f51c08e58c4cc381768eb60dc5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_rramc_event_address_get</definition>
        <argsstring>(NRF_RRAMC_Type const *p_reg, nrf_rramc_event_t event)</argsstring>
        <name>nrf_rramc_event_address_get</name>
        <param>
          <type>NRF_RRAMC_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__rramc__hal_1ga12273d5b8ed1f0e2c15d4eb6b2bb45dd" kindref="member">nrf_rramc_event_t</ref></type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>Function for getting the address of the specified RRAMC event register. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the peripheral register structure. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>Requested event.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Address of the specified event register. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_rramc.h" line="444" column="28" bodyfile="hal/nrf_rramc.h" bodystart="444" bodyend="448" declfile="hal/nrf_rramc.h" declline="182" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__rramc__hal_1ga3f7f69bc71658a8215e67943284662f7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_rramc_int_enable</definition>
        <argsstring>(NRF_RRAMC_Type *p_reg, uint32_t mask)</argsstring>
        <name>nrf_rramc_int_enable</name>
        <param>
          <type>NRF_RRAMC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Function for enabling the specified interrupts. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the peripheral register structure. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of interrupts to be enabled. Use <ref refid="group__nrf__rramc__hal_1ga95ceba960c4e94ed070157dee96947cb" kindref="member">nrf_rramc_int_mask_t</ref> values for bit masking. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_rramc.h" line="450" column="24" bodyfile="hal/nrf_rramc.h" bodystart="450" bodyend="453" declfile="hal/nrf_rramc.h" declline="192" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__rramc__hal_1ga02dcfb8913610a45e1f11db523e921d8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_rramc_int_disable</definition>
        <argsstring>(NRF_RRAMC_Type *p_reg, uint32_t mask)</argsstring>
        <name>nrf_rramc_int_disable</name>
        <param>
          <type>NRF_RRAMC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Function for disabling the specified interrupts. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the peripheral register structure. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of interrupts to be disabled. Use <ref refid="group__nrf__rramc__hal_1ga95ceba960c4e94ed070157dee96947cb" kindref="member">nrf_rramc_int_mask_t</ref> values for bit masking. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_rramc.h" line="455" column="24" bodyfile="hal/nrf_rramc.h" bodystart="455" bodyend="458" declfile="hal/nrf_rramc.h" declline="201" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__rramc__hal_1ga5c5b504644d49c61de9703237c6d25ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_rramc_int_enable_check</definition>
        <argsstring>(NRF_RRAMC_Type const *p_reg, uint32_t mask)</argsstring>
        <name>nrf_rramc_int_enable_check</name>
        <param>
          <type>NRF_RRAMC_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Function for checking if the specified interrupts are enabled. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of interrupts to be checked. Use <ref refid="group__nrf__rramc__hal_1ga95ceba960c4e94ed070157dee96947cb" kindref="member">nrf_rramc_int_mask_t</ref> values for bit masking.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Mask of enabled interrupts. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_rramc.h" line="460" column="28" bodyfile="hal/nrf_rramc.h" bodystart="460" bodyend="464" declfile="hal/nrf_rramc.h" declline="212" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__rramc__hal_1gaf00e75dd9d1eb6aa3619259951965b24" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_rramc_int_pending_get</definition>
        <argsstring>(NRF_RRAMC_Type const *p_reg)</argsstring>
        <name>nrf_rramc_int_pending_get</name>
        <param>
          <type>NRF_RRAMC_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting the state of pending interrupts. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>States of pending interrupt are saved as a bitmask. One set at particular position means that interrupt for event is pending.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Bitmask with information about pending interrupts. Use <ref refid="group__nrf__rramc__hal_1ga95ceba960c4e94ed070157dee96947cb" kindref="member">nrf_rramc_int_mask_t</ref> values for bit masking. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_rramc.h" line="466" column="28" bodyfile="hal/nrf_rramc.h" bodystart="466" bodyend="469" declfile="hal/nrf_rramc.h" declline="225" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__rramc__hal_1ga7ae9f5e904859c825e76cd71a1bdccf9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_rramc_subscribe_set</definition>
        <argsstring>(NRF_RRAMC_Type *p_reg, nrf_rramc_task_t task, uint8_t channel)</argsstring>
        <name>nrf_rramc_subscribe_set</name>
        <param>
          <type>NRF_RRAMC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__rramc__hal_1gadf80c0390d89b481d76b4f348b147cc7" kindref="member">nrf_rramc_task_t</ref></type>
          <declname>task</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>channel</declname>
        </param>
        <briefdescription>
<para>Function for setting the subscribe configuration for a wakeup RRAMC task. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Not every task has its corresponding subscribe register. Refer to the Product Specification for more information.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">task</parametername>
</parameternamelist>
<parameterdescription>
<para>Task for which to set the configuration. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">channel</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel through which to subscribe events. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_rramc.h" line="239" column="24" declfile="hal/nrf_rramc.h" declline="239" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__rramc__hal_1ga572ef364bcf9cb3953a045a5b58fb749" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_rramc_subscribe_clear</definition>
        <argsstring>(NRF_RRAMC_Type *p_reg, nrf_rramc_task_t task)</argsstring>
        <name>nrf_rramc_subscribe_clear</name>
        <param>
          <type>NRF_RRAMC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__rramc__hal_1gadf80c0390d89b481d76b4f348b147cc7" kindref="member">nrf_rramc_task_t</ref></type>
          <declname>task</declname>
        </param>
        <briefdescription>
<para>Function for clearing the subscribe configuration for a wakeup RRAMC task. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Not every task has its corresponding subscribe register. Refer to the Product Specification for more information.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">task</parametername>
</parameternamelist>
<parameterdescription>
<para>Task for which to clear the configuration. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_rramc.h" line="253" column="24" declfile="hal/nrf_rramc.h" declline="253" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__rramc__hal_1gacc11dfa1e7e8921b6e21a1bb9f7cf1d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_rramc_publish_set</definition>
        <argsstring>(NRF_RRAMC_Type *p_reg, nrf_rramc_event_t event, uint8_t channel)</argsstring>
        <name>nrf_rramc_publish_set</name>
        <param>
          <type>NRF_RRAMC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__rramc__hal_1ga12273d5b8ed1f0e2c15d4eb6b2bb45dd" kindref="member">nrf_rramc_event_t</ref></type>
          <declname>event</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>channel</declname>
        </param>
        <briefdescription>
<para>Function for setting the publish configuration for a wokenup RRAMC event. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Not every event has its corresponding publish register. Refer to the Product Specification for more information.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event for which to set the configuration. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">channel</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel through which to publish the event. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_rramc.h" line="266" column="24" declfile="hal/nrf_rramc.h" declline="266" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__rramc__hal_1ga2aca81a5db0d6d818307cd50f825bbf1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_rramc_publish_clear</definition>
        <argsstring>(NRF_RRAMC_Type *p_reg, nrf_rramc_event_t event)</argsstring>
        <name>nrf_rramc_publish_clear</name>
        <param>
          <type>NRF_RRAMC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__rramc__hal_1ga12273d5b8ed1f0e2c15d4eb6b2bb45dd" kindref="member">nrf_rramc_event_t</ref></type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>Function for clearing the publish configuration for a wokenup RRAMC event. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Not every event has its corresponding publish register. Refer to the Product Specification for more information.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event for which to clear the configuration. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_rramc.h" line="280" column="24" declfile="hal/nrf_rramc.h" declline="280" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__rramc__hal_1gae3dd53c1f48d343e31268ab9fe3102d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE bool</type>
        <definition>NRF_STATIC_INLINE bool nrf_rramc_ready_check</definition>
        <argsstring>(NRF_RRAMC_Type const *p_reg)</argsstring>
        <name>nrf_rramc_ready_check</name>
        <param>
          <type>NRF_RRAMC_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for checking current RRAMC operation status. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>Current operation is completed, and RRAMC is ready. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>RRAMC is busy. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_rramc.h" line="499" column="24" bodyfile="hal/nrf_rramc.h" bodystart="499" bodyend="504" declfile="hal/nrf_rramc.h" declline="292" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__rramc__hal_1ga3334d9ee37c8e0f156f1cddc9aa8f438" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE bool</type>
        <definition>NRF_STATIC_INLINE bool nrf_rramc_write_ready_check</definition>
        <argsstring>(NRF_RRAMC_Type const *p_reg)</argsstring>
        <name>nrf_rramc_write_ready_check</name>
        <param>
          <type>NRF_RRAMC_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for checking whether RRAMC is ready to accept a new write operation. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>RRAMC is ready to accept a new write operation. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>RRAMC cannot accept any write operation now. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_rramc.h" line="506" column="24" bodyfile="hal/nrf_rramc.h" bodystart="506" bodyend="511" declfile="hal/nrf_rramc.h" declline="302" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__rramc__hal_1ga7b3734fcb2edf3e513d48328718fe5fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_rramc_error_access_addr_get</definition>
        <argsstring>(NRF_RRAMC_Type const *p_reg)</argsstring>
        <name>nrf_rramc_error_access_addr_get</name>
        <param>
          <type>NRF_RRAMC_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Fuction for checking the address of the first access error. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Access error address. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_rramc.h" line="513" column="28" bodyfile="hal/nrf_rramc.h" bodystart="513" bodyend="516" declfile="hal/nrf_rramc.h" declline="311" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__rramc__hal_1gafad2c8c47ca125eec3724f54c62b891f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE bool</type>
        <definition>NRF_STATIC_INLINE bool nrf_rramc_empty_buffer_check</definition>
        <argsstring>(NRF_RRAMC_Type const *p_reg)</argsstring>
        <name>nrf_rramc_empty_buffer_check</name>
        <param>
          <type>NRF_RRAMC_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for checking whether the internal write-buffer has been committed to RRAM and is now empty. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>The internal write-buffer is empty and has no content that needs to be commited. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>The internal write-buffer has data that needs to be committed. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_rramc.h" line="518" column="24" bodyfile="hal/nrf_rramc.h" bodystart="518" bodyend="523" declfile="hal/nrf_rramc.h" declline="321" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__rramc__hal_1ga600344f5d63d15447e2a49bd1bc87b91" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_rramc_config_get</definition>
        <argsstring>(NRF_RRAMC_Type const *p_reg, nrf_rramc_config_t *p_config)</argsstring>
        <name>nrf_rramc_config_get</name>
        <param>
          <type>NRF_RRAMC_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="structnrf__rramc__config__t" kindref="compound">nrf_rramc_config_t</ref> *</type>
          <declname>p_config</declname>
        </param>
        <briefdescription>
<para>Function for getting the RRAMC peripheral configuration. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">p_config</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure to be filled with RRAMC configuration data. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_rramc.h" line="525" column="24" bodyfile="hal/nrf_rramc.h" bodystart="525" bodyend="532" declfile="hal/nrf_rramc.h" declline="329" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__rramc__hal_1ga4aa89554145d84b6df4178a36bc46e99" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_rramc_config_set</definition>
        <argsstring>(NRF_RRAMC_Type *p_reg, nrf_rramc_config_t const *p_config)</argsstring>
        <name>nrf_rramc_config_set</name>
        <param>
          <type>NRF_RRAMC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="structnrf__rramc__config__t" kindref="compound">nrf_rramc_config_t</ref> const *</type>
          <declname>p_config</declname>
        </param>
        <briefdescription>
<para>Function for setting the RRAMC peripheral configuration. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">p_config</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure with configuration to be set. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_rramc.h" line="534" column="24" bodyfile="hal/nrf_rramc.h" bodystart="534" bodyend="541" declfile="hal/nrf_rramc.h" declline="338" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__rramc__hal_1ga04efa9e62632c8b8dff3d62382d448d6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_rramc_ready_next_timeout_get</definition>
        <argsstring>(NRF_RRAMC_Type const *p_reg, nrf_rramc_ready_next_timeout_t *p_config)</argsstring>
        <name>nrf_rramc_ready_next_timeout_get</name>
        <param>
          <type>NRF_RRAMC_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="structnrf__rramc__ready__next__timeout__t" kindref="compound">nrf_rramc_ready_next_timeout_t</ref> *</type>
          <declname>p_config</declname>
        </param>
        <briefdescription>
<para>Function for getting preload timeout value for waiting for a next write. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">p_config</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure to be filled with information about preload timeout value. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_rramc.h" line="543" column="24" bodyfile="hal/nrf_rramc.h" bodystart="543" bodyend="550" declfile="hal/nrf_rramc.h" declline="348" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__rramc__hal_1ga66be625abc1ee4292bd40e299dbe4ac7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_rramc_ready_next_timeout_set</definition>
        <argsstring>(NRF_RRAMC_Type *p_reg, nrf_rramc_ready_next_timeout_t const *p_config)</argsstring>
        <name>nrf_rramc_ready_next_timeout_set</name>
        <param>
          <type>NRF_RRAMC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="structnrf__rramc__ready__next__timeout__t" kindref="compound">nrf_rramc_ready_next_timeout_t</ref> const *</type>
          <declname>p_config</declname>
        </param>
        <briefdescription>
<para>Function for setting preload timeout value for waiting for a next write. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">p_config</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure filled with information about$ preload timeout value. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_rramc.h" line="553" column="1" bodyfile="hal/nrf_rramc.h" bodystart="553" bodyend="562" declfile="hal/nrf_rramc.h" declline="359" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__rramc__hal_1ga0d04aaa18a1463ca07cdc2292a7d38f2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_rramc_power_config_get</definition>
        <argsstring>(NRF_RRAMC_Type const *p_reg, nrf_rramc_power_t *p_config)</argsstring>
        <name>nrf_rramc_power_config_get</name>
        <param>
          <type>NRF_RRAMC_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="structnrf__rramc__power__t" kindref="compound">nrf_rramc_power_t</ref> *</type>
          <declname>p_config</declname>
        </param>
        <briefdescription>
<para>Function for getting the RRAMC power configuration. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">p_config</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure to be filled with information about power configuration. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_rramc.h" line="564" column="24" bodyfile="hal/nrf_rramc.h" bodystart="564" bodyend="574" declfile="hal/nrf_rramc.h" declline="369" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__rramc__hal_1ga5aa5b43d22070041f92b7396758ed8a9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_rramc_power_config_set</definition>
        <argsstring>(NRF_RRAMC_Type *p_reg, nrf_rramc_power_t const *p_config)</argsstring>
        <name>nrf_rramc_power_config_set</name>
        <param>
          <type>NRF_RRAMC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="structnrf__rramc__power__t" kindref="compound">nrf_rramc_power_t</ref> const *</type>
          <declname>p_config</declname>
        </param>
        <briefdescription>
<para>Function for setting the RRAMC power configuration. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">p_config</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure filled with information about power configuration. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_rramc.h" line="576" column="24" bodyfile="hal/nrf_rramc.h" bodystart="576" bodyend="582" declfile="hal/nrf_rramc.h" declline="378" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__rramc__hal_1gaad0e37d917d80c370ffbc37d22dfe6c8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE bool</type>
        <definition>NRF_STATIC_INLINE bool nrf_rramc_erase_all_check</definition>
        <argsstring>(NRF_RRAMC_Type const *p_reg)</argsstring>
        <name>nrf_rramc_erase_all_check</name>
        <param>
          <type>NRF_RRAMC_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for checking if the erasing operation of the whole RRAM main block has been started. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>Erase of chip started. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>No operation. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_rramc.h" line="584" column="24" bodyfile="hal/nrf_rramc.h" bodystart="584" bodyend="589" declfile="hal/nrf_rramc.h" declline="389" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__rramc__hal_1gabd91f162fa4e8bb5800e5ad46a10ac2d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_rramc_erase_all_set</definition>
        <argsstring>(NRF_RRAMC_Type *p_reg)</argsstring>
        <name>nrf_rramc_erase_all_set</name>
        <param>
          <type>NRF_RRAMC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for erasing whole RRAM main block, that includes the SICR and the UICR. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_rramc.h" line="591" column="24" bodyfile="hal/nrf_rramc.h" bodystart="591" bodyend="594" declfile="hal/nrf_rramc.h" declline="396" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__rramc__hal_1ga0a8c03c1bbee5321883fc348fb246f4a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_rramc_region_config_set</definition>
        <argsstring>(NRF_RRAMC_Type *p_reg, uint8_t region, nrf_rramc_region_config_t const *p_config)</argsstring>
        <name>nrf_rramc_region_config_set</name>
        <param>
          <type>NRF_RRAMC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>region</declname>
        </param>
        <param>
          <type><ref refid="structnrf__rramc__region__config__t" kindref="compound">nrf_rramc_region_config_t</ref> const *</type>
          <declname>p_config</declname>
        </param>
        <briefdescription>
<para>Function for setting the configuration of the specified RRAMC region. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">region</parametername>
</parameternamelist>
<parameterdescription>
<para>Region number. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">p_config</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the configuration structure. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_rramc.h" line="596" column="24" bodyfile="hal/nrf_rramc.h" bodystart="596" bodyend="611" declfile="hal/nrf_rramc.h" declline="405" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__rramc__hal_1ga203cf7cebc41d47f7eb2c416b238e738" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_rramc_region_config_get</definition>
        <argsstring>(NRF_RRAMC_Type const *p_reg, uint8_t region, nrf_rramc_region_config_t *p_config)</argsstring>
        <name>nrf_rramc_region_config_get</name>
        <param>
          <type>NRF_RRAMC_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>region</declname>
        </param>
        <param>
          <type><ref refid="structnrf__rramc__region__config__t" kindref="compound">nrf_rramc_region_config_t</ref> *</type>
          <declname>p_config</declname>
        </param>
        <briefdescription>
<para>Function for getting the configuration of the specified RRAMC region. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">region</parametername>
</parameternamelist>
<parameterdescription>
<para>Region number. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">p_config</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure to be filled with RRAMC region settings. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_rramc.h" line="613" column="24" bodyfile="hal/nrf_rramc.h" bodystart="613" bodyend="626" declfile="hal/nrf_rramc.h" declline="416" declcolumn="24"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2023<sp/>-<sp/>2024,<sp/>Nordic<sp/>Semiconductor<sp/>ASA</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>All<sp/>rights<sp/>reserved.</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>SPDX-License-Identifier:<sp/>BSD-3-Clause</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions<sp/>are<sp/>met:</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>1.<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright<sp/>notice,<sp/>this</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>2.<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the<sp/>distribution.</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/>3.<sp/>Neither<sp/>the<sp/>name<sp/>of<sp/>the<sp/>copyright<sp/>holder<sp/>nor<sp/>the<sp/>names<sp/>of<sp/>its</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>contributors<sp/>may<sp/>be<sp/>used<sp/>to<sp/>endorse<sp/>or<sp/>promote<sp/>products<sp/>derived<sp/>from<sp/>this</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>software<sp/>without<sp/>specific<sp/>prior<sp/>written<sp/>permission.</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>COPYRIGHT<sp/>HOLDERS<sp/>AND<sp/>CONTRIBUTORS<sp/>&quot;AS<sp/>IS&quot;</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/>AND<sp/>ANY<sp/>EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>THE</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*<sp/>ARE<sp/>DISCLAIMED.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>COPYRIGHT<sp/>HOLDER<sp/>OR<sp/>CONTRIBUTORS<sp/>BE</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,<sp/>SPECIAL,<sp/>EXEMPLARY,<sp/>OR</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>PROCUREMENT<sp/>OF</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>*<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,<sp/>DATA,<sp/>OR<sp/>PROFITS;<sp/>OR<sp/>BUSINESS</highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/>*<sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY<sp/>THEORY<sp/>OF<sp/>LIABILITY,<sp/>WHETHER<sp/>IN</highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/>*<sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR<sp/>OTHERWISE)</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/>*<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE<sp/>OF<sp/>THIS<sp/>SOFTWARE,<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/>*<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight></codeline>
<codeline lineno="32"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>NRF_RRAMC_H__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_RRAMC_H__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;nrfx.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;nrf_bitmask.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="44"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="45"><highlight class="comment"><sp/>*<sp/>@defgroup<sp/>nrf_rramc_hal<sp/>RRAMC<sp/>HAL</highlight></codeline>
<codeline lineno="46"><highlight class="comment"><sp/>*<sp/>@{</highlight></codeline>
<codeline lineno="47"><highlight class="comment"><sp/>*<sp/>@ingroup<sp/>nrf_rramc</highlight></codeline>
<codeline lineno="48"><highlight class="comment"><sp/>*<sp/>@brief<sp/><sp/><sp/>Hardware<sp/>access<sp/>layer<sp/>for<sp/>managing<sp/>the<sp/>the<sp/>Resistive<sp/>Random<sp/>Access<sp/>Memory<sp/>Controller<sp/>(RRAMC)<sp/>peripheral.</highlight></codeline>
<codeline lineno="49"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="51"><highlight class="comment">/**<sp/>@brief<sp/>Maximum<sp/>size<sp/>of<sp/>a<sp/>write-buffer<sp/>in<sp/>number<sp/>of<sp/>128-bit<sp/>words.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_RRAMC_CONFIG_WRITE_BUFF_SIZE_MAX<sp/>RRAMC_CONFIG_WRITEBUFSIZE_Max</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="54"><highlight class="comment">/**<sp/>@brief<sp/>Maximum<sp/>preload<sp/>timeout<sp/>value<sp/>for<sp/>waiting<sp/>for<sp/>a<sp/>next<sp/>write.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_RRAMC_READYNEXTTIMEOUT_MAX<sp/>RRAMC_READYNEXTTIMEOUT_VALUE_Max</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="57"><highlight class="comment">/**<sp/>@brief<sp/>RRAMC<sp/>region<sp/>permissions<sp/>bitmask.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_RRAMC_REGION_CONFIG_PERM_MASK<sp/>(RRAMC_REGION_CONFIG_READ_Msk<sp/><sp/><sp/><sp/>|<sp/>\</highlight></codeline>
<codeline lineno="59"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RRAMC_REGION_CONFIG_WRITE_Msk<sp/><sp/><sp/>|<sp/>\</highlight></codeline>
<codeline lineno="60"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RRAMC_REGION_CONFIG_EXECUTE_Msk<sp/>|<sp/>\</highlight></codeline>
<codeline lineno="61"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RRAMC_REGION_CONFIG_SECURE_Msk)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="63"><highlight class="comment">/**<sp/>@brief<sp/>RRAMC<sp/>tasks.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal">{</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__rramc__hal_1ggadf80c0390d89b481d76b4f348b147cc7ae26d52348c5b64e26ef7a0d6fcea2424" kindref="member">NRF_RRAMC_TASK_WAKEUP</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_RRAMC_Type,<sp/>TASKS_WAKEUP),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Wakeup<sp/>the<sp/>RRAM<sp/>from<sp/>low<sp/>power<sp/>mode.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__rramc__hal_1ggadf80c0390d89b481d76b4f348b147cc7ae78e37462cb130d9e84894a34df2dbb4" kindref="member">NRF_RRAMC_TASK_COMMIT_WRITEBUF</ref><sp/>=<sp/>offsetof(NRF_RRAMC_Type,<sp/>TASKS_COMMITWRITEBUF),<sp/></highlight><highlight class="comment">///&lt;<sp/>Commit<sp/>the<sp/>data<sp/>stored<sp/>in<sp/>internal<sp/>write-buffer<sp/>to<sp/>RRAM.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal">}<sp/><ref refid="group__nrf__rramc__hal_1gadf80c0390d89b481d76b4f348b147cc7" kindref="member">nrf_rramc_task_t</ref>;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="70"><highlight class="comment">/**<sp/>@brief<sp/>RRAMC<sp/>events.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal">{</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__rramc__hal_1gga12273d5b8ed1f0e2c15d4eb6b2bb45ddadb6b5788f971630e4599e9e0ff366a36" kindref="member">NRF_RRAMC_EVENT_WOKENUP</ref><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_RRAMC_Type,<sp/>EVENTS_WOKENUP),<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>The<sp/>RRAM<sp/>is<sp/>woken<sp/>up<sp/>from<sp/>low<sp/>power<sp/>mode.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__rramc__hal_1gga12273d5b8ed1f0e2c15d4eb6b2bb45ddaa50022ae45e9aeccf043e9c25b0dc510" kindref="member">NRF_RRAMC_EVENT_READY</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_RRAMC_Type,<sp/>EVENTS_READY),<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>RRAMC<sp/>is<sp/>ready.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__rramc__hal_1gga12273d5b8ed1f0e2c15d4eb6b2bb45dda883352a74d9ebfc2a1868e7ffa080875" kindref="member">NRF_RRAMC_EVENT_READY_NEXT</ref><sp/><sp/><sp/>=<sp/>offsetof(NRF_RRAMC_Type,<sp/>EVENTS_READYNEXT),<sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Ready<sp/>to<sp/>accept<sp/>a<sp/>new<sp/>write<sp/>operation.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__rramc__hal_1gga12273d5b8ed1f0e2c15d4eb6b2bb45dda0ab2fc8a267c9cacfd4d4ef9a31fe968" kindref="member">NRF_RRAMC_EVENT_ERROR_ACCESS</ref><sp/>=<sp/>offsetof(NRF_RRAMC_Type,<sp/>EVENTS_ACCESSERROR),<sp/></highlight><highlight class="comment">///&lt;<sp/>RRAM<sp/>access<sp/>error.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal">}<sp/><ref refid="group__nrf__rramc__hal_1ga12273d5b8ed1f0e2c15d4eb6b2bb45dd" kindref="member">nrf_rramc_event_t</ref>;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="79"><highlight class="comment">/**<sp/>@brief<sp/>RRAMC<sp/>interrupts.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal">{</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__rramc__hal_1gga95ceba960c4e94ed070157dee96947cba41d959cedef3c33155d7cead48495930" kindref="member">NRF_RRAMC_INT_WOKENUP_MASK</ref><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>RRAMC_INTENSET_WOKENUP_Msk,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Interrupt<sp/>on<sp/>WOKENUP<sp/>event.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__rramc__hal_1gga95ceba960c4e94ed070157dee96947cba7778d5858a094b102b8ce0b6cfe8727a" kindref="member">NRF_RRAMC_INT_READY_MASK</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>RRAMC_INTENSET_READY_Msk,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Interrupt<sp/>on<sp/>READY<sp/>event.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__rramc__hal_1gga95ceba960c4e94ed070157dee96947cba5db7e69a7cf1ef91b9d58fcd0ef5ceac" kindref="member">NRF_RRAMC_INT_READY_NEXT_MASK</ref><sp/><sp/><sp/>=<sp/>RRAMC_INTENSET_READYNEXT_Msk,<sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Interrupt<sp/>on<sp/>READYNEXT<sp/>event.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__rramc__hal_1gga95ceba960c4e94ed070157dee96947cbaf884152357d3a1de7fa0c384c2f3979d" kindref="member">NRF_RRAMC_INT_ERROR_ACCESS_MASK</ref><sp/>=<sp/>RRAMC_INTENSET_ACCESSERROR_Msk,<sp/></highlight><highlight class="comment">///&lt;<sp/>Interrupt<sp/>on<sp/>ACCESSERROR<sp/>event.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__rramc__hal_1gga95ceba960c4e94ed070157dee96947cba2145b2f305d5ea9efa8c8f4a3e96a1f9" kindref="member">NRF_RRAMC_ALL_INTS_MASK</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><ref refid="group__nrf__rramc__hal_1gga95ceba960c4e94ed070157dee96947cba41d959cedef3c33155d7cead48495930" kindref="member">NRF_RRAMC_INT_WOKENUP_MASK</ref></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><ref refid="group__nrf__rramc__hal_1gga95ceba960c4e94ed070157dee96947cba7778d5858a094b102b8ce0b6cfe8727a" kindref="member">NRF_RRAMC_INT_READY_MASK</ref></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><ref refid="group__nrf__rramc__hal_1gga95ceba960c4e94ed070157dee96947cba5db7e69a7cf1ef91b9d58fcd0ef5ceac" kindref="member">NRF_RRAMC_INT_READY_NEXT_MASK</ref></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><ref refid="group__nrf__rramc__hal_1gga95ceba960c4e94ed070157dee96947cbaf884152357d3a1de7fa0c384c2f3979d" kindref="member">NRF_RRAMC_INT_ERROR_ACCESS_MASK</ref><sp/></highlight><highlight class="comment">///&lt;<sp/>All<sp/>RRAMC<sp/>interrupts.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal">}<sp/><ref refid="group__nrf__rramc__hal_1ga95ceba960c4e94ed070157dee96947cb" kindref="member">nrf_rramc_int_mask_t</ref>;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="92"><highlight class="comment">/**<sp/>@brief<sp/>RRAMC<sp/>configuration<sp/>structure.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93" refid="structnrf__rramc__config__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal">{</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>mode_write;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>True<sp/>if<sp/>write<sp/>mode<sp/>is<sp/>to<sp/>be<sp/>enabled,<sp/>false<sp/>otherwise.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>write_buff_size;<sp/></highlight><highlight class="comment">///&lt;<sp/>Write-buffer<sp/>size<sp/>in<sp/>case<sp/>set<sp/>to<sp/>0<sp/>buffering<sp/>is<sp/>disabled.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal">}<sp/><ref refid="structnrf__rramc__config__t" kindref="compound">nrf_rramc_config_t</ref>;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="99"><highlight class="comment">/**<sp/>@brief<sp/>Preload<sp/>timeout<sp/>value<sp/>for<sp/>waiting<sp/>for<sp/>a<sp/>next<sp/>write.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100" refid="structnrf__rramc__ready__next__timeout__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal">{</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/>uint16_t<sp/>value;<sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Preload<sp/>value<sp/>expressed<sp/>in<sp/>clock<sp/>cycles.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>enable;<sp/></highlight><highlight class="comment">///&lt;<sp/>True<sp/>if<sp/>write<sp/>to<sp/>the<sp/>RRAM<sp/>is<sp/>to<sp/>be<sp/>triggered<sp/>on<sp/>the<sp/>next<sp/>timeout,<sp/>false<sp/>otherwise.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal">}<sp/><ref refid="structnrf__rramc__ready__next__timeout__t" kindref="compound">nrf_rramc_ready_next_timeout_t</ref>;</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="106"><highlight class="comment">/**<sp/>@brief<sp/>Power<sp/>configuration.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107" refid="structnrf__rramc__power__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal">{</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/>uint16_t<sp/>access_timeout;<sp/></highlight><highlight class="comment">///&lt;<sp/>Access<sp/>timeout<sp/>used<sp/>for<sp/>going<sp/>into<sp/>standby<sp/>power<sp/>mode<sp/>or<sp/>remain<sp/>active<sp/>on<sp/>wake<sp/>up,<sp/>expressed<sp/>in<sp/>clock<sp/>cycles.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>abort_on_pof;<sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>True<sp/>if<sp/>the<sp/>current<sp/>RRAM<sp/>write<sp/>operation<sp/>is<sp/>to<sp/>be<sp/>aborted<sp/>on<sp/>the<sp/>power<sp/>failure,<sp/>false<sp/>otherwise.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal">}<sp/><ref refid="structnrf__rramc__power__t" kindref="compound">nrf_rramc_power_t</ref>;</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="113"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="114"><highlight class="comment"><sp/>*<sp/>@brief<sp/>RRAMC<sp/>region<sp/>permissions<sp/>mask.</highlight></codeline>
<codeline lineno="115"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="116"><highlight class="comment"><sp/>*<sp/>@note<sp/>When<sp/>bit<sp/>is<sp/>set,<sp/>the<sp/>selected<sp/>action<sp/>is<sp/>allowed.</highlight></codeline>
<codeline lineno="117"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal">{</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__rramc__hal_1gga579f0477b16e9f6076ed83824c85fd8da68e8704bfea43160bfdcfe1ae657f629" kindref="member">NRF_RRAMC_REGION_PERM_READ_MASK</ref><sp/><sp/><sp/><sp/>=<sp/>RRAMC_REGION_CONFIG_READ_Msk,<sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Read<sp/>access.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__rramc__hal_1gga579f0477b16e9f6076ed83824c85fd8dad4062c4e387289a6409beb2822c3c704" kindref="member">NRF_RRAMC_REGION_PERM_WRITE_MASK</ref><sp/><sp/><sp/>=<sp/>RRAMC_REGION_CONFIG_WRITE_Msk,<sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Write<sp/>access.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__rramc__hal_1gga579f0477b16e9f6076ed83824c85fd8dab7ef9b610bde97c4c05f40ab2b2d157f" kindref="member">NRF_RRAMC_REGION_PERM_EXECUTE_MASK</ref><sp/>=<sp/>RRAMC_REGION_CONFIG_EXECUTE_Msk,<sp/></highlight><highlight class="comment">///&lt;<sp/>Software<sp/>execute.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__rramc__hal_1gga579f0477b16e9f6076ed83824c85fd8da83b03b5c7fd2e0c12a15061f3b8cb297" kindref="member">NRF_RRAMC_REGION_PERM_SECURE_MASK</ref><sp/><sp/>=<sp/>RRAMC_REGION_CONFIG_SECURE_Msk,<sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Secure-only<sp/>access.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal">}<sp/><ref refid="group__nrf__rramc__hal_1ga579f0477b16e9f6076ed83824c85fd8d" kindref="member">nrf_rramc_region_perm_mask_t</ref>;</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="126"><highlight class="comment">/**<sp/>@brief<sp/>RRAMC<sp/>region<sp/>configuration.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127" refid="structnrf__rramc__region__config__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal">{</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>address;<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Start<sp/>address<sp/>of<sp/>the<sp/>region.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>permissions;<sp/></highlight><highlight class="comment">///&lt;<sp/>Permissions<sp/>created<sp/>using<sp/>@ref<sp/>nrf_rramc_region_perm_mask_t.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>writeonce;<sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>True<sp/>if<sp/>writes<sp/>to<sp/>the<sp/>region<sp/>are<sp/>to<sp/>be<sp/>applied<sp/>only<sp/>when<sp/>the<sp/>current<sp/>data<sp/>is<sp/>0xFFFFFFFF.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>lock;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>True<sp/>if<sp/>memory<sp/>belonging<sp/>to<sp/>given<sp/>region<sp/>is<sp/>to<sp/>be<sp/>read-only.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/>uint16_t<sp/>size_kb;<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Region<sp/>size<sp/>in<sp/>kBs.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal">}<sp/><ref refid="structnrf__rramc__region__config__t" kindref="compound">nrf_rramc_region_config_t</ref>;</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="136"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="137"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>activating<sp/>the<sp/>specified<sp/>RRAMC<sp/>task.</highlight></codeline>
<codeline lineno="138"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="139"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="140"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>task<sp/><sp/>Task<sp/>to<sp/>be<sp/>activated.</highlight></codeline>
<codeline lineno="141"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__rramc__hal_1ga489e48359c21e9aeab721abf8110252f" kindref="member">nrf_rramc_task_trigger</ref>(NRF_RRAMC_Type<sp/>*<sp/>p_reg,<sp/><ref refid="group__nrf__rramc__hal_1gadf80c0390d89b481d76b4f348b147cc7" kindref="member">nrf_rramc_task_t</ref><sp/>task);</highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="144"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="145"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>the<sp/>address<sp/>of<sp/>the<sp/>specified<sp/>RRAMC<sp/>task<sp/>register.</highlight></codeline>
<codeline lineno="146"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="147"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="148"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>task<sp/><sp/>RRAMC<sp/>task.</highlight></codeline>
<codeline lineno="149"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="150"><highlight class="comment"><sp/>*<sp/>@return<sp/>Address<sp/>of<sp/>the<sp/>specified<sp/>task<sp/>register.</highlight></codeline>
<codeline lineno="151"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__rramc__hal_1gabca757c359aa7a33adfcc6556f8c0fb0" kindref="member">nrf_rramc_task_address_get</ref>(NRF_RRAMC_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__rramc__hal_1gadf80c0390d89b481d76b4f348b147cc7" kindref="member">nrf_rramc_task_t</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>task);</highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="155"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="156"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>clearing<sp/>the<sp/>specified<sp/>RRAMC<sp/>event.</highlight></codeline>
<codeline lineno="157"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="158"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>peripheral<sp/>register<sp/>structure.</highlight></codeline>
<codeline lineno="159"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>event<sp/>Event<sp/>to<sp/>clear.</highlight></codeline>
<codeline lineno="160"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__rramc__hal_1ga6a5a2e22bbd6b8d5af4c27fa64f1a9d8" kindref="member">nrf_rramc_event_clear</ref>(NRF_RRAMC_Type<sp/>*<sp/>p_reg,<sp/><ref refid="group__nrf__rramc__hal_1ga12273d5b8ed1f0e2c15d4eb6b2bb45dd" kindref="member">nrf_rramc_event_t</ref><sp/>event);</highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="163"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="164"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>retrieving<sp/>the<sp/>state<sp/>of<sp/>the<sp/>RRAMC<sp/>event.</highlight></codeline>
<codeline lineno="165"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="166"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="167"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>event<sp/>Event<sp/>to<sp/>be<sp/>checked.</highlight></codeline>
<codeline lineno="168"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="169"><highlight class="comment"><sp/>*<sp/>@retval<sp/>true<sp/><sp/>The<sp/>event<sp/>has<sp/>been<sp/>generated.</highlight></codeline>
<codeline lineno="170"><highlight class="comment"><sp/>*<sp/>@retval<sp/>false<sp/>The<sp/>event<sp/>has<sp/>not<sp/>been<sp/>generated.</highlight></codeline>
<codeline lineno="171"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrf__rramc__hal_1ga1f57b36da161e1cf21c82aa3876efb77" kindref="member">nrf_rramc_event_check</ref>(NRF_RRAMC_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,<sp/><ref refid="group__nrf__rramc__hal_1ga12273d5b8ed1f0e2c15d4eb6b2bb45dd" kindref="member">nrf_rramc_event_t</ref><sp/>event);</highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="174"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="175"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>the<sp/>address<sp/>of<sp/>the<sp/>specified<sp/>RRAMC<sp/>event<sp/>register.</highlight></codeline>
<codeline lineno="176"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="177"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>peripheral<sp/>register<sp/>structure.</highlight></codeline>
<codeline lineno="178"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>event<sp/>Requested<sp/>event.</highlight></codeline>
<codeline lineno="179"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="180"><highlight class="comment"><sp/>*<sp/>@return<sp/>Address<sp/>of<sp/>the<sp/>specified<sp/>event<sp/>register.</highlight></codeline>
<codeline lineno="181"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__rramc__hal_1ga3eb129f51c08e58c4cc381768eb60dc5" kindref="member">nrf_rramc_event_address_get</ref>(NRF_RRAMC_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__rramc__hal_1ga12273d5b8ed1f0e2c15d4eb6b2bb45dd" kindref="member">nrf_rramc_event_t</ref><sp/><sp/><sp/><sp/><sp/><sp/>event);</highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="185"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="186"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>enabling<sp/>the<sp/>specified<sp/>interrupts.</highlight></codeline>
<codeline lineno="187"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="188"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>peripheral<sp/>register<sp/>structure.</highlight></codeline>
<codeline lineno="189"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>mask<sp/><sp/>Mask<sp/>of<sp/>interrupts<sp/>to<sp/>be<sp/>enabled.</highlight></codeline>
<codeline lineno="190"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Use<sp/>@ref<sp/>nrf_rramc_int_mask_t<sp/>values<sp/>for<sp/>bit<sp/>masking.</highlight></codeline>
<codeline lineno="191"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__rramc__hal_1ga3f7f69bc71658a8215e67943284662f7" kindref="member">nrf_rramc_int_enable</ref>(NRF_RRAMC_Type<sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>mask);</highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="194"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="195"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>disabling<sp/>the<sp/>specified<sp/>interrupts.</highlight></codeline>
<codeline lineno="196"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="197"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>peripheral<sp/>register<sp/>structure.</highlight></codeline>
<codeline lineno="198"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>mask<sp/><sp/>Mask<sp/>of<sp/>interrupts<sp/>to<sp/>be<sp/>disabled.</highlight></codeline>
<codeline lineno="199"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Use<sp/>@ref<sp/>nrf_rramc_int_mask_t<sp/>values<sp/>for<sp/>bit<sp/>masking.</highlight></codeline>
<codeline lineno="200"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__rramc__hal_1ga02dcfb8913610a45e1f11db523e921d8" kindref="member">nrf_rramc_int_disable</ref>(NRF_RRAMC_Type<sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>mask);</highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="203"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="204"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>checking<sp/>if<sp/>the<sp/>specified<sp/>interrupts<sp/>are<sp/>enabled.</highlight></codeline>
<codeline lineno="205"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="206"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="207"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>mask<sp/><sp/>Mask<sp/>of<sp/>interrupts<sp/>to<sp/>be<sp/>checked.</highlight></codeline>
<codeline lineno="208"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Use<sp/>@ref<sp/>nrf_rramc_int_mask_t<sp/>values<sp/>for<sp/>bit<sp/>masking.</highlight></codeline>
<codeline lineno="209"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="210"><highlight class="comment"><sp/>*<sp/>@return<sp/>Mask<sp/>of<sp/>enabled<sp/>interrupts.</highlight></codeline>
<codeline lineno="211"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__rramc__hal_1ga5c5b504644d49c61de9703237c6d25ee" kindref="member">nrf_rramc_int_enable_check</ref>(NRF_RRAMC_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>mask);</highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="214"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="215"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>the<sp/>state<sp/>of<sp/>pending<sp/>interrupts.</highlight></codeline>
<codeline lineno="216"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="217"><highlight class="comment"><sp/>*<sp/>@note<sp/>States<sp/>of<sp/>pending<sp/>interrupt<sp/>are<sp/>saved<sp/>as<sp/>a<sp/>bitmask.</highlight></codeline>
<codeline lineno="218"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>One<sp/>set<sp/>at<sp/>particular<sp/>position<sp/>means<sp/>that<sp/>interrupt<sp/>for<sp/>event<sp/>is<sp/>pending.</highlight></codeline>
<codeline lineno="219"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="220"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="221"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="222"><highlight class="comment"><sp/>*<sp/>@return<sp/>Bitmask<sp/>with<sp/>information<sp/>about<sp/>pending<sp/>interrupts.</highlight></codeline>
<codeline lineno="223"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Use<sp/>@ref<sp/>nrf_rramc_int_mask_t<sp/>values<sp/>for<sp/>bit<sp/>masking.</highlight></codeline>
<codeline lineno="224"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__rramc__hal_1gaf00e75dd9d1eb6aa3619259951965b24" kindref="member">nrf_rramc_int_pending_get</ref>(NRF_RRAMC_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(DPPI_PRESENT)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="228"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="229"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>the<sp/>subscribe<sp/>configuration<sp/>for<sp/>a<sp/>wakeup</highlight></codeline>
<codeline lineno="230"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RRAMC<sp/>task.</highlight></codeline>
<codeline lineno="231"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="232"><highlight class="comment"><sp/>*<sp/>@note<sp/>Not<sp/>every<sp/>task<sp/>has<sp/>its<sp/>corresponding<sp/>subscribe<sp/>register.</highlight></codeline>
<codeline lineno="233"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>Refer<sp/>to<sp/>the<sp/>Product<sp/>Specification<sp/>for<sp/>more<sp/>information.</highlight></codeline>
<codeline lineno="234"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="235"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="236"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>task<sp/><sp/><sp/><sp/>Task<sp/>for<sp/>which<sp/>to<sp/>set<sp/>the<sp/>configuration.</highlight></codeline>
<codeline lineno="237"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>channel<sp/>Channel<sp/>through<sp/>which<sp/>to<sp/>subscribe<sp/>events.</highlight></codeline>
<codeline lineno="238"><highlight class="comment"><sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__rramc__hal_1ga7ae9f5e904859c825e76cd71a1bdccf9" kindref="member">nrf_rramc_subscribe_set</ref>(NRF_RRAMC_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__rramc__hal_1gadf80c0390d89b481d76b4f348b147cc7" kindref="member">nrf_rramc_task_t</ref><sp/>task,</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>channel);</highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="243"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="244"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>clearing<sp/>the<sp/>subscribe<sp/>configuration<sp/>for<sp/>a<sp/>wakeup</highlight></codeline>
<codeline lineno="245"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RRAMC<sp/>task.</highlight></codeline>
<codeline lineno="246"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="247"><highlight class="comment"><sp/>*<sp/>@note<sp/>Not<sp/>every<sp/>task<sp/>has<sp/>its<sp/>corresponding<sp/>subscribe<sp/>register.</highlight></codeline>
<codeline lineno="248"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>Refer<sp/>to<sp/>the<sp/>Product<sp/>Specification<sp/>for<sp/>more<sp/>information.</highlight></codeline>
<codeline lineno="249"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="250"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="251"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>task<sp/><sp/>Task<sp/>for<sp/>which<sp/>to<sp/>clear<sp/>the<sp/>configuration.</highlight></codeline>
<codeline lineno="252"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__rramc__hal_1ga572ef364bcf9cb3953a045a5b58fb749" kindref="member">nrf_rramc_subscribe_clear</ref>(NRF_RRAMC_Type<sp/>*<sp/>p_reg,<sp/><ref refid="group__nrf__rramc__hal_1gadf80c0390d89b481d76b4f348b147cc7" kindref="member">nrf_rramc_task_t</ref><sp/>task);</highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="255"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="256"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>the<sp/>publish<sp/>configuration<sp/>for<sp/>a<sp/>wokenup</highlight></codeline>
<codeline lineno="257"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RRAMC<sp/>event.</highlight></codeline>
<codeline lineno="258"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="259"><highlight class="comment"><sp/>*<sp/>@note<sp/>Not<sp/>every<sp/>event<sp/>has<sp/>its<sp/>corresponding<sp/>publish<sp/>register.</highlight></codeline>
<codeline lineno="260"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>Refer<sp/>to<sp/>the<sp/>Product<sp/>Specification<sp/>for<sp/>more<sp/>information.</highlight></codeline>
<codeline lineno="261"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="262"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="263"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>event<sp/><sp/><sp/>Event<sp/>for<sp/>which<sp/>to<sp/>set<sp/>the<sp/>configuration.</highlight></codeline>
<codeline lineno="264"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>channel<sp/>Channel<sp/>through<sp/>which<sp/>to<sp/>publish<sp/>the<sp/>event.</highlight></codeline>
<codeline lineno="265"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__rramc__hal_1gacc11dfa1e7e8921b6e21a1bb9f7cf1d9" kindref="member">nrf_rramc_publish_set</ref>(NRF_RRAMC_Type<sp/>*<sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__rramc__hal_1ga12273d5b8ed1f0e2c15d4eb6b2bb45dd" kindref="member">nrf_rramc_event_t</ref><sp/>event,</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>channel);</highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="270"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="271"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>clearing<sp/>the<sp/>publish<sp/>configuration<sp/>for<sp/>a<sp/>wokenup</highlight></codeline>
<codeline lineno="272"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RRAMC<sp/>event.</highlight></codeline>
<codeline lineno="273"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="274"><highlight class="comment"><sp/>*<sp/>@note<sp/>Not<sp/>every<sp/>event<sp/>has<sp/>its<sp/>corresponding<sp/>publish<sp/>register.</highlight></codeline>
<codeline lineno="275"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>Refer<sp/>to<sp/>the<sp/>Product<sp/>Specification<sp/>for<sp/>more<sp/>information.</highlight></codeline>
<codeline lineno="276"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="277"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="278"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>event<sp/>Event<sp/>for<sp/>which<sp/>to<sp/>clear<sp/>the<sp/>configuration.</highlight></codeline>
<codeline lineno="279"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__rramc__hal_1ga2aca81a5db0d6d818307cd50f825bbf1" kindref="member">nrf_rramc_publish_clear</ref>(NRF_RRAMC_Type<sp/>*<sp/>p_reg,<sp/><ref refid="group__nrf__rramc__hal_1ga12273d5b8ed1f0e2c15d4eb6b2bb45dd" kindref="member">nrf_rramc_event_t</ref><sp/>event);</highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>defined(DPPI_PRESENT)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="284"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="285"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>checking<sp/>current<sp/>RRAMC<sp/>operation<sp/>status.</highlight></codeline>
<codeline lineno="286"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="287"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="288"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="289"><highlight class="comment"><sp/>*<sp/>@retval<sp/>true<sp/><sp/>Current<sp/>operation<sp/>is<sp/>completed,<sp/>and<sp/>RRAMC<sp/>is<sp/>ready.</highlight></codeline>
<codeline lineno="290"><highlight class="comment"><sp/>*<sp/>@retval<sp/>false<sp/>RRAMC<sp/>is<sp/>busy.</highlight></codeline>
<codeline lineno="291"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrf__rramc__hal_1gae3dd53c1f48d343e31268ab9fe3102d5" kindref="member">nrf_rramc_ready_check</ref>(NRF_RRAMC_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="294"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="295"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>checking<sp/>whether<sp/>RRAMC<sp/>is<sp/>ready<sp/>to<sp/>accept<sp/>a<sp/>new<sp/>write<sp/>operation.</highlight></codeline>
<codeline lineno="296"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="297"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="298"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="299"><highlight class="comment"><sp/>*<sp/>@retval<sp/>true<sp/><sp/>RRAMC<sp/>is<sp/>ready<sp/>to<sp/>accept<sp/>a<sp/>new<sp/>write<sp/>operation.</highlight></codeline>
<codeline lineno="300"><highlight class="comment"><sp/>*<sp/>@retval<sp/>false<sp/>RRAMC<sp/>cannot<sp/>accept<sp/>any<sp/>write<sp/>operation<sp/>now.</highlight></codeline>
<codeline lineno="301"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrf__rramc__hal_1ga3334d9ee37c8e0f156f1cddc9aa8f438" kindref="member">nrf_rramc_write_ready_check</ref>(NRF_RRAMC_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="304"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="305"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Fuction<sp/>for<sp/>checking<sp/>the<sp/>address<sp/>of<sp/>the<sp/>first<sp/>access<sp/>error.</highlight></codeline>
<codeline lineno="306"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="307"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="308"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="309"><highlight class="comment"><sp/>*<sp/>@return<sp/>Access<sp/>error<sp/>address.</highlight></codeline>
<codeline lineno="310"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__rramc__hal_1ga7b3734fcb2edf3e513d48328718fe5fe" kindref="member">nrf_rramc_error_access_addr_get</ref>(NRF_RRAMC_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="313"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="314"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>checking<sp/>whether<sp/>the<sp/>internal<sp/>write-buffer<sp/>has<sp/>been<sp/>committed<sp/>to<sp/>RRAM<sp/>and<sp/>is<sp/>now<sp/>empty.</highlight></codeline>
<codeline lineno="315"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="316"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="317"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="318"><highlight class="comment"><sp/>*<sp/>@retval<sp/>true<sp/><sp/>The<sp/>internal<sp/>write-buffer<sp/>is<sp/>empty<sp/>and<sp/>has<sp/>no<sp/>content<sp/>that<sp/>needs<sp/>to<sp/>be<sp/>commited.</highlight></codeline>
<codeline lineno="319"><highlight class="comment"><sp/>*<sp/>@retval<sp/>false<sp/>The<sp/>internal<sp/>write-buffer<sp/>has<sp/>data<sp/>that<sp/>needs<sp/>to<sp/>be<sp/>committed.</highlight></codeline>
<codeline lineno="320"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrf__rramc__hal_1gafad2c8c47ca125eec3724f54c62b891f" kindref="member">nrf_rramc_empty_buffer_check</ref>(NRF_RRAMC_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="322"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="323"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="324"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>the<sp/>RRAMC<sp/>peripheral<sp/>configuration.</highlight></codeline>
<codeline lineno="325"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="326"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/><sp/>p_reg<sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="327"><highlight class="comment"><sp/>*<sp/>@param[out]<sp/>p_config<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>to<sp/>be<sp/>filled<sp/>with<sp/>RRAMC<sp/>configuration<sp/>data.</highlight></codeline>
<codeline lineno="328"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__rramc__hal_1ga600344f5d63d15447e2a49bd1bc87b91" kindref="member">nrf_rramc_config_get</ref>(NRF_RRAMC_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structnrf__rramc__config__t" kindref="compound">nrf_rramc_config_t</ref><sp/>*<sp/><sp/><sp/>p_config);</highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="332"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="333"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>the<sp/>RRAMC<sp/>peripheral<sp/>configuration.</highlight></codeline>
<codeline lineno="334"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="335"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="336"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_config<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>with<sp/>configuration<sp/>to<sp/>be<sp/>set.</highlight></codeline>
<codeline lineno="337"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__rramc__hal_1ga4aa89554145d84b6df4178a36bc46e99" kindref="member">nrf_rramc_config_set</ref>(NRF_RRAMC_Type<sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structnrf__rramc__config__t" kindref="compound">nrf_rramc_config_t</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_config);</highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="341"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="342"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>preload<sp/>timeout<sp/>value<sp/>for<sp/>waiting<sp/>for<sp/>a<sp/>next<sp/>write.</highlight></codeline>
<codeline lineno="343"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="344"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/><sp/>p_reg<sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="345"><highlight class="comment"><sp/>*<sp/>@param[out]<sp/>p_config<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>to<sp/>be<sp/>filled<sp/>with<sp/>information<sp/>about</highlight></codeline>
<codeline lineno="346"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>preload<sp/>timeout<sp/>value.</highlight></codeline>
<codeline lineno="347"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__rramc__hal_1ga04efa9e62632c8b8dff3d62382d448d6" kindref="member">nrf_rramc_ready_next_timeout_get</ref>(NRF_RRAMC_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structnrf__rramc__ready__next__timeout__t" kindref="compound">nrf_rramc_ready_next_timeout_t</ref><sp/>*<sp/>p_config);</highlight></codeline>
<codeline lineno="350"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="351"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="352"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>preload<sp/>timeout<sp/>value<sp/>for<sp/>waiting<sp/>for<sp/>a<sp/>next<sp/>write.</highlight></codeline>
<codeline lineno="353"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="354"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="355"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_config<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>filled<sp/>with<sp/>information<sp/>about$<sp/>preload</highlight></codeline>
<codeline lineno="356"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>timeout<sp/>value.</highlight></codeline>
<codeline lineno="357"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal">NRF_STATIC_INLINE</highlight></codeline>
<codeline lineno="359"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__rramc__hal_1ga66be625abc1ee4292bd40e299dbe4ac7" kindref="member">nrf_rramc_ready_next_timeout_set</ref>(NRF_RRAMC_Type<sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structnrf__rramc__ready__next__timeout__t" kindref="compound">nrf_rramc_ready_next_timeout_t</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_config);</highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="362"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="363"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>the<sp/>RRAMC<sp/>power<sp/>configuration.</highlight></codeline>
<codeline lineno="364"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="365"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/><sp/>p_reg<sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="366"><highlight class="comment"><sp/>*<sp/>@param[out]<sp/>p_config<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>to<sp/>be<sp/>filled<sp/>with<sp/>information<sp/>about</highlight></codeline>
<codeline lineno="367"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>power<sp/>configuration.</highlight></codeline>
<codeline lineno="368"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__rramc__hal_1ga0d04aaa18a1463ca07cdc2292a7d38f2" kindref="member">nrf_rramc_power_config_get</ref>(NRF_RRAMC_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structnrf__rramc__power__t" kindref="compound">nrf_rramc_power_t</ref><sp/>*<sp/><sp/><sp/><sp/>p_config);</highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="372"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="373"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>the<sp/>RRAMC<sp/>power<sp/>configuration.</highlight></codeline>
<codeline lineno="374"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="375"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="376"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_config<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>filled<sp/>with<sp/>information<sp/>about<sp/>power<sp/>configuration.</highlight></codeline>
<codeline lineno="377"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__rramc__hal_1ga5aa5b43d22070041f92b7396758ed8a9" kindref="member">nrf_rramc_power_config_set</ref>(NRF_RRAMC_Type<sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structnrf__rramc__power__t" kindref="compound">nrf_rramc_power_t</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_config);</highlight></codeline>
<codeline lineno="380"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="381"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="382"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>checking<sp/>if<sp/>the<sp/>erasing<sp/>operation<sp/>of<sp/>the<sp/>whole<sp/>RRAM<sp/>main<sp/>block<sp/>has<sp/>been<sp/>started.</highlight></codeline>
<codeline lineno="383"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="384"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="385"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="386"><highlight class="comment"><sp/>*<sp/>@retval<sp/>true<sp/><sp/>Erase<sp/>of<sp/>chip<sp/>started.</highlight></codeline>
<codeline lineno="387"><highlight class="comment"><sp/>*<sp/>@retval<sp/>false<sp/>No<sp/>operation.</highlight></codeline>
<codeline lineno="388"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="389"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrf__rramc__hal_1gaad0e37d917d80c370ffbc37d22dfe6c8" kindref="member">nrf_rramc_erase_all_check</ref>(NRF_RRAMC_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="390"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="391"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="392"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>erasing<sp/>whole<sp/>RRAM<sp/>main<sp/>block,<sp/>that<sp/>includes<sp/>the<sp/>SICR<sp/>and<sp/>the<sp/>UICR.</highlight></codeline>
<codeline lineno="393"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="394"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="395"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="396"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__rramc__hal_1gabd91f162fa4e8bb5800e5ad46a10ac2d" kindref="member">nrf_rramc_erase_all_set</ref>(NRF_RRAMC_Type<sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="397"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="398"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="399"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>the<sp/>configuration<sp/>of<sp/>the<sp/>specified<sp/>RRAMC<sp/>region.</highlight></codeline>
<codeline lineno="400"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="401"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="402"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>region<sp/><sp/><sp/>Region<sp/>number.</highlight></codeline>
<codeline lineno="403"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_config<sp/>Pointer<sp/>to<sp/>the<sp/>configuration<sp/>structure.</highlight></codeline>
<codeline lineno="404"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__rramc__hal_1ga0a8c03c1bbee5321883fc348fb246f4a" kindref="member">nrf_rramc_region_config_set</ref>(NRF_RRAMC_Type<sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>region,</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structnrf__rramc__region__config__t" kindref="compound">nrf_rramc_region_config_t</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_config);</highlight></codeline>
<codeline lineno="408"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="409"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="410"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>the<sp/>configuration<sp/>of<sp/>the<sp/>specified<sp/>RRAMC<sp/>region.</highlight></codeline>
<codeline lineno="411"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="412"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="413"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>region<sp/><sp/><sp/>Region<sp/>number.</highlight></codeline>
<codeline lineno="414"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_config<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>to<sp/>be<sp/>filled<sp/>with<sp/>RRAMC<sp/>region<sp/>settings.</highlight></codeline>
<codeline lineno="415"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="416"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__rramc__hal_1ga203cf7cebc41d47f7eb2c416b238e738" kindref="member">nrf_rramc_region_config_get</ref>(NRF_RRAMC_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>region,</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structnrf__rramc__region__config__t" kindref="compound">nrf_rramc_region_config_t</ref><sp/>*<sp/>p_config);</highlight></codeline>
<codeline lineno="419"><highlight class="normal"></highlight></codeline>
<codeline lineno="420"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>NRF_DECLARE_ONLY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__rramc__hal_1ga489e48359c21e9aeab721abf8110252f" kindref="member">nrf_rramc_task_trigger</ref>(NRF_RRAMC_Type<sp/>*<sp/>p_reg,<sp/><ref refid="group__nrf__rramc__hal_1gadf80c0390d89b481d76b4f348b147cc7" kindref="member">nrf_rramc_task_t</ref><sp/>task)</highlight></codeline>
<codeline lineno="423"><highlight class="normal">{</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/>*((</highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint32_t<sp/>*)((uint8_t<sp/>*)p_reg<sp/>+<sp/>(uint32_t)task))<sp/>=<sp/>0x1UL;</highlight></codeline>
<codeline lineno="425"><highlight class="normal">}</highlight></codeline>
<codeline lineno="426"><highlight class="normal"></highlight></codeline>
<codeline lineno="427"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__rramc__hal_1gabca757c359aa7a33adfcc6556f8c0fb0" kindref="member">nrf_rramc_task_address_get</ref>(NRF_RRAMC_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__rramc__hal_1gadf80c0390d89b481d76b4f348b147cc7" kindref="member">nrf_rramc_task_t</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>task)</highlight></codeline>
<codeline lineno="429"><highlight class="normal">{</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((uint32_t)p_reg<sp/>+<sp/>(uint32_t)task);</highlight></codeline>
<codeline lineno="431"><highlight class="normal">}</highlight></codeline>
<codeline lineno="432"><highlight class="normal"></highlight></codeline>
<codeline lineno="433"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__rramc__hal_1ga6a5a2e22bbd6b8d5af4c27fa64f1a9d8" kindref="member">nrf_rramc_event_clear</ref>(NRF_RRAMC_Type<sp/>*<sp/>p_reg,<sp/><ref refid="group__nrf__rramc__hal_1ga12273d5b8ed1f0e2c15d4eb6b2bb45dd" kindref="member">nrf_rramc_event_t</ref><sp/>event)</highlight></codeline>
<codeline lineno="434"><highlight class="normal">{</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/>*((</highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint32_t<sp/>*)((uint8_t<sp/>*)p_reg<sp/>+<sp/>(uint32_t)event))<sp/>=<sp/>0x0UL;</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/>nrf_event_readback((uint8_t<sp/>*)p_reg<sp/>+<sp/>(uint32_t)event);</highlight></codeline>
<codeline lineno="437"><highlight class="normal">}</highlight></codeline>
<codeline lineno="438"><highlight class="normal"></highlight></codeline>
<codeline lineno="439"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrf__rramc__hal_1ga1f57b36da161e1cf21c82aa3876efb77" kindref="member">nrf_rramc_event_check</ref>(NRF_RRAMC_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,<sp/><ref refid="group__nrf__rramc__hal_1ga12273d5b8ed1f0e2c15d4eb6b2bb45dd" kindref="member">nrf_rramc_event_t</ref><sp/>event)</highlight></codeline>
<codeline lineno="440"><highlight class="normal">{</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>nrf_event_check(p_reg,<sp/>event);</highlight></codeline>
<codeline lineno="442"><highlight class="normal">}</highlight></codeline>
<codeline lineno="443"><highlight class="normal"></highlight></codeline>
<codeline lineno="444"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__rramc__hal_1ga3eb129f51c08e58c4cc381768eb60dc5" kindref="member">nrf_rramc_event_address_get</ref>(NRF_RRAMC_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__rramc__hal_1ga12273d5b8ed1f0e2c15d4eb6b2bb45dd" kindref="member">nrf_rramc_event_t</ref><sp/><sp/><sp/><sp/><sp/><sp/>event)</highlight></codeline>
<codeline lineno="446"><highlight class="normal">{</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((uint32_t)p_reg<sp/>+<sp/>(uint32_t)event);</highlight></codeline>
<codeline lineno="448"><highlight class="normal">}</highlight></codeline>
<codeline lineno="449"><highlight class="normal"></highlight></codeline>
<codeline lineno="450"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__rramc__hal_1ga3f7f69bc71658a8215e67943284662f7" kindref="member">nrf_rramc_int_enable</ref>(NRF_RRAMC_Type<sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>mask)</highlight></codeline>
<codeline lineno="451"><highlight class="normal">{</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;INTENSET<sp/>=<sp/>mask;</highlight></codeline>
<codeline lineno="453"><highlight class="normal">}</highlight></codeline>
<codeline lineno="454"><highlight class="normal"></highlight></codeline>
<codeline lineno="455"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__rramc__hal_1ga02dcfb8913610a45e1f11db523e921d8" kindref="member">nrf_rramc_int_disable</ref>(NRF_RRAMC_Type<sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>mask)</highlight></codeline>
<codeline lineno="456"><highlight class="normal">{</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;INTENCLR<sp/>=<sp/>mask;</highlight></codeline>
<codeline lineno="458"><highlight class="normal">}</highlight></codeline>
<codeline lineno="459"><highlight class="normal"></highlight></codeline>
<codeline lineno="460"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__rramc__hal_1ga5c5b504644d49c61de9703237c6d25ee" kindref="member">nrf_rramc_int_enable_check</ref>(NRF_RRAMC_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mask)</highlight></codeline>
<codeline lineno="462"><highlight class="normal">{</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p_reg-&gt;INTENSET<sp/>&amp;<sp/>mask;</highlight></codeline>
<codeline lineno="464"><highlight class="normal">}</highlight></codeline>
<codeline lineno="465"><highlight class="normal"></highlight></codeline>
<codeline lineno="466"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__rramc__hal_1gaf00e75dd9d1eb6aa3619259951965b24" kindref="member">nrf_rramc_int_pending_get</ref>(NRF_RRAMC_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="467"><highlight class="normal">{</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p_reg-&gt;INTPEND;</highlight></codeline>
<codeline lineno="469"><highlight class="normal">}</highlight></codeline>
<codeline lineno="470"><highlight class="normal"></highlight></codeline>
<codeline lineno="471"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(DPPI_PRESENT)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="472"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__rramc__hal_1ga7ae9f5e904859c825e76cd71a1bdccf9" kindref="member">nrf_rramc_subscribe_set</ref>(NRF_RRAMC_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__rramc__hal_1gadf80c0390d89b481d76b4f348b147cc7" kindref="member">nrf_rramc_task_t</ref><sp/>task,</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>channel)</highlight></codeline>
<codeline lineno="475"><highlight class="normal">{</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/>*((</highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint32_t<sp/>*)<sp/>((uint8_t<sp/>*)<sp/>p_reg<sp/>+<sp/>(uint32_t)<sp/>task<sp/>+<sp/>0x80uL))<sp/>=</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)channel<sp/>|<sp/>NRF_SUBSCRIBE_PUBLISH_ENABLE);</highlight></codeline>
<codeline lineno="478"><highlight class="normal">}</highlight></codeline>
<codeline lineno="479"><highlight class="normal"></highlight></codeline>
<codeline lineno="480"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__rramc__hal_1ga572ef364bcf9cb3953a045a5b58fb749" kindref="member">nrf_rramc_subscribe_clear</ref>(NRF_RRAMC_Type<sp/>*<sp/>p_reg,<sp/><ref refid="group__nrf__rramc__hal_1gadf80c0390d89b481d76b4f348b147cc7" kindref="member">nrf_rramc_task_t</ref><sp/>task)</highlight></codeline>
<codeline lineno="481"><highlight class="normal">{</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/>*((</highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint32_t<sp/>*)<sp/>((uint8_t<sp/>*)<sp/>p_reg<sp/>+<sp/>(uint32_t)<sp/>task<sp/>+<sp/>0x80uL))<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="483"><highlight class="normal">}</highlight></codeline>
<codeline lineno="484"><highlight class="normal"></highlight></codeline>
<codeline lineno="485"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__rramc__hal_1gacc11dfa1e7e8921b6e21a1bb9f7cf1d9" kindref="member">nrf_rramc_publish_set</ref>(NRF_RRAMC_Type<sp/>*<sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__rramc__hal_1ga12273d5b8ed1f0e2c15d4eb6b2bb45dd" kindref="member">nrf_rramc_event_t</ref><sp/>event,</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>channel)</highlight></codeline>
<codeline lineno="488"><highlight class="normal">{</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/>*((</highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint32_t<sp/>*)<sp/>((uint8_t<sp/>*)<sp/>p_reg<sp/>+<sp/>(uint32_t)<sp/>event<sp/>+<sp/>0x80uL))<sp/>=</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)channel<sp/>|<sp/>NRF_SUBSCRIBE_PUBLISH_ENABLE);</highlight></codeline>
<codeline lineno="491"><highlight class="normal">}</highlight></codeline>
<codeline lineno="492"><highlight class="normal"></highlight></codeline>
<codeline lineno="493"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__rramc__hal_1ga2aca81a5db0d6d818307cd50f825bbf1" kindref="member">nrf_rramc_publish_clear</ref>(NRF_RRAMC_Type<sp/>*<sp/>p_reg,<sp/><ref refid="group__nrf__rramc__hal_1ga12273d5b8ed1f0e2c15d4eb6b2bb45dd" kindref="member">nrf_rramc_event_t</ref><sp/>event)</highlight></codeline>
<codeline lineno="494"><highlight class="normal">{</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/>*((</highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint32_t<sp/>*)<sp/>((uint8_t<sp/>*)<sp/>p_reg<sp/>+<sp/>(uint32_t)<sp/>event<sp/>+<sp/>0x80uL))<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="496"><highlight class="normal">}</highlight></codeline>
<codeline lineno="497"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>defined(DPPI_PRESENT)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="498"><highlight class="normal"></highlight></codeline>
<codeline lineno="499"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrf__rramc__hal_1gae3dd53c1f48d343e31268ab9fe3102d5" kindref="member">nrf_rramc_ready_check</ref>(NRF_RRAMC_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="500"><highlight class="normal">{</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((p_reg-&gt;READY<sp/>&amp;<sp/>RRAMC_READY_READY_Msk)<sp/>&gt;&gt;</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RRAMC_READY_READY_Pos)<sp/>==</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RRAMC_READY_READY_Ready;</highlight></codeline>
<codeline lineno="504"><highlight class="normal">}</highlight></codeline>
<codeline lineno="505"><highlight class="normal"></highlight></codeline>
<codeline lineno="506"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrf__rramc__hal_1ga3334d9ee37c8e0f156f1cddc9aa8f438" kindref="member">nrf_rramc_write_ready_check</ref>(NRF_RRAMC_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="507"><highlight class="normal">{</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((p_reg-&gt;READYNEXT<sp/>&amp;<sp/>RRAMC_READYNEXT_READYNEXT_Msk)<sp/>&gt;&gt;</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RRAMC_READYNEXT_READYNEXT_Pos)<sp/>==</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RRAMC_READYNEXT_READYNEXT_Ready;</highlight></codeline>
<codeline lineno="511"><highlight class="normal">}</highlight></codeline>
<codeline lineno="512"><highlight class="normal"></highlight></codeline>
<codeline lineno="513"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__rramc__hal_1ga7b3734fcb2edf3e513d48328718fe5fe" kindref="member">nrf_rramc_error_access_addr_get</ref>(NRF_RRAMC_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="514"><highlight class="normal">{</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(uint32_t)p_reg-&gt;ACCESSERRORADDR;</highlight></codeline>
<codeline lineno="516"><highlight class="normal">}</highlight></codeline>
<codeline lineno="517"><highlight class="normal"></highlight></codeline>
<codeline lineno="518"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrf__rramc__hal_1gafad2c8c47ca125eec3724f54c62b891f" kindref="member">nrf_rramc_empty_buffer_check</ref>(NRF_RRAMC_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="519"><highlight class="normal">{</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((p_reg-&gt;BUFSTATUS.WRITEBUFEMPTY<sp/>&amp;<sp/>RRAMC_BUFSTATUS_WRITEBUFEMPTY_EMPTY_Msk)<sp/>&gt;&gt;</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RRAMC_BUFSTATUS_WRITEBUFEMPTY_EMPTY_Pos)<sp/>==</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RRAMC_BUFSTATUS_WRITEBUFEMPTY_EMPTY_Empty;</highlight></codeline>
<codeline lineno="523"><highlight class="normal">}</highlight></codeline>
<codeline lineno="524"><highlight class="normal"></highlight></codeline>
<codeline lineno="525"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__rramc__hal_1ga600344f5d63d15447e2a49bd1bc87b91" kindref="member">nrf_rramc_config_get</ref>(NRF_RRAMC_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structnrf__rramc__config__t" kindref="compound">nrf_rramc_config_t</ref><sp/>*<sp/><sp/><sp/>p_config)</highlight></codeline>
<codeline lineno="527"><highlight class="normal">{</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/>p_config-&gt;<ref refid="structnrf__rramc__config__t_1a1a787a1227f6582185a26877cee0fa43" kindref="member">mode_write</ref><sp/>=<sp/>(bool)((p_reg-&gt;CONFIG<sp/>&amp;<sp/>RRAMC_CONFIG_WEN_Msk)<sp/>&gt;&gt;</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RRAMC_CONFIG_WEN_Pos);</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/>p_config-&gt;<ref refid="structnrf__rramc__config__t_1a669375a5f82467b7b987f7fea8630d16" kindref="member">write_buff_size</ref><sp/>=<sp/>(uint32_t)((p_reg-&gt;CONFIG<sp/>&amp;<sp/>RRAMC_CONFIG_WRITEBUFSIZE_Msk)<sp/>&gt;&gt;</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RRAMC_CONFIG_WRITEBUFSIZE_Pos);</highlight></codeline>
<codeline lineno="532"><highlight class="normal">}</highlight></codeline>
<codeline lineno="533"><highlight class="normal"></highlight></codeline>
<codeline lineno="534"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__rramc__hal_1ga4aa89554145d84b6df4178a36bc46e99" kindref="member">nrf_rramc_config_set</ref>(NRF_RRAMC_Type<sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structnrf__rramc__config__t" kindref="compound">nrf_rramc_config_t</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_config)</highlight></codeline>
<codeline lineno="536"><highlight class="normal">{</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__glue_1ga9698a3f6b6bea455d2b54a79e514ee36" kindref="member">NRFX_ASSERT</ref>(p_config-&gt;<ref refid="structnrf__rramc__config__t_1a669375a5f82467b7b987f7fea8630d16" kindref="member">write_buff_size</ref><sp/>&lt;=<sp/><ref refid="group__nrf__rramc__hal_1ga3c0bbef9aa4ef0796aef6851bc79fe74" kindref="member">NRF_RRAMC_CONFIG_WRITE_BUFF_SIZE_MAX</ref>);</highlight></codeline>
<codeline lineno="538"><highlight class="normal"></highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;CONFIG<sp/>=<sp/>((uint32_t)p_config-&gt;<ref refid="structnrf__rramc__config__t_1a1a787a1227f6582185a26877cee0fa43" kindref="member">mode_write</ref><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>RRAMC_CONFIG_WEN_Pos)<sp/>|</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)p_config-&gt;<ref refid="structnrf__rramc__config__t_1a669375a5f82467b7b987f7fea8630d16" kindref="member">write_buff_size</ref><sp/>&lt;&lt;<sp/>RRAMC_CONFIG_WRITEBUFSIZE_Pos);</highlight></codeline>
<codeline lineno="541"><highlight class="normal">}</highlight></codeline>
<codeline lineno="542"><highlight class="normal"></highlight></codeline>
<codeline lineno="543"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__rramc__hal_1ga04efa9e62632c8b8dff3d62382d448d6" kindref="member">nrf_rramc_ready_next_timeout_get</ref>(NRF_RRAMC_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structnrf__rramc__ready__next__timeout__t" kindref="compound">nrf_rramc_ready_next_timeout_t</ref><sp/>*<sp/>p_config)</highlight></codeline>
<codeline lineno="545"><highlight class="normal">{</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/>p_config-&gt;<ref refid="structnrf__rramc__ready__next__timeout__t_1aff439ff3b8b8bfd8a7e92914f0c69319" kindref="member">value</ref><sp/>=<sp/>(uint16_t)((p_reg-&gt;READYNEXTTIMEOUT<sp/>&amp;<sp/>RRAMC_READYNEXTTIMEOUT_VALUE_Msk)<sp/>&gt;&gt;</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RRAMC_READYNEXTTIMEOUT_VALUE_Pos);</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/>p_config-&gt;<ref refid="structnrf__rramc__ready__next__timeout__t_1ae0ded0b5ce37235c631dcb40b1808fa1" kindref="member">enable</ref><sp/>=<sp/>((p_reg-&gt;READYNEXTTIMEOUT<sp/>&amp;<sp/>RRAMC_READYNEXTTIMEOUT_EN_Msk)</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;<sp/>RRAMC_READYNEXTTIMEOUT_EN_Pos)<sp/>==<sp/>RRAMC_READYNEXTTIMEOUT_EN_Enable;</highlight></codeline>
<codeline lineno="550"><highlight class="normal">}</highlight></codeline>
<codeline lineno="551"><highlight class="normal"></highlight></codeline>
<codeline lineno="552"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="553"><highlight class="normal"><ref refid="group__nrf__rramc__hal_1ga66be625abc1ee4292bd40e299dbe4ac7" kindref="member">nrf_rramc_ready_next_timeout_set</ref>(NRF_RRAMC_Type<sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structnrf__rramc__ready__next__timeout__t" kindref="compound">nrf_rramc_ready_next_timeout_t</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_config)</highlight></codeline>
<codeline lineno="555"><highlight class="normal">{</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__glue_1ga9698a3f6b6bea455d2b54a79e514ee36" kindref="member">NRFX_ASSERT</ref>(p_config-&gt;<ref refid="structnrf__rramc__ready__next__timeout__t_1aff439ff3b8b8bfd8a7e92914f0c69319" kindref="member">value</ref><sp/>&lt;=<sp/><ref refid="group__nrf__rramc__hal_1ga81f6fef9e0d33a32f16b7ff86bfacdd2" kindref="member">NRF_RRAMC_READYNEXTTIMEOUT_MAX</ref>);</highlight></codeline>
<codeline lineno="557"><highlight class="normal"></highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;READYNEXTTIMEOUT<sp/>=<sp/>((uint32_t)p_config-&gt;<ref refid="structnrf__rramc__ready__next__timeout__t_1aff439ff3b8b8bfd8a7e92914f0c69319" kindref="member">value</ref><sp/>&lt;&lt;<sp/>RRAMC_READYNEXTTIMEOUT_VALUE_Pos)<sp/>|</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((p_config-&gt;<ref refid="structnrf__rramc__ready__next__timeout__t_1ae0ded0b5ce37235c631dcb40b1808fa1" kindref="member">enable</ref><sp/>?<sp/>RRAMC_READYNEXTTIMEOUT_EN_Enable<sp/>:</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RRAMC_READYNEXTTIMEOUT_EN_Disable)</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>RRAMC_READYNEXTTIMEOUT_EN_Pos);</highlight></codeline>
<codeline lineno="562"><highlight class="normal">}</highlight></codeline>
<codeline lineno="563"><highlight class="normal"></highlight></codeline>
<codeline lineno="564"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__rramc__hal_1ga0d04aaa18a1463ca07cdc2292a7d38f2" kindref="member">nrf_rramc_power_config_get</ref>(NRF_RRAMC_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structnrf__rramc__power__t" kindref="compound">nrf_rramc_power_t</ref><sp/>*<sp/><sp/><sp/><sp/>p_config)</highlight></codeline>
<codeline lineno="566"><highlight class="normal">{</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/>p_config-&gt;<ref refid="structnrf__rramc__power__t_1af72e068a33703bac6391f965bf9fb557" kindref="member">access_timeout</ref><sp/>=<sp/>(uint16_t)((p_reg-&gt;POWER.CONFIG<sp/>&amp;</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RRAMC_POWER_CONFIG_ACCESSTIMEOUT_Msk)<sp/>&gt;&gt;</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RRAMC_POWER_CONFIG_ACCESSTIMEOUT_Pos);</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/>p_config-&gt;<ref refid="structnrf__rramc__power__t_1af03b0b8afa26add1661c65e3c114d38b" kindref="member">abort_on_pof</ref><sp/>=<sp/>((p_reg-&gt;POWER.CONFIG<sp/>&amp;</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RRAMC_POWER_CONFIG_POF_Msk)<sp/>&gt;&gt;</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RRAMC_POWER_CONFIG_POF_Pos)<sp/>==</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RRAMC_POWER_CONFIG_POF_Abort;</highlight></codeline>
<codeline lineno="574"><highlight class="normal">}</highlight></codeline>
<codeline lineno="575"><highlight class="normal"></highlight></codeline>
<codeline lineno="576"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__rramc__hal_1ga5aa5b43d22070041f92b7396758ed8a9" kindref="member">nrf_rramc_power_config_set</ref>(NRF_RRAMC_Type<sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structnrf__rramc__power__t" kindref="compound">nrf_rramc_power_t</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_config)</highlight></codeline>
<codeline lineno="578"><highlight class="normal">{</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;POWER.CONFIG<sp/>=</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)p_config-&gt;<ref refid="structnrf__rramc__power__t_1af72e068a33703bac6391f965bf9fb557" kindref="member">access_timeout</ref><sp/>&lt;&lt;<sp/>RRAMC_POWER_CONFIG_ACCESSTIMEOUT_Pos)<sp/>|</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)p_config-&gt;<ref refid="structnrf__rramc__power__t_1af03b0b8afa26add1661c65e3c114d38b" kindref="member">abort_on_pof</ref><sp/><sp/><sp/>&lt;&lt;<sp/>RRAMC_POWER_CONFIG_POF_Pos);</highlight></codeline>
<codeline lineno="582"><highlight class="normal">}</highlight></codeline>
<codeline lineno="583"><highlight class="normal"></highlight></codeline>
<codeline lineno="584"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrf__rramc__hal_1gaad0e37d917d80c370ffbc37d22dfe6c8" kindref="member">nrf_rramc_erase_all_check</ref>(NRF_RRAMC_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="585"><highlight class="normal">{</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((p_reg-&gt;ERASE.ERASEALL<sp/>&amp;<sp/>RRAMC_ERASE_ERASEALL_ERASE_Msk)<sp/>&gt;&gt;</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RRAMC_ERASE_ERASEALL_ERASE_Pos)<sp/>==</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RRAMC_ERASE_ERASEALL_ERASE_Erase;</highlight></codeline>
<codeline lineno="589"><highlight class="normal">}</highlight></codeline>
<codeline lineno="590"><highlight class="normal"></highlight></codeline>
<codeline lineno="591"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__rramc__hal_1gabd91f162fa4e8bb5800e5ad46a10ac2d" kindref="member">nrf_rramc_erase_all_set</ref>(NRF_RRAMC_Type<sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="592"><highlight class="normal">{</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;ERASE.ERASEALL<sp/>=<sp/>RRAMC_ERASE_ERASEALL_ERASE_Erase;</highlight></codeline>
<codeline lineno="594"><highlight class="normal">}</highlight></codeline>
<codeline lineno="595"><highlight class="normal"></highlight></codeline>
<codeline lineno="596"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__rramc__hal_1ga0a8c03c1bbee5321883fc348fb246f4a" kindref="member">nrf_rramc_region_config_set</ref>(NRF_RRAMC_Type<sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>region,</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structnrf__rramc__region__config__t" kindref="compound">nrf_rramc_region_config_t</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_config)</highlight></codeline>
<codeline lineno="599"><highlight class="normal">{</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;REGION[region].ADDRESS<sp/>=<sp/>p_config-&gt;<ref refid="structnrf__rramc__region__config__t_1a648ae2aec8d92d9e5db8a7d93304f1c3" kindref="member">address</ref>;</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;REGION[region].CONFIG<sp/>=<sp/>(((p_config-&gt;<ref refid="structnrf__rramc__region__config__t_1a79d54418da1fbc8641376825a58f822d" kindref="member">permissions</ref></highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;<sp/><ref refid="group__nrf__rramc__hal_1ga3d969b8a42d8c22b05d44adb5843aad9" kindref="member">NRF_RRAMC_REGION_CONFIG_PERM_MASK</ref>))<sp/>|</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((p_config-&gt;<ref refid="structnrf__rramc__region__config__t_1aa79aeda850defed86d6583fb2b4162e7" kindref="member">writeonce</ref><sp/>?<sp/>RRAMC_REGION_CONFIG_WRITEONCE_Enabled<sp/>:</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RRAMC_REGION_CONFIG_WRITEONCE_Disabled)</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>RRAMC_REGION_CONFIG_WRITEONCE_Pos)<sp/>|</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((p_config-&gt;<ref refid="structnrf__rramc__region__config__t_1a104dee986ffb016c0a916a2872be6cb8" kindref="member">lock</ref><sp/>?<sp/>RRAMC_REGION_CONFIG_LOCK_Enabled:</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RRAMC_REGION_CONFIG_LOCK_Disabled)</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>RRAMC_REGION_CONFIG_LOCK_Pos)<sp/>|</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((p_config-&gt;<ref refid="structnrf__rramc__region__config__t_1a08d0b56c5539882bdb18ba47d63d3e08" kindref="member">size_kb</ref><sp/>&lt;&lt;<sp/>RRAMC_REGION_CONFIG_SIZE_Pos)</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;<sp/>RRAMC_REGION_CONFIG_SIZE_Msk));</highlight></codeline>
<codeline lineno="611"><highlight class="normal">}</highlight></codeline>
<codeline lineno="612"><highlight class="normal"></highlight></codeline>
<codeline lineno="613"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__rramc__hal_1ga203cf7cebc41d47f7eb2c416b238e738" kindref="member">nrf_rramc_region_config_get</ref>(NRF_RRAMC_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>region,</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structnrf__rramc__region__config__t" kindref="compound">nrf_rramc_region_config_t</ref><sp/>*<sp/>p_config)</highlight></codeline>
<codeline lineno="616"><highlight class="normal">{</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>reg<sp/>=<sp/>p_reg-&gt;REGION[region].CONFIG;</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/>p_config-&gt;<ref refid="structnrf__rramc__region__config__t_1a79d54418da1fbc8641376825a58f822d" kindref="member">permissions</ref><sp/>=<sp/>reg<sp/>&amp;<sp/><ref refid="group__nrf__rramc__hal_1ga3d969b8a42d8c22b05d44adb5843aad9" kindref="member">NRF_RRAMC_REGION_CONFIG_PERM_MASK</ref>;</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/>p_config-&gt;<ref refid="structnrf__rramc__region__config__t_1aa79aeda850defed86d6583fb2b4162e7" kindref="member">writeonce</ref><sp/><sp/><sp/>=<sp/>((reg<sp/>&amp;<sp/>RRAMC_REGION_CONFIG_WRITEONCE_Msk)</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;<sp/>RRAMC_REGION_CONFIG_WRITE_Pos)<sp/>==</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RRAMC_REGION_CONFIG_WRITEONCE_Enabled;</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/>p_config-&gt;<ref refid="structnrf__rramc__region__config__t_1a104dee986ffb016c0a916a2872be6cb8" kindref="member">lock</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>((reg<sp/>&amp;<sp/>RRAMC_REGION_CONFIG_LOCK_Msk)</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;<sp/>RRAMC_REGION_CONFIG_LOCK_Pos)<sp/>==<sp/>RRAMC_REGION_CONFIG_LOCK_Enabled;</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/><sp/>p_config-&gt;<ref refid="structnrf__rramc__region__config__t_1a08d0b56c5539882bdb18ba47d63d3e08" kindref="member">size_kb</ref><sp/><sp/><sp/><sp/><sp/>=<sp/>(reg<sp/>&amp;<sp/>RRAMC_REGION_CONFIG_SIZE_Msk)<sp/>&gt;&gt;<sp/>RRAMC_REGION_CONFIG_SIZE_Pos;</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/>p_config-&gt;<ref refid="structnrf__rramc__region__config__t_1a648ae2aec8d92d9e5db8a7d93304f1c3" kindref="member">address</ref><sp/><sp/><sp/><sp/><sp/>=<sp/>p_reg-&gt;REGION[region].ADDRESS;</highlight></codeline>
<codeline lineno="626"><highlight class="normal">}</highlight></codeline>
<codeline lineno="627"><highlight class="normal"></highlight></codeline>
<codeline lineno="628"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRF_DECLARE_ONLY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="629"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="630"><highlight class="comment">/**<sp/>@}<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="631"><highlight class="normal"></highlight></codeline>
<codeline lineno="632"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="633"><highlight class="normal">}</highlight></codeline>
<codeline lineno="634"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="635"><highlight class="normal"></highlight></codeline>
<codeline lineno="636"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRF_RRAM_H__</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="hal/nrf_rramc.h"/>
  </compounddef>
</doxygen>
