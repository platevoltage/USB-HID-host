<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="nrf__qspi_8h" kind="file" language="C++">
    <compoundname>nrf_qspi.h</compoundname>
    <includes local="no">nrfx.h</includes>
    <includes local="no">nrf_erratas.h</includes>
    <includedby refid="nrfx__qspi_8h" local="no">drivers/include/nrfx_qspi.h</includedby>
    <incdepgraph>
      <node id="1">
        <label>hal/nrf_qspi.h</label>
        <link refid="nrf__qspi_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>nrf_erratas.h</label>
      </node>
      <node id="2">
        <label>nrfx.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="structnrf__qspi__pins__t" prot="public">nrf_qspi_pins_t</innerclass>
    <innerclass refid="structnrf__qspi__cinstr__conf__t" prot="public">nrf_qspi_cinstr_conf_t</innerclass>
    <innerclass refid="structnrf__qspi__addrconfig__conf__t" prot="public">nrf_qspi_addrconfig_conf_t</innerclass>
    <innerclass refid="structnrf__qspi__prot__conf__t" prot="public">nrf_qspi_prot_conf_t</innerclass>
    <innerclass refid="structnrf__qspi__phy__conf__t" prot="public">nrf_qspi_phy_conf_t</innerclass>
    <innerclass refid="structnrf__qspi__encryption__t" prot="public">nrf_qspi_encryption_t</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__nrf__qspi__hal_1ga2197a72f5359fd1233b77ca5d5babba7" prot="public" static="no">
        <name>NRF_QSPI_HAS_XIPEN</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Symbol indicating whether XIP can be explicitly enabled or disabled via XIPEN register. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_qspi.h" line="53" column="9" bodyfile="hal/nrf_qspi.h" bodystart="53" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__qspi__hal_1ga1b250d2406ccb12dbad7e43978c5ce41" prot="public" static="no">
        <name>NRF_QSPI_HAS_XIP_ENC</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Symbol indicating whether encryption for XIP is present. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_qspi.h" line="60" column="9" bodyfile="hal/nrf_qspi.h" bodystart="60" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__qspi__hal_1ga13263e5f8fc74cecc85d099ae91ccb93" prot="public" static="no">
        <name>NRF_QSPI_HAS_DMA_ENC</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Symbol indicating whether encryption for EasyDMA is present. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_qspi.h" line="67" column="9" bodyfile="hal/nrf_qspi.h" bodystart="67" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__qspi__hal_1ga39bd7ed54dc81c10da953e545e61da9c" prot="public" static="no">
        <name>NRF_QSPI_HAS_MODE_1</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Symbol indicating whether support for QSPI mode 1 is present. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_qspi.h" line="74" column="9" bodyfile="hal/nrf_qspi.h" bodystart="74" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__qspi__hal_1gaf36cb88a01d8b4f7c79429b448d9759a" prot="public" static="no">
        <name>NRF_QSPI_BASE_CLOCK_FREQ</name>
        <initializer>96000000uL</initializer>
        <briefdescription>
<para>Value representing QSPI base clock frequency. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_qspi.h" line="81" column="9" bodyfile="hal/nrf_qspi.h" bodystart="81" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__qspi__hal_1gac7e35ddaf91c5138b626d9a07871a0ce" prot="public" static="no">
        <name>NRF_QSPI_PIN_NOT_CONNECTED</name>
        <initializer>0xFF</initializer>
        <briefdescription>
<para>This value can be used as a parameter for the <ref refid="group__nrf__qspi__hal_1gae3d08224467245db637f575a7798c8fd" kindref="member">nrf_qspi_pins_set</ref> function to specify that a given QSPI signal (SCK, CSN, IO0, IO1, IO2, or IO3) will not be connected to a physical pin. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_qspi.h" line="91" column="9" bodyfile="hal/nrf_qspi.h" bodystart="91" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__qspi__hal_1gac45347f4a2f684c70cb6179452598fe2" prot="public" static="no">
        <name>NRF_QSPI_PIN_VAL</name>
        <param><defname>pin</defname></param>
        <initializer>(pin) == <ref refid="group__nrf__qspi__hal_1gac7e35ddaf91c5138b626d9a07871a0ce" kindref="member">NRF_QSPI_PIN_NOT_CONNECTED</ref> ? 0xFFFFFFFF : (pin)</initializer>
        <briefdescription>
<para>Macro for setting proper values to pin registers. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_qspi.h" line="94" column="9" bodyfile="hal/nrf_qspi.h" bodystart="94" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="group__nrf__qspi__hal_1ga100c85f9414b8353ce63b2449853aff0" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_qspi_task_t</name>
        <enumvalue id="group__nrf__qspi__hal_1gga100c85f9414b8353ce63b2449853aff0a448b67068efa81145f3363ca76d140c1" prot="public">
          <name>NRF_QSPI_TASK_ACTIVATE</name>
          <initializer>= offsetof(NRF_QSPI_Type, TASKS_ACTIVATE)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Activate the QSPI interface. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__qspi__hal_1gga100c85f9414b8353ce63b2449853aff0a7afebeac9a7887c1e48a3906a5d63946" prot="public">
          <name>NRF_QSPI_TASK_READSTART</name>
          <initializer>= offsetof(NRF_QSPI_Type, TASKS_READSTART)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Start transfer from external flash memory to internal RAM. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__qspi__hal_1gga100c85f9414b8353ce63b2449853aff0ae30409be73b2edc1ca4c5fa751d3135d" prot="public">
          <name>NRF_QSPI_TASK_WRITESTART</name>
          <initializer>= offsetof(NRF_QSPI_Type, TASKS_WRITESTART)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Start transfer from internal RAM to external flash memory. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__qspi__hal_1gga100c85f9414b8353ce63b2449853aff0a990ec1517c14ac6929b1b2f4deb4c536" prot="public">
          <name>NRF_QSPI_TASK_ERASESTART</name>
          <initializer>= offsetof(NRF_QSPI_Type, TASKS_ERASESTART)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Start external flash memory erase operation. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__qspi__hal_1gga100c85f9414b8353ce63b2449853aff0ab18b66e8a88d49c3d29c7619db460808" prot="public">
          <name>NRF_QSPI_TASK_DEACTIVATE</name>
          <initializer>= offsetof(NRF_QSPI_Type, TASKS_DEACTIVATE)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Deactivate the QSPI interface. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>QSPI tasks. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_qspi.h" line="98" column="1" bodyfile="hal/nrf_qspi.h" bodystart="99" bodyend="105"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__qspi__hal_1gab0289d6ded4986b5a9d7fa5482ec7c58" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_qspi_event_t</name>
        <enumvalue id="group__nrf__qspi__hal_1ggab0289d6ded4986b5a9d7fa5482ec7c58ab76226b454ca766d24e2ef9eaccabf5f" prot="public">
          <name>NRF_QSPI_EVENT_READY</name>
          <initializer>= offsetof(NRF_QSPI_Type, EVENTS_READY)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>QSPI peripheral is ready after it executes any task. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>QSPI events. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_qspi.h" line="108" column="1" bodyfile="hal/nrf_qspi.h" bodystart="109" bodyend="111"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__qspi__hal_1ga1684994cd9ffaaf2ff5db0e71b65166e" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_qspi_int_mask_t</name>
        <enumvalue id="group__nrf__qspi__hal_1gga1684994cd9ffaaf2ff5db0e71b65166ea66a224c1b3f4aba6bd9b170dcc1cab47" prot="public">
          <name>NRF_QSPI_INT_READY_MASK</name>
          <initializer>= QSPI_INTENSET_READY_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Interrupt on READY event. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>QSPI interrupts. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_qspi.h" line="114" column="1" bodyfile="hal/nrf_qspi.h" bodystart="115" bodyend="117"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__qspi__hal_1ga2195660aadd2cb2848efa1cbaa0acafe" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_qspi_frequency_t</name>
        <enumvalue id="group__nrf__qspi__hal_1gga2195660aadd2cb2848efa1cbaa0acafea60a0141816635c64132196aea3ee5f00" prot="public">
          <name>NRF_QSPI_FREQ_DIV1</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Divide by 1. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__qspi__hal_1gga2195660aadd2cb2848efa1cbaa0acafea0d8a12f7a0c01511eeb7779dccf489f7" prot="public">
          <name>NRF_QSPI_FREQ_DIV2</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Divide by 2. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__qspi__hal_1gga2195660aadd2cb2848efa1cbaa0acafead55f349f24e885a6594077a6ac5eab49" prot="public">
          <name>NRF_QSPI_FREQ_DIV3</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Divide by 3. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__qspi__hal_1gga2195660aadd2cb2848efa1cbaa0acafea79ae913b6f0ddef45b550dc2cfbb7860" prot="public">
          <name>NRF_QSPI_FREQ_DIV4</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Divide by 4. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__qspi__hal_1gga2195660aadd2cb2848efa1cbaa0acafea5b503aa82c7782022892f545aa3a25ba" prot="public">
          <name>NRF_QSPI_FREQ_DIV5</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Divide by 5. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__qspi__hal_1gga2195660aadd2cb2848efa1cbaa0acafea89db4bfabd270b247c87b7c7bf8eef34" prot="public">
          <name>NRF_QSPI_FREQ_DIV6</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Divide by 6. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__qspi__hal_1gga2195660aadd2cb2848efa1cbaa0acafea9bcb262f905f30180e3ee095f0b66ce8" prot="public">
          <name>NRF_QSPI_FREQ_DIV7</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Divide by 7. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__qspi__hal_1gga2195660aadd2cb2848efa1cbaa0acafea00afb89c1e704b63cbd8ce17f9d39414" prot="public">
          <name>NRF_QSPI_FREQ_DIV8</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Divide by 8. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__qspi__hal_1gga2195660aadd2cb2848efa1cbaa0acafeaddf8690fb50832755fd6f5d1ad8287a3" prot="public">
          <name>NRF_QSPI_FREQ_DIV9</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Divide by 9. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__qspi__hal_1gga2195660aadd2cb2848efa1cbaa0acafea1a430699f9fd14d0f158cac956b9df08" prot="public">
          <name>NRF_QSPI_FREQ_DIV10</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Divide by 10. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__qspi__hal_1gga2195660aadd2cb2848efa1cbaa0acafea7d048b2aaa0dab9a4d472d5a2ad3be65" prot="public">
          <name>NRF_QSPI_FREQ_DIV11</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Divide by 11. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__qspi__hal_1gga2195660aadd2cb2848efa1cbaa0acafead7ff003829d5b9e1de90268917bf3330" prot="public">
          <name>NRF_QSPI_FREQ_DIV12</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Divide by 12. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__qspi__hal_1gga2195660aadd2cb2848efa1cbaa0acafea41405363ce10e4e284ac03fc691655be" prot="public">
          <name>NRF_QSPI_FREQ_DIV13</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Divide by 13. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__qspi__hal_1gga2195660aadd2cb2848efa1cbaa0acafea2bcc8cbec7d357f05162587e85462911" prot="public">
          <name>NRF_QSPI_FREQ_DIV14</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Divide by 14. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__qspi__hal_1gga2195660aadd2cb2848efa1cbaa0acafea6ab6a13834687ac3326e74decdb50730" prot="public">
          <name>NRF_QSPI_FREQ_DIV15</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Divide by 15. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__qspi__hal_1gga2195660aadd2cb2848efa1cbaa0acafeaca2c21c800a9dbd55f810dd04b5574fa" prot="public">
          <name>NRF_QSPI_FREQ_DIV16</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Divide by 16. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>QSPI base clock frequency divider values. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_qspi.h" line="120" column="1" bodyfile="hal/nrf_qspi.h" bodystart="121" bodyend="138"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__qspi__hal_1ga2d6cc751e309c837399d85a845ef38ab" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_qspi_readoc_t</name>
        <enumvalue id="group__nrf__qspi__hal_1gga2d6cc751e309c837399d85a845ef38abad5623b15f12bef8209a20f5cc6306db2" prot="public">
          <name>NRF_QSPI_READOC_FASTREAD</name>
          <initializer>= QSPI_IFCONFIG0_READOC_FASTREAD</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Single data line SPI. FAST_READ (opcode 0x0B). </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__qspi__hal_1gga2d6cc751e309c837399d85a845ef38abaae12384580e64daadf753edd2f035e77" prot="public">
          <name>NRF_QSPI_READOC_READ2O</name>
          <initializer>= QSPI_IFCONFIG0_READOC_READ2O</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Dual data line SPI. READ2O (opcode 0x3B). </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__qspi__hal_1gga2d6cc751e309c837399d85a845ef38abadb16b155d18f73aa4526e506a8a98030" prot="public">
          <name>NRF_QSPI_READOC_READ2IO</name>
          <initializer>= QSPI_IFCONFIG0_READOC_READ2IO</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Dual data line SPI. READ2IO (opcode 0xBB). </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__qspi__hal_1gga2d6cc751e309c837399d85a845ef38abab1c77b1a56bc5054815e6d95e23f43be" prot="public">
          <name>NRF_QSPI_READOC_READ4O</name>
          <initializer>= QSPI_IFCONFIG0_READOC_READ4O</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Quad data line SPI. READ4O (opcode 0x6B). </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__qspi__hal_1gga2d6cc751e309c837399d85a845ef38aba231043e6d93ee80364a23173f7dfa709" prot="public">
          <name>NRF_QSPI_READOC_READ4IO</name>
          <initializer>= QSPI_IFCONFIG0_READOC_READ4IO</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Quad data line SPI. READ4IO (opcode 0xEB). </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Interface configuration for a read operation. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_qspi.h" line="161" column="1" bodyfile="hal/nrf_qspi.h" bodystart="162" bodyend="168"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__qspi__hal_1gaf5a6e1f18309cab07c2e0660a2ac2b14" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_qspi_writeoc_t</name>
        <enumvalue id="group__nrf__qspi__hal_1ggaf5a6e1f18309cab07c2e0660a2ac2b14affb8d8e409f6b52c74339d963ef4e232" prot="public">
          <name>NRF_QSPI_WRITEOC_PP</name>
          <initializer>= QSPI_IFCONFIG0_WRITEOC_PP</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Single data line SPI. PP (opcode 0x02). </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__qspi__hal_1ggaf5a6e1f18309cab07c2e0660a2ac2b14a6c5508e25b9e384d5ef2bd7772708e6b" prot="public">
          <name>NRF_QSPI_WRITEOC_PP2O</name>
          <initializer>= QSPI_IFCONFIG0_WRITEOC_PP2O</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Dual data line SPI. PP2O (opcode 0xA2). </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__qspi__hal_1ggaf5a6e1f18309cab07c2e0660a2ac2b14a37f1725b3a4ea9ad7201842b6da5c876" prot="public">
          <name>NRF_QSPI_WRITEOC_PP4O</name>
          <initializer>= QSPI_IFCONFIG0_WRITEOC_PP4O</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Quad data line SPI. PP4O (opcode 0x32). </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__qspi__hal_1ggaf5a6e1f18309cab07c2e0660a2ac2b14a384340d29c90b9280a6e48b0e7f38d29" prot="public">
          <name>NRF_QSPI_WRITEOC_PP4IO</name>
          <initializer>= QSPI_IFCONFIG0_WRITEOC_PP4IO</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Quad data line SPI. READ4O (opcode 0x38). </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Interface configuration for a write operation. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_qspi.h" line="171" column="1" bodyfile="hal/nrf_qspi.h" bodystart="172" bodyend="177"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__qspi__hal_1ga109220a04cdf9219946e350b5994b8b6" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_qspi_addrmode_t</name>
        <enumvalue id="group__nrf__qspi__hal_1gga109220a04cdf9219946e350b5994b8b6ab90a9f3860871e10f0a9ead5d4b39407" prot="public">
          <name>NRF_QSPI_ADDRMODE_24BIT</name>
          <initializer>= QSPI_IFCONFIG0_ADDRMODE_24BIT</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>24-bit addressing. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__qspi__hal_1gga109220a04cdf9219946e350b5994b8b6a4ac3e13c8172451fc9130a5db5b07bb5" prot="public">
          <name>NRF_QSPI_ADDRMODE_32BIT</name>
          <initializer>= QSPI_IFCONFIG0_ADDRMODE_32BIT</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>32-bit addressing. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Interface configuration for addressing mode. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_qspi.h" line="180" column="1" bodyfile="hal/nrf_qspi.h" bodystart="181" bodyend="184"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__qspi__hal_1ga464bd46344c43950af93b861c874b96c" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_qspi_spi_mode_t</name>
        <enumvalue id="group__nrf__qspi__hal_1gga464bd46344c43950af93b861c874b96cac6077c8ac72cb5944c9570c557f9477e" prot="public">
          <name>NRF_QSPI_MODE_0</name>
          <initializer>= QSPI_IFCONFIG1_SPIMODE_MODE0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Mode 0 (CPOL=0, CPHA=0). </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__qspi__hal_1gga464bd46344c43950af93b861c874b96cae26476580c7f83ee08c1e4e833c0c933" prot="public">
          <name>NRF_QSPI_MODE_1</name>
          <initializer>= QSPI_IFCONFIG1_SPIMODE_MODE3</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Mode 1 (CPOL=1, CPHA=1). </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>QSPI SPI mode. Polarization and phase configuration. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_qspi.h" line="187" column="1" bodyfile="hal/nrf_qspi.h" bodystart="188" bodyend="193"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__qspi__hal_1gae261b449793627d95f71735e2388799d" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_qspi_addrconfig_mode_t</name>
        <enumvalue id="group__nrf__qspi__hal_1ggae261b449793627d95f71735e2388799da28f1a534a0099ae5d98809b1adb0ceee" prot="public">
          <name>NRF_QSPI_ADDRCONF_MODE_NOINSTR</name>
          <initializer>= QSPI_ADDRCONF_MODE_NoInstr</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Do not send any instruction. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__qspi__hal_1ggae261b449793627d95f71735e2388799da8e8ce0fe6427cda547205363d0890fea" prot="public">
          <name>NRF_QSPI_ADDRCONF_MODE_OPCODE</name>
          <initializer>= QSPI_ADDRCONF_MODE_Opcode</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Send opcode. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__qspi__hal_1ggae261b449793627d95f71735e2388799dad06956329d4ef860b1e9d209b00c15bc" prot="public">
          <name>NRF_QSPI_ADDRCONF_MODE_OPBYTE0</name>
          <initializer>= QSPI_ADDRCONF_MODE_OpByte0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Send opcode, byte0. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__qspi__hal_1ggae261b449793627d95f71735e2388799dadd64893d54237b1a8869ad60c9c70275" prot="public">
          <name>NRF_QSPI_ADDRCONF_MODE_ALL</name>
          <initializer>= QSPI_ADDRCONF_MODE_All</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Send opcode, byte0, byte1. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Addressing configuration mode. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_qspi.h" line="196" column="1" bodyfile="hal/nrf_qspi.h" bodystart="197" bodyend="202"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__qspi__hal_1gabe68b50d3c5f07a5c946916eac125ebc" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_qspi_erase_len_t</name>
        <enumvalue id="group__nrf__qspi__hal_1ggabe68b50d3c5f07a5c946916eac125ebca391c2a4922cc2fbd9dc0e61828991c07" prot="public">
          <name>NRF_QSPI_ERASE_LEN_4KB</name>
          <initializer>= QSPI_ERASE_LEN_LEN_4KB</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Erase 4 kB block (flash command 0x20). </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__qspi__hal_1ggabe68b50d3c5f07a5c946916eac125ebca3565157eea175ea6895caca485781634" prot="public">
          <name>NRF_QSPI_ERASE_LEN_64KB</name>
          <initializer>= QSPI_ERASE_LEN_LEN_64KB</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Erase 64 kB block (flash command 0xD8). </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__qspi__hal_1ggabe68b50d3c5f07a5c946916eac125ebca50da339603485015b2f92d8efded0ead" prot="public">
          <name>NRF_QSPI_ERASE_LEN_ALL</name>
          <initializer>= QSPI_ERASE_LEN_LEN_All</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Erase all (flash command 0xC7). </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Erasing data length. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_qspi.h" line="205" column="1" bodyfile="hal/nrf_qspi.h" bodystart="206" bodyend="210"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__qspi__hal_1ga290902bf6e6edc2202de3fc9a91fb180" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_qspi_cinstr_len_t</name>
        <enumvalue id="group__nrf__qspi__hal_1gga290902bf6e6edc2202de3fc9a91fb180a5bf21927cf310039c4277d1e73f6be18" prot="public">
          <name>NRF_QSPI_CINSTR_LEN_1B</name>
          <initializer>= QSPI_CINSTRCONF_LENGTH_1B</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Send opcode only. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__qspi__hal_1gga290902bf6e6edc2202de3fc9a91fb180a53fe71dcd5a830ef892f31a8ccf60be7" prot="public">
          <name>NRF_QSPI_CINSTR_LEN_2B</name>
          <initializer>= QSPI_CINSTRCONF_LENGTH_2B</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Send opcode, CINSTRDAT0.BYTE0. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__qspi__hal_1gga290902bf6e6edc2202de3fc9a91fb180a166eb02321878105454c66e1ab662792" prot="public">
          <name>NRF_QSPI_CINSTR_LEN_3B</name>
          <initializer>= QSPI_CINSTRCONF_LENGTH_3B</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Send opcode, CINSTRDAT0.BYTE0 -&gt; CINSTRDAT0.BYTE1. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__qspi__hal_1gga290902bf6e6edc2202de3fc9a91fb180a86a8bfcb78afb426d5b2c416d827894b" prot="public">
          <name>NRF_QSPI_CINSTR_LEN_4B</name>
          <initializer>= QSPI_CINSTRCONF_LENGTH_4B</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Send opcode, CINSTRDAT0.BYTE0 -&gt; CINSTRDAT0.BYTE2. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__qspi__hal_1gga290902bf6e6edc2202de3fc9a91fb180a40b9fb3006a5ec6a61be73e989c573ab" prot="public">
          <name>NRF_QSPI_CINSTR_LEN_5B</name>
          <initializer>= QSPI_CINSTRCONF_LENGTH_5B</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Send opcode, CINSTRDAT0.BYTE0 -&gt; CINSTRDAT0.BYTE3. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__qspi__hal_1gga290902bf6e6edc2202de3fc9a91fb180ac9c7a6ee9bea0c9800b145614311c197" prot="public">
          <name>NRF_QSPI_CINSTR_LEN_6B</name>
          <initializer>= QSPI_CINSTRCONF_LENGTH_6B</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Send opcode, CINSTRDAT0.BYTE0 -&gt; CINSTRDAT1.BYTE4. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__qspi__hal_1gga290902bf6e6edc2202de3fc9a91fb180a0b781fa0afbdd7f75604b325c0d00037" prot="public">
          <name>NRF_QSPI_CINSTR_LEN_7B</name>
          <initializer>= QSPI_CINSTRCONF_LENGTH_7B</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Send opcode, CINSTRDAT0.BYTE0 -&gt; CINSTRDAT1.BYTE5. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__qspi__hal_1gga290902bf6e6edc2202de3fc9a91fb180ae1edb917cfb65800c8b855637ea502f2" prot="public">
          <name>NRF_QSPI_CINSTR_LEN_8B</name>
          <initializer>= QSPI_CINSTRCONF_LENGTH_8B</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Send opcode, CINSTRDAT0.BYTE0 -&gt; CINSTRDAT1.BYTE6. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__qspi__hal_1gga290902bf6e6edc2202de3fc9a91fb180a71914e96398f6a34c9c1b8a85dfb2efa" prot="public">
          <name>NRF_QSPI_CINSTR_LEN_9B</name>
          <initializer>= QSPI_CINSTRCONF_LENGTH_9B</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Send opcode, CINSTRDAT0.BYTE0 -&gt; CINSTRDAT1.BYTE7. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Custom instruction length. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_qspi.h" line="213" column="1" bodyfile="hal/nrf_qspi.h" bodystart="214" bodyend="224"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__nrf__qspi__hal_1gaf47bc34ddf2bf33d21529684b0494433" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_qspi_task_trigger</definition>
        <argsstring>(NRF_QSPI_Type *p_reg, nrf_qspi_task_t task)</argsstring>
        <name>nrf_qspi_task_trigger</name>
        <param>
          <type>NRF_QSPI_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__qspi__hal_1ga100c85f9414b8353ce63b2449853aff0" kindref="member">nrf_qspi_task_t</ref></type>
          <declname>task</declname>
        </param>
        <briefdescription>
<para>Function for activating the specified QSPI task. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">task</parametername>
</parameternamelist>
<parameterdescription>
<para>Task to be activated. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_qspi.h" line="687" column="24" bodyfile="hal/nrf_qspi.h" bodystart="687" bodyend="690" declfile="hal/nrf_qspi.h" declline="305" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__qspi__hal_1ga7b21880236e8a5a60d0a379f485290dc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_qspi_task_address_get</definition>
        <argsstring>(NRF_QSPI_Type const *p_reg, nrf_qspi_task_t task)</argsstring>
        <name>nrf_qspi_task_address_get</name>
        <param>
          <type>NRF_QSPI_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__qspi__hal_1ga100c85f9414b8353ce63b2449853aff0" kindref="member">nrf_qspi_task_t</ref></type>
          <declname>task</declname>
        </param>
        <briefdescription>
<para>Function for getting the address of the specified QSPI task register. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">task</parametername>
</parameternamelist>
<parameterdescription>
<para>QSPI task.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Address of the specified task register. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_qspi.h" line="692" column="28" bodyfile="hal/nrf_qspi.h" bodystart="692" bodyend="696" declfile="hal/nrf_qspi.h" declline="315" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__qspi__hal_1gab39e7c9d995de1d53dd0148ff6ca841d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_qspi_event_clear</definition>
        <argsstring>(NRF_QSPI_Type *p_reg, nrf_qspi_event_t event)</argsstring>
        <name>nrf_qspi_event_clear</name>
        <param>
          <type>NRF_QSPI_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__qspi__hal_1gab0289d6ded4986b5a9d7fa5482ec7c58" kindref="member">nrf_qspi_event_t</ref></type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>Function for clearing the specified QSPI event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event to be cleared. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_qspi.h" line="698" column="24" bodyfile="hal/nrf_qspi.h" bodystart="698" bodyend="701" declfile="hal/nrf_qspi.h" declline="324" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__qspi__hal_1ga7f664371cba4585d58b335a3ab96541b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE bool</type>
        <definition>NRF_STATIC_INLINE bool nrf_qspi_event_check</definition>
        <argsstring>(NRF_QSPI_Type const *p_reg, nrf_qspi_event_t event)</argsstring>
        <name>nrf_qspi_event_check</name>
        <param>
          <type>NRF_QSPI_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__qspi__hal_1gab0289d6ded4986b5a9d7fa5482ec7c58" kindref="member">nrf_qspi_event_t</ref></type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>Function for retrieving the state of the QSPI event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event to be checked.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>The event has been generated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>The event has not been generated. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_qspi.h" line="703" column="24" bodyfile="hal/nrf_qspi.h" bodystart="703" bodyend="706" declfile="hal/nrf_qspi.h" declline="335" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__qspi__hal_1ga54d6938d98fd603fbe469b38db492f82" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_qspi_event_address_get</definition>
        <argsstring>(NRF_QSPI_Type const *p_reg, nrf_qspi_event_t event)</argsstring>
        <name>nrf_qspi_event_address_get</name>
        <param>
          <type>NRF_QSPI_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__qspi__hal_1gab0289d6ded4986b5a9d7fa5482ec7c58" kindref="member">nrf_qspi_event_t</ref></type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>Function for getting the address of the specified QSPI event register. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>The specified event.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Address of the specified event register. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_qspi.h" line="708" column="28" bodyfile="hal/nrf_qspi.h" bodystart="708" bodyend="712" declfile="hal/nrf_qspi.h" declline="345" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__qspi__hal_1gaf426ec3d5708fadbdb4ea1ddd79c3994" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_qspi_int_enable</definition>
        <argsstring>(NRF_QSPI_Type *p_reg, uint32_t mask)</argsstring>
        <name>nrf_qspi_int_enable</name>
        <param>
          <type>NRF_QSPI_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Function for enabling specified interrupts. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of interrupts to be enabled. Use <ref refid="group__nrf__qspi__hal_1ga1684994cd9ffaaf2ff5db0e71b65166e" kindref="member">nrf_qspi_int_mask_t</ref> values for bit masking. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_qspi.h" line="714" column="24" bodyfile="hal/nrf_qspi.h" bodystart="714" bodyend="717" declfile="hal/nrf_qspi.h" declline="355" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__qspi__hal_1ga2d9df0df73bf5d3c4b8c9418901fbde5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_qspi_int_disable</definition>
        <argsstring>(NRF_QSPI_Type *p_reg, uint32_t mask)</argsstring>
        <name>nrf_qspi_int_disable</name>
        <param>
          <type>NRF_QSPI_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Function for disabling specified interrupts. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of interrupts to be disabled. Use <ref refid="group__nrf__qspi__hal_1ga1684994cd9ffaaf2ff5db0e71b65166e" kindref="member">nrf_qspi_int_mask_t</ref> values for bit masking. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_qspi.h" line="719" column="24" bodyfile="hal/nrf_qspi.h" bodystart="719" bodyend="722" declfile="hal/nrf_qspi.h" declline="364" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__qspi__hal_1ga249e408c95898cbb944102aea82c79b1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_qspi_int_enable_check</definition>
        <argsstring>(NRF_QSPI_Type const *p_reg, uint32_t mask)</argsstring>
        <name>nrf_qspi_int_enable_check</name>
        <param>
          <type>NRF_QSPI_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Function for checking if the specified interrupts are enabled. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of interrupts to be checked. Use <ref refid="group__nrf__qspi__hal_1ga1684994cd9ffaaf2ff5db0e71b65166e" kindref="member">nrf_qspi_int_mask_t</ref> values for bit masking.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Mask of enabled interrupts. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_qspi.h" line="724" column="28" bodyfile="hal/nrf_qspi.h" bodystart="724" bodyend="727" declfile="hal/nrf_qspi.h" declline="375" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__qspi__hal_1ga75dd08e2bf9831f4cdb3ba130893ddce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_qspi_enable</definition>
        <argsstring>(NRF_QSPI_Type *p_reg)</argsstring>
        <name>nrf_qspi_enable</name>
        <param>
          <type>NRF_QSPI_Type *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for enabling the QSPI peripheral. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_qspi.h" line="729" column="24" bodyfile="hal/nrf_qspi.h" bodystart="729" bodyend="732" declfile="hal/nrf_qspi.h" declline="382" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__qspi__hal_1gafe6d42e14135f4cd05271518ed657cbf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_qspi_disable</definition>
        <argsstring>(NRF_QSPI_Type *p_reg)</argsstring>
        <name>nrf_qspi_disable</name>
        <param>
          <type>NRF_QSPI_Type *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for disabling the QSPI peripheral. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_qspi.h" line="734" column="24" bodyfile="hal/nrf_qspi.h" bodystart="734" bodyend="742" declfile="hal/nrf_qspi.h" declline="389" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__qspi__hal_1gae3d08224467245db637f575a7798c8fd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_qspi_pins_set</definition>
        <argsstring>(NRF_QSPI_Type *p_reg, nrf_qspi_pins_t const *p_pins)</argsstring>
        <name>nrf_qspi_pins_set</name>
        <param>
          <type>NRF_QSPI_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="structnrf__qspi__pins__t" kindref="compound">nrf_qspi_pins_t</ref> const *</type>
          <declname>p_pins</declname>
        </param>
        <briefdescription>
<para>Function for configuring QSPI pins. </para>
        </briefdescription>
        <detaileddescription>
<para>If a given signal is not needed, pass the <ref refid="group__nrf__qspi__hal_1gac7e35ddaf91c5138b626d9a07871a0ce" kindref="member">NRF_QSPI_PIN_NOT_CONNECTED</ref> value instead of its pin number.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">p_pins</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the pins configuration structure. See <ref refid="structnrf__qspi__pins__t" kindref="compound">nrf_qspi_pins_t</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_qspi.h" line="744" column="24" bodyfile="hal/nrf_qspi.h" bodystart="744" bodyend="752" declfile="hal/nrf_qspi.h" declline="400" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__qspi__hal_1gaf84db82e3c59b7ae77328f6dcd426942" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_qspi_pins_get</definition>
        <argsstring>(NRF_QSPI_Type const *p_reg, nrf_qspi_pins_t *p_pins)</argsstring>
        <name>nrf_qspi_pins_get</name>
        <param>
          <type>NRF_QSPI_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="structnrf__qspi__pins__t" kindref="compound">nrf_qspi_pins_t</ref> *</type>
          <declname>p_pins</declname>
        </param>
        <briefdescription>
<para>Function for getting the currently configured QSPI pins. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">p_pins</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the pins configuration structure to be filled with QSPI pins. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_qspi.h" line="754" column="24" bodyfile="hal/nrf_qspi.h" bodystart="754" bodyend="763" declfile="hal/nrf_qspi.h" declline="409" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__qspi__hal_1ga0e304ef55925297fc4fb0644524653ca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_qspi_xip_offset_set</definition>
        <argsstring>(NRF_QSPI_Type *p_reg, uint32_t xip_offset)</argsstring>
        <name>nrf_qspi_xip_offset_set</name>
        <param>
          <type>NRF_QSPI_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>xip_offset</declname>
        </param>
        <briefdescription>
<para>Function for setting the QSPI XIPOFFSET register. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">xip_offset</parametername>
</parameternamelist>
<parameterdescription>
<para>Address offset in the external memory for Execute in Place operation. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_qspi.h" line="765" column="24" bodyfile="hal/nrf_qspi.h" bodystart="765" bodyend="769" declfile="hal/nrf_qspi.h" declline="418" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__qspi__hal_1ga39717ad48125b6506d5b8e4614604e61" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_qspi_ifconfig0_set</definition>
        <argsstring>(NRF_QSPI_Type *p_reg, nrf_qspi_prot_conf_t const *p_config)</argsstring>
        <name>nrf_qspi_ifconfig0_set</name>
        <param>
          <type>NRF_QSPI_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="structnrf__qspi__prot__conf__t" kindref="compound">nrf_qspi_prot_conf_t</ref> const *</type>
          <declname>p_config</declname>
        </param>
        <briefdescription>
<para>Function for setting the QSPI IFCONFIG0 register. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">p_config</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the QSPI protocol interface configuration structure. See <ref refid="structnrf__qspi__prot__conf__t" kindref="compound">nrf_qspi_prot_conf_t</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_qspi.h" line="771" column="24" bodyfile="hal/nrf_qspi.h" bodystart="771" bodyend="780" declfile="hal/nrf_qspi.h" declline="428" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__qspi__hal_1gaa98f3b0e3bf7f355cdab8ba419143c2a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_qspi_ifconfig0_raw_set</definition>
        <argsstring>(NRF_QSPI_Type *p_reg, uint32_t regval)</argsstring>
        <name>nrf_qspi_ifconfig0_raw_set</name>
        <param>
          <type>NRF_QSPI_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>regval</declname>
        </param>
        <briefdescription>
<para>Function for setting the explicit value of the QSPI IFCONFIG0 register. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">regval</parametername>
</parameternamelist>
<parameterdescription>
<para>Register value to be set. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_qspi.h" line="782" column="24" bodyfile="hal/nrf_qspi.h" bodystart="782" bodyend="785" declfile="hal/nrf_qspi.h" declline="437" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__qspi__hal_1gaad58e5fdb18d725d057f71588907116d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_qspi_ifconfig0_raw_get</definition>
        <argsstring>(NRF_QSPI_Type const *p_reg)</argsstring>
        <name>nrf_qspi_ifconfig0_raw_get</name>
        <param>
          <type>NRF_QSPI_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting the explicit value of the QSPI IFCONFIG0 register. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Value of IFCONFIG0 register. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_qspi.h" line="787" column="28" bodyfile="hal/nrf_qspi.h" bodystart="787" bodyend="790" declfile="hal/nrf_qspi.h" declline="446" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__qspi__hal_1gacf2cfc3ebd7d3d25f75ced22867d8072" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_qspi_ifconfig1_set</definition>
        <argsstring>(NRF_QSPI_Type *p_reg, nrf_qspi_phy_conf_t const *p_config)</argsstring>
        <name>nrf_qspi_ifconfig1_set</name>
        <param>
          <type>NRF_QSPI_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="structnrf__qspi__phy__conf__t" kindref="compound">nrf_qspi_phy_conf_t</ref> const *</type>
          <declname>p_config</declname>
        </param>
        <briefdescription>
<para>Function for setting the QSPI IFCONFIG1 register. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">p_config</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the QSPI physical interface configuration structure. See <ref refid="structnrf__qspi__phy__conf__t" kindref="compound">nrf_qspi_phy_conf_t</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_qspi.h" line="792" column="24" bodyfile="hal/nrf_qspi.h" bodystart="792" bodyend="803" declfile="hal/nrf_qspi.h" declline="455" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__qspi__hal_1ga1e668d12e7bd464c2f493c08aa5141c8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_qspi_addrconfig_set</definition>
        <argsstring>(NRF_QSPI_Type *p_reg, nrf_qspi_addrconfig_conf_t const *p_config)</argsstring>
        <name>nrf_qspi_addrconfig_set</name>
        <param>
          <type>NRF_QSPI_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="structnrf__qspi__addrconfig__conf__t" kindref="compound">nrf_qspi_addrconfig_conf_t</ref> const *</type>
          <declname>p_config</declname>
        </param>
        <briefdescription>
<para>Function for setting the QSPI ADDRCONF register. </para>
        </briefdescription>
        <detaileddescription>
<para>This function must be executed before sending task NRF_QSPI_TASK_ACTIVATE. Data stored in the structure is sent during the start of the peripheral. Remember that the reset instruction can set addressing mode to default in the memory device. If memory reset is necessary before configuring the addressing mode, use custom instruction feature instead of this function. Case with reset: Enable the peripheral without setting ADDRCONF register, send reset instructions using a custom instruction feature (reset enable and then reset), set proper addressing mode using the custom instruction feature.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">p_config</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the addressing mode configuration structure. See <ref refid="structnrf__qspi__addrconfig__conf__t" kindref="compound">nrf_qspi_addrconfig_conf_t</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_qspi.h" line="805" column="24" bodyfile="hal/nrf_qspi.h" bodystart="805" bodyend="816" declfile="hal/nrf_qspi.h" declline="473" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__qspi__hal_1ga0ef34305d49c451fa8a12d21a6c0adc3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_qspi_write_buffer_set</definition>
        <argsstring>(NRF_QSPI_Type *p_reg, void const *p_buffer, uint32_t length, uint32_t dest_addr)</argsstring>
        <name>nrf_qspi_write_buffer_set</name>
        <param>
          <type>NRF_QSPI_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>void const *</type>
          <declname>p_buffer</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>length</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>dest_addr</declname>
        </param>
        <briefdescription>
<para>Function for setting write data into the peripheral register (without starting the process). </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">p_buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the writing buffer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">length</parametername>
</parameternamelist>
<parameterdescription>
<para>Lenght of the writing data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">dest_addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Address in memory to write to. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_qspi.h" line="818" column="24" bodyfile="hal/nrf_qspi.h" bodystart="818" bodyend="826" declfile="hal/nrf_qspi.h" declline="484" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__qspi__hal_1ga08f5dabe6572fa84344f7ba00cdd3353" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_qspi_read_buffer_set</definition>
        <argsstring>(NRF_QSPI_Type *p_reg, void *p_buffer, uint32_t length, uint32_t src_addr)</argsstring>
        <name>nrf_qspi_read_buffer_set</name>
        <param>
          <type>NRF_QSPI_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>p_buffer</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>length</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>src_addr</declname>
        </param>
        <briefdescription>
<para>Function for setting read data into the peripheral register (without starting the process). </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">p_buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the reading buffer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">length</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of the read data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">src_addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Address in memory to read from. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_qspi.h" line="828" column="24" bodyfile="hal/nrf_qspi.h" bodystart="828" bodyend="836" declfile="hal/nrf_qspi.h" declline="497" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__qspi__hal_1gaa749f360b574b95bfd768cb7ec0a31f1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_qspi_erase_ptr_set</definition>
        <argsstring>(NRF_QSPI_Type *p_reg, uint32_t erase_addr, nrf_qspi_erase_len_t len)</argsstring>
        <name>nrf_qspi_erase_ptr_set</name>
        <param>
          <type>NRF_QSPI_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>erase_addr</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__qspi__hal_1gabe68b50d3c5f07a5c946916eac125ebc" kindref="member">nrf_qspi_erase_len_t</ref></type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>Function for setting erase data into the peripheral register (without starting the process). </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">erase_addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Start address to erase. Address must have padding set to 4 bytes. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">len</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of erasing area. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_qspi.h" line="838" column="24" bodyfile="hal/nrf_qspi.h" bodystart="838" bodyend="844" declfile="hal/nrf_qspi.h" declline="509" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__qspi__hal_1gaa9b1c1962520d1c974b3b070f13cfa7f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_qspi_erase_ptr_get</definition>
        <argsstring>(NRF_QSPI_Type const *p_reg)</argsstring>
        <name>nrf_qspi_erase_ptr_get</name>
        <param>
          <type>NRF_QSPI_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting the currently configured erase pointer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Erase pointer. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_qspi.h" line="846" column="28" bodyfile="hal/nrf_qspi.h" bodystart="846" bodyend="849" declfile="hal/nrf_qspi.h" declline="520" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__qspi__hal_1ga3a25b106830dd855be39383e4a4b432c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE <ref refid="group__nrf__qspi__hal_1gabe68b50d3c5f07a5c946916eac125ebc" kindref="member">nrf_qspi_erase_len_t</ref></type>
        <definition>NRF_STATIC_INLINE nrf_qspi_erase_len_t nrf_qspi_erase_len_get</definition>
        <argsstring>(NRF_QSPI_Type const *p_reg)</argsstring>
        <name>nrf_qspi_erase_len_get</name>
        <param>
          <type>NRF_QSPI_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting the currently configured erase length. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Erase length. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_qspi.h" line="851" column="40" bodyfile="hal/nrf_qspi.h" bodystart="851" bodyend="854" declfile="hal/nrf_qspi.h" declline="529" declcolumn="40"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__qspi__hal_1ga4ae65a740c1c17508fb72cbe54bc0bf8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_qspi_status_reg_get</definition>
        <argsstring>(NRF_QSPI_Type const *p_reg)</argsstring>
        <name>nrf_qspi_status_reg_get</name>
        <param>
          <type>NRF_QSPI_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting the peripheral status register. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Peripheral status register. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_qspi.h" line="856" column="28" bodyfile="hal/nrf_qspi.h" bodystart="856" bodyend="859" declfile="hal/nrf_qspi.h" declline="538" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__qspi__hal_1ga9672989a6a2d4f1cb1b9bb1b315bf0e3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint8_t</type>
        <definition>NRF_STATIC_INLINE uint8_t nrf_qspi_sreg_get</definition>
        <argsstring>(NRF_QSPI_Type const *p_reg)</argsstring>
        <name>nrf_qspi_sreg_get</name>
        <param>
          <type>NRF_QSPI_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting the device status register stored in the peripheral status register. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Device status register (lower byte). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_qspi.h" line="861" column="27" bodyfile="hal/nrf_qspi.h" bodystart="861" bodyend="864" declfile="hal/nrf_qspi.h" declline="547" declcolumn="27"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__qspi__hal_1ga934b17a7ab98e1cd9d6a3a08fabb058b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE bool</type>
        <definition>NRF_STATIC_INLINE bool nrf_qspi_busy_check</definition>
        <argsstring>(NRF_QSPI_Type const *p_reg)</argsstring>
        <name>nrf_qspi_busy_check</name>
        <param>
          <type>NRF_QSPI_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for checking if the peripheral is busy or not. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>The QSPI is busy. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>The QSPI is ready. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_qspi.h" line="866" column="24" bodyfile="hal/nrf_qspi.h" bodystart="866" bodyend="870" declfile="hal/nrf_qspi.h" declline="557" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__qspi__hal_1gaa4f1a4c85c69335f8764693e4d7f9153" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_qspi_cinstrdata_set</definition>
        <argsstring>(NRF_QSPI_Type *p_reg, nrf_qspi_cinstr_len_t length, void const *p_tx_data)</argsstring>
        <name>nrf_qspi_cinstrdata_set</name>
        <param>
          <type>NRF_QSPI_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__qspi__hal_1ga290902bf6e6edc2202de3fc9a91fb180" kindref="member">nrf_qspi_cinstr_len_t</ref></type>
          <declname>length</declname>
        </param>
        <param>
          <type>void const *</type>
          <declname>p_tx_data</declname>
        </param>
        <briefdescription>
<para>Function for setting registers sending with custom instruction transmission. </para>
        </briefdescription>
        <detaileddescription>
<para>This function can be ommited when using NRF_QSPI_CINSTR_LEN_1B as the length argument (sending only opcode without data).</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">length</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of the custom instruction data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">p_tx_data</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the data to send with the custom instruction. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_qspi.h" line="872" column="24" bodyfile="hal/nrf_qspi.h" bodystart="872" bodyend="915" declfile="hal/nrf_qspi.h" declline="569" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__qspi__hal_1ga18d2bf58bdaeb284fa0bcc5b84d397f8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_qspi_cinstrdata_get</definition>
        <argsstring>(NRF_QSPI_Type const *p_reg, nrf_qspi_cinstr_len_t length, void *p_rx_data)</argsstring>
        <name>nrf_qspi_cinstrdata_get</name>
        <param>
          <type>NRF_QSPI_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__qspi__hal_1ga290902bf6e6edc2202de3fc9a91fb180" kindref="member">nrf_qspi_cinstr_len_t</ref></type>
          <declname>length</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>p_rx_data</declname>
        </param>
        <briefdescription>
<para>Function for getting data from register after custom instruction transmission. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">length</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of the custom instruction data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">p_rx_data</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the reading buffer. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_qspi.h" line="917" column="24" bodyfile="hal/nrf_qspi.h" bodystart="917" bodyend="957" declfile="hal/nrf_qspi.h" declline="580" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__qspi__hal_1ga1abc53437cf85194e4d239600e67321f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_qspi_cinstr_transfer_start</definition>
        <argsstring>(NRF_QSPI_Type *p_reg, nrf_qspi_cinstr_conf_t const *p_config)</argsstring>
        <name>nrf_qspi_cinstr_transfer_start</name>
        <param>
          <type>NRF_QSPI_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="structnrf__qspi__cinstr__conf__t" kindref="compound">nrf_qspi_cinstr_conf_t</ref> const *</type>
          <declname>p_config</declname>
        </param>
        <briefdescription>
<para>Function for sending custom instruction to external memory. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">p_config</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the custom instruction configuration structure. See <ref refid="structnrf__qspi__cinstr__conf__t" kindref="compound">nrf_qspi_cinstr_conf_t</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_qspi.h" line="959" column="24" bodyfile="hal/nrf_qspi.h" bodystart="959" bodyend="968" declfile="hal/nrf_qspi.h" declline="591" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__qspi__hal_1ga1e5568c28d5e92abedc4904f73ee639f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_qspi_cinstr_long_transfer_start</definition>
        <argsstring>(NRF_QSPI_Type *p_reg, nrf_qspi_cinstr_conf_t const *p_config)</argsstring>
        <name>nrf_qspi_cinstr_long_transfer_start</name>
        <param>
          <type>NRF_QSPI_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="structnrf__qspi__cinstr__conf__t" kindref="compound">nrf_qspi_cinstr_conf_t</ref> const *</type>
          <declname>p_config</declname>
        </param>
        <briefdescription>
<para>Function for starting a custom instruction long transfer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">p_config</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the custom instruction configuration structure. See <ref refid="structnrf__qspi__cinstr__conf__t" kindref="compound">nrf_qspi_cinstr_conf_t</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_qspi.h" line="970" column="24" bodyfile="hal/nrf_qspi.h" bodystart="970" bodyend="980" declfile="hal/nrf_qspi.h" declline="601" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__qspi__hal_1ga83f0a976c5d1b7694186ac5e575bbb42" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE bool</type>
        <definition>NRF_STATIC_INLINE bool nrf_qspi_cinstr_long_transfer_is_ongoing</definition>
        <argsstring>(NRF_QSPI_Type const *p_reg)</argsstring>
        <name>nrf_qspi_cinstr_long_transfer_is_ongoing</name>
        <param>
          <type>NRF_QSPI_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for checking whether a custom instruction long transfer is ongoing. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>Custom instruction long transfer is ongoing. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>Custom instruction long transfer is not ongoing. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_qspi.h" line="982" column="24" bodyfile="hal/nrf_qspi.h" bodystart="982" bodyend="986" declfile="hal/nrf_qspi.h" declline="612" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__qspi__hal_1ga592ca0370403b99862c5212d46b46ac5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_qspi_cinstr_long_transfer_continue</definition>
        <argsstring>(NRF_QSPI_Type *p_reg, nrf_qspi_cinstr_len_t length, bool finalize)</argsstring>
        <name>nrf_qspi_cinstr_long_transfer_continue</name>
        <param>
          <type>NRF_QSPI_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__qspi__hal_1ga290902bf6e6edc2202de3fc9a91fb180" kindref="member">nrf_qspi_cinstr_len_t</ref></type>
          <declname>length</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>finalize</declname>
        </param>
        <briefdescription>
<para>Function for continuing a custom instruction long transfer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">length</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of the custom instruction data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">finalize</parametername>
</parameternamelist>
<parameterdescription>
<para>True if the custom instruction long transfer is to be finalized. False if the custom instruction long transfer is to be continued. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_qspi.h" line="988" column="24" bodyfile="hal/nrf_qspi.h" bodystart="988" bodyend="996" declfile="hal/nrf_qspi.h" declline="622" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__qspi__hal_1gaabf69606afa7753c03ca5555abbe1741" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_qspi_xip_set</definition>
        <argsstring>(NRF_QSPI_Type *p_reg, bool enable)</argsstring>
        <name>nrf_qspi_xip_set</name>
        <param>
          <type>NRF_QSPI_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>enable</declname>
        </param>
        <briefdescription>
<para>Function for enabling or disabling Execute in Place (XIP) operation. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>XIP can be enabled after reset. See Product Specification.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">enable</parametername>
</parameternamelist>
<parameterdescription>
<para>True if XIP is to be enabled, false otherwise. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_qspi.h" line="999" column="24" bodyfile="hal/nrf_qspi.h" bodystart="999" bodyend="1003" declfile="hal/nrf_qspi.h" declline="635" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__qspi__hal_1ga64b7138fa30f03935b1824138405c4cc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_qspi_xip_encryption_configure</definition>
        <argsstring>(NRF_QSPI_Type *p_reg, nrf_qspi_encryption_t const *p_cfg)</argsstring>
        <name>nrf_qspi_xip_encryption_configure</name>
        <param>
          <type>NRF_QSPI_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="structnrf__qspi__encryption__t" kindref="compound">nrf_qspi_encryption_t</ref> const *</type>
          <declname>p_cfg</declname>
        </param>
        <briefdescription>
<para>Function for configuring the XIP encryption. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">p_cfg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to encryption configuration structure. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_qspi.h" line="1007" column="24" bodyfile="hal/nrf_qspi.h" bodystart="1007" bodyend="1017" declfile="hal/nrf_qspi.h" declline="645" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__qspi__hal_1gadde1e48d01f1c2c908c8dd0d68674ef5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_qspi_xip_encryption_set</definition>
        <argsstring>(NRF_QSPI_Type *p_reg, bool enable)</argsstring>
        <name>nrf_qspi_xip_encryption_set</name>
        <param>
          <type>NRF_QSPI_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>enable</declname>
        </param>
        <briefdescription>
<para>Function for enabling or disabling the XIP encryption. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">enable</parametername>
</parameternamelist>
<parameterdescription>
<para>True if XIP encryption is to be enabled, false otherwise. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_qspi.h" line="1019" column="24" bodyfile="hal/nrf_qspi.h" bodystart="1019" bodyend="1024" declfile="hal/nrf_qspi.h" declline="654" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__qspi__hal_1ga432a8504c558244eb0ec0956a3122bd7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_qspi_dma_encryption_configure</definition>
        <argsstring>(NRF_QSPI_Type *p_reg, nrf_qspi_encryption_t const *p_cfg)</argsstring>
        <name>nrf_qspi_dma_encryption_configure</name>
        <param>
          <type>NRF_QSPI_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="structnrf__qspi__encryption__t" kindref="compound">nrf_qspi_encryption_t</ref> const *</type>
          <declname>p_cfg</declname>
        </param>
        <briefdescription>
<para>Function for configuring the EasyDMA encryption. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">p_cfg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to encryption configuration structure. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_qspi.h" line="1028" column="24" bodyfile="hal/nrf_qspi.h" bodystart="1028" bodyend="1038" declfile="hal/nrf_qspi.h" declline="664" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__qspi__hal_1ga1d7b95b36402b460fe5abd4cbbc7fcd8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_qspi_dma_encryption_set</definition>
        <argsstring>(NRF_QSPI_Type *p_reg, bool enable)</argsstring>
        <name>nrf_qspi_dma_encryption_set</name>
        <param>
          <type>NRF_QSPI_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>enable</declname>
        </param>
        <briefdescription>
<para>Function for enabling or disabling the EasyDMA encryption. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">enable</parametername>
</parameternamelist>
<parameterdescription>
<para>True if EasyDMA encryption is to be enabled, false otherwise. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_qspi.h" line="1040" column="24" bodyfile="hal/nrf_qspi.h" bodystart="1040" bodyend="1045" declfile="hal/nrf_qspi.h" declline="673" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__qspi__hal_1gaf8ab06442e0afdbaeda89996f69d1236" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_qspi_iftiming_set</definition>
        <argsstring>(NRF_QSPI_Type *p_reg, uint8_t rxdelay)</argsstring>
        <name>nrf_qspi_iftiming_set</name>
        <param>
          <type>NRF_QSPI_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>rxdelay</declname>
        </param>
        <briefdescription>
<para>Function for setting the timing related to sampling of the input serial data. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">rxdelay</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of 64 MHz cycles (15.625 ns) delay from the the rising edge of the clock until the input serial data is sampled. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_qspi.h" line="1048" column="24" bodyfile="hal/nrf_qspi.h" bodystart="1048" bodyend="1051" declfile="hal/nrf_qspi.h" declline="683" declcolumn="24"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2016<sp/>-<sp/>2024,<sp/>Nordic<sp/>Semiconductor<sp/>ASA</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>All<sp/>rights<sp/>reserved.</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>SPDX-License-Identifier:<sp/>BSD-3-Clause</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions<sp/>are<sp/>met:</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>1.<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright<sp/>notice,<sp/>this</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>2.<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the<sp/>distribution.</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/>3.<sp/>Neither<sp/>the<sp/>name<sp/>of<sp/>the<sp/>copyright<sp/>holder<sp/>nor<sp/>the<sp/>names<sp/>of<sp/>its</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>contributors<sp/>may<sp/>be<sp/>used<sp/>to<sp/>endorse<sp/>or<sp/>promote<sp/>products<sp/>derived<sp/>from<sp/>this</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>software<sp/>without<sp/>specific<sp/>prior<sp/>written<sp/>permission.</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>COPYRIGHT<sp/>HOLDERS<sp/>AND<sp/>CONTRIBUTORS<sp/>&quot;AS<sp/>IS&quot;</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/>AND<sp/>ANY<sp/>EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>THE</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*<sp/>ARE<sp/>DISCLAIMED.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>COPYRIGHT<sp/>HOLDER<sp/>OR<sp/>CONTRIBUTORS<sp/>BE</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,<sp/>SPECIAL,<sp/>EXEMPLARY,<sp/>OR</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>PROCUREMENT<sp/>OF</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>*<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,<sp/>DATA,<sp/>OR<sp/>PROFITS;<sp/>OR<sp/>BUSINESS</highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/>*<sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY<sp/>THEORY<sp/>OF<sp/>LIABILITY,<sp/>WHETHER<sp/>IN</highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/>*<sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR<sp/>OTHERWISE)</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/>*<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE<sp/>OF<sp/>THIS<sp/>SOFTWARE,<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/>*<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight></codeline>
<codeline lineno="32"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>NRF_QSPI_H__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_QSPI_H__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;nrfx.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;nrf_erratas.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="44"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="45"><highlight class="comment"><sp/>*<sp/>@defgroup<sp/>nrf_qspi_hal<sp/>QSPI<sp/>HAL</highlight></codeline>
<codeline lineno="46"><highlight class="comment"><sp/>*<sp/>@{</highlight></codeline>
<codeline lineno="47"><highlight class="comment"><sp/>*<sp/>@ingroup<sp/>nrf_qspi</highlight></codeline>
<codeline lineno="48"><highlight class="comment"><sp/>*<sp/>@brief<sp/><sp/><sp/>Hardware<sp/>access<sp/>layer<sp/>for<sp/>managing<sp/>the<sp/>QSPI<sp/>peripheral.</highlight></codeline>
<codeline lineno="49"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(QSPI_XIPEN_XIPEN_Msk)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="52"><highlight class="comment">/**<sp/>@brief<sp/>Symbol<sp/>indicating<sp/>whether<sp/>XIP<sp/>can<sp/>be<sp/>explicitly<sp/>enabled<sp/>or<sp/>disabled<sp/>via<sp/>XIPEN<sp/>register.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_QSPI_HAS_XIPEN<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_QSPI_HAS_XIPEN<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(QSPI_XIP_ENC_ENABLE_ENABLE_Msk)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="59"><highlight class="comment">/**<sp/>@brief<sp/>Symbol<sp/>indicating<sp/>whether<sp/>encryption<sp/>for<sp/>XIP<sp/>is<sp/>present.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_QSPI_HAS_XIP_ENC<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_QSPI_HAS_XIP_ENC<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(QSPI_DMA_ENC_ENABLE_ENABLE_Msk)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="66"><highlight class="comment">/**<sp/>@brief<sp/>Symbol<sp/>indicating<sp/>whether<sp/>encryption<sp/>for<sp/>EasyDMA<sp/>is<sp/>present.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_QSPI_HAS_DMA_ENC<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_QSPI_HAS_DMA_ENC<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(QSPI_IFCONFIG1_SPIMODE_MODE3)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="73"><highlight class="comment">/**<sp/>@brief<sp/>Symbol<sp/>indicating<sp/>whether<sp/>support<sp/>for<sp/>QSPI<sp/>mode<sp/>1<sp/>is<sp/>present.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_QSPI_HAS_MODE_1<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_QSPI_HAS_MODE_1<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(NRF53_SERIES)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="80"><highlight class="comment">/**<sp/>@brief<sp/>Value<sp/>representing<sp/>QSPI<sp/>base<sp/>clock<sp/>frequency.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_QSPI_BASE_CLOCK_FREQ<sp/>96000000uL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_QSPI_BASE_CLOCK_FREQ<sp/>32000000uL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="86"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="87"><highlight class="comment"><sp/>*<sp/>@brief<sp/>This<sp/>value<sp/>can<sp/>be<sp/>used<sp/>as<sp/>a<sp/>parameter<sp/>for<sp/>the<sp/>@ref<sp/>nrf_qspi_pins_set</highlight></codeline>
<codeline lineno="88"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>function<sp/>to<sp/>specify<sp/>that<sp/>a<sp/>given<sp/>QSPI<sp/>signal<sp/>(SCK,<sp/>CSN,<sp/>IO0,<sp/>IO1,<sp/>IO2,<sp/>or<sp/>IO3)</highlight></codeline>
<codeline lineno="89"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>will<sp/>not<sp/>be<sp/>connected<sp/>to<sp/>a<sp/>physical<sp/>pin.</highlight></codeline>
<codeline lineno="90"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_QSPI_PIN_NOT_CONNECTED<sp/>0xFF</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="93"><highlight class="comment">/**<sp/>@brief<sp/>Macro<sp/>for<sp/>setting<sp/>proper<sp/>values<sp/>to<sp/>pin<sp/>registers.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_QSPI_PIN_VAL(pin)<sp/>(pin)<sp/>==<sp/>NRF_QSPI_PIN_NOT_CONNECTED<sp/>?<sp/>0xFFFFFFFF<sp/>:<sp/>(pin)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="97"><highlight class="comment">/**<sp/>@brief<sp/>QSPI<sp/>tasks.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal">{</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__qspi__hal_1gga100c85f9414b8353ce63b2449853aff0a448b67068efa81145f3363ca76d140c1" kindref="member">NRF_QSPI_TASK_ACTIVATE</ref><sp/><sp/><sp/>=<sp/>offsetof(NRF_QSPI_Type,<sp/>TASKS_ACTIVATE),<sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Activate<sp/>the<sp/>QSPI<sp/>interface.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__qspi__hal_1gga100c85f9414b8353ce63b2449853aff0a7afebeac9a7887c1e48a3906a5d63946" kindref="member">NRF_QSPI_TASK_READSTART</ref><sp/><sp/>=<sp/>offsetof(NRF_QSPI_Type,<sp/>TASKS_READSTART),<sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Start<sp/>transfer<sp/>from<sp/>external<sp/>flash<sp/>memory<sp/>to<sp/>internal<sp/>RAM.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__qspi__hal_1gga100c85f9414b8353ce63b2449853aff0ae30409be73b2edc1ca4c5fa751d3135d" kindref="member">NRF_QSPI_TASK_WRITESTART</ref><sp/>=<sp/>offsetof(NRF_QSPI_Type,<sp/>TASKS_WRITESTART),<sp/></highlight><highlight class="comment">/**&lt;<sp/>Start<sp/>transfer<sp/>from<sp/>internal<sp/>RAM<sp/>to<sp/>external<sp/>flash<sp/>memory.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__qspi__hal_1gga100c85f9414b8353ce63b2449853aff0a990ec1517c14ac6929b1b2f4deb4c536" kindref="member">NRF_QSPI_TASK_ERASESTART</ref><sp/>=<sp/>offsetof(NRF_QSPI_Type,<sp/>TASKS_ERASESTART),<sp/></highlight><highlight class="comment">/**&lt;<sp/>Start<sp/>external<sp/>flash<sp/>memory<sp/>erase<sp/>operation.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__qspi__hal_1gga100c85f9414b8353ce63b2449853aff0ab18b66e8a88d49c3d29c7619db460808" kindref="member">NRF_QSPI_TASK_DEACTIVATE</ref><sp/>=<sp/>offsetof(NRF_QSPI_Type,<sp/>TASKS_DEACTIVATE),<sp/></highlight><highlight class="comment">/**&lt;<sp/>Deactivate<sp/>the<sp/>QSPI<sp/>interface.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal">}<sp/><ref refid="group__nrf__qspi__hal_1ga100c85f9414b8353ce63b2449853aff0" kindref="member">nrf_qspi_task_t</ref>;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="107"><highlight class="comment">/**<sp/>@brief<sp/>QSPI<sp/>events.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal">{</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__qspi__hal_1ggab0289d6ded4986b5a9d7fa5482ec7c58ab76226b454ca766d24e2ef9eaccabf5f" kindref="member">NRF_QSPI_EVENT_READY</ref><sp/>=<sp/>offsetof(NRF_QSPI_Type,<sp/>EVENTS_READY)<sp/></highlight><highlight class="comment">/**&lt;<sp/>QSPI<sp/>peripheral<sp/>is<sp/>ready<sp/>after<sp/>it<sp/>executes<sp/>any<sp/>task.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal">}<sp/><ref refid="group__nrf__qspi__hal_1gab0289d6ded4986b5a9d7fa5482ec7c58" kindref="member">nrf_qspi_event_t</ref>;</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="113"><highlight class="comment">/**<sp/>@brief<sp/>QSPI<sp/>interrupts.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal">{</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__qspi__hal_1gga1684994cd9ffaaf2ff5db0e71b65166ea66a224c1b3f4aba6bd9b170dcc1cab47" kindref="member">NRF_QSPI_INT_READY_MASK</ref><sp/>=<sp/>QSPI_INTENSET_READY_Msk<sp/></highlight><highlight class="comment">/**&lt;<sp/>Interrupt<sp/>on<sp/>READY<sp/>event.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal">}<sp/><ref refid="group__nrf__qspi__hal_1ga1684994cd9ffaaf2ff5db0e71b65166e" kindref="member">nrf_qspi_int_mask_t</ref>;</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="119"><highlight class="comment">/**<sp/>@brief<sp/>QSPI<sp/>base<sp/>clock<sp/>frequency<sp/>divider<sp/>values.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal">{</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__qspi__hal_1gga2195660aadd2cb2848efa1cbaa0acafea60a0141816635c64132196aea3ee5f00" kindref="member">NRF_QSPI_FREQ_DIV1</ref>,<sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Divide<sp/>by<sp/>1.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__qspi__hal_1gga2195660aadd2cb2848efa1cbaa0acafea0d8a12f7a0c01511eeb7779dccf489f7" kindref="member">NRF_QSPI_FREQ_DIV2</ref>,<sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Divide<sp/>by<sp/>2.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__qspi__hal_1gga2195660aadd2cb2848efa1cbaa0acafead55f349f24e885a6594077a6ac5eab49" kindref="member">NRF_QSPI_FREQ_DIV3</ref>,<sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Divide<sp/>by<sp/>3.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__qspi__hal_1gga2195660aadd2cb2848efa1cbaa0acafea79ae913b6f0ddef45b550dc2cfbb7860" kindref="member">NRF_QSPI_FREQ_DIV4</ref>,<sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Divide<sp/>by<sp/>4.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__qspi__hal_1gga2195660aadd2cb2848efa1cbaa0acafea5b503aa82c7782022892f545aa3a25ba" kindref="member">NRF_QSPI_FREQ_DIV5</ref>,<sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Divide<sp/>by<sp/>5.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__qspi__hal_1gga2195660aadd2cb2848efa1cbaa0acafea89db4bfabd270b247c87b7c7bf8eef34" kindref="member">NRF_QSPI_FREQ_DIV6</ref>,<sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Divide<sp/>by<sp/>6.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__qspi__hal_1gga2195660aadd2cb2848efa1cbaa0acafea9bcb262f905f30180e3ee095f0b66ce8" kindref="member">NRF_QSPI_FREQ_DIV7</ref>,<sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Divide<sp/>by<sp/>7.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__qspi__hal_1gga2195660aadd2cb2848efa1cbaa0acafea00afb89c1e704b63cbd8ce17f9d39414" kindref="member">NRF_QSPI_FREQ_DIV8</ref>,<sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Divide<sp/>by<sp/>8.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__qspi__hal_1gga2195660aadd2cb2848efa1cbaa0acafeaddf8690fb50832755fd6f5d1ad8287a3" kindref="member">NRF_QSPI_FREQ_DIV9</ref>,<sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Divide<sp/>by<sp/>9.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__qspi__hal_1gga2195660aadd2cb2848efa1cbaa0acafea1a430699f9fd14d0f158cac956b9df08" kindref="member">NRF_QSPI_FREQ_DIV10</ref>,<sp/></highlight><highlight class="comment">/**&lt;<sp/>Divide<sp/>by<sp/>10.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__qspi__hal_1gga2195660aadd2cb2848efa1cbaa0acafea7d048b2aaa0dab9a4d472d5a2ad3be65" kindref="member">NRF_QSPI_FREQ_DIV11</ref>,<sp/></highlight><highlight class="comment">/**&lt;<sp/>Divide<sp/>by<sp/>11.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__qspi__hal_1gga2195660aadd2cb2848efa1cbaa0acafead7ff003829d5b9e1de90268917bf3330" kindref="member">NRF_QSPI_FREQ_DIV12</ref>,<sp/></highlight><highlight class="comment">/**&lt;<sp/>Divide<sp/>by<sp/>12.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__qspi__hal_1gga2195660aadd2cb2848efa1cbaa0acafea41405363ce10e4e284ac03fc691655be" kindref="member">NRF_QSPI_FREQ_DIV13</ref>,<sp/></highlight><highlight class="comment">/**&lt;<sp/>Divide<sp/>by<sp/>13.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__qspi__hal_1gga2195660aadd2cb2848efa1cbaa0acafea2bcc8cbec7d357f05162587e85462911" kindref="member">NRF_QSPI_FREQ_DIV14</ref>,<sp/></highlight><highlight class="comment">/**&lt;<sp/>Divide<sp/>by<sp/>14.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__qspi__hal_1gga2195660aadd2cb2848efa1cbaa0acafea6ab6a13834687ac3326e74decdb50730" kindref="member">NRF_QSPI_FREQ_DIV15</ref>,<sp/></highlight><highlight class="comment">/**&lt;<sp/>Divide<sp/>by<sp/>15.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__qspi__hal_1gga2195660aadd2cb2848efa1cbaa0acafeaca2c21c800a9dbd55f810dd04b5574fa" kindref="member">NRF_QSPI_FREQ_DIV16</ref>,<sp/></highlight><highlight class="comment">/**&lt;<sp/>Divide<sp/>by<sp/>16.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal">}<sp/><ref refid="group__nrf__qspi__hal_1ga2195660aadd2cb2848efa1cbaa0acafe" kindref="member">nrf_qspi_frequency_t</ref>;</highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(NRF52_SERIES)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="141"><highlight class="comment">/**<sp/>Symbols<sp/>translation<sp/>for<sp/>backward<sp/>compatibility.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_QSPI_FREQ_32MDIV1<sp/><sp/>NRF_QSPI_FREQ_DIV1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_QSPI_FREQ_32MDIV2<sp/><sp/>NRF_QSPI_FREQ_DIV2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_QSPI_FREQ_32MDIV3<sp/><sp/>NRF_QSPI_FREQ_DIV3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_QSPI_FREQ_32MDIV4<sp/><sp/>NRF_QSPI_FREQ_DIV4</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_QSPI_FREQ_32MDIV5<sp/><sp/>NRF_QSPI_FREQ_DIV5</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_QSPI_FREQ_32MDIV6<sp/><sp/>NRF_QSPI_FREQ_DIV6</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_QSPI_FREQ_32MDIV7<sp/><sp/>NRF_QSPI_FREQ_DIV7</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_QSPI_FREQ_32MDIV8<sp/><sp/>NRF_QSPI_FREQ_DIV8</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_QSPI_FREQ_32MDIV9<sp/><sp/>NRF_QSPI_FREQ_DIV9</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_QSPI_FREQ_32MDIV10<sp/>NRF_QSPI_FREQ_DIV10</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_QSPI_FREQ_32MDIV11<sp/>NRF_QSPI_FREQ_DIV11</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_QSPI_FREQ_32MDIV12<sp/>NRF_QSPI_FREQ_DIV12</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_QSPI_FREQ_32MDIV13<sp/>NRF_QSPI_FREQ_DIV13</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_QSPI_FREQ_32MDIV14<sp/>NRF_QSPI_FREQ_DIV14</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_QSPI_FREQ_32MDIV15<sp/>NRF_QSPI_FREQ_DIV15</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_QSPI_FREQ_32MDIV16<sp/>NRF_QSPI_FREQ_DIV16</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="160"><highlight class="comment">/**<sp/>@brief<sp/>Interface<sp/>configuration<sp/>for<sp/>a<sp/>read<sp/>operation.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal">{</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__qspi__hal_1gga2d6cc751e309c837399d85a845ef38abad5623b15f12bef8209a20f5cc6306db2" kindref="member">NRF_QSPI_READOC_FASTREAD</ref><sp/>=<sp/>QSPI_IFCONFIG0_READOC_FASTREAD,<sp/></highlight><highlight class="comment">/**&lt;<sp/>Single<sp/>data<sp/>line<sp/>SPI.<sp/>FAST_READ<sp/>(opcode<sp/>0x0B).<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__qspi__hal_1gga2d6cc751e309c837399d85a845ef38abaae12384580e64daadf753edd2f035e77" kindref="member">NRF_QSPI_READOC_READ2O</ref><sp/><sp/><sp/>=<sp/>QSPI_IFCONFIG0_READOC_READ2O,<sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Dual<sp/>data<sp/>line<sp/>SPI.<sp/>READ2O<sp/>(opcode<sp/>0x3B).<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__qspi__hal_1gga2d6cc751e309c837399d85a845ef38abadb16b155d18f73aa4526e506a8a98030" kindref="member">NRF_QSPI_READOC_READ2IO</ref><sp/><sp/>=<sp/>QSPI_IFCONFIG0_READOC_READ2IO,<sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Dual<sp/>data<sp/>line<sp/>SPI.<sp/>READ2IO<sp/>(opcode<sp/>0xBB).<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__qspi__hal_1gga2d6cc751e309c837399d85a845ef38abab1c77b1a56bc5054815e6d95e23f43be" kindref="member">NRF_QSPI_READOC_READ4O</ref><sp/><sp/><sp/>=<sp/>QSPI_IFCONFIG0_READOC_READ4O,<sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Quad<sp/>data<sp/>line<sp/>SPI.<sp/>READ4O<sp/>(opcode<sp/>0x6B).<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__qspi__hal_1gga2d6cc751e309c837399d85a845ef38aba231043e6d93ee80364a23173f7dfa709" kindref="member">NRF_QSPI_READOC_READ4IO</ref><sp/><sp/>=<sp/>QSPI_IFCONFIG0_READOC_READ4IO<sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Quad<sp/>data<sp/>line<sp/>SPI.<sp/>READ4IO<sp/>(opcode<sp/>0xEB).<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal">}<sp/><ref refid="group__nrf__qspi__hal_1ga2d6cc751e309c837399d85a845ef38ab" kindref="member">nrf_qspi_readoc_t</ref>;</highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="170"><highlight class="comment">/**<sp/>@brief<sp/>Interface<sp/>configuration<sp/>for<sp/>a<sp/>write<sp/>operation.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal">{</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__qspi__hal_1ggaf5a6e1f18309cab07c2e0660a2ac2b14affb8d8e409f6b52c74339d963ef4e232" kindref="member">NRF_QSPI_WRITEOC_PP</ref><sp/><sp/><sp/><sp/>=<sp/>QSPI_IFCONFIG0_WRITEOC_PP,<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Single<sp/>data<sp/>line<sp/>SPI.<sp/>PP<sp/>(opcode<sp/>0x02).<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__qspi__hal_1ggaf5a6e1f18309cab07c2e0660a2ac2b14a6c5508e25b9e384d5ef2bd7772708e6b" kindref="member">NRF_QSPI_WRITEOC_PP2O</ref><sp/><sp/>=<sp/>QSPI_IFCONFIG0_WRITEOC_PP2O,<sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Dual<sp/>data<sp/>line<sp/>SPI.<sp/>PP2O<sp/>(opcode<sp/>0xA2).<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__qspi__hal_1ggaf5a6e1f18309cab07c2e0660a2ac2b14a37f1725b3a4ea9ad7201842b6da5c876" kindref="member">NRF_QSPI_WRITEOC_PP4O</ref><sp/><sp/>=<sp/>QSPI_IFCONFIG0_WRITEOC_PP4O,<sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Quad<sp/>data<sp/>line<sp/>SPI.<sp/>PP4O<sp/>(opcode<sp/>0x32).<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__qspi__hal_1ggaf5a6e1f18309cab07c2e0660a2ac2b14a384340d29c90b9280a6e48b0e7f38d29" kindref="member">NRF_QSPI_WRITEOC_PP4IO</ref><sp/>=<sp/>QSPI_IFCONFIG0_WRITEOC_PP4IO,<sp/></highlight><highlight class="comment">/**&lt;<sp/>Quad<sp/>data<sp/>line<sp/>SPI.<sp/>READ4O<sp/>(opcode<sp/>0x38).<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal">}<sp/><ref refid="group__nrf__qspi__hal_1gaf5a6e1f18309cab07c2e0660a2ac2b14" kindref="member">nrf_qspi_writeoc_t</ref>;</highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="179"><highlight class="comment">/**<sp/>@brief<sp/>Interface<sp/>configuration<sp/>for<sp/>addressing<sp/>mode.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal">{</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__qspi__hal_1gga109220a04cdf9219946e350b5994b8b6ab90a9f3860871e10f0a9ead5d4b39407" kindref="member">NRF_QSPI_ADDRMODE_24BIT</ref><sp/>=<sp/>QSPI_IFCONFIG0_ADDRMODE_24BIT,<sp/></highlight><highlight class="comment">/**&lt;<sp/>24-bit<sp/>addressing.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__qspi__hal_1gga109220a04cdf9219946e350b5994b8b6a4ac3e13c8172451fc9130a5db5b07bb5" kindref="member">NRF_QSPI_ADDRMODE_32BIT</ref><sp/>=<sp/>QSPI_IFCONFIG0_ADDRMODE_32BIT<sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>32-bit<sp/>addressing.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal">}<sp/><ref refid="group__nrf__qspi__hal_1ga109220a04cdf9219946e350b5994b8b6" kindref="member">nrf_qspi_addrmode_t</ref>;</highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="186"><highlight class="comment">/**<sp/>@brief<sp/>QSPI<sp/>SPI<sp/>mode.<sp/>Polarization<sp/>and<sp/>phase<sp/>configuration.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal">{</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__qspi__hal_1gga464bd46344c43950af93b861c874b96cac6077c8ac72cb5944c9570c557f9477e" kindref="member">NRF_QSPI_MODE_0</ref><sp/>=<sp/>QSPI_IFCONFIG1_SPIMODE_MODE0,<sp/></highlight><highlight class="comment">/**&lt;<sp/>Mode<sp/>0<sp/>(CPOL=0,<sp/>CPHA=0).<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_QSPI_HAS_MODE_1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__qspi__hal_1gga464bd46344c43950af93b861c874b96cae26476580c7f83ee08c1e4e833c0c933" kindref="member">NRF_QSPI_MODE_1</ref><sp/>=<sp/>QSPI_IFCONFIG1_SPIMODE_MODE3<sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Mode<sp/>1<sp/>(CPOL=1,<sp/>CPHA=1).<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal">}<sp/><ref refid="group__nrf__qspi__hal_1ga464bd46344c43950af93b861c874b96c" kindref="member">nrf_qspi_spi_mode_t</ref>;</highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="195"><highlight class="comment">/**<sp/>@brief<sp/>Addressing<sp/>configuration<sp/>mode.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal">{</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__qspi__hal_1ggae261b449793627d95f71735e2388799da28f1a534a0099ae5d98809b1adb0ceee" kindref="member">NRF_QSPI_ADDRCONF_MODE_NOINSTR</ref><sp/>=<sp/>QSPI_ADDRCONF_MODE_NoInstr,<sp/></highlight><highlight class="comment">/**&lt;<sp/>Do<sp/>not<sp/>send<sp/>any<sp/>instruction.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__qspi__hal_1ggae261b449793627d95f71735e2388799da8e8ce0fe6427cda547205363d0890fea" kindref="member">NRF_QSPI_ADDRCONF_MODE_OPCODE</ref><sp/><sp/>=<sp/>QSPI_ADDRCONF_MODE_Opcode,<sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Send<sp/>opcode.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__qspi__hal_1ggae261b449793627d95f71735e2388799dad06956329d4ef860b1e9d209b00c15bc" kindref="member">NRF_QSPI_ADDRCONF_MODE_OPBYTE0</ref><sp/>=<sp/>QSPI_ADDRCONF_MODE_OpByte0,<sp/></highlight><highlight class="comment">/**&lt;<sp/>Send<sp/>opcode,<sp/>byte0.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__qspi__hal_1ggae261b449793627d95f71735e2388799dadd64893d54237b1a8869ad60c9c70275" kindref="member">NRF_QSPI_ADDRCONF_MODE_ALL</ref><sp/><sp/><sp/><sp/><sp/>=<sp/>QSPI_ADDRCONF_MODE_All<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Send<sp/>opcode,<sp/>byte0,<sp/>byte1.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal">}<sp/><ref refid="group__nrf__qspi__hal_1gae261b449793627d95f71735e2388799d" kindref="member">nrf_qspi_addrconfig_mode_t</ref>;</highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="204"><highlight class="comment">/**<sp/>@brief<sp/>Erasing<sp/>data<sp/>length.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal">{</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__qspi__hal_1ggabe68b50d3c5f07a5c946916eac125ebca391c2a4922cc2fbd9dc0e61828991c07" kindref="member">NRF_QSPI_ERASE_LEN_4KB</ref><sp/><sp/>=<sp/>QSPI_ERASE_LEN_LEN_4KB,<sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Erase<sp/>4<sp/>kB<sp/>block<sp/>(flash<sp/>command<sp/>0x20).<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__qspi__hal_1ggabe68b50d3c5f07a5c946916eac125ebca3565157eea175ea6895caca485781634" kindref="member">NRF_QSPI_ERASE_LEN_64KB</ref><sp/>=<sp/>QSPI_ERASE_LEN_LEN_64KB,<sp/></highlight><highlight class="comment">/**&lt;<sp/>Erase<sp/>64<sp/>kB<sp/>block<sp/>(flash<sp/>command<sp/>0xD8).<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__qspi__hal_1ggabe68b50d3c5f07a5c946916eac125ebca50da339603485015b2f92d8efded0ead" kindref="member">NRF_QSPI_ERASE_LEN_ALL</ref><sp/><sp/>=<sp/>QSPI_ERASE_LEN_LEN_All<sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Erase<sp/>all<sp/>(flash<sp/>command<sp/>0xC7).<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal">}<sp/><ref refid="group__nrf__qspi__hal_1gabe68b50d3c5f07a5c946916eac125ebc" kindref="member">nrf_qspi_erase_len_t</ref>;</highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="212"><highlight class="comment">/**<sp/>@brief<sp/>Custom<sp/>instruction<sp/>length.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal">{</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__qspi__hal_1gga290902bf6e6edc2202de3fc9a91fb180a5bf21927cf310039c4277d1e73f6be18" kindref="member">NRF_QSPI_CINSTR_LEN_1B</ref><sp/>=<sp/>QSPI_CINSTRCONF_LENGTH_1B,<sp/></highlight><highlight class="comment">/**&lt;<sp/>Send<sp/>opcode<sp/>only.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__qspi__hal_1gga290902bf6e6edc2202de3fc9a91fb180a53fe71dcd5a830ef892f31a8ccf60be7" kindref="member">NRF_QSPI_CINSTR_LEN_2B</ref><sp/>=<sp/>QSPI_CINSTRCONF_LENGTH_2B,<sp/></highlight><highlight class="comment">/**&lt;<sp/>Send<sp/>opcode,<sp/>CINSTRDAT0.BYTE0.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__qspi__hal_1gga290902bf6e6edc2202de3fc9a91fb180a166eb02321878105454c66e1ab662792" kindref="member">NRF_QSPI_CINSTR_LEN_3B</ref><sp/>=<sp/>QSPI_CINSTRCONF_LENGTH_3B,<sp/></highlight><highlight class="comment">/**&lt;<sp/>Send<sp/>opcode,<sp/>CINSTRDAT0.BYTE0<sp/>-&gt;<sp/>CINSTRDAT0.BYTE1.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__qspi__hal_1gga290902bf6e6edc2202de3fc9a91fb180a86a8bfcb78afb426d5b2c416d827894b" kindref="member">NRF_QSPI_CINSTR_LEN_4B</ref><sp/>=<sp/>QSPI_CINSTRCONF_LENGTH_4B,<sp/></highlight><highlight class="comment">/**&lt;<sp/>Send<sp/>opcode,<sp/>CINSTRDAT0.BYTE0<sp/>-&gt;<sp/>CINSTRDAT0.BYTE2.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__qspi__hal_1gga290902bf6e6edc2202de3fc9a91fb180a40b9fb3006a5ec6a61be73e989c573ab" kindref="member">NRF_QSPI_CINSTR_LEN_5B</ref><sp/>=<sp/>QSPI_CINSTRCONF_LENGTH_5B,<sp/></highlight><highlight class="comment">/**&lt;<sp/>Send<sp/>opcode,<sp/>CINSTRDAT0.BYTE0<sp/>-&gt;<sp/>CINSTRDAT0.BYTE3.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__qspi__hal_1gga290902bf6e6edc2202de3fc9a91fb180ac9c7a6ee9bea0c9800b145614311c197" kindref="member">NRF_QSPI_CINSTR_LEN_6B</ref><sp/>=<sp/>QSPI_CINSTRCONF_LENGTH_6B,<sp/></highlight><highlight class="comment">/**&lt;<sp/>Send<sp/>opcode,<sp/>CINSTRDAT0.BYTE0<sp/>-&gt;<sp/>CINSTRDAT1.BYTE4.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__qspi__hal_1gga290902bf6e6edc2202de3fc9a91fb180a0b781fa0afbdd7f75604b325c0d00037" kindref="member">NRF_QSPI_CINSTR_LEN_7B</ref><sp/>=<sp/>QSPI_CINSTRCONF_LENGTH_7B,<sp/></highlight><highlight class="comment">/**&lt;<sp/>Send<sp/>opcode,<sp/>CINSTRDAT0.BYTE0<sp/>-&gt;<sp/>CINSTRDAT1.BYTE5.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__qspi__hal_1gga290902bf6e6edc2202de3fc9a91fb180ae1edb917cfb65800c8b855637ea502f2" kindref="member">NRF_QSPI_CINSTR_LEN_8B</ref><sp/>=<sp/>QSPI_CINSTRCONF_LENGTH_8B,<sp/></highlight><highlight class="comment">/**&lt;<sp/>Send<sp/>opcode,<sp/>CINSTRDAT0.BYTE0<sp/>-&gt;<sp/>CINSTRDAT1.BYTE6.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__qspi__hal_1gga290902bf6e6edc2202de3fc9a91fb180a71914e96398f6a34c9c1b8a85dfb2efa" kindref="member">NRF_QSPI_CINSTR_LEN_9B</ref><sp/>=<sp/>QSPI_CINSTRCONF_LENGTH_9B<sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Send<sp/>opcode,<sp/>CINSTRDAT0.BYTE0<sp/>-&gt;<sp/>CINSTRDAT1.BYTE7.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal">}<sp/><ref refid="group__nrf__qspi__hal_1ga290902bf6e6edc2202de3fc9a91fb180" kindref="member">nrf_qspi_cinstr_len_t</ref>;</highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="226"><highlight class="comment">/**<sp/>@brief<sp/>Pin<sp/>configuration.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="227" refid="structnrf__qspi__pins__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal">{</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>sck_pin;<sp/></highlight><highlight class="comment">/**&lt;<sp/>SCK<sp/>pin<sp/>number.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>csn_pin;<sp/></highlight><highlight class="comment">/**&lt;<sp/>Chip<sp/>select<sp/>pin<sp/>number.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>io0_pin;<sp/></highlight><highlight class="comment">/**&lt;<sp/>IO0/MOSI<sp/>pin<sp/>number.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>io1_pin;<sp/></highlight><highlight class="comment">/**&lt;<sp/>IO1/MISO<sp/>pin<sp/>number.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>io2_pin;<sp/></highlight><highlight class="comment">/**&lt;<sp/>IO2<sp/>pin<sp/>number<sp/>(optional).</highlight></codeline>
<codeline lineno="234"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>Set<sp/>to<sp/>@ref<sp/>NRF_QSPI_PIN_NOT_CONNECTED<sp/>if<sp/>this<sp/>signal<sp/>is<sp/>not<sp/>needed.</highlight></codeline>
<codeline lineno="235"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>io3_pin;<sp/></highlight><highlight class="comment">/**&lt;<sp/>IO3<sp/>pin<sp/>number<sp/>(optional).</highlight></codeline>
<codeline lineno="237"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>Set<sp/>to<sp/>@ref<sp/>NRF_QSPI_PIN_NOT_CONNECTED<sp/>if<sp/>this<sp/>signal<sp/>is<sp/>not<sp/>needed.</highlight></codeline>
<codeline lineno="238"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal">}<sp/><ref refid="structnrf__qspi__pins__t" kindref="compound">nrf_qspi_pins_t</ref>;</highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="241"><highlight class="comment">/**<sp/>@brief<sp/>Custom<sp/>instruction<sp/>configuration.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="242" refid="structnrf__qspi__cinstr__conf__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal">{</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>opcode;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Opcode<sp/>used<sp/>in<sp/>custom<sp/>instruction<sp/>transmission.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__qspi__hal_1ga290902bf6e6edc2202de3fc9a91fb180" kindref="member">nrf_qspi_cinstr_len_t</ref><sp/>length;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Length<sp/>of<sp/>the<sp/>custom<sp/>instruction<sp/>data.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>io2_level;<sp/></highlight><highlight class="comment">/**&lt;<sp/>I/O<sp/>line<sp/>level<sp/>during<sp/>transmission.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>io3_level;<sp/></highlight><highlight class="comment">/**&lt;<sp/>I/O<sp/>line<sp/>level<sp/>during<sp/>transmission.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wipwait;<sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Wait<sp/>if<sp/>a<sp/>Wait<sp/>in<sp/>Progress<sp/>bit<sp/>is<sp/>set<sp/>in<sp/>the<sp/>memory<sp/>status<sp/>byte.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wren;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Send<sp/>write<sp/>enable<sp/>before<sp/>instruction.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal">}<sp/><ref refid="structnrf__qspi__cinstr__conf__t" kindref="compound">nrf_qspi_cinstr_conf_t</ref>;</highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="252"><highlight class="comment">/**<sp/>@brief<sp/>Addressing<sp/>mode<sp/>register<sp/>configuration.<sp/>See<sp/>@ref<sp/>nrf_qspi_addrconfig_set<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="253" refid="structnrf__qspi__addrconfig__conf__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal">{</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>opcode;<sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Opcode<sp/>used<sp/>to<sp/>enter<sp/>the<sp/>proper<sp/>addressing<sp/>mode.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>byte0;<sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Byte<sp/>following<sp/>the<sp/>opcode.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>byte1;<sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Byte<sp/>following<sp/>byte0.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__qspi__hal_1gae261b449793627d95f71735e2388799d" kindref="member">nrf_qspi_addrconfig_mode_t</ref><sp/>mode;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Extended<sp/>addresing<sp/>mode.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wipwait;<sp/></highlight><highlight class="comment">/**&lt;<sp/>Enable<sp/>or<sp/>disable<sp/>waiting<sp/>for<sp/>complete<sp/>operation<sp/>execution.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wren;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Send<sp/>write<sp/>enable<sp/>before<sp/>instruction.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal">}<sp/><ref refid="structnrf__qspi__addrconfig__conf__t" kindref="compound">nrf_qspi_addrconfig_conf_t</ref>;</highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="263"><highlight class="comment">/**<sp/>@brief<sp/>Structure<sp/>with<sp/>QSPI<sp/>protocol<sp/>interface<sp/>configuration.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="264" refid="structnrf__qspi__prot__conf__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal">{</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__qspi__hal_1ga2d6cc751e309c837399d85a845ef38ab" kindref="member">nrf_qspi_readoc_t</ref><sp/><sp/><sp/>readoc;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Read<sp/>operation<sp/>code.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__qspi__hal_1gaf5a6e1f18309cab07c2e0660a2ac2b14" kindref="member">nrf_qspi_writeoc_t</ref><sp/><sp/>writeoc;<sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Write<sp/>operation<sp/>code.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__qspi__hal_1ga109220a04cdf9219946e350b5994b8b6" kindref="member">nrf_qspi_addrmode_t</ref><sp/>addrmode;<sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Addresing<sp/>mode<sp/>(24-bit<sp/>or<sp/>32-bit).<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dpmconfig;<sp/></highlight><highlight class="comment">/**&lt;<sp/>Enable<sp/>the<sp/>Deep<sp/>Power-down<sp/>Mode<sp/>(DPM)<sp/>feature.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal">}<sp/><ref refid="structnrf__qspi__prot__conf__t" kindref="compound">nrf_qspi_prot_conf_t</ref>;</highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="272"><highlight class="comment">/**<sp/>@brief<sp/>QSPI<sp/>physical<sp/>interface<sp/>configuration.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="273" refid="structnrf__qspi__phy__conf__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal">{</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sck_delay;<sp/></highlight><highlight class="comment">/**&lt;<sp/>tSHSL,<sp/>tWHSL,<sp/>and<sp/>tSHWL<sp/>in<sp/>number<sp/>of<sp/>16<sp/>MHz<sp/>periods<sp/>(62.5ns).<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dpmen;<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Enable<sp/>the<sp/>DPM<sp/>feature.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__qspi__hal_1ga464bd46344c43950af93b861c874b96c" kindref="member">nrf_qspi_spi_mode_t</ref><sp/><sp/>spi_mode;<sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>SPI<sp/>phase<sp/>and<sp/>polarization.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__qspi__hal_1ga2195660aadd2cb2848efa1cbaa0acafe" kindref="member">nrf_qspi_frequency_t</ref><sp/>sck_freq;<sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>SCK<sp/>frequency<sp/>given<sp/>as<sp/>QSPI<sp/>base<sp/>clock<sp/>frequency<sp/>divider.</highlight></codeline>
<codeline lineno="279"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>To<sp/>calculate<sp/>@p<sp/>sck_freq<sp/>value<sp/>corresponding<sp/>to<sp/>chosen<sp/>frequency,</highlight></codeline>
<codeline lineno="280"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>use<sp/>the<sp/>following<sp/>equation:</highlight></codeline>
<codeline lineno="281"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="282"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>sck_freq<sp/>=<sp/>(NRF_QSPI_BASE_CLOCK_FREQ<sp/>/<sp/>frequency)<sp/>-<sp/>1</highlight></codeline>
<codeline lineno="283"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="284"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>@note<sp/>Achievable<sp/>frequencies<sp/>are<sp/>determined<sp/>by<sp/>available</highlight></codeline>
<codeline lineno="285"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>divider<sp/>values<sp/>and<sp/>QSPI<sp/>base<sp/>clock<sp/>frequency.</highlight></codeline>
<codeline lineno="286"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal">}<sp/><ref refid="structnrf__qspi__phy__conf__t" kindref="compound">nrf_qspi_phy_conf_t</ref>;</highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_QSPI_HAS_XIP_ENC<sp/>||<sp/>NRF_QSPI_HAS_DMA_ENC</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="291"><highlight class="comment">/**<sp/>@brief<sp/>QSPI<sp/>encryption<sp/>settings<sp/>for<sp/>XIP<sp/>and<sp/>DMA<sp/>transfers.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="292" refid="structnrf__qspi__encryption__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal">{</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>key[4];<sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>AES<sp/>128-bit<sp/>key,<sp/>stored<sp/>on<sp/>4<sp/>32-bit<sp/>words.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>nonce[3];<sp/></highlight><highlight class="comment">/**&lt;<sp/>AES<sp/>96-bit<sp/>nonce,<sp/>stored<sp/>on<sp/>3<sp/>32-bit<sp/>words.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal">}<sp/><ref refid="structnrf__qspi__encryption__t" kindref="compound">nrf_qspi_encryption_t</ref>;</highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="299"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="300"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>activating<sp/>the<sp/>specified<sp/>QSPI<sp/>task.</highlight></codeline>
<codeline lineno="301"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="302"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="303"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>task<sp/><sp/>Task<sp/>to<sp/>be<sp/>activated.</highlight></codeline>
<codeline lineno="304"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__qspi__hal_1gaf47bc34ddf2bf33d21529684b0494433" kindref="member">nrf_qspi_task_trigger</ref>(NRF_QSPI_Type<sp/>*<sp/>p_reg,<sp/><ref refid="group__nrf__qspi__hal_1ga100c85f9414b8353ce63b2449853aff0" kindref="member">nrf_qspi_task_t</ref><sp/>task);</highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="307"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="308"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>the<sp/>address<sp/>of<sp/>the<sp/>specified<sp/>QSPI<sp/>task<sp/>register.</highlight></codeline>
<codeline lineno="309"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="310"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="311"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>task<sp/><sp/>QSPI<sp/>task.</highlight></codeline>
<codeline lineno="312"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="313"><highlight class="comment"><sp/>*<sp/>@return<sp/>Address<sp/>of<sp/>the<sp/>specified<sp/>task<sp/>register.</highlight></codeline>
<codeline lineno="314"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__qspi__hal_1ga7b21880236e8a5a60d0a379f485290dc" kindref="member">nrf_qspi_task_address_get</ref>(NRF_QSPI_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__qspi__hal_1ga100c85f9414b8353ce63b2449853aff0" kindref="member">nrf_qspi_task_t</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>task);</highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="318"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="319"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>clearing<sp/>the<sp/>specified<sp/>QSPI<sp/>event.</highlight></codeline>
<codeline lineno="320"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="321"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="322"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>event<sp/>Event<sp/>to<sp/>be<sp/>cleared.</highlight></codeline>
<codeline lineno="323"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__qspi__hal_1gab39e7c9d995de1d53dd0148ff6ca841d" kindref="member">nrf_qspi_event_clear</ref>(NRF_QSPI_Type<sp/>*<sp/>p_reg,<sp/><ref refid="group__nrf__qspi__hal_1gab0289d6ded4986b5a9d7fa5482ec7c58" kindref="member">nrf_qspi_event_t</ref><sp/>event);</highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="326"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="327"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>retrieving<sp/>the<sp/>state<sp/>of<sp/>the<sp/>QSPI<sp/>event.</highlight></codeline>
<codeline lineno="328"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="329"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="330"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>event<sp/>Event<sp/>to<sp/>be<sp/>checked.</highlight></codeline>
<codeline lineno="331"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="332"><highlight class="comment"><sp/>*<sp/>@retval<sp/>true<sp/><sp/>The<sp/>event<sp/>has<sp/>been<sp/>generated.</highlight></codeline>
<codeline lineno="333"><highlight class="comment"><sp/>*<sp/>@retval<sp/>false<sp/>The<sp/>event<sp/>has<sp/>not<sp/>been<sp/>generated.</highlight></codeline>
<codeline lineno="334"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrf__qspi__hal_1ga7f664371cba4585d58b335a3ab96541b" kindref="member">nrf_qspi_event_check</ref>(NRF_QSPI_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,<sp/><ref refid="group__nrf__qspi__hal_1gab0289d6ded4986b5a9d7fa5482ec7c58" kindref="member">nrf_qspi_event_t</ref><sp/>event);</highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="337"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="338"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>the<sp/>address<sp/>of<sp/>the<sp/>specified<sp/>QSPI<sp/>event<sp/>register.</highlight></codeline>
<codeline lineno="339"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="340"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="341"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>event<sp/>The<sp/>specified<sp/>event.</highlight></codeline>
<codeline lineno="342"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="343"><highlight class="comment"><sp/>*<sp/>@return<sp/>Address<sp/>of<sp/>the<sp/>specified<sp/>event<sp/>register.</highlight></codeline>
<codeline lineno="344"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__qspi__hal_1ga54d6938d98fd603fbe469b38db492f82" kindref="member">nrf_qspi_event_address_get</ref>(NRF_QSPI_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__qspi__hal_1gab0289d6ded4986b5a9d7fa5482ec7c58" kindref="member">nrf_qspi_event_t</ref><sp/><sp/><sp/><sp/><sp/><sp/>event);</highlight></codeline>
<codeline lineno="347"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="348"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="349"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>enabling<sp/>specified<sp/>interrupts.</highlight></codeline>
<codeline lineno="350"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="351"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="352"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>mask<sp/><sp/>Mask<sp/>of<sp/>interrupts<sp/>to<sp/>be<sp/>enabled.</highlight></codeline>
<codeline lineno="353"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Use<sp/>@ref<sp/>nrf_qspi_int_mask_t<sp/>values<sp/>for<sp/>bit<sp/>masking.</highlight></codeline>
<codeline lineno="354"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__qspi__hal_1gaf426ec3d5708fadbdb4ea1ddd79c3994" kindref="member">nrf_qspi_int_enable</ref>(NRF_QSPI_Type<sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>mask);</highlight></codeline>
<codeline lineno="356"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="357"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="358"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>disabling<sp/>specified<sp/>interrupts.</highlight></codeline>
<codeline lineno="359"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="360"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="361"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>mask<sp/><sp/>Mask<sp/>of<sp/>interrupts<sp/>to<sp/>be<sp/>disabled.</highlight></codeline>
<codeline lineno="362"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Use<sp/>@ref<sp/>nrf_qspi_int_mask_t<sp/>values<sp/>for<sp/>bit<sp/>masking.</highlight></codeline>
<codeline lineno="363"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__qspi__hal_1ga2d9df0df73bf5d3c4b8c9418901fbde5" kindref="member">nrf_qspi_int_disable</ref>(NRF_QSPI_Type<sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>mask);</highlight></codeline>
<codeline lineno="365"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="366"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="367"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>checking<sp/>if<sp/>the<sp/>specified<sp/>interrupts<sp/>are<sp/>enabled.</highlight></codeline>
<codeline lineno="368"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="369"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="370"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>mask<sp/><sp/>Mask<sp/>of<sp/>interrupts<sp/>to<sp/>be<sp/>checked.</highlight></codeline>
<codeline lineno="371"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Use<sp/>@ref<sp/>nrf_qspi_int_mask_t<sp/>values<sp/>for<sp/>bit<sp/>masking.</highlight></codeline>
<codeline lineno="372"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="373"><highlight class="comment"><sp/>*<sp/>@return<sp/>Mask<sp/>of<sp/>enabled<sp/>interrupts.</highlight></codeline>
<codeline lineno="374"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="375"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__qspi__hal_1ga249e408c95898cbb944102aea82c79b1" kindref="member">nrf_qspi_int_enable_check</ref>(NRF_QSPI_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>mask);</highlight></codeline>
<codeline lineno="376"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="377"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="378"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>enabling<sp/>the<sp/>QSPI<sp/>peripheral.</highlight></codeline>
<codeline lineno="379"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="380"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="381"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__qspi__hal_1ga75dd08e2bf9831f4cdb3ba130893ddce" kindref="member">nrf_qspi_enable</ref>(NRF_QSPI_Type<sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="383"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="384"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="385"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>disabling<sp/>the<sp/>QSPI<sp/>peripheral.</highlight></codeline>
<codeline lineno="386"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="387"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="388"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="389"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__qspi__hal_1gafe6d42e14135f4cd05271518ed657cbf" kindref="member">nrf_qspi_disable</ref>(NRF_QSPI_Type<sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="390"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="391"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="392"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>configuring<sp/>QSPI<sp/>pins.</highlight></codeline>
<codeline lineno="393"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="394"><highlight class="comment"><sp/>*<sp/>If<sp/>a<sp/>given<sp/>signal<sp/>is<sp/>not<sp/>needed,<sp/>pass<sp/>the<sp/>@ref<sp/>NRF_QSPI_PIN_NOT_CONNECTED</highlight></codeline>
<codeline lineno="395"><highlight class="comment"><sp/>*<sp/>value<sp/>instead<sp/>of<sp/>its<sp/>pin<sp/>number.</highlight></codeline>
<codeline lineno="396"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="397"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="398"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_pins<sp/>Pointer<sp/>to<sp/>the<sp/>pins<sp/>configuration<sp/>structure.<sp/>See<sp/>@ref<sp/>nrf_qspi_pins_t.</highlight></codeline>
<codeline lineno="399"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__qspi__hal_1gae3d08224467245db637f575a7798c8fd" kindref="member">nrf_qspi_pins_set</ref>(NRF_QSPI_Type<sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structnrf__qspi__pins__t" kindref="compound">nrf_qspi_pins_t</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_pins);</highlight></codeline>
<codeline lineno="402"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="403"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="404"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>the<sp/>currently<sp/>configured<sp/>QSPI<sp/>pins.</highlight></codeline>
<codeline lineno="405"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="406"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/><sp/>p_reg<sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="407"><highlight class="comment"><sp/>*<sp/>@param[out]<sp/>p_pins<sp/>Pointer<sp/>to<sp/>the<sp/>pins<sp/>configuration<sp/>structure<sp/>to<sp/>be<sp/>filled<sp/>with<sp/>QSPI<sp/>pins.</highlight></codeline>
<codeline lineno="408"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="409"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__qspi__hal_1gaf84db82e3c59b7ae77328f6dcd426942" kindref="member">nrf_qspi_pins_get</ref>(NRF_QSPI_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structnrf__qspi__pins__t" kindref="compound">nrf_qspi_pins_t</ref><sp/>*<sp/><sp/><sp/><sp/><sp/>p_pins);</highlight></codeline>
<codeline lineno="411"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="412"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="413"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>the<sp/>QSPI<sp/>XIPOFFSET<sp/>register.</highlight></codeline>
<codeline lineno="414"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="415"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/><sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="416"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>xip_offset<sp/>Address<sp/>offset<sp/>in<sp/>the<sp/>external<sp/>memory<sp/>for<sp/>Execute<sp/>in<sp/>Place<sp/>operation.</highlight></codeline>
<codeline lineno="417"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__qspi__hal_1ga0e304ef55925297fc4fb0644524653ca" kindref="member">nrf_qspi_xip_offset_set</ref>(NRF_QSPI_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xip_offset);</highlight></codeline>
<codeline lineno="420"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="421"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="422"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>the<sp/>QSPI<sp/>IFCONFIG0<sp/>register.</highlight></codeline>
<codeline lineno="423"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="424"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="425"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_config<sp/>Pointer<sp/>to<sp/>the<sp/>QSPI<sp/>protocol<sp/>interface<sp/>configuration<sp/>structure.</highlight></codeline>
<codeline lineno="426"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>See<sp/>@ref<sp/>nrf_qspi_prot_conf_t.</highlight></codeline>
<codeline lineno="427"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="428"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__qspi__hal_1ga39717ad48125b6506d5b8e4614604e61" kindref="member">nrf_qspi_ifconfig0_set</ref>(NRF_QSPI_Type<sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structnrf__qspi__prot__conf__t" kindref="compound">nrf_qspi_prot_conf_t</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_config);</highlight></codeline>
<codeline lineno="430"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="431"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="432"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>the<sp/>explicit<sp/>value<sp/>of<sp/>the<sp/>QSPI<sp/>IFCONFIG0<sp/>register.</highlight></codeline>
<codeline lineno="433"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="434"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="435"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>regval<sp/>Register<sp/>value<sp/>to<sp/>be<sp/>set.</highlight></codeline>
<codeline lineno="436"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="437"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__qspi__hal_1gaa98f3b0e3bf7f355cdab8ba419143c2a" kindref="member">nrf_qspi_ifconfig0_raw_set</ref>(NRF_QSPI_Type<sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>regval);</highlight></codeline>
<codeline lineno="438"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="439"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="440"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>the<sp/>explicit<sp/>value<sp/>of<sp/>the<sp/>QSPI<sp/>IFCONFIG0<sp/>register.</highlight></codeline>
<codeline lineno="441"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="442"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="443"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="444"><highlight class="comment"><sp/>*<sp/>@return<sp/>Value<sp/>of<sp/>IFCONFIG0<sp/>register.</highlight></codeline>
<codeline lineno="445"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="446"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__qspi__hal_1gaad58e5fdb18d725d057f71588907116d" kindref="member">nrf_qspi_ifconfig0_raw_get</ref>(NRF_QSPI_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="447"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="448"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="449"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>the<sp/>QSPI<sp/>IFCONFIG1<sp/>register.</highlight></codeline>
<codeline lineno="450"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="451"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="452"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_config<sp/>Pointer<sp/>to<sp/>the<sp/>QSPI<sp/>physical<sp/>interface<sp/>configuration<sp/>structure.</highlight></codeline>
<codeline lineno="453"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>See<sp/>@ref<sp/>nrf_qspi_phy_conf_t.</highlight></codeline>
<codeline lineno="454"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="455"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__qspi__hal_1gacf2cfc3ebd7d3d25f75ced22867d8072" kindref="member">nrf_qspi_ifconfig1_set</ref>(NRF_QSPI_Type<sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structnrf__qspi__phy__conf__t" kindref="compound">nrf_qspi_phy_conf_t</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_config);</highlight></codeline>
<codeline lineno="457"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="458"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="459"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>the<sp/>QSPI<sp/>ADDRCONF<sp/>register.</highlight></codeline>
<codeline lineno="460"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="461"><highlight class="comment"><sp/>*<sp/>This<sp/>function<sp/>must<sp/>be<sp/>executed<sp/>before<sp/>sending<sp/>task<sp/>NRF_QSPI_TASK_ACTIVATE.<sp/>Data<sp/>stored<sp/>in<sp/>the<sp/>structure</highlight></codeline>
<codeline lineno="462"><highlight class="comment"><sp/>*<sp/>is<sp/>sent<sp/>during<sp/>the<sp/>start<sp/>of<sp/>the<sp/>peripheral.<sp/>Remember<sp/>that<sp/>the<sp/>reset<sp/>instruction<sp/>can<sp/>set</highlight></codeline>
<codeline lineno="463"><highlight class="comment"><sp/>*<sp/>addressing<sp/>mode<sp/>to<sp/>default<sp/>in<sp/>the<sp/>memory<sp/>device.<sp/>If<sp/>memory<sp/>reset<sp/>is<sp/>necessary<sp/>before<sp/>configuring</highlight></codeline>
<codeline lineno="464"><highlight class="comment"><sp/>*<sp/>the<sp/>addressing<sp/>mode,<sp/>use<sp/>custom<sp/>instruction<sp/>feature<sp/>instead<sp/>of<sp/>this<sp/>function.</highlight></codeline>
<codeline lineno="465"><highlight class="comment"><sp/>*<sp/>Case<sp/>with<sp/>reset:<sp/>Enable<sp/>the<sp/>peripheral<sp/>without<sp/>setting<sp/>ADDRCONF<sp/>register,<sp/>send<sp/>reset<sp/>instructions</highlight></codeline>
<codeline lineno="466"><highlight class="comment"><sp/>*<sp/>using<sp/>a<sp/>custom<sp/>instruction<sp/>feature<sp/>(reset<sp/>enable<sp/>and<sp/>then<sp/>reset),<sp/>set<sp/>proper<sp/>addressing<sp/>mode</highlight></codeline>
<codeline lineno="467"><highlight class="comment"><sp/>*<sp/>using<sp/>the<sp/>custom<sp/>instruction<sp/>feature.</highlight></codeline>
<codeline lineno="468"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="469"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="470"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_config<sp/>Pointer<sp/>to<sp/>the<sp/>addressing<sp/>mode<sp/>configuration<sp/>structure.</highlight></codeline>
<codeline lineno="471"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>See<sp/>@ref<sp/>nrf_qspi_addrconfig_conf_t.</highlight></codeline>
<codeline lineno="472"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="473"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__qspi__hal_1ga1e668d12e7bd464c2f493c08aa5141c8" kindref="member">nrf_qspi_addrconfig_set</ref>(NRF_QSPI_Type<sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structnrf__qspi__addrconfig__conf__t" kindref="compound">nrf_qspi_addrconfig_conf_t</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_config);</highlight></codeline>
<codeline lineno="475"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="476"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="477"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>write<sp/>data<sp/>into<sp/>the<sp/>peripheral<sp/>register<sp/>(without<sp/>starting<sp/>the<sp/>process).</highlight></codeline>
<codeline lineno="478"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="479"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="480"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_buffer<sp/><sp/>Pointer<sp/>to<sp/>the<sp/>writing<sp/>buffer.</highlight></codeline>
<codeline lineno="481"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>length<sp/><sp/><sp/><sp/>Lenght<sp/>of<sp/>the<sp/>writing<sp/>data.</highlight></codeline>
<codeline lineno="482"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>dest_addr<sp/>Address<sp/>in<sp/>memory<sp/>to<sp/>write<sp/>to.</highlight></codeline>
<codeline lineno="483"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="484"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__qspi__hal_1ga0ef34305d49c451fa8a12d21a6c0adc3" kindref="member">nrf_qspi_write_buffer_set</ref>(NRF_QSPI_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/><sp/><sp/><sp/>p_buffer,</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>length,</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dest_addr);</highlight></codeline>
<codeline lineno="488"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="489"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="490"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>read<sp/>data<sp/>into<sp/>the<sp/>peripheral<sp/>register<sp/>(without<sp/>starting<sp/>the<sp/>process).</highlight></codeline>
<codeline lineno="491"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="492"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/><sp/>p_reg<sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="493"><highlight class="comment"><sp/>*<sp/>@param[out]<sp/>p_buffer<sp/>Pointer<sp/>to<sp/>the<sp/>reading<sp/>buffer.</highlight></codeline>
<codeline lineno="494"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/><sp/>length<sp/><sp/><sp/>Length<sp/>of<sp/>the<sp/>read<sp/>data.</highlight></codeline>
<codeline lineno="495"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/><sp/>src_addr<sp/>Address<sp/>in<sp/>memory<sp/>to<sp/>read<sp/>from.</highlight></codeline>
<codeline lineno="496"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="497"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__qspi__hal_1ga08f5dabe6572fa84344f7ba00cdd3353" kindref="member">nrf_qspi_read_buffer_set</ref>(NRF_QSPI_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_buffer,</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>length,</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>src_addr);</highlight></codeline>
<codeline lineno="501"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="502"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="503"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>erase<sp/>data<sp/>into<sp/>the<sp/>peripheral<sp/>register<sp/>(without<sp/>starting<sp/>the<sp/>process).</highlight></codeline>
<codeline lineno="504"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="505"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/><sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="506"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>erase_addr<sp/>Start<sp/>address<sp/>to<sp/>erase.<sp/>Address<sp/>must<sp/>have<sp/>padding<sp/>set<sp/>to<sp/>4<sp/>bytes.</highlight></codeline>
<codeline lineno="507"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>len<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Size<sp/>of<sp/>erasing<sp/>area.</highlight></codeline>
<codeline lineno="508"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="509"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__qspi__hal_1gaa749f360b574b95bfd768cb7ec0a31f1" kindref="member">nrf_qspi_erase_ptr_set</ref>(NRF_QSPI_Type<sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>erase_addr,</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__qspi__hal_1gabe68b50d3c5f07a5c946916eac125ebc" kindref="member">nrf_qspi_erase_len_t</ref><sp/>len);</highlight></codeline>
<codeline lineno="512"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="513"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="514"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>the<sp/>currently<sp/>configured<sp/>erase<sp/>pointer.</highlight></codeline>
<codeline lineno="515"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="516"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="517"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="518"><highlight class="comment"><sp/>*<sp/>@return<sp/>Erase<sp/>pointer.</highlight></codeline>
<codeline lineno="519"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="520"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__qspi__hal_1gaa9b1c1962520d1c974b3b070f13cfa7f" kindref="member">nrf_qspi_erase_ptr_get</ref>(NRF_QSPI_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="521"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="522"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="523"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>the<sp/>currently<sp/>configured<sp/>erase<sp/>length.</highlight></codeline>
<codeline lineno="524"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="525"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="526"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="527"><highlight class="comment"><sp/>*<sp/>@return<sp/>Erase<sp/>length.</highlight></codeline>
<codeline lineno="528"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="529"><highlight class="normal">NRF_STATIC_INLINE<sp/><ref refid="group__nrf__qspi__hal_1gabe68b50d3c5f07a5c946916eac125ebc" kindref="member">nrf_qspi_erase_len_t</ref><sp/><ref refid="group__nrf__qspi__hal_1ga3a25b106830dd855be39383e4a4b432c" kindref="member">nrf_qspi_erase_len_get</ref>(NRF_QSPI_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="530"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="531"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="532"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>the<sp/>peripheral<sp/>status<sp/>register.</highlight></codeline>
<codeline lineno="533"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="534"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="535"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="536"><highlight class="comment"><sp/>*<sp/>@return<sp/>Peripheral<sp/>status<sp/>register.</highlight></codeline>
<codeline lineno="537"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="538"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__qspi__hal_1ga4ae65a740c1c17508fb72cbe54bc0bf8" kindref="member">nrf_qspi_status_reg_get</ref>(NRF_QSPI_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="539"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="540"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="541"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>the<sp/>device<sp/>status<sp/>register<sp/>stored<sp/>in<sp/>the<sp/>peripheral<sp/>status<sp/>register.</highlight></codeline>
<codeline lineno="542"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="543"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="544"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="545"><highlight class="comment"><sp/>*<sp/>@return<sp/>Device<sp/>status<sp/>register<sp/>(lower<sp/>byte).</highlight></codeline>
<codeline lineno="546"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="547"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint8_t<sp/><ref refid="group__nrf__qspi__hal_1ga9672989a6a2d4f1cb1b9bb1b315bf0e3" kindref="member">nrf_qspi_sreg_get</ref>(NRF_QSPI_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="548"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="549"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="550"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>checking<sp/>if<sp/>the<sp/>peripheral<sp/>is<sp/>busy<sp/>or<sp/>not.</highlight></codeline>
<codeline lineno="551"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="552"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="553"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="554"><highlight class="comment"><sp/>*<sp/>@retval<sp/>true<sp/><sp/>The<sp/>QSPI<sp/>is<sp/>busy.</highlight></codeline>
<codeline lineno="555"><highlight class="comment"><sp/>*<sp/>@retval<sp/>false<sp/>The<sp/>QSPI<sp/>is<sp/>ready.</highlight></codeline>
<codeline lineno="556"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="557"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrf__qspi__hal_1ga934b17a7ab98e1cd9d6a3a08fabb058b" kindref="member">nrf_qspi_busy_check</ref>(NRF_QSPI_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="558"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="559"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="560"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>registers<sp/>sending<sp/>with<sp/>custom<sp/>instruction<sp/>transmission.</highlight></codeline>
<codeline lineno="561"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="562"><highlight class="comment"><sp/>*<sp/>This<sp/>function<sp/>can<sp/>be<sp/>ommited<sp/>when<sp/>using<sp/>NRF_QSPI_CINSTR_LEN_1B<sp/>as<sp/>the<sp/>length<sp/>argument</highlight></codeline>
<codeline lineno="563"><highlight class="comment"><sp/>*<sp/>(sending<sp/>only<sp/>opcode<sp/>without<sp/>data).</highlight></codeline>
<codeline lineno="564"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="565"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="566"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>length<sp/><sp/><sp/><sp/>Length<sp/>of<sp/>the<sp/>custom<sp/>instruction<sp/>data.</highlight></codeline>
<codeline lineno="567"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_tx_data<sp/>Pointer<sp/>to<sp/>the<sp/>data<sp/>to<sp/>send<sp/>with<sp/>the<sp/>custom<sp/>instruction.</highlight></codeline>
<codeline lineno="568"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="569"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__qspi__hal_1gaa4f1a4c85c69335f8764693e4d7f9153" kindref="member">nrf_qspi_cinstrdata_set</ref>(NRF_QSPI_Type<sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__qspi__hal_1ga290902bf6e6edc2202de3fc9a91fb180" kindref="member">nrf_qspi_cinstr_len_t</ref><sp/>length,</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_tx_data);</highlight></codeline>
<codeline lineno="572"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="573"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="574"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>data<sp/>from<sp/>register<sp/>after<sp/>custom<sp/>instruction<sp/>transmission.</highlight></codeline>
<codeline lineno="575"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="576"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="577"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>length<sp/><sp/><sp/><sp/>Length<sp/>of<sp/>the<sp/>custom<sp/>instruction<sp/>data.</highlight></codeline>
<codeline lineno="578"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_rx_data<sp/>Pointer<sp/>to<sp/>the<sp/>reading<sp/>buffer.</highlight></codeline>
<codeline lineno="579"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="580"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__qspi__hal_1ga18d2bf58bdaeb284fa0bcc5b84d397f8" kindref="member">nrf_qspi_cinstrdata_get</ref>(NRF_QSPI_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__qspi__hal_1ga290902bf6e6edc2202de3fc9a91fb180" kindref="member">nrf_qspi_cinstr_len_t</ref><sp/>length,</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_rx_data);</highlight></codeline>
<codeline lineno="583"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="584"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="585"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>sending<sp/>custom<sp/>instruction<sp/>to<sp/>external<sp/>memory.</highlight></codeline>
<codeline lineno="586"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="587"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="588"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_config<sp/>Pointer<sp/>to<sp/>the<sp/>custom<sp/>instruction<sp/>configuration<sp/>structure.</highlight></codeline>
<codeline lineno="589"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>See<sp/>@ref<sp/>nrf_qspi_cinstr_conf_t.</highlight></codeline>
<codeline lineno="590"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="591"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__qspi__hal_1ga1abc53437cf85194e4d239600e67321f" kindref="member">nrf_qspi_cinstr_transfer_start</ref>(NRF_QSPI_Type<sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structnrf__qspi__cinstr__conf__t" kindref="compound">nrf_qspi_cinstr_conf_t</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_config);</highlight></codeline>
<codeline lineno="593"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="594"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="595"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>starting<sp/>a<sp/>custom<sp/>instruction<sp/>long<sp/>transfer.</highlight></codeline>
<codeline lineno="596"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="597"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="598"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_config<sp/>Pointer<sp/>to<sp/>the<sp/>custom<sp/>instruction<sp/>configuration<sp/>structure.</highlight></codeline>
<codeline lineno="599"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>See<sp/>@ref<sp/>nrf_qspi_cinstr_conf_t.</highlight></codeline>
<codeline lineno="600"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="601"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__qspi__hal_1ga1e5568c28d5e92abedc4904f73ee639f" kindref="member">nrf_qspi_cinstr_long_transfer_start</ref>(NRF_QSPI_Type<sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structnrf__qspi__cinstr__conf__t" kindref="compound">nrf_qspi_cinstr_conf_t</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_config);</highlight></codeline>
<codeline lineno="603"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="604"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="605"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>checking<sp/>whether<sp/>a<sp/>custom<sp/>instruction<sp/>long<sp/>transfer<sp/>is<sp/>ongoing.</highlight></codeline>
<codeline lineno="606"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="607"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="608"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="609"><highlight class="comment"><sp/>*<sp/>@retval<sp/>true<sp/><sp/>Custom<sp/>instruction<sp/>long<sp/>transfer<sp/>is<sp/>ongoing.</highlight></codeline>
<codeline lineno="610"><highlight class="comment"><sp/>*<sp/>@retval<sp/>false<sp/>Custom<sp/>instruction<sp/>long<sp/>transfer<sp/>is<sp/>not<sp/>ongoing.</highlight></codeline>
<codeline lineno="611"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="612"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrf__qspi__hal_1ga83f0a976c5d1b7694186ac5e575bbb42" kindref="member">nrf_qspi_cinstr_long_transfer_is_ongoing</ref>(NRF_QSPI_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="613"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="614"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="615"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>continuing<sp/>a<sp/>custom<sp/>instruction<sp/>long<sp/>transfer.</highlight></codeline>
<codeline lineno="616"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="617"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="618"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>length<sp/><sp/><sp/>Length<sp/>of<sp/>the<sp/>custom<sp/>instruction<sp/>data.</highlight></codeline>
<codeline lineno="619"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>finalize<sp/>True<sp/>if<sp/>the<sp/>custom<sp/>instruction<sp/>long<sp/>transfer<sp/>is<sp/>to<sp/>be<sp/>finalized.</highlight></codeline>
<codeline lineno="620"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>False<sp/>if<sp/>the<sp/>custom<sp/>instruction<sp/>long<sp/>transfer<sp/>is<sp/>to<sp/>be<sp/>continued.</highlight></codeline>
<codeline lineno="621"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="622"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__qspi__hal_1ga592ca0370403b99862c5212d46b46ac5" kindref="member">nrf_qspi_cinstr_long_transfer_continue</ref>(NRF_QSPI_Type<sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__qspi__hal_1ga290902bf6e6edc2202de3fc9a91fb180" kindref="member">nrf_qspi_cinstr_len_t</ref><sp/>length,</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>finalize);</highlight></codeline>
<codeline lineno="625"><highlight class="normal"></highlight></codeline>
<codeline lineno="626"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_QSPI_HAS_XIPEN</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="627"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="628"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>enabling<sp/>or<sp/>disabling<sp/>Execute<sp/>in<sp/>Place<sp/>(XIP)<sp/>operation.</highlight></codeline>
<codeline lineno="629"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="630"><highlight class="comment"><sp/>*<sp/>@note<sp/>XIP<sp/>can<sp/>be<sp/>enabled<sp/>after<sp/>reset.<sp/>See<sp/>Product<sp/>Specification.</highlight></codeline>
<codeline lineno="631"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="632"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="633"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>enable<sp/>True<sp/>if<sp/>XIP<sp/>is<sp/>to<sp/>be<sp/>enabled,<sp/>false<sp/>otherwise.</highlight></codeline>
<codeline lineno="634"><highlight class="comment"><sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="635"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__qspi__hal_1gaabf69606afa7753c03ca5555abbe1741" kindref="member">nrf_qspi_xip_set</ref>(NRF_QSPI_Type<sp/>*<sp/>p_reg,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>enable);</highlight></codeline>
<codeline lineno="636"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="637"><highlight class="normal"></highlight></codeline>
<codeline lineno="638"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_QSPI_HAS_XIP_ENC</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="639"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="640"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>configuring<sp/>the<sp/>XIP<sp/>encryption.</highlight></codeline>
<codeline lineno="641"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="642"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="643"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_cfg<sp/>Pointer<sp/>to<sp/>encryption<sp/>configuration<sp/>structure.</highlight></codeline>
<codeline lineno="644"><highlight class="comment"><sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="645"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__qspi__hal_1ga64b7138fa30f03935b1824138405c4cc" kindref="member">nrf_qspi_xip_encryption_configure</ref>(NRF_QSPI_Type<sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structnrf__qspi__encryption__t" kindref="compound">nrf_qspi_encryption_t</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_cfg);</highlight></codeline>
<codeline lineno="647"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="648"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="649"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>enabling<sp/>or<sp/>disabling<sp/>the<sp/>XIP<sp/>encryption.</highlight></codeline>
<codeline lineno="650"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="651"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="652"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>enable<sp/>True<sp/>if<sp/>XIP<sp/>encryption<sp/>is<sp/>to<sp/>be<sp/>enabled,<sp/>false<sp/>otherwise.</highlight></codeline>
<codeline lineno="653"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="654"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__qspi__hal_1gadde1e48d01f1c2c908c8dd0d68674ef5" kindref="member">nrf_qspi_xip_encryption_set</ref>(NRF_QSPI_Type<sp/>*<sp/>p_reg,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>enable);</highlight></codeline>
<codeline lineno="655"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="656"><highlight class="normal"></highlight></codeline>
<codeline lineno="657"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_QSPI_HAS_DMA_ENC</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="658"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="659"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>configuring<sp/>the<sp/>EasyDMA<sp/>encryption.</highlight></codeline>
<codeline lineno="660"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="661"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="662"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_cfg<sp/>Pointer<sp/>to<sp/>encryption<sp/>configuration<sp/>structure.</highlight></codeline>
<codeline lineno="663"><highlight class="comment"><sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="664"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__qspi__hal_1ga432a8504c558244eb0ec0956a3122bd7" kindref="member">nrf_qspi_dma_encryption_configure</ref>(NRF_QSPI_Type<sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structnrf__qspi__encryption__t" kindref="compound">nrf_qspi_encryption_t</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_cfg);</highlight></codeline>
<codeline lineno="666"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="667"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="668"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>enabling<sp/>or<sp/>disabling<sp/>the<sp/>EasyDMA<sp/>encryption.</highlight></codeline>
<codeline lineno="669"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="670"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="671"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>enable<sp/>True<sp/>if<sp/>EasyDMA<sp/>encryption<sp/>is<sp/>to<sp/>be<sp/>enabled,<sp/>false<sp/>otherwise.</highlight></codeline>
<codeline lineno="672"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="673"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__qspi__hal_1ga1d7b95b36402b460fe5abd4cbbc7fcd8" kindref="member">nrf_qspi_dma_encryption_set</ref>(NRF_QSPI_Type<sp/>*<sp/>p_reg,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>enable);</highlight></codeline>
<codeline lineno="674"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="675"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="676"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="677"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>the<sp/>timing<sp/>related<sp/>to<sp/>sampling<sp/>of<sp/>the<sp/>input<sp/>serial<sp/>data.</highlight></codeline>
<codeline lineno="678"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="679"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="680"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>rxdelay<sp/>Number<sp/>of<sp/>64<sp/>MHz<sp/>cycles<sp/>(15.625<sp/>ns)<sp/>delay<sp/>from<sp/>the<sp/>the<sp/>rising<sp/>edge<sp/>of<sp/>the<sp/>clock</highlight></codeline>
<codeline lineno="681"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>until<sp/>the<sp/>input<sp/>serial<sp/>data<sp/>is<sp/>sampled.</highlight></codeline>
<codeline lineno="682"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="683"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__qspi__hal_1gaf8ab06442e0afdbaeda89996f69d1236" kindref="member">nrf_qspi_iftiming_set</ref>(NRF_QSPI_Type<sp/>*<sp/>p_reg,<sp/>uint8_t<sp/>rxdelay);</highlight></codeline>
<codeline lineno="684"><highlight class="normal"></highlight></codeline>
<codeline lineno="685"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>NRF_DECLARE_ONLY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="686"><highlight class="normal"></highlight></codeline>
<codeline lineno="687"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__qspi__hal_1gaf47bc34ddf2bf33d21529684b0494433" kindref="member">nrf_qspi_task_trigger</ref>(NRF_QSPI_Type<sp/>*<sp/>p_reg,<sp/><ref refid="group__nrf__qspi__hal_1ga100c85f9414b8353ce63b2449853aff0" kindref="member">nrf_qspi_task_t</ref><sp/>task)</highlight></codeline>
<codeline lineno="688"><highlight class="normal">{</highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/><sp/><sp/>*((</highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint32_t<sp/>*)((uint8_t<sp/>*)p_reg<sp/>+<sp/>(uint32_t)task))<sp/>=<sp/>0x1UL;</highlight></codeline>
<codeline lineno="690"><highlight class="normal">}</highlight></codeline>
<codeline lineno="691"><highlight class="normal"></highlight></codeline>
<codeline lineno="692"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__qspi__hal_1ga7b21880236e8a5a60d0a379f485290dc" kindref="member">nrf_qspi_task_address_get</ref>(NRF_QSPI_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__qspi__hal_1ga100c85f9414b8353ce63b2449853aff0" kindref="member">nrf_qspi_task_t</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>task)</highlight></codeline>
<codeline lineno="694"><highlight class="normal">{</highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((uint32_t)p_reg<sp/>+<sp/>(uint32_t)task);</highlight></codeline>
<codeline lineno="696"><highlight class="normal">}</highlight></codeline>
<codeline lineno="697"><highlight class="normal"></highlight></codeline>
<codeline lineno="698"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__qspi__hal_1gab39e7c9d995de1d53dd0148ff6ca841d" kindref="member">nrf_qspi_event_clear</ref>(NRF_QSPI_Type<sp/>*<sp/>p_reg,<sp/><ref refid="group__nrf__qspi__hal_1gab0289d6ded4986b5a9d7fa5482ec7c58" kindref="member">nrf_qspi_event_t</ref><sp/>event)</highlight></codeline>
<codeline lineno="699"><highlight class="normal">{</highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/><sp/><sp/>*((</highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint32_t<sp/>*)((uint8_t<sp/>*)p_reg<sp/>+<sp/>(uint32_t)event))<sp/>=<sp/>0x0UL;</highlight></codeline>
<codeline lineno="701"><highlight class="normal">}</highlight></codeline>
<codeline lineno="702"><highlight class="normal"></highlight></codeline>
<codeline lineno="703"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrf__qspi__hal_1ga7f664371cba4585d58b335a3ab96541b" kindref="member">nrf_qspi_event_check</ref>(NRF_QSPI_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,<sp/><ref refid="group__nrf__qspi__hal_1gab0289d6ded4986b5a9d7fa5482ec7c58" kindref="member">nrf_qspi_event_t</ref><sp/>event)</highlight></codeline>
<codeline lineno="704"><highlight class="normal">{</highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>nrf_event_check(p_reg,<sp/>event);</highlight></codeline>
<codeline lineno="706"><highlight class="normal">}</highlight></codeline>
<codeline lineno="707"><highlight class="normal"></highlight></codeline>
<codeline lineno="708"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__qspi__hal_1ga54d6938d98fd603fbe469b38db492f82" kindref="member">nrf_qspi_event_address_get</ref>(NRF_QSPI_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__qspi__hal_1gab0289d6ded4986b5a9d7fa5482ec7c58" kindref="member">nrf_qspi_event_t</ref><sp/><sp/><sp/><sp/><sp/><sp/>event)</highlight></codeline>
<codeline lineno="710"><highlight class="normal">{</highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>nrf_task_event_address_get(p_reg,<sp/>event);</highlight></codeline>
<codeline lineno="712"><highlight class="normal">}</highlight></codeline>
<codeline lineno="713"><highlight class="normal"></highlight></codeline>
<codeline lineno="714"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__qspi__hal_1gaf426ec3d5708fadbdb4ea1ddd79c3994" kindref="member">nrf_qspi_int_enable</ref>(NRF_QSPI_Type<sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>mask)</highlight></codeline>
<codeline lineno="715"><highlight class="normal">{</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;INTENSET<sp/>=<sp/>mask;</highlight></codeline>
<codeline lineno="717"><highlight class="normal">}</highlight></codeline>
<codeline lineno="718"><highlight class="normal"></highlight></codeline>
<codeline lineno="719"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__qspi__hal_1ga2d9df0df73bf5d3c4b8c9418901fbde5" kindref="member">nrf_qspi_int_disable</ref>(NRF_QSPI_Type<sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>mask)</highlight></codeline>
<codeline lineno="720"><highlight class="normal">{</highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;INTENCLR<sp/>=<sp/>mask;</highlight></codeline>
<codeline lineno="722"><highlight class="normal">}</highlight></codeline>
<codeline lineno="723"><highlight class="normal"></highlight></codeline>
<codeline lineno="724"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__qspi__hal_1ga249e408c95898cbb944102aea82c79b1" kindref="member">nrf_qspi_int_enable_check</ref>(NRF_QSPI_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>mask)</highlight></codeline>
<codeline lineno="725"><highlight class="normal">{</highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p_reg-&gt;INTENSET<sp/>&amp;<sp/>mask;</highlight></codeline>
<codeline lineno="727"><highlight class="normal">}</highlight></codeline>
<codeline lineno="728"><highlight class="normal"></highlight></codeline>
<codeline lineno="729"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__qspi__hal_1ga75dd08e2bf9831f4cdb3ba130893ddce" kindref="member">nrf_qspi_enable</ref>(NRF_QSPI_Type<sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="730"><highlight class="normal">{</highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;ENABLE<sp/>=<sp/>(QSPI_ENABLE_ENABLE_Enabled<sp/>&lt;&lt;<sp/>QSPI_ENABLE_ENABLE_Pos);</highlight></codeline>
<codeline lineno="732"><highlight class="normal">}</highlight></codeline>
<codeline lineno="733"><highlight class="normal"></highlight></codeline>
<codeline lineno="734"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__qspi__hal_1gafe6d42e14135f4cd05271518ed657cbf" kindref="member">nrf_qspi_disable</ref>(NRF_QSPI_Type<sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="735"><highlight class="normal">{</highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nrf52_errata_122())</highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Workaround<sp/>for<sp/>anomaly<sp/>122:<sp/>&quot;QSPI:<sp/>QSPI<sp/>uses<sp/>current<sp/>after<sp/>being<sp/>disabled&quot;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*(</highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint32_t<sp/>*)0x40029054ul<sp/>=<sp/>1ul;</highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;ENABLE<sp/>=<sp/>(QSPI_ENABLE_ENABLE_Disabled<sp/>&lt;&lt;<sp/>QSPI_ENABLE_ENABLE_Pos);</highlight></codeline>
<codeline lineno="742"><highlight class="normal">}</highlight></codeline>
<codeline lineno="743"><highlight class="normal"></highlight></codeline>
<codeline lineno="744"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__qspi__hal_1gae3d08224467245db637f575a7798c8fd" kindref="member">nrf_qspi_pins_set</ref>(NRF_QSPI_Type<sp/>*<sp/>p_reg,<sp/><ref refid="structnrf__qspi__pins__t" kindref="compound">nrf_qspi_pins_t</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_pins)</highlight></codeline>
<codeline lineno="745"><highlight class="normal">{</highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;PSEL.SCK<sp/>=<sp/><ref refid="group__nrf__qspi__hal_1gac45347f4a2f684c70cb6179452598fe2" kindref="member">NRF_QSPI_PIN_VAL</ref>(p_pins-&gt;<ref refid="structnrf__qspi__pins__t_1a0b9bcfafeb3ba7299a5266609dc492de" kindref="member">sck_pin</ref>);</highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;PSEL.CSN<sp/>=<sp/><ref refid="group__nrf__qspi__hal_1gac45347f4a2f684c70cb6179452598fe2" kindref="member">NRF_QSPI_PIN_VAL</ref>(p_pins-&gt;<ref refid="structnrf__qspi__pins__t_1a91dbde095ae2c649ee435c62b6a38b2d" kindref="member">csn_pin</ref>);</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;PSEL.IO0<sp/>=<sp/><ref refid="group__nrf__qspi__hal_1gac45347f4a2f684c70cb6179452598fe2" kindref="member">NRF_QSPI_PIN_VAL</ref>(p_pins-&gt;<ref refid="structnrf__qspi__pins__t_1a650a669be6d20b935d5bb2e00162a441" kindref="member">io0_pin</ref>);</highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;PSEL.IO1<sp/>=<sp/><ref refid="group__nrf__qspi__hal_1gac45347f4a2f684c70cb6179452598fe2" kindref="member">NRF_QSPI_PIN_VAL</ref>(p_pins-&gt;<ref refid="structnrf__qspi__pins__t_1aaea14457e7162499d0472af8aea03056" kindref="member">io1_pin</ref>);</highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;PSEL.IO2<sp/>=<sp/><ref refid="group__nrf__qspi__hal_1gac45347f4a2f684c70cb6179452598fe2" kindref="member">NRF_QSPI_PIN_VAL</ref>(p_pins-&gt;<ref refid="structnrf__qspi__pins__t_1aed13661f223bfebd1d5297a13bae1932" kindref="member">io2_pin</ref>);</highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;PSEL.IO3<sp/>=<sp/><ref refid="group__nrf__qspi__hal_1gac45347f4a2f684c70cb6179452598fe2" kindref="member">NRF_QSPI_PIN_VAL</ref>(p_pins-&gt;<ref refid="structnrf__qspi__pins__t_1a16b03d10da3a544b2507bac6a5aea9e2" kindref="member">io3_pin</ref>);</highlight></codeline>
<codeline lineno="752"><highlight class="normal">}</highlight></codeline>
<codeline lineno="753"><highlight class="normal"></highlight></codeline>
<codeline lineno="754"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__qspi__hal_1gaf84db82e3c59b7ae77328f6dcd426942" kindref="member">nrf_qspi_pins_get</ref>(NRF_QSPI_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structnrf__qspi__pins__t" kindref="compound">nrf_qspi_pins_t</ref><sp/>*<sp/><sp/><sp/><sp/><sp/>p_pins)</highlight></codeline>
<codeline lineno="756"><highlight class="normal">{</highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/><sp/><sp/>p_pins-&gt;<ref refid="structnrf__qspi__pins__t_1a0b9bcfafeb3ba7299a5266609dc492de" kindref="member">sck_pin</ref><sp/>=<sp/>(uint8_t)p_reg-&gt;PSEL.SCK;</highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/><sp/><sp/>p_pins-&gt;<ref refid="structnrf__qspi__pins__t_1a91dbde095ae2c649ee435c62b6a38b2d" kindref="member">csn_pin</ref><sp/>=<sp/>(uint8_t)p_reg-&gt;PSEL.CSN;</highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/><sp/><sp/>p_pins-&gt;<ref refid="structnrf__qspi__pins__t_1a650a669be6d20b935d5bb2e00162a441" kindref="member">io0_pin</ref><sp/>=<sp/>(uint8_t)p_reg-&gt;PSEL.IO0;</highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/><sp/><sp/>p_pins-&gt;<ref refid="structnrf__qspi__pins__t_1aaea14457e7162499d0472af8aea03056" kindref="member">io1_pin</ref><sp/>=<sp/>(uint8_t)p_reg-&gt;PSEL.IO1;</highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/><sp/><sp/>p_pins-&gt;<ref refid="structnrf__qspi__pins__t_1aed13661f223bfebd1d5297a13bae1932" kindref="member">io2_pin</ref><sp/>=<sp/>(uint8_t)p_reg-&gt;PSEL.IO2;</highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/><sp/><sp/>p_pins-&gt;<ref refid="structnrf__qspi__pins__t_1a16b03d10da3a544b2507bac6a5aea9e2" kindref="member">io3_pin</ref><sp/>=<sp/>(uint8_t)p_reg-&gt;PSEL.IO3;</highlight></codeline>
<codeline lineno="763"><highlight class="normal">}</highlight></codeline>
<codeline lineno="764"><highlight class="normal"></highlight></codeline>
<codeline lineno="765"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__qspi__hal_1ga0e304ef55925297fc4fb0644524653ca" kindref="member">nrf_qspi_xip_offset_set</ref>(NRF_QSPI_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xip_offset)</highlight></codeline>
<codeline lineno="767"><highlight class="normal">{</highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;XIPOFFSET<sp/>=<sp/>xip_offset;</highlight></codeline>
<codeline lineno="769"><highlight class="normal">}</highlight></codeline>
<codeline lineno="770"><highlight class="normal"></highlight></codeline>
<codeline lineno="771"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__qspi__hal_1ga39717ad48125b6506d5b8e4614604e61" kindref="member">nrf_qspi_ifconfig0_set</ref>(NRF_QSPI_Type<sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structnrf__qspi__prot__conf__t" kindref="compound">nrf_qspi_prot_conf_t</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_config)</highlight></codeline>
<codeline lineno="773"><highlight class="normal">{</highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>config<sp/>=<sp/>p_config-&gt;<ref refid="structnrf__qspi__prot__conf__t_1ac2a4cec85b36605fa7b9e0fcc02d4cee" kindref="member">readoc</ref>;</highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/><sp/><sp/>config<sp/>|=<sp/>((uint32_t)p_config-&gt;<ref refid="structnrf__qspi__prot__conf__t_1abe7f19887f38fc52850f7bad4d0efcdc" kindref="member">writeoc</ref>)<sp/><sp/><sp/><sp/>&lt;&lt;<sp/>QSPI_IFCONFIG0_WRITEOC_Pos;</highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/><sp/><sp/>config<sp/>|=<sp/>((uint32_t)p_config-&gt;<ref refid="structnrf__qspi__prot__conf__t_1a1359989fca9aa287072faefa7eb81e03" kindref="member">addrmode</ref>)<sp/><sp/><sp/>&lt;&lt;<sp/>QSPI_IFCONFIG0_ADDRMODE_Pos;</highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/><sp/><sp/>config<sp/>|=<sp/>(p_config-&gt;<ref refid="structnrf__qspi__prot__conf__t_1a85d83c02f75082017ebfdede575b9ae1" kindref="member">dpmconfig</ref><sp/>?<sp/>1U<sp/>:<sp/>0U<sp/>)<sp/>&lt;&lt;<sp/>QSPI_IFCONFIG0_DPMENABLE_Pos;</highlight></codeline>
<codeline lineno="778"><highlight class="normal"></highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;IFCONFIG0<sp/>=<sp/>config;</highlight></codeline>
<codeline lineno="780"><highlight class="normal">}</highlight></codeline>
<codeline lineno="781"><highlight class="normal"></highlight></codeline>
<codeline lineno="782"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__qspi__hal_1gaa98f3b0e3bf7f355cdab8ba419143c2a" kindref="member">nrf_qspi_ifconfig0_raw_set</ref>(NRF_QSPI_Type<sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>regval)</highlight></codeline>
<codeline lineno="783"><highlight class="normal">{</highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;IFCONFIG0<sp/>=<sp/>regval;</highlight></codeline>
<codeline lineno="785"><highlight class="normal">}</highlight></codeline>
<codeline lineno="786"><highlight class="normal"></highlight></codeline>
<codeline lineno="787"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__qspi__hal_1gaad58e5fdb18d725d057f71588907116d" kindref="member">nrf_qspi_ifconfig0_raw_get</ref>(NRF_QSPI_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="788"><highlight class="normal">{</highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p_reg-&gt;IFCONFIG0;</highlight></codeline>
<codeline lineno="790"><highlight class="normal">}</highlight></codeline>
<codeline lineno="791"><highlight class="normal"></highlight></codeline>
<codeline lineno="792"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__qspi__hal_1gacf2cfc3ebd7d3d25f75ced22867d8072" kindref="member">nrf_qspi_ifconfig1_set</ref>(NRF_QSPI_Type<sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structnrf__qspi__phy__conf__t" kindref="compound">nrf_qspi_phy_conf_t</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_config)</highlight></codeline>
<codeline lineno="794"><highlight class="normal">{</highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>IFCONFIG1<sp/>mask<sp/>for<sp/>reserved<sp/>fields<sp/>in<sp/>the<sp/>register.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>config<sp/>=<sp/>p_reg-&gt;IFCONFIG1<sp/>&amp;<sp/>0x00FFFF00;</highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/><sp/><sp/>config<sp/>|=<sp/>p_config-&gt;<ref refid="structnrf__qspi__phy__conf__t_1af75e3e020b23cfef75f1d404bd5533d9" kindref="member">sck_delay</ref>;</highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/><sp/><sp/>config<sp/>|=<sp/>(p_config-&gt;<ref refid="structnrf__qspi__phy__conf__t_1aedd3d8e74ab32ba8cb548fc9d50b6d99" kindref="member">dpmen</ref><sp/>?<sp/>1U<sp/>:<sp/>0U)<sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>QSPI_IFCONFIG1_DPMEN_Pos;</highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/><sp/><sp/>config<sp/>|=<sp/>((uint32_t)(p_config-&gt;<ref refid="structnrf__qspi__phy__conf__t_1a7f0a94b051e3b55b104e4eb647482453" kindref="member">spi_mode</ref>))<sp/>&lt;&lt;<sp/>QSPI_IFCONFIG1_SPIMODE_Pos;</highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/><sp/><sp/>config<sp/>|=<sp/>((uint32_t)(p_config-&gt;<ref refid="structnrf__qspi__phy__conf__t_1adeb41d3bf0733b2a500af7d734eb5e38" kindref="member">sck_freq</ref>))<sp/>&lt;&lt;<sp/>QSPI_IFCONFIG1_SCKFREQ_Pos;</highlight></codeline>
<codeline lineno="801"><highlight class="normal"></highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;IFCONFIG1<sp/>=<sp/>config;</highlight></codeline>
<codeline lineno="803"><highlight class="normal">}</highlight></codeline>
<codeline lineno="804"><highlight class="normal"></highlight></codeline>
<codeline lineno="805"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__qspi__hal_1ga1e668d12e7bd464c2f493c08aa5141c8" kindref="member">nrf_qspi_addrconfig_set</ref>(NRF_QSPI_Type<sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structnrf__qspi__addrconfig__conf__t" kindref="compound">nrf_qspi_addrconfig_conf_t</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_config)</highlight></codeline>
<codeline lineno="807"><highlight class="normal">{</highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>config<sp/>=<sp/>p_config-&gt;<ref refid="structnrf__qspi__addrconfig__conf__t_1af0c52650275055cfd739e0240ac7777a" kindref="member">opcode</ref>;</highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/><sp/><sp/><sp/>config<sp/>|=<sp/>((uint32_t)p_config-&gt;<ref refid="structnrf__qspi__addrconfig__conf__t_1a8c29a1d6092c7bb392c05712f7c6335e" kindref="member">byte0</ref>)<sp/><sp/><sp/>&lt;&lt;<sp/>QSPI_ADDRCONF_BYTE0_Pos;</highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/><sp/><sp/>config<sp/>|=<sp/>((uint32_t)p_config-&gt;<ref refid="structnrf__qspi__addrconfig__conf__t_1a7205e128946eeb6f8aebca122d249a2e" kindref="member">byte1</ref>)<sp/><sp/><sp/>&lt;&lt;<sp/>QSPI_ADDRCONF_BYTE1_Pos;</highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/><sp/><sp/>config<sp/>|=<sp/>((uint32_t)(p_config-&gt;<ref refid="structnrf__qspi__addrconfig__conf__t_1a4b3fcb4cc7f98df3f7a53fe4118cd0af" kindref="member">mode</ref>))<sp/><sp/>&lt;&lt;<sp/>QSPI_ADDRCONF_MODE_Pos;</highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/><sp/><sp/><sp/>config<sp/>|=<sp/>(p_config-&gt;<ref refid="structnrf__qspi__addrconfig__conf__t_1ad902b95b721eaafd3ee5a68fac278234" kindref="member">wipwait</ref><sp/>?<sp/>1U<sp/>:<sp/>0U)<sp/>&lt;&lt;<sp/>QSPI_ADDRCONF_WIPWAIT_Pos;</highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/><sp/><sp/>config<sp/>|=<sp/>(p_config-&gt;<ref refid="structnrf__qspi__addrconfig__conf__t_1aeb0f98f895d8d096407ab3d9fab49039" kindref="member">wren</ref><sp/><sp/><sp/><sp/>?<sp/>1U<sp/>:<sp/>0U)<sp/>&lt;&lt;<sp/>QSPI_ADDRCONF_WREN_Pos;</highlight></codeline>
<codeline lineno="814"><highlight class="normal"></highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;ADDRCONF<sp/>=<sp/>config;</highlight></codeline>
<codeline lineno="816"><highlight class="normal">}</highlight></codeline>
<codeline lineno="817"><highlight class="normal"></highlight></codeline>
<codeline lineno="818"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__qspi__hal_1ga0ef34305d49c451fa8a12d21a6c0adc3" kindref="member">nrf_qspi_write_buffer_set</ref>(NRF_QSPI_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>*<sp/>p_buffer,</highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>length,</highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dest_addr)</highlight></codeline>
<codeline lineno="822"><highlight class="normal">{</highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;WRITE.DST<sp/>=<sp/>dest_addr;</highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;WRITE.SRC<sp/>=<sp/>(uint32_t)<sp/>p_buffer;</highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;WRITE.CNT<sp/>=<sp/>length;</highlight></codeline>
<codeline lineno="826"><highlight class="normal">}</highlight></codeline>
<codeline lineno="827"><highlight class="normal"></highlight></codeline>
<codeline lineno="828"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__qspi__hal_1ga08f5dabe6572fa84344f7ba00cdd3353" kindref="member">nrf_qspi_read_buffer_set</ref>(NRF_QSPI_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>p_buffer,</highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>length,</highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>src_addr)</highlight></codeline>
<codeline lineno="832"><highlight class="normal">{</highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;READ.SRC<sp/>=<sp/>src_addr;</highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;READ.DST<sp/>=<sp/>(uint32_t)<sp/>p_buffer;</highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;READ.CNT<sp/>=<sp/>length;</highlight></codeline>
<codeline lineno="836"><highlight class="normal">}</highlight></codeline>
<codeline lineno="837"><highlight class="normal"></highlight></codeline>
<codeline lineno="838"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__qspi__hal_1gaa749f360b574b95bfd768cb7ec0a31f1" kindref="member">nrf_qspi_erase_ptr_set</ref>(NRF_QSPI_Type<sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>erase_addr,</highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__qspi__hal_1gabe68b50d3c5f07a5c946916eac125ebc" kindref="member">nrf_qspi_erase_len_t</ref><sp/>len)</highlight></codeline>
<codeline lineno="841"><highlight class="normal">{</highlight></codeline>
<codeline lineno="842"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;ERASE.PTR<sp/>=<sp/>erase_addr;</highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;ERASE.LEN<sp/>=<sp/>len;</highlight></codeline>
<codeline lineno="844"><highlight class="normal">}</highlight></codeline>
<codeline lineno="845"><highlight class="normal"></highlight></codeline>
<codeline lineno="846"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__qspi__hal_1gaa9b1c1962520d1c974b3b070f13cfa7f" kindref="member">nrf_qspi_erase_ptr_get</ref>(NRF_QSPI_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="847"><highlight class="normal">{</highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p_reg-&gt;ERASE.PTR;</highlight></codeline>
<codeline lineno="849"><highlight class="normal">}</highlight></codeline>
<codeline lineno="850"><highlight class="normal"></highlight></codeline>
<codeline lineno="851"><highlight class="normal">NRF_STATIC_INLINE<sp/><ref refid="group__nrf__qspi__hal_1gabe68b50d3c5f07a5c946916eac125ebc" kindref="member">nrf_qspi_erase_len_t</ref><sp/><ref refid="group__nrf__qspi__hal_1ga3a25b106830dd855be39383e4a4b432c" kindref="member">nrf_qspi_erase_len_get</ref>(NRF_QSPI_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="852"><highlight class="normal">{</highlight></codeline>
<codeline lineno="853"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="group__nrf__qspi__hal_1gabe68b50d3c5f07a5c946916eac125ebc" kindref="member">nrf_qspi_erase_len_t</ref>)p_reg-&gt;ERASE.LEN;</highlight></codeline>
<codeline lineno="854"><highlight class="normal">}</highlight></codeline>
<codeline lineno="855"><highlight class="normal"></highlight></codeline>
<codeline lineno="856"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__qspi__hal_1ga4ae65a740c1c17508fb72cbe54bc0bf8" kindref="member">nrf_qspi_status_reg_get</ref>(NRF_QSPI_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="857"><highlight class="normal">{</highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p_reg-&gt;STATUS;</highlight></codeline>
<codeline lineno="859"><highlight class="normal">}</highlight></codeline>
<codeline lineno="860"><highlight class="normal"></highlight></codeline>
<codeline lineno="861"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint8_t<sp/><ref refid="group__nrf__qspi__hal_1ga9672989a6a2d4f1cb1b9bb1b315bf0e3" kindref="member">nrf_qspi_sreg_get</ref>(NRF_QSPI_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="862"><highlight class="normal">{</highlight></codeline>
<codeline lineno="863"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(uint8_t)(p_reg-&gt;STATUS<sp/>&amp;<sp/>QSPI_STATUS_SREG_Msk)<sp/>&gt;&gt;<sp/>QSPI_STATUS_SREG_Pos;</highlight></codeline>
<codeline lineno="864"><highlight class="normal">}</highlight></codeline>
<codeline lineno="865"><highlight class="normal"></highlight></codeline>
<codeline lineno="866"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrf__qspi__hal_1ga934b17a7ab98e1cd9d6a3a08fabb058b" kindref="member">nrf_qspi_busy_check</ref>(NRF_QSPI_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="867"><highlight class="normal">{</highlight></codeline>
<codeline lineno="868"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((p_reg-&gt;STATUS<sp/>&amp;<sp/>QSPI_STATUS_READY_Msk)<sp/>&gt;&gt;</highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QSPI_STATUS_READY_Pos)<sp/>==<sp/>QSPI_STATUS_READY_BUSY;</highlight></codeline>
<codeline lineno="870"><highlight class="normal">}</highlight></codeline>
<codeline lineno="871"><highlight class="normal"></highlight></codeline>
<codeline lineno="872"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__qspi__hal_1gaa4f1a4c85c69335f8764693e4d7f9153" kindref="member">nrf_qspi_cinstrdata_set</ref>(NRF_QSPI_Type<sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="873"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__qspi__hal_1ga290902bf6e6edc2202de3fc9a91fb180" kindref="member">nrf_qspi_cinstr_len_t</ref><sp/>length,</highlight></codeline>
<codeline lineno="874"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_tx_data)</highlight></codeline>
<codeline lineno="875"><highlight class="normal">{</highlight></codeline>
<codeline lineno="876"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>reg<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="877"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*p_tx_data_8<sp/>=<sp/>(uint8_t<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*)<sp/>p_tx_data;</highlight></codeline>
<codeline lineno="878"><highlight class="normal"></highlight></codeline>
<codeline lineno="879"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Load<sp/>custom<sp/>instruction.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="880"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(length)</highlight></codeline>
<codeline lineno="881"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="882"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__nrf__qspi__hal_1gga290902bf6e6edc2202de3fc9a91fb180a71914e96398f6a34c9c1b8a85dfb2efa" kindref="member">NRF_QSPI_CINSTR_LEN_9B</ref>:</highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reg<sp/>|=<sp/>((uint32_t)p_tx_data_8[7])<sp/>&lt;&lt;<sp/>QSPI_CINSTRDAT1_BYTE7_Pos;</highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>FALLTHROUGH<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="885"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__nrf__qspi__hal_1gga290902bf6e6edc2202de3fc9a91fb180ae1edb917cfb65800c8b855637ea502f2" kindref="member">NRF_QSPI_CINSTR_LEN_8B</ref>:</highlight></codeline>
<codeline lineno="886"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reg<sp/>|=<sp/>((uint32_t)p_tx_data_8[6])<sp/>&lt;&lt;<sp/>QSPI_CINSTRDAT1_BYTE6_Pos;</highlight></codeline>
<codeline lineno="887"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>FALLTHROUGH<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="888"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__nrf__qspi__hal_1gga290902bf6e6edc2202de3fc9a91fb180a0b781fa0afbdd7f75604b325c0d00037" kindref="member">NRF_QSPI_CINSTR_LEN_7B</ref>:</highlight></codeline>
<codeline lineno="889"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reg<sp/>|=<sp/>((uint32_t)p_tx_data_8[5])<sp/>&lt;&lt;<sp/>QSPI_CINSTRDAT1_BYTE5_Pos;</highlight></codeline>
<codeline lineno="890"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>FALLTHROUGH<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="891"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__nrf__qspi__hal_1gga290902bf6e6edc2202de3fc9a91fb180ac9c7a6ee9bea0c9800b145614311c197" kindref="member">NRF_QSPI_CINSTR_LEN_6B</ref>:</highlight></codeline>
<codeline lineno="892"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reg<sp/>|=<sp/>((uint32_t)p_tx_data_8[4]);</highlight></codeline>
<codeline lineno="893"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_reg-&gt;CINSTRDAT1<sp/>=<sp/>reg;</highlight></codeline>
<codeline lineno="894"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reg<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="895"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>FALLTHROUGH<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="896"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__nrf__qspi__hal_1gga290902bf6e6edc2202de3fc9a91fb180a40b9fb3006a5ec6a61be73e989c573ab" kindref="member">NRF_QSPI_CINSTR_LEN_5B</ref>:</highlight></codeline>
<codeline lineno="897"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reg<sp/>|=<sp/>((uint32_t)p_tx_data_8[3])<sp/>&lt;&lt;<sp/>QSPI_CINSTRDAT0_BYTE3_Pos;</highlight></codeline>
<codeline lineno="898"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>FALLTHROUGH<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="899"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__nrf__qspi__hal_1gga290902bf6e6edc2202de3fc9a91fb180a86a8bfcb78afb426d5b2c416d827894b" kindref="member">NRF_QSPI_CINSTR_LEN_4B</ref>:</highlight></codeline>
<codeline lineno="900"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reg<sp/>|=<sp/>((uint32_t)p_tx_data_8[2])<sp/>&lt;&lt;<sp/>QSPI_CINSTRDAT0_BYTE2_Pos;</highlight></codeline>
<codeline lineno="901"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>FALLTHROUGH<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="902"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__nrf__qspi__hal_1gga290902bf6e6edc2202de3fc9a91fb180a166eb02321878105454c66e1ab662792" kindref="member">NRF_QSPI_CINSTR_LEN_3B</ref>:</highlight></codeline>
<codeline lineno="903"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reg<sp/>|=<sp/>((uint32_t)p_tx_data_8[1])<sp/>&lt;&lt;<sp/>QSPI_CINSTRDAT0_BYTE1_Pos;</highlight></codeline>
<codeline lineno="904"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>FALLTHROUGH<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="905"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__nrf__qspi__hal_1gga290902bf6e6edc2202de3fc9a91fb180a53fe71dcd5a830ef892f31a8ccf60be7" kindref="member">NRF_QSPI_CINSTR_LEN_2B</ref>:</highlight></codeline>
<codeline lineno="906"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reg<sp/>|=<sp/>((uint32_t)p_tx_data_8[0]);</highlight></codeline>
<codeline lineno="907"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_reg-&gt;CINSTRDAT0<sp/>=<sp/>reg;</highlight></codeline>
<codeline lineno="908"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>FALLTHROUGH<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="909"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__nrf__qspi__hal_1gga290902bf6e6edc2202de3fc9a91fb180a5bf21927cf310039c4277d1e73f6be18" kindref="member">NRF_QSPI_CINSTR_LEN_1B</ref>:</highlight></codeline>
<codeline lineno="910"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Send<sp/>only<sp/>opcode.<sp/>Case<sp/>to<sp/>avoid<sp/>compiler<sp/>warnings.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="911"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="912"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="913"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="914"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="915"><highlight class="normal">}</highlight></codeline>
<codeline lineno="916"><highlight class="normal"></highlight></codeline>
<codeline lineno="917"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__qspi__hal_1ga18d2bf58bdaeb284fa0bcc5b84d397f8" kindref="member">nrf_qspi_cinstrdata_get</ref>(NRF_QSPI_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="918"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__qspi__hal_1ga290902bf6e6edc2202de3fc9a91fb180" kindref="member">nrf_qspi_cinstr_len_t</ref><sp/>length,</highlight></codeline>
<codeline lineno="919"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_rx_data)</highlight></codeline>
<codeline lineno="920"><highlight class="normal">{</highlight></codeline>
<codeline lineno="921"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>*p_rx_data_8<sp/>=<sp/>(uint8_t<sp/>*)<sp/>p_rx_data;</highlight></codeline>
<codeline lineno="922"><highlight class="normal"></highlight></codeline>
<codeline lineno="923"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>reg1<sp/>=<sp/>p_reg-&gt;CINSTRDAT1;</highlight></codeline>
<codeline lineno="924"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>reg0<sp/>=<sp/>p_reg-&gt;CINSTRDAT0;</highlight></codeline>
<codeline lineno="925"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(length)</highlight></codeline>
<codeline lineno="926"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="927"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__nrf__qspi__hal_1gga290902bf6e6edc2202de3fc9a91fb180a71914e96398f6a34c9c1b8a85dfb2efa" kindref="member">NRF_QSPI_CINSTR_LEN_9B</ref>:</highlight></codeline>
<codeline lineno="928"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_rx_data_8[7]<sp/>=<sp/>(uint8_t)(reg1<sp/>&gt;&gt;<sp/>QSPI_CINSTRDAT1_BYTE7_Pos);</highlight></codeline>
<codeline lineno="929"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>FALLTHROUGH<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="930"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__nrf__qspi__hal_1gga290902bf6e6edc2202de3fc9a91fb180ae1edb917cfb65800c8b855637ea502f2" kindref="member">NRF_QSPI_CINSTR_LEN_8B</ref>:</highlight></codeline>
<codeline lineno="931"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_rx_data_8[6]<sp/>=<sp/>(uint8_t)(reg1<sp/>&gt;&gt;<sp/>QSPI_CINSTRDAT1_BYTE6_Pos);</highlight></codeline>
<codeline lineno="932"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>FALLTHROUGH<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="933"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__nrf__qspi__hal_1gga290902bf6e6edc2202de3fc9a91fb180a0b781fa0afbdd7f75604b325c0d00037" kindref="member">NRF_QSPI_CINSTR_LEN_7B</ref>:</highlight></codeline>
<codeline lineno="934"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_rx_data_8[5]<sp/>=<sp/>(uint8_t)(reg1<sp/>&gt;&gt;<sp/>QSPI_CINSTRDAT1_BYTE5_Pos);</highlight></codeline>
<codeline lineno="935"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>FALLTHROUGH<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="936"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__nrf__qspi__hal_1gga290902bf6e6edc2202de3fc9a91fb180ac9c7a6ee9bea0c9800b145614311c197" kindref="member">NRF_QSPI_CINSTR_LEN_6B</ref>:</highlight></codeline>
<codeline lineno="937"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_rx_data_8[4]<sp/>=<sp/>(uint8_t)(reg1);</highlight></codeline>
<codeline lineno="938"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>FALLTHROUGH<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="939"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__nrf__qspi__hal_1gga290902bf6e6edc2202de3fc9a91fb180a40b9fb3006a5ec6a61be73e989c573ab" kindref="member">NRF_QSPI_CINSTR_LEN_5B</ref>:</highlight></codeline>
<codeline lineno="940"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_rx_data_8[3]<sp/>=<sp/>(uint8_t)(reg0<sp/>&gt;&gt;<sp/>QSPI_CINSTRDAT0_BYTE3_Pos);</highlight></codeline>
<codeline lineno="941"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>FALLTHROUGH<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="942"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__nrf__qspi__hal_1gga290902bf6e6edc2202de3fc9a91fb180a86a8bfcb78afb426d5b2c416d827894b" kindref="member">NRF_QSPI_CINSTR_LEN_4B</ref>:</highlight></codeline>
<codeline lineno="943"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_rx_data_8[2]<sp/>=<sp/>(uint8_t)(reg0<sp/>&gt;&gt;<sp/>QSPI_CINSTRDAT0_BYTE2_Pos);</highlight></codeline>
<codeline lineno="944"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>FALLTHROUGH<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="945"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__nrf__qspi__hal_1gga290902bf6e6edc2202de3fc9a91fb180a166eb02321878105454c66e1ab662792" kindref="member">NRF_QSPI_CINSTR_LEN_3B</ref>:</highlight></codeline>
<codeline lineno="946"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_rx_data_8[1]<sp/>=<sp/>(uint8_t)(reg0<sp/>&gt;&gt;<sp/>QSPI_CINSTRDAT0_BYTE1_Pos);</highlight></codeline>
<codeline lineno="947"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>FALLTHROUGH<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="948"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__nrf__qspi__hal_1gga290902bf6e6edc2202de3fc9a91fb180a53fe71dcd5a830ef892f31a8ccf60be7" kindref="member">NRF_QSPI_CINSTR_LEN_2B</ref>:</highlight></codeline>
<codeline lineno="949"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_rx_data_8[0]<sp/>=<sp/>(uint8_t)(reg0);</highlight></codeline>
<codeline lineno="950"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>FALLTHROUGH<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="951"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__nrf__qspi__hal_1gga290902bf6e6edc2202de3fc9a91fb180a5bf21927cf310039c4277d1e73f6be18" kindref="member">NRF_QSPI_CINSTR_LEN_1B</ref>:</highlight></codeline>
<codeline lineno="952"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Send<sp/>only<sp/>opcode.<sp/>Case<sp/>to<sp/>avoid<sp/>compiler<sp/>warnings.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="953"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="954"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="955"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="956"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="957"><highlight class="normal">}</highlight></codeline>
<codeline lineno="958"><highlight class="normal"></highlight></codeline>
<codeline lineno="959"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__qspi__hal_1ga1abc53437cf85194e4d239600e67321f" kindref="member">nrf_qspi_cinstr_transfer_start</ref>(NRF_QSPI_Type<sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="960"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structnrf__qspi__cinstr__conf__t" kindref="compound">nrf_qspi_cinstr_conf_t</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_config)</highlight></codeline>
<codeline lineno="961"><highlight class="normal">{</highlight></codeline>
<codeline lineno="962"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;CINSTRCONF<sp/>=<sp/>(((uint32_t)p_config-&gt;<ref refid="structnrf__qspi__cinstr__conf__t_1a2c9212298aaae1aaa36f2fff60e173fd" kindref="member">opcode</ref><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>QSPI_CINSTRCONF_OPCODE_Pos)<sp/>|</highlight></codeline>
<codeline lineno="963"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)p_config-&gt;<ref refid="structnrf__qspi__cinstr__conf__t_1a86d195ef09cf482514ddcdfbc4a4ef55" kindref="member">length</ref><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>QSPI_CINSTRCONF_LENGTH_Pos)<sp/>|</highlight></codeline>
<codeline lineno="964"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)p_config-&gt;<ref refid="structnrf__qspi__cinstr__conf__t_1a2c5fa17d771e63996c8205dd99f4f704" kindref="member">io2_level</ref><sp/>&lt;&lt;<sp/>QSPI_CINSTRCONF_LIO2_Pos)<sp/>|</highlight></codeline>
<codeline lineno="965"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)p_config-&gt;<ref refid="structnrf__qspi__cinstr__conf__t_1a2abef18e491b7257bce865bc32f493d2" kindref="member">io3_level</ref><sp/>&lt;&lt;<sp/>QSPI_CINSTRCONF_LIO3_Pos)<sp/>|</highlight></codeline>
<codeline lineno="966"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)p_config-&gt;<ref refid="structnrf__qspi__cinstr__conf__t_1aa3bdb8f1fde53371deec674d4ae0f36f" kindref="member">wipwait</ref><sp/><sp/><sp/>&lt;&lt;<sp/>QSPI_CINSTRCONF_WIPWAIT_Pos)<sp/>|</highlight></codeline>
<codeline lineno="967"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)p_config-&gt;<ref refid="structnrf__qspi__cinstr__conf__t_1a36c273a315aea75eb4832bdb541dc6b4" kindref="member">wren</ref><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>QSPI_CINSTRCONF_WREN_Pos));</highlight></codeline>
<codeline lineno="968"><highlight class="normal">}</highlight></codeline>
<codeline lineno="969"><highlight class="normal"></highlight></codeline>
<codeline lineno="970"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__qspi__hal_1ga1e5568c28d5e92abedc4904f73ee639f" kindref="member">nrf_qspi_cinstr_long_transfer_start</ref>(NRF_QSPI_Type<sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="971"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structnrf__qspi__cinstr__conf__t" kindref="compound">nrf_qspi_cinstr_conf_t</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_config)</highlight></codeline>
<codeline lineno="972"><highlight class="normal">{</highlight></codeline>
<codeline lineno="973"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;CINSTRCONF<sp/>=<sp/>(((uint32_t)p_config-&gt;<ref refid="structnrf__qspi__cinstr__conf__t_1a2c9212298aaae1aaa36f2fff60e173fd" kindref="member">opcode</ref><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>QSPI_CINSTRCONF_OPCODE_Pos)<sp/>|</highlight></codeline>
<codeline lineno="974"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)p_config-&gt;<ref refid="structnrf__qspi__cinstr__conf__t_1a86d195ef09cf482514ddcdfbc4a4ef55" kindref="member">length</ref><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>QSPI_CINSTRCONF_LENGTH_Pos)<sp/>|</highlight></codeline>
<codeline lineno="975"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)p_config-&gt;<ref refid="structnrf__qspi__cinstr__conf__t_1a2c5fa17d771e63996c8205dd99f4f704" kindref="member">io2_level</ref><sp/>&lt;&lt;<sp/>QSPI_CINSTRCONF_LIO2_Pos)<sp/>|</highlight></codeline>
<codeline lineno="976"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)p_config-&gt;<ref refid="structnrf__qspi__cinstr__conf__t_1a2abef18e491b7257bce865bc32f493d2" kindref="member">io3_level</ref><sp/>&lt;&lt;<sp/>QSPI_CINSTRCONF_LIO3_Pos)<sp/>|</highlight></codeline>
<codeline lineno="977"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)p_config-&gt;<ref refid="structnrf__qspi__cinstr__conf__t_1aa3bdb8f1fde53371deec674d4ae0f36f" kindref="member">wipwait</ref><sp/><sp/><sp/>&lt;&lt;<sp/>QSPI_CINSTRCONF_WIPWAIT_Pos)<sp/>|</highlight></codeline>
<codeline lineno="978"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)p_config-&gt;<ref refid="structnrf__qspi__cinstr__conf__t_1a36c273a315aea75eb4832bdb541dc6b4" kindref="member">wren</ref><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>QSPI_CINSTRCONF_WREN_Pos)<sp/>|</highlight></codeline>
<codeline lineno="979"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(QSPI_CINSTRCONF_LFEN_Msk));</highlight></codeline>
<codeline lineno="980"><highlight class="normal">}</highlight></codeline>
<codeline lineno="981"><highlight class="normal"></highlight></codeline>
<codeline lineno="982"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrf__qspi__hal_1ga83f0a976c5d1b7694186ac5e575bbb42" kindref="member">nrf_qspi_cinstr_long_transfer_is_ongoing</ref>(NRF_QSPI_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="983"><highlight class="normal">{</highlight></codeline>
<codeline lineno="984"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">)((p_reg-&gt;CINSTRCONF<sp/>&amp;<sp/>(QSPI_CINSTRCONF_LFEN_Msk<sp/>|<sp/>QSPI_CINSTRCONF_LFSTOP_Msk))</highlight></codeline>
<codeline lineno="985"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>==<sp/>QSPI_CINSTRCONF_LFEN_Msk);</highlight></codeline>
<codeline lineno="986"><highlight class="normal">}</highlight></codeline>
<codeline lineno="987"><highlight class="normal"></highlight></codeline>
<codeline lineno="988"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__qspi__hal_1ga592ca0370403b99862c5212d46b46ac5" kindref="member">nrf_qspi_cinstr_long_transfer_continue</ref>(NRF_QSPI_Type<sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="989"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__qspi__hal_1ga290902bf6e6edc2202de3fc9a91fb180" kindref="member">nrf_qspi_cinstr_len_t</ref><sp/>length,</highlight></codeline>
<codeline lineno="990"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>finalize)</highlight></codeline>
<codeline lineno="991"><highlight class="normal">{</highlight></codeline>
<codeline lineno="992"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>mask<sp/>=<sp/>(((uint32_t)length<sp/>&lt;&lt;<sp/>QSPI_CINSTRCONF_LENGTH_Pos)<sp/>|<sp/>(QSPI_CINSTRCONF_LFEN_Msk));</highlight></codeline>
<codeline lineno="993"><highlight class="normal"><sp/><sp/><sp/><sp/>mask<sp/>|=<sp/>(finalize<sp/>?<sp/>QSPI_CINSTRCONF_LFSTOP_Msk<sp/>:<sp/>0);</highlight></codeline>
<codeline lineno="994"><highlight class="normal"></highlight></codeline>
<codeline lineno="995"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;CINSTRCONF<sp/>=<sp/>mask;</highlight></codeline>
<codeline lineno="996"><highlight class="normal">}</highlight></codeline>
<codeline lineno="997"><highlight class="normal"></highlight></codeline>
<codeline lineno="998"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_QSPI_HAS_XIPEN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="999"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__qspi__hal_1gaabf69606afa7753c03ca5555abbe1741" kindref="member">nrf_qspi_xip_set</ref>(NRF_QSPI_Type<sp/>*<sp/>p_reg,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>enable)</highlight></codeline>
<codeline lineno="1000"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1001"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;XIPEN<sp/>=<sp/>(enable<sp/>?<sp/>QSPI_XIPEN_XIPEN_Enable<sp/>&lt;&lt;<sp/>QSPI_XIPEN_XIPEN_Pos</highlight></codeline>
<codeline lineno="1002"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>QSPI_XIPEN_XIPEN_Disable<sp/>&lt;&lt;<sp/>QSPI_XIPEN_XIPEN_Pos);</highlight></codeline>
<codeline lineno="1003"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1004"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1005"><highlight class="normal"></highlight></codeline>
<codeline lineno="1006"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_QSPI_HAS_XIP_ENC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1007"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__qspi__hal_1ga64b7138fa30f03935b1824138405c4cc" kindref="member">nrf_qspi_xip_encryption_configure</ref>(NRF_QSPI_Type<sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="1008"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structnrf__qspi__encryption__t" kindref="compound">nrf_qspi_encryption_t</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_cfg)</highlight></codeline>
<codeline lineno="1009"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1010"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;XIP_ENC.KEY0<sp/>=<sp/>p_cfg-&gt;<ref refid="structnrf__qspi__encryption__t_1a465ec650038d9e9a4de3e72dd15b07f1" kindref="member">key</ref>[0];</highlight></codeline>
<codeline lineno="1011"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;XIP_ENC.KEY1<sp/>=<sp/>p_cfg-&gt;<ref refid="structnrf__qspi__encryption__t_1a465ec650038d9e9a4de3e72dd15b07f1" kindref="member">key</ref>[1];</highlight></codeline>
<codeline lineno="1012"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;XIP_ENC.KEY2<sp/>=<sp/>p_cfg-&gt;<ref refid="structnrf__qspi__encryption__t_1a465ec650038d9e9a4de3e72dd15b07f1" kindref="member">key</ref>[2];</highlight></codeline>
<codeline lineno="1013"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;XIP_ENC.KEY3<sp/>=<sp/>p_cfg-&gt;<ref refid="structnrf__qspi__encryption__t_1a465ec650038d9e9a4de3e72dd15b07f1" kindref="member">key</ref>[3];</highlight></codeline>
<codeline lineno="1014"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;XIP_ENC.NONCE0<sp/>=<sp/>p_cfg-&gt;<ref refid="structnrf__qspi__encryption__t_1aa434187c229b84a17179a07a5dd4c00c" kindref="member">nonce</ref>[0];</highlight></codeline>
<codeline lineno="1015"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;XIP_ENC.NONCE1<sp/>=<sp/>p_cfg-&gt;<ref refid="structnrf__qspi__encryption__t_1aa434187c229b84a17179a07a5dd4c00c" kindref="member">nonce</ref>[1];</highlight></codeline>
<codeline lineno="1016"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;XIP_ENC.NONCE2<sp/>=<sp/>p_cfg-&gt;<ref refid="structnrf__qspi__encryption__t_1aa434187c229b84a17179a07a5dd4c00c" kindref="member">nonce</ref>[2];</highlight></codeline>
<codeline lineno="1017"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1018"><highlight class="normal"></highlight></codeline>
<codeline lineno="1019"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__qspi__hal_1gadde1e48d01f1c2c908c8dd0d68674ef5" kindref="member">nrf_qspi_xip_encryption_set</ref>(NRF_QSPI_Type<sp/>*<sp/>p_reg,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>enable)</highlight></codeline>
<codeline lineno="1020"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1021"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;XIP_ENC.ENABLE<sp/>=</highlight></codeline>
<codeline lineno="1022"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(enable<sp/>?<sp/>QSPI_XIP_ENC_ENABLE_ENABLE_Enabled<sp/>&lt;&lt;<sp/>QSPI_XIP_ENC_ENABLE_ENABLE_Pos</highlight></codeline>
<codeline lineno="1023"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>QSPI_XIP_ENC_ENABLE_ENABLE_Disabled<sp/>&lt;&lt;<sp/>QSPI_XIP_ENC_ENABLE_ENABLE_Pos);</highlight></codeline>
<codeline lineno="1024"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1025"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1026"><highlight class="normal"></highlight></codeline>
<codeline lineno="1027"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_QSPI_HAS_DMA_ENC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1028"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__qspi__hal_1ga432a8504c558244eb0ec0956a3122bd7" kindref="member">nrf_qspi_dma_encryption_configure</ref>(NRF_QSPI_Type<sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="1029"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structnrf__qspi__encryption__t" kindref="compound">nrf_qspi_encryption_t</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_cfg)</highlight></codeline>
<codeline lineno="1030"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1031"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;DMA_ENC.KEY0<sp/>=<sp/>p_cfg-&gt;<ref refid="structnrf__qspi__encryption__t_1a465ec650038d9e9a4de3e72dd15b07f1" kindref="member">key</ref>[0];</highlight></codeline>
<codeline lineno="1032"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;DMA_ENC.KEY1<sp/>=<sp/>p_cfg-&gt;<ref refid="structnrf__qspi__encryption__t_1a465ec650038d9e9a4de3e72dd15b07f1" kindref="member">key</ref>[1];</highlight></codeline>
<codeline lineno="1033"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;DMA_ENC.KEY2<sp/>=<sp/>p_cfg-&gt;<ref refid="structnrf__qspi__encryption__t_1a465ec650038d9e9a4de3e72dd15b07f1" kindref="member">key</ref>[2];</highlight></codeline>
<codeline lineno="1034"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;DMA_ENC.KEY3<sp/>=<sp/>p_cfg-&gt;<ref refid="structnrf__qspi__encryption__t_1a465ec650038d9e9a4de3e72dd15b07f1" kindref="member">key</ref>[3];</highlight></codeline>
<codeline lineno="1035"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;DMA_ENC.NONCE0<sp/>=<sp/>p_cfg-&gt;<ref refid="structnrf__qspi__encryption__t_1aa434187c229b84a17179a07a5dd4c00c" kindref="member">nonce</ref>[0];</highlight></codeline>
<codeline lineno="1036"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;DMA_ENC.NONCE1<sp/>=<sp/>p_cfg-&gt;<ref refid="structnrf__qspi__encryption__t_1aa434187c229b84a17179a07a5dd4c00c" kindref="member">nonce</ref>[1];</highlight></codeline>
<codeline lineno="1037"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;DMA_ENC.NONCE2<sp/>=<sp/>p_cfg-&gt;<ref refid="structnrf__qspi__encryption__t_1aa434187c229b84a17179a07a5dd4c00c" kindref="member">nonce</ref>[2];</highlight></codeline>
<codeline lineno="1038"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1039"><highlight class="normal"></highlight></codeline>
<codeline lineno="1040"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__qspi__hal_1ga1d7b95b36402b460fe5abd4cbbc7fcd8" kindref="member">nrf_qspi_dma_encryption_set</ref>(NRF_QSPI_Type<sp/>*<sp/>p_reg,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>enable)</highlight></codeline>
<codeline lineno="1041"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1042"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;DMA_ENC.ENABLE<sp/>=</highlight></codeline>
<codeline lineno="1043"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(enable<sp/>?<sp/>QSPI_DMA_ENC_ENABLE_ENABLE_Enabled<sp/>&lt;&lt;<sp/>QSPI_DMA_ENC_ENABLE_ENABLE_Pos</highlight></codeline>
<codeline lineno="1044"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>QSPI_DMA_ENC_ENABLE_ENABLE_Disabled<sp/>&lt;&lt;<sp/>QSPI_DMA_ENC_ENABLE_ENABLE_Pos);</highlight></codeline>
<codeline lineno="1045"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1046"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1047"><highlight class="normal"></highlight></codeline>
<codeline lineno="1048"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__qspi__hal_1gaf8ab06442e0afdbaeda89996f69d1236" kindref="member">nrf_qspi_iftiming_set</ref>(NRF_QSPI_Type<sp/>*<sp/>p_reg,<sp/>uint8_t<sp/>rxdelay)</highlight></codeline>
<codeline lineno="1049"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1050"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;IFTIMING<sp/>=<sp/>((uint32_t)rxdelay<sp/>&lt;&lt;<sp/>QSPI_IFTIMING_RXDELAY_Pos)<sp/>&amp;<sp/>QSPI_IFTIMING_RXDELAY_Msk;</highlight></codeline>
<codeline lineno="1051"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1052"><highlight class="normal"></highlight></codeline>
<codeline lineno="1053"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRF_DECLARE_ONLY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1054"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1055"><highlight class="comment">/**<sp/>@}<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1056"><highlight class="normal"></highlight></codeline>
<codeline lineno="1057"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1058"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1059"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1060"><highlight class="normal"></highlight></codeline>
<codeline lineno="1061"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRF_QSPI_H__</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="hal/nrf_qspi.h"/>
  </compounddef>
</doxygen>
