<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="group__nrf__spi__hal" kind="group">
    <compoundname>nrf_spi_hal</compoundname>
    <title>SPI HAL</title>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="group__nrf__spi__hal_1gafe5b5e71a1dc3192a625c3fe891c6049" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_spi_event_t</name>
        <enumvalue id="group__nrf__spi__hal_1ggafe5b5e71a1dc3192a625c3fe891c6049ad17759023d619f293a32c8bc618daca1" prot="public">
          <name>NRF_SPI_EVENT_READY</name>
          <initializer>= offsetof(NRF_SPI_Type, EVENTS_READY)</initializer>
          <briefdescription>
<para>TXD byte sent and RXD byte received. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>SPI events. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_spi.h" line="68" column="1" bodyfile="hal/nrf_spi.h" bodystart="69" bodyend="71"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__spi__hal_1ga18dacb09bf15adffa0a29ebadd922182" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_spi_int_mask_t</name>
        <enumvalue id="group__nrf__spi__hal_1gga18dacb09bf15adffa0a29ebadd922182a4b03880e330813f8240a28c4ecec47f4" prot="public">
          <name>NRF_SPI_INT_READY_MASK</name>
          <initializer>= SPI_INTENSET_READY_Msk</initializer>
          <briefdescription>
<para>Interrupt on READY event. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__spi__hal_1gga18dacb09bf15adffa0a29ebadd922182a87ed1bd37e0f14dfcfb0023eeb18e980" prot="public">
          <name>NRF_SPI_ALL_INTS_MASK</name>
          <initializer>= SPI_INTENSET_READY_Msk</initializer>
          <briefdescription>
<para>All SPI interrupts. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>SPI interrupts. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_spi.h" line="74" column="1" bodyfile="hal/nrf_spi.h" bodystart="75" bodyend="78"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__spi__hal_1ga5c6f9f9e348d18597dbfba3cc5bcd0b4" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_spi_frequency_t</name>
        <enumvalue id="group__nrf__spi__hal_1gga5c6f9f9e348d18597dbfba3cc5bcd0b4a269b4f569167cfe727763b5587e9bb92" prot="public">
          <name>NRF_SPI_FREQ_125K</name>
          <initializer>= SPI_FREQUENCY_FREQUENCY_K125</initializer>
          <briefdescription>
<para>125 kbps. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__spi__hal_1gga5c6f9f9e348d18597dbfba3cc5bcd0b4aff0749e37133f9b9acfbb0e574beecf6" prot="public">
          <name>NRF_SPI_FREQ_250K</name>
          <initializer>= SPI_FREQUENCY_FREQUENCY_K250</initializer>
          <briefdescription>
<para>250 kbps. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__spi__hal_1gga5c6f9f9e348d18597dbfba3cc5bcd0b4a3faf11cf640c9c51c2c44e69a1324c5c" prot="public">
          <name>NRF_SPI_FREQ_500K</name>
          <initializer>= SPI_FREQUENCY_FREQUENCY_K500</initializer>
          <briefdescription>
<para>500 kbps. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__spi__hal_1gga5c6f9f9e348d18597dbfba3cc5bcd0b4acdadb0fcb8e51d1369c95bbdb3129945" prot="public">
          <name>NRF_SPI_FREQ_1M</name>
          <initializer>= SPI_FREQUENCY_FREQUENCY_M1</initializer>
          <briefdescription>
<para>1 Mbps. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__spi__hal_1gga5c6f9f9e348d18597dbfba3cc5bcd0b4aeb98958346b130e4ff405b780b2819c0" prot="public">
          <name>NRF_SPI_FREQ_2M</name>
          <initializer>= SPI_FREQUENCY_FREQUENCY_M2</initializer>
          <briefdescription>
<para>2 Mbps. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__spi__hal_1gga5c6f9f9e348d18597dbfba3cc5bcd0b4a709b5432e00c7dd3680b7c7b4dd69f6f" prot="public">
          <name>NRF_SPI_FREQ_4M</name>
          <initializer>= SPI_FREQUENCY_FREQUENCY_M4</initializer>
          <briefdescription>
<para>4 Mbps. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__spi__hal_1gga5c6f9f9e348d18597dbfba3cc5bcd0b4a23180065e790883072e0566f0265f124" prot="public">
          <name>NRF_SPI_FREQ_8M</name>
          <initializer>= (int)SPI_FREQUENCY_FREQUENCY_M8</initializer>
          <briefdescription>
<para>8 Mbps. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>SPI data rates. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_spi.h" line="81" column="1" bodyfile="hal/nrf_spi.h" bodystart="82" bodyend="92"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__spi__hal_1ga5055eb6f1977377b06b0b73af428af89" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_spi_mode_t</name>
        <enumvalue id="group__nrf__spi__hal_1gga5055eb6f1977377b06b0b73af428af89ab115a86b4b527e571e5bed9565a0a3da" prot="public">
          <name>NRF_SPI_MODE_0</name>
          <briefdescription>
<para>SCK active high, sample on leading edge of clock. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__spi__hal_1gga5055eb6f1977377b06b0b73af428af89af306db591a56f69f3b346efee47c10c2" prot="public">
          <name>NRF_SPI_MODE_1</name>
          <briefdescription>
<para>SCK active high, sample on trailing edge of clock. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__spi__hal_1gga5055eb6f1977377b06b0b73af428af89a14cd2d90f34cb2fc299dc9f1c9ae1a3e" prot="public">
          <name>NRF_SPI_MODE_2</name>
          <briefdescription>
<para>SCK active low, sample on leading edge of clock. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__spi__hal_1gga5055eb6f1977377b06b0b73af428af89a758ecc7096f649bf9c6ff73b6f0a2e65" prot="public">
          <name>NRF_SPI_MODE_3</name>
          <briefdescription>
<para>SCK active low, sample on trailing edge of clock. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>SPI modes. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_spi.h" line="95" column="1" bodyfile="hal/nrf_spi.h" bodystart="96" bodyend="101"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__spi__hal_1ga6e0748e1f75f5fba4772e42e1781a3ae" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_spi_bit_order_t</name>
        <enumvalue id="group__nrf__spi__hal_1gga6e0748e1f75f5fba4772e42e1781a3aeae10c87be351a9b2fa59cc69800bcd0f5" prot="public">
          <name>NRF_SPI_BIT_ORDER_MSB_FIRST</name>
          <initializer>= SPI_CONFIG_ORDER_MsbFirst</initializer>
          <briefdescription>
<para>Most significant bit shifted out first. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__spi__hal_1gga6e0748e1f75f5fba4772e42e1781a3aea21d3fbc2f2e66155dc1dab1e2a08194d" prot="public">
          <name>NRF_SPI_BIT_ORDER_LSB_FIRST</name>
          <initializer>= SPI_CONFIG_ORDER_LsbFirst</initializer>
          <briefdescription>
<para>Least significant bit shifted out first. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>SPI bit orders. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_spi.h" line="104" column="1" bodyfile="hal/nrf_spi.h" bodystart="105" bodyend="108"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__nrf__spi__hal_1gabe1bc13b4f53305a9618ab614c118b46" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_spi_event_clear</definition>
        <argsstring>(NRF_SPI_Type *p_reg, nrf_spi_event_t event)</argsstring>
        <name>nrf_spi_event_clear</name>
        <param>
          <type>NRF_SPI_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__spi__hal_1gafe5b5e71a1dc3192a625c3fe891c6049" kindref="member">nrf_spi_event_t</ref></type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>Function for clearing the specified SPI event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event to be cleared. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_spi.h" line="271" column="24" bodyfile="hal/nrf_spi.h" bodystart="271" bodyend="276" declfile="hal/nrf_spi.h" declline="117" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__spi__hal_1ga2c0279f203631aa4ce05d0b1e20013f9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE bool</type>
        <definition>NRF_STATIC_INLINE bool nrf_spi_event_check</definition>
        <argsstring>(NRF_SPI_Type const *p_reg, nrf_spi_event_t event)</argsstring>
        <name>nrf_spi_event_check</name>
        <param>
          <type>NRF_SPI_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__spi__hal_1gafe5b5e71a1dc3192a625c3fe891c6049" kindref="member">nrf_spi_event_t</ref></type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>Function for retrieving the state of the SPI event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event to be checked.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>The event has been generated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>The event has not been generated. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_spi.h" line="278" column="24" bodyfile="hal/nrf_spi.h" bodystart="278" bodyend="282" declfile="hal/nrf_spi.h" declline="129" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__spi__hal_1gabe224ddbac3c703047996862b8cc65da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_spi_event_address_get</definition>
        <argsstring>(NRF_SPI_Type const *p_reg, nrf_spi_event_t event)</argsstring>
        <name>nrf_spi_event_address_get</name>
        <param>
          <type>NRF_SPI_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__spi__hal_1gafe5b5e71a1dc3192a625c3fe891c6049" kindref="member">nrf_spi_event_t</ref></type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>Function for getting the address of the specified SPI event register. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>The specified event.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Address of the specified event register. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_spi.h" line="284" column="28" bodyfile="hal/nrf_spi.h" bodystart="284" bodyend="288" declfile="hal/nrf_spi.h" declline="140" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__spi__hal_1ga7605f24a160489669892f88303a81994" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_spi_int_enable</definition>
        <argsstring>(NRF_SPI_Type *p_reg, uint32_t mask)</argsstring>
        <name>nrf_spi_int_enable</name>
        <param>
          <type>NRF_SPI_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Function for enabling the specified interrupts. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of interrupts to be enabled. Use <ref refid="group__nrf__spi__hal_1ga18dacb09bf15adffa0a29ebadd922182" kindref="member">nrf_spi_int_mask_t</ref> values for bit masking. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_spi.h" line="290" column="24" bodyfile="hal/nrf_spi.h" bodystart="290" bodyend="294" declfile="hal/nrf_spi.h" declline="150" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__spi__hal_1gae7426cd75b5cb5682e83f57cc12ba473" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_spi_int_disable</definition>
        <argsstring>(NRF_SPI_Type *p_reg, uint32_t mask)</argsstring>
        <name>nrf_spi_int_disable</name>
        <param>
          <type>NRF_SPI_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Function for disabling the specified interrupts. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of interrupts to be disabled. Use <ref refid="group__nrf__spi__hal_1ga18dacb09bf15adffa0a29ebadd922182" kindref="member">nrf_spi_int_mask_t</ref> values for bit masking. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_spi.h" line="296" column="24" bodyfile="hal/nrf_spi.h" bodystart="296" bodyend="300" declfile="hal/nrf_spi.h" declline="160" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__spi__hal_1gab4f4b78343f4203d75728a382426b73f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_spi_int_enable_check</definition>
        <argsstring>(NRF_SPI_Type const *p_reg, uint32_t mask)</argsstring>
        <name>nrf_spi_int_enable_check</name>
        <param>
          <type>NRF_SPI_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Function for checking if the specified interrupts are enabled. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of interrupts to be checked. Use <ref refid="group__nrf__spi__hal_1ga18dacb09bf15adffa0a29ebadd922182" kindref="member">nrf_spi_int_mask_t</ref> values for bit masking.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Mask of enabled interrupts. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_spi.h" line="302" column="28" bodyfile="hal/nrf_spi.h" bodystart="302" bodyend="305" declfile="hal/nrf_spi.h" declline="172" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__spi__hal_1gac5e397f5b2f4f5dbc5995d7b3d879aa0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_spi_enable</definition>
        <argsstring>(NRF_SPI_Type *p_reg)</argsstring>
        <name>nrf_spi_enable</name>
        <param>
          <type>NRF_SPI_Type *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for enabling the SPI peripheral. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_spi.h" line="307" column="24" bodyfile="hal/nrf_spi.h" bodystart="307" bodyend="310" declfile="hal/nrf_spi.h" declline="179" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__spi__hal_1gaacf588cf545dd79f5f3c26c3f62e03cb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_spi_disable</definition>
        <argsstring>(NRF_SPI_Type *p_reg)</argsstring>
        <name>nrf_spi_disable</name>
        <param>
          <type>NRF_SPI_Type *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for disabling the SPI peripheral. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_spi.h" line="312" column="24" bodyfile="hal/nrf_spi.h" bodystart="312" bodyend="315" declfile="hal/nrf_spi.h" declline="186" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__spi__hal_1ga71dd726bd69dcd9d839589c264e17054" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_spi_pins_set</definition>
        <argsstring>(NRF_SPI_Type *p_reg, uint32_t sck_pin, uint32_t mosi_pin, uint32_t miso_pin)</argsstring>
        <name>nrf_spi_pins_set</name>
        <param>
          <type>NRF_SPI_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>sck_pin</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mosi_pin</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>miso_pin</declname>
        </param>
        <briefdescription>
<para>Function for configuring SPI pins. </para>
        </briefdescription>
        <detaileddescription>
<para>If a given signal is not needed, pass the <ref refid="group__nrf__spi__hal_1gaf120aff6ab80a93b08e62345d99f59af" kindref="member">NRF_SPI_PIN_NOT_CONNECTED</ref> value instead of its pin number.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">sck_pin</parametername>
</parameternamelist>
<parameterdescription>
<para>SCK pin number. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mosi_pin</parametername>
</parameternamelist>
<parameterdescription>
<para>MOSI pin number. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">miso_pin</parametername>
</parameternamelist>
<parameterdescription>
<para>MISO pin number. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_spi.h" line="317" column="24" bodyfile="hal/nrf_spi.h" bodystart="317" bodyend="339" declfile="hal/nrf_spi.h" declline="199" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__spi__hal_1ga0eb0fffb6d79078ecd6ae1852ced2bfd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_spi_sck_pin_get</definition>
        <argsstring>(NRF_SPI_Type const *p_reg)</argsstring>
        <name>nrf_spi_sck_pin_get</name>
        <param>
          <type>NRF_SPI_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting the SCK pin selection. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>SCK pin selection; </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_spi.h" line="341" column="28" bodyfile="hal/nrf_spi.h" bodystart="341" bodyend="348" declfile="hal/nrf_spi.h" declline="211" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__spi__hal_1ga1ee0922ebed613f5672d8555be9be7fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_spi_mosi_pin_get</definition>
        <argsstring>(NRF_SPI_Type const *p_reg)</argsstring>
        <name>nrf_spi_mosi_pin_get</name>
        <param>
          <type>NRF_SPI_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting the MOSI pin selection. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>MOSI pin selection; </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_spi.h" line="350" column="28" bodyfile="hal/nrf_spi.h" bodystart="350" bodyend="357" declfile="hal/nrf_spi.h" declline="220" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__spi__hal_1ga93080686c37f590c9c82117601c4ae13" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_spi_miso_pin_get</definition>
        <argsstring>(NRF_SPI_Type const *p_reg)</argsstring>
        <name>nrf_spi_miso_pin_get</name>
        <param>
          <type>NRF_SPI_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting the MISO pin selection. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>MISO pin selection; </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_spi.h" line="359" column="28" bodyfile="hal/nrf_spi.h" bodystart="359" bodyend="366" declfile="hal/nrf_spi.h" declline="229" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__spi__hal_1ga4550c34ecc06543211056690b87f2bea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_spi_txd_set</definition>
        <argsstring>(NRF_SPI_Type *p_reg, uint8_t data)</argsstring>
        <name>nrf_spi_txd_set</name>
        <param>
          <type>NRF_SPI_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Function for writing data to the SPI transmitter register. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">data</parametername>
</parameternamelist>
<parameterdescription>
<para>TX data to send. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_spi.h" line="368" column="24" bodyfile="hal/nrf_spi.h" bodystart="368" bodyend="371" declfile="hal/nrf_spi.h" declline="237" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__spi__hal_1gaf12b015a2ddc82f66e1d09621f6e5219" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint8_t</type>
        <definition>NRF_STATIC_INLINE uint8_t nrf_spi_rxd_get</definition>
        <argsstring>(NRF_SPI_Type const *p_reg)</argsstring>
        <name>nrf_spi_rxd_get</name>
        <param>
          <type>NRF_SPI_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for reading data from the SPI receiver register. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>RX data received. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_spi.h" line="373" column="27" bodyfile="hal/nrf_spi.h" bodystart="373" bodyend="376" declfile="hal/nrf_spi.h" declline="246" declcolumn="27"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__spi__hal_1ga30cb841bd7b5bab6f5110fe8bcc90107" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_spi_frequency_set</definition>
        <argsstring>(NRF_SPI_Type *p_reg, nrf_spi_frequency_t frequency)</argsstring>
        <name>nrf_spi_frequency_set</name>
        <param>
          <type>NRF_SPI_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__spi__hal_1ga5c6f9f9e348d18597dbfba3cc5bcd0b4" kindref="member">nrf_spi_frequency_t</ref></type>
          <declname>frequency</declname>
        </param>
        <briefdescription>
<para>Function for setting the SPI master data rate. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">frequency</parametername>
</parameternamelist>
<parameterdescription>
<para>SPI frequency. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_spi.h" line="378" column="24" bodyfile="hal/nrf_spi.h" bodystart="378" bodyend="382" declfile="hal/nrf_spi.h" declline="254" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__spi__hal_1ga2c0e0aaa8d061d7eac4154cdf5aff9c6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_spi_configure</definition>
        <argsstring>(NRF_SPI_Type *p_reg, nrf_spi_mode_t spi_mode, nrf_spi_bit_order_t spi_bit_order)</argsstring>
        <name>nrf_spi_configure</name>
        <param>
          <type>NRF_SPI_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__spi__hal_1ga5055eb6f1977377b06b0b73af428af89" kindref="member">nrf_spi_mode_t</ref></type>
          <declname>spi_mode</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__spi__hal_1ga6e0748e1f75f5fba4772e42e1781a3ae" kindref="member">nrf_spi_bit_order_t</ref></type>
          <declname>spi_bit_order</declname>
        </param>
        <briefdescription>
<para>Function for setting the SPI configuration. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">spi_mode</parametername>
</parameternamelist>
<parameterdescription>
<para>SPI mode. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">spi_bit_order</parametername>
</parameternamelist>
<parameterdescription>
<para>SPI bit order. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_spi.h" line="384" column="24" bodyfile="hal/nrf_spi.h" bodystart="384" bodyend="414" declfile="hal/nrf_spi.h" declline="264" declcolumn="24"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__nrf__spi__hal_1gad94db120192100536608c45086221e58" prot="public" static="no">
        <name>NRF_SPI_INST_GET</name>
        <param><defname>idx</defname></param>
        <initializer><ref refid="group__nrfx__utils_1ga5ea61d0994f6fb1ab5ed59d44f6a7ce9" kindref="member">NRFX_CONCAT</ref>(NRF_, SPI, idx)</initializer>
        <briefdescription>
<para>Macro getting pointer to the structure of registers of the SPI peripheral. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">idx</parametername>
</parameternamelist>
<parameterdescription>
<para>SPI instance index.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to the structure of registers of the SPI peripheral. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_spi.h" line="57" column="9" bodyfile="hal/nrf_spi.h" bodystart="57" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__spi__hal_1gaf120aff6ab80a93b08e62345d99f59af" prot="public" static="no">
        <name>NRF_SPI_PIN_NOT_CONNECTED</name>
        <initializer>0xFFFFFFFF</initializer>
        <briefdescription>
<para>This value can be used as a parameter for the <ref refid="group__nrf__spi__hal_1ga71dd726bd69dcd9d839589c264e17054" kindref="member">nrf_spi_pins_set</ref> function to specify that a given SPI signal (SCK, MOSI, or MISO) shall not be connected to a physical pin. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_spi.h" line="64" column="9" bodyfile="hal/nrf_spi.h" bodystart="64" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Hardware access layer for managing the SPI peripheral. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
