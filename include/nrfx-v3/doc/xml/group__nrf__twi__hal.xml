<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="group__nrf__twi__hal" kind="group">
    <compoundname>nrf_twi_hal</compoundname>
    <title>TWI HAL</title>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="group__nrf__twi__hal_1gae6266e8808b35b0569d429787f90b893" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_twi_task_t</name>
        <enumvalue id="group__nrf__twi__hal_1ggae6266e8808b35b0569d429787f90b893a201e8a7ff503f8661047af936d76e2dc" prot="public">
          <name>NRF_TWI_TASK_STARTRX</name>
          <initializer>= offsetof(NRF_TWI_Type, TASKS_STARTRX)</initializer>
          <briefdescription>
<para>Start TWI receive sequence. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__twi__hal_1ggae6266e8808b35b0569d429787f90b893ac288209e0ce0af27233bec87f4b1e1ed" prot="public">
          <name>NRF_TWI_TASK_STARTTX</name>
          <initializer>= offsetof(NRF_TWI_Type, TASKS_STARTTX)</initializer>
          <briefdescription>
<para>Start TWI transmit sequence. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__twi__hal_1ggae6266e8808b35b0569d429787f90b893a4e93311f7d7ea32152cf8af4252657b5" prot="public">
          <name>NRF_TWI_TASK_STOP</name>
          <initializer>= offsetof(NRF_TWI_Type, TASKS_STOP)</initializer>
          <briefdescription>
<para>Stop TWI transaction. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__twi__hal_1ggae6266e8808b35b0569d429787f90b893ac9d28316081dd65cc00e5492483f64ec" prot="public">
          <name>NRF_TWI_TASK_SUSPEND</name>
          <initializer>= offsetof(NRF_TWI_Type, TASKS_SUSPEND)</initializer>
          <briefdescription>
<para>Suspend TWI transaction. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__twi__hal_1ggae6266e8808b35b0569d429787f90b893a39fefa44739a24006602109d224da4c7" prot="public">
          <name>NRF_TWI_TASK_RESUME</name>
          <initializer>= offsetof(NRF_TWI_Type, TASKS_RESUME)</initializer>
          <briefdescription>
<para>Resume TWI transaction. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>TWI tasks. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_twi.h" line="60" column="1" bodyfile="hal/nrf_twi.h" bodystart="61" bodyend="67"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__twi__hal_1ga8035974e843dbf6e39d61dc434030dcb" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_twi_event_t</name>
        <enumvalue id="group__nrf__twi__hal_1gga8035974e843dbf6e39d61dc434030dcba8b127fe5474429af0d573e640983eda2" prot="public">
          <name>NRF_TWI_EVENT_STOPPED</name>
          <initializer>= offsetof(NRF_TWI_Type, EVENTS_STOPPED)</initializer>
          <briefdescription>
<para>TWI stopped. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__twi__hal_1gga8035974e843dbf6e39d61dc434030dcba743cd2af5092db9287def0693d9f30bd" prot="public">
          <name>NRF_TWI_EVENT_RXDREADY</name>
          <initializer>= offsetof(NRF_TWI_Type, EVENTS_RXDREADY)</initializer>
          <briefdescription>
<para>TWI RXD byte received. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__twi__hal_1gga8035974e843dbf6e39d61dc434030dcbab32d8d9ddf44e5231b6382cd9897fa47" prot="public">
          <name>NRF_TWI_EVENT_TXDSENT</name>
          <initializer>= offsetof(NRF_TWI_Type, EVENTS_TXDSENT)</initializer>
          <briefdescription>
<para>TWI TXD byte sent. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__twi__hal_1gga8035974e843dbf6e39d61dc434030dcbafb58b6ce2426cdfc927dad453acfaa20" prot="public">
          <name>NRF_TWI_EVENT_ERROR</name>
          <initializer>= offsetof(NRF_TWI_Type, EVENTS_ERROR)</initializer>
          <briefdescription>
<para>TWI error. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__twi__hal_1gga8035974e843dbf6e39d61dc434030dcba2b452bc458e4a4220849ac595209d17e" prot="public">
          <name>NRF_TWI_EVENT_BB</name>
          <initializer>= offsetof(NRF_TWI_Type, EVENTS_BB)</initializer>
          <briefdescription>
<para>TWI byte boundary, generated before each byte that is sent or received. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__twi__hal_1gga8035974e843dbf6e39d61dc434030dcbafc4d06db26f5cd7d5c7df5a5c13890e2" prot="public">
          <name>NRF_TWI_EVENT_SUSPENDED</name>
          <initializer>= offsetof(NRF_TWI_Type, EVENTS_SUSPENDED)</initializer>
          <briefdescription>
<para>TWI entered the suspended state. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>TWI events. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_twi.h" line="70" column="1" bodyfile="hal/nrf_twi.h" bodystart="71" bodyend="78"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__twi__hal_1ga7c68802ffd95a19c3a8988cd8e747e00" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_twi_short_mask_t</name>
        <enumvalue id="group__nrf__twi__hal_1gga7c68802ffd95a19c3a8988cd8e747e00adde0d621d4f8d9696a430a1ff5df89f2" prot="public">
          <name>NRF_TWI_SHORT_BB_SUSPEND_MASK</name>
          <initializer>= TWI_SHORTS_BB_SUSPEND_Msk</initializer>
          <briefdescription>
<para>Shortcut between BB event and SUSPEND task. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__twi__hal_1gga7c68802ffd95a19c3a8988cd8e747e00af8ff88f5693898183c65e2d699001a52" prot="public">
          <name>NRF_TWI_SHORT_BB_STOP_MASK</name>
          <initializer>= TWI_SHORTS_BB_STOP_Msk</initializer>
          <briefdescription>
<para>Shortcut between BB event and STOP task. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__twi__hal_1gga7c68802ffd95a19c3a8988cd8e747e00a3c56b3dad31ba763bbd81d5d712d5c27" prot="public">
          <name>NRF_TWI_ALL_SHORTS_MASK</name>
          <initializer>= TWI_SHORTS_BB_SUSPEND_Msk |
                                    TWI_SHORTS_BB_STOP_Msk</initializer>
          <briefdescription>
<para>All TWI shortcuts. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>TWI shortcuts. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_twi.h" line="81" column="1" bodyfile="hal/nrf_twi.h" bodystart="82" bodyend="87"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__twi__hal_1gabb14594bbe16f83a734bbdf7d000928c" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_twi_int_mask_t</name>
        <enumvalue id="group__nrf__twi__hal_1ggabb14594bbe16f83a734bbdf7d000928caacf6b9250427020e3ccf919dee68ea51" prot="public">
          <name>NRF_TWI_INT_STOPPED_MASK</name>
          <initializer>= TWI_INTENSET_STOPPED_Msk</initializer>
          <briefdescription>
<para>Interrupt on STOPPED event. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__twi__hal_1ggabb14594bbe16f83a734bbdf7d000928cad9bf253dac1103b0c19cd1fc7a84d344" prot="public">
          <name>NRF_TWI_INT_RXDREADY_MASK</name>
          <initializer>= TWI_INTENSET_RXDREADY_Msk</initializer>
          <briefdescription>
<para>Interrupt on RXDREADY event. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__twi__hal_1ggabb14594bbe16f83a734bbdf7d000928ca7a4be6e4cdf34db4efa58689269f3689" prot="public">
          <name>NRF_TWI_INT_TXDSENT_MASK</name>
          <initializer>= TWI_INTENSET_TXDSENT_Msk</initializer>
          <briefdescription>
<para>Interrupt on TXDSENT event. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__twi__hal_1ggabb14594bbe16f83a734bbdf7d000928cad66707ee873c8dac8038db1eb2da2e01" prot="public">
          <name>NRF_TWI_INT_ERROR_MASK</name>
          <initializer>= TWI_INTENSET_ERROR_Msk</initializer>
          <briefdescription>
<para>Interrupt on ERROR event. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__twi__hal_1ggabb14594bbe16f83a734bbdf7d000928ca41150523f7f43119e5fe442b23164ad4" prot="public">
          <name>NRF_TWI_INT_BB_MASK</name>
          <initializer>= TWI_INTENSET_BB_Msk</initializer>
          <briefdescription>
<para>Interrupt on BB event. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__twi__hal_1ggabb14594bbe16f83a734bbdf7d000928cab943c5719a076438eea68b3df263d63f" prot="public">
          <name>NRF_TWI_INT_SUSPENDED_MASK</name>
          <initializer>= TWI_INTENSET_SUSPENDED_Msk</initializer>
          <briefdescription>
<para>Interrupt on SUSPENDED event. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__twi__hal_1ggabb14594bbe16f83a734bbdf7d000928ca7f3c921d717e7e3e4fd1a580f6a1de86" prot="public">
          <name>NRF_TWI_ALL_INTS_MASK</name>
          <initializer>= TWI_INTENSET_STOPPED_Msk   |
                                  TWI_INTENSET_RXDREADY_Msk  |
                                  TWI_INTENSET_TXDSENT_Msk   |
                                  TWI_INTENSET_ERROR_Msk     |
                                  TWI_INTENSET_BB_Msk        |
                                  TWI_INTENSET_SUSPENDED_Msk</initializer>
          <briefdescription>
<para>All TWI interrupts. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>TWI interrupts. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_twi.h" line="90" column="1" bodyfile="hal/nrf_twi.h" bodystart="91" bodyend="104"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__twi__hal_1ga7911f5fecbfe83193a83ca9cde36757e" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_twi_error_t</name>
        <enumvalue id="group__nrf__twi__hal_1gga7911f5fecbfe83193a83ca9cde36757ea2dfbca7d7fb28b352f4d4d79c6459201" prot="public">
          <name>NRF_TWI_ERROR_ADDRESS_NACK</name>
          <initializer>= TWI_ERRORSRC_ANACK_Msk</initializer>
          <briefdescription>
<para>NACK received after sending the address. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__twi__hal_1gga7911f5fecbfe83193a83ca9cde36757ea1c43773810bb74ccfb8fe832c5b2a28d" prot="public">
          <name>NRF_TWI_ERROR_DATA_NACK</name>
          <initializer>= TWI_ERRORSRC_DNACK_Msk</initializer>
          <briefdescription>
<para>NACK received after sending a data byte. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__twi__hal_1gga7911f5fecbfe83193a83ca9cde36757ea7e3d8a25d9565c3a21f8f6f5a6e2a31e" prot="public">
          <name>NRF_TWI_ERROR_OVERRUN</name>
          <initializer>= TWI_ERRORSRC_OVERRUN_Msk</initializer>
          <briefdescription>
<para>Overrun error. </para>
          </briefdescription>
          <detaileddescription>
<para>A new byte was received before the previous byte was read from the RXD register (previous data is lost). </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>TWI error source. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_twi.h" line="107" column="1" bodyfile="hal/nrf_twi.h" bodystart="108" bodyend="114"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__twi__hal_1ga4366397176d6e463a2e594be0d996a61" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_twi_frequency_t</name>
        <enumvalue id="group__nrf__twi__hal_1gga4366397176d6e463a2e594be0d996a61a07af2ed5e83d9bd35903d51792856fa9" prot="public">
          <name>NRF_TWI_FREQ_100K</name>
          <initializer>= TWI_FREQUENCY_FREQUENCY_K100</initializer>
          <briefdescription>
<para>100 kbps. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__twi__hal_1gga4366397176d6e463a2e594be0d996a61ac90a9ff47950ac9468a6c54043840803" prot="public">
          <name>NRF_TWI_FREQ_250K</name>
          <initializer>= TWI_FREQUENCY_FREQUENCY_K250</initializer>
          <briefdescription>
<para>250 kbps. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__twi__hal_1gga4366397176d6e463a2e594be0d996a61adfacb7d9aea05c6cb7cd2e0c54d80f61" prot="public">
          <name>NRF_TWI_FREQ_400K</name>
          <initializer>= TWI_FREQUENCY_FREQUENCY_K400</initializer>
          <briefdescription>
<para>400 kbps. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>TWI master clock frequency. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_twi.h" line="117" column="1" bodyfile="hal/nrf_twi.h" bodystart="118" bodyend="122"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__nrf__twi__hal_1ga7eedac4b7c664be3bcf11ae9d620e7bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_twi_task_trigger</definition>
        <argsstring>(NRF_TWI_Type *p_reg, nrf_twi_task_t task)</argsstring>
        <name>nrf_twi_task_trigger</name>
        <param>
          <type>NRF_TWI_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__twi__hal_1gae6266e8808b35b0569d429787f90b893" kindref="member">nrf_twi_task_t</ref></type>
          <declname>task</declname>
        </param>
        <briefdescription>
<para>Function for activating the specified TWI task. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">task</parametername>
</parameternamelist>
<parameterdescription>
<para>Task to be activated. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_twi.h" line="325" column="24" bodyfile="hal/nrf_twi.h" bodystart="325" bodyend="329" declfile="hal/nrf_twi.h" declline="131" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__twi__hal_1ga5f7114030111c23725fe024863b922cf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_twi_task_address_get</definition>
        <argsstring>(NRF_TWI_Type const *p_reg, nrf_twi_task_t task)</argsstring>
        <name>nrf_twi_task_address_get</name>
        <param>
          <type>NRF_TWI_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__twi__hal_1gae6266e8808b35b0569d429787f90b893" kindref="member">nrf_twi_task_t</ref></type>
          <declname>task</declname>
        </param>
        <briefdescription>
<para>Function for getting the address of the specified TWI task register. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">task</parametername>
</parameternamelist>
<parameterdescription>
<para>The specified task.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Address of the specified task register. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_twi.h" line="331" column="28" bodyfile="hal/nrf_twi.h" bodystart="331" bodyend="335" declfile="hal/nrf_twi.h" declline="142" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__twi__hal_1ga6b1ee09806aa889ff04c1753a5cc0105" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_twi_event_clear</definition>
        <argsstring>(NRF_TWI_Type *p_reg, nrf_twi_event_t event)</argsstring>
        <name>nrf_twi_event_clear</name>
        <param>
          <type>NRF_TWI_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__twi__hal_1ga8035974e843dbf6e39d61dc434030dcb" kindref="member">nrf_twi_event_t</ref></type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>Function for clearing the specified TWI event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event to clear. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_twi.h" line="337" column="24" bodyfile="hal/nrf_twi.h" bodystart="337" bodyend="342" declfile="hal/nrf_twi.h" declline="151" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__twi__hal_1gaead8839ada039807481082ecf7451549" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE bool</type>
        <definition>NRF_STATIC_INLINE bool nrf_twi_event_check</definition>
        <argsstring>(NRF_TWI_Type const *p_reg, nrf_twi_event_t event)</argsstring>
        <name>nrf_twi_event_check</name>
        <param>
          <type>NRF_TWI_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__twi__hal_1ga8035974e843dbf6e39d61dc434030dcb" kindref="member">nrf_twi_event_t</ref></type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>Function for retrieving the state of the TWI event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event to be checked.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>The event has been generated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>The event has not been generated. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_twi.h" line="344" column="24" bodyfile="hal/nrf_twi.h" bodystart="344" bodyend="348" declfile="hal/nrf_twi.h" declline="163" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__twi__hal_1ga2d083e704a34173b458a41fc20028837" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_twi_event_address_get</definition>
        <argsstring>(NRF_TWI_Type const *p_reg, nrf_twi_event_t event)</argsstring>
        <name>nrf_twi_event_address_get</name>
        <param>
          <type>NRF_TWI_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__twi__hal_1ga8035974e843dbf6e39d61dc434030dcb" kindref="member">nrf_twi_event_t</ref></type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>Function for getting the address of the specified TWI event register. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>The specified event.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Address of the specified event register. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_twi.h" line="350" column="28" bodyfile="hal/nrf_twi.h" bodystart="350" bodyend="354" declfile="hal/nrf_twi.h" declline="174" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__twi__hal_1gabf61abb319e94b4758051ece36d337d3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_twi_shorts_enable</definition>
        <argsstring>(NRF_TWI_Type *p_reg, uint32_t mask)</argsstring>
        <name>nrf_twi_shorts_enable</name>
        <param>
          <type>NRF_TWI_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Function for enabling the specified shortcuts. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Shortcuts to be enabled. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_twi.h" line="356" column="24" bodyfile="hal/nrf_twi.h" bodystart="356" bodyend="360" declfile="hal/nrf_twi.h" declline="183" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__twi__hal_1ga6a56f337746fb83ff781ac71dfea1b33" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_twi_shorts_disable</definition>
        <argsstring>(NRF_TWI_Type *p_reg, uint32_t mask)</argsstring>
        <name>nrf_twi_shorts_disable</name>
        <param>
          <type>NRF_TWI_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Function for disabling the specified shortcuts. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Shortcuts to be disabled. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_twi.h" line="362" column="24" bodyfile="hal/nrf_twi.h" bodystart="362" bodyend="366" declfile="hal/nrf_twi.h" declline="192" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__twi__hal_1gadeb553b2781c4cf6935832604357d78d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_twi_int_enable</definition>
        <argsstring>(NRF_TWI_Type *p_reg, uint32_t mask)</argsstring>
        <name>nrf_twi_int_enable</name>
        <param>
          <type>NRF_TWI_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Function for enabling the specified interrupts. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of interrupts to be enabled. Use <ref refid="group__nrf__twi__hal_1gabb14594bbe16f83a734bbdf7d000928c" kindref="member">nrf_twi_int_mask_t</ref> values for bit masking. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_twi.h" line="368" column="24" bodyfile="hal/nrf_twi.h" bodystart="368" bodyend="372" declfile="hal/nrf_twi.h" declline="202" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__twi__hal_1ga9478b9ab00f552270977d9b509672116" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_twi_int_disable</definition>
        <argsstring>(NRF_TWI_Type *p_reg, uint32_t mask)</argsstring>
        <name>nrf_twi_int_disable</name>
        <param>
          <type>NRF_TWI_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Function for disabling the specified interrupts. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of interrupts to be disabled. Use <ref refid="group__nrf__twi__hal_1gabb14594bbe16f83a734bbdf7d000928c" kindref="member">nrf_twi_int_mask_t</ref> values for bit masking. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_twi.h" line="374" column="24" bodyfile="hal/nrf_twi.h" bodystart="374" bodyend="378" declfile="hal/nrf_twi.h" declline="212" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__twi__hal_1ga74a253db984fd641afa73ab116214795" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_twi_int_enable_check</definition>
        <argsstring>(NRF_TWI_Type const *p_reg, uint32_t mask)</argsstring>
        <name>nrf_twi_int_enable_check</name>
        <param>
          <type>NRF_TWI_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Function for checking if the specified interrupts are enabled. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of interrupts to be checked. Use <ref refid="group__nrf__twi__hal_1gabb14594bbe16f83a734bbdf7d000928c" kindref="member">nrf_twi_int_mask_t</ref> values for bit masking.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Mask of enabled interrupts. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_twi.h" line="380" column="28" bodyfile="hal/nrf_twi.h" bodystart="380" bodyend="383" declfile="hal/nrf_twi.h" declline="224" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__twi__hal_1ga20064f5644e6e80a77a6fd2219c134b1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_twi_enable</definition>
        <argsstring>(NRF_TWI_Type *p_reg)</argsstring>
        <name>nrf_twi_enable</name>
        <param>
          <type>NRF_TWI_Type *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for enabling the TWI peripheral. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_twi.h" line="385" column="24" bodyfile="hal/nrf_twi.h" bodystart="385" bodyend="388" declfile="hal/nrf_twi.h" declline="231" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__twi__hal_1ga96407b44dc354dad93bdc6ff54055366" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_twi_disable</definition>
        <argsstring>(NRF_TWI_Type *p_reg)</argsstring>
        <name>nrf_twi_disable</name>
        <param>
          <type>NRF_TWI_Type *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for disabling the TWI peripheral. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_twi.h" line="390" column="24" bodyfile="hal/nrf_twi.h" bodystart="390" bodyend="393" declfile="hal/nrf_twi.h" declline="238" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__twi__hal_1ga62b4256b02b044b44abe3744746ff447" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_twi_pins_set</definition>
        <argsstring>(NRF_TWI_Type *p_reg, uint32_t scl_pin, uint32_t sda_pin)</argsstring>
        <name>nrf_twi_pins_set</name>
        <param>
          <type>NRF_TWI_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>scl_pin</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>sda_pin</declname>
        </param>
        <briefdescription>
<para>Function for configuring TWI pins. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">scl_pin</parametername>
</parameternamelist>
<parameterdescription>
<para>SCL pin number. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">sda_pin</parametername>
</parameternamelist>
<parameterdescription>
<para>SDA pin number. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_twi.h" line="395" column="24" bodyfile="hal/nrf_twi.h" bodystart="395" bodyend="410" declfile="hal/nrf_twi.h" declline="247" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__twi__hal_1ga82bc77783e711ccd9df5e79a99325d6c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_twi_scl_pin_get</definition>
        <argsstring>(NRF_TWI_Type const *p_reg)</argsstring>
        <name>nrf_twi_scl_pin_get</name>
        <param>
          <type>NRF_TWI_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for retrieving the SCL pin selection. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>SCL pin selection. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_twi.h" line="412" column="28" bodyfile="hal/nrf_twi.h" bodystart="412" bodyend="419" declfile="hal/nrf_twi.h" declline="258" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__twi__hal_1ga2c566d9ca1865fc56f2217396f768ba2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_twi_sda_pin_get</definition>
        <argsstring>(NRF_TWI_Type const *p_reg)</argsstring>
        <name>nrf_twi_sda_pin_get</name>
        <param>
          <type>NRF_TWI_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for retrieving the SDA pin selection. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>SDA pin selection. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_twi.h" line="421" column="28" bodyfile="hal/nrf_twi.h" bodystart="421" bodyend="428" declfile="hal/nrf_twi.h" declline="267" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__twi__hal_1ga43d7e6678622d12dbe00348a85a30bbe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_twi_frequency_set</definition>
        <argsstring>(NRF_TWI_Type *p_reg, nrf_twi_frequency_t frequency)</argsstring>
        <name>nrf_twi_frequency_set</name>
        <param>
          <type>NRF_TWI_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__twi__hal_1ga4366397176d6e463a2e594be0d996a61" kindref="member">nrf_twi_frequency_t</ref></type>
          <declname>frequency</declname>
        </param>
        <briefdescription>
<para>Function for setting the TWI master clock frequency. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">frequency</parametername>
</parameternamelist>
<parameterdescription>
<para>TWI frequency. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_twi.h" line="430" column="24" bodyfile="hal/nrf_twi.h" bodystart="430" bodyend="434" declfile="hal/nrf_twi.h" declline="275" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__twi__hal_1gac9ba35e01f68df4c983addeb343d489a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_twi_errorsrc_get_and_clear</definition>
        <argsstring>(NRF_TWI_Type *p_reg)</argsstring>
        <name>nrf_twi_errorsrc_get_and_clear</name>
        <param>
          <type>NRF_TWI_Type *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for checking the TWI error source. </para>
        </briefdescription>
        <detaileddescription>
<para>The error flags are cleared after reading.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Mask with error source flags. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_twi.h" line="436" column="28" bodyfile="hal/nrf_twi.h" bodystart="436" bodyend="444" declfile="hal/nrf_twi.h" declline="287" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__twi__hal_1ga66d5f35d8a4761337ea1246de2c00ce3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_twi_address_set</definition>
        <argsstring>(NRF_TWI_Type *p_reg, uint8_t address)</argsstring>
        <name>nrf_twi_address_set</name>
        <param>
          <type>NRF_TWI_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>address</declname>
        </param>
        <briefdescription>
<para>Function for setting the address to be used in TWI transfers. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">address</parametername>
</parameternamelist>
<parameterdescription>
<para>Address to be used in transfers. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_twi.h" line="446" column="24" bodyfile="hal/nrf_twi.h" bodystart="446" bodyend="449" declfile="hal/nrf_twi.h" declline="295" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__twi__hal_1ga012f2673135ac2336b30f267009cd57a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint8_t</type>
        <definition>NRF_STATIC_INLINE uint8_t nrf_twi_rxd_get</definition>
        <argsstring>(NRF_TWI_Type const *p_reg)</argsstring>
        <name>nrf_twi_rxd_get</name>
        <param>
          <type>NRF_TWI_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for reading data received by TWI. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Received data. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_twi.h" line="451" column="27" bodyfile="hal/nrf_twi.h" bodystart="451" bodyend="454" declfile="hal/nrf_twi.h" declline="304" declcolumn="27"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__twi__hal_1ga0ef2a64b279d46fc1477880fad4247bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_twi_txd_set</definition>
        <argsstring>(NRF_TWI_Type *p_reg, uint8_t data)</argsstring>
        <name>nrf_twi_txd_set</name>
        <param>
          <type>NRF_TWI_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Function for writing data to be transmitted by TWI. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">data</parametername>
</parameternamelist>
<parameterdescription>
<para>Data to be transmitted. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_twi.h" line="456" column="24" bodyfile="hal/nrf_twi.h" bodystart="456" bodyend="459" declfile="hal/nrf_twi.h" declline="312" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__twi__hal_1ga432302136abc9c690fca190f38186f90" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_twi_shorts_set</definition>
        <argsstring>(NRF_TWI_Type *p_reg, uint32_t mask)</argsstring>
        <name>nrf_twi_shorts_set</name>
        <param>
          <type>NRF_TWI_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Function for setting the specified shortcuts. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Shortcuts to be set. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_twi.h" line="461" column="24" bodyfile="hal/nrf_twi.h" bodystart="461" bodyend="465" declfile="hal/nrf_twi.h" declline="320" declcolumn="24"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__nrf__twi__hal_1ga7ae2cf26c6ff333204dd818d04e71385" prot="public" static="no">
        <name>NRF_TWI_INST_GET</name>
        <param><defname>idx</defname></param>
        <initializer><ref refid="group__nrfx__utils_1ga5ea61d0994f6fb1ab5ed59d44f6a7ce9" kindref="member">NRFX_CONCAT</ref>(NRF_, TWI, idx)</initializer>
        <briefdescription>
<para>Macro getting pointer to the structure of registers of the TWI peripheral. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">idx</parametername>
</parameternamelist>
<parameterdescription>
<para>TWI instance index.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to the structure of registers of the TWI peripheral. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_twi.h" line="57" column="9" bodyfile="hal/nrf_twi.h" bodystart="57" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Hardware access layer for managing the TWI peripheral. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
