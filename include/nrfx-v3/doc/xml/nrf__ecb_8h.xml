<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="nrf__ecb_8h" kind="file" language="C++">
    <compoundname>nrf_ecb.h</compoundname>
    <includes local="no">nrfx.h</includes>
    <incdepgraph>
      <node id="1">
        <label>hal/nrf_ecb.h</label>
        <link refid="nrf__ecb_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>nrfx.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__nrf__ecb__hal_1gaaf98e25ae8e6841feb37b37861e5a323" prot="public" static="no">
        <name>NRF_ECB_HAS_TASK_STARTECB</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Presence of the STARTECB task. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ecb.h" line="56" column="9" bodyfile="hal/nrf_ecb.h" bodystart="56" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__ecb__hal_1ga51f8743f705dee195d7a6e2e40484092" prot="public" static="no">
        <name>NRF_ECB_HAS_TASK_START</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Presence of the START task. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ecb.h" line="63" column="9" bodyfile="hal/nrf_ecb.h" bodystart="63" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__ecb__hal_1ga8e2f1bdd5b6b3c5e6d51d15c2525b151" prot="public" static="no">
        <name>NRF_ECB_HAS_TASK_STOPECB</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Presence of the STOPECB task. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ecb.h" line="71" column="9" bodyfile="hal/nrf_ecb.h" bodystart="71" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__ecb__hal_1gad256a3d6af34b09315237c72e03223e0" prot="public" static="no">
        <name>NRF_ECB_HAS_TASK_STOP</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Presence of the STOP task. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ecb.h" line="78" column="9" bodyfile="hal/nrf_ecb.h" bodystart="78" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__ecb__hal_1gae73940f346eadeebf5cc74213377db9e" prot="public" static="no">
        <name>NRF_ECB_HAS_EVENT_ENDECB</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Presence of the ENDECB event. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ecb.h" line="86" column="9" bodyfile="hal/nrf_ecb.h" bodystart="86" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__ecb__hal_1ga3bdbc23a728ead472df18d2c07deebaa" prot="public" static="no">
        <name>NRF_ECB_HAS_EVENT_END</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Presence of the END event. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ecb.h" line="93" column="9" bodyfile="hal/nrf_ecb.h" bodystart="93" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__ecb__hal_1ga3985c099eed272ad2eee813a00e807d6" prot="public" static="no">
        <name>NRF_ECB_HAS_EVENT_ERRORECB</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Presence of the ERRORECB event. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ecb.h" line="101" column="9" bodyfile="hal/nrf_ecb.h" bodystart="101" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__ecb__hal_1gab1b1702f584df0f99e5a56864515fcf8" prot="public" static="no">
        <name>NRF_ECB_HAS_EVENT_ERROR</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Presence of the ERROR event. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ecb.h" line="108" column="9" bodyfile="hal/nrf_ecb.h" bodystart="108" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__ecb__hal_1gae1fba4801d875aea0943ebeb24d723b8" prot="public" static="no">
        <name>NRF_ECB_HAS_KEY</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Presence of the KEY register. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ecb.h" line="115" column="9" bodyfile="hal/nrf_ecb.h" bodystart="115" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__ecb__hal_1ga53cb0779e632fa5fea8d7865a092008f" prot="public" static="no">
        <name>NRF_ECB_HAS_IN_PTR</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Presence of the IN.PTR register. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ecb.h" line="122" column="9" bodyfile="hal/nrf_ecb.h" bodystart="122" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__ecb__hal_1gad4c82e7ee32e2e30cf041cc65a1dfe03" prot="public" static="no">
        <name>NRF_ECB_HAS_IN_AMOUNT</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Presence of the IN.AMOUNT register. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ecb.h" line="129" column="9" bodyfile="hal/nrf_ecb.h" bodystart="129" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__ecb__hal_1gaa6f33d1d8ea9c4b73c4a2f5b0a015a31" prot="public" static="no">
        <name>NRF_ECB_HAS_OUT_PTR</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Presence of the OUT.PTR register. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ecb.h" line="136" column="9" bodyfile="hal/nrf_ecb.h" bodystart="136" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__ecb__hal_1ga89a89c17f8637517757bd00d74ba66ec" prot="public" static="no">
        <name>NRF_ECB_HAS_OUT_AMOUNT</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Presence of the OUT.AMOUNT register. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ecb.h" line="143" column="9" bodyfile="hal/nrf_ecb.h" bodystart="143" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__ecb__hal_1ga8c3d2c0f70f3acc8e3a7e1f3eeaff94f" prot="public" static="no">
        <name>NRF_ECB_HAS_ECBDATAPTR</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Presence of the ECBDATAPTR register. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ecb.h" line="151" column="9" bodyfile="hal/nrf_ecb.h" bodystart="151" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="group__nrf__ecb__hal_1gac4ecf0d83e451302bfae6d2b54ed546c" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_ecb_task_t</name>
        <enumvalue id="group__nrf__ecb__hal_1ggac4ecf0d83e451302bfae6d2b54ed546ca338e621bc5d40864b2e0e43f3ef11d1f" prot="public">
          <name>NRF_ECB_TASK_STARTECB</name>
          <initializer>= offsetof(NRF_ECB_Type, TASKS_STARTECB)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Task for starting the ECB block encryption. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__ecb__hal_1ggac4ecf0d83e451302bfae6d2b54ed546ca80a17abd080cb436d7fc488c8bb28f4d" prot="public">
          <name>NRF_ECB_TASK_START</name>
          <initializer>= offsetof(NRF_ECB_Type, TASKS_START)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Task for starting the ECB block encryption. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__ecb__hal_1ggac4ecf0d83e451302bfae6d2b54ed546ca0d7751481f61e9318922e7ab77eb8b39" prot="public">
          <name>NRF_ECB_TASK_STOPECB</name>
          <initializer>= offsetof(NRF_ECB_Type, TASKS_STOPECB)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Task for stopping the ECB block encryption. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__ecb__hal_1ggac4ecf0d83e451302bfae6d2b54ed546ca8f4773a1e9ec7b0b66585185499cefb5" prot="public">
          <name>NRF_ECB_TASK_STOP</name>
          <initializer>= offsetof(NRF_ECB_Type, TASKS_STOP)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Task for stopping the ECB block encryption. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>ECB tasks. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ecb.h" line="157" column="1" bodyfile="hal/nrf_ecb.h" bodystart="158" bodyend="171"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__ecb__hal_1gaeb64b50b89500a23e71c5c41002a0af2" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_ecb_event_t</name>
        <enumvalue id="group__nrf__ecb__hal_1ggaeb64b50b89500a23e71c5c41002a0af2a6c670ee1eb1a525fa8b621f79f7e95c6" prot="public">
          <name>NRF_ECB_EVENT_ENDECB</name>
          <initializer>= offsetof(NRF_ECB_Type, EVENTS_ENDECB)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>ECB block encrypt complete. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__ecb__hal_1ggaeb64b50b89500a23e71c5c41002a0af2ae1e165c2ec808e92aea02ae5b6af7439" prot="public">
          <name>NRF_ECB_EVENT_ERRORECB</name>
          <initializer>= offsetof(NRF_ECB_Type, EVENTS_ERRORECB)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>ECB block encrypt aborted because of a STOPECB task or due to an error. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__ecb__hal_1ggaeb64b50b89500a23e71c5c41002a0af2a0112d42da8b9b75c0d3f21e575f643f1" prot="public">
          <name>NRF_ECB_EVENT_END</name>
          <initializer>= offsetof(NRF_ECB_Type, EVENTS_END)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>ECB block encrypt complete. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__ecb__hal_1ggaeb64b50b89500a23e71c5c41002a0af2a6de90b30a562a730033f4acbd844c567" prot="public">
          <name>NRF_ECB_EVENT_ERROR</name>
          <initializer>= offsetof(NRF_ECB_Type, EVENTS_ERROR)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>ECB block encrypt aborted because of a STOPECB task or due to an error. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>ECB events. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ecb.h" line="174" column="1" bodyfile="hal/nrf_ecb.h" bodystart="175" bodyend="188"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__ecb__hal_1ga91ca43c848863f0c0ce970054f33b478" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_ecb_int_mask_t</name>
        <enumvalue id="group__nrf__ecb__hal_1gga91ca43c848863f0c0ce970054f33b478a568a063e1a79d57acddddefbe65c8e27" prot="public">
          <name>NRF_ECB_INT_ENDECB_MASK</name>
          <initializer>= ECB_INTENSET_ENDECB_Msk</initializer>
          <briefdescription>
<para>Interrupt on ENDECB event. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__ecb__hal_1gga91ca43c848863f0c0ce970054f33b478a68880909012bfb1e6a36f131820e9efd" prot="public">
          <name>NRF_ECB_INT_ERRORECB_MASK</name>
          <initializer>= ECB_INTENSET_ERRORECB_Msk</initializer>
          <briefdescription>
<para>Interrupt on ERRORECB event. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__ecb__hal_1gga91ca43c848863f0c0ce970054f33b478a7b78be029fcf6179329ac034e1e9b95c" prot="public">
          <name>NRF_ECB_INT_END_MASK</name>
          <initializer>= ECB_INTENSET_END_Msk</initializer>
          <briefdescription>
<para>Interrupt on END event. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__ecb__hal_1gga91ca43c848863f0c0ce970054f33b478a625ac92ff666d0fde139e515486d5efd" prot="public">
          <name>NRF_ECB_INT_ERROR_MASK</name>
          <initializer>= ECB_INTENSET_ERROR_Msk</initializer>
          <briefdescription>
<para>Interrupt on ERROR event. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>ECB interrupts. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ecb.h" line="191" column="1" bodyfile="hal/nrf_ecb.h" bodystart="192" bodyend="205"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__nrf__ecb__hal_1gaf192ddaeac6403b793f1f5f3fe8687cb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_ecb_task_trigger</definition>
        <argsstring>(NRF_ECB_Type *p_reg, nrf_ecb_task_t task)</argsstring>
        <name>nrf_ecb_task_trigger</name>
        <param>
          <type>NRF_ECB_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__ecb__hal_1gac4ecf0d83e451302bfae6d2b54ed546c" kindref="member">nrf_ecb_task_t</ref></type>
          <declname>task</declname>
        </param>
        <briefdescription>
<para>Function for activating the specified ECB task. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">task</parametername>
</parameternamelist>
<parameterdescription>
<para>Task to be activated. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ecb.h" line="440" column="24" bodyfile="hal/nrf_ecb.h" bodystart="440" bodyend="443" declfile="hal/nrf_ecb.h" declline="214" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__ecb__hal_1ga718830ff53e97e283dc82aa36c7f4427" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_ecb_task_address_get</definition>
        <argsstring>(NRF_ECB_Type const *p_reg, nrf_ecb_task_t task)</argsstring>
        <name>nrf_ecb_task_address_get</name>
        <param>
          <type>NRF_ECB_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__ecb__hal_1gac4ecf0d83e451302bfae6d2b54ed546c" kindref="member">nrf_ecb_task_t</ref></type>
          <declname>task</declname>
        </param>
        <briefdescription>
<para>Function for getting the address of the specified ECB task register. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">task</parametername>
</parameternamelist>
<parameterdescription>
<para>Requested task.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Address of the specified task register. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ecb.h" line="445" column="28" bodyfile="hal/nrf_ecb.h" bodystart="445" bodyend="449" declfile="hal/nrf_ecb.h" declline="224" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__ecb__hal_1ga3d14a076be4bfc8f08221a1ded6a5160" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_ecb_event_clear</definition>
        <argsstring>(NRF_ECB_Type *p_reg, nrf_ecb_event_t event)</argsstring>
        <name>nrf_ecb_event_clear</name>
        <param>
          <type>NRF_ECB_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__ecb__hal_1gaeb64b50b89500a23e71c5c41002a0af2" kindref="member">nrf_ecb_event_t</ref></type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>Function for clearing the specified ECB event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event to clear. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ecb.h" line="451" column="24" bodyfile="hal/nrf_ecb.h" bodystart="451" bodyend="455" declfile="hal/nrf_ecb.h" declline="233" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__ecb__hal_1ga90ef309d7ab03fc57decfda2cda0d516" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE bool</type>
        <definition>NRF_STATIC_INLINE bool nrf_ecb_event_check</definition>
        <argsstring>(NRF_ECB_Type const *p_reg, nrf_ecb_event_t event)</argsstring>
        <name>nrf_ecb_event_check</name>
        <param>
          <type>NRF_ECB_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__ecb__hal_1gaeb64b50b89500a23e71c5c41002a0af2" kindref="member">nrf_ecb_event_t</ref></type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>Function for retrieving the state of the ECB event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event to be checked.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>The event has been generated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>The event has not been generated. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ecb.h" line="457" column="24" bodyfile="hal/nrf_ecb.h" bodystart="457" bodyend="460" declfile="hal/nrf_ecb.h" declline="244" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__ecb__hal_1gae95d992775c99eb76db324632edd54e8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_ecb_event_address_get</definition>
        <argsstring>(NRF_ECB_Type const *p_reg, nrf_ecb_event_t event)</argsstring>
        <name>nrf_ecb_event_address_get</name>
        <param>
          <type>NRF_ECB_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__ecb__hal_1gaeb64b50b89500a23e71c5c41002a0af2" kindref="member">nrf_ecb_event_t</ref></type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>Function for getting the address of the specified ECB event register. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>Requested event.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Address of the specified event register. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ecb.h" line="462" column="28" bodyfile="hal/nrf_ecb.h" bodystart="462" bodyend="466" declfile="hal/nrf_ecb.h" declline="254" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__ecb__hal_1ga4ddd691e3f86b9e4d706eefbf95d7e7e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_ecb_int_enable</definition>
        <argsstring>(NRF_ECB_Type *p_reg, uint32_t mask)</argsstring>
        <name>nrf_ecb_int_enable</name>
        <param>
          <type>NRF_ECB_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Function for enabling the specified interrupts. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of interrupts to be enabled. Use <ref refid="group__nrf__ecb__hal_1ga91ca43c848863f0c0ce970054f33b478" kindref="member">nrf_ecb_int_mask_t</ref> values for bit masking. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ecb.h" line="468" column="24" bodyfile="hal/nrf_ecb.h" bodystart="468" bodyend="471" declfile="hal/nrf_ecb.h" declline="264" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__ecb__hal_1ga2622bab1db3db81c0431240d2e3e1053" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_ecb_int_disable</definition>
        <argsstring>(NRF_ECB_Type *p_reg, uint32_t mask)</argsstring>
        <name>nrf_ecb_int_disable</name>
        <param>
          <type>NRF_ECB_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Function for disabling the specified interrupts. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of interrupts to be disabled. Use <ref refid="group__nrf__ecb__hal_1ga91ca43c848863f0c0ce970054f33b478" kindref="member">nrf_ecb_int_mask_t</ref> values for bit masking. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ecb.h" line="473" column="24" bodyfile="hal/nrf_ecb.h" bodystart="473" bodyend="476" declfile="hal/nrf_ecb.h" declline="273" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__ecb__hal_1ga536f0db41a066ef0f09ffedc12085479" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_ecb_int_enable_check</definition>
        <argsstring>(NRF_ECB_Type const *p_reg, uint32_t mask)</argsstring>
        <name>nrf_ecb_int_enable_check</name>
        <param>
          <type>NRF_ECB_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Function for checking if the specified interrupts are enabled. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of interrupts to be checked. Use <ref refid="group__nrf__ecb__hal_1ga91ca43c848863f0c0ce970054f33b478" kindref="member">nrf_ecb_int_mask_t</ref> values for bit masking.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Mask of enabled interrupts. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ecb.h" line="478" column="28" bodyfile="hal/nrf_ecb.h" bodystart="478" bodyend="481" declfile="hal/nrf_ecb.h" declline="284" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__ecb__hal_1ga60c24f78d6cce8a37696017e4d4ea5d6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_ecb_data_pointer_set</definition>
        <argsstring>(NRF_ECB_Type *p_reg, void const *p_buffer)</argsstring>
        <name>nrf_ecb_data_pointer_set</name>
        <param>
          <type>NRF_ECB_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>void const *</type>
          <declname>p_buffer</declname>
        </param>
        <briefdescription>
<para>Function for setting the pointer to the ECB data buffer. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>The buffer has to be placed in the Data RAM region. For description of the data structure in this buffer, see the Product Specification.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">p_buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the ECB data buffer. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ecb.h" line="484" column="24" bodyfile="hal/nrf_ecb.h" bodystart="484" bodyend="487" declfile="hal/nrf_ecb.h" declline="296" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__ecb__hal_1gaa162cb7821e54755c378ed5eecd677e1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void *</type>
        <definition>NRF_STATIC_INLINE void * nrf_ecb_data_pointer_get</definition>
        <argsstring>(NRF_ECB_Type const *p_reg)</argsstring>
        <name>nrf_ecb_data_pointer_get</name>
        <param>
          <type>NRF_ECB_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting the pointer to the ECB data buffer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to the ECB data buffer. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ecb.h" line="489" column="25" bodyfile="hal/nrf_ecb.h" bodystart="489" bodyend="492" declfile="hal/nrf_ecb.h" declline="305" declcolumn="25"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__ecb__hal_1gae20d640a432668714bca3554ea4bcded" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_ecb_key_set</definition>
        <argsstring>(NRF_ECB_Type *p_reg, uint32_t const *p_key)</argsstring>
        <name>nrf_ecb_key_set</name>
        <param>
          <type>NRF_ECB_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t const *</type>
          <declname>p_key</declname>
        </param>
        <briefdescription>
<para>Function for setting the AES key. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">p_key</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the AES 128-bit key value. The key shall be stored in big endian byte order. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ecb.h" line="496" column="24" bodyfile="hal/nrf_ecb.h" bodystart="496" bodyend="503" declfile="hal/nrf_ecb.h" declline="316" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__ecb__hal_1ga047a8041657af0eef52bec01fae045fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_ecb_in_ptr_set</definition>
        <argsstring>(NRF_ECB_Type *p_reg, nrf_vdma_job_t const *p_job)</argsstring>
        <name>nrf_ecb_in_ptr_set</name>
        <param>
          <type>NRF_ECB_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="structnrf__vdma__job__t" kindref="compound">nrf_vdma_job_t</ref> const *</type>
          <declname>p_job</declname>
        </param>
        <briefdescription>
<para>Function for setting the pointer to a job list containing unencrypted ECB data structure in Encryption mode or encrypted ECB data structure in Decryption mode. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">p_job</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a job list. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ecb.h" line="507" column="24" bodyfile="hal/nrf_ecb.h" bodystart="507" bodyend="511" declfile="hal/nrf_ecb.h" declline="329" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__ecb__hal_1ga4590a4ccb6dc4416d955f989fed4b45f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE <ref refid="structnrf__vdma__job__t" kindref="compound">nrf_vdma_job_t</ref> *</type>
        <definition>NRF_STATIC_INLINE nrf_vdma_job_t * nrf_ecb_in_ptr_get</definition>
        <argsstring>(NRF_ECB_Type const *p_reg)</argsstring>
        <name>nrf_ecb_in_ptr_get</name>
        <param>
          <type>NRF_ECB_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting the pointer to job list containing unencrypted ECB data structure in Encryption mode or encrypted ECB data structure in Decryption mode. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to a job list. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ecb.h" line="513" column="35" bodyfile="hal/nrf_ecb.h" bodystart="513" bodyend="516" declfile="hal/nrf_ecb.h" declline="341" declcolumn="35"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__ecb__hal_1ga883ac07a3e2db180e3ba3c50aae83b4e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_ecb_in_amount_get</definition>
        <argsstring>(NRF_ECB_Type const *p_reg)</argsstring>
        <name>nrf_ecb_in_amount_get</name>
        <param>
          <type>NRF_ECB_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting number of bytes read from the input data, not including the job list structure. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Number of bytes read from the input data. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ecb.h" line="520" column="28" bodyfile="hal/nrf_ecb.h" bodystart="520" bodyend="523" declfile="hal/nrf_ecb.h" declline="353" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__ecb__hal_1ga514222bacd9f83686cdb6f699421252d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_ecb_out_ptr_set</definition>
        <argsstring>(NRF_ECB_Type *p_reg, nrf_vdma_job_t const *p_job)</argsstring>
        <name>nrf_ecb_out_ptr_set</name>
        <param>
          <type>NRF_ECB_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="structnrf__vdma__job__t" kindref="compound">nrf_vdma_job_t</ref> const *</type>
          <declname>p_job</declname>
        </param>
        <briefdescription>
<para>Function for setting the pointer to a job list containing encrypted ECB data structure in Encryption mode or decrypted ECB data structure in Decryption mode. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">p_job</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a job list. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ecb.h" line="527" column="24" bodyfile="hal/nrf_ecb.h" bodystart="527" bodyend="531" declfile="hal/nrf_ecb.h" declline="365" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__ecb__hal_1gaf9da5cba0f135ce37fb7866ac5d3c137" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE <ref refid="structnrf__vdma__job__t" kindref="compound">nrf_vdma_job_t</ref> *</type>
        <definition>NRF_STATIC_INLINE nrf_vdma_job_t * nrf_ecb_out_ptr_get</definition>
        <argsstring>(NRF_ECB_Type const *p_reg)</argsstring>
        <name>nrf_ecb_out_ptr_get</name>
        <param>
          <type>NRF_ECB_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting the pointer to a job list containing encrypted ECB data structure in Encryption mode or decrypted ECB data structure in Decryption mode. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to the job list. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ecb.h" line="533" column="35" bodyfile="hal/nrf_ecb.h" bodystart="533" bodyend="536" declfile="hal/nrf_ecb.h" declline="377" declcolumn="35"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__ecb__hal_1gac2b097a3b9f27ecf2575e434dfbd3ddf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_ecb_out_amount_get</definition>
        <argsstring>(NRF_ECB_Type const *p_reg)</argsstring>
        <name>nrf_ecb_out_amount_get</name>
        <param>
          <type>NRF_ECB_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting number of bytes available in the output data, not including the job list structure. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Number of bytes available in the output data. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ecb.h" line="540" column="28" bodyfile="hal/nrf_ecb.h" bodystart="540" bodyend="543" declfile="hal/nrf_ecb.h" declline="389" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__ecb__hal_1ga1859cfd6afa9ddd143661b9c089266a5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_ecb_subscribe_set</definition>
        <argsstring>(NRF_ECB_Type *p_reg, nrf_ecb_task_t task, uint8_t channel)</argsstring>
        <name>nrf_ecb_subscribe_set</name>
        <param>
          <type>NRF_ECB_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__ecb__hal_1gac4ecf0d83e451302bfae6d2b54ed546c" kindref="member">nrf_ecb_task_t</ref></type>
          <declname>task</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>channel</declname>
        </param>
        <briefdescription>
<para>Function for setting the subscribe configuration for a given ECB task. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">task</parametername>
</parameternamelist>
<parameterdescription>
<para>Task for which to set the configuration. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">channel</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel through which to subscribe events. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ecb.h" line="401" column="24" declfile="hal/nrf_ecb.h" declline="401" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__ecb__hal_1ga41212c13c2456d8da5729ef465cccbea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_ecb_subscribe_clear</definition>
        <argsstring>(NRF_ECB_Type *p_reg, nrf_ecb_task_t task)</argsstring>
        <name>nrf_ecb_subscribe_clear</name>
        <param>
          <type>NRF_ECB_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__ecb__hal_1gac4ecf0d83e451302bfae6d2b54ed546c" kindref="member">nrf_ecb_task_t</ref></type>
          <declname>task</declname>
        </param>
        <briefdescription>
<para>Function for clearing the subscribe configuration for a given ECB task. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">task</parametername>
</parameternamelist>
<parameterdescription>
<para>Task for which to clear the configuration. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ecb.h" line="412" column="24" declfile="hal/nrf_ecb.h" declline="412" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__ecb__hal_1ga3fbe83f2accb07e50084e3bc7062aabb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_ecb_publish_set</definition>
        <argsstring>(NRF_ECB_Type *p_reg, nrf_ecb_event_t event, uint8_t channel)</argsstring>
        <name>nrf_ecb_publish_set</name>
        <param>
          <type>NRF_ECB_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__ecb__hal_1gaeb64b50b89500a23e71c5c41002a0af2" kindref="member">nrf_ecb_event_t</ref></type>
          <declname>event</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>channel</declname>
        </param>
        <briefdescription>
<para>Function for setting the publish configuration for a given ECB event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event for which to set the configuration. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">channel</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel through which to publish the event. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ecb.h" line="423" column="24" declfile="hal/nrf_ecb.h" declline="423" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__ecb__hal_1gab3d8177e957e0495aa2b84c581b71013" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_ecb_publish_clear</definition>
        <argsstring>(NRF_ECB_Type *p_reg, nrf_ecb_event_t event)</argsstring>
        <name>nrf_ecb_publish_clear</name>
        <param>
          <type>NRF_ECB_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__ecb__hal_1gaeb64b50b89500a23e71c5c41002a0af2" kindref="member">nrf_ecb_event_t</ref></type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>Function for clearing the publish configuration for a given ECB event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event for which to clear the configuration. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ecb.h" line="434" column="24" declfile="hal/nrf_ecb.h" declline="434" declcolumn="24"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2012<sp/>-<sp/>2024,<sp/>Nordic<sp/>Semiconductor<sp/>ASA</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>All<sp/>rights<sp/>reserved.</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>SPDX-License-Identifier:<sp/>BSD-3-Clause</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions<sp/>are<sp/>met:</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>1.<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright<sp/>notice,<sp/>this</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>2.<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the<sp/>distribution.</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/>3.<sp/>Neither<sp/>the<sp/>name<sp/>of<sp/>the<sp/>copyright<sp/>holder<sp/>nor<sp/>the<sp/>names<sp/>of<sp/>its</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>contributors<sp/>may<sp/>be<sp/>used<sp/>to<sp/>endorse<sp/>or<sp/>promote<sp/>products<sp/>derived<sp/>from<sp/>this</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>software<sp/>without<sp/>specific<sp/>prior<sp/>written<sp/>permission.</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>COPYRIGHT<sp/>HOLDERS<sp/>AND<sp/>CONTRIBUTORS<sp/>&quot;AS<sp/>IS&quot;</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/>AND<sp/>ANY<sp/>EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>THE</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*<sp/>ARE<sp/>DISCLAIMED.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>COPYRIGHT<sp/>HOLDER<sp/>OR<sp/>CONTRIBUTORS<sp/>BE</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,<sp/>SPECIAL,<sp/>EXEMPLARY,<sp/>OR</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>PROCUREMENT<sp/>OF</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>*<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,<sp/>DATA,<sp/>OR<sp/>PROFITS;<sp/>OR<sp/>BUSINESS</highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/>*<sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY<sp/>THEORY<sp/>OF<sp/>LIABILITY,<sp/>WHETHER<sp/>IN</highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/>*<sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR<sp/>OTHERWISE)</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/>*<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE<sp/>OF<sp/>THIS<sp/>SOFTWARE,<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/>*<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight></codeline>
<codeline lineno="32"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>NRF_ECB_H__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_ECB_H__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;nrfx.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>EASYVDMA_PRESENT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;helpers/nrf_vdma.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="46"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="47"><highlight class="comment"><sp/>*<sp/>@defgroup<sp/>nrf_ecb_hal<sp/>AES<sp/>ECB<sp/>encryption<sp/>HAL</highlight></codeline>
<codeline lineno="48"><highlight class="comment"><sp/>*<sp/>@{</highlight></codeline>
<codeline lineno="49"><highlight class="comment"><sp/>*<sp/>@ingroup<sp/>nrf_ecb</highlight></codeline>
<codeline lineno="50"><highlight class="comment"><sp/>*<sp/>@brief<sp/><sp/><sp/>Hardware<sp/>access<sp/>layer<sp/>(HAL)<sp/>for<sp/>managing<sp/>the<sp/>Advanced<sp/>Encryption<sp/>Standard<sp/>(AES)<sp/>Electronic<sp/>Codebook<sp/>(ECB)<sp/>peripheral.</highlight></codeline>
<codeline lineno="51"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(NRF51)<sp/>||<sp/>defined(NRF52832_XXAA)<sp/>||<sp/>\</highlight></codeline>
<codeline lineno="54"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>defined(ECB_TASKS_STARTECB_TASKS_STARTECB_Msk)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="55"><highlight class="comment">/**<sp/>@brief<sp/>Presence<sp/>of<sp/>the<sp/>STARTECB<sp/>task.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_ECB_HAS_TASK_STARTECB<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_ECB_HAS_TASK_STARTECB<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(ECB_TASKS_START_TASKS_START_Msk)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="62"><highlight class="comment">/**<sp/>@brief<sp/>Presence<sp/>of<sp/>the<sp/>START<sp/>task.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_ECB_HAS_TASK_START<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_ECB_HAS_TASK_START<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(NRF51)<sp/>||<sp/>defined(NRF52832_XXAA)<sp/>||<sp/>\</highlight></codeline>
<codeline lineno="69"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>defined(ECB_TASKS_STOPECB_TASKS_STOPECB_Msk)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="70"><highlight class="comment">/**<sp/>@brief<sp/>Presence<sp/>of<sp/>the<sp/>STOPECB<sp/>task.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_ECB_HAS_TASK_STOPECB<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_ECB_HAS_TASK_STOPECB<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(ECB_TASKS_STOP_TASKS_STOP_Msk)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="77"><highlight class="comment">/**<sp/>@brief<sp/>Presence<sp/>of<sp/>the<sp/>STOP<sp/>task.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_ECB_HAS_TASK_STOP<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_ECB_HAS_TASK_STOP<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(NRF51)<sp/>||<sp/>defined(NRF52832_XXAA)<sp/>||<sp/>\</highlight></codeline>
<codeline lineno="84"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>defined(ECB_EVENTS_ENDECB_EVENTS_ENDECB_Msk)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="85"><highlight class="comment">/**<sp/>@brief<sp/>Presence<sp/>of<sp/>the<sp/>ENDECB<sp/>event.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_ECB_HAS_EVENT_ENDECB<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_ECB_HAS_EVENT_ENDECB<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(ECB_EVENTS_END_EVENTS_END_Msk)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="92"><highlight class="comment">/**<sp/>@brief<sp/>Presence<sp/>of<sp/>the<sp/>END<sp/>event.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_ECB_HAS_EVENT_END<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_ECB_HAS_EVENT_END<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(NRF51)<sp/>||<sp/>defined(NRF52832_XXAA)<sp/>||<sp/>\</highlight></codeline>
<codeline lineno="99"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>defined(ECB_EVENTS_ERRORECB_EVENTS_ERRORECB_Msk)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="100"><highlight class="comment">/**<sp/>@brief<sp/>Presence<sp/>of<sp/>the<sp/>ERRORECB<sp/>event.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_ECB_HAS_EVENT_ERRORECB<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_ECB_HAS_EVENT_ERRORECB<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(ECB_EVENTS_ERROR_EVENTS_ERROR_Msk)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="107"><highlight class="comment">/**<sp/>@brief<sp/>Presence<sp/>of<sp/>the<sp/>ERROR<sp/>event.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_ECB_HAS_EVENT_ERROR<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_ECB_HAS_EVENT_ERROR<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(ECB_KEY_VALUE_VALUE_Msk)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="114"><highlight class="comment">/**<sp/>@brief<sp/>Presence<sp/>of<sp/>the<sp/>KEY<sp/>register.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_ECB_HAS_KEY<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_ECB_HAS_KEY<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(ECB_IN_PTR_PTR_Msk)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="121"><highlight class="comment">/**<sp/>@brief<sp/>Presence<sp/>of<sp/>the<sp/>IN.PTR<sp/>register.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_ECB_HAS_IN_PTR<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_ECB_HAS_IN_PTR<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(ECB_IN_AMOUNT_AMOUNT_Msk)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="128"><highlight class="comment">/**<sp/>@brief<sp/>Presence<sp/>of<sp/>the<sp/>IN.AMOUNT<sp/>register.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_ECB_HAS_IN_AMOUNT<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_ECB_HAS_IN_AMOUNT<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(ECB_OUT_PTR_PTR_Msk)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="135"><highlight class="comment">/**<sp/>@brief<sp/>Presence<sp/>of<sp/>the<sp/>OUT.PTR<sp/>register.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_ECB_HAS_OUT_PTR<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_ECB_HAS_OUT_PTR<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(ECB_OUT_AMOUNT_AMOUNT_Msk)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="142"><highlight class="comment">/**<sp/>@brief<sp/>Presence<sp/>of<sp/>the<sp/>OUT.AMOUNT<sp/>register.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_ECB_HAS_OUT_AMOUNT<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_ECB_HAS_OUT_AMOUNT<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(NRF51)<sp/>||<sp/>defined(NRF52832_XXAA)<sp/>||<sp/>\</highlight></codeline>
<codeline lineno="149"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>defined(ECB_ECBDATAPTR_ECBDATAPTR_Msk)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="150"><highlight class="comment">/**<sp/>@brief<sp/>Presence<sp/>of<sp/>the<sp/><sp/>ECBDATAPTR<sp/>register.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_ECB_HAS_ECBDATAPTR<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_ECB_HAS_ECBDATAPTR<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="156"><highlight class="comment">/**<sp/>@brief<sp/>ECB<sp/>tasks.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal">{</highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_ECB_HAS_TASK_STARTECB</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__ecb__hal_1ggac4ecf0d83e451302bfae6d2b54ed546ca338e621bc5d40864b2e0e43f3ef11d1f" kindref="member">NRF_ECB_TASK_STARTECB</ref><sp/>=<sp/>offsetof(NRF_ECB_Type,<sp/>TASKS_STARTECB),<sp/></highlight><highlight class="comment">/**&lt;<sp/>Task<sp/>for<sp/>starting<sp/>the<sp/>ECB<sp/>block<sp/>encryption.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_ECB_HAS_TASK_START</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__ecb__hal_1ggac4ecf0d83e451302bfae6d2b54ed546ca80a17abd080cb436d7fc488c8bb28f4d" kindref="member">NRF_ECB_TASK_START</ref><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_ECB_Type,<sp/>TASKS_START),<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Task<sp/>for<sp/>starting<sp/>the<sp/>ECB<sp/>block<sp/>encryption.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_ECB_HAS_TASK_STOPECB</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__ecb__hal_1ggac4ecf0d83e451302bfae6d2b54ed546ca0d7751481f61e9318922e7ab77eb8b39" kindref="member">NRF_ECB_TASK_STOPECB</ref><sp/><sp/>=<sp/>offsetof(NRF_ECB_Type,<sp/>TASKS_STOPECB),<sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Task<sp/>for<sp/>stopping<sp/>the<sp/>ECB<sp/>block<sp/>encryption.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_ECB_HAS_TASK_STOP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__ecb__hal_1ggac4ecf0d83e451302bfae6d2b54ed546ca8f4773a1e9ec7b0b66585185499cefb5" kindref="member">NRF_ECB_TASK_STOP</ref><sp/><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_ECB_Type,<sp/>TASKS_STOP),<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Task<sp/>for<sp/>stopping<sp/>the<sp/>ECB<sp/>block<sp/>encryption.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal">}<sp/><ref refid="group__nrf__ecb__hal_1gac4ecf0d83e451302bfae6d2b54ed546c" kindref="member">nrf_ecb_task_t</ref>;</highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="173"><highlight class="comment">/**<sp/>@brief<sp/>ECB<sp/>events.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal">{</highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_ECB_HAS_EVENT_ENDECB</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__ecb__hal_1ggaeb64b50b89500a23e71c5c41002a0af2a6c670ee1eb1a525fa8b621f79f7e95c6" kindref="member">NRF_ECB_EVENT_ENDECB</ref><sp/><sp/><sp/>=<sp/>offsetof(NRF_ECB_Type,<sp/>EVENTS_ENDECB),<sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>ECB<sp/>block<sp/>encrypt<sp/>complete.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_ECB_HAS_EVENT_ERRORECB</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__ecb__hal_1ggaeb64b50b89500a23e71c5c41002a0af2ae1e165c2ec808e92aea02ae5b6af7439" kindref="member">NRF_ECB_EVENT_ERRORECB</ref><sp/>=<sp/>offsetof(NRF_ECB_Type,<sp/>EVENTS_ERRORECB),<sp/></highlight><highlight class="comment">/**&lt;<sp/>ECB<sp/>block<sp/>encrypt<sp/>aborted<sp/>because<sp/>of<sp/>a<sp/>STOPECB<sp/>task<sp/>or<sp/>due<sp/>to<sp/>an<sp/>error.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_ECB_HAS_EVENT_END</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__ecb__hal_1ggaeb64b50b89500a23e71c5c41002a0af2a0112d42da8b9b75c0d3f21e575f643f1" kindref="member">NRF_ECB_EVENT_END</ref><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_ECB_Type,<sp/>EVENTS_END),<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>ECB<sp/>block<sp/>encrypt<sp/>complete.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_ECB_HAS_EVENT_ERROR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__ecb__hal_1ggaeb64b50b89500a23e71c5c41002a0af2a6de90b30a562a730033f4acbd844c567" kindref="member">NRF_ECB_EVENT_ERROR</ref><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_ECB_Type,<sp/>EVENTS_ERROR),<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>ECB<sp/>block<sp/>encrypt<sp/>aborted<sp/>because<sp/>of<sp/>a<sp/>STOPECB<sp/>task<sp/>or<sp/>due<sp/>to<sp/>an<sp/>error.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal">}<sp/><ref refid="group__nrf__ecb__hal_1gaeb64b50b89500a23e71c5c41002a0af2" kindref="member">nrf_ecb_event_t</ref>;</highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="190"><highlight class="comment">/**<sp/>@brief<sp/>ECB<sp/>interrupts.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal">{</highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_ECB_HAS_EVENT_ENDECB</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__ecb__hal_1gga91ca43c848863f0c0ce970054f33b478a568a063e1a79d57acddddefbe65c8e27" kindref="member">NRF_ECB_INT_ENDECB_MASK</ref><sp/><sp/><sp/>=<sp/>ECB_INTENSET_ENDECB_Msk,<sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Interrupt<sp/>on<sp/>ENDECB<sp/>event.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_ECB_HAS_EVENT_ERRORECB</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__ecb__hal_1gga91ca43c848863f0c0ce970054f33b478a68880909012bfb1e6a36f131820e9efd" kindref="member">NRF_ECB_INT_ERRORECB_MASK</ref><sp/>=<sp/>ECB_INTENSET_ERRORECB_Msk,<sp/></highlight><highlight class="comment">///&lt;<sp/>Interrupt<sp/>on<sp/>ERRORECB<sp/>event.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_ECB_HAS_EVENT_END</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__ecb__hal_1gga91ca43c848863f0c0ce970054f33b478a7b78be029fcf6179329ac034e1e9b95c" kindref="member">NRF_ECB_INT_END_MASK</ref><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>ECB_INTENSET_END_Msk,<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Interrupt<sp/>on<sp/>END<sp/>event.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_ECB_HAS_EVENT_ERROR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__ecb__hal_1gga91ca43c848863f0c0ce970054f33b478a625ac92ff666d0fde139e515486d5efd" kindref="member">NRF_ECB_INT_ERROR_MASK</ref><sp/><sp/><sp/><sp/>=<sp/>ECB_INTENSET_ERROR_Msk,<sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Interrupt<sp/>on<sp/>ERROR<sp/>event.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal">}<sp/><ref refid="group__nrf__ecb__hal_1ga91ca43c848863f0c0ce970054f33b478" kindref="member">nrf_ecb_int_mask_t</ref>;</highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="208"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="209"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>activating<sp/>the<sp/>specified<sp/>ECB<sp/>task.</highlight></codeline>
<codeline lineno="210"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="211"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="212"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>task<sp/><sp/>Task<sp/>to<sp/>be<sp/>activated.</highlight></codeline>
<codeline lineno="213"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__ecb__hal_1gaf192ddaeac6403b793f1f5f3fe8687cb" kindref="member">nrf_ecb_task_trigger</ref>(NRF_ECB_Type<sp/>*<sp/>p_reg,<sp/><ref refid="group__nrf__ecb__hal_1gac4ecf0d83e451302bfae6d2b54ed546c" kindref="member">nrf_ecb_task_t</ref><sp/>task);</highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="216"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="217"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>the<sp/>address<sp/>of<sp/>the<sp/>specified<sp/>ECB<sp/>task<sp/>register.</highlight></codeline>
<codeline lineno="218"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="219"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="220"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>task<sp/><sp/>Requested<sp/>task.</highlight></codeline>
<codeline lineno="221"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="222"><highlight class="comment"><sp/>*<sp/>@return<sp/>Address<sp/>of<sp/>the<sp/>specified<sp/>task<sp/>register.</highlight></codeline>
<codeline lineno="223"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__ecb__hal_1ga718830ff53e97e283dc82aa36c7f4427" kindref="member">nrf_ecb_task_address_get</ref>(NRF_ECB_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__ecb__hal_1gac4ecf0d83e451302bfae6d2b54ed546c" kindref="member">nrf_ecb_task_t</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>task);</highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="227"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="228"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>clearing<sp/>the<sp/>specified<sp/>ECB<sp/>event.</highlight></codeline>
<codeline lineno="229"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="230"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="231"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>event<sp/>Event<sp/>to<sp/>clear.</highlight></codeline>
<codeline lineno="232"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__ecb__hal_1ga3d14a076be4bfc8f08221a1ded6a5160" kindref="member">nrf_ecb_event_clear</ref>(NRF_ECB_Type<sp/>*<sp/>p_reg,<sp/><ref refid="group__nrf__ecb__hal_1gaeb64b50b89500a23e71c5c41002a0af2" kindref="member">nrf_ecb_event_t</ref><sp/>event);</highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="235"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="236"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>retrieving<sp/>the<sp/>state<sp/>of<sp/>the<sp/>ECB<sp/>event.</highlight></codeline>
<codeline lineno="237"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="238"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="239"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>event<sp/>Event<sp/>to<sp/>be<sp/>checked.</highlight></codeline>
<codeline lineno="240"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="241"><highlight class="comment"><sp/>*<sp/>@retval<sp/>true<sp/><sp/>The<sp/>event<sp/>has<sp/>been<sp/>generated.</highlight></codeline>
<codeline lineno="242"><highlight class="comment"><sp/>*<sp/>@retval<sp/>false<sp/>The<sp/>event<sp/>has<sp/>not<sp/>been<sp/>generated.</highlight></codeline>
<codeline lineno="243"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrf__ecb__hal_1ga90ef309d7ab03fc57decfda2cda0d516" kindref="member">nrf_ecb_event_check</ref>(NRF_ECB_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,<sp/><ref refid="group__nrf__ecb__hal_1gaeb64b50b89500a23e71c5c41002a0af2" kindref="member">nrf_ecb_event_t</ref><sp/>event);</highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="246"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="247"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>the<sp/>address<sp/>of<sp/>the<sp/>specified<sp/>ECB<sp/>event<sp/>register.</highlight></codeline>
<codeline lineno="248"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="249"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="250"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>event<sp/>Requested<sp/>event.</highlight></codeline>
<codeline lineno="251"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="252"><highlight class="comment"><sp/>*<sp/>@return<sp/>Address<sp/>of<sp/>the<sp/>specified<sp/>event<sp/>register.</highlight></codeline>
<codeline lineno="253"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__ecb__hal_1gae95d992775c99eb76db324632edd54e8" kindref="member">nrf_ecb_event_address_get</ref>(NRF_ECB_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__ecb__hal_1gaeb64b50b89500a23e71c5c41002a0af2" kindref="member">nrf_ecb_event_t</ref><sp/><sp/><sp/><sp/><sp/><sp/>event);</highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="257"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="258"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>enabling<sp/>the<sp/>specified<sp/>interrupts.</highlight></codeline>
<codeline lineno="259"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="260"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="261"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>mask<sp/><sp/>Mask<sp/>of<sp/>interrupts<sp/>to<sp/>be<sp/>enabled.</highlight></codeline>
<codeline lineno="262"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Use<sp/>@ref<sp/>nrf_ecb_int_mask_t<sp/>values<sp/>for<sp/>bit<sp/>masking.</highlight></codeline>
<codeline lineno="263"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__ecb__hal_1ga4ddd691e3f86b9e4d706eefbf95d7e7e" kindref="member">nrf_ecb_int_enable</ref>(NRF_ECB_Type<sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>mask);</highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="266"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="267"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>disabling<sp/>the<sp/>specified<sp/>interrupts.</highlight></codeline>
<codeline lineno="268"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="269"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="270"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>mask<sp/><sp/>Mask<sp/>of<sp/>interrupts<sp/>to<sp/>be<sp/>disabled.</highlight></codeline>
<codeline lineno="271"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Use<sp/>@ref<sp/>nrf_ecb_int_mask_t<sp/>values<sp/>for<sp/>bit<sp/>masking.</highlight></codeline>
<codeline lineno="272"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__ecb__hal_1ga2622bab1db3db81c0431240d2e3e1053" kindref="member">nrf_ecb_int_disable</ref>(NRF_ECB_Type<sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>mask);</highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="275"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="276"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>checking<sp/>if<sp/>the<sp/>specified<sp/>interrupts<sp/>are<sp/>enabled.</highlight></codeline>
<codeline lineno="277"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="278"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="279"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>mask<sp/><sp/>Mask<sp/>of<sp/>interrupts<sp/>to<sp/>be<sp/>checked.</highlight></codeline>
<codeline lineno="280"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Use<sp/>@ref<sp/>nrf_ecb_int_mask_t<sp/>values<sp/>for<sp/>bit<sp/>masking.</highlight></codeline>
<codeline lineno="281"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="282"><highlight class="comment"><sp/>*<sp/>@return<sp/>Mask<sp/>of<sp/>enabled<sp/>interrupts.</highlight></codeline>
<codeline lineno="283"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__ecb__hal_1ga536f0db41a066ef0f09ffedc12085479" kindref="member">nrf_ecb_int_enable_check</ref>(NRF_ECB_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>mask);</highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_ECB_HAS_ECBDATAPTR</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="287"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="288"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>the<sp/>pointer<sp/>to<sp/>the<sp/>ECB<sp/>data<sp/>buffer.</highlight></codeline>
<codeline lineno="289"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="290"><highlight class="comment"><sp/>*<sp/>@note<sp/>The<sp/>buffer<sp/>has<sp/>to<sp/>be<sp/>placed<sp/>in<sp/>the<sp/>Data<sp/>RAM<sp/>region.</highlight></codeline>
<codeline lineno="291"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>For<sp/>description<sp/>of<sp/>the<sp/>data<sp/>structure<sp/>in<sp/>this<sp/>buffer,<sp/>see<sp/>the<sp/>Product<sp/>Specification.</highlight></codeline>
<codeline lineno="292"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="293"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="294"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_buffer<sp/>Pointer<sp/>to<sp/>the<sp/>ECB<sp/>data<sp/>buffer.</highlight></codeline>
<codeline lineno="295"><highlight class="comment"><sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__ecb__hal_1ga60c24f78d6cce8a37696017e4d4ea5d6" kindref="member">nrf_ecb_data_pointer_set</ref>(NRF_ECB_Type<sp/>*<sp/>p_reg,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_buffer);</highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="298"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="299"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>the<sp/>pointer<sp/>to<sp/>the<sp/>ECB<sp/>data<sp/>buffer.</highlight></codeline>
<codeline lineno="300"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="301"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="302"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="303"><highlight class="comment"><sp/>*<sp/>@return<sp/>Pointer<sp/>to<sp/>the<sp/>ECB<sp/>data<sp/>buffer.</highlight></codeline>
<codeline lineno="304"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/><ref refid="group__nrf__ecb__hal_1gaa162cb7821e54755c378ed5eecd677e1" kindref="member">nrf_ecb_data_pointer_get</ref>(NRF_ECB_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRF_ECB_HAS_ECBDATAPTR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_ECB_HAS_KEY</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="309"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="310"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>the<sp/>AES<sp/>key.</highlight></codeline>
<codeline lineno="311"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="312"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="313"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_key<sp/>Pointer<sp/>to<sp/>the<sp/>AES<sp/>128-bit<sp/>key<sp/>value.<sp/>The<sp/>key<sp/>shall<sp/>be<sp/>stored</highlight></codeline>
<codeline lineno="314"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>in<sp/>big<sp/>endian<sp/>byte<sp/>order.</highlight></codeline>
<codeline lineno="315"><highlight class="comment"><sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__ecb__hal_1gae20d640a432668714bca3554ea4bcded" kindref="member">nrf_ecb_key_set</ref>(NRF_ECB_Type<sp/><sp/><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_key);</highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRF_ECB_HAS_KEY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_ECB_HAS_IN_PTR</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="321"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="322"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>the<sp/>pointer<sp/>to<sp/>a<sp/>job<sp/>list<sp/>containing<sp/>unencrypted</highlight></codeline>
<codeline lineno="323"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ECB<sp/>data<sp/>structure<sp/>in<sp/>Encryption<sp/>mode<sp/>or<sp/>encrypted<sp/>ECB<sp/>data<sp/>structure</highlight></codeline>
<codeline lineno="324"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>in<sp/>Decryption<sp/>mode.</highlight></codeline>
<codeline lineno="325"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="326"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="327"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_job<sp/>Pointer<sp/>to<sp/>a<sp/>job<sp/>list.</highlight></codeline>
<codeline lineno="328"><highlight class="comment"><sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__ecb__hal_1ga047a8041657af0eef52bec01fae045fe" kindref="member">nrf_ecb_in_ptr_set</ref>(NRF_ECB_Type<sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structnrf__vdma__job__t" kindref="compound">nrf_vdma_job_t</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_job);</highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="332"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="333"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>the<sp/>pointer<sp/>to<sp/>job<sp/>list<sp/>containing<sp/>unencrypted</highlight></codeline>
<codeline lineno="334"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ECB<sp/>data<sp/>structure<sp/>in<sp/>Encryption<sp/>mode<sp/>or<sp/>encrypted<sp/>ECB<sp/>data<sp/>structure</highlight></codeline>
<codeline lineno="335"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>in<sp/>Decryption<sp/>mode.</highlight></codeline>
<codeline lineno="336"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="337"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="338"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="339"><highlight class="comment"><sp/>*<sp/>@return<sp/>Pointer<sp/>to<sp/>a<sp/>job<sp/>list.</highlight></codeline>
<codeline lineno="340"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal">NRF_STATIC_INLINE<sp/><ref refid="structnrf__vdma__job__t" kindref="compound">nrf_vdma_job_t</ref><sp/>*<sp/><ref refid="group__nrf__ecb__hal_1ga4590a4ccb6dc4416d955f989fed4b45f" kindref="member">nrf_ecb_in_ptr_get</ref>(NRF_ECB_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="342"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRF_ECB_HAS_IN_PTR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_ECB_HAS_IN_AMOUNT</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="345"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="346"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>number<sp/>of<sp/>bytes<sp/>read<sp/>from<sp/>the<sp/>input<sp/>data,</highlight></codeline>
<codeline lineno="347"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>not<sp/>including<sp/>the<sp/>job<sp/>list<sp/>structure.</highlight></codeline>
<codeline lineno="348"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="349"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="350"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="351"><highlight class="comment"><sp/>*<sp/>@return<sp/>Number<sp/>of<sp/>bytes<sp/>read<sp/>from<sp/>the<sp/>input<sp/>data.</highlight></codeline>
<codeline lineno="352"><highlight class="comment"><sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__ecb__hal_1ga883ac07a3e2db180e3ba3c50aae83b4e" kindref="member">nrf_ecb_in_amount_get</ref>(NRF_ECB_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRF_ECB_HAS_IN_AMOUNT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_ECB_HAS_OUT_PTR</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="357"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="358"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>the<sp/>pointer<sp/>to<sp/>a<sp/>job<sp/>list<sp/>containing<sp/>encrypted</highlight></codeline>
<codeline lineno="359"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ECB<sp/>data<sp/>structure<sp/>in<sp/>Encryption<sp/>mode<sp/>or<sp/>decrypted<sp/>ECB<sp/>data<sp/>structure</highlight></codeline>
<codeline lineno="360"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>in<sp/>Decryption<sp/>mode.</highlight></codeline>
<codeline lineno="361"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="362"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="363"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_job<sp/>Pointer<sp/>to<sp/>a<sp/>job<sp/>list.</highlight></codeline>
<codeline lineno="364"><highlight class="comment"><sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__ecb__hal_1ga514222bacd9f83686cdb6f699421252d" kindref="member">nrf_ecb_out_ptr_set</ref>(NRF_ECB_Type<sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structnrf__vdma__job__t" kindref="compound">nrf_vdma_job_t</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_job);</highlight></codeline>
<codeline lineno="367"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="368"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="369"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>the<sp/>pointer<sp/>to<sp/>a<sp/>job<sp/>list<sp/>containing<sp/>encrypted</highlight></codeline>
<codeline lineno="370"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ECB<sp/>data<sp/>structure<sp/>in<sp/>Encryption<sp/>mode<sp/>or<sp/>decrypted<sp/>ECB<sp/>data<sp/>structure</highlight></codeline>
<codeline lineno="371"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>in<sp/>Decryption<sp/>mode.</highlight></codeline>
<codeline lineno="372"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="373"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="374"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="375"><highlight class="comment"><sp/>*<sp/>@return<sp/>Pointer<sp/>to<sp/>the<sp/>job<sp/>list.</highlight></codeline>
<codeline lineno="376"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal">NRF_STATIC_INLINE<sp/><ref refid="structnrf__vdma__job__t" kindref="compound">nrf_vdma_job_t</ref><sp/>*<sp/><ref refid="group__nrf__ecb__hal_1gaf9da5cba0f135ce37fb7866ac5d3c137" kindref="member">nrf_ecb_out_ptr_get</ref>(NRF_ECB_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="378"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRF_ECB_HAS_OUT_PTR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal"></highlight></codeline>
<codeline lineno="380"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_ECB_HAS_OUT_AMOUNT</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="381"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="382"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>number<sp/>of<sp/>bytes<sp/>available<sp/>in<sp/>the<sp/>output<sp/>data,</highlight></codeline>
<codeline lineno="383"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>not<sp/>including<sp/>the<sp/>job<sp/>list<sp/>structure.</highlight></codeline>
<codeline lineno="384"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="385"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="386"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="387"><highlight class="comment"><sp/>*<sp/>@return<sp/>Number<sp/>of<sp/>bytes<sp/>available<sp/>in<sp/>the<sp/>output<sp/>data.</highlight></codeline>
<codeline lineno="388"><highlight class="comment"><sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="389"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__ecb__hal_1gac2b097a3b9f27ecf2575e434dfbd3ddf" kindref="member">nrf_ecb_out_amount_get</ref>(NRF_ECB_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="390"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRF_ECB_HAS_OUT_AMOUNT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(DPPI_PRESENT)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="393"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="394"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>the<sp/>subscribe<sp/>configuration<sp/>for<sp/>a<sp/>given</highlight></codeline>
<codeline lineno="395"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ECB<sp/>task.</highlight></codeline>
<codeline lineno="396"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="397"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="398"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>task<sp/><sp/><sp/><sp/>Task<sp/>for<sp/>which<sp/>to<sp/>set<sp/>the<sp/>configuration.</highlight></codeline>
<codeline lineno="399"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>channel<sp/>Channel<sp/>through<sp/>which<sp/>to<sp/>subscribe<sp/>events.</highlight></codeline>
<codeline lineno="400"><highlight class="comment"><sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__ecb__hal_1ga1859cfd6afa9ddd143661b9c089266a5" kindref="member">nrf_ecb_subscribe_set</ref>(NRF_ECB_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__ecb__hal_1gac4ecf0d83e451302bfae6d2b54ed546c" kindref="member">nrf_ecb_task_t</ref><sp/>task,</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>channel);</highlight></codeline>
<codeline lineno="404"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="405"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="406"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>clearing<sp/>the<sp/>subscribe<sp/>configuration<sp/>for<sp/>a<sp/>given</highlight></codeline>
<codeline lineno="407"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ECB<sp/>task.</highlight></codeline>
<codeline lineno="408"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="409"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="410"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>task<sp/><sp/>Task<sp/>for<sp/>which<sp/>to<sp/>clear<sp/>the<sp/>configuration.</highlight></codeline>
<codeline lineno="411"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__ecb__hal_1ga41212c13c2456d8da5729ef465cccbea" kindref="member">nrf_ecb_subscribe_clear</ref>(NRF_ECB_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__ecb__hal_1gac4ecf0d83e451302bfae6d2b54ed546c" kindref="member">nrf_ecb_task_t</ref><sp/>task);</highlight></codeline>
<codeline lineno="414"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="415"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="416"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>the<sp/>publish<sp/>configuration<sp/>for<sp/>a<sp/>given</highlight></codeline>
<codeline lineno="417"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ECB<sp/>event.</highlight></codeline>
<codeline lineno="418"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="419"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="420"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>event<sp/><sp/><sp/>Event<sp/>for<sp/>which<sp/>to<sp/>set<sp/>the<sp/>configuration.</highlight></codeline>
<codeline lineno="421"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>channel<sp/>Channel<sp/>through<sp/>which<sp/>to<sp/>publish<sp/>the<sp/>event.</highlight></codeline>
<codeline lineno="422"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="423"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__ecb__hal_1ga3fbe83f2accb07e50084e3bc7062aabb" kindref="member">nrf_ecb_publish_set</ref>(NRF_ECB_Type<sp/>*<sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__ecb__hal_1gaeb64b50b89500a23e71c5c41002a0af2" kindref="member">nrf_ecb_event_t</ref><sp/>event,</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>channel);</highlight></codeline>
<codeline lineno="426"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="427"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="428"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>clearing<sp/>the<sp/>publish<sp/>configuration<sp/>for<sp/>a<sp/>given</highlight></codeline>
<codeline lineno="429"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ECB<sp/>event.</highlight></codeline>
<codeline lineno="430"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="431"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="432"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>event<sp/>Event<sp/>for<sp/>which<sp/>to<sp/>clear<sp/>the<sp/>configuration.</highlight></codeline>
<codeline lineno="433"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="434"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__ecb__hal_1gab3d8177e957e0495aa2b84c581b71013" kindref="member">nrf_ecb_publish_clear</ref>(NRF_ECB_Type<sp/>*<sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__ecb__hal_1gaeb64b50b89500a23e71c5c41002a0af2" kindref="member">nrf_ecb_event_t</ref><sp/>event);</highlight></codeline>
<codeline lineno="436"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>defined(DPPI_PRESENT)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="437"><highlight class="normal"></highlight></codeline>
<codeline lineno="438"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>NRF_DECLARE_ONLY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="439"><highlight class="normal"></highlight></codeline>
<codeline lineno="440"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__ecb__hal_1gaf192ddaeac6403b793f1f5f3fe8687cb" kindref="member">nrf_ecb_task_trigger</ref>(NRF_ECB_Type<sp/>*<sp/>p_reg,<sp/><ref refid="group__nrf__ecb__hal_1gac4ecf0d83e451302bfae6d2b54ed546c" kindref="member">nrf_ecb_task_t</ref><sp/>task)</highlight></codeline>
<codeline lineno="441"><highlight class="normal">{</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/>*((</highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint32_t<sp/>*)((uint8_t<sp/>*)p_reg<sp/>+<sp/>(uint32_t)task))<sp/>=<sp/>0x1UL;</highlight></codeline>
<codeline lineno="443"><highlight class="normal">}</highlight></codeline>
<codeline lineno="444"><highlight class="normal"></highlight></codeline>
<codeline lineno="445"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__ecb__hal_1ga718830ff53e97e283dc82aa36c7f4427" kindref="member">nrf_ecb_task_address_get</ref>(NRF_ECB_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__ecb__hal_1gac4ecf0d83e451302bfae6d2b54ed546c" kindref="member">nrf_ecb_task_t</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>task)</highlight></codeline>
<codeline lineno="447"><highlight class="normal">{</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((uint32_t)p_reg<sp/>+<sp/>(uint32_t)task);</highlight></codeline>
<codeline lineno="449"><highlight class="normal">}</highlight></codeline>
<codeline lineno="450"><highlight class="normal"></highlight></codeline>
<codeline lineno="451"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__ecb__hal_1ga3d14a076be4bfc8f08221a1ded6a5160" kindref="member">nrf_ecb_event_clear</ref>(NRF_ECB_Type<sp/>*<sp/>p_reg,<sp/><ref refid="group__nrf__ecb__hal_1gaeb64b50b89500a23e71c5c41002a0af2" kindref="member">nrf_ecb_event_t</ref><sp/>event)</highlight></codeline>
<codeline lineno="452"><highlight class="normal">{</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/>*((</highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint32_t<sp/>*)((uint8_t<sp/>*)p_reg<sp/>+<sp/>(uint32_t)event))<sp/>=<sp/>0x0UL;</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/>nrf_event_readback((uint8_t<sp/>*)p_reg<sp/>+<sp/>(uint32_t)event);</highlight></codeline>
<codeline lineno="455"><highlight class="normal">}</highlight></codeline>
<codeline lineno="456"><highlight class="normal"></highlight></codeline>
<codeline lineno="457"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrf__ecb__hal_1ga90ef309d7ab03fc57decfda2cda0d516" kindref="member">nrf_ecb_event_check</ref>(NRF_ECB_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,<sp/><ref refid="group__nrf__ecb__hal_1gaeb64b50b89500a23e71c5c41002a0af2" kindref="member">nrf_ecb_event_t</ref><sp/>event)</highlight></codeline>
<codeline lineno="458"><highlight class="normal">{</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>nrf_event_check(p_reg,<sp/>event);</highlight></codeline>
<codeline lineno="460"><highlight class="normal">}</highlight></codeline>
<codeline lineno="461"><highlight class="normal"></highlight></codeline>
<codeline lineno="462"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__ecb__hal_1gae95d992775c99eb76db324632edd54e8" kindref="member">nrf_ecb_event_address_get</ref>(NRF_ECB_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__ecb__hal_1gaeb64b50b89500a23e71c5c41002a0af2" kindref="member">nrf_ecb_event_t</ref><sp/><sp/><sp/><sp/><sp/><sp/>event)</highlight></codeline>
<codeline lineno="464"><highlight class="normal">{</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((uint32_t)p_reg<sp/>+<sp/>(uint32_t)event);</highlight></codeline>
<codeline lineno="466"><highlight class="normal">}</highlight></codeline>
<codeline lineno="467"><highlight class="normal"></highlight></codeline>
<codeline lineno="468"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__ecb__hal_1ga4ddd691e3f86b9e4d706eefbf95d7e7e" kindref="member">nrf_ecb_int_enable</ref>(NRF_ECB_Type<sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>mask)</highlight></codeline>
<codeline lineno="469"><highlight class="normal">{</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;INTENSET<sp/>=<sp/>mask;</highlight></codeline>
<codeline lineno="471"><highlight class="normal">}</highlight></codeline>
<codeline lineno="472"><highlight class="normal"></highlight></codeline>
<codeline lineno="473"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__ecb__hal_1ga2622bab1db3db81c0431240d2e3e1053" kindref="member">nrf_ecb_int_disable</ref>(NRF_ECB_Type<sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>mask)</highlight></codeline>
<codeline lineno="474"><highlight class="normal">{</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;INTENCLR<sp/>=<sp/>mask;</highlight></codeline>
<codeline lineno="476"><highlight class="normal">}</highlight></codeline>
<codeline lineno="477"><highlight class="normal"></highlight></codeline>
<codeline lineno="478"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__ecb__hal_1ga536f0db41a066ef0f09ffedc12085479" kindref="member">nrf_ecb_int_enable_check</ref>(NRF_ECB_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>mask)</highlight></codeline>
<codeline lineno="479"><highlight class="normal">{</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p_reg-&gt;INTENSET<sp/>&amp;<sp/>mask;</highlight></codeline>
<codeline lineno="481"><highlight class="normal">}</highlight></codeline>
<codeline lineno="482"><highlight class="normal"></highlight></codeline>
<codeline lineno="483"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_ECB_HAS_ECBDATAPTR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="484"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__ecb__hal_1ga60c24f78d6cce8a37696017e4d4ea5d6" kindref="member">nrf_ecb_data_pointer_set</ref>(NRF_ECB_Type<sp/>*<sp/>p_reg,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_buffer)</highlight></codeline>
<codeline lineno="485"><highlight class="normal">{</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;ECBDATAPTR<sp/>=<sp/>(uint32_t)p_buffer;</highlight></codeline>
<codeline lineno="487"><highlight class="normal">}</highlight></codeline>
<codeline lineno="488"><highlight class="normal"></highlight></codeline>
<codeline lineno="489"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/><ref refid="group__nrf__ecb__hal_1gaa162cb7821e54755c378ed5eecd677e1" kindref="member">nrf_ecb_data_pointer_get</ref>(NRF_ECB_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="490"><highlight class="normal">{</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)(p_reg-&gt;ECBDATAPTR);</highlight></codeline>
<codeline lineno="492"><highlight class="normal">}</highlight></codeline>
<codeline lineno="493"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRF_ECB_HAS_ECBDATAPTR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="494"><highlight class="normal"></highlight></codeline>
<codeline lineno="495"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_ECB_HAS_KEY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="496"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__ecb__hal_1gae20d640a432668714bca3554ea4bcded" kindref="member">nrf_ecb_key_set</ref>(NRF_ECB_Type<sp/><sp/><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_key)</highlight></codeline>
<codeline lineno="498"><highlight class="normal">{</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint8_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>ECB_KEY_VALUE_MaxCount;<sp/>i++)</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_reg-&gt;KEY.VALUE[i]<sp/>=<sp/>p_key[i];</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="503"><highlight class="normal">}</highlight></codeline>
<codeline lineno="504"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRF_ECB_HAS_KEY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="505"><highlight class="normal"></highlight></codeline>
<codeline lineno="506"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_ECB_HAS_IN_PTR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="507"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__ecb__hal_1ga047a8041657af0eef52bec01fae045fe" kindref="member">nrf_ecb_in_ptr_set</ref>(NRF_ECB_Type<sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structnrf__vdma__job__t" kindref="compound">nrf_vdma_job_t</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_job)</highlight></codeline>
<codeline lineno="509"><highlight class="normal">{</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;IN.PTR<sp/>=<sp/>(uint32_t)p_job;</highlight></codeline>
<codeline lineno="511"><highlight class="normal">}</highlight></codeline>
<codeline lineno="512"><highlight class="normal"></highlight></codeline>
<codeline lineno="513"><highlight class="normal">NRF_STATIC_INLINE<sp/><ref refid="structnrf__vdma__job__t" kindref="compound">nrf_vdma_job_t</ref><sp/>*<sp/><ref refid="group__nrf__ecb__hal_1ga4590a4ccb6dc4416d955f989fed4b45f" kindref="member">nrf_ecb_in_ptr_get</ref>(NRF_ECB_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="514"><highlight class="normal">{</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structnrf__vdma__job__t" kindref="compound">nrf_vdma_job_t</ref><sp/>*)(p_reg-&gt;IN.PTR);</highlight></codeline>
<codeline lineno="516"><highlight class="normal">}</highlight></codeline>
<codeline lineno="517"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRF_ECB_HAS_IN_PTR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="518"><highlight class="normal"></highlight></codeline>
<codeline lineno="519"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_ECB_HAS_IN_AMOUNT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="520"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__ecb__hal_1ga883ac07a3e2db180e3ba3c50aae83b4e" kindref="member">nrf_ecb_in_amount_get</ref>(NRF_ECB_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="521"><highlight class="normal">{</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p_reg-&gt;IN.AMOUNT;</highlight></codeline>
<codeline lineno="523"><highlight class="normal">}</highlight></codeline>
<codeline lineno="524"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRF_ECB_HAS_IN_AMOUNT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="525"><highlight class="normal"></highlight></codeline>
<codeline lineno="526"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_ECB_HAS_OUT_PTR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="527"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__ecb__hal_1ga514222bacd9f83686cdb6f699421252d" kindref="member">nrf_ecb_out_ptr_set</ref>(NRF_ECB_Type<sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structnrf__vdma__job__t" kindref="compound">nrf_vdma_job_t</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_job)</highlight></codeline>
<codeline lineno="529"><highlight class="normal">{</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;OUT.PTR<sp/>=<sp/>(uint32_t)p_job;</highlight></codeline>
<codeline lineno="531"><highlight class="normal">}</highlight></codeline>
<codeline lineno="532"><highlight class="normal"></highlight></codeline>
<codeline lineno="533"><highlight class="normal">NRF_STATIC_INLINE<sp/><ref refid="structnrf__vdma__job__t" kindref="compound">nrf_vdma_job_t</ref><sp/>*<sp/><ref refid="group__nrf__ecb__hal_1gaf9da5cba0f135ce37fb7866ac5d3c137" kindref="member">nrf_ecb_out_ptr_get</ref>(NRF_ECB_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="534"><highlight class="normal">{</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structnrf__vdma__job__t" kindref="compound">nrf_vdma_job_t</ref><sp/>*)(p_reg-&gt;OUT.PTR);</highlight></codeline>
<codeline lineno="536"><highlight class="normal">}</highlight></codeline>
<codeline lineno="537"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRF_ECB_HAS_OUT_PTR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="538"><highlight class="normal"></highlight></codeline>
<codeline lineno="539"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_ECB_HAS_OUT_AMOUNT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="540"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__ecb__hal_1gac2b097a3b9f27ecf2575e434dfbd3ddf" kindref="member">nrf_ecb_out_amount_get</ref>(NRF_ECB_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="541"><highlight class="normal">{</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p_reg-&gt;OUT.AMOUNT;</highlight></codeline>
<codeline lineno="543"><highlight class="normal">}</highlight></codeline>
<codeline lineno="544"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRF_ECB_HAS_OUT_AMOUNT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="545"><highlight class="normal"></highlight></codeline>
<codeline lineno="546"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(DPPI_PRESENT)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="547"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__ecb__hal_1ga1859cfd6afa9ddd143661b9c089266a5" kindref="member">nrf_ecb_subscribe_set</ref>(NRF_ECB_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__ecb__hal_1gac4ecf0d83e451302bfae6d2b54ed546c" kindref="member">nrf_ecb_task_t</ref><sp/>task,</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>channel)</highlight></codeline>
<codeline lineno="550"><highlight class="normal">{</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/>*((</highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint32_t<sp/>*)<sp/>((uint8_t<sp/>*)<sp/>p_reg<sp/>+<sp/>(uint32_t)<sp/>task<sp/>+<sp/>0x80uL))<sp/>=</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)channel<sp/>|<sp/>NRF_SUBSCRIBE_PUBLISH_ENABLE);</highlight></codeline>
<codeline lineno="553"><highlight class="normal">}</highlight></codeline>
<codeline lineno="554"><highlight class="normal"></highlight></codeline>
<codeline lineno="555"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__ecb__hal_1ga41212c13c2456d8da5729ef465cccbea" kindref="member">nrf_ecb_subscribe_clear</ref>(NRF_ECB_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__ecb__hal_1gac4ecf0d83e451302bfae6d2b54ed546c" kindref="member">nrf_ecb_task_t</ref><sp/>task)</highlight></codeline>
<codeline lineno="557"><highlight class="normal">{</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/>*((</highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint32_t<sp/>*)<sp/>((uint8_t<sp/>*)<sp/>p_reg<sp/>+<sp/>(uint32_t)<sp/>task<sp/>+<sp/>0x80uL))<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="559"><highlight class="normal">}</highlight></codeline>
<codeline lineno="560"><highlight class="normal"></highlight></codeline>
<codeline lineno="561"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__ecb__hal_1ga3fbe83f2accb07e50084e3bc7062aabb" kindref="member">nrf_ecb_publish_set</ref>(NRF_ECB_Type<sp/>*<sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__ecb__hal_1gaeb64b50b89500a23e71c5c41002a0af2" kindref="member">nrf_ecb_event_t</ref><sp/>event,</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>channel)</highlight></codeline>
<codeline lineno="564"><highlight class="normal">{</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/>*((</highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint32_t<sp/>*)<sp/>((uint8_t<sp/>*)<sp/>p_reg<sp/>+<sp/>(uint32_t)<sp/>event<sp/>+<sp/>0x80uL))<sp/>=</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)channel<sp/>|<sp/>NRF_SUBSCRIBE_PUBLISH_ENABLE);</highlight></codeline>
<codeline lineno="567"><highlight class="normal">}</highlight></codeline>
<codeline lineno="568"><highlight class="normal"></highlight></codeline>
<codeline lineno="569"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__ecb__hal_1gab3d8177e957e0495aa2b84c581b71013" kindref="member">nrf_ecb_publish_clear</ref>(NRF_ECB_Type<sp/>*<sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__ecb__hal_1gaeb64b50b89500a23e71c5c41002a0af2" kindref="member">nrf_ecb_event_t</ref><sp/>event)</highlight></codeline>
<codeline lineno="571"><highlight class="normal">{</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/>*((</highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint32_t<sp/>*)<sp/>((uint8_t<sp/>*)<sp/>p_reg<sp/>+<sp/>(uint32_t)<sp/>event<sp/>+<sp/>0x80uL))<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="573"><highlight class="normal">}</highlight></codeline>
<codeline lineno="574"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>defined(DPPI_PRESENT)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="575"><highlight class="normal"></highlight></codeline>
<codeline lineno="576"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRF_DECLARE_ONLY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="577"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="578"><highlight class="comment">/**<sp/>@}<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="579"><highlight class="normal"></highlight></codeline>
<codeline lineno="580"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="581"><highlight class="normal">}</highlight></codeline>
<codeline lineno="582"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="583"><highlight class="normal"></highlight></codeline>
<codeline lineno="584"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>NRF_ECB_H__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="585"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="hal/nrf_ecb.h"/>
  </compounddef>
</doxygen>
