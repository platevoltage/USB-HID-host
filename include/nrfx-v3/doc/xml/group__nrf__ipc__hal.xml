<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="group__nrf__ipc__hal" kind="group">
    <compoundname>nrf_ipc_hal</compoundname>
    <title>IPC HAL</title>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="group__nrf__ipc__hal_1ga4ace59bc4a2550271489316ce4d8a822" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_ipc_task_t</name>
        <enumvalue id="group__nrf__ipc__hal_1gga4ace59bc4a2550271489316ce4d8a822a5e67d7fad2847e93dbb14b3769f86cf1" prot="public">
          <name>NRF_IPC_TASK_SEND_0</name>
          <initializer>= offsetof(NRF_IPC_Type, TASKS_SEND[0])</initializer>
          <briefdescription>
<para>Trigger events on channels enabled in SEND_CNF[0]. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__ipc__hal_1gga4ace59bc4a2550271489316ce4d8a822ae066071718c91a36a60bf01c25ce8fdd" prot="public">
          <name>NRF_IPC_TASK_SEND_1</name>
          <initializer>= offsetof(NRF_IPC_Type, TASKS_SEND[1])</initializer>
          <briefdescription>
<para>Trigger events on channels enabled in SEND_CNF[1]. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__ipc__hal_1gga4ace59bc4a2550271489316ce4d8a822a9710a053bcf2d0d7041444eceafc2e98" prot="public">
          <name>NRF_IPC_TASK_SEND_2</name>
          <initializer>= offsetof(NRF_IPC_Type, TASKS_SEND[2])</initializer>
          <briefdescription>
<para>Trigger events on channels enabled in SEND_CNF[2]. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__ipc__hal_1gga4ace59bc4a2550271489316ce4d8a822aa1edfafb605adefc8145fade0062b274" prot="public">
          <name>NRF_IPC_TASK_SEND_3</name>
          <initializer>= offsetof(NRF_IPC_Type, TASKS_SEND[3])</initializer>
          <briefdescription>
<para>Trigger events on channels enabled in SEND_CNF[3]. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__ipc__hal_1gga4ace59bc4a2550271489316ce4d8a822a93d45297c11690900d8f583a866dd4f9" prot="public">
          <name>NRF_IPC_TASK_SEND_4</name>
          <initializer>= offsetof(NRF_IPC_Type, TASKS_SEND[4])</initializer>
          <briefdescription>
<para>Trigger events on channels enabled in SEND_CNF[4]. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__ipc__hal_1gga4ace59bc4a2550271489316ce4d8a822a25606c7d4cbc4c66bf71a5b5925f714b" prot="public">
          <name>NRF_IPC_TASK_SEND_5</name>
          <initializer>= offsetof(NRF_IPC_Type, TASKS_SEND[5])</initializer>
          <briefdescription>
<para>Trigger events on channels enabled in SEND_CNF[5]. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__ipc__hal_1gga4ace59bc4a2550271489316ce4d8a822ad90474c8d1dc3d42049d677d36b80dd5" prot="public">
          <name>NRF_IPC_TASK_SEND_6</name>
          <initializer>= offsetof(NRF_IPC_Type, TASKS_SEND[6])</initializer>
          <briefdescription>
<para>Trigger events on channels enabled in SEND_CNF[6]. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__ipc__hal_1gga4ace59bc4a2550271489316ce4d8a822a3a08d66b7024bf9aff734217c3924292" prot="public">
          <name>NRF_IPC_TASK_SEND_7</name>
          <initializer>= offsetof(NRF_IPC_Type, TASKS_SEND[7])</initializer>
          <briefdescription>
<para>Trigger events on channels enabled in SEND_CNF[7]. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__ipc__hal_1gga4ace59bc4a2550271489316ce4d8a822acaea9eb25994d3fc6cb6ec55a8ca2cde" prot="public">
          <name>NRF_IPC_TASK_SEND_8</name>
          <initializer>= offsetof(NRF_IPC_Type, TASKS_SEND[8])</initializer>
          <briefdescription>
<para>Trigger events on channels enabled in SEND_CNF[8]. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__ipc__hal_1gga4ace59bc4a2550271489316ce4d8a822a3ab835b988ed062fb99aced4eeddb33c" prot="public">
          <name>NRF_IPC_TASK_SEND_9</name>
          <initializer>= offsetof(NRF_IPC_Type, TASKS_SEND[9])</initializer>
          <briefdescription>
<para>Trigger events on channels enabled in SEND_CNF[9]. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__ipc__hal_1gga4ace59bc4a2550271489316ce4d8a822ac611f5bd65ffcc9769ab6b7da14ad28b" prot="public">
          <name>NRF_IPC_TASK_SEND_10</name>
          <initializer>= offsetof(NRF_IPC_Type, TASKS_SEND[10])</initializer>
          <briefdescription>
<para>Trigger events on channels enabled in SEND_CNF[10]. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__ipc__hal_1gga4ace59bc4a2550271489316ce4d8a822af15c81e2c8389461cc1fd416485fa1e1" prot="public">
          <name>NRF_IPC_TASK_SEND_11</name>
          <initializer>= offsetof(NRF_IPC_Type, TASKS_SEND[11])</initializer>
          <briefdescription>
<para>Trigger events on channels enabled in SEND_CNF[11]. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__ipc__hal_1gga4ace59bc4a2550271489316ce4d8a822a195d84fa73e1314c60d28a8332c4ebc7" prot="public">
          <name>NRF_IPC_TASK_SEND_12</name>
          <initializer>= offsetof(NRF_IPC_Type, TASKS_SEND[12])</initializer>
          <briefdescription>
<para>Trigger events on channels enabled in SEND_CNF[12]. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__ipc__hal_1gga4ace59bc4a2550271489316ce4d8a822a6ed20c984c5f0dd54413ed597bd27a6a" prot="public">
          <name>NRF_IPC_TASK_SEND_13</name>
          <initializer>= offsetof(NRF_IPC_Type, TASKS_SEND[13])</initializer>
          <briefdescription>
<para>Trigger events on channels enabled in SEND_CNF[13]. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__ipc__hal_1gga4ace59bc4a2550271489316ce4d8a822ae62917e4c92628a04f3f2b3783689b78" prot="public">
          <name>NRF_IPC_TASK_SEND_14</name>
          <initializer>= offsetof(NRF_IPC_Type, TASKS_SEND[14])</initializer>
          <briefdescription>
<para>Trigger events on channels enabled in SEND_CNF[14]. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__ipc__hal_1gga4ace59bc4a2550271489316ce4d8a822ab206173794cea841ed369df34192c4f9" prot="public">
          <name>NRF_IPC_TASK_SEND_15</name>
          <initializer>= offsetof(NRF_IPC_Type, TASKS_SEND[15])</initializer>
          <briefdescription>
<para>Trigger events on channels enabled in SEND_CNF[15]. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>IPC tasks. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ipc.h" line="59" column="1" bodyfile="hal/nrf_ipc.h" bodystart="60" bodyend="79"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__ipc__hal_1ga4ffd2cfae971f5c3727751b6002fdbf8" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_ipc_event_t</name>
        <enumvalue id="group__nrf__ipc__hal_1gga4ffd2cfae971f5c3727751b6002fdbf8adcca0995427bc37c3a973cf1ede617da" prot="public">
          <name>NRF_IPC_EVENT_RECEIVE_0</name>
          <initializer>= offsetof(NRF_IPC_Type, EVENTS_RECEIVE[0])</initializer>
          <briefdescription>
<para>Event received on the IPC channels enabled in RECEIVE_CNF[0] register. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__ipc__hal_1gga4ffd2cfae971f5c3727751b6002fdbf8af10ecdb38aa8cb9a35fbb22d7c737957" prot="public">
          <name>NRF_IPC_EVENT_RECEIVE_1</name>
          <initializer>= offsetof(NRF_IPC_Type, EVENTS_RECEIVE[1])</initializer>
          <briefdescription>
<para>Event received on the IPC channels enabled in RECEIVE_CNF[1] register. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__ipc__hal_1gga4ffd2cfae971f5c3727751b6002fdbf8ad75b65017dfd6819ee687902cec67f9e" prot="public">
          <name>NRF_IPC_EVENT_RECEIVE_2</name>
          <initializer>= offsetof(NRF_IPC_Type, EVENTS_RECEIVE[2])</initializer>
          <briefdescription>
<para>Event received on the IPC channels enabled in RECEIVE_CNF[2] register. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__ipc__hal_1gga4ffd2cfae971f5c3727751b6002fdbf8a026357a123e817ee50682da20652b932" prot="public">
          <name>NRF_IPC_EVENT_RECEIVE_3</name>
          <initializer>= offsetof(NRF_IPC_Type, EVENTS_RECEIVE[3])</initializer>
          <briefdescription>
<para>Event received on the IPC channels enabled in RECEIVE_CNF[3] register. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__ipc__hal_1gga4ffd2cfae971f5c3727751b6002fdbf8a8a732087ebec6b4a93e674d9c7e65e08" prot="public">
          <name>NRF_IPC_EVENT_RECEIVE_4</name>
          <initializer>= offsetof(NRF_IPC_Type, EVENTS_RECEIVE[4])</initializer>
          <briefdescription>
<para>Event received on the IPC channels enabled in RECEIVE_CNF[4] register. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__ipc__hal_1gga4ffd2cfae971f5c3727751b6002fdbf8a2bf9a205c74e642b028c6cfc72180718" prot="public">
          <name>NRF_IPC_EVENT_RECEIVE_5</name>
          <initializer>= offsetof(NRF_IPC_Type, EVENTS_RECEIVE[5])</initializer>
          <briefdescription>
<para>Event received on the IPC channels enabled in RECEIVE_CNF[5] register. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__ipc__hal_1gga4ffd2cfae971f5c3727751b6002fdbf8aaf7b0ab2b668cdf31f558cce9fc19820" prot="public">
          <name>NRF_IPC_EVENT_RECEIVE_6</name>
          <initializer>= offsetof(NRF_IPC_Type, EVENTS_RECEIVE[6])</initializer>
          <briefdescription>
<para>Event received on the IPC channels enabled in RECEIVE_CNF[6] register. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__ipc__hal_1gga4ffd2cfae971f5c3727751b6002fdbf8af2996cd4db082f2f004228e3061bf9ea" prot="public">
          <name>NRF_IPC_EVENT_RECEIVE_7</name>
          <initializer>= offsetof(NRF_IPC_Type, EVENTS_RECEIVE[7])</initializer>
          <briefdescription>
<para>Event received on the IPC channels enabled in RECEIVE_CNF[7] register. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__ipc__hal_1gga4ffd2cfae971f5c3727751b6002fdbf8a0b7cb3f28a69a3b762327cd90cc58dcf" prot="public">
          <name>NRF_IPC_EVENT_RECEIVE_8</name>
          <initializer>= offsetof(NRF_IPC_Type, EVENTS_RECEIVE[8])</initializer>
          <briefdescription>
<para>Event received on the IPC channels enabled in RECEIVE_CNF[8] register. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__ipc__hal_1gga4ffd2cfae971f5c3727751b6002fdbf8ad7c1d389a7af703cb4427146737dc83e" prot="public">
          <name>NRF_IPC_EVENT_RECEIVE_9</name>
          <initializer>= offsetof(NRF_IPC_Type, EVENTS_RECEIVE[9])</initializer>
          <briefdescription>
<para>Event received on the IPC channels enabled in RECEIVE_CNF[9] register. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__ipc__hal_1gga4ffd2cfae971f5c3727751b6002fdbf8aff10a724af976a9f42eef0cbf20106a8" prot="public">
          <name>NRF_IPC_EVENT_RECEIVE_10</name>
          <initializer>= offsetof(NRF_IPC_Type, EVENTS_RECEIVE[10])</initializer>
          <briefdescription>
<para>Event received on the IPC channels enabled in RECEIVE_CNF[10] register. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__ipc__hal_1gga4ffd2cfae971f5c3727751b6002fdbf8ad18aca1634c34f326f0ed53b43adafc7" prot="public">
          <name>NRF_IPC_EVENT_RECEIVE_11</name>
          <initializer>= offsetof(NRF_IPC_Type, EVENTS_RECEIVE[11])</initializer>
          <briefdescription>
<para>Event received on the IPC channels enabled in RECEIVE_CNF[11] register. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__ipc__hal_1gga4ffd2cfae971f5c3727751b6002fdbf8a3e0198755eabaa744382a8c09399186e" prot="public">
          <name>NRF_IPC_EVENT_RECEIVE_12</name>
          <initializer>= offsetof(NRF_IPC_Type, EVENTS_RECEIVE[12])</initializer>
          <briefdescription>
<para>Event received on the IPC channels enabled in RECEIVE_CNF[12] register. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__ipc__hal_1gga4ffd2cfae971f5c3727751b6002fdbf8a3574b113c4d0cf3c1362e8c3029f4f76" prot="public">
          <name>NRF_IPC_EVENT_RECEIVE_13</name>
          <initializer>= offsetof(NRF_IPC_Type, EVENTS_RECEIVE[13])</initializer>
          <briefdescription>
<para>Event received on the IPC channels enabled in RECEIVE_CNF[13] register. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__ipc__hal_1gga4ffd2cfae971f5c3727751b6002fdbf8a801cb76b1c24ff0958231347bb996c82" prot="public">
          <name>NRF_IPC_EVENT_RECEIVE_14</name>
          <initializer>= offsetof(NRF_IPC_Type, EVENTS_RECEIVE[14])</initializer>
          <briefdescription>
<para>Event received on the IPC channels enabled in RECEIVE_CNF[14] register. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__ipc__hal_1gga4ffd2cfae971f5c3727751b6002fdbf8a97ed43ec0ac645326eef7faedd0aefaf" prot="public">
          <name>NRF_IPC_EVENT_RECEIVE_15</name>
          <initializer>= offsetof(NRF_IPC_Type, EVENTS_RECEIVE[15])</initializer>
          <briefdescription>
<para>Event received on the IPC channels enabled in RECEIVE_CNF[15] register. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>IPC events. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ipc.h" line="82" column="1" bodyfile="hal/nrf_ipc.h" bodystart="83" bodyend="102"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__ipc__hal_1gabb9645a49590790b2fa4116758870991" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_ipc_channel_t</name>
        <enumvalue id="group__nrf__ipc__hal_1ggabb9645a49590790b2fa4116758870991acc96ebb236a5c3c5c78589cd442f5acd" prot="public">
          <name>NRF_IPC_CHANNEL_0</name>
          <initializer>= IPC_RECEIVE_CNF_CHEN0_Msk</initializer>
          <briefdescription>
<para>Bitmask position for IPC channel 0. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__ipc__hal_1ggabb9645a49590790b2fa4116758870991a88fb706d767f2c7a07c4d1ecd3cb1aa4" prot="public">
          <name>NRF_IPC_CHANNEL_1</name>
          <initializer>= IPC_RECEIVE_CNF_CHEN1_Msk</initializer>
          <briefdescription>
<para>Bitmask position for IPC channel 1. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__ipc__hal_1ggabb9645a49590790b2fa4116758870991a01448f8e908135ced0c1cc3667cacfcd" prot="public">
          <name>NRF_IPC_CHANNEL_2</name>
          <initializer>= IPC_RECEIVE_CNF_CHEN2_Msk</initializer>
          <briefdescription>
<para>Bitmask position for IPC channel 2. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__ipc__hal_1ggabb9645a49590790b2fa4116758870991a990c986682f5b04a5be9692b4778efd4" prot="public">
          <name>NRF_IPC_CHANNEL_3</name>
          <initializer>= IPC_RECEIVE_CNF_CHEN3_Msk</initializer>
          <briefdescription>
<para>Bitmask position for IPC channel 3. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__ipc__hal_1ggabb9645a49590790b2fa4116758870991a68c8c55b053dab4c046467b1b54b1bd3" prot="public">
          <name>NRF_IPC_CHANNEL_4</name>
          <initializer>= IPC_RECEIVE_CNF_CHEN4_Msk</initializer>
          <briefdescription>
<para>Bitmask position for IPC channel 4. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__ipc__hal_1ggabb9645a49590790b2fa4116758870991a265b426c7928e1411f46ebca15f7d6f6" prot="public">
          <name>NRF_IPC_CHANNEL_5</name>
          <initializer>= IPC_RECEIVE_CNF_CHEN5_Msk</initializer>
          <briefdescription>
<para>Bitmask position for IPC channel 5. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__ipc__hal_1ggabb9645a49590790b2fa4116758870991a35960d73dd0c8fff97d222c29ef600e0" prot="public">
          <name>NRF_IPC_CHANNEL_6</name>
          <initializer>= IPC_RECEIVE_CNF_CHEN6_Msk</initializer>
          <briefdescription>
<para>Bitmask position for IPC channel 6. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__ipc__hal_1ggabb9645a49590790b2fa4116758870991a6eebf855b4d252897fbd2a90dd5a5b64" prot="public">
          <name>NRF_IPC_CHANNEL_7</name>
          <initializer>= IPC_RECEIVE_CNF_CHEN7_Msk</initializer>
          <briefdescription>
<para>Bitmask position for IPC channel 7. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__ipc__hal_1ggabb9645a49590790b2fa4116758870991a9f6067f12f50f8f0b007a66b945a1389" prot="public">
          <name>NRF_IPC_CHANNEL_8</name>
          <initializer>= IPC_RECEIVE_CNF_CHEN8_Msk</initializer>
          <briefdescription>
<para>Bitmask position for IPC channel 8. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__ipc__hal_1ggabb9645a49590790b2fa4116758870991a80c4795cf75f355a150410bf89dc1a30" prot="public">
          <name>NRF_IPC_CHANNEL_9</name>
          <initializer>= IPC_RECEIVE_CNF_CHEN9_Msk</initializer>
          <briefdescription>
<para>Bitmask position for IPC channel 9. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__ipc__hal_1ggabb9645a49590790b2fa4116758870991a1f12a4952ad9bc63ae5bd4e653fd65ca" prot="public">
          <name>NRF_IPC_CHANNEL_10</name>
          <initializer>= IPC_RECEIVE_CNF_CHEN10_Msk</initializer>
          <briefdescription>
<para>Bitmask position for IPC channel 10. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__ipc__hal_1ggabb9645a49590790b2fa4116758870991a581340c5c34b1843ba55330a37cd22c1" prot="public">
          <name>NRF_IPC_CHANNEL_11</name>
          <initializer>= IPC_RECEIVE_CNF_CHEN11_Msk</initializer>
          <briefdescription>
<para>Bitmask position for IPC channel 11. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__ipc__hal_1ggabb9645a49590790b2fa4116758870991a86cf3e2309dde54809fcbcbd5b9006e2" prot="public">
          <name>NRF_IPC_CHANNEL_12</name>
          <initializer>= IPC_RECEIVE_CNF_CHEN12_Msk</initializer>
          <briefdescription>
<para>Bitmask position for IPC channel 12. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__ipc__hal_1ggabb9645a49590790b2fa4116758870991aeae7d3c7e46aba4a14214bf3f19e744f" prot="public">
          <name>NRF_IPC_CHANNEL_13</name>
          <initializer>= IPC_RECEIVE_CNF_CHEN13_Msk</initializer>
          <briefdescription>
<para>Bitmask position for IPC channel 13. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__ipc__hal_1ggabb9645a49590790b2fa4116758870991a37fa48e42954775f7d48bda4e212a4d7" prot="public">
          <name>NRF_IPC_CHANNEL_14</name>
          <initializer>= IPC_RECEIVE_CNF_CHEN14_Msk</initializer>
          <briefdescription>
<para>Bitmask position for IPC channel 14. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__ipc__hal_1ggabb9645a49590790b2fa4116758870991a4b5a20f31b6ec54f2fe957e2a6215441" prot="public">
          <name>NRF_IPC_CHANNEL_15</name>
          <initializer>= IPC_RECEIVE_CNF_CHEN15_Msk</initializer>
          <briefdescription>
<para>Bitmask position for IPC channel 15. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>IPC channel positions. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ipc.h" line="105" column="1" bodyfile="hal/nrf_ipc.h" bodystart="106" bodyend="125"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__ipc__hal_1ga77192a25f197b42c2a31e3e683bd3d06" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_ipc_int_mask_t</name>
        <enumvalue id="group__nrf__ipc__hal_1gga77192a25f197b42c2a31e3e683bd3d06abae4a5540caa0e9c6f1024c5f941ccda" prot="public">
          <name>NRF_IPC_INT_RECEIVE_0</name>
          <initializer>= IPC_INTEN_RECEIVE0_Msk</initializer>
          <briefdescription>
<para>Interrupt on receive event 0. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__ipc__hal_1gga77192a25f197b42c2a31e3e683bd3d06a19be256f05563af2bb7f7272c32aa745" prot="public">
          <name>NRF_IPC_INT_RECEIVE_1</name>
          <initializer>= IPC_INTEN_RECEIVE1_Msk</initializer>
          <briefdescription>
<para>Interrupt on receive event 1. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__ipc__hal_1gga77192a25f197b42c2a31e3e683bd3d06acb419c7db7db45b68ca755b02d661556" prot="public">
          <name>NRF_IPC_INT_RECEIVE_2</name>
          <initializer>= IPC_INTEN_RECEIVE2_Msk</initializer>
          <briefdescription>
<para>Interrupt on receive event 2. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__ipc__hal_1gga77192a25f197b42c2a31e3e683bd3d06afcf36b8f99fb23bdc4a9a645da251f65" prot="public">
          <name>NRF_IPC_INT_RECEIVE_3</name>
          <initializer>= IPC_INTEN_RECEIVE3_Msk</initializer>
          <briefdescription>
<para>Interrupt on receive event 3. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__ipc__hal_1gga77192a25f197b42c2a31e3e683bd3d06a837f2448be1df0da4b1b5949c6374507" prot="public">
          <name>NRF_IPC_INT_RECEIVE_4</name>
          <initializer>= IPC_INTEN_RECEIVE4_Msk</initializer>
          <briefdescription>
<para>Interrupt on receive event 4. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__ipc__hal_1gga77192a25f197b42c2a31e3e683bd3d06a96acdb4791309d9fccae13db911ad81a" prot="public">
          <name>NRF_IPC_INT_RECEIVE_5</name>
          <initializer>= IPC_INTEN_RECEIVE5_Msk</initializer>
          <briefdescription>
<para>Interrupt on receive event 5. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__ipc__hal_1gga77192a25f197b42c2a31e3e683bd3d06aeac120c2fd0a54c262f64d59076a6671" prot="public">
          <name>NRF_IPC_INT_RECEIVE_6</name>
          <initializer>= IPC_INTEN_RECEIVE6_Msk</initializer>
          <briefdescription>
<para>Interrupt on receive event 6. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__ipc__hal_1gga77192a25f197b42c2a31e3e683bd3d06a156fbf7941a31112899a39313459b20e" prot="public">
          <name>NRF_IPC_INT_RECEIVE_7</name>
          <initializer>= IPC_INTEN_RECEIVE7_Msk</initializer>
          <briefdescription>
<para>Interrupt on receive event 7. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__ipc__hal_1gga77192a25f197b42c2a31e3e683bd3d06a662ef19fdae6538cc52be94b63e6556e" prot="public">
          <name>NRF_IPC_INT_RECEIVE_8</name>
          <initializer>= IPC_INTEN_RECEIVE8_Msk</initializer>
          <briefdescription>
<para>Interrupt on receive event 8. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__ipc__hal_1gga77192a25f197b42c2a31e3e683bd3d06a502efcedefb4dbe38b153db2aae13830" prot="public">
          <name>NRF_IPC_INT_RECEIVE_9</name>
          <initializer>= IPC_INTEN_RECEIVE9_Msk</initializer>
          <briefdescription>
<para>Interrupt on receive event 9. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__ipc__hal_1gga77192a25f197b42c2a31e3e683bd3d06a7a3e45f55c3ffba6046c55648cc56bf3" prot="public">
          <name>NRF_IPC_INT_RECEIVE_10</name>
          <initializer>= IPC_INTEN_RECEIVE10_Msk</initializer>
          <briefdescription>
<para>Interrupt on receive event 10. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__ipc__hal_1gga77192a25f197b42c2a31e3e683bd3d06ab10c0f1cd29cbf7c270491dc6e60df48" prot="public">
          <name>NRF_IPC_INT_RECEIVE_11</name>
          <initializer>= IPC_INTEN_RECEIVE11_Msk</initializer>
          <briefdescription>
<para>Interrupt on receive event 11. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__ipc__hal_1gga77192a25f197b42c2a31e3e683bd3d06a8290de5550645c6ba5580636ae2f43c9" prot="public">
          <name>NRF_IPC_INT_RECEIVE_12</name>
          <initializer>= IPC_INTEN_RECEIVE12_Msk</initializer>
          <briefdescription>
<para>Interrupt on receive event 12. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__ipc__hal_1gga77192a25f197b42c2a31e3e683bd3d06a94dacd2a3e1a5adbce15a267387b171d" prot="public">
          <name>NRF_IPC_INT_RECEIVE_13</name>
          <initializer>= IPC_INTEN_RECEIVE13_Msk</initializer>
          <briefdescription>
<para>Interrupt on receive event 13. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__ipc__hal_1gga77192a25f197b42c2a31e3e683bd3d06a51ad89a307095df12daa7378f6d36895" prot="public">
          <name>NRF_IPC_INT_RECEIVE_14</name>
          <initializer>= IPC_INTEN_RECEIVE14_Msk</initializer>
          <briefdescription>
<para>Interrupt on receive event 14. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__ipc__hal_1gga77192a25f197b42c2a31e3e683bd3d06a5eca4c9244f9e2a37319e4c4c5bded70" prot="public">
          <name>NRF_IPC_INT_RECEIVE_15</name>
          <initializer>= IPC_INTEN_RECEIVE15_Msk</initializer>
          <briefdescription>
<para>Interrupt on receive event 15. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>IPC interrupts. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ipc.h" line="128" column="1" bodyfile="hal/nrf_ipc.h" bodystart="129" bodyend="148"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__nrf__ipc__hal_1gaf34afb4c6f06e8f81de7e455d49b6ad7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_ipc_task_trigger</definition>
        <argsstring>(NRF_IPC_Type *p_reg, nrf_ipc_task_t task)</argsstring>
        <name>nrf_ipc_task_trigger</name>
        <param>
          <type>NRF_IPC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__ipc__hal_1ga4ace59bc4a2550271489316ce4d8a822" kindref="member">nrf_ipc_task_t</ref></type>
          <declname>task</declname>
        </param>
        <briefdescription>
<para>Function for triggering the specified IPC task. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">task</parametername>
</parameternamelist>
<parameterdescription>
<para>Task to be triggered. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ipc.h" line="379" column="24" bodyfile="hal/nrf_ipc.h" bodystart="379" bodyend="382" declfile="hal/nrf_ipc.h" declline="157" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__ipc__hal_1ga682d4c9f018a65120f509946b9ddd794" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_ipc_task_address_get</definition>
        <argsstring>(NRF_IPC_Type const *p_reg, nrf_ipc_task_t task)</argsstring>
        <name>nrf_ipc_task_address_get</name>
        <param>
          <type>NRF_IPC_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__ipc__hal_1ga4ace59bc4a2550271489316ce4d8a822" kindref="member">nrf_ipc_task_t</ref></type>
          <declname>task</declname>
        </param>
        <briefdescription>
<para>Function for getting the address of the specified IPC task register. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">task</parametername>
</parameternamelist>
<parameterdescription>
<para>Specified task.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Address of the specified task register. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ipc.h" line="384" column="28" bodyfile="hal/nrf_ipc.h" bodystart="384" bodyend="388" declfile="hal/nrf_ipc.h" declline="167" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__ipc__hal_1ga316c64d6cdb49c33cd219800cae25f41" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_ipc_event_clear</definition>
        <argsstring>(NRF_IPC_Type *p_reg, nrf_ipc_event_t event)</argsstring>
        <name>nrf_ipc_event_clear</name>
        <param>
          <type>NRF_IPC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__ipc__hal_1ga4ffd2cfae971f5c3727751b6002fdbf8" kindref="member">nrf_ipc_event_t</ref></type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>Function for clearing the specified IPC event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event to clear. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ipc.h" line="390" column="24" bodyfile="hal/nrf_ipc.h" bodystart="390" bodyend="393" declfile="hal/nrf_ipc.h" declline="176" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__ipc__hal_1gaa28ba8de4a793f853fc13995dd8cbb12" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE bool</type>
        <definition>NRF_STATIC_INLINE bool nrf_ipc_event_check</definition>
        <argsstring>(NRF_IPC_Type const *p_reg, nrf_ipc_event_t event)</argsstring>
        <name>nrf_ipc_event_check</name>
        <param>
          <type>NRF_IPC_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__ipc__hal_1ga4ffd2cfae971f5c3727751b6002fdbf8" kindref="member">nrf_ipc_event_t</ref></type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>Function for retrieving the state of the IPC event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event to be checked.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>The event has been generated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>The event has not been generated. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ipc.h" line="395" column="24" bodyfile="hal/nrf_ipc.h" bodystart="395" bodyend="398" declfile="hal/nrf_ipc.h" declline="187" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__ipc__hal_1gaf0dda7f38ffbb194e2d7fe50ecf84bca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_ipc_event_address_get</definition>
        <argsstring>(NRF_IPC_Type const *p_reg, nrf_ipc_event_t event)</argsstring>
        <name>nrf_ipc_event_address_get</name>
        <param>
          <type>NRF_IPC_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__ipc__hal_1ga4ffd2cfae971f5c3727751b6002fdbf8" kindref="member">nrf_ipc_event_t</ref></type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>Function for getting the address of the specified IPC event register. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>Specified event.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Address of the specified event register. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ipc.h" line="400" column="28" bodyfile="hal/nrf_ipc.h" bodystart="400" bodyend="404" declfile="hal/nrf_ipc.h" declline="197" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__ipc__hal_1ga63b685bde8d2cfec20bc591379f6dd74" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_ipc_int_enable</definition>
        <argsstring>(NRF_IPC_Type *p_reg, uint32_t mask)</argsstring>
        <name>nrf_ipc_int_enable</name>
        <param>
          <type>NRF_IPC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Function for enabling specified interrupts. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of interrupts to be enabled. Use <ref refid="group__nrf__ipc__hal_1ga77192a25f197b42c2a31e3e683bd3d06" kindref="member">nrf_ipc_int_mask_t</ref> values for bit masking. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ipc.h" line="406" column="24" bodyfile="hal/nrf_ipc.h" bodystart="406" bodyend="409" declfile="hal/nrf_ipc.h" declline="207" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__ipc__hal_1ga21c1c61abd4fe504202b7a41e8bc1fcf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_ipc_int_disable</definition>
        <argsstring>(NRF_IPC_Type *p_reg, uint32_t mask)</argsstring>
        <name>nrf_ipc_int_disable</name>
        <param>
          <type>NRF_IPC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Function for disabling specified interrupts. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of interrupts to be disabled. Use <ref refid="group__nrf__ipc__hal_1ga77192a25f197b42c2a31e3e683bd3d06" kindref="member">nrf_ipc_int_mask_t</ref> values for bit masking. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ipc.h" line="411" column="24" bodyfile="hal/nrf_ipc.h" bodystart="411" bodyend="414" declfile="hal/nrf_ipc.h" declline="216" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__ipc__hal_1gad57a2fbe420b2d1f83173793b07f5954" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_ipc_int_enable_check</definition>
        <argsstring>(NRF_IPC_Type const *p_reg, uint32_t mask)</argsstring>
        <name>nrf_ipc_int_enable_check</name>
        <param>
          <type>NRF_IPC_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Function for checking if the specified interrupts are enabled. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of interrupts to be checked. Use <ref refid="group__nrf__ipc__hal_1ga77192a25f197b42c2a31e3e683bd3d06" kindref="member">nrf_ipc_int_mask_t</ref> values for bit masking.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Mask of enabled interrupts. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ipc.h" line="416" column="28" bodyfile="hal/nrf_ipc.h" bodystart="416" bodyend="419" declfile="hal/nrf_ipc.h" declline="227" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__ipc__hal_1ga14eb0cf0cbb864c2499ff8ebfbd34b46" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_ipc_int_pending_get</definition>
        <argsstring>(NRF_IPC_Type const *p_reg)</argsstring>
        <name>nrf_ipc_int_pending_get</name>
        <param>
          <type>NRF_IPC_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for retrieving the state of pending interrupts of the receive event. </para>
        </briefdescription>
        <detaileddescription>
<para>States of pending interrupt are saved as a bitmask. First position corresponds with EVENTS_RECEIVE[0] event, second one with EVENTS_RECEIVE[1] etc. One set at particular position means that interrupt for event is pending.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Bitmask with information about pending interrupts of EVENTS_RECEIVE[n] events. Use <ref refid="group__nrf__ipc__hal_1ga77192a25f197b42c2a31e3e683bd3d06" kindref="member">nrf_ipc_int_mask_t</ref> values for bit masking. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ipc.h" line="421" column="28" bodyfile="hal/nrf_ipc.h" bodystart="421" bodyend="424" declfile="hal/nrf_ipc.h" declline="241" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__ipc__hal_1ga37e5b3db5560b3d5e3fca13411ad3fa2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_ipc_subscribe_set</definition>
        <argsstring>(NRF_IPC_Type *p_reg, nrf_ipc_task_t task, uint8_t channel)</argsstring>
        <name>nrf_ipc_subscribe_set</name>
        <param>
          <type>NRF_IPC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__ipc__hal_1ga4ace59bc4a2550271489316ce4d8a822" kindref="member">nrf_ipc_task_t</ref></type>
          <declname>task</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>channel</declname>
        </param>
        <briefdescription>
<para>Function for setting the DPPI subscribe configuration for a given IPC task. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">task</parametername>
</parameternamelist>
<parameterdescription>
<para>Task for which to set the configuration. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">channel</parametername>
</parameternamelist>
<parameterdescription>
<para>DPPI channel through which to subscribe events. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ipc.h" line="426" column="24" bodyfile="hal/nrf_ipc.h" bodystart="426" bodyend="432" declfile="hal/nrf_ipc.h" declline="251" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__ipc__hal_1ga9e97cecad60b6b88f49c5e9c58f69e32" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_ipc_subscribe_clear</definition>
        <argsstring>(NRF_IPC_Type *p_reg, nrf_ipc_task_t task)</argsstring>
        <name>nrf_ipc_subscribe_clear</name>
        <param>
          <type>NRF_IPC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__ipc__hal_1ga4ace59bc4a2550271489316ce4d8a822" kindref="member">nrf_ipc_task_t</ref></type>
          <declname>task</declname>
        </param>
        <briefdescription>
<para>Function for clearing the DPPI subscribe configuration for a given IPC task. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">task</parametername>
</parameternamelist>
<parameterdescription>
<para>Task for which to clear the configuration. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ipc.h" line="434" column="24" bodyfile="hal/nrf_ipc.h" bodystart="434" bodyend="437" declfile="hal/nrf_ipc.h" declline="262" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__ipc__hal_1ga456e37ac4b68680a382cdfde0522d411" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_ipc_publish_set</definition>
        <argsstring>(NRF_IPC_Type *p_reg, nrf_ipc_event_t event, uint8_t channel)</argsstring>
        <name>nrf_ipc_publish_set</name>
        <param>
          <type>NRF_IPC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__ipc__hal_1ga4ffd2cfae971f5c3727751b6002fdbf8" kindref="member">nrf_ipc_event_t</ref></type>
          <declname>event</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>channel</declname>
        </param>
        <briefdescription>
<para>Function for setting the DPPI publish configuration for a given IPC event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event for which to set the configuration. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">channel</parametername>
</parameternamelist>
<parameterdescription>
<para>DPPI channel through which to publish the event. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ipc.h" line="439" column="24" bodyfile="hal/nrf_ipc.h" bodystart="439" bodyend="445" declfile="hal/nrf_ipc.h" declline="272" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__ipc__hal_1gab8b0dc7cdd1469006d0fa52effe0d225" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_ipc_publish_clear</definition>
        <argsstring>(NRF_IPC_Type *p_reg, nrf_ipc_event_t event)</argsstring>
        <name>nrf_ipc_publish_clear</name>
        <param>
          <type>NRF_IPC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__ipc__hal_1ga4ffd2cfae971f5c3727751b6002fdbf8" kindref="member">nrf_ipc_event_t</ref></type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>Function for clearing the DPPI publish configuration for a given IPC event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event for which to clear the configuration. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ipc.h" line="447" column="24" bodyfile="hal/nrf_ipc.h" bodystart="447" bodyend="450" declfile="hal/nrf_ipc.h" declline="283" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__ipc__hal_1gac247d5f733dce320409100e31c61c58e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_ipc_send_config_set</definition>
        <argsstring>(NRF_IPC_Type *p_reg, uint8_t index, uint32_t channels_mask)</argsstring>
        <name>nrf_ipc_send_config_set</name>
        <param>
          <type>NRF_IPC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>index</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>channels_mask</declname>
        </param>
        <briefdescription>
<para>Function for setting the configuration of the specified send task. </para>
        </briefdescription>
        <detaileddescription>
<para><computeroutput>channels_mask</computeroutput> bitmask must be created with <ref refid="group__nrf__ipc__hal_1gabb9645a49590790b2fa4116758870991" kindref="member">nrf_ipc_channel_t</ref> values: NRF_IPC_CHANNEL_0 | NRF_IPC_CHANNEL_1 | ... | NRF_IPC_CHANNEL_n</para>
<para><simplesect kind="note"><para>This function overrides current configuration.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">index</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of the send task. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">channels_mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Bitmask specifying channels that are to be enabled for this task. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ipc.h" line="452" column="24" bodyfile="hal/nrf_ipc.h" bodystart="452" bodyend="457" declfile="hal/nrf_ipc.h" declline="297" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__ipc__hal_1ga790cf25e0efc727a00a626365911af46" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_ipc_send_config_get</definition>
        <argsstring>(NRF_IPC_Type *const p_reg, uint8_t index)</argsstring>
        <name>nrf_ipc_send_config_get</name>
        <param>
          <type>NRF_IPC_Type *const</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Function for getting the configuration of the specified send task. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">index</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of the send event configuration.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>Bitmask</parametername>
</parameternamelist>
<parameterdescription>
<para>of channels enabled for this task. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ipc.h" line="459" column="28" bodyfile="hal/nrf_ipc.h" bodystart="459" bodyend="462" declfile="hal/nrf_ipc.h" declline="309" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__ipc__hal_1ga253a3fd8e12378eda938edc30c0c43b3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_ipc_receive_config_set</definition>
        <argsstring>(NRF_IPC_Type *p_reg, uint8_t index, uint32_t channels_mask)</argsstring>
        <name>nrf_ipc_receive_config_set</name>
        <param>
          <type>NRF_IPC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>index</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>channels_mask</declname>
        </param>
        <briefdescription>
<para>Function for assigning receive event to the IPC channels. </para>
        </briefdescription>
        <detaileddescription>
<para><computeroutput>channels_mask</computeroutput> bitmask must be created with <ref refid="group__nrf__ipc__hal_1gabb9645a49590790b2fa4116758870991" kindref="member">nrf_ipc_channel_t</ref> values: NRF_IPC_CHANNEL_0 | NRF_IPC_CHANNEL_1 | ... | NRF_IPC_CHANNEL_n</para>
<para><simplesect kind="note"><para>This function overrides current configuration.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">index</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of the receive event configuration. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">channels_mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Bitmask with IPC channels from which the receive event will generate interrupts. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ipc.h" line="464" column="24" bodyfile="hal/nrf_ipc.h" bodystart="464" bodyend="469" declfile="hal/nrf_ipc.h" declline="324" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__ipc__hal_1gaac5cb7607bab2e163ce1547c09625877" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_ipc_receive_config_get</definition>
        <argsstring>(NRF_IPC_Type *const p_reg, uint8_t index)</argsstring>
        <name>nrf_ipc_receive_config_get</name>
        <param>
          <type>NRF_IPC_Type *const</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Function for getting receive event configuration. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">index</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of the receive event configuration.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Mask of channels connected with receive event. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ipc.h" line="472" column="28" bodyfile="hal/nrf_ipc.h" bodystart="472" bodyend="475" declfile="hal/nrf_ipc.h" declline="336" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__ipc__hal_1ga6d2875c7dff0dca567f9d3f3629c5518" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_ipc_gpmem_set</definition>
        <argsstring>(NRF_IPC_Type *p_reg, uint8_t index, uint32_t data)</argsstring>
        <name>nrf_ipc_gpmem_set</name>
        <param>
          <type>NRF_IPC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>index</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Function for storing data in general purpose memory cell. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">index</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of the general purpose memory cell. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">data</parametername>
</parameternamelist>
<parameterdescription>
<para>Data to be stored. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ipc.h" line="477" column="24" bodyfile="hal/nrf_ipc.h" bodystart="477" bodyend="483" declfile="hal/nrf_ipc.h" declline="345" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__ipc__hal_1ga3793c3ab49b52db7622354fddcfa5853" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_ipc_gpmem_get</definition>
        <argsstring>(NRF_IPC_Type const *p_reg, uint8_t index)</argsstring>
        <name>nrf_ipc_gpmem_get</name>
        <param>
          <type>NRF_IPC_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Function for getting value of the general purpose memory cell. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">index</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of the general purpose memory cell.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Stored data. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ipc.h" line="485" column="28" bodyfile="hal/nrf_ipc.h" bodystart="485" bodyend="489" declfile="hal/nrf_ipc.h" declline="357" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__ipc__hal_1ga7ec4734b14c9dc24ed6ea89a90082f90" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE <ref refid="group__nrf__ipc__hal_1ga4ace59bc4a2550271489316ce4d8a822" kindref="member">nrf_ipc_task_t</ref></type>
        <definition>NRF_STATIC_INLINE nrf_ipc_task_t nrf_ipc_send_task_get</definition>
        <argsstring>(uint8_t index)</argsstring>
        <name>nrf_ipc_send_task_get</name>
        <param>
          <type>uint8_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Function for getting SEND task by its index. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">index</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of the SEND task.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>SEND task. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ipc.h" line="491" column="34" bodyfile="hal/nrf_ipc.h" bodystart="491" bodyend="495" declfile="hal/nrf_ipc.h" declline="366" declcolumn="34"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__ipc__hal_1ga8ada127d84b91486176870e11b9b3382" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE <ref refid="group__nrf__ipc__hal_1ga4ffd2cfae971f5c3727751b6002fdbf8" kindref="member">nrf_ipc_event_t</ref></type>
        <definition>NRF_STATIC_INLINE nrf_ipc_event_t nrf_ipc_receive_event_get</definition>
        <argsstring>(uint8_t index)</argsstring>
        <name>nrf_ipc_receive_event_get</name>
        <param>
          <type>uint8_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Function for getting RECEIVE event by its index. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">index</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of the RECEIVE event.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>RECEIVE event. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ipc.h" line="497" column="35" bodyfile="hal/nrf_ipc.h" bodystart="497" bodyend="501" declfile="hal/nrf_ipc.h" declline="375" declcolumn="35"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Hardware access layer for managing the Interprocessor Communication (IPC) peripheral. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
