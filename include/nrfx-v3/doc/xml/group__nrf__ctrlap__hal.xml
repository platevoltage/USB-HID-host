<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="group__nrf__ctrlap__hal" kind="group">
    <compoundname>nrf_ctrlap_hal</compoundname>
    <title>CTRL-AP HAL</title>
    <innerclass refid="structnrf__ctrlap__info__t" prot="public">nrf_ctrlap_info_t</innerclass>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="group__nrf__ctrlap__hal_1gac9b5cbc4dd049f0dd0476e28ecb0ab3c" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_ctrlap_event_t</name>
        <enumvalue id="group__nrf__ctrlap__hal_1ggac9b5cbc4dd049f0dd0476e28ecb0ab3cad492ff2ad48e05240f02b3dc2e5942a2" prot="public">
          <name>NRF_CTRLAP_EVENT_RXREADY</name>
          <initializer>= offsetof(NRF_CTRLAPPERI_Type, EVENTS_RXREADY)</initializer>
          <briefdescription>
<para>New data from the peer is available. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__ctrlap__hal_1ggac9b5cbc4dd049f0dd0476e28ecb0ab3ca91aeae8a32cfbd0d198866ca4fad03a7" prot="public">
          <name>NRF_CTRLAP_EVENT_TXDONE</name>
          <initializer>= offsetof(NRF_CTRLAPPERI_Type, EVENTS_TXDONE)</initializer>
          <briefdescription>
<para>Data has been read by the peer. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>CTRLAP events. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ctrlap.h" line="51" column="1" bodyfile="hal/nrf_ctrlap.h" bodystart="52" bodyend="55"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__ctrlap__hal_1gacc46943975d7ca5c86e97f4a909e369d" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_ctrlap_int_mask_t</name>
        <enumvalue id="group__nrf__ctrlap__hal_1ggacc46943975d7ca5c86e97f4a909e369daae2eca1c7147856ffcb88056e9e56e03" prot="public">
          <name>NRF_CTRLAP_INT_RXREADY_MASK</name>
          <initializer>= CTRLAPPERI_INTENSET_RXREADY_Msk</initializer>
          <briefdescription>
<para>Interrupt on RXREADY event. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__ctrlap__hal_1ggacc46943975d7ca5c86e97f4a909e369da18ab7bbfc1a8a4f10f3c5bff1cfa7fb4" prot="public">
          <name>NRF_CTRLAP_INT_TXDONE_MASK</name>
          <initializer>= CTRLAPPERI_INTENSET_TXDONE_Msk</initializer>
          <briefdescription>
<para>Interrupt on TXDONE event. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>CTRLAP interrupts. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ctrlap.h" line="58" column="1" bodyfile="hal/nrf_ctrlap.h" bodystart="59" bodyend="62"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__ctrlap__hal_1ga0cc0d2d29f672be2421e9aa8d25cb3a8" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_ctrlap_bootmode_t</name>
        <enumvalue id="group__nrf__ctrlap__hal_1gga0cc0d2d29f672be2421e9aa8d25cb3a8a8c5f7092f337a754956fb48ad89abc65" prot="public">
          <name>NRF_CTRLAP_MODE_NORMAL</name>
          <initializer>= CTRLAPPERI_MAILBOX_BOOTMODE_MODE_Normal</initializer>
          <briefdescription>
<para>Normal mode of operation. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__ctrlap__hal_1gga0cc0d2d29f672be2421e9aa8d25cb3a8acfec97b0669e51c7d0ff6c4178fd09df" prot="public">
          <name>NRF_CTRLAP_MODE_ROM_OPERATION</name>
          <initializer>= CTRLAPPERI_MAILBOX_BOOTMODE_MODE_ROMOperation</initializer>
          <briefdescription>
<para>ROM operation mode. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>CTRLAP secure domain boot mode. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ctrlap.h" line="73" column="1" bodyfile="hal/nrf_ctrlap.h" bodystart="74" bodyend="77"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__nrf__ctrlap__hal_1ga0a7052bafa8adf04564244e727b4ef9d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_ctrlap_event_clear</definition>
        <argsstring>(NRF_CTRLAPPERI_Type *p_reg, nrf_ctrlap_event_t event)</argsstring>
        <name>nrf_ctrlap_event_clear</name>
        <param>
          <type>NRF_CTRLAPPERI_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__ctrlap__hal_1gac9b5cbc4dd049f0dd0476e28ecb0ab3c" kindref="member">nrf_ctrlap_event_t</ref></type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>Function for clearing the specified CTRLAP event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event to clear. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ctrlap.h" line="237" column="24" bodyfile="hal/nrf_ctrlap.h" bodystart="237" bodyend="241" declfile="hal/nrf_ctrlap.h" declline="85" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__ctrlap__hal_1gad9aeb6cdd877b7be8f36552d3e165437" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE bool</type>
        <definition>NRF_STATIC_INLINE bool nrf_ctrlap_event_check</definition>
        <argsstring>(NRF_CTRLAPPERI_Type const *p_reg, nrf_ctrlap_event_t event)</argsstring>
        <name>nrf_ctrlap_event_check</name>
        <param>
          <type>NRF_CTRLAPPERI_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__ctrlap__hal_1gac9b5cbc4dd049f0dd0476e28ecb0ab3c" kindref="member">nrf_ctrlap_event_t</ref></type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>Function for retrieving the state of the CTRLAP event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event to be checked.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>The event has been generated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>The event has not been generated. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ctrlap.h" line="243" column="24" bodyfile="hal/nrf_ctrlap.h" bodystart="243" bodyend="247" declfile="hal/nrf_ctrlap.h" declline="97" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__ctrlap__hal_1gab93d243d2a78982e1dbbe740cb40286a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_ctrlap_event_address_get</definition>
        <argsstring>(NRF_CTRLAPPERI_Type const *p_reg, nrf_ctrlap_event_t event)</argsstring>
        <name>nrf_ctrlap_event_address_get</name>
        <param>
          <type>NRF_CTRLAPPERI_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__ctrlap__hal_1gac9b5cbc4dd049f0dd0476e28ecb0ab3c" kindref="member">nrf_ctrlap_event_t</ref></type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>Function for getting the address of the specified CTRLAP event register. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>Requested event.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>Address</parametername>
</parameternamelist>
<parameterdescription>
<para>of the specified event register. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ctrlap.h" line="249" column="28" bodyfile="hal/nrf_ctrlap.h" bodystart="249" bodyend="253" declfile="hal/nrf_ctrlap.h" declline="108" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__ctrlap__hal_1ga20898b56f719287445eaf0b144f19a09" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_ctrlap_int_enable</definition>
        <argsstring>(NRF_CTRLAPPERI_Type *p_reg, uint32_t mask)</argsstring>
        <name>nrf_ctrlap_int_enable</name>
        <param>
          <type>NRF_CTRLAPPERI_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Function for enabling the specified interrupts. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of interrupts to be enabled. Use <ref refid="group__nrf__ctrlap__hal_1gacc46943975d7ca5c86e97f4a909e369d" kindref="member">nrf_ctrlap_int_mask_t</ref> values for bit masking. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ctrlap.h" line="255" column="24" bodyfile="hal/nrf_ctrlap.h" bodystart="255" bodyend="258" declfile="hal/nrf_ctrlap.h" declline="118" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__ctrlap__hal_1gac30e775822a0a067b4fab62f640a8eb9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_ctrlap_int_disable</definition>
        <argsstring>(NRF_CTRLAPPERI_Type *p_reg, uint32_t mask)</argsstring>
        <name>nrf_ctrlap_int_disable</name>
        <param>
          <type>NRF_CTRLAPPERI_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Function for disabling the specified interrupts. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of interrupts to be disabled. Use <ref refid="group__nrf__ctrlap__hal_1gacc46943975d7ca5c86e97f4a909e369d" kindref="member">nrf_ctrlap_int_mask_t</ref> values for bit masking. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ctrlap.h" line="260" column="24" bodyfile="hal/nrf_ctrlap.h" bodystart="260" bodyend="263" declfile="hal/nrf_ctrlap.h" declline="127" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__ctrlap__hal_1gad410c04adc3fc783e9e768bb99ba31bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_ctrlap_int_enable_check</definition>
        <argsstring>(NRF_CTRLAPPERI_Type const *p_reg, uint32_t mask)</argsstring>
        <name>nrf_ctrlap_int_enable_check</name>
        <param>
          <type>NRF_CTRLAPPERI_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Function for checking if the specified interrupts are enabled. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of interrupts to be checked. Use <ref refid="group__nrf__ctrlap__hal_1gacc46943975d7ca5c86e97f4a909e369d" kindref="member">nrf_ctrlap_int_mask_t</ref> values for bit masking.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>Mask</parametername>
</parameternamelist>
<parameterdescription>
<para>of enabled interrupts. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ctrlap.h" line="265" column="28" bodyfile="hal/nrf_ctrlap.h" bodystart="265" bodyend="269" declfile="hal/nrf_ctrlap.h" declline="138" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__ctrlap__hal_1gae663f06ef846d60f048a3a7bc489f6e0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_ctrlap_int_pending_get</definition>
        <argsstring>(NRF_CTRLAPPERI_Type const *p_reg)</argsstring>
        <name>nrf_ctrlap_int_pending_get</name>
        <param>
          <type>NRF_CTRLAPPERI_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for retrieving the state of pending interrupts. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>States of pending interrupt are saved as a bitmask. One set at particular position means that interrupt for event is pending.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>Bitmask</parametername>
</parameternamelist>
<parameterdescription>
<para>with information about pending interrupts. Use <ref refid="group__nrf__ctrlap__hal_1gacc46943975d7ca5c86e97f4a909e369d" kindref="member">nrf_ctrlap_int_mask_t</ref> values for bit masking. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ctrlap.h" line="271" column="28" bodyfile="hal/nrf_ctrlap.h" bodystart="271" bodyend="274" declfile="hal/nrf_ctrlap.h" declline="152" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__ctrlap__hal_1ga03e2fb9407edb0fe0d425fdd5732fc43" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_ctrlap_mailbox_rxdata_get</definition>
        <argsstring>(NRF_CTRLAPPERI_Type const *p_reg)</argsstring>
        <name>nrf_ctrlap_mailbox_rxdata_get</name>
        <param>
          <type>NRF_CTRLAPPERI_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for reading data sent from the debugger to the CPU. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Reading from this register will clear pending status of RX.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>Data</parametername>
</parameternamelist>
<parameterdescription>
<para>sent from the debugger to the CPU. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ctrlap.h" line="276" column="28" bodyfile="hal/nrf_ctrlap.h" bodystart="276" bodyend="279" declfile="hal/nrf_ctrlap.h" declline="163" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__ctrlap__hal_1gaf44968f7a952c4beec5851a904033500" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE bool</type>
        <definition>NRF_STATIC_INLINE bool nrf_ctrlap_mailbox_rxstatus_pending_check</definition>
        <argsstring>(NRF_CTRLAPPERI_Type const *p_reg)</argsstring>
        <name>nrf_ctrlap_mailbox_rxstatus_pending_check</name>
        <param>
          <type>NRF_CTRLAPPERI_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for checking if data sent from the debugger to the CPU has been read. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>Data pending in register RXDATA. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>No data pending in register RXDATA. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ctrlap.h" line="281" column="24" bodyfile="hal/nrf_ctrlap.h" bodystart="281" bodyend="284" declfile="hal/nrf_ctrlap.h" declline="173" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__ctrlap__hal_1ga26952946f300db05f464986fb4a2ab93" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_ctrlap_mailbox_txdata_get</definition>
        <argsstring>(NRF_CTRLAPPERI_Type const *p_reg)</argsstring>
        <name>nrf_ctrlap_mailbox_txdata_get</name>
        <param>
          <type>NRF_CTRLAPPERI_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for reading data sent from CPU to debugger. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>Data</parametername>
</parameternamelist>
<parameterdescription>
<para>sent from the CPU to the debugger. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ctrlap.h" line="286" column="28" bodyfile="hal/nrf_ctrlap.h" bodystart="286" bodyend="289" declfile="hal/nrf_ctrlap.h" declline="182" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__ctrlap__hal_1gaf2829f4324c91181a4b7d1b27294c267" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_ctrlap_mailbox_txdata_set</definition>
        <argsstring>(NRF_CTRLAPPERI_Type *p_reg, uint32_t data)</argsstring>
        <name>nrf_ctrlap_mailbox_txdata_set</name>
        <param>
          <type>NRF_CTRLAPPERI_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Function for writing data sent from CPU to debugger. </para>
        </briefdescription>
        <detaileddescription>
<para>Writing to this register will automatically set field <computeroutput>DataPending</computeroutput> in register <computeroutput>TXSTATUS</computeroutput>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">data</parametername>
</parameternamelist>
<parameterdescription>
<para>Data to send. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ctrlap.h" line="291" column="24" bodyfile="hal/nrf_ctrlap.h" bodystart="291" bodyend="295" declfile="hal/nrf_ctrlap.h" declline="192" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__ctrlap__hal_1ga3b960c5b6cbb8fb24942e3b077a97e3a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE bool</type>
        <definition>NRF_STATIC_INLINE bool nrf_ctrlap_mailbox_txstatus_pending_check</definition>
        <argsstring>(NRF_CTRLAPPERI_Type const *p_reg)</argsstring>
        <name>nrf_ctrlap_mailbox_txstatus_pending_check</name>
        <param>
          <type>NRF_CTRLAPPERI_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for checking if data sent from the CPU to the debugger has been read. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>Data pending in register TXDATA. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>No data pending in register TXDATA. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ctrlap.h" line="297" column="24" bodyfile="hal/nrf_ctrlap.h" bodystart="297" bodyend="300" declfile="hal/nrf_ctrlap.h" declline="203" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__ctrlap__hal_1ga29823940bfd9dd34d788f1b39fde72ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE <ref refid="group__nrf__ctrlap__hal_1ga0cc0d2d29f672be2421e9aa8d25cb3a8" kindref="member">nrf_ctrlap_bootmode_t</ref></type>
        <definition>NRF_STATIC_INLINE nrf_ctrlap_bootmode_t nrf_ctrlap_mailbox_bootmode_get</definition>
        <argsstring>(NRF_CTRLAPPERI_Type const *p_reg)</argsstring>
        <name>nrf_ctrlap_mailbox_bootmode_get</name>
        <param>
          <type>NRF_CTRLAPPERI_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for checking boot mode. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>If ROM operation mode is set the MAILBOX is used to communicate the secure ROM operations.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Boot mode. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ctrlap.h" line="303" column="1" bodyfile="hal/nrf_ctrlap.h" bodystart="303" bodyend="306" declfile="hal/nrf_ctrlap.h" declline="215" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__ctrlap__hal_1ga10409a6fe61d8dd46485c6a6a3a77a61" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_ctrlap_info_set</definition>
        <argsstring>(NRF_CTRLAPPERI_Type *p_reg, nrf_ctrlap_info_t const *p_data)</argsstring>
        <name>nrf_ctrlap_info_set</name>
        <param>
          <type>NRF_CTRLAPPERI_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="structnrf__ctrlap__info__t" kindref="compound">nrf_ctrlap_info_t</ref> const *</type>
          <declname>p_data</declname>
        </param>
        <briefdescription>
<para>Function for setting the CTRLAP device information. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">p_data</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the device information structure. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ctrlap.h" line="308" column="24" bodyfile="hal/nrf_ctrlap.h" bodystart="308" bodyend="314" declfile="hal/nrf_ctrlap.h" declline="223" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__ctrlap__hal_1gaf46b94aa3230b338a9fd4da994f0e93c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_ctrlap_info_get</definition>
        <argsstring>(NRF_CTRLAPPERI_Type const *p_reg, nrf_ctrlap_info_t *p_data)</argsstring>
        <name>nrf_ctrlap_info_get</name>
        <param>
          <type>NRF_CTRLAPPERI_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="structnrf__ctrlap__info__t" kindref="compound">nrf_ctrlap_info_t</ref> *</type>
          <declname>p_data</declname>
        </param>
        <briefdescription>
<para>Function for getting the CTRLAP device information. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">p_data</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the data structure to be filled with device information. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_ctrlap.h" line="316" column="24" bodyfile="hal/nrf_ctrlap.h" bodystart="316" bodyend="322" declfile="hal/nrf_ctrlap.h" declline="232" declcolumn="24"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Hardware access layer for managing the Control Access Port (CTRL-AP) peripheral. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
