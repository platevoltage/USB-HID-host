<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="nrf__fpu_8h" kind="file" language="C++">
    <compoundname>nrf_fpu.h</compoundname>
    <includes local="no">nrfx.h</includes>
    <incdepgraph>
      <node id="1">
        <label>hal/nrf_fpu.h</label>
        <link refid="nrf__fpu_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>nrfx.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="group__nrf__fpu__hal_1ga2f0e61d90e1fe52b1a28a3b1d9e9c7e3" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_fpu_event_t</name>
        <enumvalue id="group__nrf__fpu__hal_1gga2f0e61d90e1fe52b1a28a3b1d9e9c7e3a0c6c10a1197a55e193e3c3118fca0924" prot="public">
          <name>NRF_FPU_EVENT_INVALIDOPERATION</name>
          <initializer>= offsetof(NRF_FPU_Type, EVENTS_INVALIDOPERATION)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>An FPUIOC exception triggered by an invalid operation has occurred in the FPU. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__fpu__hal_1gga2f0e61d90e1fe52b1a28a3b1d9e9c7e3a1f6107774979347fc8286bd27996e4d2" prot="public">
          <name>NRF_FPU_EVENT_DIVIDEBYZERO</name>
          <initializer>= offsetof(NRF_FPU_Type, EVENTS_DIVIDEBYZERO)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>An FPUDZC exception triggered by a floating-point divide-by-zero operation has occurred in the FPU. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__fpu__hal_1gga2f0e61d90e1fe52b1a28a3b1d9e9c7e3abe9e3dc6327b1ebdec018dc64ade7aae" prot="public">
          <name>NRF_FPU_EVENT_OVERFLOW</name>
          <initializer>= offsetof(NRF_FPU_Type, EVENTS_OVERFLOW)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>An FPUOFC exception triggered by a floating-point overflow has occurred in the FPU. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__fpu__hal_1gga2f0e61d90e1fe52b1a28a3b1d9e9c7e3ab525aa5c4536251d6dab823829c313ed" prot="public">
          <name>NRF_FPU_EVENT_UNDERFLOW</name>
          <initializer>= offsetof(NRF_FPU_Type, EVENTS_UNDERFLOW)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>An FPUUFC exception triggered by a floating-point underflow has occurred in the FPU. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__fpu__hal_1gga2f0e61d90e1fe52b1a28a3b1d9e9c7e3a8bd4d8d5d703ffdc8115d8167b78876b" prot="public">
          <name>NRF_FPU_EVENT_INEXACT</name>
          <initializer>= offsetof(NRF_FPU_Type, EVENTS_INEXACT)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>An FPUIXC exception triggered by an inexact floating-point operation has occurred in the FPU. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__fpu__hal_1gga2f0e61d90e1fe52b1a28a3b1d9e9c7e3accdbe5ffe1a3170e9e6f6e3f41e7cf14" prot="public">
          <name>NRF_FPU_EVENT_DENORMALINPUT</name>
          <initializer>= offsetof(NRF_FPU_Type, EVENTS_DENORMALINPUT)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>An FPUIDC exception triggered by a denormal floating-point input has occurred in the FPU. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>FPU events. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_fpu.h" line="51" column="1" bodyfile="hal/nrf_fpu.h" bodystart="52" bodyend="59"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__fpu__hal_1gabf82051d6ebdf534a8516e0ba16e7516" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_fpu_int_mask_t</name>
        <enumvalue id="group__nrf__fpu__hal_1ggabf82051d6ebdf534a8516e0ba16e7516a8f23cc5ace94731a305b2e585d76f64f" prot="public">
          <name>NRF_FPU_INT_INVALIDOPERATION</name>
          <initializer>= FPU_INTEN_INVALIDOPERATION_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Interrupt on event INVALIDOPERATION. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__fpu__hal_1ggabf82051d6ebdf534a8516e0ba16e7516abf02125aa90f11de0f25fd4c1304cf2b" prot="public">
          <name>NRF_FPU_INT_DIVIDEBYZERO</name>
          <initializer>= FPU_INTEN_DIVIDEBYZERO_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Interrupt on event DIVIDEBYZERO. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__fpu__hal_1ggabf82051d6ebdf534a8516e0ba16e7516a3af2ab39b41b0235893f54915c27567e" prot="public">
          <name>NRF_FPU_INT_OVERFLOW</name>
          <initializer>= FPU_INTEN_OVERFLOW_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Interrupt on event OVERFLOW. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__fpu__hal_1ggabf82051d6ebdf534a8516e0ba16e7516a2973ef83a445ad1044a6cb912fa7ae80" prot="public">
          <name>NRF_FPU_INT_UNDERFLOW</name>
          <initializer>= FPU_INTEN_UNDERFLOW_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Interrupt on event UNDERFLOW. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__fpu__hal_1ggabf82051d6ebdf534a8516e0ba16e7516aaf18197e5130e69c295dac2ea8851124" prot="public">
          <name>NRF_FPU_INT_INEXACT</name>
          <initializer>= FPU_INTEN_INEXACT_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Interrupt on event INEXACT. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__fpu__hal_1ggabf82051d6ebdf534a8516e0ba16e7516aac9612839f6d0f03fc17c92f748aeb94" prot="public">
          <name>NRF_FPU_INT_DENORMALINPUT</name>
          <initializer>= FPU_INTEN_DENORMALINPUT_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Interrupt on event DENORMALINPUT. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>FPU interrupts. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_fpu.h" line="62" column="1" bodyfile="hal/nrf_fpu.h" bodystart="63" bodyend="70"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__nrf__fpu__hal_1ga0ae99e8b39e3c16c2a7aa3c16c87ba6d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_fpu_event_clear</definition>
        <argsstring>(NRF_FPU_Type *p_reg, nrf_fpu_event_t event)</argsstring>
        <name>nrf_fpu_event_clear</name>
        <param>
          <type>NRF_FPU_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__fpu__hal_1ga2f0e61d90e1fe52b1a28a3b1d9e9c7e3" kindref="member">nrf_fpu_event_t</ref></type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>Function for clearing the specified FPU event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event to be cleared. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_fpu.h" line="124" column="24" bodyfile="hal/nrf_fpu.h" bodystart="124" bodyend="128" declfile="hal/nrf_fpu.h" declline="78" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__fpu__hal_1ga2f290e0f6525484170b7fc80ff5fc062" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE bool</type>
        <definition>NRF_STATIC_INLINE bool nrf_fpu_event_check</definition>
        <argsstring>(NRF_FPU_Type const *p_reg, nrf_fpu_event_t event)</argsstring>
        <name>nrf_fpu_event_check</name>
        <param>
          <type>NRF_FPU_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__fpu__hal_1ga2f0e61d90e1fe52b1a28a3b1d9e9c7e3" kindref="member">nrf_fpu_event_t</ref></type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>Function for retrieving the state of the FPU event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event to be checked.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>The event has been generated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>The event has not been generated. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_fpu.h" line="130" column="24" bodyfile="hal/nrf_fpu.h" bodystart="130" bodyend="134" declfile="hal/nrf_fpu.h" declline="90" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__fpu__hal_1gad550267efd9371c59fdc2cb61b755ab8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_fpu_int_enable</definition>
        <argsstring>(NRF_FPU_Type *p_reg, uint32_t mask)</argsstring>
        <name>nrf_fpu_int_enable</name>
        <param>
          <type>NRF_FPU_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Function for enabling specified interrupts. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of interrupts to be enabled. Use <ref refid="group__nrf__fpu__hal_1gabf82051d6ebdf534a8516e0ba16e7516" kindref="member">nrf_fpu_int_mask_t</ref> values for bit masking. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_fpu.h" line="136" column="24" bodyfile="hal/nrf_fpu.h" bodystart="136" bodyend="139" declfile="hal/nrf_fpu.h" declline="100" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__fpu__hal_1ga1d244580ab66ec4df4e68fad0bfea587" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_fpu_int_disable</definition>
        <argsstring>(NRF_FPU_Type *p_reg, uint32_t mask)</argsstring>
        <name>nrf_fpu_int_disable</name>
        <param>
          <type>NRF_FPU_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Function for disabling specified interrupts. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of interrupts to be disabled. Use <ref refid="group__nrf__fpu__hal_1gabf82051d6ebdf534a8516e0ba16e7516" kindref="member">nrf_fpu_int_mask_t</ref> values for bit masking. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_fpu.h" line="141" column="24" bodyfile="hal/nrf_fpu.h" bodystart="141" bodyend="144" declfile="hal/nrf_fpu.h" declline="109" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__fpu__hal_1ga0e148106be3c9f25a6696acf8f8d3926" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_fpu_int_enable_check</definition>
        <argsstring>(NRF_FPU_Type const *p_reg, uint32_t mask)</argsstring>
        <name>nrf_fpu_int_enable_check</name>
        <param>
          <type>NRF_FPU_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Function for checking if the specified interrupts are enabled. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of interrupts to be checked. Use <ref refid="group__nrf__fpu__hal_1gabf82051d6ebdf534a8516e0ba16e7516" kindref="member">nrf_fpu_int_mask_t</ref> values for bit masking.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Mask of enabled interrupts. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_fpu.h" line="146" column="28" bodyfile="hal/nrf_fpu.h" bodystart="146" bodyend="149" declfile="hal/nrf_fpu.h" declline="120" declcolumn="28"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2019<sp/>-<sp/>2024,<sp/>Nordic<sp/>Semiconductor<sp/>ASA</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>All<sp/>rights<sp/>reserved.</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>SPDX-License-Identifier:<sp/>BSD-3-Clause</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions<sp/>are<sp/>met:</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>1.<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright<sp/>notice,<sp/>this</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>2.<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the<sp/>distribution.</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/>3.<sp/>Neither<sp/>the<sp/>name<sp/>of<sp/>the<sp/>copyright<sp/>holder<sp/>nor<sp/>the<sp/>names<sp/>of<sp/>its</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>contributors<sp/>may<sp/>be<sp/>used<sp/>to<sp/>endorse<sp/>or<sp/>promote<sp/>products<sp/>derived<sp/>from<sp/>this</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>software<sp/>without<sp/>specific<sp/>prior<sp/>written<sp/>permission.</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>COPYRIGHT<sp/>HOLDERS<sp/>AND<sp/>CONTRIBUTORS<sp/>&quot;AS<sp/>IS&quot;</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/>AND<sp/>ANY<sp/>EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>THE</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*<sp/>ARE<sp/>DISCLAIMED.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>COPYRIGHT<sp/>HOLDER<sp/>OR<sp/>CONTRIBUTORS<sp/>BE</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,<sp/>SPECIAL,<sp/>EXEMPLARY,<sp/>OR</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>PROCUREMENT<sp/>OF</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>*<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,<sp/>DATA,<sp/>OR<sp/>PROFITS;<sp/>OR<sp/>BUSINESS</highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/>*<sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY<sp/>THEORY<sp/>OF<sp/>LIABILITY,<sp/>WHETHER<sp/>IN</highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/>*<sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR<sp/>OTHERWISE)</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/>*<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE<sp/>OF<sp/>THIS<sp/>SOFTWARE,<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/>*<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight></codeline>
<codeline lineno="32"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>NRF_FPU_H__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_FPU_H__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;nrfx.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="43"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="44"><highlight class="comment"><sp/>*<sp/>@defgroup<sp/>nrf_fpu_hal<sp/>FPU<sp/>HAL</highlight></codeline>
<codeline lineno="45"><highlight class="comment"><sp/>*<sp/>@{</highlight></codeline>
<codeline lineno="46"><highlight class="comment"><sp/>*<sp/>@ingroup<sp/>nrf_fpu</highlight></codeline>
<codeline lineno="47"><highlight class="comment"><sp/>*<sp/>@brief<sp/><sp/><sp/>Hardware<sp/>access<sp/>layer<sp/>(HAL)<sp/>for<sp/>managing<sp/>the<sp/>Floating<sp/>Point<sp/>Unit<sp/>configuration.</highlight></codeline>
<codeline lineno="48"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="50"><highlight class="comment">/**<sp/>@brief<sp/>FPU<sp/>events.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal">{</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__fpu__hal_1gga2f0e61d90e1fe52b1a28a3b1d9e9c7e3a0c6c10a1197a55e193e3c3118fca0924" kindref="member">NRF_FPU_EVENT_INVALIDOPERATION</ref><sp/>=<sp/>offsetof(NRF_FPU_Type,<sp/>EVENTS_INVALIDOPERATION),<sp/></highlight><highlight class="comment">/**&lt;<sp/>An<sp/>FPUIOC<sp/>exception<sp/>triggered<sp/>by<sp/>an<sp/>invalid<sp/>operation<sp/>has<sp/>occurred<sp/>in<sp/>the<sp/>FPU.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__fpu__hal_1gga2f0e61d90e1fe52b1a28a3b1d9e9c7e3a1f6107774979347fc8286bd27996e4d2" kindref="member">NRF_FPU_EVENT_DIVIDEBYZERO</ref><sp/><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_FPU_Type,<sp/>EVENTS_DIVIDEBYZERO),<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>An<sp/>FPUDZC<sp/>exception<sp/>triggered<sp/>by<sp/>a<sp/>floating-point<sp/>divide-by-zero<sp/>operation<sp/>has<sp/>occurred<sp/>in<sp/>the<sp/>FPU.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__fpu__hal_1gga2f0e61d90e1fe52b1a28a3b1d9e9c7e3abe9e3dc6327b1ebdec018dc64ade7aae" kindref="member">NRF_FPU_EVENT_OVERFLOW</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_FPU_Type,<sp/>EVENTS_OVERFLOW),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>An<sp/>FPUOFC<sp/>exception<sp/>triggered<sp/>by<sp/>a<sp/>floating-point<sp/>overflow<sp/>has<sp/>occurred<sp/>in<sp/>the<sp/>FPU.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__fpu__hal_1gga2f0e61d90e1fe52b1a28a3b1d9e9c7e3ab525aa5c4536251d6dab823829c313ed" kindref="member">NRF_FPU_EVENT_UNDERFLOW</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_FPU_Type,<sp/>EVENTS_UNDERFLOW),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>An<sp/>FPUUFC<sp/>exception<sp/>triggered<sp/>by<sp/>a<sp/>floating-point<sp/>underflow<sp/>has<sp/>occurred<sp/>in<sp/>the<sp/>FPU.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__fpu__hal_1gga2f0e61d90e1fe52b1a28a3b1d9e9c7e3a8bd4d8d5d703ffdc8115d8167b78876b" kindref="member">NRF_FPU_EVENT_INEXACT</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_FPU_Type,<sp/>EVENTS_INEXACT),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>An<sp/>FPUIXC<sp/>exception<sp/>triggered<sp/>by<sp/>an<sp/>inexact<sp/>floating-point<sp/>operation<sp/>has<sp/>occurred<sp/>in<sp/>the<sp/>FPU.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__fpu__hal_1gga2f0e61d90e1fe52b1a28a3b1d9e9c7e3accdbe5ffe1a3170e9e6f6e3f41e7cf14" kindref="member">NRF_FPU_EVENT_DENORMALINPUT</ref><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_FPU_Type,<sp/>EVENTS_DENORMALINPUT),<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>An<sp/>FPUIDC<sp/>exception<sp/>triggered<sp/>by<sp/>a<sp/>denormal<sp/>floating-point<sp/>input<sp/>has<sp/>occurred<sp/>in<sp/>the<sp/>FPU.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal">}<sp/><ref refid="group__nrf__fpu__hal_1ga2f0e61d90e1fe52b1a28a3b1d9e9c7e3" kindref="member">nrf_fpu_event_t</ref>;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="61"><highlight class="comment">/**<sp/>@brief<sp/>FPU<sp/>interrupts.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal">{</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__fpu__hal_1ggabf82051d6ebdf534a8516e0ba16e7516a8f23cc5ace94731a305b2e585d76f64f" kindref="member">NRF_FPU_INT_INVALIDOPERATION</ref><sp/>=<sp/>FPU_INTEN_INVALIDOPERATION_Msk,<sp/></highlight><highlight class="comment">/**&lt;<sp/>Interrupt<sp/>on<sp/>event<sp/>INVALIDOPERATION.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__fpu__hal_1ggabf82051d6ebdf534a8516e0ba16e7516abf02125aa90f11de0f25fd4c1304cf2b" kindref="member">NRF_FPU_INT_DIVIDEBYZERO</ref><sp/><sp/><sp/><sp/><sp/>=<sp/>FPU_INTEN_DIVIDEBYZERO_Msk,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Interrupt<sp/>on<sp/>event<sp/>DIVIDEBYZERO.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__fpu__hal_1ggabf82051d6ebdf534a8516e0ba16e7516a3af2ab39b41b0235893f54915c27567e" kindref="member">NRF_FPU_INT_OVERFLOW</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>FPU_INTEN_OVERFLOW_Msk,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Interrupt<sp/>on<sp/>event<sp/>OVERFLOW.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__fpu__hal_1ggabf82051d6ebdf534a8516e0ba16e7516a2973ef83a445ad1044a6cb912fa7ae80" kindref="member">NRF_FPU_INT_UNDERFLOW</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>FPU_INTEN_UNDERFLOW_Msk,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Interrupt<sp/>on<sp/>event<sp/>UNDERFLOW.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__fpu__hal_1ggabf82051d6ebdf534a8516e0ba16e7516aaf18197e5130e69c295dac2ea8851124" kindref="member">NRF_FPU_INT_INEXACT</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>FPU_INTEN_INEXACT_Msk,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Interrupt<sp/>on<sp/>event<sp/>INEXACT.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__fpu__hal_1ggabf82051d6ebdf534a8516e0ba16e7516aac9612839f6d0f03fc17c92f748aeb94" kindref="member">NRF_FPU_INT_DENORMALINPUT</ref><sp/><sp/><sp/><sp/>=<sp/>FPU_INTEN_DENORMALINPUT_Msk,<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Interrupt<sp/>on<sp/>event<sp/>DENORMALINPUT.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal">}<sp/><ref refid="group__nrf__fpu__hal_1gabf82051d6ebdf534a8516e0ba16e7516" kindref="member">nrf_fpu_int_mask_t</ref>;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="72"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="73"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>clearing<sp/>the<sp/>specified<sp/>FPU<sp/>event.</highlight></codeline>
<codeline lineno="74"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="75"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="76"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>event<sp/>Event<sp/>to<sp/>be<sp/>cleared.</highlight></codeline>
<codeline lineno="77"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__fpu__hal_1ga0ae99e8b39e3c16c2a7aa3c16c87ba6d" kindref="member">nrf_fpu_event_clear</ref>(NRF_FPU_Type<sp/>*<sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__fpu__hal_1ga2f0e61d90e1fe52b1a28a3b1d9e9c7e3" kindref="member">nrf_fpu_event_t</ref><sp/>event);</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="81"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="82"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>retrieving<sp/>the<sp/>state<sp/>of<sp/>the<sp/>FPU<sp/>event.</highlight></codeline>
<codeline lineno="83"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="84"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="85"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>event<sp/>Event<sp/>to<sp/>be<sp/>checked.</highlight></codeline>
<codeline lineno="86"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="87"><highlight class="comment"><sp/>*<sp/>@retval<sp/>true<sp/><sp/>The<sp/>event<sp/>has<sp/>been<sp/>generated.</highlight></codeline>
<codeline lineno="88"><highlight class="comment"><sp/>*<sp/>@retval<sp/>false<sp/>The<sp/>event<sp/>has<sp/>not<sp/>been<sp/>generated.</highlight></codeline>
<codeline lineno="89"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrf__fpu__hal_1ga2f290e0f6525484170b7fc80ff5fc062" kindref="member">nrf_fpu_event_check</ref>(NRF_FPU_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__fpu__hal_1ga2f0e61d90e1fe52b1a28a3b1d9e9c7e3" kindref="member">nrf_fpu_event_t</ref><sp/><sp/><sp/><sp/><sp/><sp/>event);</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="93"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="94"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>enabling<sp/>specified<sp/>interrupts.</highlight></codeline>
<codeline lineno="95"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="96"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="97"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>mask<sp/><sp/>Mask<sp/>of<sp/>interrupts<sp/>to<sp/>be<sp/>enabled.</highlight></codeline>
<codeline lineno="98"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Use<sp/>@ref<sp/>nrf_fpu_int_mask_t<sp/>values<sp/>for<sp/>bit<sp/>masking.</highlight></codeline>
<codeline lineno="99"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__fpu__hal_1gad550267efd9371c59fdc2cb61b755ab8" kindref="member">nrf_fpu_int_enable</ref>(NRF_FPU_Type<sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>mask);</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="102"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="103"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>disabling<sp/>specified<sp/>interrupts.</highlight></codeline>
<codeline lineno="104"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="105"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="106"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>mask<sp/><sp/>Mask<sp/>of<sp/>interrupts<sp/>to<sp/>be<sp/>disabled.</highlight></codeline>
<codeline lineno="107"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Use<sp/>@ref<sp/>nrf_fpu_int_mask_t<sp/>values<sp/>for<sp/>bit<sp/>masking.</highlight></codeline>
<codeline lineno="108"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__fpu__hal_1ga1d244580ab66ec4df4e68fad0bfea587" kindref="member">nrf_fpu_int_disable</ref>(NRF_FPU_Type<sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>mask);</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="111"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="112"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>checking<sp/>if<sp/>the<sp/>specified<sp/>interrupts<sp/>are<sp/>enabled.</highlight></codeline>
<codeline lineno="113"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="114"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="115"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>mask<sp/><sp/>Mask<sp/>of<sp/>interrupts<sp/>to<sp/>be<sp/>checked.</highlight></codeline>
<codeline lineno="116"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Use<sp/>@ref<sp/>nrf_fpu_int_mask_t<sp/>values<sp/>for<sp/>bit<sp/>masking.</highlight></codeline>
<codeline lineno="117"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="118"><highlight class="comment"><sp/>*<sp/>@return<sp/>Mask<sp/>of<sp/>enabled<sp/>interrupts.</highlight></codeline>
<codeline lineno="119"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__fpu__hal_1ga0e148106be3c9f25a6696acf8f8d3926" kindref="member">nrf_fpu_int_enable_check</ref>(NRF_FPU_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>mask);</highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>NRF_DECLARE_ONLY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__fpu__hal_1ga0ae99e8b39e3c16c2a7aa3c16c87ba6d" kindref="member">nrf_fpu_event_clear</ref>(NRF_FPU_Type<sp/>*<sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__fpu__hal_1ga2f0e61d90e1fe52b1a28a3b1d9e9c7e3" kindref="member">nrf_fpu_event_t</ref><sp/>event)</highlight></codeline>
<codeline lineno="126"><highlight class="normal">{</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/>*((</highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint32_t<sp/>*)((uint8_t<sp/>*)p_reg<sp/>+<sp/>(uint32_t)event))<sp/>=<sp/>0x0UL;</highlight></codeline>
<codeline lineno="128"><highlight class="normal">}</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrf__fpu__hal_1ga2f290e0f6525484170b7fc80ff5fc062" kindref="member">nrf_fpu_event_check</ref>(NRF_FPU_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__fpu__hal_1ga2f0e61d90e1fe52b1a28a3b1d9e9c7e3" kindref="member">nrf_fpu_event_t</ref><sp/><sp/><sp/><sp/><sp/><sp/>event)</highlight></codeline>
<codeline lineno="132"><highlight class="normal">{</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>nrf_event_check(p_reg,<sp/>event);</highlight></codeline>
<codeline lineno="134"><highlight class="normal">}</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__fpu__hal_1gad550267efd9371c59fdc2cb61b755ab8" kindref="member">nrf_fpu_int_enable</ref>(NRF_FPU_Type<sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>mask)</highlight></codeline>
<codeline lineno="137"><highlight class="normal">{</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;INTENSET<sp/>=<sp/>mask;</highlight></codeline>
<codeline lineno="139"><highlight class="normal">}</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__fpu__hal_1ga1d244580ab66ec4df4e68fad0bfea587" kindref="member">nrf_fpu_int_disable</ref>(NRF_FPU_Type<sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>mask)</highlight></codeline>
<codeline lineno="142"><highlight class="normal">{</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;INTENCLR<sp/>=<sp/>mask;</highlight></codeline>
<codeline lineno="144"><highlight class="normal">}</highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__fpu__hal_1ga0e148106be3c9f25a6696acf8f8d3926" kindref="member">nrf_fpu_int_enable_check</ref>(NRF_FPU_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>mask)</highlight></codeline>
<codeline lineno="147"><highlight class="normal">{</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p_reg-&gt;INTENSET<sp/>&amp;<sp/>mask;</highlight></codeline>
<codeline lineno="149"><highlight class="normal">}</highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRF_DECLARE_ONLY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="153"><highlight class="comment">/**<sp/>@}<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal">}</highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRF_FPU_H__</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="hal/nrf_fpu.h"/>
  </compounddef>
</doxygen>
