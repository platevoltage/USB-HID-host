<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="group__nrfx__adc" kind="group">
    <compoundname>nrfx_adc</compoundname>
    <title>ADC driver</title>
    <innerclass refid="structnrfx__adc__done__evt__t" prot="public">nrfx_adc_done_evt_t</innerclass>
    <innerclass refid="structnrfx__adc__sample__evt__t" prot="public">nrfx_adc_sample_evt_t</innerclass>
    <innerclass refid="structnrfx__adc__evt__t" prot="public">nrfx_adc_evt_t</innerclass>
    <innerclass refid="structnrfx__adc__channel__s" prot="public">nrfx_adc_channel_s</innerclass>
    <innerclass refid="structnrfx__adc__config__t" prot="public">nrfx_adc_config_t</innerclass>
    <innergroup refid="group__nrfx__adc__config">ADC peripheral driver configuration</innergroup>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="group__nrfx__adc_1ga9f4099880e8e97943b648a988ad6f920" prot="public" static="no" strong="no">
        <type></type>
        <name>nrfx_adc_evt_type_t</name>
        <enumvalue id="group__nrfx__adc_1gga9f4099880e8e97943b648a988ad6f920ade7ed5252ac9efd80bdd0100950dacd3" prot="public">
          <name>NRFX_ADC_EVT_DONE</name>
          <briefdescription>
<para>Event generated when the buffer is filled with samples. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrfx__adc_1gga9f4099880e8e97943b648a988ad6f920a32f6ccf80a510ab185bc716ed0efe230" prot="public">
          <name>NRFX_ADC_EVT_SAMPLE</name>
          <briefdescription>
<para>Event generated when the requested channel is sampled. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Driver event types. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/include/nrfx_adc.h" line="52" column="1" bodyfile="drivers/include/nrfx_adc.h" bodystart="53" bodyend="56"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group__nrfx__adc_1gaa9e073b45c9bd5dc267b6ac5157de6a3" prot="public" static="no">
        <type>struct <ref refid="structnrfx__adc__channel__s" kindref="compound">nrfx_adc_channel_s</ref></type>
        <definition>typedef struct nrfx_adc_channel_s nrfx_adc_channel_t</definition>
        <argsstring></argsstring>
        <name>nrfx_adc_channel_t</name>
        <briefdescription>
<para>Forward declaration of the nrfx_adc_channel_t type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/include/nrfx_adc.h" line="106" column="33" bodyfile="drivers/include/nrfx_adc.h" bodystart="106" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__nrfx__adc_1gaa6a6022c699118501697ec60b947ac1a" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* nrfx_adc_event_handler_t) (nrfx_adc_evt_t const *p_event)</definition>
        <argsstring>)(nrfx_adc_evt_t const *p_event)</argsstring>
        <name>nrfx_adc_event_handler_t</name>
        <briefdescription>
<para>User event handler prototype. </para>
        </briefdescription>
        <detaileddescription>
<para>This function is called when the requested number of samples has been processed.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p_event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/include/nrfx_adc.h" line="139" column="9" bodyfile="drivers/include/nrfx_adc.h" bodystart="139" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__nrfx__adc_1ga9332ee28bf410598cb88c2647b385c7d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__nrfx__error__codes_1ga2449720f8fa17b22243218068459a24b" kindref="member">nrfx_err_t</ref></type>
        <definition>nrfx_err_t nrfx_adc_init</definition>
        <argsstring>(nrfx_adc_config_t const *p_config, nrfx_adc_event_handler_t event_handler)</argsstring>
        <name>nrfx_adc_init</name>
        <param>
          <type><ref refid="structnrfx__adc__config__t" kindref="compound">nrfx_adc_config_t</ref> const *</type>
          <declname>p_config</declname>
        </param>
        <param>
          <type><ref refid="group__nrfx__adc_1gaa6a6022c699118501697ec60b947ac1a" kindref="member">nrfx_adc_event_handler_t</ref></type>
          <declname>event_handler</declname>
        </param>
        <briefdescription>
<para>Function for initializing the ADC. </para>
        </briefdescription>
        <detaileddescription>
<para>If a valid event handler is provided, the driver is initialized in non-blocking mode. If event_handler is NULL, the driver works in blocking mode.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_config</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure with the initial configuration. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">event_handler</parametername>
</parameternamelist>
<parameterdescription>
<para>Event handler provided by the user.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>NRFX_SUCCESS</parametername>
</parameternamelist>
<parameterdescription>
<para>Initialization was successful. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NRFX_ERROR_ALREADY</parametername>
</parameternamelist>
<parameterdescription>
<para>The driver is already initialized. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NRFX_ERROR_INVALID_STATE</parametername>
</parameternamelist>
<parameterdescription>
<para>The driver is already initialized. Deprecated - use <ref refid="group__nrfx__error__codes_1gga2449720f8fa17b22243218068459a24badc3fc33e8a7dc8b9a9547fe07b437efd" kindref="member">NRFX_ERROR_ALREADY</ref> instead. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/include/nrfx_adc.h" line="155" column="12" declfile="drivers/include/nrfx_adc.h" declline="155" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfx__adc_1ga5e30a87be2798c4d5d9d2862cb538315" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nrfx_adc_uninit</definition>
        <argsstring>(void)</argsstring>
        <name>nrfx_adc_uninit</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Function for uninitializing the ADC. </para>
        </briefdescription>
        <detaileddescription>
<para>This function stops all ongoing conversions and disables all channels. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/include/nrfx_adc.h" line="163" column="6" declfile="drivers/include/nrfx_adc.h" declline="163" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfx__adc_1ga2b6f21096cd32a893a5d54044833342f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool nrfx_adc_init_check</definition>
        <argsstring>(void)</argsstring>
        <name>nrfx_adc_init_check</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Function for checking if the ADC driver is initialized. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>Driver is already initialized. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>Driver is not initialized. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/include/nrfx_adc.h" line="171" column="6" declfile="drivers/include/nrfx_adc.h" declline="171" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfx__adc_1gafda522bd00c34751ff50b2e11b9b58de" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nrfx_adc_channel_enable</definition>
        <argsstring>(nrfx_adc_channel_t *const p_channel)</argsstring>
        <name>nrfx_adc_channel_enable</name>
        <param>
          <type><ref refid="group__nrfx__adc_1gaa9e073b45c9bd5dc267b6ac5157de6a3" kindref="member">nrfx_adc_channel_t</ref> *const</type>
          <declname>p_channel</declname>
        </param>
        <briefdescription>
<para>Function for enabling an ADC channel. </para>
        </briefdescription>
        <detaileddescription>
<para>This function configures and enables the channel. When <ref refid="group__nrfx__adc_1ga68daaa338ee9360ac1458273dba8a0b1" kindref="member">nrfx_adc_buffer_convert</ref> is called, all channels that have been enabled with this function are sampled.</para>
<para>This function can be called only when there is no conversion in progress (the ADC is not busy).</para>
<para><simplesect kind="note"><para>The channel instance variable <computeroutput>p_channel</computeroutput> is used by the driver as an item in a list. Therefore, it cannot be an automatic variable that is located on the stack.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_channel</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the channel instance. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/include/nrfx_adc.h" line="187" column="6" declfile="drivers/include/nrfx_adc.h" declline="187" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfx__adc_1ga839ac5a065c47998e12567abab4bff77" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nrfx_adc_channel_disable</definition>
        <argsstring>(nrfx_adc_channel_t *const p_channel)</argsstring>
        <name>nrfx_adc_channel_disable</name>
        <param>
          <type><ref refid="group__nrfx__adc_1gaa9e073b45c9bd5dc267b6ac5157de6a3" kindref="member">nrfx_adc_channel_t</ref> *const</type>
          <declname>p_channel</declname>
        </param>
        <briefdescription>
<para>Function for disabling an ADC channel. </para>
        </briefdescription>
        <detaileddescription>
<para>This function can be called only when there is no conversion in progress (the ADC is not busy).</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p_channel</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the channel instance. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/include/nrfx_adc.h" line="197" column="6" declfile="drivers/include/nrfx_adc.h" declline="197" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfx__adc_1ga813d4738cc637109bc04f5ef983f3adc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nrfx_adc_all_channels_disable</definition>
        <argsstring>(void)</argsstring>
        <name>nrfx_adc_all_channels_disable</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Function for disabling all ADC channels. </para>
        </briefdescription>
        <detaileddescription>
<para>This function can be called only when there is no conversion in progress (the ADC is not busy). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/include/nrfx_adc.h" line="205" column="6" declfile="drivers/include/nrfx_adc.h" declline="205" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfx__adc_1ga746b04a256622cfdac02e9e16a4b80f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nrfx_adc_sample</definition>
        <argsstring>(void)</argsstring>
        <name>nrfx_adc_sample</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Function for starting ADC sampling. </para>
        </briefdescription>
        <detaileddescription>
<para>This function triggers single ADC sampling. If more than one channel is enabled, the driver emulates scanning and all channels are sampled in the order they were enabled. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/include/nrfx_adc.h" line="213" column="6" declfile="drivers/include/nrfx_adc.h" declline="213" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfx__adc_1ga7f2d57a62c7c8c18afe61ed19f492029" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__nrfx__error__codes_1ga2449720f8fa17b22243218068459a24b" kindref="member">nrfx_err_t</ref></type>
        <definition>nrfx_err_t nrfx_adc_sample_convert</definition>
        <argsstring>(nrfx_adc_channel_t const *p_channel, nrf_adc_value_t *p_value)</argsstring>
        <name>nrfx_adc_sample_convert</name>
        <param>
          <type><ref refid="group__nrfx__adc_1gaa9e073b45c9bd5dc267b6ac5157de6a3" kindref="member">nrfx_adc_channel_t</ref> const *</type>
          <declname>p_channel</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__adc__hal_1ga7d013ea47d3b3525e656484f06274acd" kindref="member">nrf_adc_value_t</ref> *</type>
          <declname>p_value</declname>
        </param>
        <briefdescription>
<para>Function for executing a single ADC conversion. </para>
        </briefdescription>
        <detaileddescription>
<para>This function selects the desired input and starts a single conversion. If a valid pointer is provided for the result, the function blocks until the conversion is completed. Otherwise, the function returns when the conversion is started, and the result is provided in an event (driver must be initialized in non-blocking mode, otherwise an assertion will fail). The function will fail if ADC is busy. The channel does not need to be enabled to perform a single conversion.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_channel</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">p_value</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the location where the result is to be placed. Unless NULL is provided, the function is blocking.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>NRFX_SUCCESS</parametername>
</parameternamelist>
<parameterdescription>
<para>Conversion was successful. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NRFX_ERROR_BUSY</parametername>
</parameternamelist>
<parameterdescription>
<para>The ADC driver is busy. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/include/nrfx_adc.h" line="231" column="12" declfile="drivers/include/nrfx_adc.h" declline="231" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfx__adc_1ga68daaa338ee9360ac1458273dba8a0b1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__nrfx__error__codes_1ga2449720f8fa17b22243218068459a24b" kindref="member">nrfx_err_t</ref></type>
        <definition>nrfx_err_t nrfx_adc_buffer_convert</definition>
        <argsstring>(nrf_adc_value_t *buffer, uint16_t size)</argsstring>
        <name>nrfx_adc_buffer_convert</name>
        <param>
          <type><ref refid="group__nrf__adc__hal_1ga7d013ea47d3b3525e656484f06274acd" kindref="member">nrf_adc_value_t</ref> *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Function for converting data to the buffer. </para>
        </briefdescription>
        <detaileddescription>
<para>If the driver is initialized in non-blocking mode, this function returns when the first conversion is set up. When the buffer is filled, the application is notified by the event handler. If the driver is initialized in blocking mode, the function returns when the buffer is filled.</para>
<para>Conversion is done on all enabled channels, but it is not triggered by this function. This function will prepare the ADC for sampling and then wait for the SAMPLE task. Sampling can be triggered manually by the <ref refid="group__nrfx__adc_1ga746b04a256622cfdac02e9e16a4b80f4" kindref="member">nrfx_adc_sample</ref> function or by PPI using the <ref refid="group__nrf__adc__hal_1gga0403cc8baa68147ae21762eb2a5df9aaa5dad3f3202d9b32372f7b76d91338b87" kindref="member">NRF_ADC_TASK_START</ref> task.</para>
<para><simplesect kind="note"><para>If more than one channel is enabled, the function emulates scanning, and a single START task will trigger conversion on all enabled channels. For example: If 3 channels are enabled and the user requests 6 samples, the completion event handler will be called after 2 START tasks.</para>
</simplesect>
<simplesect kind="note"><para>The application must adjust the sampling frequency. The maximum frequency depends on the sampling timer and the maximum latency of the ADC interrupt. If an interrupt is not handled before the next sampling is triggered, the sample will be lost.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>Result buffer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">size</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer size in samples.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>NRFX_SUCCESS</parametername>
</parameternamelist>
<parameterdescription>
<para>Conversion was successful. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NRFX_ERROR_BUSY</parametername>
</parameternamelist>
<parameterdescription>
<para>The driver is busy. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/include/nrfx_adc.h" line="263" column="12" declfile="drivers/include/nrfx_adc.h" declline="263" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfx__adc_1ga78047b346455f169ab1f71b058a9a9d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool nrfx_adc_is_busy</definition>
        <argsstring>(void)</argsstring>
        <name>nrfx_adc_is_busy</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Function for retrieving the ADC state. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>The ADC is busy. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>The ADC is ready. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/include/nrfx_adc.h" line="271" column="6" declfile="drivers/include/nrfx_adc.h" declline="271" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfx__adc_1ga87638435f249e14b457aba357a154cf3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRFX_STATIC_INLINE uint32_t</type>
        <definition>NRFX_STATIC_INLINE uint32_t nrfx_adc_start_task_get</definition>
        <argsstring>(void)</argsstring>
        <name>nrfx_adc_start_task_get</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Function for getting the address of the ADC START task. </para>
        </briefdescription>
        <detaileddescription>
<para>This function is used to get the address of the START task, which can be used to trigger ADC conversion.</para>
<para><simplesect kind="return"><para>Start task address. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/include/nrfx_adc.h" line="284" column="29" bodyfile="drivers/include/nrfx_adc.h" bodystart="284" bodyend="287" declfile="drivers/include/nrfx_adc.h" declline="281" declcolumn="29"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__nrfx__adc_1gab397a529290a801046af5014ba7c52bf" prot="public" static="no">
        <name>NRFX_ADC_DEFAULT_CHANNEL</name>
        <param><defname>analog_input</defname></param>
        <initializer>{                                                              \
    NULL,                                                      \
    {                                                          \
        .resolution = <ref refid="group__nrf__adc__hal_1gga0e2d579c008431f61b5edff7fe7221a1a8bdf17e186ff6caae203defd5581ab5f" kindref="member">NRF_ADC_CONFIG_RES_10BIT</ref>,                \
        .scaling    = <ref refid="group__nrf__adc__hal_1ggad7b74a0d0016edbf83a72bb0b0aa038aa22a8204b4afc86cf5cdcbc268b2cd7d3" kindref="member">NRF_ADC_CONFIG_SCALING_INPUT_FULL_SCALE</ref>, \
        .reference  = <ref refid="group__nrf__adc__hal_1ggadfd4f9444fc622b4c9222cb41e9e10aca020cf59f6939b0ff592ed74b37ae7d0a" kindref="member">NRF_ADC_CONFIG_REF_VBG</ref>,                  \
        .input      = (<ref refid="group__nrf__adc__hal_1ga7efdf26b2463b9e15aaaaffa76ee224f" kindref="member">nrf_adc_config_input_t</ref>)analog_input,    \
        .extref     = <ref refid="group__nrf__adc__hal_1gga6cf31b935854d716335772def0e2ca3ba84b1b26b3f4382a16962ff978aee69f9" kindref="member">NRF_ADC_CONFIG_EXTREFSEL_NONE</ref>            \
    }                                                          \
}</initializer>
        <briefdescription>
<para>ADC channel default configuration. </para>
        </briefdescription>
        <detaileddescription>
<para>This configuration sets up ADC channel with the following options:<itemizedlist>
<listitem><para>10 bits resolution</para>
</listitem><listitem><para>full scale input</para>
</listitem><listitem><para>reference voltage: 1.2 V</para>
</listitem><listitem><para>external reference input disabled</para>
</listitem></itemizedlist>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">analog_input</parametername>
</parameternamelist>
<parameterdescription>
<para>Analog input. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/include/nrfx_adc.h" line="93" column="9" bodyfile="drivers/include/nrfx_adc.h" bodystart="93" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrfx__adc_1ga66ba6d3bdea06a27fe780cbf5f79392e" prot="public" static="no">
        <name>NRFX_ADC_DEFAULT_CONFIG</name>
        <initializer>{                                                              \
    .interrupt_priority = NRFX_ADC_DEFAULT_CONFIG_IRQ_PRIORITY \
}</initializer>
        <briefdescription>
<para>ADC default configuration. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/include/nrfx_adc.h" line="127" column="9" bodyfile="drivers/include/nrfx_adc.h" bodystart="127" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Analog-to-Digital Converter (ADC) peripheral driver. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
