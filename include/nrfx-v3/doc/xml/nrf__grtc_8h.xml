<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="nrf__grtc_8h" kind="file" language="C++">
    <compoundname>nrf_grtc.h</compoundname>
    <includes local="no">nrfx.h</includes>
    <includedby refid="nrfy__grtc_8h" local="no">haly/nrfy_grtc.h</includedby>
    <incdepgraph>
      <node id="1">
        <label>hal/nrf_grtc.h</label>
        <link refid="nrf__grtc_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>nrfx.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__nrf__grtc__hal_1ga0841097c36e66c0e92af4bb18e55306e" prot="public" static="no">
        <name>NRF_GRTC_HAS_PWM</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Symbol indicating whether GRTC has PWM registers. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_grtc.h" line="75" column="9" bodyfile="hal/nrf_grtc.h" bodystart="75" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__grtc__hal_1gab7b25f5a9aa326b09338a81444a606d7" prot="public" static="no">
        <name>NRF_GRTC_HAS_CLKOUT</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Symbol indicating whether GRTC has clock output registers. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_grtc.h" line="82" column="9" bodyfile="hal/nrf_grtc.h" bodystart="82" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__grtc__hal_1ga8efa4c87940880528af108038b17afc9" prot="public" static="no">
        <name>NRF_GRTC_HAS_CLKSEL</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Symbol indicating whether GRTC has clock source selection. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_grtc.h" line="89" column="9" bodyfile="hal/nrf_grtc.h" bodystart="89" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__grtc__hal_1gac4c995b5f8c088c4111b7df4eddea77c" prot="public" static="no">
        <name>NRF_GRTC_HAS_SYSCOUNTER_ARRAY</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Symbol indicating whether GRTC has multiple SYSCOUNTER registers. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_grtc.h" line="96" column="9" bodyfile="hal/nrf_grtc.h" bodystart="96" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__grtc__hal_1ga3b85ea347cb98f30e0c68ee41c4ae042" prot="public" static="no">
        <name>NRF_GRTC_HAS_RTCOUNTER</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Symbol indicating whether GRTC has RTCOUNTER. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_grtc.h" line="103" column="9" bodyfile="hal/nrf_grtc.h" bodystart="103" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__grtc__hal_1ga61929b54151e67375d10be7abf7e1d12" prot="public" static="no">
        <name>NRF_GRTC_HAS_EXTENDED</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Symbol indicating whether GRTC has extended functionality. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_grtc.h" line="111" column="9" bodyfile="hal/nrf_grtc.h" bodystart="111" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__grtc__hal_1ga71240f9b3bad3f5ca00b1c478e0d3031" prot="public" static="no">
        <name>NRF_GRTC_DOMAIN_INDEX</name>
        <initializer>GRTC_IRQ_GROUP</initializer>
        <briefdescription>
<para>Symbol indicating actual domain index. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_grtc.h" line="118" column="9" bodyfile="hal/nrf_grtc.h" bodystart="118" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__grtc__hal_1ga2120f43b9a34776148fd46b062701fd2" prot="public" static="no">
        <name>GRTC_SYSCOUNTER</name>
        <initializer>SYSCOUNTER[<ref refid="group__nrf__grtc__hal_1ga71240f9b3bad3f5ca00b1c478e0d3031" kindref="member">NRF_GRTC_DOMAIN_INDEX</ref>]</initializer>
        <briefdescription>
<para>Symbol indicating actual SYSCOUNTER index. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_grtc.h" line="122" column="13" bodyfile="hal/nrf_grtc.h" bodystart="122" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__grtc__hal_1gaa31e9680edd85057405df62072a8d640" prot="public" static="no">
        <name>GRTC_INTEN</name>
        <initializer><ref refid="group__nrfx__common_1ga9fced903f4d0fc450e63d40426050236" kindref="member">NRFX_CONCAT_2</ref>(INTEN, GRTC_IRQ_GROUP)</initializer>
        <briefdescription>
<para>Interrupts INTEN register definition. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_grtc.h" line="126" column="9" bodyfile="hal/nrf_grtc.h" bodystart="126" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__grtc__hal_1gad5d619ef8c1424d3237f25342bb79544" prot="public" static="no">
        <name>GRTC_INTENSET</name>
        <initializer><ref refid="group__nrfx__common_1ga9fced903f4d0fc450e63d40426050236" kindref="member">NRFX_CONCAT_2</ref>(INTENSET, GRTC_IRQ_GROUP)</initializer>
        <briefdescription>
<para>Interrupts INTENSET register definition. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_grtc.h" line="128" column="9" bodyfile="hal/nrf_grtc.h" bodystart="128" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__grtc__hal_1gab53c1f367ee365a9b4f8f33d91febe03" prot="public" static="no">
        <name>GRTC_INTENCLR</name>
        <initializer><ref refid="group__nrfx__common_1ga9fced903f4d0fc450e63d40426050236" kindref="member">NRFX_CONCAT_2</ref>(INTENCLR, GRTC_IRQ_GROUP)</initializer>
        <briefdescription>
<para>Interrupts INTENCLR register definition. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_grtc.h" line="130" column="9" bodyfile="hal/nrf_grtc.h" bodystart="130" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__grtc__hal_1gaf0ad8b000c23d07a8c9ef44e4d2f62e9" prot="public" static="no">
        <name>GRTC_INTPEND</name>
        <initializer><ref refid="group__nrfx__common_1ga9fced903f4d0fc450e63d40426050236" kindref="member">NRFX_CONCAT_2</ref>(INTPEND, GRTC_IRQ_GROUP)</initializer>
        <briefdescription>
<para>Interrupts INTPEND register definition. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_grtc.h" line="132" column="9" bodyfile="hal/nrf_grtc.h" bodystart="132" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__grtc__hal_1gaa11e308058c2e3e9b355c829a5e1e681" prot="public" static="no">
        <name>NRF_GRTC_SYSCOUNTER_MAIN_FREQUENCY_HZ</name>
        <initializer>1000000UL</initializer>
        <briefdescription>
<para>Main SYSCOUNTER frequency in Hz. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_grtc.h" line="135" column="9" bodyfile="hal/nrf_grtc.h" bodystart="135" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__grtc__hal_1gac03efae4e8b2495c871b4d341e5dc91f" prot="public" static="no">
        <name>NRF_GRTC_SYSCOUNTER_CC_COUNT</name>
        <initializer>GRTC_CC_MaxCount</initializer>
        <briefdescription>
<para>Number of capture/compare channels for SYSCOUNTER. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_grtc.h" line="138" column="9" bodyfile="hal/nrf_grtc.h" bodystart="138" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__grtc__hal_1gaff76541ce29eb096698b926b88142805" prot="public" static="no">
        <name>NRF_GRTC_SYSCOUNTER_CCH_MASK</name>
        <initializer>GRTC_CC_CCH_CCH_Msk</initializer>
        <briefdescription>
<para>Bitmask of the higher 32-bits of capture/compare register for the SYSCOUNTER. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_grtc.h" line="141" column="9" bodyfile="hal/nrf_grtc.h" bodystart="141" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__grtc__hal_1ga193b8ed0f28ed7d64ea6bfa95ecd3a07" prot="public" static="no">
        <name>NRF_GRTC_SYSCOUNTER_CCADD_MASK</name>
        <initializer>GRTC_CC_CCADD_VALUE_Msk</initializer>
        <briefdescription>
<para>Bitmask of CCADD register for the SYSCOUNTER. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_grtc.h" line="144" column="9" bodyfile="hal/nrf_grtc.h" bodystart="144" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__grtc__hal_1gadb96a954038b1c035ecc220af8ac4c2f" prot="public" static="no">
        <name>NRF_GRTC_SYSCOUNTERL_VALUE_MASK</name>
        <initializer>GRTC_SYSCOUNTERL_VALUE_Msk</initializer>
        <briefdescription>
<para>Bitmask of the lower part of the SYSCOUNTER value. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_grtc.h" line="148" column="9" bodyfile="hal/nrf_grtc.h" bodystart="148" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__grtc__hal_1gad960259cb7ad785d8a214cc37288e85a" prot="public" static="no">
        <name>NRF_GRTC_SYSCOUNTERH_VALUE_MASK</name>
        <initializer>GRTC_SYSCOUNTERH_VALUE_Msk</initializer>
        <briefdescription>
<para>Bitmask of the higher part of the SYSCOUNTER value. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_grtc.h" line="155" column="9" bodyfile="hal/nrf_grtc.h" bodystart="155" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__grtc__hal_1gaff3a8f28baecd4ce22bb39970414f632" prot="public" static="no">
        <name>NRF_GRTC_RTCOUNTER_CCH_MASK</name>
        <initializer>GRTC_RTCOMPAREH_VALUE_Msk</initializer>
        <briefdescription>
<para>Bitmask of the higher 32-bits of capture/compare register for the RTCOUNTER. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_grtc.h" line="161" column="9" bodyfile="hal/nrf_grtc.h" bodystart="161" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__grtc__hal_1gad1d60809dd90a494641564b20c4a10e0" prot="public" static="no">
        <name>NRF_GRTC_SYSCOUNTERH_OVERFLOW_MASK</name>
        <initializer>GRTC_SYSCOUNTERH_OVERFLOW_Msk</initializer>
        <briefdescription>
<para>Bitmask of the OVERFLOW bit. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_grtc.h" line="165" column="9" bodyfile="hal/nrf_grtc.h" bodystart="165" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__grtc__hal_1ga03475a3749a02e9c20b83a611e3f3a10" prot="public" static="no">
        <name>NRF_GRTC_SYSCOUNTERH_BUSY_MASK</name>
        <initializer>GRTC_SYSCOUNTERH_BUSY_Msk</initializer>
        <briefdescription>
<para>Bitmask of the BUSY bit. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_grtc.h" line="172" column="9" bodyfile="hal/nrf_grtc.h" bodystart="172" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__grtc__hal_1ga083eb0824e3b84717948e630bfa13620" prot="public" static="no">
        <name>NRF_GRTC_TIMEOUT_MAX_VALUE</name>
        <initializer>(GRTC_TIMEOUT_VALUE_Msk &gt;&gt; GRTC_TIMEOUT_VALUE_Pos)</initializer>
        <briefdescription>
<para>Maximum value of TIMEOUT register content. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_grtc.h" line="178" column="9" bodyfile="hal/nrf_grtc.h" bodystart="178" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__grtc__hal_1gad6bba458b2062f2579d0ba8870987f35" prot="public" static="no">
        <name>NRF_GRTC_WAKETIME_MAX_VALUE</name>
        <initializer>(GRTC_WAKETIME_VALUE_Msk &gt;&gt; GRTC_WAKETIME_VALUE_Pos)</initializer>
        <briefdescription>
<para>Maximum value of WAKETIME register content. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_grtc.h" line="181" column="9" bodyfile="hal/nrf_grtc.h" bodystart="181" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__grtc__hal_1ga10c0a45ec2f9543c7c13bdac2b65ee15" prot="public" static="no">
        <name>NRF_GRTC_CLKCFG_CLKFASTDIV_MAX_VALUE</name>
        <initializer>GRTC_CLKCFG_CLKFASTDIV_Max</initializer>
        <briefdescription>
<para>Maximum value of CLKFASTDIV register content. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_grtc.h" line="184" column="9" bodyfile="hal/nrf_grtc.h" bodystart="184" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__grtc__hal_1gad62af60c5fa70bd36771ee843411f09e" prot="public" static="no">
        <name>NRF_GRTC_CHANNEL_INT_MASK</name>
        <param><defname>ch</defname></param>
        <initializer>((uint32_t)(<ref refid="group__nrf__grtc__hal_1ggad1e632ee175d9af435e2246cd7927822a695bd0df2fa8ffbd8353f78b536011e2" kindref="member">NRF_GRTC_INT_COMPARE0_MASK</ref>) &lt;&lt; (ch))</initializer>
        <briefdescription>
<para>Macro for creating the interrupt bitmask for the specified compare channel. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_grtc.h" line="187" column="9" bodyfile="hal/nrf_grtc.h" bodystart="187" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__grtc__hal_1ga2b51af58a7b22a002b5fb11ba9fc1147" prot="public" static="no">
        <name>NRF_GRTC_MAIN_CC_CHANNEL</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Main channel that can be used only by the owner of GRTC. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_grtc.h" line="197" column="10" bodyfile="hal/nrf_grtc.h" bodystart="197" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__grtc__hal_1ga779ea44eefe93b1659368937c6d92b9d" prot="public" static="no">
        <name>NRF_GRTC_INTEN_MASK</name>
        <initializer><ref refid="group__nrfx__common_1ga5297a05d3568750308e0f3e33074235c" kindref="member">NRFX_BIT_MASK</ref>(GRTC_CC_MaxCount)</initializer>
        <briefdescription>
<para>Bitmask of interrupt enable. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_grtc.h" line="201" column="9" bodyfile="hal/nrf_grtc.h" bodystart="201" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__grtc__hal_1gadeccbbfcabae01bb49072784d90df213" prot="public" static="no">
        <name>NRF_GRTC_SYSCOUNTER_ALL_CHANNELS_INT_MASK</name>
        <initializer>    ((uint32_t)(((1 &lt;&lt; <ref refid="group__nrf__grtc__hal_1gac03efae4e8b2495c871b4d341e5dc91f" kindref="member">NRF_GRTC_SYSCOUNTER_CC_COUNT</ref>) - 1) &lt;&lt; GRTC_INTEN0_COMPARE0_Pos))</initializer>
        <briefdescription>
<para>Mask for all channels represented by CC channels. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_grtc.h" line="204" column="9" bodyfile="hal/nrf_grtc.h" bodystart="204" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="group__nrf__grtc__hal_1ga3ead45038f169b586ca21cd6ef8acde9" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_grtc_task_t</name>
        <enumvalue id="group__nrf__grtc__hal_1gga3ead45038f169b586ca21cd6ef8acde9af0bbe53668b3def13ca5427c7155d8aa" prot="public">
          <name>NRF_GRTC_TASK_START</name>
          <initializer>= offsetof(NRF_GRTC_Type, TASKS_START)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Start. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__grtc__hal_1gga3ead45038f169b586ca21cd6ef8acde9aa371c89207c911044474b41a5af4ea13" prot="public">
          <name>NRF_GRTC_TASK_STOP</name>
          <initializer>= offsetof(NRF_GRTC_Type, TASKS_STOP)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Stop. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__grtc__hal_1gga3ead45038f169b586ca21cd6ef8acde9a9bdac9230cd2cfee5b1612f638846356" prot="public">
          <name>NRF_GRTC_TASK_CLEAR</name>
          <initializer>= offsetof(NRF_GRTC_Type, TASKS_CLEAR)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Clear. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__grtc__hal_1gga3ead45038f169b586ca21cd6ef8acde9ad3004ba2b2a693c014d62b5a71f07566" prot="public">
          <name>NRF_GRTC_TASK_PWM_START</name>
          <initializer>= offsetof(NRF_GRTC_Type, TASKS_PWMSTART)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Start the PWM. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__grtc__hal_1gga3ead45038f169b586ca21cd6ef8acde9ad5423f202e7edb947cbf9ec6b7af8c88" prot="public">
          <name>NRF_GRTC_TASK_PWM_STOP</name>
          <initializer>= offsetof(NRF_GRTC_Type, TASKS_PWMSTOP)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Stop the PWM. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__grtc__hal_1gga3ead45038f169b586ca21cd6ef8acde9a5949f268a2fc7554d0e2c276dc93c14b" prot="public">
          <name>NRF_GRTC_TASK_CAPTURE_0</name>
          <initializer>= offsetof(NRF_GRTC_Type, TASKS_CAPTURE[0])</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Capture the counter value on channel 0. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__grtc__hal_1gga3ead45038f169b586ca21cd6ef8acde9aac6dcc164760956521dcfc075ab1deef" prot="public">
          <name>NRF_GRTC_TASK_CAPTURE_1</name>
          <initializer>= offsetof(NRF_GRTC_Type, TASKS_CAPTURE[1])</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Capture the counter value on channel 1. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__grtc__hal_1gga3ead45038f169b586ca21cd6ef8acde9a399cd3aa72c654c87230fae19fc24eea" prot="public">
          <name>NRF_GRTC_TASK_CAPTURE_2</name>
          <initializer>= offsetof(NRF_GRTC_Type, TASKS_CAPTURE[2])</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Capture the counter value on channel 2. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__grtc__hal_1gga3ead45038f169b586ca21cd6ef8acde9a47e71b927d8b31125aaff6d73e1957a0" prot="public">
          <name>NRF_GRTC_TASK_CAPTURE_3</name>
          <initializer>= offsetof(NRF_GRTC_Type, TASKS_CAPTURE[3])</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Capture the counter value on channel 3. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__grtc__hal_1gga3ead45038f169b586ca21cd6ef8acde9a836940b45d931ff2bd34bff22710b330" prot="public">
          <name>NRF_GRTC_TASK_CAPTURE_4</name>
          <initializer>= offsetof(NRF_GRTC_Type, TASKS_CAPTURE[4])</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Capture the counter value on channel 4. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__grtc__hal_1gga3ead45038f169b586ca21cd6ef8acde9aabd9a032a26683ea0d18f4398310cea6" prot="public">
          <name>NRF_GRTC_TASK_CAPTURE_5</name>
          <initializer>= offsetof(NRF_GRTC_Type, TASKS_CAPTURE[5])</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Capture the counter value on channel 5. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__grtc__hal_1gga3ead45038f169b586ca21cd6ef8acde9a5521fd3420eee20a1b892dd4c66eb5b2" prot="public">
          <name>NRF_GRTC_TASK_CAPTURE_6</name>
          <initializer>= offsetof(NRF_GRTC_Type, TASKS_CAPTURE[6])</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Capture the counter value on channel 6. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__grtc__hal_1gga3ead45038f169b586ca21cd6ef8acde9af8de2bd05925d7ab43a41b910d1cc726" prot="public">
          <name>NRF_GRTC_TASK_CAPTURE_7</name>
          <initializer>= offsetof(NRF_GRTC_Type, TASKS_CAPTURE[7])</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Capture the counter value on channel 7. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__grtc__hal_1gga3ead45038f169b586ca21cd6ef8acde9abcdb82464e75549c95dabe076e5bfbdd" prot="public">
          <name>NRF_GRTC_TASK_CAPTURE_8</name>
          <initializer>= offsetof(NRF_GRTC_Type, TASKS_CAPTURE[8])</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Capture the counter value on channel 8. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__grtc__hal_1gga3ead45038f169b586ca21cd6ef8acde9a8e8faef7f39c2427913b7640f96fc79a" prot="public">
          <name>NRF_GRTC_TASK_CAPTURE_9</name>
          <initializer>= offsetof(NRF_GRTC_Type, TASKS_CAPTURE[9])</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Capture the counter value on channel 9. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__grtc__hal_1gga3ead45038f169b586ca21cd6ef8acde9a99cbe42cc269c0dd9001f28966539634" prot="public">
          <name>NRF_GRTC_TASK_CAPTURE_10</name>
          <initializer>= offsetof(NRF_GRTC_Type, TASKS_CAPTURE[10])</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Capture the counter value on channel 10. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__grtc__hal_1gga3ead45038f169b586ca21cd6ef8acde9a7a445851264eddc9f1615700ccb6353e" prot="public">
          <name>NRF_GRTC_TASK_CAPTURE_11</name>
          <initializer>= offsetof(NRF_GRTC_Type, TASKS_CAPTURE[11])</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Capture the counter value on channel 11. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>GRTC tasks. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_grtc.h" line="208" column="1" bodyfile="hal/nrf_grtc.h" bodystart="209" bodyend="253"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__grtc__hal_1ga7ae05a37545fa5a2c94e90d048bb2b65" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_grtc_event_t</name>
        <enumvalue id="group__nrf__grtc__hal_1gga7ae05a37545fa5a2c94e90d048bb2b65a51eb4303db2e53642fc468398e4e8cbc" prot="public">
          <name>NRF_GRTC_EVENT_COMPARE_0</name>
          <initializer>= offsetof(NRF_GRTC_Type, EVENTS_COMPARE[0])</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Compare 0 event. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__grtc__hal_1gga7ae05a37545fa5a2c94e90d048bb2b65ab27781e89a7dc0ce608f699ef09c00a2" prot="public">
          <name>NRF_GRTC_EVENT_COMPARE_1</name>
          <initializer>= offsetof(NRF_GRTC_Type, EVENTS_COMPARE[1])</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Compare 1 event. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__grtc__hal_1gga7ae05a37545fa5a2c94e90d048bb2b65a06fef006f68b5c71f28188c088d7ecc0" prot="public">
          <name>NRF_GRTC_EVENT_COMPARE_2</name>
          <initializer>= offsetof(NRF_GRTC_Type, EVENTS_COMPARE[2])</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Compare 2 event. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__grtc__hal_1gga7ae05a37545fa5a2c94e90d048bb2b65a067729010761ff964c173a0f5c4019a7" prot="public">
          <name>NRF_GRTC_EVENT_COMPARE_3</name>
          <initializer>= offsetof(NRF_GRTC_Type, EVENTS_COMPARE[3])</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Compare 3 event. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__grtc__hal_1gga7ae05a37545fa5a2c94e90d048bb2b65aa363885fa824af7cd3661a9cedeca534" prot="public">
          <name>NRF_GRTC_EVENT_COMPARE_4</name>
          <initializer>= offsetof(NRF_GRTC_Type, EVENTS_COMPARE[4])</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Compare 4 event. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__grtc__hal_1gga7ae05a37545fa5a2c94e90d048bb2b65a6d74b058f6c66e2f59cbd5c1c6b03fef" prot="public">
          <name>NRF_GRTC_EVENT_COMPARE_5</name>
          <initializer>= offsetof(NRF_GRTC_Type, EVENTS_COMPARE[5])</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Compare 5 event. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__grtc__hal_1gga7ae05a37545fa5a2c94e90d048bb2b65a4dbdf3235893ffcbacefd3ad93eb290f" prot="public">
          <name>NRF_GRTC_EVENT_COMPARE_6</name>
          <initializer>= offsetof(NRF_GRTC_Type, EVENTS_COMPARE[6])</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Compare 6 event. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__grtc__hal_1gga7ae05a37545fa5a2c94e90d048bb2b65ad105ff9439c6d5f8b14fa8636bbc2a70" prot="public">
          <name>NRF_GRTC_EVENT_COMPARE_7</name>
          <initializer>= offsetof(NRF_GRTC_Type, EVENTS_COMPARE[7])</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Compare 7 event. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__grtc__hal_1gga7ae05a37545fa5a2c94e90d048bb2b65a176351c02a9143e7d8e481b9341aba7b" prot="public">
          <name>NRF_GRTC_EVENT_COMPARE_8</name>
          <initializer>= offsetof(NRF_GRTC_Type, EVENTS_COMPARE[8])</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Compare 8 event. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__grtc__hal_1gga7ae05a37545fa5a2c94e90d048bb2b65a96e4602e66298a40e16d81eaa4a5bb77" prot="public">
          <name>NRF_GRTC_EVENT_COMPARE_9</name>
          <initializer>= offsetof(NRF_GRTC_Type, EVENTS_COMPARE[9])</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Compare 9 event. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__grtc__hal_1gga7ae05a37545fa5a2c94e90d048bb2b65afa77c726823878043979348ebd8198c6" prot="public">
          <name>NRF_GRTC_EVENT_COMPARE_10</name>
          <initializer>= offsetof(NRF_GRTC_Type, EVENTS_COMPARE[10])</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Compare 10 event. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__grtc__hal_1gga7ae05a37545fa5a2c94e90d048bb2b65a4d16126ecf78752cecb01e249f9343b2" prot="public">
          <name>NRF_GRTC_EVENT_COMPARE_11</name>
          <initializer>= offsetof(NRF_GRTC_Type, EVENTS_COMPARE[11])</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Compare 11 event. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__grtc__hal_1gga7ae05a37545fa5a2c94e90d048bb2b65aed54a6f5672eb5327102b72ba1f0092d" prot="public">
          <name>NRF_GRTC_EVENT_COMPARE_12</name>
          <initializer>= offsetof(NRF_GRTC_Type, EVENTS_COMPARE[12])</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Compare 12 event. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__grtc__hal_1gga7ae05a37545fa5a2c94e90d048bb2b65aaf77e55d0b716fe06c2b56f2faa275a4" prot="public">
          <name>NRF_GRTC_EVENT_RTCOMPARE</name>
          <initializer>= offsetof(NRF_GRTC_Type, EVENTS_RTCOMPARE)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>RTCOUNTER compare event. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__grtc__hal_1gga7ae05a37545fa5a2c94e90d048bb2b65ae7e815bcad2414fc4de6025fc9329e7c" prot="public">
          <name>NRF_GRTC_EVENT_RTCOMPARESYNC</name>
          <initializer>= offsetof(NRF_GRTC_Type, EVENTS_RTCOMPARESYNC)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>RTCOUNTER synchronized compare event. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__grtc__hal_1gga7ae05a37545fa5a2c94e90d048bb2b65ab123f82a38ece536dd9de212c385046d" prot="public">
          <name>NRF_GRTC_EVENT_SYSCOUNTERVALID</name>
          <initializer>= offsetof(NRF_GRTC_Type, EVENTS_SYSCOUNTERVALID)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>SYSCOUNTER value valid event. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__grtc__hal_1gga7ae05a37545fa5a2c94e90d048bb2b65a1135fb3652d2cfca4ef71e55904203c2" prot="public">
          <name>NRF_GRTC_EVENT_PWM_PERIOD_END</name>
          <initializer>= offsetof(NRF_GRTC_Type, EVENTS_PWMPERIODEND)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>End of PWM period event. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>GRTC events. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_grtc.h" line="256" column="1" bodyfile="hal/nrf_grtc.h" bodystart="257" bodyend="300"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__grtc__hal_1ga123d5e58c5e2a9fc7f7ff2d3aa4f82df" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_grtc_short_mask_t</name>
        <enumvalue id="group__nrf__grtc__hal_1gga123d5e58c5e2a9fc7f7ff2d3aa4f82dfac9e912a90becb727d32dc58faf9aefb3" prot="public">
          <name>NRF_GRTC_SHORT_RTCOMPARE_CLEAR_MASK</name>
          <initializer>= GRTC_SHORTS_RTCOMPARE_CLEAR_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Shortcut between RTCOMPARE event and CLEAR task. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Types of GRTC shortcuts. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_grtc.h" line="304" column="1" bodyfile="hal/nrf_grtc.h" bodystart="305" bodyend="307"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__grtc__hal_1ga4e34fb922643e9f448f248b410e2e8e4" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_grtc_cc_add_reference_t</name>
        <enumvalue id="group__nrf__grtc__hal_1gga4e34fb922643e9f448f248b410e2e8e4a7d1e9d741d2bd841434da14196c05c34" prot="public">
          <name>NRF_GRTC_CC_ADD_REFERENCE_SYSCOUNTER</name>
          <initializer>= GRTC_CC_CCADD_REFERENCE_SYSCOUNTER</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>The SYSCOUNTER register&apos;s content will be used as the reference. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__grtc__hal_1gga4e34fb922643e9f448f248b410e2e8e4a871b28e84ca812e2bd1a71a12b17354f" prot="public">
          <name>NRF_GRTC_CC_ADD_REFERENCE_CC</name>
          <initializer>= GRTC_CC_CCADD_REFERENCE_CC</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>The CC[n] register&apos;s content will be used as the reference. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Types of GRTC CC references. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_grtc.h" line="311" column="1" bodyfile="hal/nrf_grtc.h" bodystart="312" bodyend="315"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__grtc__hal_1gad1e632ee175d9af435e2246cd7927822" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_grtc_int_mask_t</name>
        <enumvalue id="group__nrf__grtc__hal_1ggad1e632ee175d9af435e2246cd7927822a695bd0df2fa8ffbd8353f78b536011e2" prot="public">
          <name>NRF_GRTC_INT_COMPARE0_MASK</name>
          <initializer>= GRTC_INTENSET0_COMPARE0_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>GRTC interrupt from compare event on channel 0. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__grtc__hal_1ggad1e632ee175d9af435e2246cd7927822a34201202bce60d2bf69d21ecdc4f197c" prot="public">
          <name>NRF_GRTC_INT_COMPARE1_MASK</name>
          <initializer>= GRTC_INTENSET0_COMPARE1_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>GRTC interrupt from compare event on channel 1. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__grtc__hal_1ggad1e632ee175d9af435e2246cd7927822afab614c03e60337d4c4e61e9e5fbb220" prot="public">
          <name>NRF_GRTC_INT_COMPARE2_MASK</name>
          <initializer>= GRTC_INTENSET0_COMPARE2_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>GRTC interrupt from compare event on channel 2. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__grtc__hal_1ggad1e632ee175d9af435e2246cd7927822a8e786fe3e5d073f991529f472079237a" prot="public">
          <name>NRF_GRTC_INT_COMPARE3_MASK</name>
          <initializer>= GRTC_INTENSET0_COMPARE3_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>GRTC interrupt from compare event on channel 3. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__grtc__hal_1ggad1e632ee175d9af435e2246cd7927822a3e8257930c176bec7770e7789b9cb6d3" prot="public">
          <name>NRF_GRTC_INT_COMPARE4_MASK</name>
          <initializer>= GRTC_INTENSET0_COMPARE4_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>GRTC interrupt from compare event on channel 4. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__grtc__hal_1ggad1e632ee175d9af435e2246cd7927822a077d1f7976f18b5ffdd429a1d661f79d" prot="public">
          <name>NRF_GRTC_INT_COMPARE5_MASK</name>
          <initializer>= GRTC_INTENSET0_COMPARE5_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>GRTC interrupt from compare event on channel 5. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__grtc__hal_1ggad1e632ee175d9af435e2246cd7927822a2c1e01317d660e0a4860904cb3635916" prot="public">
          <name>NRF_GRTC_INT_COMPARE6_MASK</name>
          <initializer>= GRTC_INTENSET0_COMPARE6_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>GRTC interrupt from compare event on channel 6. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__grtc__hal_1ggad1e632ee175d9af435e2246cd7927822a760ea75a3ab6fd7286497bbc6b77ea53" prot="public">
          <name>NRF_GRTC_INT_COMPARE7_MASK</name>
          <initializer>= GRTC_INTENSET0_COMPARE7_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>GRTC interrupt from compare event on channel 7. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__grtc__hal_1ggad1e632ee175d9af435e2246cd7927822a946402fa9a810ba86bf9e935ef37ff51" prot="public">
          <name>NRF_GRTC_INT_COMPARE8_MASK</name>
          <initializer>= GRTC_INTENSET0_COMPARE8_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>GRTC interrupt from compare event on channel 8. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__grtc__hal_1ggad1e632ee175d9af435e2246cd7927822a291fc6e8ab07573bd1d79496a5f1cf05" prot="public">
          <name>NRF_GRTC_INT_COMPARE9_MASK</name>
          <initializer>= GRTC_INTENSET0_COMPARE9_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>GRTC interrupt from compare event on channel 9. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__grtc__hal_1ggad1e632ee175d9af435e2246cd7927822a6c76dfd5b835f2730d4e963bd0200a07" prot="public">
          <name>NRF_GRTC_INT_COMPARE10_MASK</name>
          <initializer>= GRTC_INTENSET0_COMPARE10_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>GRTC interrupt from compare event on channel 10. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__grtc__hal_1ggad1e632ee175d9af435e2246cd7927822a3cbf6c473a0f8d7a64fb755e21a2c7f0" prot="public">
          <name>NRF_GRTC_INT_COMPARE11_MASK</name>
          <initializer>= GRTC_INTENSET0_COMPARE11_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>GRTC interrupt from compare event on channel 11. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__grtc__hal_1ggad1e632ee175d9af435e2246cd7927822a0cbd1a997373bce120647b54737c1252" prot="public">
          <name>NRF_GRTC_INT_RTCOMPARE_MASK</name>
          <initializer>= GRTC_INTENSET0_RTCOMPARE_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>GRTC interrupt from RTCOUNTER compare event. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__grtc__hal_1ggad1e632ee175d9af435e2246cd7927822a0cd9a94953494b1e019ef6aa147228b6" prot="public">
          <name>NRF_GRTC_INT_RTCOMPARESYNC_MASK</name>
          <initializer>= GRTC_INTENSET0_RTCOMPARESYNC_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>GRTC interrupt from RTCOUNTER synchronized compare event. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__grtc__hal_1ggad1e632ee175d9af435e2246cd7927822a3e345bce4b3041e7c6a107a414836416" prot="public">
          <name>NRF_GRTC_INT_SYSCOUNTERVALID_MASK</name>
          <initializer>= GRTC_INTENSET0_SYSCOUNTERVALID_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>GRTC interrupt from SYSCOUNTER valid event. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>GRTC interrupts. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_grtc.h" line="318" column="1" bodyfile="hal/nrf_grtc.h" bodystart="319" bodyend="359"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__grtc__hal_1gacdc216d006ac43c34a154cffdf0ca69a" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_grtc_clkout_t</name>
        <enumvalue id="group__nrf__grtc__hal_1ggacdc216d006ac43c34a154cffdf0ca69aa9cfdf0a20c98491c4d10fb8d4fa71eab" prot="public">
          <name>NRF_GRTC_CLKOUT_32K</name>
          <initializer>= GRTC_CLKOUT_CLKOUT32K_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Enable 32K clock output on pin. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__grtc__hal_1ggacdc216d006ac43c34a154cffdf0ca69aa8c567e4397959b7eb25b9f618d1f0bd8" prot="public">
          <name>NRF_GRTC_CLKOUT_FAST</name>
          <initializer>= GRTC_CLKOUT_CLKOUTFAST_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Enable fast clock output on pin. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Configuration of clock output. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_grtc.h" line="363" column="1" bodyfile="hal/nrf_grtc.h" bodystart="364" bodyend="367"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__grtc__hal_1gae439fae87a8f39984fe088a02960a7ae" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_grtc_clksel_t</name>
        <enumvalue id="group__nrf__grtc__hal_1ggae439fae87a8f39984fe088a02960a7aeaa368a3cd935c774cad02682aea3d98ac" prot="public">
          <name>NRF_GRTC_CLKSEL_LFXO</name>
          <initializer>= GRTC_CLKCFG_CLKSEL_LFXO</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>LFXO oscillator as the clock source. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__grtc__hal_1ggae439fae87a8f39984fe088a02960a7aea0c8fe6bcb92cb8d2f64521082d556676" prot="public">
          <name>NRF_GRTC_CLKSEL_LFCLK</name>
          <initializer>= GRTC_CLKCFG_CLKSEL_SystemLFCLK</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>System LFCLK as the clock source. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Configuration of the GRTC clock source selection. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_grtc.h" line="372" column="1" bodyfile="hal/nrf_grtc.h" bodystart="373" bodyend="376"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__nrf__grtc__hal_1gaafb4da6fab8ddad328e0f8689e1e2ff5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_grtc_sys_counter_cc_set</definition>
        <argsstring>(NRF_GRTC_Type *p_reg, uint8_t cc_channel, uint64_t cc_value)</argsstring>
        <name>nrf_grtc_sys_counter_cc_set</name>
        <param>
          <type>NRF_GRTC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>cc_channel</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>cc_value</declname>
        </param>
        <briefdescription>
<para>Function for setting the compare value of channel for the SYSCOUNTER. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>The corresponding event is automatically disabled by hardware during the operation.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">cc_channel</parametername>
</parameternamelist>
<parameterdescription>
<para>The specified capture/compare channel. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">cc_value</parametername>
</parameternamelist>
<parameterdescription>
<para>Compare value to be set in 1 MHz units. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_grtc.h" line="1014" column="24" bodyfile="hal/nrf_grtc.h" bodystart="1014" bodyend="1029" declfile="hal/nrf_grtc.h" declline="388" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__grtc__hal_1gaa250ccd626fce4e373842b6df5e97096" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint64_t</type>
        <definition>NRF_STATIC_INLINE uint64_t nrf_grtc_sys_counter_cc_get</definition>
        <argsstring>(NRF_GRTC_Type const *p_reg, uint8_t cc_channel)</argsstring>
        <name>nrf_grtc_sys_counter_cc_get</name>
        <param>
          <type>NRF_GRTC_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>cc_channel</declname>
        </param>
        <briefdescription>
<para>Function for getting the capture/compare value of channel for the SYSCOUNTER. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">cc_channel</parametername>
</parameternamelist>
<parameterdescription>
<para>The specified capture/compare channel.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Value from the specified capture/compare register in 1MHz units. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_grtc.h" line="1031" column="28" bodyfile="hal/nrf_grtc.h" bodystart="1031" bodyend="1043" declfile="hal/nrf_grtc.h" declline="400" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__grtc__hal_1gae7bc99a50731a75e6b76e8d058772bb7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_grtc_sys_counter_cc_add_set</definition>
        <argsstring>(NRF_GRTC_Type *p_reg, uint8_t cc_channel, uint32_t value, nrf_grtc_cc_add_reference_t reference)</argsstring>
        <name>nrf_grtc_sys_counter_cc_add_set</name>
        <param>
          <type>NRF_GRTC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>cc_channel</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>value</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__grtc__hal_1ga4e34fb922643e9f448f248b410e2e8e4" kindref="member">nrf_grtc_cc_add_reference_t</ref></type>
          <declname>reference</declname>
        </param>
        <briefdescription>
<para>Function for setting the value to be added to capture/compare register for the SYSCOUNTER. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>There are two available configurations of adding operation: When <computeroutput>reference</computeroutput> value equals <ref refid="group__nrf__grtc__hal_1gga4e34fb922643e9f448f248b410e2e8e4a7d1e9d741d2bd841434da14196c05c34" kindref="member">NRF_GRTC_CC_ADD_REFERENCE_SYSCOUNTER</ref> then the final value of capture/compare register is a sum of SYSCOUNTER current value and <computeroutput>value</computeroutput>. When <computeroutput>reference</computeroutput> value equals <ref refid="group__nrf__grtc__hal_1gga4e34fb922643e9f448f248b410e2e8e4a871b28e84ca812e2bd1a71a12b17354f" kindref="member">NRF_GRTC_CC_ADD_REFERENCE_CC</ref> then the final value of capture/compare register is a sum of current capture/compare value and <computeroutput>value</computeroutput>. If the capture/compare register overflows after this write, then the corresponding event is generated immediately.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">cc_channel</parametername>
</parameternamelist>
<parameterdescription>
<para>The specified capture/compare channel. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to be added in 1 MHz units. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">reference</parametername>
</parameternamelist>
<parameterdescription>
<para>Configuration of adding mode. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_grtc.h" line="1045" column="24" bodyfile="hal/nrf_grtc.h" bodystart="1045" bodyend="1060" declfile="hal/nrf_grtc.h" declline="422" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__grtc__hal_1ga45a090610eefa2264e4f12602b7f9d9b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_grtc_rt_counter_cc_set</definition>
        <argsstring>(NRF_GRTC_Type *p_reg, uint64_t cc_value, bool sync)</argsstring>
        <name>nrf_grtc_rt_counter_cc_set</name>
        <param>
          <type>NRF_GRTC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>cc_value</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>sync</declname>
        </param>
        <briefdescription>
<para>Function for setting a compare value for the RTCOUNTER. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>The internal synchronization mechanism ensures that the desired value will be properly latched by the GRTC. However when <computeroutput>sync</computeroutput> parameter is true then the process of capturing the value lasts up to two 32 kHz cycles. If the <computeroutput>sync</computeroutput> parameter is false then the capturing the value will occur on the following rising edge of 32 kHz clock. In this case it is user&apos;s responsibility to execute the function between the 32 kHz rising edges.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">cc_value</parametername>
</parameternamelist>
<parameterdescription>
<para>Compare value to be set in 32 kHz units. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">sync</parametername>
</parameternamelist>
<parameterdescription>
<para>True if the internal synchronization mechanism shall be used, false otherwise. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_grtc.h" line="1063" column="24" bodyfile="hal/nrf_grtc.h" bodystart="1063" bodyend="1080" declfile="hal/nrf_grtc.h" declline="443" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__grtc__hal_1ga2f5e743ecea72ace3f5fb81816b56d94" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint64_t</type>
        <definition>NRF_STATIC_INLINE uint64_t nrf_grtc_rt_counter_cc_get</definition>
        <argsstring>(NRF_GRTC_Type const *p_reg)</argsstring>
        <name>nrf_grtc_rt_counter_cc_get</name>
        <param>
          <type>NRF_GRTC_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for returning the compare value for the RTCOUNTER. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Value from the capture/compare register in 32 kHz units. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_grtc.h" line="1082" column="28" bodyfile="hal/nrf_grtc.h" bodystart="1082" bodyend="1087" declfile="hal/nrf_grtc.h" declline="454" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__grtc__hal_1gabc8bebf2390d859f55d96ae141499c11" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_grtc_int_enable</definition>
        <argsstring>(NRF_GRTC_Type *p_reg, uint32_t mask)</argsstring>
        <name>nrf_grtc_int_enable</name>
        <param>
          <type>NRF_GRTC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Function for enabling specified interrupts. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of interrupts to be enabled. Use <ref refid="group__nrf__grtc__hal_1gad1e632ee175d9af435e2246cd7927822" kindref="member">nrf_grtc_int_mask_t</ref> values for bit masking. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_grtc.h" line="1090" column="24" bodyfile="hal/nrf_grtc.h" bodystart="1090" bodyend="1093" declfile="hal/nrf_grtc.h" declline="464" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__grtc__hal_1ga8b77b156aaa2a75e9faf07d52119342e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_grtc_int_disable</definition>
        <argsstring>(NRF_GRTC_Type *p_reg, uint32_t mask)</argsstring>
        <name>nrf_grtc_int_disable</name>
        <param>
          <type>NRF_GRTC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Function for disabling specified interrupts. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of interrupts to be disabled. Use <ref refid="group__nrf__grtc__hal_1gad1e632ee175d9af435e2246cd7927822" kindref="member">nrf_grtc_int_mask_t</ref> values for bit masking. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_grtc.h" line="1095" column="24" bodyfile="hal/nrf_grtc.h" bodystart="1095" bodyend="1098" declfile="hal/nrf_grtc.h" declline="473" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__grtc__hal_1gada5181d48f4f1d68d0f768efedf71c5c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_grtc_int_enable_check</definition>
        <argsstring>(NRF_GRTC_Type const *p_reg, uint32_t mask)</argsstring>
        <name>nrf_grtc_int_enable_check</name>
        <param>
          <type>NRF_GRTC_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Function for checking if the specified interrupts are enabled. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of interrupts to be checked. Use <ref refid="group__nrf__grtc__hal_1gad1e632ee175d9af435e2246cd7927822" kindref="member">nrf_grtc_int_mask_t</ref> values for bit masking.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Mask of enabled interrupts. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_grtc.h" line="1100" column="28" bodyfile="hal/nrf_grtc.h" bodystart="1100" bodyend="1103" declfile="hal/nrf_grtc.h" declline="484" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__grtc__hal_1gafd34374e937c50084e2b9969913a591c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_grtc_int_pending_get</definition>
        <argsstring>(NRF_GRTC_Type const *p_reg)</argsstring>
        <name>nrf_grtc_int_pending_get</name>
        <param>
          <type>NRF_GRTC_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for retrieving the state of pending interrupts. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>States of pending interrupt are saved as a bitmask. One set at particular position means that interrupt for event is pending.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Bitmask with information about pending interrupts. Use <ref refid="group__nrf__grtc__hal_1gad1e632ee175d9af435e2246cd7927822" kindref="member">nrf_grtc_int_mask_t</ref> values for bit masking. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_grtc.h" line="1105" column="28" bodyfile="hal/nrf_grtc.h" bodystart="1105" bodyend="1108" declfile="hal/nrf_grtc.h" declline="497" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__grtc__hal_1ga9a1958c032dc53090c3dd059bab22f06" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_grtc_event_enable</definition>
        <argsstring>(NRF_GRTC_Type *p_reg, uint32_t mask)</argsstring>
        <name>nrf_grtc_event_enable</name>
        <param>
          <type>NRF_GRTC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Function for enabling events. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Only specific events can be individually enabled or disabled.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of event flags to be enabled. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_grtc.h" line="1111" column="24" bodyfile="hal/nrf_grtc.h" bodystart="1111" bodyend="1114" declfile="hal/nrf_grtc.h" declline="508" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__grtc__hal_1gae9f734e1d6265aeb32c7ce376e6c58ac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_grtc_event_disable</definition>
        <argsstring>(NRF_GRTC_Type *p_reg, uint32_t mask)</argsstring>
        <name>nrf_grtc_event_disable</name>
        <param>
          <type>NRF_GRTC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Function for disabling events. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Only specific events can be individually enabled or disabled.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of event flags to be disabled. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_grtc.h" line="1116" column="24" bodyfile="hal/nrf_grtc.h" bodystart="1116" bodyend="1119" declfile="hal/nrf_grtc.h" declline="518" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__grtc__hal_1gac5690d49bef4f831062094fc728bda33" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_grtc_shorts_enable</definition>
        <argsstring>(NRF_GRTC_Type *p_reg, uint32_t mask)</argsstring>
        <name>nrf_grtc_shorts_enable</name>
        <param>
          <type>NRF_GRTC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Function for enabling the specified shortcuts. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Bitmask of shortcuts to be enabled. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_grtc.h" line="1123" column="24" bodyfile="hal/nrf_grtc.h" bodystart="1123" bodyend="1126" declfile="hal/nrf_grtc.h" declline="528" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__grtc__hal_1ga03a9d5d7e98462b9c3cdd8bfabacd806" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_grtc_shorts_disable</definition>
        <argsstring>(NRF_GRTC_Type *p_reg, uint32_t mask)</argsstring>
        <name>nrf_grtc_shorts_disable</name>
        <param>
          <type>NRF_GRTC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Function for disabling the specified shortcuts. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Bitmask of shortcuts to be disabled. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_grtc.h" line="1128" column="24" bodyfile="hal/nrf_grtc.h" bodystart="1128" bodyend="1131" declfile="hal/nrf_grtc.h" declline="536" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__grtc__hal_1gaf7747e1873e5594b2d2e4df6394f9ab9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_grtc_shorts_set</definition>
        <argsstring>(NRF_GRTC_Type *p_reg, uint32_t mask)</argsstring>
        <name>nrf_grtc_shorts_set</name>
        <param>
          <type>NRF_GRTC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Function for setting the specified shortcuts. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Bitmask of shortcuts to be set. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_grtc.h" line="1133" column="24" bodyfile="hal/nrf_grtc.h" bodystart="1133" bodyend="1136" declfile="hal/nrf_grtc.h" declline="544" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__grtc__hal_1ga19e3d64a1f7fa2c2e524b63910135ef8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_grtc_subscribe_set</definition>
        <argsstring>(NRF_GRTC_Type *p_reg, nrf_grtc_task_t task, uint8_t channel)</argsstring>
        <name>nrf_grtc_subscribe_set</name>
        <param>
          <type>NRF_GRTC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__grtc__hal_1ga3ead45038f169b586ca21cd6ef8acde9" kindref="member">nrf_grtc_task_t</ref></type>
          <declname>task</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>channel</declname>
        </param>
        <briefdescription>
<para>Function for setting the subscribe configuration for a given GRTC task. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Not every task has its corresponding subscribe register. Refer to the Product Specification for more information.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">task</parametername>
</parameternamelist>
<parameterdescription>
<para>Task for which to set the configuration. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">channel</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel through which to subscribe events. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_grtc.h" line="1139" column="24" bodyfile="hal/nrf_grtc.h" bodystart="1139" bodyend="1151" declfile="hal/nrf_grtc.h" declline="558" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__grtc__hal_1gae8dbd19ec8fb112e7254ffc0a32aba40" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_grtc_subscribe_clear</definition>
        <argsstring>(NRF_GRTC_Type *p_reg, nrf_grtc_task_t task)</argsstring>
        <name>nrf_grtc_subscribe_clear</name>
        <param>
          <type>NRF_GRTC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__grtc__hal_1ga3ead45038f169b586ca21cd6ef8acde9" kindref="member">nrf_grtc_task_t</ref></type>
          <declname>task</declname>
        </param>
        <briefdescription>
<para>Function for clearing the subscribe configuration for a given GRTC task. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Not every task has its corresponding subscribe register. Refer to the Product Specification for more information.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">task</parametername>
</parameternamelist>
<parameterdescription>
<para>Task for which to clear the configuration. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_grtc.h" line="1153" column="24" bodyfile="hal/nrf_grtc.h" bodystart="1153" bodyend="1163" declfile="hal/nrf_grtc.h" declline="572" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__grtc__hal_1ga28ca8bcda6222fc60e172767c67d7469" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_grtc_publish_set</definition>
        <argsstring>(NRF_GRTC_Type *p_reg, nrf_grtc_event_t event, uint8_t channel)</argsstring>
        <name>nrf_grtc_publish_set</name>
        <param>
          <type>NRF_GRTC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__grtc__hal_1ga7ae05a37545fa5a2c94e90d048bb2b65" kindref="member">nrf_grtc_event_t</ref></type>
          <declname>event</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>channel</declname>
        </param>
        <briefdescription>
<para>Function for setting the publish configuration for a given GRTC event. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Not every event has its corresponding publish register. Refer to the Product Specification for more information.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event for which to set the configuration. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">channel</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel through which to publish the event. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_grtc.h" line="1165" column="24" bodyfile="hal/nrf_grtc.h" bodystart="1165" bodyend="1176" declfile="hal/nrf_grtc.h" declline="586" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__grtc__hal_1ga1dde9445416963417a00e2b678de7121" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_grtc_publish_clear</definition>
        <argsstring>(NRF_GRTC_Type *p_reg, nrf_grtc_event_t event)</argsstring>
        <name>nrf_grtc_publish_clear</name>
        <param>
          <type>NRF_GRTC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__grtc__hal_1ga7ae05a37545fa5a2c94e90d048bb2b65" kindref="member">nrf_grtc_event_t</ref></type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>Function for clearing the publish configuration for a given GRTC event. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Not every event has its corresponding publish register. Refer to the Product Specification for more information.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event for which to clear the configuration. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_grtc.h" line="1178" column="24" bodyfile="hal/nrf_grtc.h" bodystart="1178" bodyend="1187" declfile="hal/nrf_grtc.h" declline="600" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__grtc__hal_1ga8c4cf763128d803a8e653669afac8918" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE bool</type>
        <definition>NRF_STATIC_INLINE bool nrf_grtc_event_check</definition>
        <argsstring>(NRF_GRTC_Type const *p_reg, nrf_grtc_event_t event)</argsstring>
        <name>nrf_grtc_event_check</name>
        <param>
          <type>NRF_GRTC_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__grtc__hal_1ga7ae05a37545fa5a2c94e90d048bb2b65" kindref="member">nrf_grtc_event_t</ref></type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>Function for retrieving the state of the GRTC event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event to be checked.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>The event has been generated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>The event has not been generated. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_grtc.h" line="1189" column="24" bodyfile="hal/nrf_grtc.h" bodystart="1189" bodyend="1192" declfile="hal/nrf_grtc.h" declline="612" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__grtc__hal_1gaa9967aaf0b8cf60576ac6625e2a56759" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_grtc_event_clear</definition>
        <argsstring>(NRF_GRTC_Type *p_reg, nrf_grtc_event_t event)</argsstring>
        <name>nrf_grtc_event_clear</name>
        <param>
          <type>NRF_GRTC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__grtc__hal_1ga7ae05a37545fa5a2c94e90d048bb2b65" kindref="member">nrf_grtc_event_t</ref></type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>Function for clearing an event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event to be cleared. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_grtc.h" line="1194" column="24" bodyfile="hal/nrf_grtc.h" bodystart="1194" bodyend="1200" declfile="hal/nrf_grtc.h" declline="620" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__grtc__hal_1gae364666c46ac47cc496a071195194ae0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_grtc_rt_counter_low_get</definition>
        <argsstring>(NRF_GRTC_Type const *p_reg)</argsstring>
        <name>nrf_grtc_rt_counter_low_get</name>
        <param>
          <type>NRF_GRTC_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for returning the lower 32-bits of RTCOUNTER value. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>The whole RTCOUNTER value is latched when <ref refid="group__nrf__grtc__hal_1gae364666c46ac47cc496a071195194ae0" kindref="member">nrf_grtc_rt_counter_low_get</ref> function is executed. Thus <ref refid="group__nrf__grtc__hal_1gae364666c46ac47cc496a071195194ae0" kindref="member">nrf_grtc_rt_counter_low_get</ref> must be executed before calling <ref refid="group__nrf__grtc__hal_1ga2aaf34328a3c13cb8912fa89f51354c8" kindref="member">nrf_grtc_rt_counter_high_get</ref>.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Lower part of RTCOUNTER value. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_grtc.h" line="1203" column="28" bodyfile="hal/nrf_grtc.h" bodystart="1203" bodyend="1206" declfile="hal/nrf_grtc.h" declline="634" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__grtc__hal_1ga2aaf34328a3c13cb8912fa89f51354c8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_grtc_rt_counter_high_get</definition>
        <argsstring>(NRF_GRTC_Type const *p_reg)</argsstring>
        <name>nrf_grtc_rt_counter_high_get</name>
        <param>
          <type>NRF_GRTC_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for returning the higher 32-bits of RTCOUNTER value. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>The whole RTCOUNTER value is latched when <ref refid="group__nrf__grtc__hal_1gae364666c46ac47cc496a071195194ae0" kindref="member">nrf_grtc_rt_counter_low_get</ref> function is executed. Thus <ref refid="group__nrf__grtc__hal_1gae364666c46ac47cc496a071195194ae0" kindref="member">nrf_grtc_rt_counter_low_get</ref> must be executed before calling <ref refid="group__nrf__grtc__hal_1ga2aaf34328a3c13cb8912fa89f51354c8" kindref="member">nrf_grtc_rt_counter_high_get</ref>.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Higher part of RTCOUNTER value. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_grtc.h" line="1208" column="28" bodyfile="hal/nrf_grtc.h" bodystart="1208" bodyend="1211" declfile="hal/nrf_grtc.h" declline="647" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__grtc__hal_1ga0b0c5b513db954011586e86547ed1ce9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_grtc_sys_counter_low_get</definition>
        <argsstring>(NRF_GRTC_Type const *p_reg)</argsstring>
        <name>nrf_grtc_sys_counter_low_get</name>
        <param>
          <type>NRF_GRTC_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for returning the lower 32-bits of SYSCOUNTER value. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para><ref refid="group__nrf__grtc__hal_1ga0b0c5b513db954011586e86547ed1ce9" kindref="member">nrf_grtc_sys_counter_low_get</ref> must be executed before calling <ref refid="group__nrf__grtc__hal_1ga80b9dd38536653a93d61443bc6e0d2a0" kindref="member">nrf_grtc_sys_counter_high_get</ref>. In addition, after this, <ref refid="group__nrf__grtc__hal_1ga9eab767581794e74e4ae08a70ea60c8b" kindref="member">nrf_grtc_sys_counter_overflow_check</ref> should be called. If it retuns true, whole procedure should be repeated.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Lower part of SYSCOUNTER value. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_grtc.h" line="1214" column="28" bodyfile="hal/nrf_grtc.h" bodystart="1214" bodyend="1221" declfile="hal/nrf_grtc.h" declline="662" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__grtc__hal_1ga80b9dd38536653a93d61443bc6e0d2a0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_grtc_sys_counter_high_get</definition>
        <argsstring>(NRF_GRTC_Type const *p_reg)</argsstring>
        <name>nrf_grtc_sys_counter_high_get</name>
        <param>
          <type>NRF_GRTC_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for returning the higher 32-bits of SYSCOUNTER value. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para><ref refid="group__nrf__grtc__hal_1ga0b0c5b513db954011586e86547ed1ce9" kindref="member">nrf_grtc_sys_counter_low_get</ref> must be executed before calling <ref refid="group__nrf__grtc__hal_1ga80b9dd38536653a93d61443bc6e0d2a0" kindref="member">nrf_grtc_sys_counter_high_get</ref>. In addition, after this, <ref refid="group__nrf__grtc__hal_1ga9eab767581794e74e4ae08a70ea60c8b" kindref="member">nrf_grtc_sys_counter_overflow_check</ref> should be called. If it retuns true, whole procedure should be repeated.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Higher part SYSCOUNTER value. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_grtc.h" line="1223" column="28" bodyfile="hal/nrf_grtc.h" bodystart="1223" bodyend="1230" declfile="hal/nrf_grtc.h" declline="676" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__grtc__hal_1gac24bd3d8ecf7ddab6443e854ac0eadb7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint64_t</type>
        <definition>NRF_STATIC_INLINE uint64_t nrf_grtc_sys_counter_get</definition>
        <argsstring>(NRF_GRTC_Type const *p_reg)</argsstring>
        <name>nrf_grtc_sys_counter_get</name>
        <param>
          <type>NRF_GRTC_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for returning the 64-bit SYSCOUNTER value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>SYSCOUNTER value. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_grtc.h" line="1232" column="28" bodyfile="hal/nrf_grtc.h" bodystart="1232" bodyend="1239" declfile="hal/nrf_grtc.h" declline="685" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__grtc__hal_1ga9eab767581794e74e4ae08a70ea60c8b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE bool</type>
        <definition>NRF_STATIC_INLINE bool nrf_grtc_sys_counter_overflow_check</definition>
        <argsstring>(NRF_GRTC_Type const *p_reg)</argsstring>
        <name>nrf_grtc_sys_counter_overflow_check</name>
        <param>
          <type>NRF_GRTC_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for checking whether the lower 32-bits of SYSCOUNTER overflowed after last execution of <ref refid="group__nrf__grtc__hal_1ga0b0c5b513db954011586e86547ed1ce9" kindref="member">nrf_grtc_sys_counter_low_get</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>True</parametername>
</parameternamelist>
<parameterdescription>
<para>if the lower 32-bits of SYSCOUNTER overflowed, false otherwise. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_grtc.h" line="1241" column="24" bodyfile="hal/nrf_grtc.h" bodystart="1241" bodyend="1249" declfile="hal/nrf_grtc.h" declline="695" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__grtc__hal_1ga5c1bce12a2b33339177c00b29bf8e332" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_grtc_sys_counter_active_set</definition>
        <argsstring>(NRF_GRTC_Type *p_reg, bool enable)</argsstring>
        <name>nrf_grtc_sys_counter_active_set</name>
        <param>
          <type>NRF_GRTC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>enable</declname>
        </param>
        <briefdescription>
<para>Function for setting the request to keep the specified SYSCOUNTER channel active. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">enable</parametername>
</parameternamelist>
<parameterdescription>
<para>True if the SYSCOUNTER channel is to be kept active, false otherwise. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_grtc.h" line="1252" column="24" bodyfile="hal/nrf_grtc.h" bodystart="1252" bodyend="1258" declfile="hal/nrf_grtc.h" declline="704" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__grtc__hal_1gaf2aab3b971214da6438ece86ec435146" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE bool</type>
        <definition>NRF_STATIC_INLINE bool nrf_grtc_sys_counter_active_check</definition>
        <argsstring>(NRF_GRTC_Type const *p_reg)</argsstring>
        <name>nrf_grtc_sys_counter_active_check</name>
        <param>
          <type>NRF_GRTC_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for checking whether the specified SYSCOUNTER channel is requested to remain active. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>True</parametername>
</parameternamelist>
<parameterdescription>
<para>if SYSCOUNTER channel is requested to remain active, false otherwise. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_grtc.h" line="1260" column="24" bodyfile="hal/nrf_grtc.h" bodystart="1260" bodyend="1264" declfile="hal/nrf_grtc.h" declline="714" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__grtc__hal_1ga0ef4ff14ec092be3fb37ef38576514f0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_grtc_event_address_get</definition>
        <argsstring>(NRF_GRTC_Type const *p_reg, nrf_grtc_event_t event)</argsstring>
        <name>nrf_grtc_event_address_get</name>
        <param>
          <type>NRF_GRTC_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__grtc__hal_1ga7ae05a37545fa5a2c94e90d048bb2b65" kindref="member">nrf_grtc_event_t</ref></type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>Function for returning the address of an event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>Requested event.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Address of the requested event register. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_grtc.h" line="1267" column="28" bodyfile="hal/nrf_grtc.h" bodystart="1267" bodyend="1271" declfile="hal/nrf_grtc.h" declline="725" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__grtc__hal_1ga60e00f5ace03a5c5b72fa45acda805d2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_grtc_task_address_get</definition>
        <argsstring>(NRF_GRTC_Type const *p_reg, nrf_grtc_task_t task)</argsstring>
        <name>nrf_grtc_task_address_get</name>
        <param>
          <type>NRF_GRTC_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__grtc__hal_1ga3ead45038f169b586ca21cd6ef8acde9" kindref="member">nrf_grtc_task_t</ref></type>
          <declname>task</declname>
        </param>
        <briefdescription>
<para>Function for returning the address of a task. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">task</parametername>
</parameternamelist>
<parameterdescription>
<para>Requested task.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Address of the requested task register. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_grtc.h" line="1273" column="28" bodyfile="hal/nrf_grtc.h" bodystart="1273" bodyend="1277" declfile="hal/nrf_grtc.h" declline="736" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__grtc__hal_1gaa52de35bb6ecb5ebc17c22e2d28a6480" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_grtc_task_trigger</definition>
        <argsstring>(NRF_GRTC_Type *p_reg, nrf_grtc_task_t task)</argsstring>
        <name>nrf_grtc_task_trigger</name>
        <param>
          <type>NRF_GRTC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__grtc__hal_1ga3ead45038f169b586ca21cd6ef8acde9" kindref="member">nrf_grtc_task_t</ref></type>
          <declname>task</declname>
        </param>
        <briefdescription>
<para>Function for starting a task. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">task</parametername>
</parameternamelist>
<parameterdescription>
<para>Requested task. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_grtc.h" line="1279" column="24" bodyfile="hal/nrf_grtc.h" bodystart="1279" bodyend="1282" declfile="hal/nrf_grtc.h" declline="745" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__grtc__hal_1gade023fd81fb28e313e10352daf01d9e3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE <ref refid="group__nrf__grtc__hal_1ga3ead45038f169b586ca21cd6ef8acde9" kindref="member">nrf_grtc_task_t</ref></type>
        <definition>NRF_STATIC_INLINE nrf_grtc_task_t nrf_grtc_sys_counter_capture_task_get</definition>
        <argsstring>(uint8_t cc_channel)</argsstring>
        <name>nrf_grtc_sys_counter_capture_task_get</name>
        <param>
          <type>uint8_t</type>
          <declname>cc_channel</declname>
        </param>
        <briefdescription>
<para>Function for getting the 1 MHz SYSCOUNTER timer capture task associated with the specified channel. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">cc_channel</parametername>
</parameternamelist>
<parameterdescription>
<para>Capture channel.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Capture task. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_grtc.h" line="1284" column="35" bodyfile="hal/nrf_grtc.h" bodystart="1284" bodyend="1287" declfile="hal/nrf_grtc.h" declline="755" declcolumn="35"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__grtc__hal_1ga7d6f2b3291aaebfb0165d2487e3a03fd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_grtc_sys_counter_compare_event_enable</definition>
        <argsstring>(NRF_GRTC_Type *p_reg, uint8_t cc_channel)</argsstring>
        <name>nrf_grtc_sys_counter_compare_event_enable</name>
        <param>
          <type>NRF_GRTC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>cc_channel</declname>
        </param>
        <briefdescription>
<para>Function for enabling SYSCOUNTER compare event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">cc_channel</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel number of compare event to be enabled. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_grtc.h" line="1289" column="24" bodyfile="hal/nrf_grtc.h" bodystart="1289" bodyend="1300" declfile="hal/nrf_grtc.h" declline="763" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__grtc__hal_1gae04c6f373955979278eb18060ff3a4a8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_grtc_sys_counter_compare_event_disable</definition>
        <argsstring>(NRF_GRTC_Type *p_reg, uint8_t cc_channel)</argsstring>
        <name>nrf_grtc_sys_counter_compare_event_disable</name>
        <param>
          <type>NRF_GRTC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>cc_channel</declname>
        </param>
        <briefdescription>
<para>Function for disabling SYSCOUNTER compare event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">cc_channel</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel number of compare event to be disabled. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_grtc.h" line="1302" column="24" bodyfile="hal/nrf_grtc.h" bodystart="1302" bodyend="1312" declfile="hal/nrf_grtc.h" declline="772" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__grtc__hal_1ga32ea992e597b134f4b3d41a8c62f5879" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE <ref refid="group__nrf__grtc__hal_1ga7ae05a37545fa5a2c94e90d048bb2b65" kindref="member">nrf_grtc_event_t</ref></type>
        <definition>NRF_STATIC_INLINE nrf_grtc_event_t nrf_grtc_sys_counter_compare_event_get</definition>
        <argsstring>(uint8_t cc_channel)</argsstring>
        <name>nrf_grtc_sys_counter_compare_event_get</name>
        <param>
          <type>uint8_t</type>
          <declname>cc_channel</declname>
        </param>
        <briefdescription>
<para>Function for getting the SYSCOUNTER compare event associated with the specified compare cc_channel. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">cc_channel</parametername>
</parameternamelist>
<parameterdescription>
<para>Compare channel number.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Requested compare event. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_grtc.h" line="1314" column="36" bodyfile="hal/nrf_grtc.h" bodystart="1314" bodyend="1317" declfile="hal/nrf_grtc.h" declline="783" declcolumn="36"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__grtc__hal_1ga7faf1283a0d67f2428ad6d8d6d03f53e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE bool</type>
        <definition>NRF_STATIC_INLINE bool nrf_grtc_sys_counter_cc_enable_check</definition>
        <argsstring>(NRF_GRTC_Type const *p_reg, uint8_t cc_channel)</argsstring>
        <name>nrf_grtc_sys_counter_cc_enable_check</name>
        <param>
          <type>NRF_GRTC_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>cc_channel</declname>
        </param>
        <briefdescription>
<para>Function for checking whether the specified capture/compare channel is enabled. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">cc_channel</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel to be checked.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>Specified channel is enabled. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>Specified channel is disabled. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_grtc.h" line="1319" column="24" bodyfile="hal/nrf_grtc.h" bodystart="1319" bodyend="1324" declfile="hal/nrf_grtc.h" declline="794" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__grtc__hal_1ga86af4577d105dafbdae927ed086b8b2f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_grtc_sys_counter_set</definition>
        <argsstring>(NRF_GRTC_Type *p_reg, bool enable)</argsstring>
        <name>nrf_grtc_sys_counter_set</name>
        <param>
          <type>NRF_GRTC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>enable</declname>
        </param>
        <briefdescription>
<para>Function for setting the SYSCOUNTER. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>When the SYSCOUNTER is disabled the GRTC uses RTCOUNTER by default.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">enable</parametername>
</parameternamelist>
<parameterdescription>
<para>True if SYSCOUNTER is to be enabled, false otherwise. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_grtc.h" line="1327" column="24" bodyfile="hal/nrf_grtc.h" bodystart="1327" bodyend="1332" declfile="hal/nrf_grtc.h" declline="806" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__grtc__hal_1gaafb45e5bee0a2344906f9a02f4d59a71" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_grtc_sys_counter_auto_mode_set</definition>
        <argsstring>(NRF_GRTC_Type *p_reg, bool enable)</argsstring>
        <name>nrf_grtc_sys_counter_auto_mode_set</name>
        <param>
          <type>NRF_GRTC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>enable</declname>
        </param>
        <briefdescription>
<para>Function for setting automatic mode for the SYSCOUNTER. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>When <computeroutput>enable</computeroutput> is false then the SYSCOUNTER remains active when KEEPRUNNING is set, or any task register, INT register or SYSCOUNTER register is being accessed. When <computeroutput>enable</computeroutput> is true then in addition the SYSCOUNTER remains active when any local CPU that is not sleeping keeps the SYSCOUNTER active.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">enable</parametername>
</parameternamelist>
<parameterdescription>
<para>True if the automatic mode is to be enabled, false otherwise. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_grtc.h" line="1334" column="24" bodyfile="hal/nrf_grtc.h" bodystart="1334" bodyend="1339" declfile="hal/nrf_grtc.h" declline="819" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__grtc__hal_1ga9dab8e70b7c645b97fc70833003f4dda" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE bool</type>
        <definition>NRF_STATIC_INLINE bool nrf_grtc_sys_counter_auto_mode_check</definition>
        <argsstring>(NRF_GRTC_Type *p_reg)</argsstring>
        <name>nrf_grtc_sys_counter_auto_mode_check</name>
        <param>
          <type>NRF_GRTC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for checking whether the SYSCOUNTER has automatic mode enabled. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True Automatic mode is enabled. </para>
</simplesect>
<simplesect kind="return"><para>False Automatic mode is disabled. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_grtc.h" line="1341" column="24" bodyfile="hal/nrf_grtc.h" bodystart="1341" bodyend="1344" declfile="hal/nrf_grtc.h" declline="829" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__grtc__hal_1ga3289a3d075afcbc7b8562a8c5a48adae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE bool</type>
        <definition>NRF_STATIC_INLINE bool nrf_grtc_sys_counter_check</definition>
        <argsstring>(NRF_GRTC_Type const *p_reg)</argsstring>
        <name>nrf_grtc_sys_counter_check</name>
        <param>
          <type>NRF_GRTC_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for checking whether the SYSCOUNTER is in active state. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>True</parametername>
</parameternamelist>
<parameterdescription>
<para>if the SYSCOUNTER is active, false otherwise. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_grtc.h" line="1348" column="24" bodyfile="hal/nrf_grtc.h" bodystart="1348" bodyend="1351" declfile="hal/nrf_grtc.h" declline="839" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__grtc__hal_1gac0d0dba9e8fbfd84eef88aad1d048b86" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_grtc_sys_counter_active_state_request_set</definition>
        <argsstring>(NRF_GRTC_Type *p_reg, bool enable)</argsstring>
        <name>nrf_grtc_sys_counter_active_state_request_set</name>
        <param>
          <type>NRF_GRTC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>enable</declname>
        </param>
        <briefdescription>
<para>Function for setting the request to keep the SYSCOUNTER active. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This function modifies the KEEPRUNNING register, which possesses information whether any local CPU needs keeping the SYSCOUNTER active.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">enable</parametername>
</parameternamelist>
<parameterdescription>
<para>True if the automatic mode is to be enabled, false otherwise. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_grtc.h" line="1353" column="24" bodyfile="hal/nrf_grtc.h" bodystart="1353" bodyend="1367" declfile="hal/nrf_grtc.h" declline="850" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__grtc__hal_1gaa1f8757bb0c09e0bf86e0cdefa9af124" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE bool</type>
        <definition>NRF_STATIC_INLINE bool nrf_grtc_sys_counter_active_state_request_check</definition>
        <argsstring>(NRF_GRTC_Type const *p_reg)</argsstring>
        <name>nrf_grtc_sys_counter_active_state_request_check</name>
        <param>
          <type>NRF_GRTC_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for checking whether the SYSCOUNTER is requested to remain active. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>True</parametername>
</parameternamelist>
<parameterdescription>
<para>if request for keeping the SYSCOUNTER is active, false otherwise. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_grtc.h" line="1370" column="6" bodyfile="hal/nrf_grtc.h" bodystart="1370" bodyend="1379" declfile="hal/nrf_grtc.h" declline="861" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__grtc__hal_1ga26a1b100c80264f41628f7578e330d9f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_grtc_sys_counter_active_state_request_get</definition>
        <argsstring>(NRF_GRTC_Type const *p_reg, uint32_t mask)</argsstring>
        <name>nrf_grtc_sys_counter_active_state_request_get</name>
        <param>
          <type>NRF_GRTC_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Function for getting the domains that requested the SYSCOUNTER to remain active. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Domains mask.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>Bitmask</parametername>
</parameternamelist>
<parameterdescription>
<para>of domains that keep the SYSCOUNTER active. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_grtc.h" line="1382" column="10" bodyfile="hal/nrf_grtc.h" bodystart="1382" bodyend="1386" declfile="hal/nrf_grtc.h" declline="872" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__grtc__hal_1ga467b68e18e9c2cfc248baf75b587810f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_grtc_sys_counter_interval_set</definition>
        <argsstring>(NRF_GRTC_Type *p_reg, uint32_t value)</argsstring>
        <name>nrf_grtc_sys_counter_interval_set</name>
        <param>
          <type>NRF_GRTC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Function for setting the periodic compare event for capture/compare channel 0. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>Period value in 1 MHz units. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_grtc.h" line="1389" column="24" bodyfile="hal/nrf_grtc.h" bodystart="1389" bodyend="1392" declfile="hal/nrf_grtc.h" declline="881" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__grtc__hal_1ga2d1cad3bd0f794e0c8b5c9d5be80e813" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_grtc_sys_counter_interval_get</definition>
        <argsstring>(NRF_GRTC_Type const *p_reg)</argsstring>
        <name>nrf_grtc_sys_counter_interval_get</name>
        <param>
          <type>NRF_GRTC_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting the value of interval for periodic capture/compare event for channel 0. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>Value</parametername>
</parameternamelist>
<parameterdescription>
<para>of the interval in 1 MHz units. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_grtc.h" line="1394" column="28" bodyfile="hal/nrf_grtc.h" bodystart="1394" bodyend="1397" declfile="hal/nrf_grtc.h" declline="891" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__grtc__hal_1ga8b3480c8301f0beb550f8cf8247a3452" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_grtc_timeout_set</definition>
        <argsstring>(NRF_GRTC_Type *p_reg, uint32_t value)</argsstring>
        <name>nrf_grtc_timeout_set</name>
        <param>
          <type>NRF_GRTC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Function for setting the timeout value for GRTC. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Timeout between all CPUs going to sleep and stopping the SYSCOUNTER.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>Timeout value in 32 kHz units. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_grtc.h" line="1399" column="24" bodyfile="hal/nrf_grtc.h" bodystart="1399" bodyend="1403" declfile="hal/nrf_grtc.h" declline="901" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__grtc__hal_1gae1ce6ee813308fce0a2901fb55459678" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_grtc_timeout_get</definition>
        <argsstring>(NRF_GRTC_Type const *p_reg)</argsstring>
        <name>nrf_grtc_timeout_get</name>
        <param>
          <type>NRF_GRTC_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting the value of the timeout value for GRTC. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>Value</parametername>
</parameternamelist>
<parameterdescription>
<para>of the timeout in 32 kHz units. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_grtc.h" line="1405" column="28" bodyfile="hal/nrf_grtc.h" bodystart="1405" bodyend="1408" declfile="hal/nrf_grtc.h" declline="910" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__grtc__hal_1gabf6543ddb24a2c79a2ef1ab8aeb335f1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_grtc_waketime_set</definition>
        <argsstring>(NRF_GRTC_Type *p_reg, uint32_t value)</argsstring>
        <name>nrf_grtc_waketime_set</name>
        <param>
          <type>NRF_GRTC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Function for setting the wake time value for GRTC. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>The wake time is maximum number of 32 kHz cycles takes to restore the APB registers when waking from sleep state.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>Wake time value in 32 kHz units. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_grtc.h" line="1410" column="24" bodyfile="hal/nrf_grtc.h" bodystart="1410" bodyend="1414" declfile="hal/nrf_grtc.h" declline="921" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__grtc__hal_1ga19246ff59e790e2a5d11219c8ad60c8d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_grtc_waketime_get</definition>
        <argsstring>(NRF_GRTC_Type const *p_reg)</argsstring>
        <name>nrf_grtc_waketime_get</name>
        <param>
          <type>NRF_GRTC_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting the wake time value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>Value</parametername>
</parameternamelist>
<parameterdescription>
<para>of wake time in 32 kHz units. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_grtc.h" line="1416" column="28" bodyfile="hal/nrf_grtc.h" bodystart="1416" bodyend="1419" declfile="hal/nrf_grtc.h" declline="930" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__grtc__hal_1ga421c91decb698f3e46897b94ad9ab4c9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_grtc_pwm_compare_set</definition>
        <argsstring>(NRF_GRTC_Type *p_reg, uint32_t value)</argsstring>
        <name>nrf_grtc_pwm_compare_set</name>
        <param>
          <type>NRF_GRTC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Function for setting the PWM compare value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>PWM compare value. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_grtc.h" line="1423" column="24" bodyfile="hal/nrf_grtc.h" bodystart="1423" bodyend="1426" declfile="hal/nrf_grtc.h" declline="940" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__grtc__hal_1gae208d47c196fd01485ff5916d0c7a882" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_grtc_pwm_compare_get</definition>
        <argsstring>(NRF_GRTC_Type const *p_reg)</argsstring>
        <name>nrf_grtc_pwm_compare_get</name>
        <param>
          <type>NRF_GRTC_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting the PWM compare value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>Value</parametername>
</parameternamelist>
<parameterdescription>
<para>of PWM compare. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_grtc.h" line="1428" column="28" bodyfile="hal/nrf_grtc.h" bodystart="1428" bodyend="1431" declfile="hal/nrf_grtc.h" declline="949" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__grtc__hal_1gaecaf461188701a90c6be463db4298f9e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_grtc_clkout_set</definition>
        <argsstring>(NRF_GRTC_Type *p_reg, nrf_grtc_clkout_t clkout, bool enable)</argsstring>
        <name>nrf_grtc_clkout_set</name>
        <param>
          <type>NRF_GRTC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__grtc__hal_1gacdc216d006ac43c34a154cffdf0ca69a" kindref="member">nrf_grtc_clkout_t</ref></type>
          <declname>clkout</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>enable</declname>
        </param>
        <briefdescription>
<para>Function for setting the specified clock source to be connected to output pin. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">clkout</parametername>
</parameternamelist>
<parameterdescription>
<para>Selected clkout source. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">enable</parametername>
</parameternamelist>
<parameterdescription>
<para>True if the clkout source is to be enabled, false otherwise. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_grtc.h" line="1435" column="24" bodyfile="hal/nrf_grtc.h" bodystart="1435" bodyend="1447" declfile="hal/nrf_grtc.h" declline="960" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__grtc__hal_1ga03419f816fcd0f2380d0b9e45d44e55c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE bool</type>
        <definition>NRF_STATIC_INLINE bool nrf_grtc_clkout_enable_check</definition>
        <argsstring>(NRF_GRTC_Type const *p_reg, nrf_grtc_clkout_t clkout)</argsstring>
        <name>nrf_grtc_clkout_enable_check</name>
        <param>
          <type>NRF_GRTC_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__grtc__hal_1gacdc216d006ac43c34a154cffdf0ca69a" kindref="member">nrf_grtc_clkout_t</ref></type>
          <declname>clkout</declname>
        </param>
        <briefdescription>
<para>Function for checking whether clock source is connected to clkout pin. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">clkout</parametername>
</parameternamelist>
<parameterdescription>
<para>Selected clkout source.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>True</parametername>
</parameternamelist>
<parameterdescription>
<para>if the clkout source is enabled, false otherwise. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_grtc.h" line="1449" column="24" bodyfile="hal/nrf_grtc.h" bodystart="1449" bodyend="1453" declfile="hal/nrf_grtc.h" declline="972" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__grtc__hal_1ga6aed79f13e1b69ba1a6d9167d2b876d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_grtc_clkout_divider_set</definition>
        <argsstring>(NRF_GRTC_Type *p_reg, uint32_t value)</argsstring>
        <name>nrf_grtc_clkout_divider_set</name>
        <param>
          <type>NRF_GRTC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Function for setting the fast clock divisor value of clock output. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>Fast clock divisor value. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_grtc.h" line="1455" column="24" bodyfile="hal/nrf_grtc.h" bodystart="1455" bodyend="1460" declfile="hal/nrf_grtc.h" declline="981" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__grtc__hal_1ga3371a887f116e28c9476de431d1145b3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_grtc_clkout_divider_get</definition>
        <argsstring>(NRF_GRTC_Type const *p_reg)</argsstring>
        <name>nrf_grtc_clkout_divider_get</name>
        <param>
          <type>NRF_GRTC_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting the fast clock divisor value of clock output. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>Fast</parametername>
</parameternamelist>
<parameterdescription>
<para>clock divisor value. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_grtc.h" line="1462" column="28" bodyfile="hal/nrf_grtc.h" bodystart="1462" bodyend="1465" declfile="hal/nrf_grtc.h" declline="990" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__grtc__hal_1ga8210f5a14a3afcadf3c40435dcf0fed0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_grtc_clksel_set</definition>
        <argsstring>(NRF_GRTC_Type *p_reg, nrf_grtc_clksel_t clksel)</argsstring>
        <name>nrf_grtc_clksel_set</name>
        <param>
          <type>NRF_GRTC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__grtc__hal_1gae439fae87a8f39984fe088a02960a7ae" kindref="member">nrf_grtc_clksel_t</ref></type>
          <declname>clksel</declname>
        </param>
        <briefdescription>
<para>Function for setting the clock source for the GRTC low-frequency clock. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">clksel</parametername>
</parameternamelist>
<parameterdescription>
<para>Selected clock source. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_grtc.h" line="1469" column="24" bodyfile="hal/nrf_grtc.h" bodystart="1469" bodyend="1473" declfile="hal/nrf_grtc.h" declline="1000" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__grtc__hal_1ga3fc756bda45d4b3626a953c47540b635" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE <ref refid="group__nrf__grtc__hal_1gae439fae87a8f39984fe088a02960a7ae" kindref="member">nrf_grtc_clksel_t</ref></type>
        <definition>NRF_STATIC_INLINE nrf_grtc_clksel_t nrf_grtc_clksel_get</definition>
        <argsstring>(NRF_GRTC_Type const *p_reg)</argsstring>
        <name>nrf_grtc_clksel_get</name>
        <param>
          <type>NRF_GRTC_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting the clock source of the GRTC low-frequency clock. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Clock source configuration. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_grtc.h" line="1475" column="37" bodyfile="hal/nrf_grtc.h" bodystart="1475" bodyend="1478" declfile="hal/nrf_grtc.h" declline="1009" declcolumn="37"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2023<sp/>-<sp/>2024,<sp/>Nordic<sp/>Semiconductor<sp/>ASA</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>All<sp/>rights<sp/>reserved.</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>SPDX-License-Identifier:<sp/>BSD-3-Clause</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions<sp/>are<sp/>met:</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>1.<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright<sp/>notice,<sp/>this</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>2.<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the<sp/>distribution.</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/>3.<sp/>Neither<sp/>the<sp/>name<sp/>of<sp/>the<sp/>copyright<sp/>holder<sp/>nor<sp/>the<sp/>names<sp/>of<sp/>its</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>contributors<sp/>may<sp/>be<sp/>used<sp/>to<sp/>endorse<sp/>or<sp/>promote<sp/>products<sp/>derived<sp/>from<sp/>this</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>software<sp/>without<sp/>specific<sp/>prior<sp/>written<sp/>permission.</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>COPYRIGHT<sp/>HOLDERS<sp/>AND<sp/>CONTRIBUTORS<sp/>&quot;AS<sp/>IS&quot;</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/>AND<sp/>ANY<sp/>EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>THE</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*<sp/>ARE<sp/>DISCLAIMED.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>COPYRIGHT<sp/>HOLDER<sp/>OR<sp/>CONTRIBUTORS<sp/>BE</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,<sp/>SPECIAL,<sp/>EXEMPLARY,<sp/>OR</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>PROCUREMENT<sp/>OF</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>*<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,<sp/>DATA,<sp/>OR<sp/>PROFITS;<sp/>OR<sp/>BUSINESS</highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/>*<sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY<sp/>THEORY<sp/>OF<sp/>LIABILITY,<sp/>WHETHER<sp/>IN</highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/>*<sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR<sp/>OTHERWISE)</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/>*<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE<sp/>OF<sp/>THIS<sp/>SOFTWARE,<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/>*<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight></codeline>
<codeline lineno="32"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>NRF_GRTC_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_GRTC_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;nrfx.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(LUMOS_XXAA)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(NRF_APPLICATION)<sp/>&amp;&amp;<sp/>defined(NRF_TRUSTZONE_NONSECURE)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GRTC_IRQn<sp/><sp/><sp/><sp/><sp/><sp/><sp/>GRTC_1_IRQn</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GRTC_IRQHandler<sp/>GRTC_1_IRQHandler</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(NRF_APPLICATION)<sp/>&amp;&amp;<sp/>!defined(NRF_TRUSTZONE_NONSECURE)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GRTC_IRQn<sp/><sp/><sp/><sp/><sp/><sp/><sp/>GRTC_2_IRQn</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GRTC_IRQHandler<sp/>GRTC_2_IRQHandler</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(NRF_FLPR)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GRTC_IRQn<sp/><sp/><sp/><sp/><sp/><sp/><sp/>GRTC_0_IRQn</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GRTC_IRQHandler<sp/>GRTC_0_IRQHandler</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(HALTIUM_XXAA)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(defined(ISA_ARM)<sp/>&amp;&amp;<sp/>defined(NRF_TRUSTZONE_NONSECURE))<sp/>||<sp/>defined(ISA_RISCV)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GRTC_IRQn<sp/><sp/><sp/><sp/><sp/><sp/><sp/>GRTC_0_IRQn</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GRTC_IRQHandler<sp/>GRTC_0_IRQHandler</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GRTC_IRQn<sp/><sp/><sp/><sp/><sp/><sp/><sp/>GRTC_1_IRQn</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GRTC_IRQHandler<sp/>GRTC_1_IRQHandler</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="66"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="67"><highlight class="comment"><sp/>*<sp/>@defgroup<sp/>nrf_grtc_hal<sp/>GRTC<sp/>HAL</highlight></codeline>
<codeline lineno="68"><highlight class="comment"><sp/>*<sp/>@{</highlight></codeline>
<codeline lineno="69"><highlight class="comment"><sp/>*<sp/>@ingroup<sp/>nrf_grtc</highlight></codeline>
<codeline lineno="70"><highlight class="comment"><sp/>*<sp/>@brief<sp/><sp/><sp/>Hardware<sp/>access<sp/>layer<sp/>for<sp/>managing<sp/>the<sp/>Global<sp/>Real<sp/>Time<sp/>Counter<sp/>(GRTC)<sp/>peripheral.</highlight></codeline>
<codeline lineno="71"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRFX_CHECK(GRTC_PWMREGS)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="74"><highlight class="comment">/**<sp/>@brief<sp/>Symbol<sp/>indicating<sp/>whether<sp/>GRTC<sp/>has<sp/>PWM<sp/>registers.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_GRTC_HAS_PWM<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_GRTC_HAS_PWM<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRFX_CHECK(GRTC_CLKOUTREG)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="81"><highlight class="comment">/**<sp/>@brief<sp/>Symbol<sp/>indicating<sp/>whether<sp/>GRTC<sp/>has<sp/>clock<sp/>output<sp/>registers.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_GRTC_HAS_CLKOUT<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_GRTC_HAS_CLKOUT<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(GRTC_CLKCFG_CLKSEL_Msk)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="88"><highlight class="comment">/**<sp/>@brief<sp/>Symbol<sp/>indicating<sp/>whether<sp/>GRTC<sp/>has<sp/>clock<sp/>source<sp/>selection.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_GRTC_HAS_CLKSEL<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_GRTC_HAS_CLKSEL<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(GRTC_SYSCOUNTER_SYSCOUNTERL_VALUE_Msk)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="95"><highlight class="comment">/**<sp/>@brief<sp/>Symbol<sp/>indicating<sp/>whether<sp/>GRTC<sp/>has<sp/>multiple<sp/>SYSCOUNTER<sp/>registers.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_GRTC_HAS_SYSCOUNTER_ARRAY<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_GRTC_HAS_SYSCOUNTER_ARRAY<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="102"><highlight class="comment">/**<sp/>@brief<sp/>Symbol<sp/>indicating<sp/>whether<sp/>GRTC<sp/>has<sp/>RTCOUNTER.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_GRTC_HAS_RTCOUNTER<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>!defined(NRF_GRTC_HAS_RTCOUNTER)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_GRTC_HAS_RTCOUNTER<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(NRF_GRTC_HAS_EXTENDED)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(LUMOS_XXAA)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="110"><highlight class="comment">/**<sp/>@brief<sp/>Symbol<sp/>indicating<sp/>whether<sp/>GRTC<sp/>has<sp/>extended<sp/>functionality.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_GRTC_HAS_EXTENDED<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_GRTC_HAS_EXTENDED<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>!defined(NRF_GRTC_HAS_EXTENDED)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="117"><highlight class="comment">/**<sp/>@brief<sp/>Symbol<sp/>indicating<sp/>actual<sp/>domain<sp/>index.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_GRTC_DOMAIN_INDEX<sp/>GRTC_IRQ_GROUP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="120"><highlight class="comment">/**<sp/>@brief<sp/>Symbol<sp/>indicating<sp/>actual<sp/>SYSCOUNTER<sp/>index.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_GRTC_HAS_SYSCOUNTER_ARRAY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>GRTC_SYSCOUNTER<sp/>SYSCOUNTER[NRF_GRTC_DOMAIN_INDEX]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="125"><highlight class="comment">/**<sp/>@brief<sp/>Interrupts<sp/>INTEN<sp/>register<sp/>definition.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GRTC_INTEN<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NRFX_CONCAT_2(INTEN,<sp/>GRTC_IRQ_GROUP)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="127"><highlight class="comment">/**<sp/>@brief<sp/>Interrupts<sp/>INTENSET<sp/>register<sp/>definition.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GRTC_INTENSET<sp/><sp/><sp/><sp/><sp/>NRFX_CONCAT_2(INTENSET,<sp/>GRTC_IRQ_GROUP)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="129"><highlight class="comment">/**<sp/>@brief<sp/>Interrupts<sp/>INTENCLR<sp/>register<sp/>definition.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GRTC_INTENCLR<sp/><sp/><sp/><sp/><sp/>NRFX_CONCAT_2(INTENCLR,<sp/>GRTC_IRQ_GROUP)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="131"><highlight class="comment">/**<sp/>@brief<sp/>Interrupts<sp/>INTPEND<sp/>register<sp/>definition.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GRTC_INTPEND<sp/><sp/><sp/><sp/><sp/><sp/>NRFX_CONCAT_2(INTPEND,<sp/>GRTC_IRQ_GROUP)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="134"><highlight class="comment">/**<sp/>@brief<sp/>Main<sp/>SYSCOUNTER<sp/>frequency<sp/>in<sp/>Hz.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_GRTC_SYSCOUNTER_MAIN_FREQUENCY_HZ<sp/>1000000UL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="137"><highlight class="comment">/**<sp/>@brief<sp/>Number<sp/>of<sp/>capture/compare<sp/>channels<sp/>for<sp/>SYSCOUNTER.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_GRTC_SYSCOUNTER_CC_COUNT<sp/>GRTC_CC_MaxCount</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="140"><highlight class="comment">/**<sp/>@brief<sp/>Bitmask<sp/>of<sp/>the<sp/>higher<sp/>32-bits<sp/>of<sp/>capture/compare<sp/>register<sp/>for<sp/>the<sp/>SYSCOUNTER.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_GRTC_SYSCOUNTER_CCH_MASK<sp/>GRTC_CC_CCH_CCH_Msk</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="143"><highlight class="comment">/**<sp/>@brief<sp/>Bitmask<sp/>of<sp/>CCADD<sp/>register<sp/>for<sp/>the<sp/>SYSCOUNTER.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_GRTC_SYSCOUNTER_CCADD_MASK<sp/>GRTC_CC_CCADD_VALUE_Msk</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(GRTC_SYSCOUNTERL_VALUE_Msk)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="147"><highlight class="comment">/**<sp/>@brief<sp/>Bitmask<sp/>of<sp/>the<sp/>lower<sp/>part<sp/>of<sp/>the<sp/>SYSCOUNTER<sp/>value.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_GRTC_SYSCOUNTERL_VALUE_MASK<sp/>GRTC_SYSCOUNTERL_VALUE_Msk</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_GRTC_SYSCOUNTERL_VALUE_MASK<sp/>GRTC_SYSCOUNTER_SYSCOUNTERL_VALUE_Msk</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(GRTC_SYSCOUNTERH_VALUE_Msk)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="154"><highlight class="comment">/**<sp/>@brief<sp/>Bitmask<sp/>of<sp/>the<sp/>higher<sp/>part<sp/>of<sp/>the<sp/>SYSCOUNTER<sp/>value.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_GRTC_SYSCOUNTERH_VALUE_MASK<sp/>GRTC_SYSCOUNTERH_VALUE_Msk</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_GRTC_SYSCOUNTERH_VALUE_MASK<sp/>GRTC_SYSCOUNTER_SYSCOUNTERH_VALUE_Msk</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="160"><highlight class="comment">/**<sp/>@brief<sp/>Bitmask<sp/>of<sp/>the<sp/>higher<sp/>32-bits<sp/>of<sp/>capture/compare<sp/>register<sp/>for<sp/>the<sp/>RTCOUNTER.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_GRTC_RTCOUNTER_CCH_MASK<sp/>GRTC_RTCOMPAREH_VALUE_Msk</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(GRTC_SYSCOUNTERH_OVERFLOW_Msk)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="164"><highlight class="comment">/**<sp/>@brief<sp/>Bitmask<sp/>of<sp/>the<sp/>OVERFLOW<sp/>bit.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_GRTC_SYSCOUNTERH_OVERFLOW_MASK<sp/>GRTC_SYSCOUNTERH_OVERFLOW_Msk</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_GRTC_SYSCOUNTERH_OVERFLOW_MASK<sp/>GRTC_SYSCOUNTER_SYSCOUNTERH_OVERFLOW_Msk</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(GRTC_SYSCOUNTERH_BUSY_Msk)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="171"><highlight class="comment">/**<sp/>@brief<sp/>Bitmask<sp/>of<sp/>the<sp/>BUSY<sp/>bit.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_GRTC_SYSCOUNTERH_BUSY_MASK<sp/>GRTC_SYSCOUNTERH_BUSY_Msk</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_GRTC_SYSCOUNTERH_BUSY_MASK<sp/>GRTC_SYSCOUNTER_SYSCOUNTERH_BUSY_Msk</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="177"><highlight class="comment">/**<sp/>@brief<sp/>Maximum<sp/>value<sp/>of<sp/>TIMEOUT<sp/>register<sp/>content.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_GRTC_TIMEOUT_MAX_VALUE<sp/>(GRTC_TIMEOUT_VALUE_Msk<sp/>&gt;&gt;<sp/>GRTC_TIMEOUT_VALUE_Pos)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="180"><highlight class="comment">/**<sp/>@brief<sp/>Maximum<sp/>value<sp/>of<sp/>WAKETIME<sp/>register<sp/>content.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_GRTC_WAKETIME_MAX_VALUE<sp/>(GRTC_WAKETIME_VALUE_Msk<sp/>&gt;&gt;<sp/>GRTC_WAKETIME_VALUE_Pos)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="183"><highlight class="comment">/**<sp/>@brief<sp/>Maximum<sp/>value<sp/>of<sp/>CLKFASTDIV<sp/>register<sp/>content.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_GRTC_CLKCFG_CLKFASTDIV_MAX_VALUE<sp/>GRTC_CLKCFG_CLKFASTDIV_Max</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="186"><highlight class="comment">/**<sp/>@brief<sp/>Macro<sp/>for<sp/>creating<sp/>the<sp/>interrupt<sp/>bitmask<sp/>for<sp/>the<sp/>specified<sp/>compare<sp/>channel.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_GRTC_CHANNEL_INT_MASK(ch)<sp/>((uint32_t)(NRF_GRTC_INT_COMPARE0_MASK)<sp/>&lt;&lt;<sp/>(ch))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="189"><highlight class="comment">/**<sp/>@brief<sp/>Main<sp/>channel<sp/>that<sp/>can<sp/>be<sp/>used<sp/>only<sp/>by<sp/>the<sp/>owner<sp/>of<sp/>GRTC.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(LUMOS_XXAA)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(ISA_RISCV)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_GRTC_MAIN_CC_CHANNEL<sp/>4</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_GRTC_MAIN_CC_CHANNEL<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_GRTC_MAIN_CC_CHANNEL<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="200"><highlight class="comment">/**<sp/>@brief<sp/>Bitmask<sp/>of<sp/>interrupt<sp/>enable.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_GRTC_INTEN_MASK<sp/>NRFX_BIT_MASK(GRTC_CC_MaxCount)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="203"><highlight class="comment">/**<sp/>@brief<sp/>Mask<sp/>for<sp/>all<sp/>channels<sp/>represented<sp/>by<sp/>CC<sp/>channels.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_GRTC_SYSCOUNTER_ALL_CHANNELS_INT_MASK<sp/>\</highlight></codeline>
<codeline lineno="205"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>((uint32_t)(((1<sp/>&lt;&lt;<sp/>NRF_GRTC_SYSCOUNTER_CC_COUNT)<sp/>-<sp/>1)<sp/>&lt;&lt;<sp/>GRTC_INTEN0_COMPARE0_Pos))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="207"><highlight class="comment">/**<sp/>@brief<sp/>GRTC<sp/>tasks.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal">{</highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_GRTC_HAS_EXTENDED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__grtc__hal_1gga3ead45038f169b586ca21cd6ef8acde9af0bbe53668b3def13ca5427c7155d8aa" kindref="member">NRF_GRTC_TASK_START</ref><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_GRTC_Type,<sp/>TASKS_START),<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Start.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__grtc__hal_1gga3ead45038f169b586ca21cd6ef8acde9aa371c89207c911044474b41a5af4ea13" kindref="member">NRF_GRTC_TASK_STOP</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_GRTC_Type,<sp/>TASKS_STOP),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Stop.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__grtc__hal_1gga3ead45038f169b586ca21cd6ef8acde9a9bdac9230cd2cfee5b1612f638846356" kindref="member">NRF_GRTC_TASK_CLEAR</ref><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_GRTC_Type,<sp/>TASKS_CLEAR),<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Clear.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_GRTC_HAS_PWM</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__grtc__hal_1gga3ead45038f169b586ca21cd6ef8acde9ad3004ba2b2a693c014d62b5a71f07566" kindref="member">NRF_GRTC_TASK_PWM_START</ref><sp/><sp/>=<sp/>offsetof(NRF_GRTC_Type,<sp/>TASKS_PWMSTART),<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Start<sp/>the<sp/>PWM.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__grtc__hal_1gga3ead45038f169b586ca21cd6ef8acde9ad5423f202e7edb947cbf9ec6b7af8c88" kindref="member">NRF_GRTC_TASK_PWM_STOP</ref><sp/><sp/><sp/>=<sp/>offsetof(NRF_GRTC_Type,<sp/>TASKS_PWMSTOP),<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Stop<sp/>the<sp/>PWM.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRF_GRTC_HAS_PWM</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__grtc__hal_1gga3ead45038f169b586ca21cd6ef8acde9a5949f268a2fc7554d0e2c276dc93c14b" kindref="member">NRF_GRTC_TASK_CAPTURE_0</ref><sp/><sp/>=<sp/>offsetof(NRF_GRTC_Type,<sp/>TASKS_CAPTURE[0]),<sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Capture<sp/>the<sp/>counter<sp/>value<sp/>on<sp/>channel<sp/>0.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__grtc__hal_1gga3ead45038f169b586ca21cd6ef8acde9aac6dcc164760956521dcfc075ab1deef" kindref="member">NRF_GRTC_TASK_CAPTURE_1</ref><sp/><sp/>=<sp/>offsetof(NRF_GRTC_Type,<sp/>TASKS_CAPTURE[1]),<sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Capture<sp/>the<sp/>counter<sp/>value<sp/>on<sp/>channel<sp/>1.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__grtc__hal_1gga3ead45038f169b586ca21cd6ef8acde9a399cd3aa72c654c87230fae19fc24eea" kindref="member">NRF_GRTC_TASK_CAPTURE_2</ref><sp/><sp/>=<sp/>offsetof(NRF_GRTC_Type,<sp/>TASKS_CAPTURE[2]),<sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Capture<sp/>the<sp/>counter<sp/>value<sp/>on<sp/>channel<sp/>2.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__grtc__hal_1gga3ead45038f169b586ca21cd6ef8acde9a47e71b927d8b31125aaff6d73e1957a0" kindref="member">NRF_GRTC_TASK_CAPTURE_3</ref><sp/><sp/>=<sp/>offsetof(NRF_GRTC_Type,<sp/>TASKS_CAPTURE[3]),<sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Capture<sp/>the<sp/>counter<sp/>value<sp/>on<sp/>channel<sp/>3.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__grtc__hal_1gga3ead45038f169b586ca21cd6ef8acde9a836940b45d931ff2bd34bff22710b330" kindref="member">NRF_GRTC_TASK_CAPTURE_4</ref><sp/><sp/>=<sp/>offsetof(NRF_GRTC_Type,<sp/>TASKS_CAPTURE[4]),<sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Capture<sp/>the<sp/>counter<sp/>value<sp/>on<sp/>channel<sp/>4.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__grtc__hal_1gga3ead45038f169b586ca21cd6ef8acde9aabd9a032a26683ea0d18f4398310cea6" kindref="member">NRF_GRTC_TASK_CAPTURE_5</ref><sp/><sp/>=<sp/>offsetof(NRF_GRTC_Type,<sp/>TASKS_CAPTURE[5]),<sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Capture<sp/>the<sp/>counter<sp/>value<sp/>on<sp/>channel<sp/>5.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__grtc__hal_1gga3ead45038f169b586ca21cd6ef8acde9a5521fd3420eee20a1b892dd4c66eb5b2" kindref="member">NRF_GRTC_TASK_CAPTURE_6</ref><sp/><sp/>=<sp/>offsetof(NRF_GRTC_Type,<sp/>TASKS_CAPTURE[6]),<sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Capture<sp/>the<sp/>counter<sp/>value<sp/>on<sp/>channel<sp/>6.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__grtc__hal_1gga3ead45038f169b586ca21cd6ef8acde9af8de2bd05925d7ab43a41b910d1cc726" kindref="member">NRF_GRTC_TASK_CAPTURE_7</ref><sp/><sp/>=<sp/>offsetof(NRF_GRTC_Type,<sp/>TASKS_CAPTURE[7]),<sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Capture<sp/>the<sp/>counter<sp/>value<sp/>on<sp/>channel<sp/>7.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__grtc__hal_1gga3ead45038f169b586ca21cd6ef8acde9abcdb82464e75549c95dabe076e5bfbdd" kindref="member">NRF_GRTC_TASK_CAPTURE_8</ref><sp/><sp/>=<sp/>offsetof(NRF_GRTC_Type,<sp/>TASKS_CAPTURE[8]),<sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Capture<sp/>the<sp/>counter<sp/>value<sp/>on<sp/>channel<sp/>8.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__grtc__hal_1gga3ead45038f169b586ca21cd6ef8acde9a8e8faef7f39c2427913b7640f96fc79a" kindref="member">NRF_GRTC_TASK_CAPTURE_9</ref><sp/><sp/>=<sp/>offsetof(NRF_GRTC_Type,<sp/>TASKS_CAPTURE[9]),<sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Capture<sp/>the<sp/>counter<sp/>value<sp/>on<sp/>channel<sp/>9.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__grtc__hal_1gga3ead45038f169b586ca21cd6ef8acde9a99cbe42cc269c0dd9001f28966539634" kindref="member">NRF_GRTC_TASK_CAPTURE_10</ref><sp/>=<sp/>offsetof(NRF_GRTC_Type,<sp/>TASKS_CAPTURE[10]),<sp/></highlight><highlight class="comment">/**&lt;<sp/>Capture<sp/>the<sp/>counter<sp/>value<sp/>on<sp/>channel<sp/>10.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__grtc__hal_1gga3ead45038f169b586ca21cd6ef8acde9a7a445851264eddc9f1615700ccb6353e" kindref="member">NRF_GRTC_TASK_CAPTURE_11</ref><sp/>=<sp/>offsetof(NRF_GRTC_Type,<sp/>TASKS_CAPTURE[11]),<sp/></highlight><highlight class="comment">/**&lt;<sp/>Capture<sp/>the<sp/>counter<sp/>value<sp/>on<sp/>channel<sp/>11.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_GRTC_SYSCOUNTER_CC_COUNT<sp/>&gt;<sp/>12</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/>NRF_GRTC_TASK_CAPTURE_12<sp/>=<sp/>offsetof(NRF_GRTC_Type,<sp/>TASKS_CAPTURE[12]),<sp/></highlight><highlight class="comment">/**&lt;<sp/>Capture<sp/>the<sp/>counter<sp/>value<sp/>on<sp/>channel<sp/>12.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/>NRF_GRTC_TASK_CAPTURE_13<sp/>=<sp/>offsetof(NRF_GRTC_Type,<sp/>TASKS_CAPTURE[13]),<sp/></highlight><highlight class="comment">/**&lt;<sp/>Capture<sp/>the<sp/>counter<sp/>value<sp/>on<sp/>channel<sp/>13.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/>NRF_GRTC_TASK_CAPTURE_14<sp/>=<sp/>offsetof(NRF_GRTC_Type,<sp/>TASKS_CAPTURE[14]),<sp/></highlight><highlight class="comment">/**&lt;<sp/>Capture<sp/>the<sp/>counter<sp/>value<sp/>on<sp/>channel<sp/>14.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/>NRF_GRTC_TASK_CAPTURE_15<sp/>=<sp/>offsetof(NRF_GRTC_Type,<sp/>TASKS_CAPTURE[15]),<sp/></highlight><highlight class="comment">/**&lt;<sp/>Capture<sp/>the<sp/>counter<sp/>value<sp/>on<sp/>channel<sp/>15.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_GRTC_SYSCOUNTER_CC_COUNT<sp/>&gt;<sp/>16</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/>NRF_GRTC_TASK_CAPTURE_16<sp/>=<sp/>offsetof(NRF_GRTC_Type,<sp/>TASKS_CAPTURE[16]),<sp/></highlight><highlight class="comment">/**&lt;<sp/>Capture<sp/>the<sp/>counter<sp/>value<sp/>on<sp/>channel<sp/>16.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/>NRF_GRTC_TASK_CAPTURE_17<sp/>=<sp/>offsetof(NRF_GRTC_Type,<sp/>TASKS_CAPTURE[17]),<sp/></highlight><highlight class="comment">/**&lt;<sp/>Capture<sp/>the<sp/>counter<sp/>value<sp/>on<sp/>channel<sp/>17.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_GRTC_SYSCOUNTER_CC_COUNT<sp/>&gt;<sp/>18</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/>NRF_GRTC_TASK_CAPTURE_18<sp/>=<sp/>offsetof(NRF_GRTC_Type,<sp/>TASKS_CAPTURE[18]),<sp/></highlight><highlight class="comment">/**&lt;<sp/>Capture<sp/>the<sp/>counter<sp/>value<sp/>on<sp/>channel<sp/>18.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_GRTC_SYSCOUNTER_CC_COUNT<sp/>&gt;<sp/>19</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/>NRF_GRTC_TASK_CAPTURE_19<sp/>=<sp/>offsetof(NRF_GRTC_Type,<sp/>TASKS_CAPTURE[19]),<sp/></highlight><highlight class="comment">/**&lt;<sp/>Capture<sp/>the<sp/>counter<sp/>value<sp/>on<sp/>channel<sp/>19.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_GRTC_SYSCOUNTER_CC_COUNT<sp/>&gt;<sp/>20</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/>NRF_GRTC_TASK_CAPTURE_20<sp/>=<sp/>offsetof(NRF_GRTC_Type,<sp/>TASKS_CAPTURE[20]),<sp/></highlight><highlight class="comment">/**&lt;<sp/>Capture<sp/>the<sp/>counter<sp/>value<sp/>on<sp/>channel<sp/>20.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/>NRF_GRTC_TASK_CAPTURE_21<sp/>=<sp/>offsetof(NRF_GRTC_Type,<sp/>TASKS_CAPTURE[21]),<sp/></highlight><highlight class="comment">/**&lt;<sp/>Capture<sp/>the<sp/>counter<sp/>value<sp/>on<sp/>channel<sp/>21.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/>NRF_GRTC_TASK_CAPTURE_22<sp/>=<sp/>offsetof(NRF_GRTC_Type,<sp/>TASKS_CAPTURE[22]),<sp/></highlight><highlight class="comment">/**&lt;<sp/>Capture<sp/>the<sp/>counter<sp/>value<sp/>on<sp/>channel<sp/>22.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/>NRF_GRTC_TASK_CAPTURE_23<sp/>=<sp/>offsetof(NRF_GRTC_Type,<sp/>TASKS_CAPTURE[23]),<sp/></highlight><highlight class="comment">/**&lt;<sp/>Capture<sp/>the<sp/>counter<sp/>value<sp/>on<sp/>channel<sp/>23.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal">}<sp/><ref refid="group__nrf__grtc__hal_1ga3ead45038f169b586ca21cd6ef8acde9" kindref="member">nrf_grtc_task_t</ref>;</highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="255"><highlight class="comment">/**<sp/>@brief<sp/>GRTC<sp/>events.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal">{</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__grtc__hal_1gga7ae05a37545fa5a2c94e90d048bb2b65a51eb4303db2e53642fc468398e4e8cbc" kindref="member">NRF_GRTC_EVENT_COMPARE_0</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_GRTC_Type,<sp/>EVENTS_COMPARE[0]),<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Compare<sp/>0<sp/>event.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__grtc__hal_1gga7ae05a37545fa5a2c94e90d048bb2b65ab27781e89a7dc0ce608f699ef09c00a2" kindref="member">NRF_GRTC_EVENT_COMPARE_1</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_GRTC_Type,<sp/>EVENTS_COMPARE[1]),<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Compare<sp/>1<sp/>event.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__grtc__hal_1gga7ae05a37545fa5a2c94e90d048bb2b65a06fef006f68b5c71f28188c088d7ecc0" kindref="member">NRF_GRTC_EVENT_COMPARE_2</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_GRTC_Type,<sp/>EVENTS_COMPARE[2]),<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Compare<sp/>2<sp/>event.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__grtc__hal_1gga7ae05a37545fa5a2c94e90d048bb2b65a067729010761ff964c173a0f5c4019a7" kindref="member">NRF_GRTC_EVENT_COMPARE_3</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_GRTC_Type,<sp/>EVENTS_COMPARE[3]),<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Compare<sp/>3<sp/>event.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__grtc__hal_1gga7ae05a37545fa5a2c94e90d048bb2b65aa363885fa824af7cd3661a9cedeca534" kindref="member">NRF_GRTC_EVENT_COMPARE_4</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_GRTC_Type,<sp/>EVENTS_COMPARE[4]),<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Compare<sp/>4<sp/>event.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__grtc__hal_1gga7ae05a37545fa5a2c94e90d048bb2b65a6d74b058f6c66e2f59cbd5c1c6b03fef" kindref="member">NRF_GRTC_EVENT_COMPARE_5</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_GRTC_Type,<sp/>EVENTS_COMPARE[5]),<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Compare<sp/>5<sp/>event.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__grtc__hal_1gga7ae05a37545fa5a2c94e90d048bb2b65a4dbdf3235893ffcbacefd3ad93eb290f" kindref="member">NRF_GRTC_EVENT_COMPARE_6</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_GRTC_Type,<sp/>EVENTS_COMPARE[6]),<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Compare<sp/>6<sp/>event.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__grtc__hal_1gga7ae05a37545fa5a2c94e90d048bb2b65ad105ff9439c6d5f8b14fa8636bbc2a70" kindref="member">NRF_GRTC_EVENT_COMPARE_7</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_GRTC_Type,<sp/>EVENTS_COMPARE[7]),<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Compare<sp/>7<sp/>event.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__grtc__hal_1gga7ae05a37545fa5a2c94e90d048bb2b65a176351c02a9143e7d8e481b9341aba7b" kindref="member">NRF_GRTC_EVENT_COMPARE_8</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_GRTC_Type,<sp/>EVENTS_COMPARE[8]),<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Compare<sp/>8<sp/>event.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__grtc__hal_1gga7ae05a37545fa5a2c94e90d048bb2b65a96e4602e66298a40e16d81eaa4a5bb77" kindref="member">NRF_GRTC_EVENT_COMPARE_9</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_GRTC_Type,<sp/>EVENTS_COMPARE[9]),<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Compare<sp/>9<sp/>event.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__grtc__hal_1gga7ae05a37545fa5a2c94e90d048bb2b65afa77c726823878043979348ebd8198c6" kindref="member">NRF_GRTC_EVENT_COMPARE_10</ref><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_GRTC_Type,<sp/>EVENTS_COMPARE[10]),<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Compare<sp/>10<sp/>event.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__grtc__hal_1gga7ae05a37545fa5a2c94e90d048bb2b65a4d16126ecf78752cecb01e249f9343b2" kindref="member">NRF_GRTC_EVENT_COMPARE_11</ref><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_GRTC_Type,<sp/>EVENTS_COMPARE[11]),<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Compare<sp/>11<sp/>event.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__grtc__hal_1gga7ae05a37545fa5a2c94e90d048bb2b65aed54a6f5672eb5327102b72ba1f0092d" kindref="member">NRF_GRTC_EVENT_COMPARE_12</ref><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_GRTC_Type,<sp/>EVENTS_COMPARE[12]),<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Compare<sp/>12<sp/>event.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_GRTC_SYSCOUNTER_CC_COUNT<sp/>&gt;<sp/>12</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/>NRF_GRTC_EVENT_COMPARE_13<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_GRTC_Type,<sp/>EVENTS_COMPARE[13]),<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Compare<sp/>13<sp/>event.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/>NRF_GRTC_EVENT_COMPARE_14<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_GRTC_Type,<sp/>EVENTS_COMPARE[14]),<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Compare<sp/>14<sp/>event.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/>NRF_GRTC_EVENT_COMPARE_15<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_GRTC_Type,<sp/>EVENTS_COMPARE[15]),<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Compare<sp/>15<sp/>event.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_GRTC_SYSCOUNTER_CC_COUNT<sp/>&gt;<sp/>16</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/>NRF_GRTC_EVENT_COMPARE_16<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_GRTC_Type,<sp/>EVENTS_COMPARE[16]),<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Compare<sp/>16<sp/>event.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/>NRF_GRTC_EVENT_COMPARE_17<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_GRTC_Type,<sp/>EVENTS_COMPARE[17]),<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Compare<sp/>17<sp/>event.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_GRTC_SYSCOUNTER_CC_COUNT<sp/>&gt;<sp/>18</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/>NRF_GRTC_EVENT_COMPARE_18<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_GRTC_Type,<sp/>EVENTS_COMPARE[18]),<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Compare<sp/>18<sp/>event.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_GRTC_SYSCOUNTER_CC_COUNT<sp/>&gt;<sp/>19</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/>NRF_GRTC_EVENT_COMPARE_19<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_GRTC_Type,<sp/>EVENTS_COMPARE[19]),<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Compare<sp/>19<sp/>event.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_GRTC_SYSCOUNTER_CC_COUNT<sp/>&gt;<sp/>20</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/>NRF_GRTC_EVENT_COMPARE_20<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_GRTC_Type,<sp/>EVENTS_COMPARE[20]),<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Compare<sp/>20<sp/>event.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/>NRF_GRTC_EVENT_COMPARE_21<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_GRTC_Type,<sp/>EVENTS_COMPARE[21]),<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Compare<sp/>21<sp/>event.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/>NRF_GRTC_EVENT_COMPARE_22<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_GRTC_Type,<sp/>EVENTS_COMPARE[22]),<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Compare<sp/>22<sp/>event.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/>NRF_GRTC_EVENT_COMPARE_23<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_GRTC_Type,<sp/>EVENTS_COMPARE[23]),<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Compare<sp/>23<sp/>event.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_GRTC_HAS_RTCOUNTER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__grtc__hal_1gga7ae05a37545fa5a2c94e90d048bb2b65aaf77e55d0b716fe06c2b56f2faa275a4" kindref="member">NRF_GRTC_EVENT_RTCOMPARE</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_GRTC_Type,<sp/>EVENTS_RTCOMPARE),<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>RTCOUNTER<sp/>compare<sp/>event.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__grtc__hal_1gga7ae05a37545fa5a2c94e90d048bb2b65ae7e815bcad2414fc4de6025fc9329e7c" kindref="member">NRF_GRTC_EVENT_RTCOMPARESYNC</ref><sp/><sp/><sp/>=<sp/>offsetof(NRF_GRTC_Type,<sp/>EVENTS_RTCOMPARESYNC),<sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>RTCOUNTER<sp/>synchronized<sp/>compare<sp/>event.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__grtc__hal_1gga7ae05a37545fa5a2c94e90d048bb2b65ab123f82a38ece536dd9de212c385046d" kindref="member">NRF_GRTC_EVENT_SYSCOUNTERVALID</ref><sp/>=<sp/>offsetof(NRF_GRTC_Type,<sp/>EVENTS_SYSCOUNTERVALID),<sp/></highlight><highlight class="comment">/**&lt;<sp/>SYSCOUNTER<sp/>value<sp/>valid<sp/>event.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_GRTC_HAS_PWM</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__grtc__hal_1gga7ae05a37545fa5a2c94e90d048bb2b65a1135fb3652d2cfca4ef71e55904203c2" kindref="member">NRF_GRTC_EVENT_PWM_PERIOD_END</ref><sp/><sp/>=<sp/>offsetof(NRF_GRTC_Type,<sp/>EVENTS_PWMPERIODEND),<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>End<sp/>of<sp/>PWM<sp/>period<sp/>event.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRF_GRTC_HAS_PWM</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal">}<sp/><ref refid="group__nrf__grtc__hal_1ga7ae05a37545fa5a2c94e90d048bb2b65" kindref="member">nrf_grtc_event_t</ref>;</highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_GRTC_HAS_RTCOUNTER</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="303"><highlight class="comment">/**<sp/>@brief<sp/>Types<sp/>of<sp/>GRTC<sp/>shortcuts.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal">{</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__grtc__hal_1gga123d5e58c5e2a9fc7f7ff2d3aa4f82dfac9e912a90becb727d32dc58faf9aefb3" kindref="member">NRF_GRTC_SHORT_RTCOMPARE_CLEAR_MASK</ref><sp/>=<sp/>GRTC_SHORTS_RTCOMPARE_CLEAR_Msk,<sp/></highlight><highlight class="comment">/**&lt;<sp/>Shortcut<sp/>between<sp/>RTCOMPARE<sp/>event<sp/>and<sp/>CLEAR<sp/>task.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal">}<sp/><ref refid="group__nrf__grtc__hal_1ga123d5e58c5e2a9fc7f7ff2d3aa4f82df" kindref="member">nrf_grtc_short_mask_t</ref>;</highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="310"><highlight class="comment">/**<sp/>@brief<sp/>Types<sp/>of<sp/>GRTC<sp/>CC<sp/>references.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal">{</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__grtc__hal_1gga4e34fb922643e9f448f248b410e2e8e4a7d1e9d741d2bd841434da14196c05c34" kindref="member">NRF_GRTC_CC_ADD_REFERENCE_SYSCOUNTER</ref><sp/>=<sp/>GRTC_CC_CCADD_REFERENCE_SYSCOUNTER,<sp/></highlight><highlight class="comment">/**&lt;<sp/>The<sp/>SYSCOUNTER<sp/>register&apos;s<sp/>content<sp/>will<sp/>be<sp/>used<sp/>as<sp/>the<sp/>reference.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__grtc__hal_1gga4e34fb922643e9f448f248b410e2e8e4a871b28e84ca812e2bd1a71a12b17354f" kindref="member">NRF_GRTC_CC_ADD_REFERENCE_CC</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>GRTC_CC_CCADD_REFERENCE_CC<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>The<sp/>CC[n]<sp/>register&apos;s<sp/>content<sp/>will<sp/>be<sp/>used<sp/>as<sp/>the<sp/>reference.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal">}<sp/><ref refid="group__nrf__grtc__hal_1ga4e34fb922643e9f448f248b410e2e8e4" kindref="member">nrf_grtc_cc_add_reference_t</ref>;</highlight></codeline>
<codeline lineno="316"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="317"><highlight class="comment">/**<sp/>@brief<sp/>GRTC<sp/>interrupts.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal">{</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__grtc__hal_1ggad1e632ee175d9af435e2246cd7927822a695bd0df2fa8ffbd8353f78b536011e2" kindref="member">NRF_GRTC_INT_COMPARE0_MASK</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>GRTC_INTENSET0_COMPARE0_Msk,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>GRTC<sp/>interrupt<sp/>from<sp/>compare<sp/>event<sp/>on<sp/>channel<sp/>0.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__grtc__hal_1ggad1e632ee175d9af435e2246cd7927822a34201202bce60d2bf69d21ecdc4f197c" kindref="member">NRF_GRTC_INT_COMPARE1_MASK</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>GRTC_INTENSET0_COMPARE1_Msk,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>GRTC<sp/>interrupt<sp/>from<sp/>compare<sp/>event<sp/>on<sp/>channel<sp/>1.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__grtc__hal_1ggad1e632ee175d9af435e2246cd7927822afab614c03e60337d4c4e61e9e5fbb220" kindref="member">NRF_GRTC_INT_COMPARE2_MASK</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>GRTC_INTENSET0_COMPARE2_Msk,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>GRTC<sp/>interrupt<sp/>from<sp/>compare<sp/>event<sp/>on<sp/>channel<sp/>2.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__grtc__hal_1ggad1e632ee175d9af435e2246cd7927822a8e786fe3e5d073f991529f472079237a" kindref="member">NRF_GRTC_INT_COMPARE3_MASK</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>GRTC_INTENSET0_COMPARE3_Msk,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>GRTC<sp/>interrupt<sp/>from<sp/>compare<sp/>event<sp/>on<sp/>channel<sp/>3.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__grtc__hal_1ggad1e632ee175d9af435e2246cd7927822a3e8257930c176bec7770e7789b9cb6d3" kindref="member">NRF_GRTC_INT_COMPARE4_MASK</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>GRTC_INTENSET0_COMPARE4_Msk,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>GRTC<sp/>interrupt<sp/>from<sp/>compare<sp/>event<sp/>on<sp/>channel<sp/>4.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__grtc__hal_1ggad1e632ee175d9af435e2246cd7927822a077d1f7976f18b5ffdd429a1d661f79d" kindref="member">NRF_GRTC_INT_COMPARE5_MASK</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>GRTC_INTENSET0_COMPARE5_Msk,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>GRTC<sp/>interrupt<sp/>from<sp/>compare<sp/>event<sp/>on<sp/>channel<sp/>5.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__grtc__hal_1ggad1e632ee175d9af435e2246cd7927822a2c1e01317d660e0a4860904cb3635916" kindref="member">NRF_GRTC_INT_COMPARE6_MASK</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>GRTC_INTENSET0_COMPARE6_Msk,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>GRTC<sp/>interrupt<sp/>from<sp/>compare<sp/>event<sp/>on<sp/>channel<sp/>6.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__grtc__hal_1ggad1e632ee175d9af435e2246cd7927822a760ea75a3ab6fd7286497bbc6b77ea53" kindref="member">NRF_GRTC_INT_COMPARE7_MASK</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>GRTC_INTENSET0_COMPARE7_Msk,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>GRTC<sp/>interrupt<sp/>from<sp/>compare<sp/>event<sp/>on<sp/>channel<sp/>7.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__grtc__hal_1ggad1e632ee175d9af435e2246cd7927822a946402fa9a810ba86bf9e935ef37ff51" kindref="member">NRF_GRTC_INT_COMPARE8_MASK</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>GRTC_INTENSET0_COMPARE8_Msk,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>GRTC<sp/>interrupt<sp/>from<sp/>compare<sp/>event<sp/>on<sp/>channel<sp/>8.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__grtc__hal_1ggad1e632ee175d9af435e2246cd7927822a291fc6e8ab07573bd1d79496a5f1cf05" kindref="member">NRF_GRTC_INT_COMPARE9_MASK</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>GRTC_INTENSET0_COMPARE9_Msk,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>GRTC<sp/>interrupt<sp/>from<sp/>compare<sp/>event<sp/>on<sp/>channel<sp/>9.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__grtc__hal_1ggad1e632ee175d9af435e2246cd7927822a6c76dfd5b835f2730d4e963bd0200a07" kindref="member">NRF_GRTC_INT_COMPARE10_MASK</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>GRTC_INTENSET0_COMPARE10_Msk,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>GRTC<sp/>interrupt<sp/>from<sp/>compare<sp/>event<sp/>on<sp/>channel<sp/>10.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__grtc__hal_1ggad1e632ee175d9af435e2246cd7927822a3cbf6c473a0f8d7a64fb755e21a2c7f0" kindref="member">NRF_GRTC_INT_COMPARE11_MASK</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>GRTC_INTENSET0_COMPARE11_Msk,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>GRTC<sp/>interrupt<sp/>from<sp/>compare<sp/>event<sp/>on<sp/>channel<sp/>11.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_GRTC_SYSCOUNTER_CC_COUNT<sp/>&gt;<sp/>12</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/>NRF_GRTC_INT_COMPARE12_MASK<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>GRTC_INTENSET0_COMPARE12_Msk,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>GRTC<sp/>interrupt<sp/>from<sp/>compare<sp/>event<sp/>on<sp/>channel<sp/>12.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/>NRF_GRTC_INT_COMPARE13_MASK<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>GRTC_INTENSET0_COMPARE13_Msk,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>GRTC<sp/>interrupt<sp/>from<sp/>compare<sp/>event<sp/>on<sp/>channel<sp/>13.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/>NRF_GRTC_INT_COMPARE14_MASK<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>GRTC_INTENSET0_COMPARE14_Msk,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>GRTC<sp/>interrupt<sp/>from<sp/>compare<sp/>event<sp/>on<sp/>channel<sp/>14.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/>NRF_GRTC_INT_COMPARE15_MASK<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>GRTC_INTENSET0_COMPARE15_Msk,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>GRTC<sp/>interrupt<sp/>from<sp/>compare<sp/>event<sp/>on<sp/>channel<sp/>15.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_GRTC_SYSCOUNTER_CC_COUNT<sp/>&gt;<sp/>16</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/>NRF_GRTC_INT_COMPARE16_MASK<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>GRTC_INTENSET0_COMPARE16_Msk,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>GRTC<sp/>interrupt<sp/>from<sp/>compare<sp/>event<sp/>on<sp/>channel<sp/>16.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/>NRF_GRTC_INT_COMPARE17_MASK<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>GRTC_INTENSET0_COMPARE17_Msk,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>GRTC<sp/>interrupt<sp/>from<sp/>compare<sp/>event<sp/>on<sp/>channel<sp/>17.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_GRTC_SYSCOUNTER_CC_COUNT<sp/>&gt;<sp/>18</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/>NRF_GRTC_INT_COMPARE18_MASK<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>GRTC_INTENSET0_COMPARE18_Msk,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>GRTC<sp/>interrupt<sp/>from<sp/>compare<sp/>event<sp/>on<sp/>channel<sp/>18.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_GRTC_SYSCOUNTER_CC_COUNT<sp/>&gt;<sp/>19</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/>NRF_GRTC_INT_COMPARE19_MASK<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>GRTC_INTENSET0_COMPARE19_Msk,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>GRTC<sp/>interrupt<sp/>from<sp/>compare<sp/>event<sp/>on<sp/>channel<sp/>19.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_GRTC_SYSCOUNTER_CC_COUNT<sp/>&gt;<sp/>20</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/>NRF_GRTC_INT_COMPARE20_MASK<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>GRTC_INTENSET0_COMPARE20_Msk,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>GRTC<sp/>interrupt<sp/>from<sp/>compare<sp/>event<sp/>on<sp/>channel<sp/>20.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/>NRF_GRTC_INT_COMPARE21_MASK<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>GRTC_INTENSET0_COMPARE21_Msk,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>GRTC<sp/>interrupt<sp/>from<sp/>compare<sp/>event<sp/>on<sp/>channel<sp/>21.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/>NRF_GRTC_INT_COMPARE22_MASK<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>GRTC_INTENSET0_COMPARE22_Msk,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>GRTC<sp/>interrupt<sp/>from<sp/>compare<sp/>event<sp/>on<sp/>channel<sp/>22.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/>NRF_GRTC_INT_COMPARE23_MASK<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>GRTC_INTENSET0_COMPARE23_Msk,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>GRTC<sp/>interrupt<sp/>from<sp/>compare<sp/>event<sp/>on<sp/>channel<sp/>23.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_GRTC_HAS_RTCOUNTER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__grtc__hal_1ggad1e632ee175d9af435e2246cd7927822a0cbd1a997373bce120647b54737c1252" kindref="member">NRF_GRTC_INT_RTCOMPARE_MASK</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>GRTC_INTENSET0_RTCOMPARE_Msk,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>GRTC<sp/>interrupt<sp/>from<sp/>RTCOUNTER<sp/>compare<sp/>event.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__grtc__hal_1ggad1e632ee175d9af435e2246cd7927822a0cd9a94953494b1e019ef6aa147228b6" kindref="member">NRF_GRTC_INT_RTCOMPARESYNC_MASK</ref><sp/><sp/><sp/>=<sp/>GRTC_INTENSET0_RTCOMPARESYNC_Msk,<sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>GRTC<sp/>interrupt<sp/>from<sp/>RTCOUNTER<sp/>synchronized<sp/>compare<sp/>event.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__grtc__hal_1ggad1e632ee175d9af435e2246cd7927822a3e345bce4b3041e7c6a107a414836416" kindref="member">NRF_GRTC_INT_SYSCOUNTERVALID_MASK</ref><sp/>=<sp/>GRTC_INTENSET0_SYSCOUNTERVALID_Msk,<sp/></highlight><highlight class="comment">/**&lt;<sp/>GRTC<sp/>interrupt<sp/>from<sp/>SYSCOUNTER<sp/>valid<sp/>event.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal">}<sp/><ref refid="group__nrf__grtc__hal_1gad1e632ee175d9af435e2246cd7927822" kindref="member">nrf_grtc_int_mask_t</ref>;</highlight></codeline>
<codeline lineno="360"><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_GRTC_HAS_CLKOUT</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="362"><highlight class="comment">/**<sp/>@brief<sp/>Configuration<sp/>of<sp/>clock<sp/>output.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal">{</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__grtc__hal_1ggacdc216d006ac43c34a154cffdf0ca69aa9cfdf0a20c98491c4d10fb8d4fa71eab" kindref="member">NRF_GRTC_CLKOUT_32K</ref><sp/><sp/>=<sp/>GRTC_CLKOUT_CLKOUT32K_Msk,<sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Enable<sp/>32K<sp/>clock<sp/>output<sp/>on<sp/>pin.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__grtc__hal_1ggacdc216d006ac43c34a154cffdf0ca69aa8c567e4397959b7eb25b9f618d1f0bd8" kindref="member">NRF_GRTC_CLKOUT_FAST</ref><sp/>=<sp/>GRTC_CLKOUT_CLKOUTFAST_Msk,<sp/></highlight><highlight class="comment">/**&lt;<sp/>Enable<sp/>fast<sp/>clock<sp/>output<sp/>on<sp/>pin.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal">}<sp/><ref refid="group__nrf__grtc__hal_1gacdc216d006ac43c34a154cffdf0ca69a" kindref="member">nrf_grtc_clkout_t</ref>;</highlight></codeline>
<codeline lineno="368"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_GRTC_HAS_CLKSEL</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="371"><highlight class="comment">/**<sp/>@brief<sp/>Configuration<sp/>of<sp/>the<sp/>GRTC<sp/>clock<sp/>source<sp/>selection.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal">{</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__grtc__hal_1ggae439fae87a8f39984fe088a02960a7aeaa368a3cd935c774cad02682aea3d98ac" kindref="member">NRF_GRTC_CLKSEL_LFXO</ref><sp/><sp/>=<sp/>GRTC_CLKCFG_CLKSEL_LFXO,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LFXO<sp/>oscillator<sp/>as<sp/>the<sp/>clock<sp/>source.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__grtc__hal_1ggae439fae87a8f39984fe088a02960a7aea0c8fe6bcb92cb8d2f64521082d556676" kindref="member">NRF_GRTC_CLKSEL_LFCLK</ref><sp/>=<sp/>GRTC_CLKCFG_CLKSEL_SystemLFCLK,<sp/></highlight><highlight class="comment">/**&lt;<sp/>System<sp/>LFCLK<sp/>as<sp/>the<sp/>clock<sp/>source.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal">}<sp/><ref refid="group__nrf__grtc__hal_1gae439fae87a8f39984fe088a02960a7ae" kindref="member">nrf_grtc_clksel_t</ref>;</highlight></codeline>
<codeline lineno="377"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="379"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="380"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>the<sp/>compare<sp/>value<sp/>of<sp/>channel<sp/>for<sp/>the<sp/>SYSCOUNTER.</highlight></codeline>
<codeline lineno="381"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="382"><highlight class="comment"><sp/>*<sp/>@note<sp/>The<sp/>corresponding<sp/>event<sp/>is<sp/>automatically<sp/>disabled<sp/>by<sp/>hardware<sp/>during<sp/>the<sp/>operation.</highlight></codeline>
<codeline lineno="383"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="384"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/><sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="385"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>cc_channel<sp/>The<sp/>specified<sp/>capture/compare<sp/>channel.</highlight></codeline>
<codeline lineno="386"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>cc_value<sp/><sp/><sp/>Compare<sp/>value<sp/>to<sp/>be<sp/>set<sp/>in<sp/>1<sp/>MHz<sp/>units.</highlight></codeline>
<codeline lineno="387"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__grtc__hal_1gaafb4da6fab8ddad328e0f8689e1e2ff5" kindref="member">nrf_grtc_sys_counter_cc_set</ref>(NRF_GRTC_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cc_channel,</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cc_value);</highlight></codeline>
<codeline lineno="391"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="392"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="393"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>the<sp/>capture/compare<sp/>value<sp/>of<sp/>channel<sp/>for<sp/>the<sp/>SYSCOUNTER.</highlight></codeline>
<codeline lineno="394"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="395"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/><sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="396"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>cc_channel<sp/>The<sp/>specified<sp/>capture/compare<sp/>channel.</highlight></codeline>
<codeline lineno="397"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="398"><highlight class="comment"><sp/>*<sp/>@return<sp/>Value<sp/>from<sp/>the<sp/>specified<sp/>capture/compare<sp/>register<sp/>in<sp/>1MHz<sp/>units.</highlight></codeline>
<codeline lineno="399"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint64_t<sp/><ref refid="group__nrf__grtc__hal_1gaa250ccd626fce4e373842b6df5e97096" kindref="member">nrf_grtc_sys_counter_cc_get</ref>(NRF_GRTC_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cc_channel);</highlight></codeline>
<codeline lineno="402"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="403"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="404"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>the<sp/>value<sp/>to<sp/>be<sp/>added<sp/>to<sp/>capture/compare<sp/>register<sp/>for</highlight></codeline>
<codeline lineno="405"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>SYSCOUNTER.</highlight></codeline>
<codeline lineno="406"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="407"><highlight class="comment"><sp/>*<sp/>@note<sp/>There<sp/>are<sp/>two<sp/>available<sp/>configurations<sp/>of<sp/>adding<sp/>operation:</highlight></codeline>
<codeline lineno="408"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>When<sp/>@p<sp/>reference<sp/>value<sp/>equals<sp/>@ref<sp/>NRF_GRTC_CC_ADD_REFERENCE_SYSCOUNTER<sp/>then</highlight></codeline>
<codeline lineno="409"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>final<sp/>value<sp/>of<sp/>capture/compare<sp/>register<sp/>is<sp/>a<sp/>sum<sp/>of<sp/>SYSCOUNTER<sp/>current<sp/>value</highlight></codeline>
<codeline lineno="410"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>and<sp/>@p<sp/>value.</highlight></codeline>
<codeline lineno="411"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>When<sp/>@p<sp/>reference<sp/>value<sp/>equals<sp/>@ref<sp/>NRF_GRTC_CC_ADD_REFERENCE_CC<sp/>then</highlight></codeline>
<codeline lineno="412"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>final<sp/>value<sp/>of<sp/>capture/compare<sp/>register<sp/>is<sp/>a<sp/>sum<sp/>of<sp/>current<sp/>capture/compare</highlight></codeline>
<codeline lineno="413"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>value<sp/>and<sp/>@p<sp/>value.</highlight></codeline>
<codeline lineno="414"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>If<sp/>the<sp/>capture/compare<sp/>register<sp/>overflows<sp/>after<sp/>this<sp/>write,<sp/>then<sp/>the<sp/>corresponding<sp/>event</highlight></codeline>
<codeline lineno="415"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>is<sp/>generated<sp/>immediately.</highlight></codeline>
<codeline lineno="416"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="417"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/><sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="418"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>cc_channel<sp/>The<sp/>specified<sp/>capture/compare<sp/>channel.</highlight></codeline>
<codeline lineno="419"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>value<sp/><sp/><sp/><sp/><sp/><sp/>Value<sp/>to<sp/>be<sp/>added<sp/>in<sp/>1<sp/>MHz<sp/>units.</highlight></codeline>
<codeline lineno="420"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>reference<sp/><sp/>Configuration<sp/>of<sp/>adding<sp/>mode.</highlight></codeline>
<codeline lineno="421"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__grtc__hal_1gae7bc99a50731a75e6b76e8d058772bb7" kindref="member">nrf_grtc_sys_counter_cc_add_set</ref>(NRF_GRTC_Type<sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cc_channel,</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value,</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__grtc__hal_1ga4e34fb922643e9f448f248b410e2e8e4" kindref="member">nrf_grtc_cc_add_reference_t</ref><sp/>reference);</highlight></codeline>
<codeline lineno="426"><highlight class="normal"></highlight></codeline>
<codeline lineno="427"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_GRTC_HAS_RTCOUNTER</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="428"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="429"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>a<sp/>compare<sp/>value<sp/>for<sp/>the<sp/>RTCOUNTER.</highlight></codeline>
<codeline lineno="430"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="431"><highlight class="comment"><sp/>*<sp/>@note<sp/>The<sp/>internal<sp/>synchronization<sp/>mechanism<sp/>ensures<sp/>that<sp/>the<sp/>desired<sp/>value<sp/>will<sp/>be<sp/>properly</highlight></codeline>
<codeline lineno="432"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>latched<sp/>by<sp/>the<sp/>GRTC.<sp/>However<sp/>when<sp/>@p<sp/>sync<sp/>parameter<sp/>is<sp/>true<sp/>then<sp/>the<sp/>process<sp/>of<sp/>capturing</highlight></codeline>
<codeline lineno="433"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>value<sp/>lasts<sp/>up<sp/>to<sp/>two<sp/>32<sp/>kHz<sp/>cycles.</highlight></codeline>
<codeline lineno="434"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>If<sp/>the<sp/>@p<sp/>sync<sp/>parameter<sp/>is<sp/>false<sp/>then<sp/>the<sp/>capturing<sp/>the<sp/>value<sp/>will<sp/>occur<sp/>on<sp/>the</highlight></codeline>
<codeline lineno="435"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>following<sp/>rising<sp/>edge<sp/>of<sp/>32<sp/>kHz<sp/>clock.<sp/>In<sp/>this<sp/>case<sp/>it<sp/>is<sp/>user&apos;s<sp/>responsibility</highlight></codeline>
<codeline lineno="436"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>to<sp/>execute<sp/>the<sp/>function<sp/>between<sp/>the<sp/>32<sp/>kHz<sp/>rising<sp/>edges.</highlight></codeline>
<codeline lineno="437"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="438"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="439"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>cc_value<sp/>Compare<sp/>value<sp/>to<sp/>be<sp/>set<sp/>in<sp/>32<sp/>kHz<sp/>units.</highlight></codeline>
<codeline lineno="440"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>sync<sp/><sp/><sp/><sp/><sp/>True<sp/>if<sp/>the<sp/>internal<sp/>synchronization<sp/>mechanism<sp/>shall<sp/>be<sp/>used,</highlight></codeline>
<codeline lineno="441"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>false<sp/>otherwise.</highlight></codeline>
<codeline lineno="442"><highlight class="comment"><sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="443"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__grtc__hal_1ga45a090610eefa2264e4f12602b7f9d9b" kindref="member">nrf_grtc_rt_counter_cc_set</ref>(NRF_GRTC_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cc_value,</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sync);</highlight></codeline>
<codeline lineno="446"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="447"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="448"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>returning<sp/>the<sp/>compare<sp/>value<sp/>for<sp/>the<sp/>RTCOUNTER.</highlight></codeline>
<codeline lineno="449"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="450"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="451"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="452"><highlight class="comment"><sp/>*<sp/>@return<sp/>Value<sp/>from<sp/>the<sp/>capture/compare<sp/>register<sp/>in<sp/>32<sp/>kHz<sp/>units.</highlight></codeline>
<codeline lineno="453"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="454"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint64_t<sp/><ref refid="group__nrf__grtc__hal_1ga2f5e743ecea72ace3f5fb81816b56d94" kindref="member">nrf_grtc_rt_counter_cc_get</ref>(NRF_GRTC_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="455"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRF_GRTC_HAS_RTCOUNTER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="456"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="457"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="458"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>enabling<sp/>specified<sp/>interrupts.</highlight></codeline>
<codeline lineno="459"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="460"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="461"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>mask<sp/><sp/>Mask<sp/>of<sp/>interrupts<sp/>to<sp/>be<sp/>enabled.</highlight></codeline>
<codeline lineno="462"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Use<sp/>@ref<sp/>nrf_grtc_int_mask_t<sp/>values<sp/>for<sp/>bit<sp/>masking.</highlight></codeline>
<codeline lineno="463"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="464"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__grtc__hal_1gabc8bebf2390d859f55d96ae141499c11" kindref="member">nrf_grtc_int_enable</ref>(NRF_GRTC_Type<sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>mask);</highlight></codeline>
<codeline lineno="465"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="466"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="467"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>disabling<sp/>specified<sp/>interrupts.</highlight></codeline>
<codeline lineno="468"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="469"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="470"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>mask<sp/><sp/>Mask<sp/>of<sp/>interrupts<sp/>to<sp/>be<sp/>disabled.</highlight></codeline>
<codeline lineno="471"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Use<sp/>@ref<sp/>nrf_grtc_int_mask_t<sp/>values<sp/>for<sp/>bit<sp/>masking.</highlight></codeline>
<codeline lineno="472"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="473"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__grtc__hal_1ga8b77b156aaa2a75e9faf07d52119342e" kindref="member">nrf_grtc_int_disable</ref>(NRF_GRTC_Type<sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>mask);</highlight></codeline>
<codeline lineno="474"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="475"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="476"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>checking<sp/>if<sp/>the<sp/>specified<sp/>interrupts<sp/>are<sp/>enabled.</highlight></codeline>
<codeline lineno="477"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="478"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="479"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>mask<sp/><sp/>Mask<sp/>of<sp/>interrupts<sp/>to<sp/>be<sp/>checked.</highlight></codeline>
<codeline lineno="480"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Use<sp/>@ref<sp/>nrf_grtc_int_mask_t<sp/>values<sp/>for<sp/>bit<sp/>masking.</highlight></codeline>
<codeline lineno="481"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="482"><highlight class="comment"><sp/>*<sp/>@return<sp/>Mask<sp/>of<sp/>enabled<sp/>interrupts.</highlight></codeline>
<codeline lineno="483"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="484"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__grtc__hal_1gada5181d48f4f1d68d0f768efedf71c5c" kindref="member">nrf_grtc_int_enable_check</ref>(NRF_GRTC_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>mask);</highlight></codeline>
<codeline lineno="485"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="486"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="487"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>retrieving<sp/>the<sp/>state<sp/>of<sp/>pending<sp/>interrupts.</highlight></codeline>
<codeline lineno="488"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="489"><highlight class="comment"><sp/>*<sp/>@note<sp/>States<sp/>of<sp/>pending<sp/>interrupt<sp/>are<sp/>saved<sp/>as<sp/>a<sp/>bitmask.</highlight></codeline>
<codeline lineno="490"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>One<sp/>set<sp/>at<sp/>particular<sp/>position<sp/>means<sp/>that<sp/>interrupt<sp/>for<sp/>event<sp/>is<sp/>pending.</highlight></codeline>
<codeline lineno="491"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="492"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="493"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="494"><highlight class="comment"><sp/>*<sp/>@return<sp/>Bitmask<sp/>with<sp/>information<sp/>about<sp/>pending<sp/>interrupts.</highlight></codeline>
<codeline lineno="495"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Use<sp/>@ref<sp/>nrf_grtc_int_mask_t<sp/>values<sp/>for<sp/>bit<sp/>masking.</highlight></codeline>
<codeline lineno="496"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="497"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__grtc__hal_1gafd34374e937c50084e2b9969913a591c" kindref="member">nrf_grtc_int_pending_get</ref>(NRF_GRTC_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="498"><highlight class="normal"></highlight></codeline>
<codeline lineno="499"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_GRTC_HAS_PWM</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="500"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="501"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>enabling<sp/>events.</highlight></codeline>
<codeline lineno="502"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="503"><highlight class="comment"><sp/>*<sp/>@note<sp/>Only<sp/>specific<sp/>events<sp/>can<sp/>be<sp/>individually<sp/>enabled<sp/>or<sp/>disabled.</highlight></codeline>
<codeline lineno="504"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="505"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="506"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>mask<sp/><sp/>Mask<sp/>of<sp/>event<sp/>flags<sp/>to<sp/>be<sp/>enabled.</highlight></codeline>
<codeline lineno="507"><highlight class="comment"><sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="508"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__grtc__hal_1ga9a1958c032dc53090c3dd059bab22f06" kindref="member">nrf_grtc_event_enable</ref>(NRF_GRTC_Type<sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>mask);</highlight></codeline>
<codeline lineno="509"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="510"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="511"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>disabling<sp/>events.</highlight></codeline>
<codeline lineno="512"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="513"><highlight class="comment"><sp/>*<sp/>@note<sp/>Only<sp/>specific<sp/>events<sp/>can<sp/>be<sp/>individually<sp/>enabled<sp/>or<sp/>disabled.</highlight></codeline>
<codeline lineno="514"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="515"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="516"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>mask<sp/><sp/>Mask<sp/>of<sp/>event<sp/>flags<sp/>to<sp/>be<sp/>disabled.</highlight></codeline>
<codeline lineno="517"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="518"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__grtc__hal_1gae9f734e1d6265aeb32c7ce376e6c58ac" kindref="member">nrf_grtc_event_disable</ref>(NRF_GRTC_Type<sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>mask);</highlight></codeline>
<codeline lineno="519"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRF_GRTC_HAS_PWM</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="520"><highlight class="normal"></highlight></codeline>
<codeline lineno="521"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_GRTC_HAS_EXTENDED</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="522"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="523"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>enabling<sp/>the<sp/>specified<sp/>shortcuts.</highlight></codeline>
<codeline lineno="524"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="525"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="526"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>mask<sp/><sp/>Bitmask<sp/>of<sp/>shortcuts<sp/>to<sp/>be<sp/>enabled.</highlight></codeline>
<codeline lineno="527"><highlight class="comment"><sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="528"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__grtc__hal_1gac5690d49bef4f831062094fc728bda33" kindref="member">nrf_grtc_shorts_enable</ref>(NRF_GRTC_Type<sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>mask);</highlight></codeline>
<codeline lineno="529"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="530"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="531"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>disabling<sp/>the<sp/>specified<sp/>shortcuts.</highlight></codeline>
<codeline lineno="532"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="533"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="534"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>mask<sp/><sp/>Bitmask<sp/>of<sp/>shortcuts<sp/>to<sp/>be<sp/>disabled.</highlight></codeline>
<codeline lineno="535"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="536"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__grtc__hal_1ga03a9d5d7e98462b9c3cdd8bfabacd806" kindref="member">nrf_grtc_shorts_disable</ref>(NRF_GRTC_Type<sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>mask);</highlight></codeline>
<codeline lineno="537"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="538"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="539"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>the<sp/>specified<sp/>shortcuts.</highlight></codeline>
<codeline lineno="540"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="541"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="542"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>mask<sp/><sp/>Bitmask<sp/>of<sp/>shortcuts<sp/>to<sp/>be<sp/>set.</highlight></codeline>
<codeline lineno="543"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="544"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__grtc__hal_1gaf7747e1873e5594b2d2e4df6394f9ab9" kindref="member">nrf_grtc_shorts_set</ref>(NRF_GRTC_Type<sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>mask);</highlight></codeline>
<codeline lineno="545"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRF_GRTC_HAS_EXTENDED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="546"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="547"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="548"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>the<sp/>subscribe<sp/>configuration<sp/>for<sp/>a<sp/>given</highlight></codeline>
<codeline lineno="549"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GRTC<sp/>task.</highlight></codeline>
<codeline lineno="550"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="551"><highlight class="comment"><sp/>*<sp/>@note<sp/>Not<sp/>every<sp/>task<sp/>has<sp/>its<sp/>corresponding<sp/>subscribe<sp/>register.</highlight></codeline>
<codeline lineno="552"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>Refer<sp/>to<sp/>the<sp/>Product<sp/>Specification<sp/>for<sp/>more<sp/>information.</highlight></codeline>
<codeline lineno="553"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="554"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="555"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>task<sp/><sp/><sp/><sp/>Task<sp/>for<sp/>which<sp/>to<sp/>set<sp/>the<sp/>configuration.</highlight></codeline>
<codeline lineno="556"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>channel<sp/>Channel<sp/>through<sp/>which<sp/>to<sp/>subscribe<sp/>events.</highlight></codeline>
<codeline lineno="557"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="558"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__grtc__hal_1ga19e3d64a1f7fa2c2e524b63910135ef8" kindref="member">nrf_grtc_subscribe_set</ref>(NRF_GRTC_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__grtc__hal_1ga3ead45038f169b586ca21cd6ef8acde9" kindref="member">nrf_grtc_task_t</ref><sp/>task,</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>channel);</highlight></codeline>
<codeline lineno="561"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="562"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="563"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>clearing<sp/>the<sp/>subscribe<sp/>configuration<sp/>for<sp/>a<sp/>given</highlight></codeline>
<codeline lineno="564"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GRTC<sp/>task.</highlight></codeline>
<codeline lineno="565"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="566"><highlight class="comment"><sp/>*<sp/>@note<sp/>Not<sp/>every<sp/>task<sp/>has<sp/>its<sp/>corresponding<sp/>subscribe<sp/>register.</highlight></codeline>
<codeline lineno="567"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>Refer<sp/>to<sp/>the<sp/>Product<sp/>Specification<sp/>for<sp/>more<sp/>information.</highlight></codeline>
<codeline lineno="568"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="569"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="570"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>task<sp/><sp/>Task<sp/>for<sp/>which<sp/>to<sp/>clear<sp/>the<sp/>configuration.</highlight></codeline>
<codeline lineno="571"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="572"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__grtc__hal_1gae8dbd19ec8fb112e7254ffc0a32aba40" kindref="member">nrf_grtc_subscribe_clear</ref>(NRF_GRTC_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__grtc__hal_1ga3ead45038f169b586ca21cd6ef8acde9" kindref="member">nrf_grtc_task_t</ref><sp/>task);</highlight></codeline>
<codeline lineno="574"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="575"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="576"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>the<sp/>publish<sp/>configuration<sp/>for<sp/>a<sp/>given</highlight></codeline>
<codeline lineno="577"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GRTC<sp/>event.</highlight></codeline>
<codeline lineno="578"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="579"><highlight class="comment"><sp/>*<sp/>@note<sp/>Not<sp/>every<sp/>event<sp/>has<sp/>its<sp/>corresponding<sp/>publish<sp/>register.</highlight></codeline>
<codeline lineno="580"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>Refer<sp/>to<sp/>the<sp/>Product<sp/>Specification<sp/>for<sp/>more<sp/>information.</highlight></codeline>
<codeline lineno="581"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="582"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="583"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>event<sp/><sp/><sp/>Event<sp/>for<sp/>which<sp/>to<sp/>set<sp/>the<sp/>configuration.</highlight></codeline>
<codeline lineno="584"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>channel<sp/>Channel<sp/>through<sp/>which<sp/>to<sp/>publish<sp/>the<sp/>event.</highlight></codeline>
<codeline lineno="585"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="586"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__grtc__hal_1ga28ca8bcda6222fc60e172767c67d7469" kindref="member">nrf_grtc_publish_set</ref>(NRF_GRTC_Type<sp/>*<sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__grtc__hal_1ga7ae05a37545fa5a2c94e90d048bb2b65" kindref="member">nrf_grtc_event_t</ref><sp/>event,</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>channel);</highlight></codeline>
<codeline lineno="589"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="590"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="591"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>clearing<sp/>the<sp/>publish<sp/>configuration<sp/>for<sp/>a<sp/>given</highlight></codeline>
<codeline lineno="592"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GRTC<sp/>event.</highlight></codeline>
<codeline lineno="593"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="594"><highlight class="comment"><sp/>*<sp/>@note<sp/>Not<sp/>every<sp/>event<sp/>has<sp/>its<sp/>corresponding<sp/>publish<sp/>register.</highlight></codeline>
<codeline lineno="595"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>Refer<sp/>to<sp/>the<sp/>Product<sp/>Specification<sp/>for<sp/>more<sp/>information.</highlight></codeline>
<codeline lineno="596"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="597"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="598"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>event<sp/>Event<sp/>for<sp/>which<sp/>to<sp/>clear<sp/>the<sp/>configuration.</highlight></codeline>
<codeline lineno="599"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="600"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__grtc__hal_1ga1dde9445416963417a00e2b678de7121" kindref="member">nrf_grtc_publish_clear</ref>(NRF_GRTC_Type<sp/>*<sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__grtc__hal_1ga7ae05a37545fa5a2c94e90d048bb2b65" kindref="member">nrf_grtc_event_t</ref><sp/>event);</highlight></codeline>
<codeline lineno="602"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="603"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="604"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>retrieving<sp/>the<sp/>state<sp/>of<sp/>the<sp/>GRTC<sp/>event.</highlight></codeline>
<codeline lineno="605"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="606"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="607"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>event<sp/>Event<sp/>to<sp/>be<sp/>checked.</highlight></codeline>
<codeline lineno="608"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="609"><highlight class="comment"><sp/>*<sp/>@retval<sp/>true<sp/><sp/>The<sp/>event<sp/>has<sp/>been<sp/>generated.</highlight></codeline>
<codeline lineno="610"><highlight class="comment"><sp/>*<sp/>@retval<sp/>false<sp/>The<sp/>event<sp/>has<sp/>not<sp/>been<sp/>generated.</highlight></codeline>
<codeline lineno="611"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="612"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrf__grtc__hal_1ga8c4cf763128d803a8e653669afac8918" kindref="member">nrf_grtc_event_check</ref>(NRF_GRTC_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,<sp/><ref refid="group__nrf__grtc__hal_1ga7ae05a37545fa5a2c94e90d048bb2b65" kindref="member">nrf_grtc_event_t</ref><sp/>event);</highlight></codeline>
<codeline lineno="613"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="614"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="615"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>clearing<sp/>an<sp/>event.</highlight></codeline>
<codeline lineno="616"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="617"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="618"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>event<sp/>Event<sp/>to<sp/>be<sp/>cleared.</highlight></codeline>
<codeline lineno="619"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="620"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__grtc__hal_1gaa9967aaf0b8cf60576ac6625e2a56759" kindref="member">nrf_grtc_event_clear</ref>(NRF_GRTC_Type<sp/>*<sp/>p_reg,<sp/><ref refid="group__nrf__grtc__hal_1ga7ae05a37545fa5a2c94e90d048bb2b65" kindref="member">nrf_grtc_event_t</ref><sp/>event);</highlight></codeline>
<codeline lineno="621"><highlight class="normal"></highlight></codeline>
<codeline lineno="622"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_GRTC_HAS_RTCOUNTER</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="623"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="624"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>returning<sp/>the<sp/>lower<sp/>32-bits<sp/>of<sp/>RTCOUNTER<sp/>value.</highlight></codeline>
<codeline lineno="625"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="626"><highlight class="comment"><sp/>*<sp/>@note<sp/>The<sp/>whole<sp/>RTCOUNTER<sp/>value<sp/>is<sp/>latched<sp/>when<sp/>@ref<sp/>nrf_grtc_rt_counter_low_get<sp/>function</highlight></codeline>
<codeline lineno="627"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>is<sp/>executed.<sp/>Thus<sp/>@ref<sp/>nrf_grtc_rt_counter_low_get<sp/>must<sp/>be<sp/>executed<sp/>before<sp/>calling</highlight></codeline>
<codeline lineno="628"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>@ref<sp/>nrf_grtc_rt_counter_high_get.</highlight></codeline>
<codeline lineno="629"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="630"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="631"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="632"><highlight class="comment"><sp/>*<sp/>@return<sp/>Lower<sp/>part<sp/>of<sp/>RTCOUNTER<sp/>value.</highlight></codeline>
<codeline lineno="633"><highlight class="comment"><sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="634"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__grtc__hal_1gae364666c46ac47cc496a071195194ae0" kindref="member">nrf_grtc_rt_counter_low_get</ref>(NRF_GRTC_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="635"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="636"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="637"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>returning<sp/>the<sp/>higher<sp/>32-bits<sp/>of<sp/>RTCOUNTER<sp/>value.</highlight></codeline>
<codeline lineno="638"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="639"><highlight class="comment"><sp/>*<sp/>@note<sp/>The<sp/>whole<sp/>RTCOUNTER<sp/>value<sp/>is<sp/>latched<sp/>when<sp/>@ref<sp/>nrf_grtc_rt_counter_low_get<sp/>function</highlight></codeline>
<codeline lineno="640"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>is<sp/>executed.<sp/>Thus<sp/>@ref<sp/>nrf_grtc_rt_counter_low_get<sp/>must<sp/>be<sp/>executed<sp/>before<sp/>calling</highlight></codeline>
<codeline lineno="641"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>@ref<sp/>nrf_grtc_rt_counter_high_get.</highlight></codeline>
<codeline lineno="642"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="643"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="644"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="645"><highlight class="comment"><sp/>*<sp/>@return<sp/>Higher<sp/>part<sp/>of<sp/>RTCOUNTER<sp/>value.</highlight></codeline>
<codeline lineno="646"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="647"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__grtc__hal_1ga2aaf34328a3c13cb8912fa89f51354c8" kindref="member">nrf_grtc_rt_counter_high_get</ref>(NRF_GRTC_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="648"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRF_GRTC_HAS_RTCOUNTER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="649"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="650"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="651"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>returning<sp/>the<sp/>lower<sp/>32-bits<sp/>of<sp/>SYSCOUNTER<sp/>value.</highlight></codeline>
<codeline lineno="652"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="653"><highlight class="comment"><sp/>*<sp/>@note<sp/>@ref<sp/>nrf_grtc_sys_counter_low_get<sp/>must<sp/>be<sp/>executed<sp/>before<sp/>calling</highlight></codeline>
<codeline lineno="654"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>@ref<sp/>nrf_grtc_sys_counter_high_get.<sp/>In<sp/>addition,<sp/>after<sp/>this,</highlight></codeline>
<codeline lineno="655"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>@ref<sp/>nrf_grtc_sys_counter_overflow_check<sp/>should<sp/>be<sp/>called.<sp/>If<sp/>it<sp/>retuns<sp/>true,</highlight></codeline>
<codeline lineno="656"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>whole<sp/>procedure<sp/>should<sp/>be<sp/>repeated.</highlight></codeline>
<codeline lineno="657"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="658"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="659"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="660"><highlight class="comment"><sp/>*<sp/>@return<sp/>Lower<sp/>part<sp/>of<sp/>SYSCOUNTER<sp/>value.</highlight></codeline>
<codeline lineno="661"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="662"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__grtc__hal_1ga0b0c5b513db954011586e86547ed1ce9" kindref="member">nrf_grtc_sys_counter_low_get</ref>(NRF_GRTC_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="663"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="664"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="665"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>returning<sp/>the<sp/>higher<sp/>32-bits<sp/>of<sp/>SYSCOUNTER<sp/>value.</highlight></codeline>
<codeline lineno="666"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="667"><highlight class="comment"><sp/>*<sp/>@note<sp/>@ref<sp/>nrf_grtc_sys_counter_low_get<sp/>must<sp/>be<sp/>executed<sp/>before<sp/>calling</highlight></codeline>
<codeline lineno="668"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>@ref<sp/>nrf_grtc_sys_counter_high_get.<sp/>In<sp/>addition,<sp/>after<sp/>this,</highlight></codeline>
<codeline lineno="669"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>@ref<sp/>nrf_grtc_sys_counter_overflow_check<sp/>should<sp/>be<sp/>called.<sp/>If<sp/>it<sp/>retuns<sp/>true,</highlight></codeline>
<codeline lineno="670"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>whole<sp/>procedure<sp/>should<sp/>be<sp/>repeated.</highlight></codeline>
<codeline lineno="671"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="672"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="673"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="674"><highlight class="comment"><sp/>*<sp/>@return<sp/>Higher<sp/>part<sp/>SYSCOUNTER<sp/>value.</highlight></codeline>
<codeline lineno="675"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="676"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__grtc__hal_1ga80b9dd38536653a93d61443bc6e0d2a0" kindref="member">nrf_grtc_sys_counter_high_get</ref>(NRF_GRTC_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="677"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="678"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="679"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>returning<sp/>the<sp/>64-bit<sp/>SYSCOUNTER<sp/>value.</highlight></codeline>
<codeline lineno="680"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="681"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="682"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="683"><highlight class="comment"><sp/>*<sp/>@return<sp/>SYSCOUNTER<sp/>value.</highlight></codeline>
<codeline lineno="684"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="685"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint64_t<sp/><ref refid="group__nrf__grtc__hal_1gac24bd3d8ecf7ddab6443e854ac0eadb7" kindref="member">nrf_grtc_sys_counter_get</ref>(NRF_GRTC_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="686"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="687"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="688"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>checking<sp/>whether<sp/>the<sp/>lower<sp/>32-bits<sp/>of<sp/>SYSCOUNTER<sp/>overflowed<sp/>after</highlight></codeline>
<codeline lineno="689"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>last<sp/>execution<sp/>of<sp/>@ref<sp/>nrf_grtc_sys_counter_low_get.</highlight></codeline>
<codeline lineno="690"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="691"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="692"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="693"><highlight class="comment"><sp/>*<sp/>@retval<sp/>True<sp/>if<sp/>the<sp/>lower<sp/>32-bits<sp/>of<sp/>SYSCOUNTER<sp/>overflowed,<sp/>false<sp/>otherwise.</highlight></codeline>
<codeline lineno="694"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="695"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrf__grtc__hal_1ga9eab767581794e74e4ae08a70ea60c8b" kindref="member">nrf_grtc_sys_counter_overflow_check</ref>(NRF_GRTC_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="696"><highlight class="normal"></highlight></codeline>
<codeline lineno="697"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_GRTC_HAS_SYSCOUNTER_ARRAY</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="698"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="699"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>the<sp/>request<sp/>to<sp/>keep<sp/>the<sp/>specified<sp/>SYSCOUNTER<sp/>channel<sp/>active.</highlight></codeline>
<codeline lineno="700"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="701"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="702"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>enable<sp/>True<sp/>if<sp/>the<sp/>SYSCOUNTER<sp/>channel<sp/>is<sp/>to<sp/>be<sp/>kept<sp/>active,<sp/>false<sp/>otherwise.</highlight></codeline>
<codeline lineno="703"><highlight class="comment"><sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="704"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__grtc__hal_1ga5c1bce12a2b33339177c00b29bf8e332" kindref="member">nrf_grtc_sys_counter_active_set</ref>(NRF_GRTC_Type<sp/>*<sp/>p_reg,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>enable);</highlight></codeline>
<codeline lineno="705"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="706"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="707"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>checking<sp/>whether<sp/>the<sp/>specified<sp/>SYSCOUNTER<sp/>channel<sp/>is<sp/>requested<sp/>to<sp/>remain<sp/>active.</highlight></codeline>
<codeline lineno="708"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="709"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="710"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="711"><highlight class="comment"><sp/>*<sp/>@retval<sp/>True<sp/>if<sp/>SYSCOUNTER<sp/>channel<sp/>is<sp/>requested<sp/>to<sp/>remain<sp/>active,<sp/>false<sp/>otherwise.</highlight></codeline>
<codeline lineno="712"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="713"><highlight class="normal">NRF_STATIC_INLINE</highlight></codeline>
<codeline lineno="714"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrf__grtc__hal_1gaf2aab3b971214da6438ece86ec435146" kindref="member">nrf_grtc_sys_counter_active_check</ref>(NRF_GRTC_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="715"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRF_GRTC_HAS_SYSCOUNTER_ARRAY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="716"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="717"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="718"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>returning<sp/>the<sp/>address<sp/>of<sp/>an<sp/>event.</highlight></codeline>
<codeline lineno="719"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="720"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="721"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>event<sp/>Requested<sp/>event.</highlight></codeline>
<codeline lineno="722"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="723"><highlight class="comment"><sp/>*<sp/>@return<sp/>Address<sp/>of<sp/>the<sp/>requested<sp/>event<sp/>register.</highlight></codeline>
<codeline lineno="724"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="725"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__grtc__hal_1ga0ef4ff14ec092be3fb37ef38576514f0" kindref="member">nrf_grtc_event_address_get</ref>(NRF_GRTC_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__grtc__hal_1ga7ae05a37545fa5a2c94e90d048bb2b65" kindref="member">nrf_grtc_event_t</ref><sp/><sp/><sp/><sp/><sp/><sp/>event);</highlight></codeline>
<codeline lineno="727"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="728"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="729"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>returning<sp/>the<sp/>address<sp/>of<sp/>a<sp/>task.</highlight></codeline>
<codeline lineno="730"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="731"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="732"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>task<sp/><sp/>Requested<sp/>task.</highlight></codeline>
<codeline lineno="733"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="734"><highlight class="comment"><sp/>*<sp/>@return<sp/>Address<sp/>of<sp/>the<sp/>requested<sp/>task<sp/>register.</highlight></codeline>
<codeline lineno="735"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="736"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__grtc__hal_1ga60e00f5ace03a5c5b72fa45acda805d2" kindref="member">nrf_grtc_task_address_get</ref>(NRF_GRTC_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__grtc__hal_1ga3ead45038f169b586ca21cd6ef8acde9" kindref="member">nrf_grtc_task_t</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>task);</highlight></codeline>
<codeline lineno="738"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="739"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="740"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>starting<sp/>a<sp/>task.</highlight></codeline>
<codeline lineno="741"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="742"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="743"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>task<sp/><sp/>Requested<sp/>task.</highlight></codeline>
<codeline lineno="744"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="745"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__grtc__hal_1gaa52de35bb6ecb5ebc17c22e2d28a6480" kindref="member">nrf_grtc_task_trigger</ref>(NRF_GRTC_Type<sp/>*<sp/>p_reg,<sp/><ref refid="group__nrf__grtc__hal_1ga3ead45038f169b586ca21cd6ef8acde9" kindref="member">nrf_grtc_task_t</ref><sp/>task);</highlight></codeline>
<codeline lineno="746"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="747"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="748"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>the<sp/>1<sp/>MHz<sp/>SYSCOUNTER<sp/>timer<sp/>capture<sp/>task<sp/>associated<sp/>with<sp/>the</highlight></codeline>
<codeline lineno="749"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>specified<sp/>channel.</highlight></codeline>
<codeline lineno="750"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="751"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>cc_channel<sp/>Capture<sp/>channel.</highlight></codeline>
<codeline lineno="752"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="753"><highlight class="comment"><sp/>*<sp/>@return<sp/>Capture<sp/>task.</highlight></codeline>
<codeline lineno="754"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="755"><highlight class="normal">NRF_STATIC_INLINE<sp/><ref refid="group__nrf__grtc__hal_1ga3ead45038f169b586ca21cd6ef8acde9" kindref="member">nrf_grtc_task_t</ref><sp/><ref refid="group__nrf__grtc__hal_1gade023fd81fb28e313e10352daf01d9e3" kindref="member">nrf_grtc_sys_counter_capture_task_get</ref>(uint8_t<sp/>cc_channel);</highlight></codeline>
<codeline lineno="756"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="757"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="758"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>enabling<sp/>SYSCOUNTER<sp/>compare<sp/>event.</highlight></codeline>
<codeline lineno="759"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="760"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/><sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="761"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>cc_channel<sp/>Channel<sp/>number<sp/>of<sp/>compare<sp/>event<sp/>to<sp/>be<sp/>enabled.</highlight></codeline>
<codeline lineno="762"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="763"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__grtc__hal_1ga7d6f2b3291aaebfb0165d2487e3a03fd" kindref="member">nrf_grtc_sys_counter_compare_event_enable</ref>(NRF_GRTC_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cc_channel);</highlight></codeline>
<codeline lineno="765"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="766"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="767"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>disabling<sp/>SYSCOUNTER<sp/>compare<sp/>event.</highlight></codeline>
<codeline lineno="768"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="769"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/><sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="770"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>cc_channel<sp/>Channel<sp/>number<sp/>of<sp/>compare<sp/>event<sp/>to<sp/>be<sp/>disabled.</highlight></codeline>
<codeline lineno="771"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="772"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__grtc__hal_1gae04c6f373955979278eb18060ff3a4a8" kindref="member">nrf_grtc_sys_counter_compare_event_disable</ref>(NRF_GRTC_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cc_channel);</highlight></codeline>
<codeline lineno="774"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="775"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="776"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>the<sp/>SYSCOUNTER<sp/>compare<sp/>event<sp/>associated<sp/>with<sp/>the<sp/>specified</highlight></codeline>
<codeline lineno="777"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>compare<sp/>cc_channel.</highlight></codeline>
<codeline lineno="778"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="779"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>cc_channel<sp/>Compare<sp/>channel<sp/>number.</highlight></codeline>
<codeline lineno="780"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="781"><highlight class="comment"><sp/>*<sp/>@return<sp/>Requested<sp/>compare<sp/>event.</highlight></codeline>
<codeline lineno="782"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="783"><highlight class="normal">NRF_STATIC_INLINE<sp/><ref refid="group__nrf__grtc__hal_1ga7ae05a37545fa5a2c94e90d048bb2b65" kindref="member">nrf_grtc_event_t</ref><sp/><ref refid="group__nrf__grtc__hal_1ga32ea992e597b134f4b3d41a8c62f5879" kindref="member">nrf_grtc_sys_counter_compare_event_get</ref>(uint8_t<sp/>cc_channel);</highlight></codeline>
<codeline lineno="784"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="785"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="786"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>checking<sp/>whether<sp/>the<sp/>specified<sp/>capture/compare<sp/>channel<sp/>is<sp/>enabled.</highlight></codeline>
<codeline lineno="787"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="788"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/><sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="789"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>cc_channel<sp/>Channel<sp/>to<sp/>be<sp/>checked.</highlight></codeline>
<codeline lineno="790"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="791"><highlight class="comment"><sp/>*<sp/>@retval<sp/>true<sp/><sp/>Specified<sp/>channel<sp/>is<sp/>enabled.</highlight></codeline>
<codeline lineno="792"><highlight class="comment"><sp/>*<sp/>@retval<sp/>false<sp/>Specified<sp/>channel<sp/>is<sp/>disabled.</highlight></codeline>
<codeline lineno="793"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="794"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrf__grtc__hal_1ga7faf1283a0d67f2428ad6d8d6d03f53e" kindref="member">nrf_grtc_sys_counter_cc_enable_check</ref>(NRF_GRTC_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cc_channel);</highlight></codeline>
<codeline lineno="796"><highlight class="normal"></highlight></codeline>
<codeline lineno="797"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_GRTC_HAS_EXTENDED</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="798"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="799"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>the<sp/>SYSCOUNTER.</highlight></codeline>
<codeline lineno="800"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="801"><highlight class="comment"><sp/>*<sp/>@note<sp/>When<sp/>the<sp/>SYSCOUNTER<sp/>is<sp/>disabled<sp/>the<sp/>GRTC<sp/>uses<sp/>RTCOUNTER<sp/>by<sp/>default.</highlight></codeline>
<codeline lineno="802"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="803"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="804"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>enable<sp/>True<sp/>if<sp/>SYSCOUNTER<sp/>is<sp/>to<sp/>be<sp/>enabled,<sp/>false<sp/>otherwise.</highlight></codeline>
<codeline lineno="805"><highlight class="comment"><sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="806"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__grtc__hal_1ga86af4577d105dafbdae927ed086b8b2f" kindref="member">nrf_grtc_sys_counter_set</ref>(NRF_GRTC_Type<sp/>*<sp/>p_reg,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>enable);</highlight></codeline>
<codeline lineno="807"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="808"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="809"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>automatic<sp/>mode<sp/>for<sp/>the<sp/>SYSCOUNTER.</highlight></codeline>
<codeline lineno="810"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="811"><highlight class="comment"><sp/>*<sp/>@note<sp/>When<sp/>@p<sp/>enable<sp/>is<sp/>false<sp/>then<sp/>the<sp/>SYSCOUNTER<sp/>remains<sp/>active<sp/>when<sp/>KEEPRUNNING<sp/>is<sp/>set,</highlight></codeline>
<codeline lineno="812"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>or<sp/>any<sp/>task<sp/>register,<sp/>INT<sp/>register<sp/>or<sp/>SYSCOUNTER<sp/>register<sp/>is<sp/>being<sp/>accessed.</highlight></codeline>
<codeline lineno="813"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>When<sp/>@p<sp/>enable<sp/>is<sp/>true<sp/>then<sp/>in<sp/>addition<sp/>the<sp/>SYSCOUNTER<sp/>remains<sp/>active<sp/>when</highlight></codeline>
<codeline lineno="814"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>any<sp/>local<sp/>CPU<sp/>that<sp/>is<sp/>not<sp/>sleeping<sp/>keeps<sp/>the<sp/>SYSCOUNTER<sp/>active.</highlight></codeline>
<codeline lineno="815"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="816"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="817"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>enable<sp/>True<sp/>if<sp/>the<sp/>automatic<sp/>mode<sp/>is<sp/>to<sp/>be<sp/>enabled,<sp/>false<sp/>otherwise.</highlight></codeline>
<codeline lineno="818"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="819"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__grtc__hal_1gaafb45e5bee0a2344906f9a02f4d59a71" kindref="member">nrf_grtc_sys_counter_auto_mode_set</ref>(NRF_GRTC_Type<sp/>*<sp/>p_reg,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>enable);</highlight></codeline>
<codeline lineno="820"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="821"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="822"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>checking<sp/>whether<sp/>the<sp/>SYSCOUNTER<sp/>has<sp/>automatic<sp/>mode<sp/>enabled.</highlight></codeline>
<codeline lineno="823"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="824"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="825"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="826"><highlight class="comment"><sp/>*<sp/>@return<sp/>True<sp/><sp/>Automatic<sp/>mode<sp/>is<sp/>enabled.</highlight></codeline>
<codeline lineno="827"><highlight class="comment"><sp/>*<sp/>@return<sp/>False<sp/>Automatic<sp/>mode<sp/>is<sp/>disabled.</highlight></codeline>
<codeline lineno="828"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="829"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrf__grtc__hal_1ga9dab8e70b7c645b97fc70833003f4dda" kindref="member">nrf_grtc_sys_counter_auto_mode_check</ref>(NRF_GRTC_Type<sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="830"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRF_GRTC_HAS_EXTENDED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="831"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="832"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="833"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>checking<sp/>whether<sp/>the<sp/>SYSCOUNTER<sp/>is<sp/>in<sp/>active<sp/>state.</highlight></codeline>
<codeline lineno="834"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="835"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="836"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="837"><highlight class="comment"><sp/>*<sp/>@retval<sp/>True<sp/>if<sp/>the<sp/>SYSCOUNTER<sp/>is<sp/>active,<sp/>false<sp/>otherwise.</highlight></codeline>
<codeline lineno="838"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="839"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrf__grtc__hal_1ga3289a3d075afcbc7b8562a8c5a48adae" kindref="member">nrf_grtc_sys_counter_check</ref>(NRF_GRTC_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="840"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="841"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="842"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>the<sp/>request<sp/>to<sp/>keep<sp/>the<sp/>SYSCOUNTER<sp/>active.</highlight></codeline>
<codeline lineno="843"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="844"><highlight class="comment"><sp/>*<sp/>@note<sp/>This<sp/>function<sp/>modifies<sp/>the<sp/>KEEPRUNNING<sp/>register,<sp/>which<sp/>possesses<sp/>information</highlight></codeline>
<codeline lineno="845"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>whether<sp/>any<sp/>local<sp/>CPU<sp/>needs<sp/>keeping<sp/>the<sp/>SYSCOUNTER<sp/>active.</highlight></codeline>
<codeline lineno="846"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="847"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="848"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>enable<sp/>True<sp/>if<sp/>the<sp/>automatic<sp/>mode<sp/>is<sp/>to<sp/>be<sp/>enabled,<sp/>false<sp/>otherwise.</highlight></codeline>
<codeline lineno="849"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="850"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__grtc__hal_1gac0d0dba9e8fbfd84eef88aad1d048b86" kindref="member">nrf_grtc_sys_counter_active_state_request_set</ref>(NRF_GRTC_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="851"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>enable);</highlight></codeline>
<codeline lineno="852"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="853"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="854"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>checking<sp/>whether<sp/>the<sp/>SYSCOUNTER<sp/>is<sp/>requested<sp/>to<sp/>remain<sp/>active.</highlight></codeline>
<codeline lineno="855"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="856"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="857"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="858"><highlight class="comment"><sp/>*<sp/>@retval<sp/>True<sp/>if<sp/>request<sp/>for<sp/>keeping<sp/>the<sp/>SYSCOUNTER<sp/>is<sp/>active,<sp/>false<sp/>otherwise.</highlight></codeline>
<codeline lineno="859"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="860"><highlight class="normal">NRF_STATIC_INLINE</highlight></codeline>
<codeline lineno="861"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrf__grtc__hal_1gaa1f8757bb0c09e0bf86e0cdefa9af124" kindref="member">nrf_grtc_sys_counter_active_state_request_check</ref>(NRF_GRTC_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="862"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="863"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="864"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>the<sp/>domains<sp/>that<sp/>requested<sp/>the<sp/>SYSCOUNTER<sp/>to<sp/>remain<sp/>active.</highlight></codeline>
<codeline lineno="865"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="866"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="867"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>mask<sp/><sp/>Domains<sp/>mask.</highlight></codeline>
<codeline lineno="868"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="869"><highlight class="comment"><sp/>*<sp/>@retval<sp/>Bitmask<sp/>of<sp/>domains<sp/>that<sp/>keep<sp/>the<sp/>SYSCOUNTER<sp/>active.</highlight></codeline>
<codeline lineno="870"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="871"><highlight class="normal">NRF_STATIC_INLINE</highlight></codeline>
<codeline lineno="872"><highlight class="normal">uint32_t<sp/><ref refid="group__nrf__grtc__hal_1ga26a1b100c80264f41628f7578e330d9f" kindref="member">nrf_grtc_sys_counter_active_state_request_get</ref>(NRF_GRTC_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="873"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mask);</highlight></codeline>
<codeline lineno="874"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_GRTC_HAS_EXTENDED</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="875"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="876"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>the<sp/>periodic<sp/>compare<sp/>event<sp/>for<sp/>capture/compare<sp/>channel<sp/>0.</highlight></codeline>
<codeline lineno="877"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="878"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="879"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>value<sp/>Period<sp/>value<sp/>in<sp/>1<sp/>MHz<sp/>units.</highlight></codeline>
<codeline lineno="880"><highlight class="comment"><sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="881"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__grtc__hal_1ga467b68e18e9c2cfc248baf75b587810f" kindref="member">nrf_grtc_sys_counter_interval_set</ref>(NRF_GRTC_Type<sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>value);</highlight></codeline>
<codeline lineno="882"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="883"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="884"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>the<sp/>value<sp/>of<sp/>interval<sp/>for<sp/>periodic<sp/>capture/compare<sp/>event</highlight></codeline>
<codeline lineno="885"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>channel<sp/>0.</highlight></codeline>
<codeline lineno="886"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="887"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="888"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="889"><highlight class="comment"><sp/>*<sp/>@retval<sp/>Value<sp/>of<sp/>the<sp/>interval<sp/>in<sp/>1<sp/>MHz<sp/>units.</highlight></codeline>
<codeline lineno="890"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="891"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__grtc__hal_1ga2d1cad3bd0f794e0c8b5c9d5be80e813" kindref="member">nrf_grtc_sys_counter_interval_get</ref>(NRF_GRTC_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="892"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="893"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="894"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>the<sp/>timeout<sp/>value<sp/>for<sp/>GRTC.</highlight></codeline>
<codeline lineno="895"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="896"><highlight class="comment"><sp/>*<sp/>@note<sp/>Timeout<sp/>between<sp/>all<sp/>CPUs<sp/>going<sp/>to<sp/>sleep<sp/>and<sp/>stopping<sp/>the<sp/>SYSCOUNTER.</highlight></codeline>
<codeline lineno="897"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="898"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="899"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>value<sp/>Timeout<sp/>value<sp/>in<sp/>32<sp/>kHz<sp/>units.</highlight></codeline>
<codeline lineno="900"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="901"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__grtc__hal_1ga8b3480c8301f0beb550f8cf8247a3452" kindref="member">nrf_grtc_timeout_set</ref>(NRF_GRTC_Type<sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>value);</highlight></codeline>
<codeline lineno="902"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="903"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="904"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>the<sp/>value<sp/>of<sp/>the<sp/>timeout<sp/>value<sp/>for<sp/>GRTC.</highlight></codeline>
<codeline lineno="905"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="906"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="907"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="908"><highlight class="comment"><sp/>*<sp/>@retval<sp/>Value<sp/>of<sp/>the<sp/>timeout<sp/>in<sp/>32<sp/>kHz<sp/>units.</highlight></codeline>
<codeline lineno="909"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="910"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__grtc__hal_1gae1ce6ee813308fce0a2901fb55459678" kindref="member">nrf_grtc_timeout_get</ref>(NRF_GRTC_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="911"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="912"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="913"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>the<sp/>wake<sp/>time<sp/>value<sp/>for<sp/>GRTC.</highlight></codeline>
<codeline lineno="914"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="915"><highlight class="comment"><sp/>*<sp/>@note<sp/>The<sp/>wake<sp/>time<sp/>is<sp/>maximum<sp/>number<sp/>of<sp/>32<sp/>kHz<sp/>cycles<sp/>takes<sp/>to<sp/>restore<sp/>the<sp/>APB<sp/>registers</highlight></codeline>
<codeline lineno="916"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>when<sp/>waking<sp/>from<sp/>sleep<sp/>state.</highlight></codeline>
<codeline lineno="917"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="918"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="919"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>value<sp/>Wake<sp/>time<sp/>value<sp/>in<sp/>32<sp/>kHz<sp/>units.</highlight></codeline>
<codeline lineno="920"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="921"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__grtc__hal_1gabf6543ddb24a2c79a2ef1ab8aeb335f1" kindref="member">nrf_grtc_waketime_set</ref>(NRF_GRTC_Type<sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>value);</highlight></codeline>
<codeline lineno="922"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="923"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="924"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>the<sp/>wake<sp/>time<sp/>value.</highlight></codeline>
<codeline lineno="925"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="926"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="927"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="928"><highlight class="comment"><sp/>*<sp/>@retval<sp/>Value<sp/>of<sp/>wake<sp/>time<sp/>in<sp/>32<sp/>kHz<sp/>units.</highlight></codeline>
<codeline lineno="929"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="930"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__grtc__hal_1ga19246ff59e790e2a5d11219c8ad60c8d" kindref="member">nrf_grtc_waketime_get</ref>(NRF_GRTC_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="931"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRF_GRTC_HAS_EXTENDED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="932"><highlight class="normal"></highlight></codeline>
<codeline lineno="933"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_GRTC_HAS_PWM</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="934"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="935"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>the<sp/>PWM<sp/>compare<sp/>value.</highlight></codeline>
<codeline lineno="936"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="937"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="938"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>value<sp/>PWM<sp/>compare<sp/>value.</highlight></codeline>
<codeline lineno="939"><highlight class="comment"><sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="940"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__grtc__hal_1ga421c91decb698f3e46897b94ad9ab4c9" kindref="member">nrf_grtc_pwm_compare_set</ref>(NRF_GRTC_Type<sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>value);</highlight></codeline>
<codeline lineno="941"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="942"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="943"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>the<sp/>PWM<sp/>compare<sp/>value.</highlight></codeline>
<codeline lineno="944"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="945"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="946"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="947"><highlight class="comment"><sp/>*<sp/>@retval<sp/>Value<sp/>of<sp/>PWM<sp/>compare.</highlight></codeline>
<codeline lineno="948"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="949"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__grtc__hal_1gae208d47c196fd01485ff5916d0c7a882" kindref="member">nrf_grtc_pwm_compare_get</ref>(NRF_GRTC_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="950"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRF_GRTC_HAS_PWM</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="951"><highlight class="normal"></highlight></codeline>
<codeline lineno="952"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_GRTC_HAS_CLKOUT</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="953"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="954"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>the<sp/>specified<sp/>clock<sp/>source<sp/>to<sp/>be<sp/>connected<sp/>to<sp/>output<sp/>pin.</highlight></codeline>
<codeline lineno="955"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="956"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="957"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>clkout<sp/>Selected<sp/>clkout<sp/>source.</highlight></codeline>
<codeline lineno="958"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>enable<sp/>True<sp/>if<sp/>the<sp/>clkout<sp/>source<sp/>is<sp/>to<sp/>be<sp/>enabled,<sp/>false<sp/>otherwise.</highlight></codeline>
<codeline lineno="959"><highlight class="comment"><sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="960"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__grtc__hal_1gaecaf461188701a90c6be463db4298f9e" kindref="member">nrf_grtc_clkout_set</ref>(NRF_GRTC_Type<sp/>*<sp/><sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="961"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__grtc__hal_1gacdc216d006ac43c34a154cffdf0ca69a" kindref="member">nrf_grtc_clkout_t</ref><sp/>clkout,</highlight></codeline>
<codeline lineno="962"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>enable);</highlight></codeline>
<codeline lineno="963"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="964"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="965"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>checking<sp/>whether<sp/>clock<sp/>source<sp/>is<sp/>connected<sp/>to<sp/>clkout<sp/>pin.</highlight></codeline>
<codeline lineno="966"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="967"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="968"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>clkout<sp/>Selected<sp/>clkout<sp/>source.</highlight></codeline>
<codeline lineno="969"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="970"><highlight class="comment"><sp/>*<sp/>@retval<sp/>True<sp/>if<sp/>the<sp/>clkout<sp/>source<sp/>is<sp/>enabled,<sp/>false<sp/>otherwise.</highlight></codeline>
<codeline lineno="971"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="972"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrf__grtc__hal_1ga03419f816fcd0f2380d0b9e45d44e55c" kindref="member">nrf_grtc_clkout_enable_check</ref>(NRF_GRTC_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="973"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__grtc__hal_1gacdc216d006ac43c34a154cffdf0ca69a" kindref="member">nrf_grtc_clkout_t</ref><sp/><sp/><sp/><sp/><sp/>clkout);</highlight></codeline>
<codeline lineno="974"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="975"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="976"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>the<sp/>fast<sp/>clock<sp/>divisor<sp/>value<sp/>of<sp/>clock<sp/>output.</highlight></codeline>
<codeline lineno="977"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="978"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="979"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>value<sp/>Fast<sp/>clock<sp/>divisor<sp/>value.</highlight></codeline>
<codeline lineno="980"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="981"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__grtc__hal_1ga6aed79f13e1b69ba1a6d9167d2b876d4" kindref="member">nrf_grtc_clkout_divider_set</ref>(NRF_GRTC_Type<sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>value);</highlight></codeline>
<codeline lineno="982"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="983"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="984"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>the<sp/>fast<sp/>clock<sp/>divisor<sp/>value<sp/>of<sp/>clock<sp/>output.</highlight></codeline>
<codeline lineno="985"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="986"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="987"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="988"><highlight class="comment"><sp/>*<sp/>@retval<sp/>Fast<sp/>clock<sp/>divisor<sp/>value.</highlight></codeline>
<codeline lineno="989"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="990"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__grtc__hal_1ga3371a887f116e28c9476de431d1145b3" kindref="member">nrf_grtc_clkout_divider_get</ref>(NRF_GRTC_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="991"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRF_GRTC_HAS_CLKOUT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="992"><highlight class="normal"></highlight></codeline>
<codeline lineno="993"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_GRTC_HAS_CLKSEL</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="994"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="995"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>the<sp/>clock<sp/>source<sp/>for<sp/>the<sp/>GRTC<sp/>low-frequency<sp/>clock.</highlight></codeline>
<codeline lineno="996"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="997"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="998"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>clksel<sp/>Selected<sp/>clock<sp/>source.</highlight></codeline>
<codeline lineno="999"><highlight class="comment"><sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1000"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__grtc__hal_1ga8210f5a14a3afcadf3c40435dcf0fed0" kindref="member">nrf_grtc_clksel_set</ref>(NRF_GRTC_Type<sp/>*<sp/>p_reg,<sp/><ref refid="group__nrf__grtc__hal_1gae439fae87a8f39984fe088a02960a7ae" kindref="member">nrf_grtc_clksel_t</ref><sp/>clksel);</highlight></codeline>
<codeline lineno="1001"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1002"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="1003"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>the<sp/>clock<sp/>source<sp/>of<sp/>the<sp/>GRTC<sp/>low-frequency<sp/>clock.</highlight></codeline>
<codeline lineno="1004"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1005"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="1006"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1007"><highlight class="comment"><sp/>*<sp/>@return<sp/>Clock<sp/>source<sp/>configuration.</highlight></codeline>
<codeline lineno="1008"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1009"><highlight class="normal">NRF_STATIC_INLINE<sp/><ref refid="group__nrf__grtc__hal_1gae439fae87a8f39984fe088a02960a7ae" kindref="member">nrf_grtc_clksel_t</ref><sp/><ref refid="group__nrf__grtc__hal_1ga3fc756bda45d4b3626a953c47540b635" kindref="member">nrf_grtc_clksel_get</ref>(NRF_GRTC_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="1010"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRF_GRTC_HAS_CLKSEL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1011"><highlight class="normal"></highlight></codeline>
<codeline lineno="1012"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>NRF_DECLARE_ONLY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1013"><highlight class="normal"></highlight></codeline>
<codeline lineno="1014"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__grtc__hal_1gaafb4da6fab8ddad328e0f8689e1e2ff5" kindref="member">nrf_grtc_sys_counter_cc_set</ref>(NRF_GRTC_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="1015"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cc_channel,</highlight></codeline>
<codeline lineno="1016"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cc_value)</highlight></codeline>
<codeline lineno="1017"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1018"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_GRTC_HAS_EXTENDED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1019"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__glue_1ga9698a3f6b6bea455d2b54a79e514ee36" kindref="member">NRFX_ASSERT</ref>(cc_channel<sp/>&lt;<sp/><ref refid="group__nrf__grtc__hal_1gac03efae4e8b2495c871b4d341e5dc91f" kindref="member">NRF_GRTC_SYSCOUNTER_CC_COUNT</ref>);</highlight></codeline>
<codeline lineno="1020"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1021"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__glue_1ga9698a3f6b6bea455d2b54a79e514ee36" kindref="member">NRFX_ASSERT</ref>(cc_channel<sp/>&lt;<sp/><ref refid="group__nrf__grtc__hal_1gac03efae4e8b2495c871b4d341e5dc91f" kindref="member">NRF_GRTC_SYSCOUNTER_CC_COUNT</ref><sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1022"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cc_channel<sp/>&gt;<sp/><ref refid="group__nrf__grtc__hal_1ga2b51af58a7b22a002b5fb11ba9fc1147" kindref="member">NRF_GRTC_MAIN_CC_CHANNEL</ref>);</highlight></codeline>
<codeline lineno="1023"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1024"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>cc_h<sp/>=<sp/>(uint32_t)(cc_value<sp/>&gt;&gt;<sp/>32);</highlight></codeline>
<codeline lineno="1025"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__glue_1ga9698a3f6b6bea455d2b54a79e514ee36" kindref="member">NRFX_ASSERT</ref>(cc_h<sp/>&lt;=<sp/><ref refid="group__nrf__grtc__hal_1gaff76541ce29eb096698b926b88142805" kindref="member">NRF_GRTC_SYSCOUNTER_CCH_MASK</ref>);</highlight></codeline>
<codeline lineno="1026"><highlight class="normal"></highlight></codeline>
<codeline lineno="1027"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;CC[cc_channel].CCL<sp/>=<sp/>(uint32_t)cc_value;</highlight></codeline>
<codeline lineno="1028"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;CC[cc_channel].CCH<sp/>=<sp/>cc_h<sp/>&amp;<sp/><ref refid="group__nrf__grtc__hal_1gaff76541ce29eb096698b926b88142805" kindref="member">NRF_GRTC_SYSCOUNTER_CCH_MASK</ref>;</highlight></codeline>
<codeline lineno="1029"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1030"><highlight class="normal"></highlight></codeline>
<codeline lineno="1031"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint64_t<sp/><ref refid="group__nrf__grtc__hal_1gaa250ccd626fce4e373842b6df5e97096" kindref="member">nrf_grtc_sys_counter_cc_get</ref>(NRF_GRTC_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="1032"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cc_channel)</highlight></codeline>
<codeline lineno="1033"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1034"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_GRTC_HAS_EXTENDED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1035"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__glue_1ga9698a3f6b6bea455d2b54a79e514ee36" kindref="member">NRFX_ASSERT</ref>(cc_channel<sp/>&lt;<sp/><ref refid="group__nrf__grtc__hal_1gac03efae4e8b2495c871b4d341e5dc91f" kindref="member">NRF_GRTC_SYSCOUNTER_CC_COUNT</ref>);</highlight></codeline>
<codeline lineno="1036"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1037"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__glue_1ga9698a3f6b6bea455d2b54a79e514ee36" kindref="member">NRFX_ASSERT</ref>(cc_channel<sp/>&lt;<sp/><ref refid="group__nrf__grtc__hal_1gac03efae4e8b2495c871b4d341e5dc91f" kindref="member">NRF_GRTC_SYSCOUNTER_CC_COUNT</ref><sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1038"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cc_channel<sp/>&gt;<sp/><ref refid="group__nrf__grtc__hal_1ga2b51af58a7b22a002b5fb11ba9fc1147" kindref="member">NRF_GRTC_MAIN_CC_CHANNEL</ref>);</highlight></codeline>
<codeline lineno="1039"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1040"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>cc_h<sp/>=<sp/>p_reg-&gt;CC[cc_channel].CCH;</highlight></codeline>
<codeline lineno="1041"><highlight class="normal"></highlight></codeline>
<codeline lineno="1042"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(uint64_t)p_reg-&gt;CC[cc_channel].CCL<sp/>|<sp/>((uint64_t)cc_h<sp/>&lt;&lt;<sp/>32);</highlight></codeline>
<codeline lineno="1043"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1044"><highlight class="normal"></highlight></codeline>
<codeline lineno="1045"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__grtc__hal_1gae7bc99a50731a75e6b76e8d058772bb7" kindref="member">nrf_grtc_sys_counter_cc_add_set</ref>(NRF_GRTC_Type<sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="1046"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cc_channel,</highlight></codeline>
<codeline lineno="1047"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value,</highlight></codeline>
<codeline lineno="1048"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__grtc__hal_1ga4e34fb922643e9f448f248b410e2e8e4" kindref="member">nrf_grtc_cc_add_reference_t</ref><sp/>reference)</highlight></codeline>
<codeline lineno="1049"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1050"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_GRTC_HAS_EXTENDED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1051"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__glue_1ga9698a3f6b6bea455d2b54a79e514ee36" kindref="member">NRFX_ASSERT</ref>(cc_channel<sp/>&lt;<sp/><ref refid="group__nrf__grtc__hal_1gac03efae4e8b2495c871b4d341e5dc91f" kindref="member">NRF_GRTC_SYSCOUNTER_CC_COUNT</ref>);</highlight></codeline>
<codeline lineno="1052"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1053"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__glue_1ga9698a3f6b6bea455d2b54a79e514ee36" kindref="member">NRFX_ASSERT</ref>(cc_channel<sp/>&lt;<sp/><ref refid="group__nrf__grtc__hal_1gac03efae4e8b2495c871b4d341e5dc91f" kindref="member">NRF_GRTC_SYSCOUNTER_CC_COUNT</ref><sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1054"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cc_channel<sp/>&gt;<sp/><ref refid="group__nrf__grtc__hal_1ga2b51af58a7b22a002b5fb11ba9fc1147" kindref="member">NRF_GRTC_MAIN_CC_CHANNEL</ref>);</highlight></codeline>
<codeline lineno="1055"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1056"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__glue_1ga9698a3f6b6bea455d2b54a79e514ee36" kindref="member">NRFX_ASSERT</ref>(value<sp/>&lt;=<sp/><ref refid="group__nrf__grtc__hal_1ga193b8ed0f28ed7d64ea6bfa95ecd3a07" kindref="member">NRF_GRTC_SYSCOUNTER_CCADD_MASK</ref>);</highlight></codeline>
<codeline lineno="1057"><highlight class="normal"></highlight></codeline>
<codeline lineno="1058"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;CC[cc_channel].CCADD<sp/>=<sp/>((uint32_t)reference<sp/>&lt;&lt;<sp/>GRTC_CC_CCADD_REFERENCE_Pos)<sp/>|</highlight></codeline>
<codeline lineno="1059"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(value<sp/>&amp;<sp/><ref refid="group__nrf__grtc__hal_1ga193b8ed0f28ed7d64ea6bfa95ecd3a07" kindref="member">NRF_GRTC_SYSCOUNTER_CCADD_MASK</ref>);</highlight></codeline>
<codeline lineno="1060"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1061"><highlight class="normal"></highlight></codeline>
<codeline lineno="1062"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_GRTC_HAS_RTCOUNTER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1063"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__grtc__hal_1ga45a090610eefa2264e4f12602b7f9d9b" kindref="member">nrf_grtc_rt_counter_cc_set</ref>(NRF_GRTC_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="1064"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cc_value,</highlight></codeline>
<codeline lineno="1065"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sync)</highlight></codeline>
<codeline lineno="1066"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1067"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>cc_h<sp/>=<sp/>(uint32_t)(cc_value<sp/>&gt;&gt;<sp/>32);</highlight></codeline>
<codeline lineno="1068"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__glue_1ga9698a3f6b6bea455d2b54a79e514ee36" kindref="member">NRFX_ASSERT</ref>(cc_h<sp/>&lt;=<sp/><ref refid="group__nrf__grtc__hal_1gaff3a8f28baecd4ce22bb39970414f632" kindref="member">NRF_GRTC_RTCOUNTER_CCH_MASK</ref>);</highlight></codeline>
<codeline lineno="1069"><highlight class="normal"></highlight></codeline>
<codeline lineno="1070"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sync)</highlight></codeline>
<codeline lineno="1071"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1072"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_reg-&gt;RTCOMPARESYNCL<sp/>=<sp/>(uint32_t)cc_value;</highlight></codeline>
<codeline lineno="1073"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_reg-&gt;RTCOMPARESYNCH<sp/>=<sp/>cc_h<sp/>&amp;<sp/><ref refid="group__nrf__grtc__hal_1gaff3a8f28baecd4ce22bb39970414f632" kindref="member">NRF_GRTC_RTCOUNTER_CCH_MASK</ref>;</highlight></codeline>
<codeline lineno="1074"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1075"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1076"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1077"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_reg-&gt;RTCOMPAREL<sp/>=<sp/>(uint32_t)cc_value;</highlight></codeline>
<codeline lineno="1078"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_reg-&gt;RTCOMPAREH<sp/>=<sp/>cc_h<sp/>&amp;<sp/><ref refid="group__nrf__grtc__hal_1gaff3a8f28baecd4ce22bb39970414f632" kindref="member">NRF_GRTC_RTCOUNTER_CCH_MASK</ref>;</highlight></codeline>
<codeline lineno="1079"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1080"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1081"><highlight class="normal"></highlight></codeline>
<codeline lineno="1082"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint64_t<sp/><ref refid="group__nrf__grtc__hal_1ga2f5e743ecea72ace3f5fb81816b56d94" kindref="member">nrf_grtc_rt_counter_cc_get</ref>(NRF_GRTC_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="1083"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1084"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>cc_h<sp/>=<sp/>p_reg-&gt;RTCOMPAREH;</highlight></codeline>
<codeline lineno="1085"><highlight class="normal"></highlight></codeline>
<codeline lineno="1086"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(uint64_t)p_reg-&gt;RTCOMPAREL<sp/>|<sp/>((uint64_t)cc_h<sp/>&lt;&lt;<sp/>32);</highlight></codeline>
<codeline lineno="1087"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1088"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRF_GRTC_HAS_RTCOUNTER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1089"><highlight class="normal"></highlight></codeline>
<codeline lineno="1090"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__grtc__hal_1gabc8bebf2390d859f55d96ae141499c11" kindref="member">nrf_grtc_int_enable</ref>(NRF_GRTC_Type<sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>mask)</highlight></codeline>
<codeline lineno="1091"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1092"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;GRTC_INTENSET<sp/>=<sp/>mask;</highlight></codeline>
<codeline lineno="1093"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1094"><highlight class="normal"></highlight></codeline>
<codeline lineno="1095"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__grtc__hal_1ga8b77b156aaa2a75e9faf07d52119342e" kindref="member">nrf_grtc_int_disable</ref>(NRF_GRTC_Type<sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>mask)</highlight></codeline>
<codeline lineno="1096"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1097"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;GRTC_INTENCLR<sp/>=<sp/>mask;</highlight></codeline>
<codeline lineno="1098"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1099"><highlight class="normal"></highlight></codeline>
<codeline lineno="1100"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__grtc__hal_1gada5181d48f4f1d68d0f768efedf71c5c" kindref="member">nrf_grtc_int_enable_check</ref>(NRF_GRTC_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>mask)</highlight></codeline>
<codeline lineno="1101"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1102"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p_reg-&gt;GRTC_INTEN<sp/>&amp;<sp/>mask;</highlight></codeline>
<codeline lineno="1103"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1104"><highlight class="normal"></highlight></codeline>
<codeline lineno="1105"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__grtc__hal_1gafd34374e937c50084e2b9969913a591c" kindref="member">nrf_grtc_int_pending_get</ref>(NRF_GRTC_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="1106"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1107"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p_reg-&gt;GRTC_INTPEND;</highlight></codeline>
<codeline lineno="1108"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1109"><highlight class="normal"></highlight></codeline>
<codeline lineno="1110"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_GRTC_HAS_PWM</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1111"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__grtc__hal_1ga9a1958c032dc53090c3dd059bab22f06" kindref="member">nrf_grtc_event_enable</ref>(NRF_GRTC_Type<sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>mask)</highlight></codeline>
<codeline lineno="1112"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1113"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;EVTENSET<sp/>=<sp/>mask;</highlight></codeline>
<codeline lineno="1114"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1115"><highlight class="normal"></highlight></codeline>
<codeline lineno="1116"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__grtc__hal_1gae9f734e1d6265aeb32c7ce376e6c58ac" kindref="member">nrf_grtc_event_disable</ref>(NRF_GRTC_Type<sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>mask)</highlight></codeline>
<codeline lineno="1117"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1118"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;EVTENCLR<sp/>=<sp/>mask;</highlight></codeline>
<codeline lineno="1119"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1120"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRF_GRTC_HAS_PWM</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1121"><highlight class="normal"></highlight></codeline>
<codeline lineno="1122"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_GRTC_HAS_EXTENDED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1123"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__grtc__hal_1gac5690d49bef4f831062094fc728bda33" kindref="member">nrf_grtc_shorts_enable</ref>(NRF_GRTC_Type<sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>mask)</highlight></codeline>
<codeline lineno="1124"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1125"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;SHORTS<sp/>|=<sp/>mask;</highlight></codeline>
<codeline lineno="1126"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1127"><highlight class="normal"></highlight></codeline>
<codeline lineno="1128"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__grtc__hal_1ga03a9d5d7e98462b9c3cdd8bfabacd806" kindref="member">nrf_grtc_shorts_disable</ref>(NRF_GRTC_Type<sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>mask)</highlight></codeline>
<codeline lineno="1129"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1130"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;SHORTS<sp/>&amp;=<sp/>~(mask);</highlight></codeline>
<codeline lineno="1131"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1132"><highlight class="normal"></highlight></codeline>
<codeline lineno="1133"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__grtc__hal_1gaf7747e1873e5594b2d2e4df6394f9ab9" kindref="member">nrf_grtc_shorts_set</ref>(NRF_GRTC_Type<sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>mask)</highlight></codeline>
<codeline lineno="1134"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1135"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;SHORTS<sp/>=<sp/>mask;</highlight></codeline>
<codeline lineno="1136"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1137"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRF_GRTC_HAS_EXTENDED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1138"><highlight class="normal"></highlight></codeline>
<codeline lineno="1139"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__grtc__hal_1ga19e3d64a1f7fa2c2e524b63910135ef8" kindref="member">nrf_grtc_subscribe_set</ref>(NRF_GRTC_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="1140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__grtc__hal_1ga3ead45038f169b586ca21cd6ef8acde9" kindref="member">nrf_grtc_task_t</ref><sp/>task,</highlight></codeline>
<codeline lineno="1141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>channel)</highlight></codeline>
<codeline lineno="1142"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1143"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_GRTC_HAS_EXTENDED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1144"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__glue_1ga9698a3f6b6bea455d2b54a79e514ee36" kindref="member">NRFX_ASSERT</ref>((task<sp/>!=<sp/><ref refid="group__nrf__grtc__hal_1gga3ead45038f169b586ca21cd6ef8acde9af0bbe53668b3def13ca5427c7155d8aa" kindref="member">NRF_GRTC_TASK_START</ref>)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(task<sp/>!=<sp/><ref refid="group__nrf__grtc__hal_1gga3ead45038f169b586ca21cd6ef8acde9a9bdac9230cd2cfee5b1612f638846356" kindref="member">NRF_GRTC_TASK_CLEAR</ref>)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(task<sp/>!=<sp/><ref refid="group__nrf__grtc__hal_1gga3ead45038f169b586ca21cd6ef8acde9aa371c89207c911044474b41a5af4ea13" kindref="member">NRF_GRTC_TASK_STOP</ref>));</highlight></codeline>
<codeline lineno="1147"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1148"><highlight class="normal"></highlight></codeline>
<codeline lineno="1149"><highlight class="normal"><sp/><sp/><sp/><sp/>*((</highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint32_t<sp/>*)<sp/>((uint8_t<sp/>*)<sp/>p_reg<sp/>+<sp/>(uint32_t)<sp/>task<sp/>+<sp/>0x80uL))<sp/>=</highlight></codeline>
<codeline lineno="1150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)channel<sp/>|<sp/>NRF_SUBSCRIBE_PUBLISH_ENABLE);</highlight></codeline>
<codeline lineno="1151"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1152"><highlight class="normal"></highlight></codeline>
<codeline lineno="1153"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__grtc__hal_1gae8dbd19ec8fb112e7254ffc0a32aba40" kindref="member">nrf_grtc_subscribe_clear</ref>(NRF_GRTC_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="1154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__grtc__hal_1ga3ead45038f169b586ca21cd6ef8acde9" kindref="member">nrf_grtc_task_t</ref><sp/>task)</highlight></codeline>
<codeline lineno="1155"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1156"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_GRTC_HAS_EXTENDED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1157"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__glue_1ga9698a3f6b6bea455d2b54a79e514ee36" kindref="member">NRFX_ASSERT</ref>((task<sp/>!=<sp/><ref refid="group__nrf__grtc__hal_1gga3ead45038f169b586ca21cd6ef8acde9af0bbe53668b3def13ca5427c7155d8aa" kindref="member">NRF_GRTC_TASK_START</ref>)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(task<sp/>!=<sp/><ref refid="group__nrf__grtc__hal_1gga3ead45038f169b586ca21cd6ef8acde9a9bdac9230cd2cfee5b1612f638846356" kindref="member">NRF_GRTC_TASK_CLEAR</ref>)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(task<sp/>!=<sp/><ref refid="group__nrf__grtc__hal_1gga3ead45038f169b586ca21cd6ef8acde9aa371c89207c911044474b41a5af4ea13" kindref="member">NRF_GRTC_TASK_STOP</ref>));</highlight></codeline>
<codeline lineno="1160"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1161"><highlight class="normal"></highlight></codeline>
<codeline lineno="1162"><highlight class="normal"><sp/><sp/><sp/><sp/>*((</highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint32_t<sp/>*)<sp/>((uint8_t<sp/>*)<sp/>p_reg<sp/>+<sp/>(uint32_t)<sp/>task<sp/>+<sp/>0x80uL))<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1163"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1164"><highlight class="normal"></highlight></codeline>
<codeline lineno="1165"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__grtc__hal_1ga28ca8bcda6222fc60e172767c67d7469" kindref="member">nrf_grtc_publish_set</ref>(NRF_GRTC_Type<sp/>*<sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="1166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__grtc__hal_1ga7ae05a37545fa5a2c94e90d048bb2b65" kindref="member">nrf_grtc_event_t</ref><sp/>event,</highlight></codeline>
<codeline lineno="1167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>channel)</highlight></codeline>
<codeline lineno="1168"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1169"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__glue_1ga9698a3f6b6bea455d2b54a79e514ee36" kindref="member">NRFX_ASSERT</ref>(event<sp/>!=<sp/><ref refid="group__nrf__grtc__hal_1gga7ae05a37545fa5a2c94e90d048bb2b65ab123f82a38ece536dd9de212c385046d" kindref="member">NRF_GRTC_EVENT_SYSCOUNTERVALID</ref>);</highlight></codeline>
<codeline lineno="1170"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_GRTC_HAS_RTCOUNTER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1171"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__glue_1ga9698a3f6b6bea455d2b54a79e514ee36" kindref="member">NRFX_ASSERT</ref>(event<sp/>!=<sp/><ref refid="group__nrf__grtc__hal_1gga7ae05a37545fa5a2c94e90d048bb2b65ae7e815bcad2414fc4de6025fc9329e7c" kindref="member">NRF_GRTC_EVENT_RTCOMPARESYNC</ref>);</highlight></codeline>
<codeline lineno="1172"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1173"><highlight class="normal"></highlight></codeline>
<codeline lineno="1174"><highlight class="normal"><sp/><sp/><sp/><sp/>*((</highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint32_t<sp/>*)<sp/>((uint8_t<sp/>*)<sp/>p_reg<sp/>+<sp/>(uint32_t)<sp/>event<sp/>+<sp/>0x80UL))<sp/>=</highlight></codeline>
<codeline lineno="1175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)channel<sp/>|<sp/>NRF_SUBSCRIBE_PUBLISH_ENABLE);</highlight></codeline>
<codeline lineno="1176"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1177"><highlight class="normal"></highlight></codeline>
<codeline lineno="1178"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__grtc__hal_1ga1dde9445416963417a00e2b678de7121" kindref="member">nrf_grtc_publish_clear</ref>(NRF_GRTC_Type<sp/>*<sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="1179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__grtc__hal_1ga7ae05a37545fa5a2c94e90d048bb2b65" kindref="member">nrf_grtc_event_t</ref><sp/>event)</highlight></codeline>
<codeline lineno="1180"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1181"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__glue_1ga9698a3f6b6bea455d2b54a79e514ee36" kindref="member">NRFX_ASSERT</ref>(event<sp/>!=<sp/><ref refid="group__nrf__grtc__hal_1gga7ae05a37545fa5a2c94e90d048bb2b65ab123f82a38ece536dd9de212c385046d" kindref="member">NRF_GRTC_EVENT_SYSCOUNTERVALID</ref>);</highlight></codeline>
<codeline lineno="1182"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_GRTC_HAS_RTCOUNTER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1183"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__glue_1ga9698a3f6b6bea455d2b54a79e514ee36" kindref="member">NRFX_ASSERT</ref>(event<sp/>!=<sp/><ref refid="group__nrf__grtc__hal_1gga7ae05a37545fa5a2c94e90d048bb2b65ae7e815bcad2414fc4de6025fc9329e7c" kindref="member">NRF_GRTC_EVENT_RTCOMPARESYNC</ref>);</highlight></codeline>
<codeline lineno="1184"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1185"><highlight class="normal"></highlight></codeline>
<codeline lineno="1186"><highlight class="normal"><sp/><sp/><sp/><sp/>*((</highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint32_t<sp/>*)<sp/>((uint8_t<sp/>*)<sp/>p_reg<sp/>+<sp/>(uint32_t)<sp/>event<sp/>+<sp/>0x80UL))<sp/>=<sp/>0x0UL;</highlight></codeline>
<codeline lineno="1187"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1188"><highlight class="normal"></highlight></codeline>
<codeline lineno="1189"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrf__grtc__hal_1ga8c4cf763128d803a8e653669afac8918" kindref="member">nrf_grtc_event_check</ref>(NRF_GRTC_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,<sp/><ref refid="group__nrf__grtc__hal_1ga7ae05a37545fa5a2c94e90d048bb2b65" kindref="member">nrf_grtc_event_t</ref><sp/>event)</highlight></codeline>
<codeline lineno="1190"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1191"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>nrf_event_check(p_reg,<sp/>event);</highlight></codeline>
<codeline lineno="1192"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1193"><highlight class="normal"></highlight></codeline>
<codeline lineno="1194"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__grtc__hal_1gaa9967aaf0b8cf60576ac6625e2a56759" kindref="member">nrf_grtc_event_clear</ref>(NRF_GRTC_Type<sp/>*<sp/>p_reg,<sp/><ref refid="group__nrf__grtc__hal_1ga7ae05a37545fa5a2c94e90d048bb2b65" kindref="member">nrf_grtc_event_t</ref><sp/>event)</highlight></codeline>
<codeline lineno="1195"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1196"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__glue_1ga9698a3f6b6bea455d2b54a79e514ee36" kindref="member">NRFX_ASSERT</ref>(event<sp/>!=<sp/><ref refid="group__nrf__grtc__hal_1gga7ae05a37545fa5a2c94e90d048bb2b65ab123f82a38ece536dd9de212c385046d" kindref="member">NRF_GRTC_EVENT_SYSCOUNTERVALID</ref>);</highlight></codeline>
<codeline lineno="1197"><highlight class="normal"></highlight></codeline>
<codeline lineno="1198"><highlight class="normal"><sp/><sp/><sp/><sp/>*((</highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint32_t<sp/>*)((uint8_t<sp/>*)p_reg<sp/>+<sp/>(uint32_t)event))<sp/>=<sp/>0x0UL;</highlight></codeline>
<codeline lineno="1199"><highlight class="normal"><sp/><sp/><sp/><sp/>nrf_event_readback((uint8_t<sp/>*)p_reg<sp/>+<sp/>(uint32_t)event);</highlight></codeline>
<codeline lineno="1200"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1201"><highlight class="normal"></highlight></codeline>
<codeline lineno="1202"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_GRTC_HAS_RTCOUNTER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1203"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__grtc__hal_1gae364666c46ac47cc496a071195194ae0" kindref="member">nrf_grtc_rt_counter_low_get</ref>(NRF_GRTC_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="1204"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1205"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p_reg-&gt;RTCOUNTERL;</highlight></codeline>
<codeline lineno="1206"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1207"><highlight class="normal"></highlight></codeline>
<codeline lineno="1208"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__grtc__hal_1ga2aaf34328a3c13cb8912fa89f51354c8" kindref="member">nrf_grtc_rt_counter_high_get</ref>(NRF_GRTC_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="1209"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1210"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p_reg-&gt;RTCOUNTERH;</highlight></codeline>
<codeline lineno="1211"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1212"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRF_GRTC_HAS_RTCOUNTER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1213"><highlight class="normal"></highlight></codeline>
<codeline lineno="1214"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__grtc__hal_1ga0b0c5b513db954011586e86547ed1ce9" kindref="member">nrf_grtc_sys_counter_low_get</ref>(NRF_GRTC_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="1215"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1216"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_GRTC_HAS_SYSCOUNTER_ARRAY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1217"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p_reg-&gt;GRTC_SYSCOUNTER.SYSCOUNTERL;</highlight></codeline>
<codeline lineno="1218"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1219"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p_reg-&gt;SYSCOUNTERL;</highlight></codeline>
<codeline lineno="1220"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRF_GRTC_HAS_SYSCOUNTER_ARRAY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1221"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1222"><highlight class="normal"></highlight></codeline>
<codeline lineno="1223"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__grtc__hal_1ga80b9dd38536653a93d61443bc6e0d2a0" kindref="member">nrf_grtc_sys_counter_high_get</ref>(NRF_GRTC_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="1224"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1225"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_GRTC_HAS_SYSCOUNTER_ARRAY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1226"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p_reg-&gt;GRTC_SYSCOUNTER.SYSCOUNTERH;</highlight></codeline>
<codeline lineno="1227"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1228"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p_reg-&gt;SYSCOUNTERH;</highlight></codeline>
<codeline lineno="1229"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRF_GRTC_HAS_SYSCOUNTER_ARRAY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1230"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1231"><highlight class="normal"></highlight></codeline>
<codeline lineno="1232"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint64_t<sp/><ref refid="group__nrf__grtc__hal_1gac24bd3d8ecf7ddab6443e854ac0eadb7" kindref="member">nrf_grtc_sys_counter_get</ref>(NRF_GRTC_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="1233"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1234"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_GRTC_HAS_SYSCOUNTER_ARRAY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1235"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*((</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint64_t<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>*)&amp;p_reg-&gt;GRTC_SYSCOUNTER.SYSCOUNTERL);</highlight></codeline>
<codeline lineno="1236"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1237"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*((</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint64_t<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>*)&amp;p_reg-&gt;SYSCOUNTERL);</highlight></codeline>
<codeline lineno="1238"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRF_GRTC_HAS_SYSCOUNTER_ARRAY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1239"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1240"><highlight class="normal"></highlight></codeline>
<codeline lineno="1241"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrf__grtc__hal_1ga9eab767581794e74e4ae08a70ea60c8b" kindref="member">nrf_grtc_sys_counter_overflow_check</ref>(NRF_GRTC_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="1242"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1243"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_GRTC_HAS_SYSCOUNTER_ARRAY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1244"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(p_reg-&gt;GRTC_SYSCOUNTER.SYSCOUNTERH<sp/>&amp;</highlight></codeline>
<codeline lineno="1245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GRTC_SYSCOUNTER_SYSCOUNTERH_OVERFLOW_Msk)<sp/>?<sp/>true<sp/>:<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1246"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1247"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(p_reg-&gt;SYSCOUNTERH<sp/>&amp;<sp/>GRTC_SYSCOUNTERH_OVERFLOW_Msk)<sp/>?<sp/>true<sp/>:<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1248"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRF_GRTC_HAS_SYSCOUNTER_ARRAY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1249"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1250"><highlight class="normal"></highlight></codeline>
<codeline lineno="1251"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_GRTC_HAS_SYSCOUNTER_ARRAY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1252"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__grtc__hal_1ga5c1bce12a2b33339177c00b29bf8e332" kindref="member">nrf_grtc_sys_counter_active_set</ref>(NRF_GRTC_Type<sp/>*<sp/>p_reg,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>enable)</highlight></codeline>
<codeline lineno="1253"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1254"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;GRTC_SYSCOUNTER.ACTIVE<sp/>=<sp/>((p_reg-&gt;GRTC_SYSCOUNTER.ACTIVE<sp/>&amp;</highlight></codeline>
<codeline lineno="1255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>~(GRTC_SYSCOUNTER_ACTIVE_ACTIVE_Msk))<sp/>|</highlight></codeline>
<codeline lineno="1256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(enable<sp/>?<sp/>GRTC_SYSCOUNTER_ACTIVE_ACTIVE_Active<sp/>:</highlight></codeline>
<codeline lineno="1257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GRTC_SYSCOUNTER_ACTIVE_ACTIVE_NotActive));</highlight></codeline>
<codeline lineno="1258"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1259"><highlight class="normal"></highlight></codeline>
<codeline lineno="1260"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrf__grtc__hal_1gaf2aab3b971214da6438ece86ec435146" kindref="member">nrf_grtc_sys_counter_active_check</ref>(NRF_GRTC_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="1261"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1262"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(p_reg-&gt;GRTC_SYSCOUNTER.ACTIVE<sp/>&amp;<sp/>GRTC_SYSCOUNTER_ACTIVE_ACTIVE_Msk)<sp/>==</highlight></codeline>
<codeline lineno="1263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GRTC_SYSCOUNTER_ACTIVE_ACTIVE_Active;</highlight></codeline>
<codeline lineno="1264"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1265"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRF_GRTC_HAS_SYSCOUNTER_ARRAY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1266"><highlight class="normal"></highlight></codeline>
<codeline lineno="1267"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__grtc__hal_1ga0ef4ff14ec092be3fb37ef38576514f0" kindref="member">nrf_grtc_event_address_get</ref>(NRF_GRTC_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="1268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__grtc__hal_1ga7ae05a37545fa5a2c94e90d048bb2b65" kindref="member">nrf_grtc_event_t</ref><sp/><sp/><sp/><sp/><sp/><sp/>event)</highlight></codeline>
<codeline lineno="1269"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1270"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(uint32_t)p_reg<sp/>+<sp/>(uint32_t)event;</highlight></codeline>
<codeline lineno="1271"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1272"><highlight class="normal"></highlight></codeline>
<codeline lineno="1273"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__grtc__hal_1ga60e00f5ace03a5c5b72fa45acda805d2" kindref="member">nrf_grtc_task_address_get</ref>(NRF_GRTC_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="1274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__grtc__hal_1ga3ead45038f169b586ca21cd6ef8acde9" kindref="member">nrf_grtc_task_t</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>task)</highlight></codeline>
<codeline lineno="1275"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1276"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(uint32_t)p_reg<sp/>+<sp/>(uint32_t)task;</highlight></codeline>
<codeline lineno="1277"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1278"><highlight class="normal"></highlight></codeline>
<codeline lineno="1279"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__grtc__hal_1gaa52de35bb6ecb5ebc17c22e2d28a6480" kindref="member">nrf_grtc_task_trigger</ref>(NRF_GRTC_Type<sp/>*<sp/>p_reg,<sp/><ref refid="group__nrf__grtc__hal_1ga3ead45038f169b586ca21cd6ef8acde9" kindref="member">nrf_grtc_task_t</ref><sp/>task)</highlight></codeline>
<codeline lineno="1280"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1281"><highlight class="normal"><sp/><sp/><sp/><sp/>*((</highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint32_t<sp/>*)((uint8_t<sp/>*)p_reg<sp/>+<sp/>(uint32_t)task))<sp/>=<sp/>0x1UL;</highlight></codeline>
<codeline lineno="1282"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1283"><highlight class="normal"></highlight></codeline>
<codeline lineno="1284"><highlight class="normal">NRF_STATIC_INLINE<sp/><ref refid="group__nrf__grtc__hal_1ga3ead45038f169b586ca21cd6ef8acde9" kindref="member">nrf_grtc_task_t</ref><sp/><ref refid="group__nrf__grtc__hal_1gade023fd81fb28e313e10352daf01d9e3" kindref="member">nrf_grtc_sys_counter_capture_task_get</ref>(uint8_t<sp/>cc_channel)</highlight></codeline>
<codeline lineno="1285"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1286"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="group__nrf__grtc__hal_1ga3ead45038f169b586ca21cd6ef8acde9" kindref="member">nrf_grtc_task_t</ref>)<ref refid="group__nrfx__common_1gaf356c97c2527d9ac57b04dd9f12fc9d3" kindref="member">NRFX_OFFSETOF</ref>(NRF_GRTC_Type,<sp/>TASKS_CAPTURE[cc_channel]);</highlight></codeline>
<codeline lineno="1287"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1288"><highlight class="normal"></highlight></codeline>
<codeline lineno="1289"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__grtc__hal_1ga7d6f2b3291aaebfb0165d2487e3a03fd" kindref="member">nrf_grtc_sys_counter_compare_event_enable</ref>(NRF_GRTC_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="1290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cc_channel)</highlight></codeline>
<codeline lineno="1291"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1292"><highlight class="normal"></highlight></codeline>
<codeline lineno="1293"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_GRTC_HAS_EXTENDED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1294"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__glue_1ga9698a3f6b6bea455d2b54a79e514ee36" kindref="member">NRFX_ASSERT</ref>(cc_channel<sp/>&lt;<sp/><ref refid="group__nrf__grtc__hal_1gac03efae4e8b2495c871b4d341e5dc91f" kindref="member">NRF_GRTC_SYSCOUNTER_CC_COUNT</ref>);</highlight></codeline>
<codeline lineno="1295"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1296"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__glue_1ga9698a3f6b6bea455d2b54a79e514ee36" kindref="member">NRFX_ASSERT</ref>(cc_channel<sp/>&lt;<sp/><ref refid="group__nrf__grtc__hal_1gac03efae4e8b2495c871b4d341e5dc91f" kindref="member">NRF_GRTC_SYSCOUNTER_CC_COUNT</ref><sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cc_channel<sp/>&gt;<sp/><ref refid="group__nrf__grtc__hal_1ga2b51af58a7b22a002b5fb11ba9fc1147" kindref="member">NRF_GRTC_MAIN_CC_CHANNEL</ref>);</highlight></codeline>
<codeline lineno="1298"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1299"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;CC[cc_channel].CCEN<sp/>=<sp/>GRTC_CC_CCEN_ACTIVE_Enable;</highlight></codeline>
<codeline lineno="1300"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1301"><highlight class="normal"></highlight></codeline>
<codeline lineno="1302"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__grtc__hal_1gae04c6f373955979278eb18060ff3a4a8" kindref="member">nrf_grtc_sys_counter_compare_event_disable</ref>(NRF_GRTC_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="1303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cc_channel)</highlight></codeline>
<codeline lineno="1304"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1305"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_GRTC_HAS_EXTENDED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1306"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__glue_1ga9698a3f6b6bea455d2b54a79e514ee36" kindref="member">NRFX_ASSERT</ref>(cc_channel<sp/>&lt;<sp/><ref refid="group__nrf__grtc__hal_1gac03efae4e8b2495c871b4d341e5dc91f" kindref="member">NRF_GRTC_SYSCOUNTER_CC_COUNT</ref>);</highlight></codeline>
<codeline lineno="1307"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1308"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__glue_1ga9698a3f6b6bea455d2b54a79e514ee36" kindref="member">NRFX_ASSERT</ref>(cc_channel<sp/>&lt;<sp/><ref refid="group__nrf__grtc__hal_1gac03efae4e8b2495c871b4d341e5dc91f" kindref="member">NRF_GRTC_SYSCOUNTER_CC_COUNT</ref><sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cc_channel<sp/>&gt;<sp/><ref refid="group__nrf__grtc__hal_1ga2b51af58a7b22a002b5fb11ba9fc1147" kindref="member">NRF_GRTC_MAIN_CC_CHANNEL</ref>);</highlight></codeline>
<codeline lineno="1310"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1311"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;CC[cc_channel].CCEN<sp/>=<sp/>GRTC_CC_CCEN_ACTIVE_Disable;</highlight></codeline>
<codeline lineno="1312"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1313"><highlight class="normal"></highlight></codeline>
<codeline lineno="1314"><highlight class="normal">NRF_STATIC_INLINE<sp/><ref refid="group__nrf__grtc__hal_1ga7ae05a37545fa5a2c94e90d048bb2b65" kindref="member">nrf_grtc_event_t</ref><sp/><ref refid="group__nrf__grtc__hal_1ga32ea992e597b134f4b3d41a8c62f5879" kindref="member">nrf_grtc_sys_counter_compare_event_get</ref>(uint8_t<sp/>cc_channel)</highlight></codeline>
<codeline lineno="1315"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1316"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="group__nrf__grtc__hal_1ga7ae05a37545fa5a2c94e90d048bb2b65" kindref="member">nrf_grtc_event_t</ref>)<ref refid="group__nrfx__common_1gaf356c97c2527d9ac57b04dd9f12fc9d3" kindref="member">NRFX_OFFSETOF</ref>(NRF_GRTC_Type,<sp/>EVENTS_COMPARE[cc_channel]);</highlight></codeline>
<codeline lineno="1317"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1318"><highlight class="normal"></highlight></codeline>
<codeline lineno="1319"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrf__grtc__hal_1ga7faf1283a0d67f2428ad6d8d6d03f53e" kindref="member">nrf_grtc_sys_counter_cc_enable_check</ref>(NRF_GRTC_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="1320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cc_channel)</highlight></codeline>
<codeline lineno="1321"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1322"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((p_reg-&gt;CC[cc_channel].CCEN<sp/>&amp;<sp/>GRTC_CC_CCEN_ACTIVE_Msk)<sp/>&gt;&gt;<sp/>GRTC_CC_CCEN_ACTIVE_Pos)<sp/>==</highlight></codeline>
<codeline lineno="1323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GRTC_CC_CCEN_ACTIVE_Enable;</highlight></codeline>
<codeline lineno="1324"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1325"><highlight class="normal"></highlight></codeline>
<codeline lineno="1326"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_GRTC_HAS_EXTENDED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1327"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__grtc__hal_1ga86af4577d105dafbdae927ed086b8b2f" kindref="member">nrf_grtc_sys_counter_set</ref>(NRF_GRTC_Type<sp/>*<sp/>p_reg,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>enable)</highlight></codeline>
<codeline lineno="1328"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1329"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;MODE<sp/>=<sp/>((p_reg-&gt;MODE<sp/>&amp;<sp/>~GRTC_MODE_SYSCOUNTEREN_Msk)<sp/>|</highlight></codeline>
<codeline lineno="1330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((enable<sp/>?<sp/>GRTC_MODE_SYSCOUNTEREN_Enabled<sp/>:</highlight></codeline>
<codeline lineno="1331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GRTC_MODE_SYSCOUNTEREN_Disabled)<sp/>&lt;&lt;<sp/>GRTC_MODE_SYSCOUNTEREN_Pos));</highlight></codeline>
<codeline lineno="1332"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1333"><highlight class="normal"></highlight></codeline>
<codeline lineno="1334"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__grtc__hal_1gaafb45e5bee0a2344906f9a02f4d59a71" kindref="member">nrf_grtc_sys_counter_auto_mode_set</ref>(NRF_GRTC_Type<sp/>*<sp/>p_reg,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>enable)</highlight></codeline>
<codeline lineno="1335"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1336"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;MODE<sp/>=<sp/>((p_reg-&gt;MODE<sp/>&amp;<sp/>~GRTC_MODE_AUTOEN_Msk)<sp/>|</highlight></codeline>
<codeline lineno="1337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((enable<sp/>?<sp/>GRTC_MODE_AUTOEN_CpuActive<sp/>:</highlight></codeline>
<codeline lineno="1338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GRTC_MODE_AUTOEN_Default)<sp/>&lt;&lt;<sp/>GRTC_MODE_AUTOEN_Pos));</highlight></codeline>
<codeline lineno="1339"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1340"><highlight class="normal"></highlight></codeline>
<codeline lineno="1341"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrf__grtc__hal_1ga9dab8e70b7c645b97fc70833003f4dda" kindref="member">nrf_grtc_sys_counter_auto_mode_check</ref>(NRF_GRTC_Type<sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="1342"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1343"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(p_reg-&gt;MODE<sp/>&amp;<sp/>GRTC_MODE_AUTOEN_Msk)<sp/>==<sp/>GRTC_MODE_AUTOEN_CpuActive;</highlight></codeline>
<codeline lineno="1344"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1345"><highlight class="normal"></highlight></codeline>
<codeline lineno="1346"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRF_GRTC_HAS_EXTENDED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1347"><highlight class="normal"></highlight></codeline>
<codeline lineno="1348"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrf__grtc__hal_1ga3289a3d075afcbc7b8562a8c5a48adae" kindref="member">nrf_grtc_sys_counter_check</ref>(NRF_GRTC_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="1349"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1350"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(p_reg-&gt;MODE<sp/>&amp;<sp/>GRTC_MODE_SYSCOUNTEREN_Msk)<sp/>?<sp/>true<sp/>:<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1351"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1352"><highlight class="normal"></highlight></codeline>
<codeline lineno="1353"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__grtc__hal_1gac0d0dba9e8fbfd84eef88aad1d048b86" kindref="member">nrf_grtc_sys_counter_active_state_request_set</ref>(NRF_GRTC_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="1354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>enable)</highlight></codeline>
<codeline lineno="1355"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1356"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(GRTC_KEEPRUNNING_DOMAIN0_Msk)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1357"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;KEEPRUNNING<sp/>=<sp/>((p_reg-&gt;KEEPRUNNING<sp/>&amp;</highlight></codeline>
<codeline lineno="1358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>~(GRTC_KEEPRUNNING_DOMAIN0_Active<sp/><sp/>&lt;&lt;<sp/><ref refid="group__nrf__grtc__hal_1ga71240f9b3bad3f5ca00b1c478e0d3031" kindref="member">NRF_GRTC_DOMAIN_INDEX</ref>))<sp/>|</highlight></codeline>
<codeline lineno="1359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((enable<sp/>?<sp/>GRTC_KEEPRUNNING_DOMAIN0_Active<sp/>:</highlight></codeline>
<codeline lineno="1360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GRTC_KEEPRUNNING_DOMAIN0_NotActive)<sp/>&lt;&lt;<sp/><ref refid="group__nrf__grtc__hal_1ga71240f9b3bad3f5ca00b1c478e0d3031" kindref="member">NRF_GRTC_DOMAIN_INDEX</ref>));</highlight></codeline>
<codeline lineno="1361"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1362"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;KEEPRUNNING<sp/>=<sp/>((p_reg-&gt;KEEPRUNNING<sp/>&amp;</highlight></codeline>
<codeline lineno="1363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>~(GRTC_KEEPRUNNING_REQUEST0_Active<sp/><sp/>&lt;&lt;<sp/><ref refid="group__nrf__grtc__hal_1ga71240f9b3bad3f5ca00b1c478e0d3031" kindref="member">NRF_GRTC_DOMAIN_INDEX</ref>))<sp/>|</highlight></codeline>
<codeline lineno="1364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((enable<sp/>?<sp/>GRTC_KEEPRUNNING_REQUEST0_Active<sp/>:</highlight></codeline>
<codeline lineno="1365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GRTC_KEEPRUNNING_REQUEST0_NotActive)<sp/>&lt;&lt;<sp/><ref refid="group__nrf__grtc__hal_1ga71240f9b3bad3f5ca00b1c478e0d3031" kindref="member">NRF_GRTC_DOMAIN_INDEX</ref>));</highlight></codeline>
<codeline lineno="1366"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1367"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1368"><highlight class="normal"></highlight></codeline>
<codeline lineno="1369"><highlight class="normal">NRF_STATIC_INLINE</highlight></codeline>
<codeline lineno="1370"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrf__grtc__hal_1gaa1f8757bb0c09e0bf86e0cdefa9af124" kindref="member">nrf_grtc_sys_counter_active_state_request_check</ref>(NRF_GRTC_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="1371"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1372"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(GRTC_KEEPRUNNING_DOMAIN0_Msk)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1373"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(p_reg-&gt;KEEPRUNNING<sp/>&amp;</highlight></codeline>
<codeline lineno="1374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(GRTC_KEEPRUNNING_DOMAIN0_Active<sp/>&lt;&lt;<sp/><ref refid="group__nrf__grtc__hal_1ga71240f9b3bad3f5ca00b1c478e0d3031" kindref="member">NRF_GRTC_DOMAIN_INDEX</ref>))<sp/>?<sp/>true<sp/>:<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1375"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1376"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(p_reg-&gt;KEEPRUNNING<sp/>&amp;</highlight></codeline>
<codeline lineno="1377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(GRTC_KEEPRUNNING_REQUEST0_Active<sp/>&lt;&lt;<sp/><ref refid="group__nrf__grtc__hal_1ga71240f9b3bad3f5ca00b1c478e0d3031" kindref="member">NRF_GRTC_DOMAIN_INDEX</ref>))<sp/>?<sp/>true<sp/>:<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1378"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1379"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1380"><highlight class="normal"></highlight></codeline>
<codeline lineno="1381"><highlight class="normal">NRF_STATIC_INLINE</highlight></codeline>
<codeline lineno="1382"><highlight class="normal">uint32_t<sp/><ref refid="group__nrf__grtc__hal_1ga26a1b100c80264f41628f7578e330d9f" kindref="member">nrf_grtc_sys_counter_active_state_request_get</ref>(NRF_GRTC_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="1383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mask)</highlight></codeline>
<codeline lineno="1384"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1385"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p_reg-&gt;KEEPRUNNING<sp/>&amp;<sp/>mask;</highlight></codeline>
<codeline lineno="1386"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1387"><highlight class="normal"></highlight></codeline>
<codeline lineno="1388"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_GRTC_HAS_EXTENDED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1389"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__grtc__hal_1ga467b68e18e9c2cfc248baf75b587810f" kindref="member">nrf_grtc_sys_counter_interval_set</ref>(NRF_GRTC_Type<sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>value)</highlight></codeline>
<codeline lineno="1390"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1391"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;INTERVAL<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="1392"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1393"><highlight class="normal"></highlight></codeline>
<codeline lineno="1394"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__grtc__hal_1ga2d1cad3bd0f794e0c8b5c9d5be80e813" kindref="member">nrf_grtc_sys_counter_interval_get</ref>(NRF_GRTC_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="1395"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1396"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p_reg-&gt;INTERVAL;</highlight></codeline>
<codeline lineno="1397"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1398"><highlight class="normal"></highlight></codeline>
<codeline lineno="1399"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__grtc__hal_1ga8b3480c8301f0beb550f8cf8247a3452" kindref="member">nrf_grtc_timeout_set</ref>(NRF_GRTC_Type<sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>value)</highlight></codeline>
<codeline lineno="1400"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1401"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__glue_1ga9698a3f6b6bea455d2b54a79e514ee36" kindref="member">NRFX_ASSERT</ref>(value<sp/>&lt;=<sp/><ref refid="group__nrf__grtc__hal_1ga083eb0824e3b84717948e630bfa13620" kindref="member">NRF_GRTC_TIMEOUT_MAX_VALUE</ref>);</highlight></codeline>
<codeline lineno="1402"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;TIMEOUT<sp/>=<sp/>(value<sp/>&lt;&lt;<sp/>GRTC_TIMEOUT_VALUE_Pos);</highlight></codeline>
<codeline lineno="1403"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1404"><highlight class="normal"></highlight></codeline>
<codeline lineno="1405"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__grtc__hal_1gae1ce6ee813308fce0a2901fb55459678" kindref="member">nrf_grtc_timeout_get</ref>(NRF_GRTC_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="1406"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1407"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(p_reg-&gt;TIMEOUT<sp/>&gt;&gt;<sp/>GRTC_TIMEOUT_VALUE_Pos);</highlight></codeline>
<codeline lineno="1408"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1409"><highlight class="normal"></highlight></codeline>
<codeline lineno="1410"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__grtc__hal_1gabf6543ddb24a2c79a2ef1ab8aeb335f1" kindref="member">nrf_grtc_waketime_set</ref>(NRF_GRTC_Type<sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>value)</highlight></codeline>
<codeline lineno="1411"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1412"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__glue_1ga9698a3f6b6bea455d2b54a79e514ee36" kindref="member">NRFX_ASSERT</ref>(value<sp/>&lt;=<sp/><ref refid="group__nrf__grtc__hal_1gad6bba458b2062f2579d0ba8870987f35" kindref="member">NRF_GRTC_WAKETIME_MAX_VALUE</ref>);</highlight></codeline>
<codeline lineno="1413"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;WAKETIME<sp/>=<sp/>(value<sp/>&lt;&lt;<sp/>GRTC_WAKETIME_VALUE_Pos);</highlight></codeline>
<codeline lineno="1414"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1415"><highlight class="normal"></highlight></codeline>
<codeline lineno="1416"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__grtc__hal_1ga19246ff59e790e2a5d11219c8ad60c8d" kindref="member">nrf_grtc_waketime_get</ref>(NRF_GRTC_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="1417"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1418"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(p_reg-&gt;WAKETIME<sp/>&gt;&gt;<sp/>GRTC_WAKETIME_VALUE_Pos);</highlight></codeline>
<codeline lineno="1419"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1420"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRF_GRTC_HAS_EXTENDED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1421"><highlight class="normal"></highlight></codeline>
<codeline lineno="1422"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_GRTC_HAS_PWM</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1423"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__grtc__hal_1ga421c91decb698f3e46897b94ad9ab4c9" kindref="member">nrf_grtc_pwm_compare_set</ref>(NRF_GRTC_Type<sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>value)</highlight></codeline>
<codeline lineno="1424"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1425"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;PWMCONFIG<sp/>=<sp/>(value<sp/>&lt;&lt;<sp/>GRTC_PWMCONFIG_COMPAREVALUE_Pos)<sp/>&amp;<sp/>GRTC_PWMCONFIG_COMPAREVALUE_Msk;</highlight></codeline>
<codeline lineno="1426"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1427"><highlight class="normal"></highlight></codeline>
<codeline lineno="1428"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__grtc__hal_1gae208d47c196fd01485ff5916d0c7a882" kindref="member">nrf_grtc_pwm_compare_get</ref>(NRF_GRTC_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="1429"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1430"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(p_reg-&gt;PWMCONFIG<sp/>&gt;&gt;<sp/>GRTC_PWMCONFIG_COMPAREVALUE_Pos);</highlight></codeline>
<codeline lineno="1431"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1432"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRF_GRTC_HAS_PWM</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1433"><highlight class="normal"></highlight></codeline>
<codeline lineno="1434"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_GRTC_HAS_CLKOUT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1435"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__grtc__hal_1gaecaf461188701a90c6be463db4298f9e" kindref="member">nrf_grtc_clkout_set</ref>(NRF_GRTC_Type<sp/>*<sp/><sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="1436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__grtc__hal_1gacdc216d006ac43c34a154cffdf0ca69a" kindref="member">nrf_grtc_clkout_t</ref><sp/>clkout,</highlight></codeline>
<codeline lineno="1437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>enable)</highlight></codeline>
<codeline lineno="1438"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1439"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(enable)</highlight></codeline>
<codeline lineno="1440"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_reg-&gt;CLKOUT<sp/>|=<sp/>(uint32_t)clkout;</highlight></codeline>
<codeline lineno="1442"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1443"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1444"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_reg-&gt;CLKOUT<sp/>&amp;=<sp/>~((uint32_t)clkout);</highlight></codeline>
<codeline lineno="1446"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1447"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1448"><highlight class="normal"></highlight></codeline>
<codeline lineno="1449"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrf__grtc__hal_1ga03419f816fcd0f2380d0b9e45d44e55c" kindref="member">nrf_grtc_clkout_enable_check</ref>(NRF_GRTC_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="1450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__grtc__hal_1gacdc216d006ac43c34a154cffdf0ca69a" kindref="member">nrf_grtc_clkout_t</ref><sp/><sp/><sp/><sp/><sp/>clkout)</highlight></codeline>
<codeline lineno="1451"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1452"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p_reg-&gt;CLKOUT<sp/>==<sp/>(uint32_t)clkout;</highlight></codeline>
<codeline lineno="1453"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1454"><highlight class="normal"></highlight></codeline>
<codeline lineno="1455"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__grtc__hal_1ga6aed79f13e1b69ba1a6d9167d2b876d4" kindref="member">nrf_grtc_clkout_divider_set</ref>(NRF_GRTC_Type<sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>value)</highlight></codeline>
<codeline lineno="1456"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1457"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__glue_1ga9698a3f6b6bea455d2b54a79e514ee36" kindref="member">NRFX_ASSERT</ref>(value<sp/>&lt;=<sp/><ref refid="group__nrf__grtc__hal_1ga10c0a45ec2f9543c7c13bdac2b65ee15" kindref="member">NRF_GRTC_CLKCFG_CLKFASTDIV_MAX_VALUE</ref>);</highlight></codeline>
<codeline lineno="1458"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;CLKCFG<sp/>=<sp/>(p_reg-&gt;CLKCFG<sp/>&amp;<sp/>~GRTC_CLKCFG_CLKFASTDIV_Msk)<sp/>|</highlight></codeline>
<codeline lineno="1459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((value<sp/>&amp;<sp/>GRTC_CLKCFG_CLKFASTDIV_Msk)<sp/>&lt;&lt;<sp/>GRTC_CLKCFG_CLKFASTDIV_Pos);</highlight></codeline>
<codeline lineno="1460"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1461"><highlight class="normal"></highlight></codeline>
<codeline lineno="1462"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__grtc__hal_1ga3371a887f116e28c9476de431d1145b3" kindref="member">nrf_grtc_clkout_divider_get</ref>(NRF_GRTC_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="1463"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1464"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(p_reg-&gt;CLKCFG<sp/>&amp;<sp/>GRTC_CLKCFG_CLKFASTDIV_Msk)<sp/>&gt;&gt;<sp/>GRTC_CLKCFG_CLKFASTDIV_Pos;</highlight></codeline>
<codeline lineno="1465"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1466"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRF_GRTC_HAS_CLKOUT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1467"><highlight class="normal"></highlight></codeline>
<codeline lineno="1468"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_GRTC_HAS_CLKSEL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1469"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__grtc__hal_1ga8210f5a14a3afcadf3c40435dcf0fed0" kindref="member">nrf_grtc_clksel_set</ref>(NRF_GRTC_Type<sp/>*<sp/>p_reg,<sp/><ref refid="group__nrf__grtc__hal_1gae439fae87a8f39984fe088a02960a7ae" kindref="member">nrf_grtc_clksel_t</ref><sp/>clksel)</highlight></codeline>
<codeline lineno="1470"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1471"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;CLKCFG<sp/>=<sp/>(p_reg-&gt;CLKCFG<sp/>&amp;<sp/>~GRTC_CLKCFG_CLKSEL_Msk)<sp/>|</highlight></codeline>
<codeline lineno="1472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(clksel<sp/>&lt;&lt;<sp/>GRTC_CLKCFG_CLKSEL_Pos);</highlight></codeline>
<codeline lineno="1473"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1474"><highlight class="normal"></highlight></codeline>
<codeline lineno="1475"><highlight class="normal">NRF_STATIC_INLINE<sp/><ref refid="group__nrf__grtc__hal_1gae439fae87a8f39984fe088a02960a7ae" kindref="member">nrf_grtc_clksel_t</ref><sp/><ref refid="group__nrf__grtc__hal_1ga3fc756bda45d4b3626a953c47540b635" kindref="member">nrf_grtc_clksel_get</ref>(NRF_GRTC_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="1476"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1477"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="group__nrf__grtc__hal_1gae439fae87a8f39984fe088a02960a7ae" kindref="member">nrf_grtc_clksel_t</ref>)((p_reg-&gt;CLKCFG<sp/>&amp;<sp/>GRTC_CLKCFG_CLKSEL_Msk)<sp/>&gt;&gt;<sp/>GRTC_CLKCFG_CLKSEL_Pos);</highlight></codeline>
<codeline lineno="1478"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1479"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRF_GRTC_HAS_CLKSEL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1480"><highlight class="normal"></highlight></codeline>
<codeline lineno="1481"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRF_DECLARE_ONLY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1482"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1483"><highlight class="comment">/**<sp/>@}<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1484"><highlight class="normal"></highlight></codeline>
<codeline lineno="1485"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1486"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1487"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1488"><highlight class="normal"></highlight></codeline>
<codeline lineno="1489"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">/*<sp/>NRF_GRTC_H<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="hal/nrf_grtc.h"/>
  </compounddef>
</doxygen>
