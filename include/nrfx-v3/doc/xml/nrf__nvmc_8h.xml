<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="nrf__nvmc_8h" kind="file" language="C++">
    <compoundname>nrf_nvmc.h</compoundname>
    <includes local="no">nrfx.h</includes>
    <includedby refid="nrfx__nvmc_8h" local="no">drivers/include/nrfx_nvmc.h</includedby>
    <incdepgraph>
      <node id="1">
        <label>hal/nrf_nvmc.h</label>
        <link refid="nrf__nvmc_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>nrfx.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__nrf__nvmc__hal_1ga801933a612f33b1059baa9fd679ffa87" prot="public" static="no">
        <name>NRF_NVMC_HAS_PARTIAL_ERASE</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Symbol indicating whether the option of page partial erase is present. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_nvmc.h" line="53" column="9" bodyfile="hal/nrf_nvmc.h" bodystart="53" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__nvmc__hal_1ga63cb0ce6ce24e24265ac5fa55e59bfe0" prot="public" static="no">
        <name>NRF_NVMC_HAS_NON_SECURE_OPERATIONS</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Symbol indicating whether NVMC has non-secure operations available. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_nvmc.h" line="60" column="9" bodyfile="hal/nrf_nvmc.h" bodystart="60" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__nvmc__hal_1ga569f41183f91a364679fc233d41a1a16" prot="public" static="no">
        <name>NRF_NVMC_HAS_UICR_ERASE</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Symbol indicating whether NVMC has UICR erase available. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_nvmc.h" line="67" column="9" bodyfile="hal/nrf_nvmc.h" bodystart="67" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="group__nrf__nvmc__hal_1gadd8e7bdd401ca26af7508dcbfd4a2093" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_nvmc_mode_t</name>
        <enumvalue id="group__nrf__nvmc__hal_1ggadd8e7bdd401ca26af7508dcbfd4a2093ad9e348b8c60e57c585195adce0b6e287" prot="public">
          <name>NRF_NVMC_MODE_READONLY</name>
          <initializer>= NVMC_CONFIG_WEN_Ren</initializer>
          <briefdescription>
<para>NVMC in read-only mode. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__nvmc__hal_1ggadd8e7bdd401ca26af7508dcbfd4a2093a0c013764d189a713da5fa6cf5c774a77" prot="public">
          <name>NRF_NVMC_MODE_WRITE</name>
          <initializer>= NVMC_CONFIG_WEN_Wen</initializer>
          <briefdescription>
<para>NVMC in read and write mode. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__nvmc__hal_1ggadd8e7bdd401ca26af7508dcbfd4a2093a69c07e225b5074eddfedc98890bfe9f2" prot="public">
          <name>NRF_NVMC_MODE_ERASE</name>
          <initializer>= NVMC_CONFIG_WEN_Een</initializer>
          <briefdescription>
<para>NVMC in read and erase mode. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>NVMC modes. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_nvmc.h" line="73" column="1" bodyfile="hal/nrf_nvmc.h" bodystart="74" bodyend="81"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__nvmc__hal_1ga7f92280a47a13401338ba73ed480fffe" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_nvmc_ns_mode_t</name>
        <enumvalue id="group__nrf__nvmc__hal_1gga7f92280a47a13401338ba73ed480fffea991f2583d6b0fdc010a2bf76603f29a6" prot="public">
          <name>NRF_NVMC_NS_MODE_READONLY</name>
          <initializer>= NVMC_CONFIGNS_WEN_Ren</initializer>
          <briefdescription>
<para>Non-secure NVMC in read-only mode. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__nvmc__hal_1gga7f92280a47a13401338ba73ed480fffea6a7e8f18433f84c44b7d37f5f48b4e97" prot="public">
          <name>NRF_NVMC_NS_MODE_WRITE</name>
          <initializer>= NVMC_CONFIGNS_WEN_Wen</initializer>
          <briefdescription>
<para>Non-secure NVMC in read and write mode. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__nvmc__hal_1gga7f92280a47a13401338ba73ed480fffeafd4a277f2a174ecbd77f8976c789336d" prot="public">
          <name>NRF_NVMC_NS_MODE_ERASE</name>
          <initializer>= NVMC_CONFIGNS_WEN_Een</initializer>
          <briefdescription>
<para>Non-secure NVMC in read and erase mode. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Non-secure NVMC modes. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_nvmc.h" line="85" column="1" bodyfile="hal/nrf_nvmc.h" bodystart="86" bodyend="90"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__nrf__nvmc__hal_1ga5338a0810739ba1ff51d4c93c480bbd8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE bool</type>
        <definition>NRF_STATIC_INLINE bool nrf_nvmc_ready_check</definition>
        <argsstring>(NRF_NVMC_Type const *p_reg)</argsstring>
        <name>nrf_nvmc_ready_check</name>
        <param>
          <type>NRF_NVMC_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for checking if NVMC is ready to perform write or erase operation. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>NVMC can perform write or erase. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>NVMC is busy and cannot perform next operation yet. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_nvmc.h" line="349" column="24" bodyfile="hal/nrf_nvmc.h" bodystart="349" bodyend="352" declfile="hal/nrf_nvmc.h" declline="112" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__nvmc__hal_1gac7c938d59c2ce5bb85ef9b0c48ea8914" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE bool</type>
        <definition>NRF_STATIC_INLINE bool nrf_nvmc_write_ready_check</definition>
        <argsstring>(NRF_NVMC_Type const *p_reg)</argsstring>
        <name>nrf_nvmc_write_ready_check</name>
        <param>
          <type>NRF_NVMC_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for checking if NVMC is ready to accept the next write operation. </para>
        </briefdescription>
        <detaileddescription>
<para>NVM writing time can be reduced by using this function.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>NVMC can accept the next write. It will be buffered and will be taken into account as soon as the ongoing write operation is completed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>NVMC is busy and cannot accept the next write yet. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_nvmc.h" line="126" column="24" declfile="hal/nrf_nvmc.h" declline="126" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__nvmc__hal_1ga72962131a72ba80c5d7593c2e87084bf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_nvmc_mode_set</definition>
        <argsstring>(NRF_NVMC_Type *p_reg, nrf_nvmc_mode_t mode)</argsstring>
        <name>nrf_nvmc_mode_set</name>
        <param>
          <type>NRF_NVMC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__nvmc__hal_1gadd8e7bdd401ca26af7508dcbfd4a2093" kindref="member">nrf_nvmc_mode_t</ref></type>
          <declname>mode</declname>
        </param>
        <briefdescription>
<para>Function for setting the NVMC mode. </para>
        </briefdescription>
        <detaileddescription>
<para>Only activate erase and write modes when they are actively used. If Instruction Cache (ICache) is present, enabling write or erase will invalidate the cache and keep it invalidated.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mode</parametername>
</parameternamelist>
<parameterdescription>
<para>Desired operating mode for NVMC. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_nvmc.h" line="361" column="24" bodyfile="hal/nrf_nvmc.h" bodystart="361" bodyend="365" declfile="hal/nrf_nvmc.h" declline="139" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__nvmc__hal_1ga97f46fa7d02746b9a73a3e198278a5fa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_nvmc_nonsecure_mode_set</definition>
        <argsstring>(NRF_NVMC_Type *p_reg, nrf_nvmc_ns_mode_t mode)</argsstring>
        <name>nrf_nvmc_nonsecure_mode_set</name>
        <param>
          <type>NRF_NVMC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__nvmc__hal_1ga7f92280a47a13401338ba73ed480fffe" kindref="member">nrf_nvmc_ns_mode_t</ref></type>
          <declname>mode</declname>
        </param>
        <briefdescription>
<para>Function for setting the NVMC mode for non-secure Flash page operations. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mode</parametername>
</parameternamelist>
<parameterdescription>
<para>Desired operating mode for NVMC. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_nvmc.h" line="368" column="24" bodyfile="hal/nrf_nvmc.h" bodystart="368" bodyend="372" declfile="hal/nrf_nvmc.h" declline="149" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__nvmc__hal_1ga23eec382fbfdcf74e56bccbb4d278414" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_nvmc_word_write</definition>
        <argsstring>(uint32_t address, uint32_t value)</argsstring>
        <name>nrf_nvmc_word_write</name>
        <param>
          <type>uint32_t</type>
          <declname>address</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Function for writing a 32-bit word to flash. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Before calling this function, the caller must ensure that:<itemizedlist>
<listitem><para>the <computeroutput>address</computeroutput> is word-aligned,</para>
</listitem><listitem><para>write mode is enabled, using <ref refid="group__nrf__nvmc__hal_1ga72962131a72ba80c5d7593c2e87084bf" kindref="member">nrf_nvmc_mode_set</ref>,</para>
</listitem><listitem><para>the NVMC is ready to accept another write, using <ref refid="group__nrf__nvmc__hal_1ga5338a0810739ba1ff51d4c93c480bbd8" kindref="member">nrf_nvmc_ready_check</ref> or <ref refid="group__nrf__nvmc__hal_1gac7c938d59c2ce5bb85ef9b0c48ea8914" kindref="member">nrf_nvmc_write_ready_check</ref>,</para>
</listitem><listitem><para>read-only mode is enabled as soon as writing is no longer needed, using <ref refid="group__nrf__nvmc__hal_1ga72962131a72ba80c5d7593c2e87084bf" kindref="member">nrf_nvmc_mode_set</ref>.</para>
</listitem></itemizedlist>
</para>
</simplesect>
<simplesect kind="warning"><para>It is recommended to use <ref refid="group__nrfx__nvmc_1ga61cfb10bcc72814ebf0dc04629fc4bcf" kindref="member">nrfx_nvmc_word_write</ref> function instead.</para>
</simplesect>
Using this function when accessing the flash gives the possibility to run the code in an environment where the flash is simulated.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">address</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the word to write. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to write. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_nvmc.h" line="375" column="24" bodyfile="hal/nrf_nvmc.h" bodystart="375" bodyend="379" declfile="hal/nrf_nvmc.h" declline="172" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__nvmc__hal_1gaa30963626fd8d7c46cb88aedbff72aee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint8_t</type>
        <definition>NRF_STATIC_INLINE uint8_t nrf_nvmc_byte_read</definition>
        <argsstring>(uint32_t address)</argsstring>
        <name>nrf_nvmc_byte_read</name>
        <param>
          <type>uint32_t</type>
          <declname>address</declname>
        </param>
        <briefdescription>
<para>Function for reading a byte from the flash. </para>
        </briefdescription>
        <detaileddescription>
<para>Using this function when accessing the flash gives the possibility to run the code in an environment where the flash is simulated.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">address</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the byte to read.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Value read from flash. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_nvmc.h" line="381" column="27" bodyfile="hal/nrf_nvmc.h" bodystart="381" bodyend="384" declfile="hal/nrf_nvmc.h" declline="185" declcolumn="27"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__nvmc__hal_1ga0cf39c0c69c6239940d137fe24fa80fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint16_t</type>
        <definition>NRF_STATIC_INLINE uint16_t nrf_nvmc_halfword_read</definition>
        <argsstring>(uint32_t address)</argsstring>
        <name>nrf_nvmc_halfword_read</name>
        <param>
          <type>uint32_t</type>
          <declname>address</declname>
        </param>
        <briefdescription>
<para>Function for reading a 16-bit halfword from the flash. </para>
        </briefdescription>
        <detaileddescription>
<para>Using this function when accessing the flash gives the possibility to run the code in an environment where the flash is simulated.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">address</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the halfword to read.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Value read from flash. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_nvmc.h" line="386" column="28" bodyfile="hal/nrf_nvmc.h" bodystart="386" bodyend="389" declfile="hal/nrf_nvmc.h" declline="197" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__nvmc__hal_1ga2bd87d25a19f94631db849feaafa50b3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_nvmc_word_read</definition>
        <argsstring>(uint32_t address)</argsstring>
        <name>nrf_nvmc_word_read</name>
        <param>
          <type>uint32_t</type>
          <declname>address</declname>
        </param>
        <briefdescription>
<para>Function for reading a 32-bit word from the flash. </para>
        </briefdescription>
        <detaileddescription>
<para>Using this function when accessing the flash gives the possibility to run the code in an environment where the flash is simulated.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">address</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the word to read.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Value read from flash. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_nvmc.h" line="391" column="28" bodyfile="hal/nrf_nvmc.h" bodystart="391" bodyend="394" declfile="hal/nrf_nvmc.h" declline="209" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__nvmc__hal_1ga249d5651b5e4a80ca818bc360420812f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_nvmc_buffer_read</definition>
        <argsstring>(void *dst, uint32_t address, uint32_t num_bytes)</argsstring>
        <name>nrf_nvmc_buffer_read</name>
        <param>
          <type>void *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>address</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>num_bytes</declname>
        </param>
        <briefdescription>
<para>Function for reading a given number of bytes from the flash into the specified buffer. </para>
        </briefdescription>
        <detaileddescription>
<para>Using this function when accessing the flash gives the possibility to run the code in an environment where the flash is simulated.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">dst</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the buffer to store the data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">address</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the first byte to read. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">num_bytes</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bytes to read. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_nvmc.h" line="396" column="24" bodyfile="hal/nrf_nvmc.h" bodystart="396" bodyend="401" declfile="hal/nrf_nvmc.h" declline="222" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__nvmc__hal_1gaaf4332d291e31155374dc0279b60cb22" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_nvmc_page_erase_start</definition>
        <argsstring>(NRF_NVMC_Type *p_reg, uint32_t page_addr)</argsstring>
        <name>nrf_nvmc_page_erase_start</name>
        <param>
          <type>NRF_NVMC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>page_addr</declname>
        </param>
        <briefdescription>
<para>Function for starting a single page erase in the Flash memory. </para>
        </briefdescription>
        <detaileddescription>
<para>The NVMC mode must be correctly configured with <ref refid="group__nrf__nvmc__hal_1ga72962131a72ba80c5d7593c2e87084bf" kindref="member">nrf_nvmc_mode_set</ref> before starting the erase operation.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">page_addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the first word of the page to erase. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_nvmc.h" line="403" column="24" bodyfile="hal/nrf_nvmc.h" bodystart="403" bodyend="429" declfile="hal/nrf_nvmc.h" declline="235" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__nvmc__hal_1ga2a8ab271b7b62703cd6c8a23a2341361" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_nvmc_uicr_erase_start</definition>
        <argsstring>(NRF_NVMC_Type *p_reg)</argsstring>
        <name>nrf_nvmc_uicr_erase_start</name>
        <param>
          <type>NRF_NVMC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for starting the user information configuration registers (UICR) erase. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_nvmc.h" line="432" column="24" bodyfile="hal/nrf_nvmc.h" bodystart="432" bodyend="435" declfile="hal/nrf_nvmc.h" declline="244" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__nvmc__hal_1ga6ee7aac11f652c4bcc280569630312c9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_nvmc_erase_all_start</definition>
        <argsstring>(NRF_NVMC_Type *p_reg)</argsstring>
        <name>nrf_nvmc_erase_all_start</name>
        <param>
          <type>NRF_NVMC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for starting the erase of the whole NVM, including UICR. </para>
        </briefdescription>
        <detaileddescription>
<para>This function purges all user code.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_nvmc.h" line="438" column="24" bodyfile="hal/nrf_nvmc.h" bodystart="438" bodyend="441" declfile="hal/nrf_nvmc.h" declline="254" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__nvmc__hal_1gac09f0719d89ad320e0d9a218913fea5b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_nvmc_partial_erase_duration_set</definition>
        <argsstring>(NRF_NVMC_Type *p_reg, uint32_t duration_ms)</argsstring>
        <name>nrf_nvmc_partial_erase_duration_set</name>
        <param>
          <type>NRF_NVMC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>duration_ms</declname>
        </param>
        <briefdescription>
<para>Function for configuring the page partial erase duration in milliseconds. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">duration_ms</parametername>
</parameternamelist>
<parameterdescription>
<para>Page partial erase duration in milliseconds. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_nvmc.h" line="444" column="24" bodyfile="hal/nrf_nvmc.h" bodystart="444" bodyend="448" declfile="hal/nrf_nvmc.h" declline="263" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__nvmc__hal_1gad3feaf7f91e992008d03f17ffcfd6fc9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_nvmc_partial_erase_duration_get</definition>
        <argsstring>(NRF_NVMC_Type const *p_reg)</argsstring>
        <name>nrf_nvmc_partial_erase_duration_get</name>
        <param>
          <type>NRF_NVMC_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting the current setting for the page partial erase duration. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>Interval</parametername>
</parameternamelist>
<parameterdescription>
<para>duration setting in milliseconds. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_nvmc.h" line="450" column="28" bodyfile="hal/nrf_nvmc.h" bodystart="450" bodyend="453" declfile="hal/nrf_nvmc.h" declline="273" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__nvmc__hal_1ga62b50be6f82d09ecb013d54c83b88b1c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_nvmc_page_partial_erase_start</definition>
        <argsstring>(NRF_NVMC_Type *p_reg, uint32_t page_addr)</argsstring>
        <name>nrf_nvmc_page_partial_erase_start</name>
        <param>
          <type>NRF_NVMC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>page_addr</declname>
        </param>
        <briefdescription>
<para>Function for starting a partial erase operation. </para>
        </briefdescription>
        <detaileddescription>
<para>It must be called successively until the page erase time is reached.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">page_addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the first word of the page to erase. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_nvmc.h" line="455" column="24" bodyfile="hal/nrf_nvmc.h" bodystart="455" bodyend="465" declfile="hal/nrf_nvmc.h" declline="283" declcolumn="24"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2012<sp/>-<sp/>2024,<sp/>Nordic<sp/>Semiconductor<sp/>ASA</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>All<sp/>rights<sp/>reserved.</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>SPDX-License-Identifier:<sp/>BSD-3-Clause</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions<sp/>are<sp/>met:</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>1.<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright<sp/>notice,<sp/>this</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>2.<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the<sp/>distribution.</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/>3.<sp/>Neither<sp/>the<sp/>name<sp/>of<sp/>the<sp/>copyright<sp/>holder<sp/>nor<sp/>the<sp/>names<sp/>of<sp/>its</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>contributors<sp/>may<sp/>be<sp/>used<sp/>to<sp/>endorse<sp/>or<sp/>promote<sp/>products<sp/>derived<sp/>from<sp/>this</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>software<sp/>without<sp/>specific<sp/>prior<sp/>written<sp/>permission.</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>COPYRIGHT<sp/>HOLDERS<sp/>AND<sp/>CONTRIBUTORS<sp/>&quot;AS<sp/>IS&quot;</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/>AND<sp/>ANY<sp/>EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>THE</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*<sp/>ARE<sp/>DISCLAIMED.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>COPYRIGHT<sp/>HOLDER<sp/>OR<sp/>CONTRIBUTORS<sp/>BE</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,<sp/>SPECIAL,<sp/>EXEMPLARY,<sp/>OR</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>PROCUREMENT<sp/>OF</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>*<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,<sp/>DATA,<sp/>OR<sp/>PROFITS;<sp/>OR<sp/>BUSINESS</highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/>*<sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY<sp/>THEORY<sp/>OF<sp/>LIABILITY,<sp/>WHETHER<sp/>IN</highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/>*<sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR<sp/>OTHERWISE)</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/>*<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE<sp/>OF<sp/>THIS<sp/>SOFTWARE,<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/>*<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight></codeline>
<codeline lineno="32"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>NRF_NVMC_H__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_NVMC_H__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;nrfx.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="43"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="44"><highlight class="comment"><sp/>*<sp/>@defgroup<sp/>nrf_nvmc_hal<sp/>NVMC<sp/>HAL</highlight></codeline>
<codeline lineno="45"><highlight class="comment"><sp/>*<sp/>@{</highlight></codeline>
<codeline lineno="46"><highlight class="comment"><sp/>*<sp/>@ingroup<sp/>nrf_nvmc</highlight></codeline>
<codeline lineno="47"><highlight class="comment"><sp/>*<sp/>@brief<sp/><sp/><sp/>Hardware<sp/>access<sp/>layer<sp/>(HAL)<sp/>for<sp/>managing<sp/>the<sp/>Non-Volatile<sp/>Memory<sp/>Controller<sp/>(NVMC)<sp/>peripheral.</highlight></codeline>
<codeline lineno="48"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(NVMC_ERASEPAGEPARTIALCFG_DURATION_Msk)<sp/>||<sp/>defined(NVMC_CONFIG_WEN_PEen)<sp/>||<sp/>\</highlight></codeline>
<codeline lineno="51"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="52"><highlight class="comment">/**<sp/>@brief<sp/>Symbol<sp/>indicating<sp/>whether<sp/>the<sp/>option<sp/>of<sp/>page<sp/>partial<sp/>erase<sp/>is<sp/>present.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_NVMC_HAS_PARTIAL_ERASE<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_NVMC_HAS_PARTIAL_ERASE<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(NVMC_CONFIGNS_WEN_Msk)<sp/>||<sp/>defined<sp/>(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="59"><highlight class="comment">/**<sp/>@brief<sp/>Symbol<sp/>indicating<sp/>whether<sp/>NVMC<sp/>has<sp/>non-secure<sp/>operations<sp/>available.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_NVMC_HAS_NON_SECURE_OPERATIONS<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_NVMC_HAS_NON_SECURE_OPERATIONS<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(NVMC_ERASEUICR_ERASEUICR_Msk)<sp/>||<sp/>defined<sp/>(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="66"><highlight class="comment">/**<sp/>@brief<sp/>Symbol<sp/>indicating<sp/>whether<sp/>NVMC<sp/>has<sp/>UICR<sp/>erase<sp/>available.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_NVMC_HAS_UICR_ERASE<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_NVMC_HAS_UICR_ERASE<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="72"><highlight class="comment">/**<sp/>@brief<sp/>NVMC<sp/>modes.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal">{</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__nvmc__hal_1ggadd8e7bdd401ca26af7508dcbfd4a2093ad9e348b8c60e57c585195adce0b6e287" kindref="member">NRF_NVMC_MODE_READONLY</ref><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>NVMC_CONFIG_WEN_Ren,<sp/></highlight><highlight class="comment">///&lt;<sp/>NVMC<sp/>in<sp/>read-only<sp/>mode.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__nvmc__hal_1ggadd8e7bdd401ca26af7508dcbfd4a2093a0c013764d189a713da5fa6cf5c774a77" kindref="member">NRF_NVMC_MODE_WRITE</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>NVMC_CONFIG_WEN_Wen,<sp/></highlight><highlight class="comment">///&lt;<sp/>NVMC<sp/>in<sp/>read<sp/>and<sp/>write<sp/>mode.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__nvmc__hal_1ggadd8e7bdd401ca26af7508dcbfd4a2093a69c07e225b5074eddfedc98890bfe9f2" kindref="member">NRF_NVMC_MODE_ERASE</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>NVMC_CONFIG_WEN_Een,<sp/></highlight><highlight class="comment">///&lt;<sp/>NVMC<sp/>in<sp/>read<sp/>and<sp/>erase<sp/>mode.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(NVMC_CONFIG_WEN_PEen)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/>NRF_NVMC_MODE_PARTIAL_ERASE<sp/>=<sp/>NVMC_CONFIG_WEN_PEen<sp/></highlight><highlight class="comment">///&lt;<sp/>NVMC<sp/>in<sp/>read<sp/>and<sp/>partial<sp/>erase<sp/>mode.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal">}<sp/><ref refid="group__nrf__nvmc__hal_1gadd8e7bdd401ca26af7508dcbfd4a2093" kindref="member">nrf_nvmc_mode_t</ref>;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_NVMC_HAS_NON_SECURE_OPERATIONS</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="84"><highlight class="comment">/**<sp/>@brief<sp/>Non-secure<sp/>NVMC<sp/>modes.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal">{</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__nvmc__hal_1gga7f92280a47a13401338ba73ed480fffea991f2583d6b0fdc010a2bf76603f29a6" kindref="member">NRF_NVMC_NS_MODE_READONLY</ref><sp/>=<sp/>NVMC_CONFIGNS_WEN_Ren,<sp/></highlight><highlight class="comment">///&lt;<sp/>Non-secure<sp/>NVMC<sp/>in<sp/>read-only<sp/>mode.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__nvmc__hal_1gga7f92280a47a13401338ba73ed480fffea6a7e8f18433f84c44b7d37f5f48b4e97" kindref="member">NRF_NVMC_NS_MODE_WRITE</ref><sp/><sp/><sp/><sp/>=<sp/>NVMC_CONFIGNS_WEN_Wen,<sp/></highlight><highlight class="comment">///&lt;<sp/>Non-secure<sp/>NVMC<sp/>in<sp/>read<sp/>and<sp/>write<sp/>mode.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__nvmc__hal_1gga7f92280a47a13401338ba73ed480fffeafd4a277f2a174ecbd77f8976c789336d" kindref="member">NRF_NVMC_NS_MODE_ERASE</ref><sp/><sp/><sp/><sp/>=<sp/>NVMC_CONFIGNS_WEN_Een,<sp/></highlight><highlight class="comment">///&lt;<sp/>Non-secure<sp/>NVMC<sp/>in<sp/>read<sp/>and<sp/>erase<sp/>mode.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal">}<sp/><ref refid="group__nrf__nvmc__hal_1ga7f92280a47a13401338ba73ed480fffe" kindref="member">nrf_nvmc_ns_mode_t</ref>;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(NVMC_FEATURE_CACHE_PRESENT)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="94"><highlight class="comment">/**<sp/>@brief<sp/>NVMC<sp/>ICache<sp/>configuration.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal">{</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/>NRF_NVMC_ICACHE_DISABLE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>NVMC_ICACHECNF_CACHEEN_Disabled,<sp/></highlight><highlight class="comment">///&lt;<sp/>Instruction<sp/>Cache<sp/>disabled.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/>NRF_NVMC_ICACHE_ENABLE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>NVMC_ICACHECNF_CACHEEN_Enabled,<sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Instruction<sp/>Cache<sp/>enabled.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/>NRF_NVMC_ICACHE_ENABLE_WITH_PROFILING<sp/>=<sp/>NVMC_ICACHECNF_CACHEEN_Enabled<sp/>|<sp/></highlight><highlight class="comment">///&lt;<sp/>Instruction<sp/>Cache<sp/>with<sp/>cache<sp/>profiling<sp/>enabled.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NVMC_ICACHECNF_CACHEPROFEN_Msk</highlight></codeline>
<codeline lineno="101"><highlight class="normal">}<sp/>nrf_nvmc_icache_config_t;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>defined(NVMC_FEATURE_CACHE_PRESENT)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="104"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="105"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>checking<sp/>if<sp/>NVMC<sp/>is<sp/>ready<sp/>to<sp/>perform<sp/>write<sp/>or<sp/>erase<sp/>operation.</highlight></codeline>
<codeline lineno="106"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="107"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="108"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="109"><highlight class="comment"><sp/>*<sp/>@retval<sp/>true<sp/><sp/>NVMC<sp/>can<sp/>perform<sp/>write<sp/>or<sp/>erase.</highlight></codeline>
<codeline lineno="110"><highlight class="comment"><sp/>*<sp/>@retval<sp/>false<sp/>NVMC<sp/>is<sp/>busy<sp/>and<sp/>cannot<sp/>perform<sp/>next<sp/>operation<sp/>yet.</highlight></codeline>
<codeline lineno="111"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrf__nvmc__hal_1ga5338a0810739ba1ff51d4c93c480bbd8" kindref="member">nrf_nvmc_ready_check</ref>(NRF_NVMC_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(NVMC_READYNEXT_READYNEXT_Msk)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="115"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="116"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>checking<sp/>if<sp/>NVMC<sp/>is<sp/>ready<sp/>to<sp/>accept<sp/>the<sp/>next<sp/>write<sp/>operation.</highlight></codeline>
<codeline lineno="117"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="118"><highlight class="comment"><sp/>*<sp/>NVM<sp/>writing<sp/>time<sp/>can<sp/>be<sp/>reduced<sp/>by<sp/>using<sp/>this<sp/>function.</highlight></codeline>
<codeline lineno="119"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="120"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="121"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="122"><highlight class="comment"><sp/>*<sp/>@retval<sp/>true<sp/><sp/>NVMC<sp/>can<sp/>accept<sp/>the<sp/>next<sp/>write.<sp/>It<sp/>will<sp/>be<sp/>buffered<sp/>and<sp/>will<sp/>be<sp/>taken</highlight></codeline>
<codeline lineno="123"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>into<sp/>account<sp/>as<sp/>soon<sp/>as<sp/>the<sp/>ongoing<sp/>write<sp/>operation<sp/>is<sp/>completed.</highlight></codeline>
<codeline lineno="124"><highlight class="comment"><sp/>*<sp/>@retval<sp/>false<sp/>NVMC<sp/>is<sp/>busy<sp/>and<sp/>cannot<sp/>accept<sp/>the<sp/>next<sp/>write<sp/>yet.</highlight></codeline>
<codeline lineno="125"><highlight class="comment"><sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrf__nvmc__hal_1gac7c938d59c2ce5bb85ef9b0c48ea8914" kindref="member">nrf_nvmc_write_ready_check</ref>(NRF_NVMC_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>defined(NVMC_READYNEXT_READYNEXT_Msk)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="129"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="130"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>the<sp/>NVMC<sp/>mode.</highlight></codeline>
<codeline lineno="131"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="132"><highlight class="comment"><sp/>*<sp/>Only<sp/>activate<sp/>erase<sp/>and<sp/>write<sp/>modes<sp/>when<sp/>they<sp/>are<sp/>actively<sp/>used.</highlight></codeline>
<codeline lineno="133"><highlight class="comment"><sp/>*<sp/>If<sp/>Instruction<sp/>Cache<sp/>(ICache)<sp/>is<sp/>present,<sp/>enabling<sp/>write<sp/>or<sp/>erase<sp/>will</highlight></codeline>
<codeline lineno="134"><highlight class="comment"><sp/>*<sp/>invalidate<sp/>the<sp/>cache<sp/>and<sp/>keep<sp/>it<sp/>invalidated.</highlight></codeline>
<codeline lineno="135"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="136"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="137"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>mode<sp/><sp/>Desired<sp/>operating<sp/>mode<sp/>for<sp/>NVMC.</highlight></codeline>
<codeline lineno="138"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__nvmc__hal_1ga72962131a72ba80c5d7593c2e87084bf" kindref="member">nrf_nvmc_mode_set</ref>(NRF_NVMC_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__nvmc__hal_1gadd8e7bdd401ca26af7508dcbfd4a2093" kindref="member">nrf_nvmc_mode_t</ref><sp/>mode);</highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_NVMC_HAS_NON_SECURE_OPERATIONS</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="143"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="144"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>the<sp/>NVMC<sp/>mode<sp/>for<sp/>non-secure<sp/>Flash<sp/>page<sp/>operations.</highlight></codeline>
<codeline lineno="145"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="146"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="147"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>mode<sp/><sp/>Desired<sp/>operating<sp/>mode<sp/>for<sp/>NVMC.</highlight></codeline>
<codeline lineno="148"><highlight class="comment"><sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__nvmc__hal_1ga97f46fa7d02746b9a73a3e198278a5fa" kindref="member">nrf_nvmc_nonsecure_mode_set</ref>(NRF_NVMC_Type<sp/>*<sp/><sp/><sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__nvmc__hal_1ga7f92280a47a13401338ba73ed480fffe" kindref="member">nrf_nvmc_ns_mode_t</ref><sp/>mode);</highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="153"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="154"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>writing<sp/>a<sp/>32-bit<sp/>word<sp/>to<sp/>flash.</highlight></codeline>
<codeline lineno="155"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="156"><highlight class="comment"><sp/>*<sp/>@note<sp/>Before<sp/>calling<sp/>this<sp/>function,<sp/>the<sp/>caller<sp/>must<sp/>ensure<sp/>that:</highlight></codeline>
<codeline lineno="157"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>-<sp/>the<sp/>@p<sp/>address<sp/>is<sp/>word-aligned,</highlight></codeline>
<codeline lineno="158"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>-<sp/>write<sp/>mode<sp/>is<sp/>enabled,<sp/>using<sp/>@ref<sp/>nrf_nvmc_mode_set,</highlight></codeline>
<codeline lineno="159"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>-<sp/>the<sp/>NVMC<sp/>is<sp/>ready<sp/>to<sp/>accept<sp/>another<sp/>write,<sp/>using</highlight></codeline>
<codeline lineno="160"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>@ref<sp/>nrf_nvmc_ready_check<sp/>or<sp/>@ref<sp/>nrf_nvmc_write_ready_check,</highlight></codeline>
<codeline lineno="161"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>-<sp/>read-only<sp/>mode<sp/>is<sp/>enabled<sp/>as<sp/>soon<sp/>as<sp/>writing<sp/>is<sp/>no<sp/>longer<sp/>needed,</highlight></codeline>
<codeline lineno="162"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>using<sp/>@ref<sp/>nrf_nvmc_mode_set.</highlight></codeline>
<codeline lineno="163"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="164"><highlight class="comment"><sp/>*<sp/>@warning<sp/>It<sp/>is<sp/>recommended<sp/>to<sp/>use<sp/>@ref<sp/>nrfx_nvmc_word_write<sp/>function<sp/>instead.</highlight></codeline>
<codeline lineno="165"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="166"><highlight class="comment"><sp/>*<sp/>Using<sp/>this<sp/>function<sp/>when<sp/>accessing<sp/>the<sp/>flash<sp/>gives<sp/>the<sp/>possibility</highlight></codeline>
<codeline lineno="167"><highlight class="comment"><sp/>*<sp/>to<sp/>run<sp/>the<sp/>code<sp/>in<sp/>an<sp/>environment<sp/>where<sp/>the<sp/>flash<sp/>is<sp/>simulated.</highlight></codeline>
<codeline lineno="168"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="169"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>address<sp/><sp/>Address<sp/>of<sp/>the<sp/>word<sp/>to<sp/>write.</highlight></codeline>
<codeline lineno="170"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>value<sp/><sp/><sp/><sp/>Value<sp/>to<sp/>write.</highlight></codeline>
<codeline lineno="171"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__nvmc__hal_1ga23eec382fbfdcf74e56bccbb4d278414" kindref="member">nrf_nvmc_word_write</ref>(uint32_t<sp/>address,</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>value);</highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="175"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="176"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>reading<sp/>a<sp/>byte<sp/>from<sp/>the<sp/>flash.</highlight></codeline>
<codeline lineno="177"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="178"><highlight class="comment"><sp/>*<sp/>Using<sp/>this<sp/>function<sp/>when<sp/>accessing<sp/>the<sp/>flash<sp/>gives<sp/>the<sp/>possibility</highlight></codeline>
<codeline lineno="179"><highlight class="comment"><sp/>*<sp/>to<sp/>run<sp/>the<sp/>code<sp/>in<sp/>an<sp/>environment<sp/>where<sp/>the<sp/>flash<sp/>is<sp/>simulated.</highlight></codeline>
<codeline lineno="180"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="181"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>address<sp/>Address<sp/>of<sp/>the<sp/>byte<sp/>to<sp/>read.</highlight></codeline>
<codeline lineno="182"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="183"><highlight class="comment"><sp/>*<sp/>@return<sp/>Value<sp/>read<sp/>from<sp/>flash.</highlight></codeline>
<codeline lineno="184"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint8_t<sp/><ref refid="group__nrf__nvmc__hal_1gaa30963626fd8d7c46cb88aedbff72aee" kindref="member">nrf_nvmc_byte_read</ref>(uint32_t<sp/>address);</highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="187"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="188"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>reading<sp/>a<sp/>16-bit<sp/>halfword<sp/>from<sp/>the<sp/>flash.</highlight></codeline>
<codeline lineno="189"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="190"><highlight class="comment"><sp/>*<sp/>Using<sp/>this<sp/>function<sp/>when<sp/>accessing<sp/>the<sp/>flash<sp/>gives<sp/>the<sp/>possibility</highlight></codeline>
<codeline lineno="191"><highlight class="comment"><sp/>*<sp/>to<sp/>run<sp/>the<sp/>code<sp/>in<sp/>an<sp/>environment<sp/>where<sp/>the<sp/>flash<sp/>is<sp/>simulated.</highlight></codeline>
<codeline lineno="192"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="193"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>address<sp/>Address<sp/>of<sp/>the<sp/>halfword<sp/>to<sp/>read.</highlight></codeline>
<codeline lineno="194"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="195"><highlight class="comment"><sp/>*<sp/>@return<sp/>Value<sp/>read<sp/>from<sp/>flash.</highlight></codeline>
<codeline lineno="196"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint16_t<sp/><ref refid="group__nrf__nvmc__hal_1ga0cf39c0c69c6239940d137fe24fa80fb" kindref="member">nrf_nvmc_halfword_read</ref>(uint32_t<sp/>address);</highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="199"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="200"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>reading<sp/>a<sp/>32-bit<sp/>word<sp/>from<sp/>the<sp/>flash.</highlight></codeline>
<codeline lineno="201"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="202"><highlight class="comment"><sp/>*<sp/>Using<sp/>this<sp/>function<sp/>when<sp/>accessing<sp/>the<sp/>flash<sp/>gives<sp/>the<sp/>possibility</highlight></codeline>
<codeline lineno="203"><highlight class="comment"><sp/>*<sp/>to<sp/>run<sp/>the<sp/>code<sp/>in<sp/>an<sp/>environment<sp/>where<sp/>the<sp/>flash<sp/>is<sp/>simulated.</highlight></codeline>
<codeline lineno="204"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="205"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>address<sp/>Address<sp/>of<sp/>the<sp/>word<sp/>to<sp/>read.</highlight></codeline>
<codeline lineno="206"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="207"><highlight class="comment"><sp/>*<sp/>@return<sp/>Value<sp/>read<sp/>from<sp/>flash.</highlight></codeline>
<codeline lineno="208"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__nvmc__hal_1ga2bd87d25a19f94631db849feaafa50b3" kindref="member">nrf_nvmc_word_read</ref>(uint32_t<sp/>address);</highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="211"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="212"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>reading<sp/>a<sp/>given<sp/>number<sp/>of<sp/>bytes<sp/>from<sp/>the<sp/>flash<sp/>into<sp/>the<sp/>specified<sp/>buffer.</highlight></codeline>
<codeline lineno="213"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="214"><highlight class="comment"><sp/>*<sp/>Using<sp/>this<sp/>function<sp/>when<sp/>accessing<sp/>the<sp/>flash<sp/>gives<sp/>the<sp/>possibility</highlight></codeline>
<codeline lineno="215"><highlight class="comment"><sp/>*<sp/>to<sp/>run<sp/>the<sp/>code<sp/>in<sp/>an<sp/>environment<sp/>where<sp/>the<sp/>flash<sp/>is<sp/>simulated.</highlight></codeline>
<codeline lineno="216"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="217"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>dst<sp/><sp/><sp/><sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>buffer<sp/>to<sp/>store<sp/>the<sp/>data.</highlight></codeline>
<codeline lineno="218"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>address<sp/><sp/><sp/>Address<sp/>of<sp/>the<sp/>first<sp/>byte<sp/>to<sp/>read.</highlight></codeline>
<codeline lineno="219"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>num_bytes<sp/>Number<sp/>of<sp/>bytes<sp/>to<sp/>read.</highlight></codeline>
<codeline lineno="220"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="221"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__nvmc__hal_1ga249d5651b5e4a80ca818bc360420812f" kindref="member">nrf_nvmc_buffer_read</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/><sp/><sp/>dst,</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>address,</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>num_bytes);</highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="226"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="227"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>starting<sp/>a<sp/>single<sp/>page<sp/>erase<sp/>in<sp/>the<sp/>Flash<sp/>memory.</highlight></codeline>
<codeline lineno="228"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="229"><highlight class="comment"><sp/>*<sp/>The<sp/>NVMC<sp/>mode<sp/>must<sp/>be<sp/>correctly<sp/>configured<sp/>with<sp/>@ref<sp/>nrf_nvmc_mode_set</highlight></codeline>
<codeline lineno="230"><highlight class="comment"><sp/>*<sp/>before<sp/>starting<sp/>the<sp/>erase<sp/>operation.</highlight></codeline>
<codeline lineno="231"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="232"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="233"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>page_addr<sp/>Address<sp/>of<sp/>the<sp/>first<sp/>word<sp/>of<sp/>the<sp/>page<sp/>to<sp/>erase.</highlight></codeline>
<codeline lineno="234"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__nvmc__hal_1gaaf4332d291e31155374dc0279b60cb22" kindref="member">nrf_nvmc_page_erase_start</ref>(NRF_NVMC_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>page_addr);</highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_NVMC_HAS_UICR_ERASE</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="239"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="240"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>starting<sp/>the<sp/>user<sp/>information<sp/>configuration<sp/>registers<sp/>(UICR)<sp/>erase.</highlight></codeline>
<codeline lineno="241"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="242"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="243"><highlight class="comment"><sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__nvmc__hal_1ga2a8ab271b7b62703cd6c8a23a2341361" kindref="member">nrf_nvmc_uicr_erase_start</ref>(NRF_NVMC_Type<sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="247"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="248"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>starting<sp/>the<sp/>erase<sp/>of<sp/>the<sp/>whole<sp/>NVM,<sp/>including<sp/>UICR.</highlight></codeline>
<codeline lineno="249"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="250"><highlight class="comment"><sp/>*<sp/>This<sp/>function<sp/>purges<sp/>all<sp/>user<sp/>code.</highlight></codeline>
<codeline lineno="251"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="252"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="253"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__nvmc__hal_1ga6ee7aac11f652c4bcc280569630312c9" kindref="member">nrf_nvmc_erase_all_start</ref>(NRF_NVMC_Type<sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_NVMC_HAS_PARTIAL_ERASE</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="257"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="258"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>configuring<sp/>the<sp/>page<sp/>partial<sp/>erase<sp/>duration<sp/>in<sp/>milliseconds.</highlight></codeline>
<codeline lineno="259"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="260"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/><sp/><sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="261"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>duration_ms<sp/>Page<sp/>partial<sp/>erase<sp/>duration<sp/>in<sp/>milliseconds.</highlight></codeline>
<codeline lineno="262"><highlight class="comment"><sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__nvmc__hal_1gac09f0719d89ad320e0d9a218913fea5b" kindref="member">nrf_nvmc_partial_erase_duration_set</ref>(NRF_NVMC_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>duration_ms);</highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="266"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="267"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>the<sp/>current<sp/>setting<sp/>for<sp/>the<sp/>page<sp/>partial<sp/>erase<sp/>duration.</highlight></codeline>
<codeline lineno="268"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="269"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="270"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="271"><highlight class="comment"><sp/>*<sp/>@retval<sp/>Interval<sp/>duration<sp/>setting<sp/>in<sp/>milliseconds.</highlight></codeline>
<codeline lineno="272"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__nvmc__hal_1gad3feaf7f91e992008d03f17ffcfd6fc9" kindref="member">nrf_nvmc_partial_erase_duration_get</ref>(NRF_NVMC_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="275"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="276"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>starting<sp/>a<sp/>partial<sp/>erase<sp/>operation.</highlight></codeline>
<codeline lineno="277"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="278"><highlight class="comment"><sp/>*<sp/>It<sp/>must<sp/>be<sp/>called<sp/>successively<sp/>until<sp/>the<sp/>page<sp/>erase<sp/>time<sp/>is<sp/>reached.</highlight></codeline>
<codeline lineno="279"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="280"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="281"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>page_addr<sp/>Address<sp/>of<sp/>the<sp/>first<sp/>word<sp/>of<sp/>the<sp/>page<sp/>to<sp/>erase.</highlight></codeline>
<codeline lineno="282"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__nvmc__hal_1ga62b50be6f82d09ecb013d54c83b88b1c" kindref="member">nrf_nvmc_page_partial_erase_start</ref>(NRF_NVMC_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>page_addr);</highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRF_NVMC_HAS_PARTIAL_ERASE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(NVMC_FEATURE_CACHE_PRESENT)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="288"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="289"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>applying<sp/>the<sp/>Instruction<sp/>Cache<sp/>(ICache)<sp/>configuration.</highlight></codeline>
<codeline lineno="290"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="291"><highlight class="comment"><sp/>*<sp/>Enabling<sp/>the<sp/>cache<sp/>can<sp/>increase<sp/>CPU<sp/>performance<sp/>and<sp/>reduce<sp/>power</highlight></codeline>
<codeline lineno="292"><highlight class="comment"><sp/>*<sp/>consumption<sp/>by<sp/>reducing<sp/>the<sp/>number<sp/>of<sp/>wait<sp/>cycles<sp/>and<sp/>the<sp/>number</highlight></codeline>
<codeline lineno="293"><highlight class="comment"><sp/>*<sp/>of<sp/>flash<sp/>accesses.</highlight></codeline>
<codeline lineno="294"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="295"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="296"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>config<sp/>ICache<sp/>configuration.</highlight></codeline>
<codeline lineno="297"><highlight class="comment"><sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>nrf_nvmc_icache_config_set(NRF_NVMC_Type<sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nrf_nvmc_icache_config_t<sp/>config);</highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="301"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="302"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>checking<sp/>if<sp/>ICache<sp/>is<sp/>enabled.</highlight></codeline>
<codeline lineno="303"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="304"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="305"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="306"><highlight class="comment"><sp/>*<sp/>@retval<sp/>true<sp/><sp/>ICache<sp/>enabled.</highlight></codeline>
<codeline lineno="307"><highlight class="comment"><sp/>*<sp/>@retval<sp/>false<sp/>ICache<sp/>disabled.</highlight></codeline>
<codeline lineno="308"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>nrf_nvmc_icache_enable_check(NRF_NVMC_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="311"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="312"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>checking<sp/>if<sp/>the<sp/>ICache<sp/>profiling<sp/>option<sp/>is<sp/>enabled.</highlight></codeline>
<codeline lineno="313"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="314"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="315"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="316"><highlight class="comment"><sp/>*<sp/>@retval<sp/>true<sp/><sp/>ICache<sp/>profiling<sp/>enabled.</highlight></codeline>
<codeline lineno="317"><highlight class="comment"><sp/>*<sp/>@retval<sp/>false<sp/>ICache<sp/>profiling<sp/>disabled.</highlight></codeline>
<codeline lineno="318"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>nrf_nvmc_icache_profiling_enable_check(NRF_NVMC_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="321"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="322"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>the<sp/>number<sp/>of<sp/>ICache<sp/>hits.</highlight></codeline>
<codeline lineno="323"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="324"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="325"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="326"><highlight class="comment"><sp/>*<sp/>@retval<sp/>Number<sp/>of<sp/>the<sp/>ICache<sp/>hits.</highlight></codeline>
<codeline lineno="327"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/>nrf_nvmc_icache_hit_get(NRF_NVMC_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="330"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="331"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>the<sp/>number<sp/>of<sp/>ICache<sp/>misses.</highlight></codeline>
<codeline lineno="332"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="333"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="334"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="335"><highlight class="comment"><sp/>*<sp/>@retval<sp/>Number<sp/>of<sp/>the<sp/>ICache<sp/>misses.</highlight></codeline>
<codeline lineno="336"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/>nrf_nvmc_icache_miss_get(NRF_NVMC_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="339"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="340"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>resetting<sp/>the<sp/>ICache<sp/>hit<sp/>and<sp/>miss<sp/>counters.</highlight></codeline>
<codeline lineno="341"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="342"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="343"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/>NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>nrf_nvmc_icache_hit_miss_reset(NRF_NVMC_Type<sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="345"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>defined(NVMC_FEATURE_CACHE_PRESENT)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>NRF_DECLARE_ONLY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrf__nvmc__hal_1ga5338a0810739ba1ff51d4c93c480bbd8" kindref="member">nrf_nvmc_ready_check</ref>(NRF_NVMC_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="350"><highlight class="normal">{</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">)(p_reg-&gt;READY<sp/>&amp;<sp/>NVMC_READY_READY_Msk);</highlight></codeline>
<codeline lineno="352"><highlight class="normal">}</highlight></codeline>
<codeline lineno="353"><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(NVMC_READYNEXT_READYNEXT_Msk)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrf__nvmc__hal_1gac7c938d59c2ce5bb85ef9b0c48ea8914" kindref="member">nrf_nvmc_write_ready_check</ref>(NRF_NVMC_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="356"><highlight class="normal">{</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">)(p_reg-&gt;READYNEXT<sp/>&amp;<sp/>NVMC_READYNEXT_READYNEXT_Msk);</highlight></codeline>
<codeline lineno="358"><highlight class="normal">}</highlight></codeline>
<codeline lineno="359"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__nvmc__hal_1ga72962131a72ba80c5d7593c2e87084bf" kindref="member">nrf_nvmc_mode_set</ref>(NRF_NVMC_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__nvmc__hal_1gadd8e7bdd401ca26af7508dcbfd4a2093" kindref="member">nrf_nvmc_mode_t</ref><sp/>mode)</highlight></codeline>
<codeline lineno="363"><highlight class="normal">{</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;CONFIG<sp/>=<sp/>(uint32_t)mode;</highlight></codeline>
<codeline lineno="365"><highlight class="normal">}</highlight></codeline>
<codeline lineno="366"><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_NVMC_HAS_NON_SECURE_OPERATIONS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__nvmc__hal_1ga97f46fa7d02746b9a73a3e198278a5fa" kindref="member">nrf_nvmc_nonsecure_mode_set</ref>(NRF_NVMC_Type<sp/>*<sp/><sp/><sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__nvmc__hal_1ga7f92280a47a13401338ba73ed480fffe" kindref="member">nrf_nvmc_ns_mode_t</ref><sp/>mode)</highlight></codeline>
<codeline lineno="370"><highlight class="normal">{</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;CONFIGNS<sp/>=<sp/>(uint32_t)mode;</highlight></codeline>
<codeline lineno="372"><highlight class="normal">}</highlight></codeline>
<codeline lineno="373"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"></highlight></codeline>
<codeline lineno="375"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__nvmc__hal_1ga23eec382fbfdcf74e56bccbb4d278414" kindref="member">nrf_nvmc_word_write</ref>(uint32_t<sp/>address,</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>value)</highlight></codeline>
<codeline lineno="377"><highlight class="normal">{</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/>*(</highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint32_t<sp/>*)address<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="379"><highlight class="normal">}</highlight></codeline>
<codeline lineno="380"><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint8_t<sp/><ref refid="group__nrf__nvmc__hal_1gaa30963626fd8d7c46cb88aedbff72aee" kindref="member">nrf_nvmc_byte_read</ref>(uint32_t<sp/>address)</highlight></codeline>
<codeline lineno="382"><highlight class="normal">{</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*(</highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint8_t<sp/>*)address;</highlight></codeline>
<codeline lineno="384"><highlight class="normal">}</highlight></codeline>
<codeline lineno="385"><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint16_t<sp/><ref refid="group__nrf__nvmc__hal_1ga0cf39c0c69c6239940d137fe24fa80fb" kindref="member">nrf_nvmc_halfword_read</ref>(uint32_t<sp/>address)</highlight></codeline>
<codeline lineno="387"><highlight class="normal">{</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*(</highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint16_t<sp/>*)address;</highlight></codeline>
<codeline lineno="389"><highlight class="normal">}</highlight></codeline>
<codeline lineno="390"><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__nvmc__hal_1ga2bd87d25a19f94631db849feaafa50b3" kindref="member">nrf_nvmc_word_read</ref>(uint32_t<sp/>address)</highlight></codeline>
<codeline lineno="392"><highlight class="normal">{</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*(</highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint32_t<sp/>*)address;</highlight></codeline>
<codeline lineno="394"><highlight class="normal">}</highlight></codeline>
<codeline lineno="395"><highlight class="normal"></highlight></codeline>
<codeline lineno="396"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__nvmc__hal_1ga249d5651b5e4a80ca818bc360420812f" kindref="member">nrf_nvmc_buffer_read</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/><sp/><sp/>dst,</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>address,</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>num_bytes)</highlight></codeline>
<codeline lineno="399"><highlight class="normal">{</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(dst,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)address,<sp/>num_bytes);</highlight></codeline>
<codeline lineno="401"><highlight class="normal">}</highlight></codeline>
<codeline lineno="402"><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__nvmc__hal_1gaaf4332d291e31155374dc0279b60cb22" kindref="member">nrf_nvmc_page_erase_start</ref>(NRF_NVMC_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>page_addr)</highlight></codeline>
<codeline lineno="405"><highlight class="normal">{</highlight></codeline>
<codeline lineno="406"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(NRF51)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>On<sp/>nRF51,<sp/>the<sp/>code<sp/>area<sp/>can<sp/>be<sp/>divided<sp/>into<sp/>two<sp/>regions:<sp/>CR0<sp/>and<sp/>CR1.</highlight></codeline>
<codeline lineno="408"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>The<sp/>length<sp/>of<sp/>CR0<sp/>is<sp/>specified<sp/>in<sp/>the<sp/>CLENR0<sp/>register<sp/>of<sp/>UICR.</highlight></codeline>
<codeline lineno="409"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>If<sp/>CLENR0<sp/>contains<sp/>the<sp/>0xFFFFFFFF<sp/>value,<sp/><sp/>CR0<sp/>is<sp/>not<sp/>set.</highlight></codeline>
<codeline lineno="410"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Moreover,<sp/>the<sp/>page<sp/>from<sp/>CR0<sp/>can<sp/>be<sp/>written<sp/>or<sp/>erased<sp/>only<sp/>from<sp/>code</highlight></codeline>
<codeline lineno="411"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>running<sp/>in<sp/>CR0.*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>cr0_len<sp/>=<sp/>NRF_UICR-&gt;CLENR0<sp/>==<sp/>0xFFFFFFFF<sp/>?<sp/>0<sp/>:<sp/>NRF_UICR-&gt;CLENR0;</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(page_addr<sp/>&lt;<sp/>cr0_len)</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_reg-&gt;ERASEPCR0<sp/>=<sp/>page_addr;</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_reg-&gt;ERASEPCR1<sp/>=<sp/>page_addr;</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="421"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(NRF52_SERIES)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;ERASEPAGE<sp/>=<sp/>page_addr;</highlight></codeline>
<codeline lineno="423"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(NRF53_SERIES)<sp/>||<sp/>defined(NRF91_SERIES)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/>*(</highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint32_t<sp/>*)page_addr<sp/>=<sp/>0xFFFFFFFF;</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/>(void)p_reg;</highlight></codeline>
<codeline lineno="426"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="427"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#error<sp/>&quot;Unknown<sp/>device.&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="428"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="429"><highlight class="normal">}</highlight></codeline>
<codeline lineno="430"><highlight class="normal"></highlight></codeline>
<codeline lineno="431"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_NVMC_HAS_UICR_ERASE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="432"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__nvmc__hal_1ga2a8ab271b7b62703cd6c8a23a2341361" kindref="member">nrf_nvmc_uicr_erase_start</ref>(NRF_NVMC_Type<sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="433"><highlight class="normal">{</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;ERASEUICR<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="435"><highlight class="normal">}</highlight></codeline>
<codeline lineno="436"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="437"><highlight class="normal"></highlight></codeline>
<codeline lineno="438"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__nvmc__hal_1ga6ee7aac11f652c4bcc280569630312c9" kindref="member">nrf_nvmc_erase_all_start</ref>(NRF_NVMC_Type<sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="439"><highlight class="normal">{</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;ERASEALL<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="441"><highlight class="normal">}</highlight></codeline>
<codeline lineno="442"><highlight class="normal"></highlight></codeline>
<codeline lineno="443"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_NVMC_HAS_PARTIAL_ERASE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="444"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__nvmc__hal_1gac09f0719d89ad320e0d9a218913fea5b" kindref="member">nrf_nvmc_partial_erase_duration_set</ref>(NRF_NVMC_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>duration_ms)</highlight></codeline>
<codeline lineno="446"><highlight class="normal">{</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;ERASEPAGEPARTIALCFG<sp/>=<sp/>duration_ms;</highlight></codeline>
<codeline lineno="448"><highlight class="normal">}</highlight></codeline>
<codeline lineno="449"><highlight class="normal"></highlight></codeline>
<codeline lineno="450"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__nvmc__hal_1gad3feaf7f91e992008d03f17ffcfd6fc9" kindref="member">nrf_nvmc_partial_erase_duration_get</ref>(NRF_NVMC_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="451"><highlight class="normal">{</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p_reg-&gt;ERASEPAGEPARTIALCFG;</highlight></codeline>
<codeline lineno="453"><highlight class="normal">}</highlight></codeline>
<codeline lineno="454"><highlight class="normal"></highlight></codeline>
<codeline lineno="455"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__nvmc__hal_1ga62b50be6f82d09ecb013d54c83b88b1c" kindref="member">nrf_nvmc_page_partial_erase_start</ref>(NRF_NVMC_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>page_addr)</highlight></codeline>
<codeline lineno="457"><highlight class="normal">{</highlight></codeline>
<codeline lineno="458"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(NVMC_ERASEPAGEPARTIAL_ERASEPAGEPARTIAL_Msk)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;ERASEPAGEPARTIAL<sp/>=<sp/>page_addr;</highlight></codeline>
<codeline lineno="460"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(NRF53_SERIES)<sp/>||<sp/>defined(NRF91_SERIES)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__nvmc__hal_1gaaf4332d291e31155374dc0279b60cb22" kindref="member">nrf_nvmc_page_erase_start</ref>(p_reg,<sp/>page_addr);</highlight></codeline>
<codeline lineno="462"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="463"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#error<sp/>&quot;Unknown<sp/>device.&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="464"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="465"><highlight class="normal">}</highlight></codeline>
<codeline lineno="466"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRF_NVMC_HAS_PARTIAL_ERASE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="467"><highlight class="normal"></highlight></codeline>
<codeline lineno="468"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(NVMC_FEATURE_CACHE_PRESENT)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="469"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>nrf_nvmc_icache_config_set(NRF_NVMC_Type<sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nrf_nvmc_icache_config_t<sp/>config)</highlight></codeline>
<codeline lineno="471"><highlight class="normal">{</highlight></codeline>
<codeline lineno="472"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(NRF5340_XXAA_NETWORK)<sp/>||<sp/>defined(NRF91_SERIES)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Apply<sp/>workaround<sp/>for<sp/>the<sp/>anomalies:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>-<sp/>6<sp/>for<sp/>the<sp/>nRF53.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>-<sp/>21<sp/>for<sp/>the<sp/>nRF91.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(config<sp/>==<sp/>NRF_NVMC_ICACHE_DISABLE)</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrfx__glue_1ga1c1dcfdd988c74825404d06d9a422ea2" kindref="member">NRFX_CRITICAL_SECTION_ENTER</ref>();</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__ISB();</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_reg-&gt;ICACHECNF<sp/>=<sp/>(uint32_t)NRF_NVMC_ICACHE_DISABLE;</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__ISB();</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrfx__glue_1ga42a57ef447c1a527fda2db8e920b838c" kindref="member">NRFX_CRITICAL_SECTION_EXIT</ref>();</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="485"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_reg-&gt;ICACHECNF<sp/>=<sp/>(uint32_t)config;</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="489"><highlight class="normal">}</highlight></codeline>
<codeline lineno="490"><highlight class="normal"></highlight></codeline>
<codeline lineno="491"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>nrf_nvmc_icache_enable_check(NRF_NVMC_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="492"><highlight class="normal">{</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">)(p_reg-&gt;ICACHECNF<sp/>&amp;<sp/>NVMC_ICACHECNF_CACHEEN_Msk);</highlight></codeline>
<codeline lineno="494"><highlight class="normal">}</highlight></codeline>
<codeline lineno="495"><highlight class="normal"></highlight></codeline>
<codeline lineno="496"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>nrf_nvmc_icache_profiling_enable_check(NRF_NVMC_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="497"><highlight class="normal">{</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">)(p_reg-&gt;ICACHECNF<sp/>&amp;<sp/>NVMC_ICACHECNF_CACHEPROFEN_Msk);</highlight></codeline>
<codeline lineno="499"><highlight class="normal">}</highlight></codeline>
<codeline lineno="500"><highlight class="normal"></highlight></codeline>
<codeline lineno="501"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/>nrf_nvmc_icache_hit_get(NRF_NVMC_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="502"><highlight class="normal">{</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p_reg-&gt;IHIT;</highlight></codeline>
<codeline lineno="504"><highlight class="normal">}</highlight></codeline>
<codeline lineno="505"><highlight class="normal"></highlight></codeline>
<codeline lineno="506"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/>nrf_nvmc_icache_miss_get(NRF_NVMC_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="507"><highlight class="normal">{</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p_reg-&gt;IMISS;</highlight></codeline>
<codeline lineno="509"><highlight class="normal">}</highlight></codeline>
<codeline lineno="510"><highlight class="normal"></highlight></codeline>
<codeline lineno="511"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>nrf_nvmc_icache_hit_miss_reset(NRF_NVMC_Type<sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="512"><highlight class="normal">{</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;IHIT<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;IMISS<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="515"><highlight class="normal">}</highlight></codeline>
<codeline lineno="516"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>defined(NVMC_FEATURE_CACHE_PRESENT)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="517"><highlight class="normal"></highlight></codeline>
<codeline lineno="518"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRF_DECLARE_ONLY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="519"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="520"><highlight class="comment">/**<sp/>@}<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="521"><highlight class="normal"></highlight></codeline>
<codeline lineno="522"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="523"><highlight class="normal">}</highlight></codeline>
<codeline lineno="524"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="525"><highlight class="normal"></highlight></codeline>
<codeline lineno="526"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRF_NVMC_H__</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="hal/nrf_nvmc.h"/>
  </compounddef>
</doxygen>
