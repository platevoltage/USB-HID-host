<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="group__nrfx__atomic" kind="group">
    <compoundname>nrfx_atomic</compoundname>
    <title>Atomic operations API</title>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group__nrfx__atomic_1gac45ed9440064af19b8e0ccf789021792" prot="public" static="no">
        <type>volatile uint32_t</type>
        <definition>typedef volatile uint32_t nrfx_atomic_u32_t</definition>
        <argsstring></argsstring>
        <name>nrfx_atomic_u32_t</name>
        <briefdescription>
<para>Atomic 32-bit unsigned type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="soc/nrfx_atomic.h" line="56" column="27" bodyfile="soc/nrfx_atomic.h" bodystart="56" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__nrfx__atomic_1ga0bc7eaf97533ed806a2d0582cab64f57" prot="public" static="no">
        <type>volatile uint32_t</type>
        <definition>typedef volatile uint32_t nrfx_atomic_flag_t</definition>
        <argsstring></argsstring>
        <name>nrfx_atomic_flag_t</name>
        <briefdescription>
<para>Atomic 1-bit flag type (technically 32-bit). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="soc/nrfx_atomic.h" line="59" column="27" bodyfile="soc/nrfx_atomic.h" bodystart="59" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__nrfx__atomic_1ga53791107404cfc7160197f72a26de36e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t nrfx_atomic_u32_fetch_store</definition>
        <argsstring>(nrfx_atomic_u32_t *p_data, uint32_t value)</argsstring>
        <name>nrfx_atomic_u32_fetch_store</name>
        <param>
          <type><ref refid="group__nrfx__atomic_1gac45ed9440064af19b8e0ccf789021792" kindref="member">nrfx_atomic_u32_t</ref> *</type>
          <declname>p_data</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Function for storing a value to an atomic object and returning its previous value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_data</parametername>
</parameternamelist>
<parameterdescription>
<para>Atomic memory pointer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to store.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Previous value stored in the atomic object. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="soc/nrfx_atomic.h" line="69" column="10" declfile="soc/nrfx_atomic.h" declline="69" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfx__atomic_1gaa145d22f65910e4292c3ee76285aa91e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t nrfx_atomic_u32_store</definition>
        <argsstring>(nrfx_atomic_u32_t *p_data, uint32_t value)</argsstring>
        <name>nrfx_atomic_u32_store</name>
        <param>
          <type><ref refid="group__nrfx__atomic_1gac45ed9440064af19b8e0ccf789021792" kindref="member">nrfx_atomic_u32_t</ref> *</type>
          <declname>p_data</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Function for storing a value to an atomic object and returning its new value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_data</parametername>
</parameternamelist>
<parameterdescription>
<para>Atomic memory pointer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to store.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>New value stored in the atomic object. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="soc/nrfx_atomic.h" line="79" column="10" declfile="soc/nrfx_atomic.h" declline="79" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfx__atomic_1ga9a3082c76a9ab5fc1f2a4ac06b4cc57f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t nrfx_atomic_u32_fetch_or</definition>
        <argsstring>(nrfx_atomic_u32_t *p_data, uint32_t value)</argsstring>
        <name>nrfx_atomic_u32_fetch_or</name>
        <param>
          <type><ref refid="group__nrfx__atomic_1gac45ed9440064af19b8e0ccf789021792" kindref="member">nrfx_atomic_u32_t</ref> *</type>
          <declname>p_data</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Function for running a logical OR operation on an atomic object and returning its previous value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_data</parametername>
</parameternamelist>
<parameterdescription>
<para>Atomic memory pointer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>Value of the second operand in the OR operation.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Previous value stored in the atomic object. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="soc/nrfx_atomic.h" line="90" column="10" declfile="soc/nrfx_atomic.h" declline="90" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfx__atomic_1ga1e662c020a5f354af3d6fbe77b29ab92" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t nrfx_atomic_u32_or</definition>
        <argsstring>(nrfx_atomic_u32_t *p_data, uint32_t value)</argsstring>
        <name>nrfx_atomic_u32_or</name>
        <param>
          <type><ref refid="group__nrfx__atomic_1gac45ed9440064af19b8e0ccf789021792" kindref="member">nrfx_atomic_u32_t</ref> *</type>
          <declname>p_data</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Function for running a logical OR operation on an atomic object and returning its new value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_data</parametername>
</parameternamelist>
<parameterdescription>
<para>Atomic memory pointer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>Value of the second operand in the OR operation.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>New value stored in the atomic object. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="soc/nrfx_atomic.h" line="101" column="10" declfile="soc/nrfx_atomic.h" declline="101" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfx__atomic_1ga5e5d76cbcdeaece98d93a934661e36a8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t nrfx_atomic_u32_fetch_and</definition>
        <argsstring>(nrfx_atomic_u32_t *p_data, uint32_t value)</argsstring>
        <name>nrfx_atomic_u32_fetch_and</name>
        <param>
          <type><ref refid="group__nrfx__atomic_1gac45ed9440064af19b8e0ccf789021792" kindref="member">nrfx_atomic_u32_t</ref> *</type>
          <declname>p_data</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Function for running a logical AND operation on an atomic object and returning its previous value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_data</parametername>
</parameternamelist>
<parameterdescription>
<para>Atomic memory pointer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>Value of the second operand in the AND operation.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Previous value stored in the atomic object. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="soc/nrfx_atomic.h" line="112" column="10" declfile="soc/nrfx_atomic.h" declline="112" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfx__atomic_1ga2f21b9d719eb9e3a6466abe598da71e9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t nrfx_atomic_u32_and</definition>
        <argsstring>(nrfx_atomic_u32_t *p_data, uint32_t value)</argsstring>
        <name>nrfx_atomic_u32_and</name>
        <param>
          <type><ref refid="group__nrfx__atomic_1gac45ed9440064af19b8e0ccf789021792" kindref="member">nrfx_atomic_u32_t</ref> *</type>
          <declname>p_data</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Function for running a logical AND operation on an atomic object and returning its new value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_data</parametername>
</parameternamelist>
<parameterdescription>
<para>Atomic memory pointer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>Value of the second operand in the AND operation.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>New value stored in the atomic object. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="soc/nrfx_atomic.h" line="123" column="10" declfile="soc/nrfx_atomic.h" declline="123" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfx__atomic_1ga83ba4d8a9f5be3c3c143bb98948b121c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t nrfx_atomic_u32_fetch_xor</definition>
        <argsstring>(nrfx_atomic_u32_t *p_data, uint32_t value)</argsstring>
        <name>nrfx_atomic_u32_fetch_xor</name>
        <param>
          <type><ref refid="group__nrfx__atomic_1gac45ed9440064af19b8e0ccf789021792" kindref="member">nrfx_atomic_u32_t</ref> *</type>
          <declname>p_data</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Function for running a logical XOR operation on an atomic object and returning its previous value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_data</parametername>
</parameternamelist>
<parameterdescription>
<para>Atomic memory pointer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>Value of the second operand in the XOR operation.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Previous value stored in the atomic object. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="soc/nrfx_atomic.h" line="134" column="10" declfile="soc/nrfx_atomic.h" declline="134" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfx__atomic_1ga9bb15e4972e0e4d4553cfaef6df53df9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t nrfx_atomic_u32_xor</definition>
        <argsstring>(nrfx_atomic_u32_t *p_data, uint32_t value)</argsstring>
        <name>nrfx_atomic_u32_xor</name>
        <param>
          <type><ref refid="group__nrfx__atomic_1gac45ed9440064af19b8e0ccf789021792" kindref="member">nrfx_atomic_u32_t</ref> *</type>
          <declname>p_data</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Function for running a logical XOR operation on an atomic object and returning its new value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_data</parametername>
</parameternamelist>
<parameterdescription>
<para>Atomic memory pointer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>Value of the second operand in the XOR operation.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>New value stored in the atomic object. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="soc/nrfx_atomic.h" line="145" column="10" declfile="soc/nrfx_atomic.h" declline="145" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfx__atomic_1gaf00c47c08d170d50ab5a30397c9f6c30" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t nrfx_atomic_u32_fetch_add</definition>
        <argsstring>(nrfx_atomic_u32_t *p_data, uint32_t value)</argsstring>
        <name>nrfx_atomic_u32_fetch_add</name>
        <param>
          <type><ref refid="group__nrfx__atomic_1gac45ed9440064af19b8e0ccf789021792" kindref="member">nrfx_atomic_u32_t</ref> *</type>
          <declname>p_data</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Function for running an arithmetic ADD operation on an atomic object and returning its previous value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_data</parametername>
</parameternamelist>
<parameterdescription>
<para>Atomic memory pointer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>Value of the second operand in the ADD operation.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Previous value stored in the atomic object. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="soc/nrfx_atomic.h" line="156" column="10" declfile="soc/nrfx_atomic.h" declline="156" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfx__atomic_1ga5ba28362c51866798e453633ea84a2c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t nrfx_atomic_u32_add</definition>
        <argsstring>(nrfx_atomic_u32_t *p_data, uint32_t value)</argsstring>
        <name>nrfx_atomic_u32_add</name>
        <param>
          <type><ref refid="group__nrfx__atomic_1gac45ed9440064af19b8e0ccf789021792" kindref="member">nrfx_atomic_u32_t</ref> *</type>
          <declname>p_data</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Function for running an arithmetic ADD operation on an atomic object and returning its new value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_data</parametername>
</parameternamelist>
<parameterdescription>
<para>Atomic memory pointer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>Value of the second operand in the ADD operation.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>New value stored in the atomic object. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="soc/nrfx_atomic.h" line="167" column="10" declfile="soc/nrfx_atomic.h" declline="167" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfx__atomic_1gacb784f3ac44ce24b577f8a1d234efa21" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t nrfx_atomic_u32_fetch_sub</definition>
        <argsstring>(nrfx_atomic_u32_t *p_data, uint32_t value)</argsstring>
        <name>nrfx_atomic_u32_fetch_sub</name>
        <param>
          <type><ref refid="group__nrfx__atomic_1gac45ed9440064af19b8e0ccf789021792" kindref="member">nrfx_atomic_u32_t</ref> *</type>
          <declname>p_data</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Function for running an arithmetic SUB operation on an atomic object and returning its previous value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_data</parametername>
</parameternamelist>
<parameterdescription>
<para>Atomic memory pointer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>Value of the second operand in the SUB operation.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Old value stored in the atomic object. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="soc/nrfx_atomic.h" line="178" column="10" declfile="soc/nrfx_atomic.h" declline="178" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfx__atomic_1ga0186d5113ae95dce0fab20cf466358a3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t nrfx_atomic_u32_sub</definition>
        <argsstring>(nrfx_atomic_u32_t *p_data, uint32_t value)</argsstring>
        <name>nrfx_atomic_u32_sub</name>
        <param>
          <type><ref refid="group__nrfx__atomic_1gac45ed9440064af19b8e0ccf789021792" kindref="member">nrfx_atomic_u32_t</ref> *</type>
          <declname>p_data</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Function for running an arithmetic SUB operation on an atomic object and returning its new value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_data</parametername>
</parameternamelist>
<parameterdescription>
<para>Atomic memory pointer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>Value of the second operand in the SUB operation.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>New value stored in the atomic object. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="soc/nrfx_atomic.h" line="189" column="10" declfile="soc/nrfx_atomic.h" declline="189" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfx__atomic_1ga6ad1c0c728f72ff0e23e7dfc4f6a1f44" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool nrfx_atomic_u32_cmp_exch</definition>
        <argsstring>(nrfx_atomic_u32_t *p_data, uint32_t *p_expected, uint32_t desired)</argsstring>
        <name>nrfx_atomic_u32_cmp_exch</name>
        <param>
          <type><ref refid="group__nrfx__atomic_1gac45ed9440064af19b8e0ccf789021792" kindref="member">nrfx_atomic_u32_t</ref> *</type>
          <declname>p_data</declname>
        </param>
        <param>
          <type>uint32_t *</type>
          <declname>p_expected</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>desired</declname>
        </param>
        <briefdescription>
<para>Function for atomic conditional value replacement. </para>
        </briefdescription>
        <detaileddescription>
<para>Atomically compares the value pointed to by <computeroutput>p_data</computeroutput> with the value pointed to by <computeroutput>p_expected</computeroutput>. If those are equal, replaces the former with desired. Otherwise, loads the actual value pointed to by <computeroutput>p_data</computeroutput> into <computeroutput>*p_expected</computeroutput>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p_data</parametername>
</parameternamelist>
<parameterdescription>
<para>Atomic memory pointer to test and modify. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_expected</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the test value. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>desired</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to be stored to atomic memory.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>*p_data</computeroutput> was equal to <computeroutput>*p_expected</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>*p_data</computeroutput> was not equal to <computeroutput>*p_expected</computeroutput>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="soc/nrfx_atomic.h" line="205" column="6" declfile="soc/nrfx_atomic.h" declline="205" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfx__atomic_1gafbbaeb4c56475a44d273790feeff9217" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t nrfx_atomic_u32_fetch_sub_hs</definition>
        <argsstring>(nrfx_atomic_u32_t *p_data, uint32_t value)</argsstring>
        <name>nrfx_atomic_u32_fetch_sub_hs</name>
        <param>
          <type><ref refid="group__nrfx__atomic_1gac45ed9440064af19b8e0ccf789021792" kindref="member">nrfx_atomic_u32_t</ref> *</type>
          <declname>p_data</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Function for running an arithmetic SUB operation on an atomic object if object &gt;= value, and returning its previous value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_data</parametername>
</parameternamelist>
<parameterdescription>
<para>Atomic memory pointer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>Value of the second operand in the SUB operation.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Previous value stored in the atomic object. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="soc/nrfx_atomic.h" line="218" column="10" declfile="soc/nrfx_atomic.h" declline="218" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfx__atomic_1ga7b93d59e728cc847155d1146ac29671a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t nrfx_atomic_u32_sub_hs</definition>
        <argsstring>(nrfx_atomic_u32_t *p_data, uint32_t value)</argsstring>
        <name>nrfx_atomic_u32_sub_hs</name>
        <param>
          <type><ref refid="group__nrfx__atomic_1gac45ed9440064af19b8e0ccf789021792" kindref="member">nrfx_atomic_u32_t</ref> *</type>
          <declname>p_data</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Function for running an arithmetic SUB operation on an atomic object if object &gt;= value, and returning its new value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_data</parametername>
</parameternamelist>
<parameterdescription>
<para>Atomic memory pointer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>Value of the second operand in the SUB operation.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>New value stored in the atomic object. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="soc/nrfx_atomic.h" line="229" column="10" declfile="soc/nrfx_atomic.h" declline="229" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfx__atomic_1gaf1592cd86a50f08aff8a8d42fbf32b8e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t nrfx_atomic_flag_set_fetch</definition>
        <argsstring>(nrfx_atomic_flag_t *p_data)</argsstring>
        <name>nrfx_atomic_flag_set_fetch</name>
        <param>
          <type><ref refid="group__nrfx__atomic_1ga0bc7eaf97533ed806a2d0582cab64f57" kindref="member">nrfx_atomic_flag_t</ref> *</type>
          <declname>p_data</declname>
        </param>
        <briefdescription>
<para>Function for running a logical one bit flag set operation on an atomic object and returning its previous value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_data</parametername>
</parameternamelist>
<parameterdescription>
<para>Atomic flag memory pointer.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Previous flag value. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="soc/nrfx_atomic.h" line="239" column="10" declfile="soc/nrfx_atomic.h" declline="239" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfx__atomic_1gad6273e79a6ffcb76b76f3eaf46d0677e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t nrfx_atomic_flag_set</definition>
        <argsstring>(nrfx_atomic_flag_t *p_data)</argsstring>
        <name>nrfx_atomic_flag_set</name>
        <param>
          <type><ref refid="group__nrfx__atomic_1ga0bc7eaf97533ed806a2d0582cab64f57" kindref="member">nrfx_atomic_flag_t</ref> *</type>
          <declname>p_data</declname>
        </param>
        <briefdescription>
<para>Function for running a logical one bit flag set operation on an atomic object and returning its new value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_data</parametername>
</parameternamelist>
<parameterdescription>
<para>Atomic flag memory pointer.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>New flag value. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="soc/nrfx_atomic.h" line="249" column="10" declfile="soc/nrfx_atomic.h" declline="249" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfx__atomic_1ga0a8e5d11ccaa93a8f896c849c2b28e90" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t nrfx_atomic_flag_clear_fetch</definition>
        <argsstring>(nrfx_atomic_flag_t *p_data)</argsstring>
        <name>nrfx_atomic_flag_clear_fetch</name>
        <param>
          <type><ref refid="group__nrfx__atomic_1ga0bc7eaf97533ed806a2d0582cab64f57" kindref="member">nrfx_atomic_flag_t</ref> *</type>
          <declname>p_data</declname>
        </param>
        <briefdescription>
<para>Function for running a logical one bit flag clear operation on an atomic object and returning its previous value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_data</parametername>
</parameternamelist>
<parameterdescription>
<para>Atomic flag memory pointer.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Previous flag value. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="soc/nrfx_atomic.h" line="259" column="10" declfile="soc/nrfx_atomic.h" declline="259" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfx__atomic_1ga143b956a4b7aa27482cc045a76940ed7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t nrfx_atomic_flag_clear</definition>
        <argsstring>(nrfx_atomic_flag_t *p_data)</argsstring>
        <name>nrfx_atomic_flag_clear</name>
        <param>
          <type><ref refid="group__nrfx__atomic_1ga0bc7eaf97533ed806a2d0582cab64f57" kindref="member">nrfx_atomic_flag_t</ref> *</type>
          <declname>p_data</declname>
        </param>
        <briefdescription>
<para>Function for running a logical one bit flag clear operation on an atomic object and returning its new value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_data</parametername>
</parameternamelist>
<parameterdescription>
<para>Atomic flag memory pointer.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>New flag value. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="soc/nrfx_atomic.h" line="269" column="10" declfile="soc/nrfx_atomic.h" declline="269" declcolumn="10"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>This module implements C11 stdatomic.h simplified API. </para>
    </briefdescription>
    <detaileddescription>
<para>At this point, only Cortex-M3 and M4 cores are supported (LDREX/STREX instructions). Atomic types are limited to <ref refid="group__nrfx__atomic_1gac45ed9440064af19b8e0ccf789021792" kindref="member">nrfx_atomic_u32_t</ref> and <ref refid="group__nrfx__atomic_1ga0bc7eaf97533ed806a2d0582cab64f57" kindref="member">nrfx_atomic_flag_t</ref>. </para>
    </detaileddescription>
  </compounddef>
</doxygen>
