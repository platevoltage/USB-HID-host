<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="nrfx__nfct_8h" kind="file" language="C++">
    <compoundname>nrfx_nfct.h</compoundname>
    <includes local="no">nrfx.h</includes>
    <includes refid="nrfy__nfct_8h" local="no">haly/nrfy_nfct.h</includes>
    <incdepgraph>
      <node id="1">
        <label>drivers/include/nrfx_nfct.h</label>
        <link refid="nrfx__nfct_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>nrfx.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="structnrfx__nfct__nfcid1__t" prot="public">nrfx_nfct_nfcid1_t</innerclass>
    <innerclass refid="structnrfx__nfct__param__t" prot="public">nrfx_nfct_param_t</innerclass>
    <innerclass refid="structnrfx__nfct__data__desc__t" prot="public">nrfx_nfct_data_desc_t</innerclass>
    <innerclass refid="structnrfx__nfct__evt__rx__frameend__t" prot="public">nrfx_nfct_evt_rx_frameend_t</innerclass>
    <innerclass refid="structnrfx__nfct__evt__tx__framestart__t" prot="public">nrfx_nfct_evt_tx_framestart_t</innerclass>
    <innerclass refid="structnrfx__nfct__evt__error__t" prot="public">nrfx_nfct_evt_error_t</innerclass>
    <innerclass refid="structnrfx__nfct__evt__t" prot="public">nrfx_nfct_evt_t</innerclass>
    <innerclass refid="structnrfx__nfct__config__t" prot="public">nrfx_nfct_config_t</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__nrfx__nfct_1gaedc09e95d7768677834b924c9a3f2f96" prot="public" static="no">
        <name>NRFX_NFCT_NFCID1_SINGLE_SIZE</name>
        <initializer>4u</initializer>
        <briefdescription>
<para>Length of single-size NFCID1. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/include/nrfx_nfct.h" line="51" column="9" bodyfile="drivers/include/nrfx_nfct.h" bodystart="51" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrfx__nfct_1ga6044e33fe059b2400d7d8ac3d18f916e" prot="public" static="no">
        <name>NRFX_NFCT_NFCID1_DOUBLE_SIZE</name>
        <initializer>7u</initializer>
        <briefdescription>
<para>Length of double-size NFCID1. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/include/nrfx_nfct.h" line="52" column="9" bodyfile="drivers/include/nrfx_nfct.h" bodystart="52" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrfx__nfct_1ga1f998c6f7af9d44404539738d154d366" prot="public" static="no">
        <name>NRFX_NFCT_NFCID1_TRIPLE_SIZE</name>
        <initializer>10u</initializer>
        <briefdescription>
<para>Length of triple-size NFCID1. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/include/nrfx_nfct.h" line="53" column="9" bodyfile="drivers/include/nrfx_nfct.h" bodystart="53" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrfx__nfct_1ga45556afa2d1eb83434ba3609e2d8a55d" prot="public" static="no">
        <name>NRFX_NFCT_NFCID1_DEFAULT_LEN</name>
        <initializer><ref refid="group__nrfx__nfct_1ga6044e33fe059b2400d7d8ac3d18f916e" kindref="member">NRFX_NFCT_NFCID1_DOUBLE_SIZE</ref></initializer>
        <briefdescription>
<para>Default length of NFC ID. *<zwj/>/. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/include/nrfx_nfct.h" line="55" column="9" bodyfile="drivers/include/nrfx_nfct.h" bodystart="55" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="group__nrfx__nfct_1ga731f7d0d8d5975b151ef3749c877e2a3" prot="public" static="no" strong="no">
        <type></type>
        <name>nrfx_nfct_state_t</name>
        <enumvalue id="group__nrfx__nfct_1gga731f7d0d8d5975b151ef3749c877e2a3aad6caab2cc68816c5ab1c938398e2b12" prot="public">
          <name>NRFX_NFCT_STATE_DISABLED</name>
          <initializer>= NRF_NFCT_TASK_DISABLE</initializer>
          <briefdescription>
<para>NFC Tag is disabled (no sensing of an external NFC field). </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrfx__nfct_1gga731f7d0d8d5975b151ef3749c877e2a3ab7c71c0f33554eb0796cd9fc4608b64a" prot="public">
          <name>NRFX_NFCT_STATE_SENSING</name>
          <initializer>= NRF_NFCT_TASK_SENSE</initializer>
          <briefdescription>
<para>NFC Tag is sensing whether there is an external NFC field. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrfx__nfct_1gga731f7d0d8d5975b151ef3749c877e2a3a41c33cf9901c6f8168beb57497ed3d5d" prot="public">
          <name>NRFX_NFCT_STATE_ACTIVATED</name>
          <initializer>= NRF_NFCT_TASK_ACTIVATE</initializer>
          <briefdescription>
<para>NFC Tag is powered-up (see <ref refid="group__nrfx__nfct_1gaf30f9bb7b34b5ee816f7516c5cee472d" kindref="member">nrfx_nfct_active_state_t</ref> for possible substates). </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>NFCT hardware states. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/include/nrfx_nfct.h" line="58" column="1" bodyfile="drivers/include/nrfx_nfct.h" bodystart="59" bodyend="63"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrfx__nfct_1gaf30f9bb7b34b5ee816f7516c5cee472d" prot="public" static="no" strong="no">
        <type></type>
        <name>nrfx_nfct_active_state_t</name>
        <enumvalue id="group__nrfx__nfct_1ggaf30f9bb7b34b5ee816f7516c5cee472da7f549331dbe2de32702fc7cda3459f7a" prot="public">
          <name>NRFX_NFCT_ACTIVE_STATE_IDLE</name>
          <initializer>= NRF_NFCT_TASK_GOIDLE</initializer>
          <briefdescription>
<para>NFC Tag is activated and idle (not selected by a reader). </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrfx__nfct_1ggaf30f9bb7b34b5ee816f7516c5cee472da854dbc4d03a8cdad07305c1e4150a355" prot="public">
          <name>NRFX_NFCT_ACTIVE_STATE_SLEEP</name>
          <initializer>= NRF_NFCT_TASK_GOSLEEP</initializer>
          <briefdescription>
<para>NFC Tag is sleeping. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrfx__nfct_1ggaf30f9bb7b34b5ee816f7516c5cee472dac9b082ae08e8aad051f286db70d9a64e" prot="public">
          <name>NRFX_NFCT_ACTIVE_STATE_DEFAULT</name>
          <briefdescription>
<para>NFC Tag is either sleeping or idle, depending on the previous state before being selected by a poller. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>NFC tag states, when NFCT hardware is activated. </para>
        </briefdescription>
        <detaileddescription>
<para>These states are substates of the <ref refid="group__nrfx__nfct_1gga731f7d0d8d5975b151ef3749c877e2a3a41c33cf9901c6f8168beb57497ed3d5d" kindref="member">NRFX_NFCT_STATE_ACTIVATED</ref> state. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/include/nrfx_nfct.h" line="70" column="1" bodyfile="drivers/include/nrfx_nfct.h" bodystart="71" bodyend="75"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrfx__nfct_1gafb093b8d45e5bb6b92e65fa6d46f5991" prot="public" static="no" strong="no">
        <type></type>
        <name>nrfx_nfct_evt_id_t</name>
        <enumvalue id="group__nrfx__nfct_1ggafb093b8d45e5bb6b92e65fa6d46f5991aee9e2173c1dde2479ebd2f339220e883" prot="public">
          <name>NRFX_NFCT_EVT_FIELD_DETECTED</name>
          <initializer>= NRF_NFCT_INT_FIELDDETECTED_MASK</initializer>
          <briefdescription>
<para>External NFC field is detected. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrfx__nfct_1ggafb093b8d45e5bb6b92e65fa6d46f5991a293dbfc64f5ed0acbbae1ebc1f774e3b" prot="public">
          <name>NRFX_NFCT_EVT_FIELD_LOST</name>
          <initializer>= NRF_NFCT_INT_FIELDLOST_MASK</initializer>
          <briefdescription>
<para>External NFC Field is lost. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrfx__nfct_1ggafb093b8d45e5bb6b92e65fa6d46f5991ab1b3011ce41728f7f395249ed44b337d" prot="public">
          <name>NRFX_NFCT_EVT_SELECTED</name>
          <initializer>= NRF_NFCT_INT_SELECTED_MASK</initializer>
          <briefdescription>
<para>Tag was selected by the poller. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrfx__nfct_1ggafb093b8d45e5bb6b92e65fa6d46f5991a19d896539da2903258c3b7c348b7b2a7" prot="public">
          <name>NRFX_NFCT_EVT_RX_FRAMESTART</name>
          <initializer>= NRF_NFCT_INT_RXFRAMESTART_MASK</initializer>
          <briefdescription>
<para>Data frame reception started. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrfx__nfct_1ggafb093b8d45e5bb6b92e65fa6d46f5991aab8d4ecffc5d51e56d52d9617669836d" prot="public">
          <name>NRFX_NFCT_EVT_RX_FRAMEEND</name>
          <initializer>= NRF_NFCT_INT_RXFRAMEEND_MASK</initializer>
          <briefdescription>
<para>Data frame is received. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrfx__nfct_1ggafb093b8d45e5bb6b92e65fa6d46f5991a0b7a2d4b8383a649503729e8cbe3beed" prot="public">
          <name>NRFX_NFCT_EVT_TX_FRAMESTART</name>
          <initializer>= NRF_NFCT_INT_TXFRAMESTART_MASK</initializer>
          <briefdescription>
<para>Data frame transmission started. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrfx__nfct_1ggafb093b8d45e5bb6b92e65fa6d46f5991ad7bf9b1bc2382ade2de9cfac9053b0dc" prot="public">
          <name>NRFX_NFCT_EVT_TX_FRAMEEND</name>
          <initializer>= NRF_NFCT_INT_TXFRAMEEND_MASK</initializer>
          <briefdescription>
<para>Data frame is transmitted. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrfx__nfct_1ggafb093b8d45e5bb6b92e65fa6d46f5991a597221bdb25c94f81767d4f395297520" prot="public">
          <name>NRFX_NFCT_EVT_ERROR</name>
          <initializer>= NRF_NFCT_INT_ERROR_MASK</initializer>
          <briefdescription>
<para>Error occurred in an NFC communication. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>NFCT driver event types, passed to the upper-layer callback function provided during the initialization. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/include/nrfx_nfct.h" line="81" column="1" bodyfile="drivers/include/nrfx_nfct.h" bodystart="82" bodyend="91"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrfx__nfct_1ga5c5e0f0bc8e2b623c3421e35c80fe217" prot="public" static="no" strong="no">
        <type></type>
        <name>nrfx_nfct_error_t</name>
        <enumvalue id="group__nrfx__nfct_1gga5c5e0f0bc8e2b623c3421e35c80fe217a73a3c413236a4e711b38c3178bbaf2ed" prot="public">
          <name>NRFX_NFCT_ERROR_FRAMEDELAYTIMEOUT</name>
          <briefdescription>
<para>No response frame was transmitted to the poller in the transmit window. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrfx__nfct_1gga5c5e0f0bc8e2b623c3421e35c80fe217adceeb15e202a967b1c5c8be1a09ea615" prot="public">
          <name>NRFX_NFCT_ERROR_NUM</name>
          <briefdescription>
<para>Total number of possible errors. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>NFCT timing-related error types. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/include/nrfx_nfct.h" line="94" column="1" bodyfile="drivers/include/nrfx_nfct.h" bodystart="95" bodyend="98"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrfx__nfct_1ga7e58a8b0ea7f85b68073f01f67f83e1f" prot="public" static="no" strong="no">
        <type></type>
        <name>nrfx_nfct_param_id_t</name>
        <enumvalue id="group__nrfx__nfct_1gga7e58a8b0ea7f85b68073f01f67f83e1fa59382ac55aa24f1384523c5673030b94" prot="public">
          <name>NRFX_NFCT_PARAM_ID_FDT</name>
          <briefdescription>
<para>NFC-A Frame Delay Time parameter. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrfx__nfct_1gga7e58a8b0ea7f85b68073f01f67f83e1faa304701c13c1c7c44b84b13b5ef38900" prot="public">
          <name>NRFX_NFCT_PARAM_ID_FDT_MIN</name>
          <briefdescription>
<para>NFC-A Frame Delay Time Min parameter. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrfx__nfct_1gga7e58a8b0ea7f85b68073f01f67f83e1fa7dd25d0178542682356907e0c211e0aa" prot="public">
          <name>NRFX_NFCT_PARAM_ID_SEL_RES</name>
          <briefdescription>
<para>Value of the &apos;Protocol&apos; field in the NFC-A SEL_RES frame. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrfx__nfct_1gga7e58a8b0ea7f85b68073f01f67f83e1fa843238cce40948bffe230fd51d21564c" prot="public">
          <name>NRFX_NFCT_PARAM_ID_NFCID1</name>
          <briefdescription>
<para>NFC-A NFCID1 setting (NFC tag identifier). </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>NFCT driver parameter types. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/include/nrfx_nfct.h" line="101" column="1" bodyfile="drivers/include/nrfx_nfct.h" bodystart="102" bodyend="107"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group__nrfx__nfct_1ga9abd9ac021fc032be80b1802df8a169d" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* nrfx_nfct_handler_t) (nrfx_nfct_evt_t const *p_event)</definition>
        <argsstring>)(nrfx_nfct_evt_t const *p_event)</argsstring>
        <name>nrfx_nfct_handler_t</name>
        <briefdescription>
<para>Callback descriptor to pass events from the NFCT driver to the upper layer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_event</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the event descriptor.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para><ref refid="group__nrfx__nfct_1ggafb093b8d45e5bb6b92e65fa6d46f5991aee9e2173c1dde2479ebd2f339220e883" kindref="member">NRFX_NFCT_EVT_FIELD_DETECTED</ref> and <ref refid="group__nrfx__nfct_1ggafb093b8d45e5bb6b92e65fa6d46f5991a293dbfc64f5ed0acbbae1ebc1f774e3b" kindref="member">NRFX_NFCT_EVT_FIELD_LOST</ref> are generated only on field state transitions, i.e. there will be no multiple events of the same type (out of the 2 mentioned) coming in a row. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/include/nrfx_nfct.h" line="175" column="9" bodyfile="drivers/include/nrfx_nfct.h" bodystart="175" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__nrfx__nfct_1ga91ca5f1fb8a6492cad9e8f4fc92c39bf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__nrfx__error__codes_1ga2449720f8fa17b22243218068459a24b" kindref="member">nrfx_err_t</ref></type>
        <definition>nrfx_err_t nrfx_nfct_init</definition>
        <argsstring>(nrfx_nfct_config_t const *p_config)</argsstring>
        <name>nrfx_nfct_init</name>
        <param>
          <type><ref refid="structnrfx__nfct__config__t" kindref="compound">nrfx_nfct_config_t</ref> const *</type>
          <declname>p_config</declname>
        </param>
        <briefdescription>
<para>Function for initializing the NFCT driver. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_config</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the NFCT driver configuration structure.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>NRFX_SUCCESS</parametername>
</parameternamelist>
<parameterdescription>
<para>The NFCT driver was initialized successfully. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NRFX_ERROR_ALREADY</parametername>
</parameternamelist>
<parameterdescription>
<para>The driver is already initialized. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NRFX_ERROR_INVALID_STATE</parametername>
</parameternamelist>
<parameterdescription>
<para>The driver is already initialized. Deprecated - use <ref refid="group__nrfx__error__codes_1gga2449720f8fa17b22243218068459a24badc3fc33e8a7dc8b9a9547fe07b437efd" kindref="member">NRFX_ERROR_ALREADY</ref> instead. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NRFX_ERROR_FORBIDDEN</parametername>
</parameternamelist>
<parameterdescription>
<para>The NFCT antenna pads are not configured as antenna pins. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/include/nrfx_nfct.h" line="196" column="12" declfile="drivers/include/nrfx_nfct.h" declline="196" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfx__nfct_1gaf0b8e5a13760700247e1aeb5bdd82f9b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nrfx_nfct_uninit</definition>
        <argsstring>(void)</argsstring>
        <name>nrfx_nfct_uninit</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Function for uninitializing the NFCT driver. </para>
        </briefdescription>
        <detaileddescription>
<para>After uninitialization, the instance is in disabled state. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/include/nrfx_nfct.h" line="203" column="6" declfile="drivers/include/nrfx_nfct.h" declline="203" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfx__nfct_1ga4b4e8321617acae3183bcf5096f87bad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool nrfx_nfct_init_check</definition>
        <argsstring>(void)</argsstring>
        <name>nrfx_nfct_init_check</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Function for checking if the NFCT driver is initialized. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>Driver is already initialized. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>Driver is not initialized. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/include/nrfx_nfct.h" line="211" column="6" declfile="drivers/include/nrfx_nfct.h" declline="211" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfx__nfct_1ga33232a3b1b6f9bf1150787d749aae46f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nrfx_nfct_enable</definition>
        <argsstring>(void)</argsstring>
        <name>nrfx_nfct_enable</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Function for starting the NFC subsystem. </para>
        </briefdescription>
        <detaileddescription>
<para>After this function completes, NFC readers are able to detect the tag. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/include/nrfx_nfct.h" line="218" column="6" declfile="drivers/include/nrfx_nfct.h" declline="218" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfx__nfct_1ga0b0a5aaf2b881f200ffc48c4998c9344" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nrfx_nfct_disable</definition>
        <argsstring>(void)</argsstring>
        <name>nrfx_nfct_disable</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Function for disabling the NFCT driver. </para>
        </briefdescription>
        <detaileddescription>
<para>After this function returns, NFC readers are no longer able to connect to the tag. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/include/nrfx_nfct.h" line="226" column="6" declfile="drivers/include/nrfx_nfct.h" declline="226" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfx__nfct_1ga6d26bd3e4648933d968b8eea882c3c57" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool nrfx_nfct_field_check</definition>
        <argsstring>(void)</argsstring>
        <name>nrfx_nfct_field_check</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Function for checking whether the external NFC field is present in the range of the tag. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>The NFC field is present. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>No NFC field is present. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/include/nrfx_nfct.h" line="234" column="6" declfile="drivers/include/nrfx_nfct.h" declline="234" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfx__nfct_1ga9366bc20921f6b719aef74453e559ecb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__nrfx__error__codes_1ga2449720f8fa17b22243218068459a24b" kindref="member">nrfx_err_t</ref></type>
        <definition>nrfx_err_t nrfx_nfct_rx</definition>
        <argsstring>(nrfx_nfct_data_desc_t const *p_rx_data)</argsstring>
        <name>nrfx_nfct_rx</name>
        <param>
          <type><ref refid="structnrfx__nfct__data__desc__t" kindref="compound">nrfx_nfct_data_desc_t</ref> const *</type>
          <declname>p_rx_data</declname>
        </param>
        <briefdescription>
<para>Function for preparing the NFCT driver for receiving an NFC frame. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_rx_data</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the RX buffer.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>NRFX_SUCCESS</parametername>
</parameternamelist>
<parameterdescription>
<para>The operation was successful. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NRFX_ERROR_INVALID_ADDR</parametername>
</parameternamelist>
<parameterdescription>
<para>Data buffer does not point to memory region reachable by EasyDMA. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/include/nrfx_nfct.h" line="244" column="12" declfile="drivers/include/nrfx_nfct.h" declline="244" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfx__nfct_1ga00d9924fc60953ff37d33847eccaea8b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__nrfx__error__codes_1ga2449720f8fa17b22243218068459a24b" kindref="member">nrfx_err_t</ref></type>
        <definition>nrfx_err_t nrfx_nfct_tx</definition>
        <argsstring>(nrfx_nfct_data_desc_t const *p_tx_data, nrf_nfct_frame_delay_mode_t delay_mode)</argsstring>
        <name>nrfx_nfct_tx</name>
        <param>
          <type><ref refid="structnrfx__nfct__data__desc__t" kindref="compound">nrfx_nfct_data_desc_t</ref> const *</type>
          <declname>p_tx_data</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__nfct__hal_1ga440398a7c43c28c619f2326cf0d48408" kindref="member">nrf_nfct_frame_delay_mode_t</ref></type>
          <declname>delay_mode</declname>
        </param>
        <briefdescription>
<para>Function for transmitting an NFC frame. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_tx_data</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the TX buffer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">delay_mode</parametername>
</parameternamelist>
<parameterdescription>
<para>Delay mode of the NFCT frame timer.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>NRFX_SUCCESS</parametername>
</parameternamelist>
<parameterdescription>
<para>The operation was successful. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NRFX_ERROR_INVALID_LENGTH</parametername>
</parameternamelist>
<parameterdescription>
<para>The TX buffer size is invalid. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NRFX_ERROR_BUSY</parametername>
</parameternamelist>
<parameterdescription>
<para>Driver is already transferring. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NRFX_ERROR_INVALID_ADDR</parametername>
</parameternamelist>
<parameterdescription>
<para>Data buffer does not point to memory region reachable by EasyDMA. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/include/nrfx_nfct.h" line="258" column="12" declfile="drivers/include/nrfx_nfct.h" declline="258" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfx__nfct_1ga364aa34620ec0a54bab6eb8d80ca5572" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__nrfx__error__codes_1ga2449720f8fa17b22243218068459a24b" kindref="member">nrfx_err_t</ref></type>
        <definition>nrfx_err_t nrfx_nfct_bits_tx</definition>
        <argsstring>(nrfx_nfct_data_desc_t const *p_tx_data, nrf_nfct_frame_delay_mode_t delay_mode)</argsstring>
        <name>nrfx_nfct_bits_tx</name>
        <param>
          <type><ref refid="structnrfx__nfct__data__desc__t" kindref="compound">nrfx_nfct_data_desc_t</ref> const *</type>
          <declname>p_tx_data</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__nfct__hal_1ga440398a7c43c28c619f2326cf0d48408" kindref="member">nrf_nfct_frame_delay_mode_t</ref></type>
          <declname>delay_mode</declname>
        </param>
        <briefdescription>
<para>Function for transmitting an NFC frame with a specified number of bits. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_tx_data</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the TX buffer. Unlike in <ref refid="group__nrfx__nfct_1ga00d9924fc60953ff37d33847eccaea8b" kindref="member">nrfx_nfct_tx</ref>, <computeroutput>data_size</computeroutput> is used as the number of bits to transmit, rather than bytes. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">delay_mode</parametername>
</parameternamelist>
<parameterdescription>
<para>Delay mode of the NFCT frame timer.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>NRFX_SUCCESS</parametername>
</parameternamelist>
<parameterdescription>
<para>The operation was successful. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NRFX_ERROR_INVALID_LENGTH</parametername>
</parameternamelist>
<parameterdescription>
<para>The TX buffer size is invalid. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NRFX_ERROR_BUSY</parametername>
</parameternamelist>
<parameterdescription>
<para>Driver is already transferring. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NRFX_ERROR_INVALID_ADDR</parametername>
</parameternamelist>
<parameterdescription>
<para>Data buffer does not point to memory region reachable by EasyDMA. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/include/nrfx_nfct.h" line="274" column="12" declfile="drivers/include/nrfx_nfct.h" declline="274" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfx__nfct_1gacb1e776d8d50fcf8d25b4ca769eb10bf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nrfx_nfct_state_force</definition>
        <argsstring>(nrfx_nfct_state_t state)</argsstring>
        <name>nrfx_nfct_state_force</name>
        <param>
          <type><ref refid="group__nrfx__nfct_1ga731f7d0d8d5975b151ef3749c877e2a3" kindref="member">nrfx_nfct_state_t</ref></type>
          <declname>state</declname>
        </param>
        <briefdescription>
<para>Function for moving the NFCT to a new state. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>The HFCLK must be running before activating the NFCT with <ref refid="group__nrfx__nfct_1gga731f7d0d8d5975b151ef3749c877e2a3a41c33cf9901c6f8168beb57497ed3d5d" kindref="member">NRFX_NFCT_STATE_ACTIVATED</ref>.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">state</parametername>
</parameternamelist>
<parameterdescription>
<para>The required state. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/include/nrfx_nfct.h" line="285" column="6" declfile="drivers/include/nrfx_nfct.h" declline="285" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfx__nfct_1gab9309b026a18900a3f252bf3a698a706" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nrfx_nfct_init_substate_force</definition>
        <argsstring>(nrfx_nfct_active_state_t sub_state)</argsstring>
        <name>nrfx_nfct_init_substate_force</name>
        <param>
          <type><ref refid="group__nrfx__nfct_1gaf30f9bb7b34b5ee816f7516c5cee472d" kindref="member">nrfx_nfct_active_state_t</ref></type>
          <declname>sub_state</declname>
        </param>
        <briefdescription>
<para>Function for moving the NFCT to a new initial substate within <ref refid="group__nrfx__nfct_1gga731f7d0d8d5975b151ef3749c877e2a3a41c33cf9901c6f8168beb57497ed3d5d" kindref="member">NRFX_NFCT_STATE_ACTIVATED</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">sub_state</parametername>
</parameternamelist>
<parameterdescription>
<para>The required substate. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/include/nrfx_nfct.h" line="292" column="6" declfile="drivers/include/nrfx_nfct.h" declline="292" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfx__nfct_1ga8e093fc7d5c5bd44b2ab6439ffe2ee71" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__nrfx__error__codes_1ga2449720f8fa17b22243218068459a24b" kindref="member">nrfx_err_t</ref></type>
        <definition>nrfx_err_t nrfx_nfct_parameter_set</definition>
        <argsstring>(nrfx_nfct_param_t const *p_param)</argsstring>
        <name>nrfx_nfct_parameter_set</name>
        <param>
          <type><ref refid="structnrfx__nfct__param__t" kindref="compound">nrfx_nfct_param_t</ref> const *</type>
          <declname>p_param</declname>
        </param>
        <briefdescription>
<para>Function for setting the NFC communication parameter. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Parameter validation for length and acceptable values.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_param</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to parameter descriptor.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>NRFX_SUCCESS</parametername>
</parameternamelist>
<parameterdescription>
<para>The operation was successful. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NRFX_ERROR_INVALID_PARAM</parametername>
</parameternamelist>
<parameterdescription>
<para>The parameter data is invalid. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/include/nrfx_nfct.h" line="304" column="12" declfile="drivers/include/nrfx_nfct.h" declline="304" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfx__nfct_1ga5e356f78fb13e98d48227edcb4f28dee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__nrfx__error__codes_1ga2449720f8fa17b22243218068459a24b" kindref="member">nrfx_err_t</ref></type>
        <definition>nrfx_err_t nrfx_nfct_nfcid1_default_bytes_get</definition>
        <argsstring>(uint8_t *const p_nfcid1_buff, uint32_t nfcid1_buff_len)</argsstring>
        <name>nrfx_nfct_nfcid1_default_bytes_get</name>
        <param>
          <type>uint8_t *const</type>
          <declname>p_nfcid1_buff</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>nfcid1_buff_len</declname>
        </param>
        <briefdescription>
<para>Function for getting default bytes for NFCID1. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This function cannot be used from the non-secure code because it requires access to FICR registers.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">p_nfcid1_buff</parametername>
</parameternamelist>
<parameterdescription>
<para>In: empty buffer for data; Out: buffer with the NFCID1 default data. These values can be used to fill the Type 2 Tag Internal Bytes. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">nfcid1_buff_len</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of the NFCID1 buffer.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>NRFX_SUCCESS</parametername>
</parameternamelist>
<parameterdescription>
<para>The operation was successful. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NRFX_ERROR_INVALID_LENGTH</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of the NFCID buffer is different than <ref refid="group__nrfx__nfct_1gaedc09e95d7768677834b924c9a3f2f96" kindref="member">NRFX_NFCT_NFCID1_SINGLE_SIZE</ref>, <ref refid="group__nrfx__nfct_1ga6044e33fe059b2400d7d8ac3d18f916e" kindref="member">NRFX_NFCT_NFCID1_DOUBLE_SIZE</ref>, or <ref refid="group__nrfx__nfct_1ga1f998c6f7af9d44404539738d154d366" kindref="member">NRFX_NFCT_NFCID1_TRIPLE_SIZE</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/include/nrfx_nfct.h" line="323" column="12" declfile="drivers/include/nrfx_nfct.h" declline="323" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfx__nfct_1ga1ecf44d3d3ce09bd0773d8d69bcc4d2b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nrfx_nfct_autocolres_enable</definition>
        <argsstring>(void)</argsstring>
        <name>nrfx_nfct_autocolres_enable</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Function for enabling the automatic collision resolution. </para>
        </briefdescription>
        <detaileddescription>
<para>As defined by the NFC Forum Digital Protocol Technical Specification (and ISO 14443-3), the automatic collision resolution is implemented in the NFCT hardware. This function allows enabling and disabling this feature. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/include/nrfx_nfct.h" line="333" column="6" declfile="drivers/include/nrfx_nfct.h" declline="333" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfx__nfct_1ga199c4b66f4c1b02dae0f5877bcba9d3e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nrfx_nfct_autocolres_disable</definition>
        <argsstring>(void)</argsstring>
        <name>nrfx_nfct_autocolres_disable</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Function for disabling the automatic collision resolution. </para>
        </briefdescription>
        <detaileddescription>
<para>See also details in <ref refid="group__nrfx__nfct_1ga1ecf44d3d3ce09bd0773d8d69bcc4d2b" kindref="member">nrfx_nfct_autocolres_enable</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/include/nrfx_nfct.h" line="340" column="6" declfile="drivers/include/nrfx_nfct.h" declline="340" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="nrfx__nfct_8h_1a13ef69eb206f403d425eae3386bae696" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nrfx_nfct_irq_handler</definition>
        <argsstring>(void)</argsstring>
        <name>nrfx_nfct_irq_handler</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/include/nrfx_nfct.h" line="345" column="6" declfile="drivers/include/nrfx_nfct.h" declline="345" declcolumn="6"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2018<sp/>-<sp/>2024,<sp/>Nordic<sp/>Semiconductor<sp/>ASA</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>All<sp/>rights<sp/>reserved.</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>SPDX-License-Identifier:<sp/>BSD-3-Clause</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions<sp/>are<sp/>met:</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>1.<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright<sp/>notice,<sp/>this</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>2.<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the<sp/>distribution.</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/>3.<sp/>Neither<sp/>the<sp/>name<sp/>of<sp/>the<sp/>copyright<sp/>holder<sp/>nor<sp/>the<sp/>names<sp/>of<sp/>its</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>contributors<sp/>may<sp/>be<sp/>used<sp/>to<sp/>endorse<sp/>or<sp/>promote<sp/>products<sp/>derived<sp/>from<sp/>this</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>software<sp/>without<sp/>specific<sp/>prior<sp/>written<sp/>permission.</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>COPYRIGHT<sp/>HOLDERS<sp/>AND<sp/>CONTRIBUTORS<sp/>&quot;AS<sp/>IS&quot;</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/>AND<sp/>ANY<sp/>EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>THE</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*<sp/>ARE<sp/>DISCLAIMED.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>COPYRIGHT<sp/>HOLDER<sp/>OR<sp/>CONTRIBUTORS<sp/>BE</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,<sp/>SPECIAL,<sp/>EXEMPLARY,<sp/>OR</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>PROCUREMENT<sp/>OF</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>*<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,<sp/>DATA,<sp/>OR<sp/>PROFITS;<sp/>OR<sp/>BUSINESS</highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/>*<sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY<sp/>THEORY<sp/>OF<sp/>LIABILITY,<sp/>WHETHER<sp/>IN</highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/>*<sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR<sp/>OTHERWISE)</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/>*<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE<sp/>OF<sp/>THIS<sp/>SOFTWARE,<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/>*<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight></codeline>
<codeline lineno="32"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>NRFX_NFCT_H__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRFX_NFCT_H__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;nrfx.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;haly/nrfy_nfct.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="44"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="45"><highlight class="comment"><sp/>*<sp/>@defgroup<sp/>nrfx_nfct<sp/>NFCT<sp/>driver</highlight></codeline>
<codeline lineno="46"><highlight class="comment"><sp/>*<sp/>@{</highlight></codeline>
<codeline lineno="47"><highlight class="comment"><sp/>*<sp/>@ingroup<sp/>nrf_nfct</highlight></codeline>
<codeline lineno="48"><highlight class="comment"><sp/>*<sp/>@brief<sp/><sp/><sp/>Near<sp/>Field<sp/>Communication<sp/>Tag<sp/>(NFCT)<sp/>peripheral<sp/>driver.</highlight></codeline>
<codeline lineno="49"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRFX_NFCT_NFCID1_SINGLE_SIZE<sp/>4u<sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Length<sp/>of<sp/>single-size<sp/>NFCID1.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRFX_NFCT_NFCID1_DOUBLE_SIZE<sp/>7u<sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Length<sp/>of<sp/>double-size<sp/>NFCID1.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRFX_NFCT_NFCID1_TRIPLE_SIZE<sp/>10u<sp/></highlight><highlight class="comment">///&lt;<sp/>Length<sp/>of<sp/>triple-size<sp/>NFCID1.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRFX_NFCT_NFCID1_DEFAULT_LEN<sp/>NRFX_NFCT_NFCID1_DOUBLE_SIZE<sp/></highlight><highlight class="comment">///&lt;<sp/>Default<sp/>length<sp/>of<sp/>NFC<sp/>ID.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="57"><highlight class="comment">/**<sp/>@brief<sp/>NFCT<sp/>hardware<sp/>states.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal">{</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__nfct_1gga731f7d0d8d5975b151ef3749c877e2a3aad6caab2cc68816c5ab1c938398e2b12" kindref="member">NRFX_NFCT_STATE_DISABLED</ref><sp/><sp/>=<sp/><ref refid="group__nrf__nfct__hal_1gga90998750300456aedbce0700a9df232aaacb8bebeb380ad8b584c69b0b88531ce" kindref="member">NRF_NFCT_TASK_DISABLE</ref>,<sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>NFC<sp/>Tag<sp/>is<sp/>disabled<sp/>(no<sp/>sensing<sp/>of<sp/>an<sp/>external<sp/>NFC<sp/>field).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__nfct_1gga731f7d0d8d5975b151ef3749c877e2a3ab7c71c0f33554eb0796cd9fc4608b64a" kindref="member">NRFX_NFCT_STATE_SENSING</ref><sp/><sp/><sp/>=<sp/><ref refid="group__nrf__nfct__hal_1gga90998750300456aedbce0700a9df232aad88a9df1a096cbdf6411946d09136a78" kindref="member">NRF_NFCT_TASK_SENSE</ref>,<sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>NFC<sp/>Tag<sp/>is<sp/>sensing<sp/>whether<sp/>there<sp/>is<sp/>an<sp/>external<sp/>NFC<sp/>field.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__nfct_1gga731f7d0d8d5975b151ef3749c877e2a3a41c33cf9901c6f8168beb57497ed3d5d" kindref="member">NRFX_NFCT_STATE_ACTIVATED</ref><sp/>=<sp/><ref refid="group__nrf__nfct__hal_1gga90998750300456aedbce0700a9df232aa644a36bc8b24adbd7d591463d1869fd9" kindref="member">NRF_NFCT_TASK_ACTIVATE</ref>,<sp/></highlight><highlight class="comment">///&lt;<sp/>NFC<sp/>Tag<sp/>is<sp/>powered-up<sp/>(see<sp/>@ref<sp/>nrfx_nfct_active_state_t<sp/>for<sp/>possible<sp/>substates).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal">}<sp/><ref refid="group__nrfx__nfct_1ga731f7d0d8d5975b151ef3749c877e2a3" kindref="member">nrfx_nfct_state_t</ref>;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="65"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="66"><highlight class="comment"><sp/>*<sp/>@brief<sp/>NFC<sp/>tag<sp/>states,<sp/>when<sp/>NFCT<sp/>hardware<sp/>is<sp/>activated.</highlight></codeline>
<codeline lineno="67"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="68"><highlight class="comment"><sp/>*<sp/>@details<sp/>These<sp/>states<sp/>are<sp/>substates<sp/>of<sp/>the<sp/>@ref<sp/>NRFX_NFCT_STATE_ACTIVATED<sp/>state.</highlight></codeline>
<codeline lineno="69"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal">{</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__nfct_1ggaf30f9bb7b34b5ee816f7516c5cee472da7f549331dbe2de32702fc7cda3459f7a" kindref="member">NRFX_NFCT_ACTIVE_STATE_IDLE</ref><sp/><sp/>=<sp/><ref refid="group__nrf__nfct__hal_1gga90998750300456aedbce0700a9df232aa6a3d9998064eb60aa371c095536fb687" kindref="member">NRF_NFCT_TASK_GOIDLE</ref>,<sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>NFC<sp/>Tag<sp/>is<sp/>activated<sp/>and<sp/>idle<sp/>(not<sp/>selected<sp/>by<sp/>a<sp/>reader).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__nfct_1ggaf30f9bb7b34b5ee816f7516c5cee472da854dbc4d03a8cdad07305c1e4150a355" kindref="member">NRFX_NFCT_ACTIVE_STATE_SLEEP</ref><sp/>=<sp/><ref refid="group__nrf__nfct__hal_1gga90998750300456aedbce0700a9df232aae6df9bb05c3f5203cd1d6279deffe1aa" kindref="member">NRF_NFCT_TASK_GOSLEEP</ref>,<sp/></highlight><highlight class="comment">///&lt;<sp/>NFC<sp/>Tag<sp/>is<sp/>sleeping.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__nfct_1ggaf30f9bb7b34b5ee816f7516c5cee472dac9b082ae08e8aad051f286db70d9a64e" kindref="member">NRFX_NFCT_ACTIVE_STATE_DEFAULT</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>NFC<sp/>Tag<sp/>is<sp/>either<sp/>sleeping<sp/>or<sp/>idle,<sp/>depending<sp/>on<sp/>the<sp/>previous<sp/>state<sp/>before<sp/>being<sp/>selected<sp/>by<sp/>a<sp/>poller.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal">}<sp/><ref refid="group__nrfx__nfct_1gaf30f9bb7b34b5ee816f7516c5cee472d" kindref="member">nrfx_nfct_active_state_t</ref>;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="77"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="78"><highlight class="comment"><sp/>*<sp/>@brief<sp/>NFCT<sp/>driver<sp/>event<sp/>types,<sp/>passed<sp/>to<sp/>the<sp/>upper-layer<sp/>callback<sp/>function</highlight></codeline>
<codeline lineno="79"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>provided<sp/>during<sp/>the<sp/>initialization.</highlight></codeline>
<codeline lineno="80"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal">{</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__nfct_1ggafb093b8d45e5bb6b92e65fa6d46f5991aee9e2173c1dde2479ebd2f339220e883" kindref="member">NRFX_NFCT_EVT_FIELD_DETECTED</ref><sp/>=<sp/><ref refid="group__nrf__nfct__hal_1ggad16e86051bee49a907048aae86da2ee7af977f1a3ca28e086e5648d35ec502d84" kindref="member">NRF_NFCT_INT_FIELDDETECTED_MASK</ref>,<sp/></highlight><highlight class="comment">///&lt;<sp/>External<sp/>NFC<sp/>field<sp/>is<sp/>detected.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__nfct_1ggafb093b8d45e5bb6b92e65fa6d46f5991a293dbfc64f5ed0acbbae1ebc1f774e3b" kindref="member">NRFX_NFCT_EVT_FIELD_LOST</ref><sp/><sp/><sp/><sp/><sp/>=<sp/><ref refid="group__nrf__nfct__hal_1ggad16e86051bee49a907048aae86da2ee7a9bb7e892877b6246adf32be5228e3409" kindref="member">NRF_NFCT_INT_FIELDLOST_MASK</ref>,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>External<sp/>NFC<sp/>Field<sp/>is<sp/>lost.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__nfct_1ggafb093b8d45e5bb6b92e65fa6d46f5991ab1b3011ce41728f7f395249ed44b337d" kindref="member">NRFX_NFCT_EVT_SELECTED</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><ref refid="group__nrf__nfct__hal_1ggad16e86051bee49a907048aae86da2ee7ae5724887e0f3e76ad883e70dc69d89ef" kindref="member">NRF_NFCT_INT_SELECTED_MASK</ref>,<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Tag<sp/>was<sp/>selected<sp/>by<sp/>the<sp/>poller.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__nfct_1ggafb093b8d45e5bb6b92e65fa6d46f5991a19d896539da2903258c3b7c348b7b2a7" kindref="member">NRFX_NFCT_EVT_RX_FRAMESTART</ref><sp/><sp/>=<sp/><ref refid="group__nrf__nfct__hal_1ggad16e86051bee49a907048aae86da2ee7ab9c951e462fad2ae589b1921e91cd5f4" kindref="member">NRF_NFCT_INT_RXFRAMESTART_MASK</ref>,<sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Data<sp/>frame<sp/>reception<sp/>started.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__nfct_1ggafb093b8d45e5bb6b92e65fa6d46f5991aab8d4ecffc5d51e56d52d9617669836d" kindref="member">NRFX_NFCT_EVT_RX_FRAMEEND</ref><sp/><sp/><sp/><sp/>=<sp/><ref refid="group__nrf__nfct__hal_1ggad16e86051bee49a907048aae86da2ee7af7be4f93c9f7db92ebe29c50726ce31b" kindref="member">NRF_NFCT_INT_RXFRAMEEND_MASK</ref>,<sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Data<sp/>frame<sp/>is<sp/>received.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__nfct_1ggafb093b8d45e5bb6b92e65fa6d46f5991a0b7a2d4b8383a649503729e8cbe3beed" kindref="member">NRFX_NFCT_EVT_TX_FRAMESTART</ref><sp/><sp/>=<sp/><ref refid="group__nrf__nfct__hal_1ggad16e86051bee49a907048aae86da2ee7a42b18e008fd3b5704310812c544b5480" kindref="member">NRF_NFCT_INT_TXFRAMESTART_MASK</ref>,<sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Data<sp/>frame<sp/>transmission<sp/>started.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__nfct_1ggafb093b8d45e5bb6b92e65fa6d46f5991ad7bf9b1bc2382ade2de9cfac9053b0dc" kindref="member">NRFX_NFCT_EVT_TX_FRAMEEND</ref><sp/><sp/><sp/><sp/>=<sp/><ref refid="group__nrf__nfct__hal_1ggad16e86051bee49a907048aae86da2ee7a2cd2aebf085658f92b4f32be1bb4d32e" kindref="member">NRF_NFCT_INT_TXFRAMEEND_MASK</ref>,<sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Data<sp/>frame<sp/>is<sp/>transmitted.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__nfct_1ggafb093b8d45e5bb6b92e65fa6d46f5991a597221bdb25c94f81767d4f395297520" kindref="member">NRFX_NFCT_EVT_ERROR</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><ref refid="group__nrf__nfct__hal_1ggad16e86051bee49a907048aae86da2ee7abb7cf7fc5578a5e314462ace32cfdcb2" kindref="member">NRF_NFCT_INT_ERROR_MASK</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Error<sp/>occurred<sp/>in<sp/>an<sp/>NFC<sp/>communication.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal">}<sp/><ref refid="group__nrfx__nfct_1gafb093b8d45e5bb6b92e65fa6d46f5991" kindref="member">nrfx_nfct_evt_id_t</ref>;</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="93"><highlight class="comment">/**<sp/>@brief<sp/>NFCT<sp/>timing-related<sp/>error<sp/>types.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal">{</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__nfct_1gga5c5e0f0bc8e2b623c3421e35c80fe217a73a3c413236a4e711b38c3178bbaf2ed" kindref="member">NRFX_NFCT_ERROR_FRAMEDELAYTIMEOUT</ref>,<sp/></highlight><highlight class="comment">///&lt;<sp/>No<sp/>response<sp/>frame<sp/>was<sp/>transmitted<sp/>to<sp/>the<sp/>poller<sp/>in<sp/>the<sp/>transmit<sp/>window.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__nfct_1gga5c5e0f0bc8e2b623c3421e35c80fe217adceeb15e202a967b1c5c8be1a09ea615" kindref="member">NRFX_NFCT_ERROR_NUM</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Total<sp/>number<sp/>of<sp/>possible<sp/>errors.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal">}<sp/><ref refid="group__nrfx__nfct_1ga5c5e0f0bc8e2b623c3421e35c80fe217" kindref="member">nrfx_nfct_error_t</ref>;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="100"><highlight class="comment">/**<sp/>@brief<sp/>NFCT<sp/>driver<sp/>parameter<sp/>types.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal">{</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__nfct_1gga7e58a8b0ea7f85b68073f01f67f83e1fa59382ac55aa24f1384523c5673030b94" kindref="member">NRFX_NFCT_PARAM_ID_FDT</ref>,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>NFC-A<sp/>Frame<sp/>Delay<sp/>Time<sp/>parameter.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__nfct_1gga7e58a8b0ea7f85b68073f01f67f83e1faa304701c13c1c7c44b84b13b5ef38900" kindref="member">NRFX_NFCT_PARAM_ID_FDT_MIN</ref>,<sp/></highlight><highlight class="comment">///&lt;<sp/>NFC-A<sp/>Frame<sp/>Delay<sp/>Time<sp/>Min<sp/>parameter.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__nfct_1gga7e58a8b0ea7f85b68073f01f67f83e1fa7dd25d0178542682356907e0c211e0aa" kindref="member">NRFX_NFCT_PARAM_ID_SEL_RES</ref>,<sp/></highlight><highlight class="comment">///&lt;<sp/>Value<sp/>of<sp/>the<sp/>&apos;Protocol&apos;<sp/>field<sp/>in<sp/>the<sp/>NFC-A<sp/>SEL_RES<sp/>frame.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__nfct_1gga7e58a8b0ea7f85b68073f01f67f83e1fa843238cce40948bffe230fd51d21564c" kindref="member">NRFX_NFCT_PARAM_ID_NFCID1</ref>,<sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>NFC-A<sp/>NFCID1<sp/>setting<sp/>(NFC<sp/>tag<sp/>identifier).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal">}<sp/><ref refid="group__nrfx__nfct_1ga7e58a8b0ea7f85b68073f01f67f83e1f" kindref="member">nrfx_nfct_param_id_t</ref>;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="109"><highlight class="comment">/**<sp/>@brief<sp/>NFCID1<sp/>descriptor.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110" refid="structnrfx__nfct__nfcid1__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal">{</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_id;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>NFCID1<sp/>data.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>id_size;<sp/></highlight><highlight class="comment">///&lt;<sp/>NFCID1<sp/>size.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal">}<sp/><ref refid="structnrfx__nfct__nfcid1__t" kindref="compound">nrfx_nfct_nfcid1_t</ref>;</highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="116"><highlight class="comment">/**<sp/>@brief<sp/>NFCT<sp/>driver<sp/>parameter<sp/>descriptor.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117" refid="structnrfx__nfct__param__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal">{</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__nfct_1ga7e58a8b0ea7f85b68073f01f67f83e1f" kindref="member">nrfx_nfct_param_id_t</ref><sp/><sp/><sp/>id;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Type<sp/>of<sp/>parameter.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">union</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fdt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>NFC-A<sp/>Frame<sp/>Delay<sp/>Time.<sp/>Filled<sp/>when<sp/>nrfx_nfct_param_t.id<sp/>is<sp/>@ref<sp/>NRFX_NFCT_PARAM_ID_FDT.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fdt_min;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>NFC-A<sp/>Frame<sp/>Delay<sp/>Time<sp/>Min.<sp/>Filled<sp/>when<sp/>nrfx_nfct_param_t.id<sp/>is<sp/>@ref<sp/>NRFX_NFCT_PARAM_ID_FDT_MIN.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sel_res_protocol;<sp/></highlight><highlight class="comment">///&lt;<sp/>NFC-A<sp/>value<sp/>of<sp/>the<sp/>&apos;Protocol&apos;<sp/>field<sp/>in<sp/>the<sp/>SEL_RES<sp/>frame.<sp/>Filled<sp/>when<sp/>nrfx_nfct_param_t.id<sp/>is<sp/>@ref<sp/>NRFX_NFCT_PARAM_ID_SEL_RES.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structnrfx__nfct__nfcid1__t" kindref="compound">nrfx_nfct_nfcid1_t</ref><sp/>nfcid1;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>NFC-A<sp/>NFCID1<sp/>value<sp/>(tag<sp/>identifier).<sp/>Filled<sp/>when<sp/>nrfx_nfct_param_t.id<sp/>is<sp/>@ref<sp/>NRFX_NFCT_PARAM_ID_NFCID1.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/>data;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Union<sp/>to<sp/>store<sp/>parameter<sp/>data.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal">}<sp/><ref refid="structnrfx__nfct__param__t" kindref="compound">nrfx_nfct_param_t</ref>;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="129"><highlight class="comment">/**<sp/>@brief<sp/>NFCT<sp/>driver<sp/>RX/TX<sp/>buffer<sp/>descriptor.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="130" refid="structnrfx__nfct__data__desc__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal">{</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data_size;<sp/></highlight><highlight class="comment">///&lt;<sp/>RX/TX<sp/>buffer<sp/>size.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_data;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>RX/TX<sp/>buffer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal">}<sp/><ref refid="structnrfx__nfct__data__desc__t" kindref="compound">nrfx_nfct_data_desc_t</ref>;</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="136"><highlight class="comment">/**<sp/>@brief<sp/>Structure<sp/>used<sp/>to<sp/>describe<sp/>the<sp/>@ref<sp/>NRFX_NFCT_EVT_RX_FRAMEEND<sp/>event<sp/>type.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="137" refid="structnrfx__nfct__evt__rx__frameend__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal">{</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rx_status;<sp/></highlight><highlight class="comment">///&lt;<sp/>RX<sp/>error<sp/>status.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structnrfx__nfct__data__desc__t" kindref="compound">nrfx_nfct_data_desc_t</ref><sp/>rx_data;<sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>RX<sp/>buffer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal">}<sp/><ref refid="structnrfx__nfct__evt__rx__frameend__t" kindref="compound">nrfx_nfct_evt_rx_frameend_t</ref>;</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="143"><highlight class="comment">/**<sp/>@brief<sp/>Structure<sp/>used<sp/>to<sp/>describe<sp/>the<sp/>@ref<sp/>NRFX_NFCT_EVT_TX_FRAMESTART<sp/>event<sp/>type.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144" refid="structnrfx__nfct__evt__tx__framestart__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal">{</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structnrfx__nfct__data__desc__t" kindref="compound">nrfx_nfct_data_desc_t</ref><sp/>tx_data;<sp/></highlight><highlight class="comment">///&lt;<sp/>TX<sp/>buffer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal">}<sp/><ref refid="structnrfx__nfct__evt__tx__framestart__t" kindref="compound">nrfx_nfct_evt_tx_framestart_t</ref>;</highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="149"><highlight class="comment">/**<sp/>@brief<sp/>Structure<sp/>used<sp/>to<sp/>describe<sp/>the<sp/>@ref<sp/>NRFX_NFCT_EVT_ERROR<sp/>event<sp/>type.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="150" refid="structnrfx__nfct__evt__error__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal">{</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__nfct_1ga5c5e0f0bc8e2b623c3421e35c80fe217" kindref="member">nrfx_nfct_error_t</ref><sp/>reason;<sp/></highlight><highlight class="comment">///&lt;<sp/>Reason<sp/>for<sp/>error.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal">}<sp/><ref refid="structnrfx__nfct__evt__error__t" kindref="compound">nrfx_nfct_evt_error_t</ref>;</highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="155"><highlight class="comment">/**<sp/>@brief<sp/>NFCT<sp/>driver<sp/>event.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="156" refid="structnrfx__nfct__evt__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal">{</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__nfct_1gafb093b8d45e5bb6b92e65fa6d46f5991" kindref="member">nrfx_nfct_evt_id_t</ref><sp/>evt_id;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Type<sp/>of<sp/>event.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">union</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structnrfx__nfct__evt__rx__frameend__t" kindref="compound">nrfx_nfct_evt_rx_frameend_t</ref><sp/><sp/><sp/>rx_frameend;<sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>End<sp/>of<sp/>the<sp/>RX<sp/>frame<sp/>data.<sp/>Filled<sp/>when<sp/>nrfx_nfct_evt_t.evt_id<sp/>is<sp/>@ref<sp/>NRFX_NFCT_EVT_RX_FRAMEEND.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structnrfx__nfct__evt__tx__framestart__t" kindref="compound">nrfx_nfct_evt_tx_framestart_t</ref><sp/>tx_framestart;<sp/></highlight><highlight class="comment">///&lt;<sp/>Start<sp/>of<sp/>the<sp/>TX<sp/>frame<sp/>data.<sp/>Filled<sp/>when<sp/>nrfx_nfct_evt_t.evt_id<sp/>is<sp/>@ref<sp/>NRFX_NFCT_EVT_TX_FRAMESTART.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structnrfx__nfct__evt__error__t" kindref="compound">nrfx_nfct_evt_error_t</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>error;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Error<sp/>data.<sp/>Filled<sp/>when<sp/>nrfx_nfct_evt_t.evt_id<sp/>is<sp/>@ref<sp/>NRFX_NFCT_EVT_ERROR.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/>params;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Union<sp/>to<sp/>store<sp/>event<sp/>data.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal">}<sp/><ref refid="structnrfx__nfct__evt__t" kindref="compound">nrfx_nfct_evt_t</ref>;</highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="167"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="168"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Callback<sp/>descriptor<sp/>to<sp/>pass<sp/>events<sp/>from<sp/>the<sp/>NFCT<sp/>driver<sp/>to<sp/>the<sp/>upper<sp/>layer.</highlight></codeline>
<codeline lineno="169"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="170"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_event<sp/>Pointer<sp/>to<sp/>the<sp/>event<sp/>descriptor.</highlight></codeline>
<codeline lineno="171"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="172"><highlight class="comment"><sp/>*<sp/>@note<sp/>@ref<sp/>NRFX_NFCT_EVT_FIELD_DETECTED<sp/>and<sp/>@ref<sp/>NRFX_NFCT_EVT_FIELD_LOST<sp/>are<sp/>generated<sp/>only<sp/>on<sp/>field<sp/>state<sp/>transitions,</highlight></codeline>
<codeline lineno="173"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>i.e.<sp/>there<sp/>will<sp/>be<sp/>no<sp/>multiple<sp/>events<sp/>of<sp/>the<sp/>same<sp/>type<sp/>(out<sp/>of<sp/>the<sp/>2<sp/>mentioned)<sp/>coming<sp/>in<sp/>a<sp/>row.</highlight></codeline>
<codeline lineno="174"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(*<ref refid="group__nrfx__nfct_1ga9abd9ac021fc032be80b1802df8a169d" kindref="member">nrfx_nfct_handler_t</ref>)(<ref refid="structnrfx__nfct__evt__t" kindref="compound">nrfx_nfct_evt_t</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_event);</highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="177"><highlight class="comment">/**<sp/>@brief<sp/>NFCT<sp/>driver<sp/>configuration<sp/>structure.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="178" refid="structnrfx__nfct__config__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal">{</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rxtx_int_mask;<sp/></highlight><highlight class="comment">///&lt;<sp/>Mask<sp/>for<sp/>enabling<sp/>RX/TX<sp/>events.<sp/>Indicate<sp/>which<sp/>events<sp/>must<sp/>be<sp/>forwarded<sp/>to<sp/>the<sp/>upper<sp/>layer<sp/>by<sp/>using<sp/>@ref<sp/>nrfx_nfct_evt_id_t.<sp/>By<sp/>default,<sp/>no<sp/>events<sp/>are<sp/>enabled.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__nfct_1ga9abd9ac021fc032be80b1802df8a169d" kindref="member">nrfx_nfct_handler_t</ref><sp/>cb;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Callback.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>irq_priority;<sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Interrupt<sp/>priority.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal">}<sp/><ref refid="structnrfx__nfct__config__t" kindref="compound">nrfx_nfct_config_t</ref>;</highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="185"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="186"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>initializing<sp/>the<sp/>NFCT<sp/>driver.</highlight></codeline>
<codeline lineno="187"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="188"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_config<sp/><sp/>Pointer<sp/>to<sp/>the<sp/>NFCT<sp/>driver<sp/>configuration<sp/>structure.</highlight></codeline>
<codeline lineno="189"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="190"><highlight class="comment"><sp/>*<sp/>@retval<sp/>NRFX_SUCCESS<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>NFCT<sp/>driver<sp/>was<sp/>initialized<sp/>successfully.</highlight></codeline>
<codeline lineno="191"><highlight class="comment"><sp/>*<sp/>@retval<sp/>NRFX_ERROR_ALREADY<sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>driver<sp/>is<sp/>already<sp/>initialized.</highlight></codeline>
<codeline lineno="192"><highlight class="comment"><sp/>*<sp/>@retval<sp/>NRFX_ERROR_INVALID_STATE<sp/>The<sp/>driver<sp/>is<sp/>already<sp/>initialized.</highlight></codeline>
<codeline lineno="193"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Deprecated<sp/>-<sp/>use<sp/>@ref<sp/>NRFX_ERROR_ALREADY<sp/>instead.</highlight></codeline>
<codeline lineno="194"><highlight class="comment"><sp/>*<sp/>@retval<sp/>NRFX_ERROR_FORBIDDEN<sp/><sp/><sp/><sp/><sp/>The<sp/>NFCT<sp/>antenna<sp/>pads<sp/>are<sp/>not<sp/>configured<sp/>as<sp/>antenna<sp/>pins.</highlight></codeline>
<codeline lineno="195"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><ref refid="group__nrfx__error__codes_1ga2449720f8fa17b22243218068459a24b" kindref="member">nrfx_err_t</ref><sp/><ref refid="group__nrfx__nfct_1ga91ca5f1fb8a6492cad9e8f4fc92c39bf" kindref="member">nrfx_nfct_init</ref>(<ref refid="structnrfx__nfct__config__t" kindref="compound">nrfx_nfct_config_t</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_config);</highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="198"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="199"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>uninitializing<sp/>the<sp/>NFCT<sp/>driver.</highlight></codeline>
<codeline lineno="200"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="201"><highlight class="comment"><sp/>*<sp/>After<sp/>uninitialization,<sp/>the<sp/>instance<sp/>is<sp/>in<sp/>disabled<sp/>state.</highlight></codeline>
<codeline lineno="202"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrfx__nfct_1gaf0b8e5a13760700247e1aeb5bdd82f9b" kindref="member">nrfx_nfct_uninit</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="205"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="206"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>checking<sp/>if<sp/>the<sp/>NFCT<sp/>driver<sp/>is<sp/>initialized.</highlight></codeline>
<codeline lineno="207"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="208"><highlight class="comment"><sp/>*<sp/>@retval<sp/>true<sp/><sp/>Driver<sp/>is<sp/>already<sp/>initialized.</highlight></codeline>
<codeline lineno="209"><highlight class="comment"><sp/>*<sp/>@retval<sp/>false<sp/>Driver<sp/>is<sp/>not<sp/>initialized.</highlight></codeline>
<codeline lineno="210"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrfx__nfct_1ga4b4e8321617acae3183bcf5096f87bad" kindref="member">nrfx_nfct_init_check</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="213"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="214"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>starting<sp/>the<sp/>NFC<sp/>subsystem.</highlight></codeline>
<codeline lineno="215"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="216"><highlight class="comment"><sp/>*<sp/>After<sp/>this<sp/>function<sp/>completes,<sp/>NFC<sp/>readers<sp/>are<sp/>able<sp/>to<sp/>detect<sp/>the<sp/>tag.</highlight></codeline>
<codeline lineno="217"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrfx__nfct_1ga33232a3b1b6f9bf1150787d749aae46f" kindref="member">nrfx_nfct_enable</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="220"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="221"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>disabling<sp/>the<sp/>NFCT<sp/>driver.</highlight></codeline>
<codeline lineno="222"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="223"><highlight class="comment"><sp/>*<sp/>After<sp/>this<sp/>function<sp/>returns,<sp/>NFC<sp/>readers<sp/>are<sp/>no<sp/>longer<sp/>able<sp/>to<sp/>connect</highlight></codeline>
<codeline lineno="224"><highlight class="comment"><sp/>*<sp/>to<sp/>the<sp/>tag.</highlight></codeline>
<codeline lineno="225"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrfx__nfct_1ga0b0a5aaf2b881f200ffc48c4998c9344" kindref="member">nrfx_nfct_disable</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="228"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="229"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>checking<sp/>whether<sp/>the<sp/>external<sp/>NFC<sp/>field<sp/>is<sp/>present<sp/>in<sp/>the<sp/>range<sp/>of<sp/>the<sp/>tag.</highlight></codeline>
<codeline lineno="230"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="231"><highlight class="comment"><sp/>*<sp/>@retval<sp/>true<sp/><sp/>The<sp/>NFC<sp/>field<sp/>is<sp/>present.</highlight></codeline>
<codeline lineno="232"><highlight class="comment"><sp/>*<sp/>@retval<sp/>false<sp/>No<sp/>NFC<sp/>field<sp/>is<sp/>present.</highlight></codeline>
<codeline lineno="233"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrfx__nfct_1ga6d26bd3e4648933d968b8eea882c3c57" kindref="member">nrfx_nfct_field_check</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="236"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="237"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>preparing<sp/>the<sp/>NFCT<sp/>driver<sp/>for<sp/>receiving<sp/>an<sp/>NFC<sp/>frame.</highlight></codeline>
<codeline lineno="238"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="239"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_rx_data<sp/><sp/>Pointer<sp/>to<sp/>the<sp/>RX<sp/>buffer.</highlight></codeline>
<codeline lineno="240"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="241"><highlight class="comment"><sp/>*<sp/>@retval<sp/>NRFX_SUCCESS<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>operation<sp/>was<sp/>successful.</highlight></codeline>
<codeline lineno="242"><highlight class="comment"><sp/>*<sp/>@retval<sp/>NRFX_ERROR_INVALID_ADDR<sp/>Data<sp/>buffer<sp/>does<sp/>not<sp/>point<sp/>to<sp/>memory<sp/>region<sp/>reachable<sp/>by<sp/>EasyDMA.</highlight></codeline>
<codeline lineno="243"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"><ref refid="group__nrfx__error__codes_1ga2449720f8fa17b22243218068459a24b" kindref="member">nrfx_err_t</ref><sp/><ref refid="group__nrfx__nfct_1ga9366bc20921f6b719aef74453e559ecb" kindref="member">nrfx_nfct_rx</ref>(<ref refid="structnrfx__nfct__data__desc__t" kindref="compound">nrfx_nfct_data_desc_t</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_rx_data);</highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="246"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="247"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>transmitting<sp/>an<sp/>NFC<sp/>frame.</highlight></codeline>
<codeline lineno="248"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="249"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_tx_data<sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>TX<sp/>buffer.</highlight></codeline>
<codeline lineno="250"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>delay_mode<sp/><sp/>Delay<sp/>mode<sp/>of<sp/>the<sp/>NFCT<sp/>frame<sp/>timer.</highlight></codeline>
<codeline lineno="251"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="252"><highlight class="comment"><sp/>*<sp/>@retval<sp/>NRFX_SUCCESS<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>operation<sp/>was<sp/>successful.</highlight></codeline>
<codeline lineno="253"><highlight class="comment"><sp/>*<sp/>@retval<sp/>NRFX_ERROR_INVALID_LENGTH<sp/>The<sp/>TX<sp/>buffer<sp/>size<sp/>is<sp/>invalid.</highlight></codeline>
<codeline lineno="254"><highlight class="comment"><sp/>*<sp/>@retval<sp/>NRFX_ERROR_BUSY<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Driver<sp/>is<sp/>already<sp/>transferring.</highlight></codeline>
<codeline lineno="255"><highlight class="comment"><sp/>*<sp/>@retval<sp/>NRFX_ERROR_INVALID_ADDR<sp/><sp/><sp/>Data<sp/>buffer<sp/>does<sp/>not<sp/>point<sp/>to<sp/>memory<sp/>region<sp/>reachable<sp/>by</highlight></codeline>
<codeline lineno="256"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EasyDMA.</highlight></codeline>
<codeline lineno="257"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"><ref refid="group__nrfx__error__codes_1ga2449720f8fa17b22243218068459a24b" kindref="member">nrfx_err_t</ref><sp/><ref refid="group__nrfx__nfct_1ga00d9924fc60953ff37d33847eccaea8b" kindref="member">nrfx_nfct_tx</ref>(<ref refid="structnrfx__nfct__data__desc__t" kindref="compound">nrfx_nfct_data_desc_t</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_tx_data,</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__nfct__hal_1ga440398a7c43c28c619f2326cf0d48408" kindref="member">nrf_nfct_frame_delay_mode_t</ref><sp/><sp/><sp/>delay_mode);</highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="261"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="262"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>transmitting<sp/>an<sp/>NFC<sp/>frame<sp/>with<sp/>a<sp/>specified<sp/>number<sp/>of<sp/>bits.</highlight></codeline>
<codeline lineno="263"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="264"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_tx_data<sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>TX<sp/>buffer.<sp/>Unlike<sp/>in<sp/>@ref<sp/>nrfx_nfct_tx,<sp/>@p<sp/>data_size<sp/>is</highlight></codeline>
<codeline lineno="265"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>used<sp/>as<sp/>the<sp/>number<sp/>of<sp/>bits<sp/>to<sp/>transmit,<sp/>rather<sp/>than<sp/>bytes.</highlight></codeline>
<codeline lineno="266"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>delay_mode<sp/><sp/>Delay<sp/>mode<sp/>of<sp/>the<sp/>NFCT<sp/>frame<sp/>timer.</highlight></codeline>
<codeline lineno="267"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="268"><highlight class="comment"><sp/>*<sp/>@retval<sp/>NRFX_SUCCESS<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>operation<sp/>was<sp/>successful.</highlight></codeline>
<codeline lineno="269"><highlight class="comment"><sp/>*<sp/>@retval<sp/>NRFX_ERROR_INVALID_LENGTH<sp/>The<sp/>TX<sp/>buffer<sp/>size<sp/>is<sp/>invalid.</highlight></codeline>
<codeline lineno="270"><highlight class="comment"><sp/>*<sp/>@retval<sp/>NRFX_ERROR_BUSY<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Driver<sp/>is<sp/>already<sp/>transferring.</highlight></codeline>
<codeline lineno="271"><highlight class="comment"><sp/>*<sp/>@retval<sp/>NRFX_ERROR_INVALID_ADDR<sp/><sp/><sp/>Data<sp/>buffer<sp/>does<sp/>not<sp/>point<sp/>to<sp/>memory<sp/>region<sp/>reachable<sp/>by</highlight></codeline>
<codeline lineno="272"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EasyDMA.</highlight></codeline>
<codeline lineno="273"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"><ref refid="group__nrfx__error__codes_1ga2449720f8fa17b22243218068459a24b" kindref="member">nrfx_err_t</ref><sp/><ref refid="group__nrfx__nfct_1ga364aa34620ec0a54bab6eb8d80ca5572" kindref="member">nrfx_nfct_bits_tx</ref>(<ref refid="structnrfx__nfct__data__desc__t" kindref="compound">nrfx_nfct_data_desc_t</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_tx_data,</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__nfct__hal_1ga440398a7c43c28c619f2326cf0d48408" kindref="member">nrf_nfct_frame_delay_mode_t</ref><sp/><sp/><sp/>delay_mode);</highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="277"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="278"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>moving<sp/>the<sp/>NFCT<sp/>to<sp/>a<sp/>new<sp/>state.</highlight></codeline>
<codeline lineno="279"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="280"><highlight class="comment"><sp/>*<sp/>@note<sp/><sp/>The<sp/>HFCLK<sp/>must<sp/>be<sp/>running<sp/>before<sp/>activating<sp/>the<sp/>NFCT<sp/>with</highlight></codeline>
<codeline lineno="281"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>@ref<sp/>NRFX_NFCT_STATE_ACTIVATED.</highlight></codeline>
<codeline lineno="282"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="283"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>state<sp/><sp/>The<sp/>required<sp/>state.</highlight></codeline>
<codeline lineno="284"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrfx__nfct_1gacb1e776d8d50fcf8d25b4ca769eb10bf" kindref="member">nrfx_nfct_state_force</ref>(<ref refid="group__nrfx__nfct_1ga731f7d0d8d5975b151ef3749c877e2a3" kindref="member">nrfx_nfct_state_t</ref><sp/>state);</highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="287"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="288"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>moving<sp/>the<sp/>NFCT<sp/>to<sp/>a<sp/>new<sp/>initial<sp/>substate<sp/>within<sp/>@ref<sp/>NRFX_NFCT_STATE_ACTIVATED.</highlight></codeline>
<codeline lineno="289"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="290"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>sub_state<sp/><sp/>The<sp/>required<sp/>substate.</highlight></codeline>
<codeline lineno="291"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrfx__nfct_1gab9309b026a18900a3f252bf3a698a706" kindref="member">nrfx_nfct_init_substate_force</ref>(<ref refid="group__nrfx__nfct_1gaf30f9bb7b34b5ee816f7516c5cee472d" kindref="member">nrfx_nfct_active_state_t</ref><sp/>sub_state);</highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="294"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="295"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>the<sp/>NFC<sp/>communication<sp/>parameter.</highlight></codeline>
<codeline lineno="296"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="297"><highlight class="comment"><sp/>*<sp/>@note<sp/>Parameter<sp/>validation<sp/>for<sp/>length<sp/>and<sp/>acceptable<sp/>values.</highlight></codeline>
<codeline lineno="298"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="299"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_param<sp/><sp/>Pointer<sp/>to<sp/>parameter<sp/>descriptor.</highlight></codeline>
<codeline lineno="300"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="301"><highlight class="comment"><sp/>*<sp/>@retval<sp/>NRFX_SUCCESS<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>operation<sp/>was<sp/>successful.</highlight></codeline>
<codeline lineno="302"><highlight class="comment"><sp/>*<sp/>@retval<sp/>NRFX_ERROR_INVALID_PARAM<sp/>The<sp/>parameter<sp/>data<sp/>is<sp/>invalid.</highlight></codeline>
<codeline lineno="303"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"><ref refid="group__nrfx__error__codes_1ga2449720f8fa17b22243218068459a24b" kindref="member">nrfx_err_t</ref><sp/><ref refid="group__nrfx__nfct_1ga8e093fc7d5c5bd44b2ab6439ffe2ee71" kindref="member">nrfx_nfct_parameter_set</ref>(<ref refid="structnrfx__nfct__param__t" kindref="compound">nrfx_nfct_param_t</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_param);</highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="306"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="307"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>default<sp/>bytes<sp/>for<sp/>NFCID1.</highlight></codeline>
<codeline lineno="308"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="309"><highlight class="comment"><sp/>*<sp/>@note<sp/>This<sp/>function<sp/>cannot<sp/>be<sp/>used<sp/>from<sp/>the<sp/>non-secure<sp/>code<sp/>because<sp/>it<sp/>requires<sp/>access</highlight></codeline>
<codeline lineno="310"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>to<sp/>FICR<sp/>registers.</highlight></codeline>
<codeline lineno="311"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="312"><highlight class="comment"><sp/>*<sp/>@param[in,out]<sp/>p_nfcid1_buff<sp/><sp/><sp/><sp/>In:<sp/><sp/>empty<sp/>buffer<sp/>for<sp/>data;</highlight></codeline>
<codeline lineno="313"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Out:<sp/>buffer<sp/>with<sp/>the<sp/>NFCID1<sp/>default<sp/>data.<sp/>These<sp/>values</highlight></codeline>
<codeline lineno="314"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>can<sp/>be<sp/>used<sp/>to<sp/>fill<sp/>the<sp/>Type<sp/>2<sp/>Tag<sp/>Internal<sp/>Bytes.</highlight></codeline>
<codeline lineno="315"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/><sp/><sp/><sp/><sp/>nfcid1_buff_len<sp/><sp/>Length<sp/>of<sp/>the<sp/>NFCID1<sp/>buffer.</highlight></codeline>
<codeline lineno="316"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="317"><highlight class="comment"><sp/>*<sp/>@retval<sp/>NRFX_SUCCESS<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>operation<sp/>was<sp/>successful.</highlight></codeline>
<codeline lineno="318"><highlight class="comment"><sp/>*<sp/>@retval<sp/>NRFX_ERROR_INVALID_LENGTH<sp/>Length<sp/>of<sp/>the<sp/>NFCID<sp/>buffer<sp/>is<sp/>different<sp/>than</highlight></codeline>
<codeline lineno="319"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>@ref<sp/>NRFX_NFCT_NFCID1_SINGLE_SIZE,</highlight></codeline>
<codeline lineno="320"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>@ref<sp/>NRFX_NFCT_NFCID1_DOUBLE_SIZE,<sp/>or</highlight></codeline>
<codeline lineno="321"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>@ref<sp/>NRFX_NFCT_NFCID1_TRIPLE_SIZE.</highlight></codeline>
<codeline lineno="322"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"><ref refid="group__nrfx__error__codes_1ga2449720f8fa17b22243218068459a24b" kindref="member">nrfx_err_t</ref><sp/><ref refid="group__nrfx__nfct_1ga5e356f78fb13e98d48227edcb4f28dee" kindref="member">nrfx_nfct_nfcid1_default_bytes_get</ref>(uint8_t<sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>p_nfcid1_buff,</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nfcid1_buff_len);</highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="326"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="327"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>enabling<sp/>the<sp/>automatic<sp/>collision<sp/>resolution.</highlight></codeline>
<codeline lineno="328"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="329"><highlight class="comment"><sp/>*<sp/>@details<sp/>As<sp/>defined<sp/>by<sp/>the<sp/>NFC<sp/>Forum<sp/>Digital<sp/>Protocol<sp/>Technical<sp/>Specification<sp/>(and<sp/>ISO<sp/>14443-3),</highlight></codeline>
<codeline lineno="330"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>automatic<sp/>collision<sp/>resolution<sp/>is<sp/>implemented<sp/>in<sp/>the<sp/>NFCT<sp/>hardware.</highlight></codeline>
<codeline lineno="331"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>This<sp/>function<sp/>allows<sp/>enabling<sp/>and<sp/>disabling<sp/>this<sp/>feature.</highlight></codeline>
<codeline lineno="332"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrfx__nfct_1ga1ecf44d3d3ce09bd0773d8d69bcc4d2b" kindref="member">nrfx_nfct_autocolres_enable</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="335"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="336"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>disabling<sp/>the<sp/>automatic<sp/>collision<sp/>resolution.</highlight></codeline>
<codeline lineno="337"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="338"><highlight class="comment"><sp/>*<sp/>@details<sp/>See<sp/>also<sp/>details<sp/>in<sp/>@ref<sp/>nrfx_nfct_autocolres_enable.</highlight></codeline>
<codeline lineno="339"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrfx__nfct_1ga199c4b66f4c1b02dae0f5877bcba9d3e" kindref="member">nrfx_nfct_autocolres_disable</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="341"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="342"><highlight class="comment">/**<sp/>@}<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>nrfx_nfct_irq_handler(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal">}</highlight></codeline>
<codeline lineno="350"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="353"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="354"><highlight class="comment"><sp/>*<sp/>@defgroup<sp/>nrfx_nfct_fixes<sp/>NFCT<sp/>driver<sp/>fixes<sp/>and<sp/>workarounds</highlight></codeline>
<codeline lineno="355"><highlight class="comment"><sp/>*<sp/>@{</highlight></codeline>
<codeline lineno="356"><highlight class="comment"><sp/>*<sp/>@ingroup<sp/>nrf_nfct</highlight></codeline>
<codeline lineno="357"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Fixes<sp/>for<sp/>hardware-related<sp/>anomalies.</highlight></codeline>
<codeline lineno="358"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="359"><highlight class="comment"><sp/>*<sp/>If<sp/>you<sp/>are<sp/>using<sp/>the<sp/>nRF52832<sp/>chip,<sp/>the<sp/>workarounds<sp/>for<sp/>the<sp/>following<sp/>anomalies<sp/>are<sp/>applied:</highlight></codeline>
<codeline lineno="360"><highlight class="comment"><sp/>*<sp/>-<sp/>79.<sp/>NFCT:<sp/>A<sp/>false<sp/>EVENTS_FIELDDETECTED<sp/>event<sp/>occurs<sp/>after<sp/>the<sp/>field<sp/>is<sp/>lost.</highlight></codeline>
<codeline lineno="361"><highlight class="comment"><sp/>*<sp/>-<sp/>116.<sp/>NFCT<sp/>does<sp/>not<sp/>release<sp/>HFCLK<sp/>when<sp/>switching<sp/>from<sp/>ACTIVATED<sp/>to<sp/>SENSE<sp/>mode.</highlight></codeline>
<codeline lineno="362"><highlight class="comment"><sp/>*<sp/>To<sp/>implement<sp/>the<sp/>first<sp/>workaround,<sp/>an<sp/>instance<sp/>of<sp/>NRF_TIMER<sp/>is<sp/>used.<sp/>After<sp/>the<sp/>NFC<sp/>field<sp/>is<sp/>detected,</highlight></codeline>
<codeline lineno="363"><highlight class="comment"><sp/>*<sp/>the<sp/>timing<sp/>module<sp/>periodically<sp/>polls<sp/>its<sp/>state<sp/>to<sp/>determine<sp/>when<sp/>the<sp/>field<sp/>is<sp/>turned<sp/>off.</highlight></codeline>
<codeline lineno="364"><highlight class="comment"><sp/>*<sp/>To<sp/>implement<sp/>the<sp/>second<sp/>workaround,<sp/>power<sp/>reset<sp/>is<sp/>used<sp/>to<sp/>release<sp/>the<sp/>clock<sp/>acquired<sp/>by<sp/>NFCT</highlight></codeline>
<codeline lineno="365"><highlight class="comment"><sp/>*<sp/>after<sp/>the<sp/>field<sp/>is<sp/>turned<sp/>off.<sp/>Note<sp/>that<sp/>the<sp/>NFCT<sp/>register<sp/>configuration<sp/>is<sp/>restored<sp/>to<sp/>defaults.</highlight></codeline>
<codeline lineno="366"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="367"><highlight class="comment"><sp/>*<sp/>If<sp/>you<sp/>are<sp/>using<sp/>the<sp/>nRF52833,<sp/>nRF52840<sp/>or<sp/>nRF5340<sp/>chips,<sp/>the<sp/>workarounds<sp/>for<sp/>the<sp/>following</highlight></codeline>
<codeline lineno="368"><highlight class="comment"><sp/>*<sp/>anomalies<sp/>are<sp/>applied:</highlight></codeline>
<codeline lineno="369"><highlight class="comment"><sp/>*<sp/>-<sp/>190.<sp/>NFCT:<sp/>Event<sp/>FIELDDETECTED<sp/>can<sp/>be<sp/>generated<sp/>too<sp/>early.</highlight></codeline>
<codeline lineno="370"><highlight class="comment"><sp/>*<sp/>To<sp/>implement<sp/>this<sp/>workaround,<sp/>an<sp/>instance<sp/>of<sp/>NRF_TIMER<sp/>is<sp/>used.<sp/>After<sp/>the<sp/>NFC<sp/>field<sp/>is<sp/>detected,</highlight></codeline>
<codeline lineno="371"><highlight class="comment"><sp/>*<sp/>the<sp/>timing<sp/>module<sp/>measures<sp/>the<sp/>necessary<sp/>waiting<sp/>period<sp/>after<sp/>which<sp/>NFCT<sp/>can<sp/>be<sp/>activated.</highlight></codeline>
<codeline lineno="372"><highlight class="comment"><sp/>*<sp/>This<sp/>debouncing<sp/>technique<sp/>is<sp/>used<sp/>to<sp/>filter<sp/>possible<sp/>field<sp/>instabilities.</highlight></codeline>
<codeline lineno="373"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="374"><highlight class="comment"><sp/>*<sp/>The<sp/>current<sp/>code<sp/>contains<sp/>a<sp/>patch<sp/>for<sp/>the<sp/>anomaly<sp/>25<sp/>(NFCT:<sp/>Reset<sp/>value<sp/>of</highlight></codeline>
<codeline lineno="375"><highlight class="comment"><sp/>*<sp/>SENSRES<sp/>register<sp/>is<sp/>incorrect),<sp/>so<sp/>that<sp/>the<sp/>module<sp/>now<sp/>works<sp/>on<sp/>Windows<sp/>Phone.</highlight></codeline>
<codeline lineno="376"><highlight class="comment"><sp/>*<sp/>@}</highlight></codeline>
<codeline lineno="377"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRFX_NFCT_H__</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="drivers/include/nrfx_nfct.h"/>
  </compounddef>
</doxygen>
