<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="nrf__clock_8h" kind="file" language="C++">
    <compoundname>nrf_clock.h</compoundname>
    <includes local="no">nrfx.h</includes>
    <includedby refid="nrfx__clock_8h" local="no">drivers/include/nrfx_clock.h</includedby>
    <incdepgraph>
      <node id="1">
        <label>hal/nrf_clock.h</label>
        <link refid="nrf__clock_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>nrfx.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__nrf__clock__hal_1gaeb804e837f460de8222cbe0c4ef0b8a5" prot="public" static="no">
        <name>NRF_CLOCK_HAS_CALIBRATION</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Symbol indicating whether the Low Frequency Clock calibration is present. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_clock.h" line="61" column="9" bodyfile="hal/nrf_clock.h" bodystart="61" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__clock__hal_1ga605ad993f6106e4709673be04e48ecd4" prot="public" static="no">
        <name>NRF_CLOCK_HAS_CALIBRATION_TIMER</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Symbol indicating whether the Low Frequency Clock calibration timer is present. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_clock.h" line="68" column="9" bodyfile="hal/nrf_clock.h" bodystart="68" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__clock__hal_1ga5809cfc28a294963e9e34297893f06c6" prot="public" static="no">
        <name>NRF_CLOCK_HAS_HFCLK192M</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Symbol indicating whether the 192 MHz clock is present. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_clock.h" line="76" column="9" bodyfile="hal/nrf_clock.h" bodystart="76" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__clock__hal_1ga5bc5faa0e579ec12f6c19ace10a17244" prot="public" static="no">
        <name>NRF_CLOCK_HAS_HFCLKAUDIO</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Symbol indicating whether the Audio clock is present. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_clock.h" line="84" column="9" bodyfile="hal/nrf_clock.h" bodystart="84" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__clock__hal_1gad87b23ad582f9c922e90ad8fcc58ec3d" prot="public" static="no">
        <name>NRF_CLOCK_HAS_HFCLK_DIV</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Symbol indicating whether the HFCLK frequency configuration is present. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_clock.h" line="92" column="9" bodyfile="hal/nrf_clock.h" bodystart="92" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__clock__hal_1ga539951935aeb02b293fc7405a77215c5" prot="public" static="no">
        <name>NRF_CLOCK_HAS_LFCLK_ALWAYSRUN</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Symbol indicating whether the ALWAYSRUN register is present for LFCLK. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_clock.h" line="100" column="9" bodyfile="hal/nrf_clock.h" bodystart="100" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__clock__hal_1ga27e62399ab97479fdca9e10320ec5252" prot="public" static="no">
        <name>NRF_CLOCK_HAS_HFCLK_ALWAYSRUN</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Symbol indicating whether the ALWAYSRUN register is present for HFCLK. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_clock.h" line="107" column="9" bodyfile="hal/nrf_clock.h" bodystart="107" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__clock__hal_1ga63128bfbe9597a96928b36bc035a228b" prot="public" static="no">
        <name>NRF_CLOCK_HAS_HFCLKSRC</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Symbol indicating whether the HFCLKSRC register is present. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_clock.h" line="114" column="9" bodyfile="hal/nrf_clock.h" bodystart="114" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__clock__hal_1ga8b1ee1b842ec655dad2a8a0b111a0cc7" prot="public" static="no">
        <name>NRF_CLOCK_HAS_PLL</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Symbol indicating whether the PLL section is present. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_clock.h" line="121" column="9" bodyfile="hal/nrf_clock.h" bodystart="121" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__clock__hal_1ga7923fa404e46e7e1abbf125ad39d3616" prot="public" static="no">
        <name>NRF_CLOCK_HAS_XO</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Symbol indicating whether XO registers are present. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_clock.h" line="128" column="9" bodyfile="hal/nrf_clock.h" bodystart="128" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__clock__hal_1gac1b7c513cc586139180ef595b7b20ecb" prot="public" static="no">
        <name>NRF_CLOCK_HAS_LFCLK_TYPE</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Symbol indicating whether the CLOCK type contains LFCLK subtype. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_clock.h" line="135" column="9" bodyfile="hal/nrf_clock.h" bodystart="135" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__clock__hal_1ga25f77a2fd0ef192c443d7b88cd007d84" prot="public" static="no">
        <name>NRF_CLOCK_LFCLKRUN_STATUS_NotTriggered</name>
        <initializer>CLOCK_LFCLK_RUN_STATUS_NotTriggered</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Task LFCLKSTART/HFCLKSTART has not been triggered definiton. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_clock.h" line="141" column="9" bodyfile="hal/nrf_clock.h" bodystart="141" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__clock__hal_1ga195c4bbb56c69035f161f93144957b65" prot="public" static="no">
        <name>NRF_CLOCK_LFCLKRUN_STATUS_Triggered</name>
        <initializer>CLOCK_LFCLK_RUN_STATUS_Triggered</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Task LFCLKSTART/HFCLKSTART has been triggered. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_clock.h" line="142" column="9" bodyfile="hal/nrf_clock.h" bodystart="142" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__clock__hal_1ga54b345f822889c4b0c04c046f7bba26e" prot="public" static="no">
        <name>NRF_CLOCK_INTENSET_LFCLKSTARTED_Msk</name>
        <initializer>CLOCK_INTENSET_LFCLKSTARTED_Msk</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Interrupt on LFCLKSTARTED event mask definition. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_clock.h" line="143" column="9" bodyfile="hal/nrf_clock.h" bodystart="143" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__clock__hal_1ga9b12ac309fcf52b96ccf121604ad0a8c" prot="public" static="no">
        <name>NRF_LFCLKSRCCOPY</name>
        <initializer>LFCLK.SRCCOPY</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>LF clock SRCCOPY register definition. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_clock.h" line="144" column="9" bodyfile="hal/nrf_clock.h" bodystart="144" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__clock__hal_1ga1672cf47a29571d28693b960d5ac4736" prot="public" static="no">
        <name>NRF_LFCLKRUN</name>
        <initializer>LFCLK.RUN</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>LF clock RUN register definition. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_clock.h" line="145" column="9" bodyfile="hal/nrf_clock.h" bodystart="145" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__clock__hal_1gaff9b8b7e0cb2f785b76026753222d2e5" prot="public" static="no">
        <name>NRF_LFCLKSTAT</name>
        <initializer>LFCLK.STAT</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>LF clock STAT register definition. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_clock.h" line="146" column="9" bodyfile="hal/nrf_clock.h" bodystart="146" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__clock__hal_1gace550db9400bd8ba69c847023ff52549" prot="public" static="no">
        <name>NRF_LFCLKSRC</name>
        <initializer>LFCLK.SRC</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>LF clock SRC register definition. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_clock.h" line="147" column="9" bodyfile="hal/nrf_clock.h" bodystart="147" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__clock__hal_1gaf2adfca656998fd1c0bd5cee3cc15ee1" prot="public" static="no">
        <name>NRF_LFCLKALWAYSRUN</name>
        <initializer>LFCLK.ALWAYSRUN</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>LF clock ALWAYSRUN register definition. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_clock.h" line="148" column="9" bodyfile="hal/nrf_clock.h" bodystart="148" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__clock__hal_1gaf09c25badcc39b2c874044dea30e9d35" prot="public" static="no">
        <name>NRF_CLOCK_LFCLKSRCCOPY_SRC_Msk</name>
        <initializer>CLOCK_LFCLK_SRCCOPY_SRC_Msk</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>LF clock SRCCOPY status mask definition. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_clock.h" line="149" column="9" bodyfile="hal/nrf_clock.h" bodystart="149" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__clock__hal_1gacdf20044a3e28b286cdc47d455cf3291" prot="public" static="no">
        <name>NRF_CLOCK_LFCLKSRCCOPY_SRC_Pos</name>
        <initializer>CLOCK_LFCLK_SRCCOPY_SRC_Pos</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>LF clock SRCCOPY status position definition. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_clock.h" line="150" column="9" bodyfile="hal/nrf_clock.h" bodystart="150" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__clock__hal_1gadb033159a59d2a159e520afa62169298" prot="public" static="no">
        <name>NRF_CLOCK_LFCLKRUN_STATUS_Msk</name>
        <initializer>CLOCK_LFCLK_RUN_STATUS_Msk</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>LF clock RUN status mask definition. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_clock.h" line="151" column="9" bodyfile="hal/nrf_clock.h" bodystart="151" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__clock__hal_1gaf0956809045fc8b9ca93e772e414b3d9" prot="public" static="no">
        <name>NRF_CLOCK_LFCLKRUN_STATUS_Pos</name>
        <initializer>CLOCK_LFCLK_RUN_STATUS_Pos</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>LF clock RUN status position definition. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_clock.h" line="152" column="9" bodyfile="hal/nrf_clock.h" bodystart="152" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__clock__hal_1gabdde88064b5d20e53721f151ba8c8f48" prot="public" static="no">
        <name>NRF_CLOCK_LFCLKSTAT_SRC_Msk</name>
        <initializer>CLOCK_LFCLK_STAT_SRC_Msk</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>LF clock STAT source mask definition. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_clock.h" line="153" column="9" bodyfile="hal/nrf_clock.h" bodystart="153" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__clock__hal_1ga60e48ade4d634efe42a552122e76eeea" prot="public" static="no">
        <name>NRF_CLOCK_LFCLKSTAT_SRC_Pos</name>
        <initializer>CLOCK_LFCLK_STAT_SRC_Pos</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>LF clock STAT source position definition. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_clock.h" line="154" column="9" bodyfile="hal/nrf_clock.h" bodystart="154" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__clock__hal_1ga5484cddb1dfe1ed4d3982ad1307c0cbb" prot="public" static="no">
        <name>NRF_CLOCK_LFCLKSTAT_STATE_Msk</name>
        <initializer>CLOCK_LFCLK_STAT_STATE_Msk</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>LF clock STAT state mask definition. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_clock.h" line="155" column="9" bodyfile="hal/nrf_clock.h" bodystart="155" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__clock__hal_1ga5b359967c40efa2f11c06a2ba4b0ba12" prot="public" static="no">
        <name>NRF_CLOCK_LFCLKSTAT_STATE_Pos</name>
        <initializer>CLOCK_LFCLK_STAT_STATE_Pos</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>LF clock STAT state position definition. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_clock.h" line="156" column="9" bodyfile="hal/nrf_clock.h" bodystart="156" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__clock__hal_1ga2f550a2c6a1a8f58a48c7d8b8262ada2" prot="public" static="no">
        <name>NRF_CLOCK_LFCLKSTAT_ALWAYSRUNNING_Msk</name>
        <initializer>CLOCK_LFCLK_STAT_ALWAYSRUNNING_Msk</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>LF clock STAT alwaysrunning position definition. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_clock.h" line="157" column="9" bodyfile="hal/nrf_clock.h" bodystart="157" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__clock__hal_1gada8946d0e1958e581118011582d9450b" prot="public" static="no">
        <name>NRF_CLOCK_LFCLKSTAT_ALWAYSRUNNING_Pos</name>
        <initializer>CLOCK_LFCLK_STAT_ALWAYSRUNNING_Pos</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>LF clock STAT alwaysrunning mask definition. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_clock.h" line="158" column="9" bodyfile="hal/nrf_clock.h" bodystart="158" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__clock__hal_1gaad7f55c79e5021acde2dc1c9deb91af5" prot="public" static="no">
        <name>NRF_CLOCK_LFCLKALWAYSRUN_ALWAYSRUN_Msk</name>
        <initializer>CLOCK_LFCLK_ALWAYSRUN_ALWAYSRUN_Msk</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>LF clock ALWAYSRUN position definition. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_clock.h" line="159" column="9" bodyfile="hal/nrf_clock.h" bodystart="159" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__clock__hal_1gab91b3624656e5175625ae800f4938a9e" prot="public" static="no">
        <name>NRF_CLOCK_LFCLKALWAYSRUN_ALWAYSRUN_Pos</name>
        <initializer>CLOCK_LFCLK_ALWAYSRUN_ALWAYSRUN_Pos</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>LF clock ALWAYSRUN mask definition. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_clock.h" line="160" column="9" bodyfile="hal/nrf_clock.h" bodystart="160" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__clock__hal_1ga263a8a23be70ebb916ebcbb79ea5bba1" prot="public" static="no">
        <name>NRF_CLOCK_INTENSET_HFCLKSTARTED_Msk</name>
        <initializer>CLOCK_INTEN_XOSTARTED_Msk</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>HF clock bit mask in interrupt register. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_clock.h" line="185" column="9" bodyfile="hal/nrf_clock.h" bodystart="185" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__clock__hal_1gad9c373e812c425d10207063685c96ddf" prot="public" static="no">
        <name>NRF_TASKS_HFCLKSTART</name>
        <initializer>TASKS_XOSTART</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Task HF clock start definition. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_clock.h" line="186" column="9" bodyfile="hal/nrf_clock.h" bodystart="186" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__clock__hal_1ga9e83f9586897ff8da2a3ed2802785c86" prot="public" static="no">
        <name>NRF_TASKS_HFCLKSTOP</name>
        <initializer>TASKS_XOSTOP</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Task HF clock stop definition. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_clock.h" line="187" column="9" bodyfile="hal/nrf_clock.h" bodystart="187" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__clock__hal_1gaf95b079647db2d17dddc9e51bd2896d9" prot="public" static="no">
        <name>NRF_EVENTS_HFCLKSTARTED</name>
        <initializer>EVENTS_XOSTARTED</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Event HF clock startrd definition. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_clock.h" line="188" column="9" bodyfile="hal/nrf_clock.h" bodystart="188" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__clock__hal_1ga31b23257160c1f28e6cd36a469a51194" prot="public" static="no">
        <name>NRF_HFCLKRUN</name>
        <initializer>XO.RUN</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>HF clock RUN register definition. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_clock.h" line="189" column="9" bodyfile="hal/nrf_clock.h" bodystart="189" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__clock__hal_1gad09ab255ce781f2c7d60956b53e055a0" prot="public" static="no">
        <name>NRF_HFCLKSTAT</name>
        <initializer>XO.STAT</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>HF clock STAT register definition. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_clock.h" line="190" column="9" bodyfile="hal/nrf_clock.h" bodystart="190" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__clock__hal_1ga9a8f01a63f230b3a330e8ce140f7a187" prot="public" static="no">
        <name>NRF_CLOCK_HFCLKRUN_STATUS_Msk</name>
        <initializer>CLOCK_XO_RUN_STATUS_Msk</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>HF clock RUN status mask definition. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_clock.h" line="191" column="9" bodyfile="hal/nrf_clock.h" bodystart="191" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__clock__hal_1ga972f816a3a1b384ae4a4453ca80bb1fe" prot="public" static="no">
        <name>NRF_CLOCK_HFCLKRUN_STATUS_Pos</name>
        <initializer>CLOCK_XO_RUN_STATUS_Pos</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>HF clock RUN status position definition. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_clock.h" line="192" column="9" bodyfile="hal/nrf_clock.h" bodystart="192" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__clock__hal_1ga0054b72186e455d70e8ce2164b1eb951" prot="public" static="no">
        <name>NRF_CLOCK_HFCLKSTAT_STATE_Msk</name>
        <initializer>CLOCK_XO_STAT_STATE_Msk</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>HF clock STAT state mask definition. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_clock.h" line="193" column="9" bodyfile="hal/nrf_clock.h" bodystart="193" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__clock__hal_1gab8b8be8d2793585960a11e41706ce6c0" prot="public" static="no">
        <name>NRF_CLOCK_HFCLKSTAT_STATE_Pos</name>
        <initializer>CLOCK_XO_STAT_STATE_Pos</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>HF clock STAT state position definition. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_clock.h" line="194" column="9" bodyfile="hal/nrf_clock.h" bodystart="194" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="group__nrf__clock__hal_1ga5b00bcdc07defd8187f2be8a2ec7a597" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_clock_lfclk_t</name>
        <enumvalue id="group__nrf__clock__hal_1gga5b00bcdc07defd8187f2be8a2ec7a597abbf41d486a54192b0710aaec4fc80c57" prot="public">
          <name>NRF_CLOCK_LFCLK_LFULP</name>
          <initializer>= CLOCK_LFCLKSRC_SRC_LFULP</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Internal 32 kHz Ultra-low power oscillator. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__clock__hal_1gga5b00bcdc07defd8187f2be8a2ec7a597ae2a6613188db56db98d2a71a1656556d" prot="public">
          <name>NRF_CLOCK_LFCLK_RC</name>
          <initializer>= CLOCK_LFCLKSRC_SRC_RC</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Internal 32 kHz RC oscillator. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__clock__hal_1gga5b00bcdc07defd8187f2be8a2ec7a597a0488e22c4ffb91ea744b59010f9d413c" prot="public">
          <name>NRF_CLOCK_LFCLK_XTAL</name>
          <initializer>= CLOCK_LFCLKSRC_SRC_Xtal</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>External 32 kHz crystal. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__clock__hal_1gga5b00bcdc07defd8187f2be8a2ec7a597a75d19341d350c8c24a9d036ab45e7a9e" prot="public">
          <name>NRF_CLOCK_LFCLK_SYNTH</name>
          <initializer>= CLOCK_LFCLKSRC_SRC_Synth</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Internal 32 kHz synthesized from HFCLK system clock. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__clock__hal_1gga5b00bcdc07defd8187f2be8a2ec7a597a6267606ab850cb0772e20bcd51a2ba31" prot="public">
          <name>NRF_CLOCK_LFCLK_XTAL_LOW_SWING</name>
          <initializer>= (CLOCK_LFCLKSRC_SRC_Xtal |
        (CLOCK_LFCLKSRC_EXTERNAL_Enabled &lt;&lt; CLOCK_LFCLKSRC_EXTERNAL_Pos))</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>External 32 kHz low swing signal. Used only with the LFCLKSRC register. For the others <ref refid="group__nrf__clock__hal_1gga5b00bcdc07defd8187f2be8a2ec7a597a0488e22c4ffb91ea744b59010f9d413c" kindref="member">NRF_CLOCK_LFCLK_XTAL</ref> is returned for this setting. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__clock__hal_1gga5b00bcdc07defd8187f2be8a2ec7a597abe6c2514d4e6aad768354e24674bd1fc" prot="public">
          <name>NRF_CLOCK_LFCLK_XTAL_FULL_SWING</name>
          <initializer>= (CLOCK_LFCLKSRC_SRC_Xtal |
        (CLOCK_LFCLKSRC_BYPASS_Enabled   &lt;&lt; CLOCK_LFCLKSRC_BYPASS_Pos) |
        (CLOCK_LFCLKSRC_EXTERNAL_Enabled &lt;&lt; CLOCK_LFCLKSRC_EXTERNAL_Pos))</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>External 32 kHz full swing signal. Used only with the LFCLKSRC register. For the others <ref refid="group__nrf__clock__hal_1gga5b00bcdc07defd8187f2be8a2ec7a597a0488e22c4ffb91ea744b59010f9d413c" kindref="member">NRF_CLOCK_LFCLK_XTAL</ref> is returned for this setting. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Low-frequency clock sources. </para>
        </briefdescription>
        <detaileddescription>
<para>Used by LFCLKSRC, LFCLKSTAT, and LFCLKSRCCOPY registers. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_clock.h" line="212" column="1" bodyfile="hal/nrf_clock.h" bodystart="213" bodyend="257"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__clock__hal_1gac89aad0e037b7aeefc5264a4dca76197" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_clock_hfclk_t</name>
        <enumvalue id="group__nrf__clock__hal_1ggac89aad0e037b7aeefc5264a4dca76197acd16ac7a514b4ce5fad5229330d3ee91" prot="public">
          <name>NRF_CLOCK_HFCLK_HIGH_ACCURACY</name>
          <initializer>= CLOCK_HFCLKSTAT_SRC_Xtal</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>External 16 MHz/32 MHz crystal oscillator. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__clock__hal_1ggac89aad0e037b7aeefc5264a4dca76197ac818a771af1b52744004d50920fd584d" prot="public">
          <name>NRF_CLOCK_HFCLK_LOW_ACCURACY</name>
          <initializer>= CLOCK_HFCLKSTAT_SRC_RC</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Internal 16 MHz RC oscillator. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>High-frequency clock sources. </para>
        </briefdescription>
        <detaileddescription>
<para>Used by HFCLKSTAT and HFCLK192MSTAT registers. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_clock.h" line="263" column="1" bodyfile="hal/nrf_clock.h" bodystart="264" bodyend="280"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__clock__hal_1ga1739a9f32e7efbf83dc6e773b05211c1" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_clock_domain_t</name>
        <enumvalue id="group__nrf__clock__hal_1gga1739a9f32e7efbf83dc6e773b05211c1ac8ad29a986fbaf470a540f81ced41929" prot="public">
          <name>NRF_CLOCK_DOMAIN_LFCLK</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__clock__hal_1gga1739a9f32e7efbf83dc6e773b05211c1a62d63ec3705f9c2149022810006ab186" prot="public">
          <name>NRF_CLOCK_DOMAIN_HFCLK</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__clock__hal_1gga1739a9f32e7efbf83dc6e773b05211c1aa0153fc9b37622a8dede499da665221c" prot="public">
          <name>NRF_CLOCK_DOMAIN_HFCLK192M</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__clock__hal_1gga1739a9f32e7efbf83dc6e773b05211c1a78beb20a81bc13eaf1bbb480257b2e14" prot="public">
          <name>NRF_CLOCK_DOMAIN_HFCLKAUDIO</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Clock domains. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_clock.h" line="283" column="1" bodyfile="hal/nrf_clock.h" bodystart="284" bodyend="293"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__clock__hal_1ga4ae12749dff0c4975b250728d6de0ad6" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_clock_hfclk_div_t</name>
        <enumvalue id="group__nrf__clock__hal_1gga4ae12749dff0c4975b250728d6de0ad6a0ac2a5d326b764d7d22e521767996ec8" prot="public">
          <name>NRF_CLOCK_HFCLK_DIV_1</name>
          <initializer>= CLOCK_HFCLKCTRL_HCLK_Div1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Divide HFCLK/HFCLK192M by 1 </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__clock__hal_1gga4ae12749dff0c4975b250728d6de0ad6abea8f4e6147da9de0e57590f23e9fd3c" prot="public">
          <name>NRF_CLOCK_HFCLK_DIV_2</name>
          <initializer>= CLOCK_HFCLKCTRL_HCLK_Div2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Divide HFCLK/HFCLK192M by 2 </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__clock__hal_1gga4ae12749dff0c4975b250728d6de0ad6a1334c6bb50f2d41948a016fa5e17eee8" prot="public">
          <name>NRF_CLOCK_HFCLK_DIV_4</name>
          <initializer>= CLOCK_HFCLK192MCTRL_HCLK192M_Div4</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Divide HFCLK192M by 4 </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>High-frequency clock frequency configuration. </para>
        </briefdescription>
        <detaileddescription>
<para>Used by HFCLKCTRL and HFCLK192MCTRL registers. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_clock.h" line="300" column="1" bodyfile="hal/nrf_clock.h" bodystart="301" bodyend="307"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__clock__hal_1ga0147a15524c768cc1f8aa8a1cd323f1e" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_clock_start_task_status_t</name>
        <enumvalue id="group__nrf__clock__hal_1gga0147a15524c768cc1f8aa8a1cd323f1ea45055344396fd799150ad4543601de89" prot="public">
          <name>NRF_CLOCK_START_TASK_NOT_TRIGGERED</name>
          <initializer>=  CLOCK_LFCLK_RUN_STATUS_NotTriggered</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Task LFCLKSTART/HFCLKSTART has not been triggered definiton. Task LFCLKSTART/HFCLKSTART has not been triggered. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__clock__hal_1gga0147a15524c768cc1f8aa8a1cd323f1ea56bd6949215384c687e25ec8382fbe94" prot="public">
          <name>NRF_CLOCK_START_TASK_TRIGGERED</name>
          <initializer>=  CLOCK_LFCLK_RUN_STATUS_Triggered</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Task LFCLKSTART/HFCLKSTART has been triggered. Task LFCLKSTART/HFCLKSTART has been triggered. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Trigger status of task LFCLKSTART/HFCLKSTART. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This enum is deprecated.</para>
</simplesect>
Used by LFCLKRUN and HFCLKRUN registers. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_clock.h" line="317" column="1" bodyfile="hal/nrf_clock.h" bodystart="318" bodyend="321"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__clock__hal_1ga7ab8220532dae7b1dde0f5c329e81041" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_clock_int_mask_t</name>
        <enumvalue id="group__nrf__clock__hal_1gga7ab8220532dae7b1dde0f5c329e81041ab96bb7ba8e2668d6ccf823ef2e45b6d1" prot="public">
          <name>NRF_CLOCK_INT_HF_STARTED_MASK</name>
          <initializer>=  CLOCK_INTEN_XOSTARTED_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>HF clock bit mask in interrupt register. Interrupt on HFCLKSTARTED event. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__clock__hal_1gga7ab8220532dae7b1dde0f5c329e81041a3cb9f64dae43d178a8d9f5a11253502e" prot="public">
          <name>NRF_CLOCK_INT_LF_STARTED_MASK</name>
          <initializer>=  CLOCK_INTENSET_LFCLKSTARTED_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Interrupt on LFCLKSTARTED event mask definition. Interrupt on LFCLKSTARTED event. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__clock__hal_1gga7ab8220532dae7b1dde0f5c329e81041aa67a87bbb43193939daba915fa46ab8e" prot="public">
          <name>NRFX_CLOCK_INT_PLL_STARTED_MASK</name>
          <initializer>= CLOCK_INTENSET_PLLSTARTED_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Interrupt on PLLSTARTED event. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__clock__hal_1gga7ab8220532dae7b1dde0f5c329e81041a40c10edbbcd14de73fb05aa14bf1a17c" prot="public">
          <name>NRF_CLOCK_INT_DONE_MASK</name>
          <initializer>= CLOCK_INTENSET_DONE_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Interrupt on DONE event. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__clock__hal_1gga7ab8220532dae7b1dde0f5c329e81041a0820ea89bcb64904238b43bb758ebfaa" prot="public">
          <name>NRF_CLOCK_INT_CTTO_MASK</name>
          <initializer>= CLOCK_INTENSET_CTTO_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Interrupt on CTTO event. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__clock__hal_1gga7ab8220532dae7b1dde0f5c329e81041a20f1a621f577542de76fefa9a0e4ff46" prot="public">
          <name>NRF_CLOCK_INT_CTSTARTED_MASK</name>
          <initializer>= CLOCK_INTENSET_CTSTARTED_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Interrupt on CTSTARTED event. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__clock__hal_1gga7ab8220532dae7b1dde0f5c329e81041a962143d35daba16a64de96f9bfa92d7a" prot="public">
          <name>NRF_CLOCK_INT_CTSTOPPED_MASK</name>
          <initializer>= CLOCK_INTENSET_CTSTOPPED_Msk


    NRF_CLOCK_INT_HFAUDIO_STARTED_MASK = CLOCK_INTENSET_HFCLKAUDIOSTARTED_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Interrupt on CTSTOPPED event. Interrupt on HFCLKAUDIOSTARTED event. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__clock__hal_1gga7ab8220532dae7b1dde0f5c329e81041a873c3c6987903b97f5f4a4e415bf3fe2" prot="public">
          <name>NRF_CLOCK_INT_HF192M_STARTED_MASK</name>
          <initializer>= CLOCK_INTENSET_HFCLK192MSTARTED_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Interrupt on HFCLK192MSTARTED event. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Interrupts. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_clock.h" line="324" column="1" bodyfile="hal/nrf_clock.h" bodystart="325" bodyend="349"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__clock__hal_1ga6bf1711bc8cb7614c8ae806155bd3f33" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_clock_task_t</name>
        <enumvalue id="group__nrf__clock__hal_1gga6bf1711bc8cb7614c8ae806155bd3f33a05f479c3cb57882e1f4f9caf8bfe9a8a" prot="public">
          <name>NRF_CLOCK_TASK_HFCLKSTART</name>
          <initializer>= offsetof(NRF_CLOCK_Type, TASKS_XOSTART)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Start HFCLK clock source. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__clock__hal_1gga6bf1711bc8cb7614c8ae806155bd3f33a823dc0e6043cc8f47e48f3749bb34de4" prot="public">
          <name>NRF_CLOCK_TASK_HFCLKSTOP</name>
          <initializer>= offsetof(NRF_CLOCK_Type, TASKS_XOSTOP)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Stop HFCLK clock source. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__clock__hal_1gga6bf1711bc8cb7614c8ae806155bd3f33a5e327e366f08c5a70aae84c69fcb9fa9" prot="public">
          <name>NRF_CLOCK_TASK_PLLSTART</name>
          <initializer>= offsetof(NRF_CLOCK_Type, TASKS_PLLSTART)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Start PLL and keep it running, regardless of the automatic clock requests. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__clock__hal_1gga6bf1711bc8cb7614c8ae806155bd3f33a00dbca23a7eb97a5c0c053b82cb2b00b" prot="public">
          <name>NRF_CLOCK_TASK_PLLSTOP</name>
          <initializer>= offsetof(NRF_CLOCK_Type, TASKS_PLLSTOP)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Stop PLL. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__clock__hal_1gga6bf1711bc8cb7614c8ae806155bd3f33a665f140a53313b4eb7613281653cc6af" prot="public">
          <name>NRF_CLOCK_TASK_LFCLKSTART</name>
          <initializer>= offsetof(NRF_CLOCK_Type, TASKS_LFCLKSTART)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Start LFCLK clock source. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__clock__hal_1gga6bf1711bc8cb7614c8ae806155bd3f33a6165f023d815930d80553ac6b86b9f26" prot="public">
          <name>NRF_CLOCK_TASK_LFCLKSTOP</name>
          <initializer>= offsetof(NRF_CLOCK_Type, TASKS_LFCLKSTOP)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Stop LFCLK clock source. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__clock__hal_1gga6bf1711bc8cb7614c8ae806155bd3f33aac43909700fa7e7449fed9007558e3d7" prot="public">
          <name>NRF_CLOCK_TASK_CAL</name>
          <initializer>= offsetof(NRF_CLOCK_Type, TASKS_CAL)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Start calibration of LFCLK RC oscillator. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__clock__hal_1gga6bf1711bc8cb7614c8ae806155bd3f33a8c1b64a0d977cd142123fcb9a86fe5d4" prot="public">
          <name>NRF_CLOCK_TASK_CTSTART</name>
          <initializer>= offsetof(NRF_CLOCK_Type, TASKS_CTSTART)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Start calibration timer. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__clock__hal_1gga6bf1711bc8cb7614c8ae806155bd3f33a16b1a0dcf1ea9da5a7639b4e14e7d892" prot="public">
          <name>NRF_CLOCK_TASK_CTSTOP</name>
          <initializer>= offsetof(NRF_CLOCK_Type, TASKS_CTSTOP)


    NRF_CLOCK_TASK_HFCLKAUDIOSTART = offsetof(NRF_CLOCK_Type, TASKS_HFCLKAUDIOSTART)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Stop calibration timer. Start HFCLKAUDIO clock source. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__clock__hal_1gga6bf1711bc8cb7614c8ae806155bd3f33ad88378a98026d7231754361ecc0d6277" prot="public">
          <name>NRF_CLOCK_TASK_HFCLKAUDIOSTOP</name>
          <initializer>= offsetof(NRF_CLOCK_Type, TASKS_HFCLKAUDIOSTOP)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Stop HFCLKAUDIO clock source. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__clock__hal_1gga6bf1711bc8cb7614c8ae806155bd3f33ae3aa365e4009bed61581e206d5b9e342" prot="public">
          <name>NRF_CLOCK_TASK_HFCLK192MSTART</name>
          <initializer>= offsetof(NRF_CLOCK_Type, TASKS_HFCLK192MSTART)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Start HFCLK192M clock source. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__clock__hal_1gga6bf1711bc8cb7614c8ae806155bd3f33a6178d7f357cfd604622d53c986446d6b" prot="public">
          <name>NRF_CLOCK_TASK_HFCLK192MSTOP</name>
          <initializer>= offsetof(NRF_CLOCK_Type, TASKS_HFCLK192MSTOP)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Stop HFCLK192M clock source. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Tasks. </para>
        </briefdescription>
        <detaileddescription>
<para>The NRF_CLOCK_TASK_LFCLKSTOP task cannot be set when the low-frequency clock is not running. The NRF_CLOCK_TASK_HFCLKSTOP task cannot be set when the high-frequency clock is not running. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_clock.h" line="357" column="1" bodyfile="hal/nrf_clock.h" bodystart="358" bodyend="387"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__clock__hal_1ga8843dd5805c2b01f9b832ed73d583695" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_clock_event_t</name>
        <enumvalue id="group__nrf__clock__hal_1gga8843dd5805c2b01f9b832ed73d583695abc6d081122f7071932c374f83d38d489" prot="public">
          <name>NRF_CLOCK_EVENT_HFCLKSTARTED</name>
          <initializer>= offsetof(NRF_CLOCK_Type, EVENTS_XOSTARTED)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>HFCLK oscillator started. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__clock__hal_1gga8843dd5805c2b01f9b832ed73d583695ac6647ea9d607760a3bebe2c4f7463961" prot="public">
          <name>NRF_CLOCK_EVENT_PLLSTARTED</name>
          <initializer>= offsetof(NRF_CLOCK_Type, EVENTS_PLLSTARTED)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>PLL started. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__clock__hal_1gga8843dd5805c2b01f9b832ed73d583695ad75ad033bf0be9432bd3aa9b0931f07b" prot="public">
          <name>NRF_CLOCK_EVENT_LFCLKSTARTED</name>
          <initializer>= offsetof(NRF_CLOCK_Type, EVENTS_LFCLKSTARTED)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>LFCLK oscillator started. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__clock__hal_1gga8843dd5805c2b01f9b832ed73d583695aa862d96adb9c7579442fb51670237efb" prot="public">
          <name>NRF_CLOCK_EVENT_DONE</name>
          <initializer>= offsetof(NRF_CLOCK_Type, EVENTS_DONE)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Calibration of LFCLK RC oscillator completed. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__clock__hal_1gga8843dd5805c2b01f9b832ed73d583695ab2c012e2ac3e1a52f320040a598c1375" prot="public">
          <name>NRF_CLOCK_EVENT_CTTO</name>
          <initializer>= offsetof(NRF_CLOCK_Type, EVENTS_CTTO)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Calibration timer time-out. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__clock__hal_1gga8843dd5805c2b01f9b832ed73d583695aa1d704aa864c7e38c09c0a9ca0afd493" prot="public">
          <name>NRF_CLOCK_EVENT_CTSTARTED</name>
          <initializer>= offsetof(NRF_CLOCK_Type, EVENTS_CTSTARTED)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Calibration timer started. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__clock__hal_1gga8843dd5805c2b01f9b832ed73d583695a59e0c66caf3e8f6cad63ecfe007494e2" prot="public">
          <name>NRF_CLOCK_EVENT_CTSTOPPED</name>
          <initializer>= offsetof(NRF_CLOCK_Type, EVENTS_CTSTOPPED)


    NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED = offsetof(NRF_CLOCK_Type, EVENTS_HFCLKAUDIOSTARTED)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Calibration timer stopped. HFCLKAUDIO oscillator started. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__clock__hal_1gga8843dd5805c2b01f9b832ed73d583695a81353d1135143c314380e46df15cfba5" prot="public">
          <name>NRF_CLOCK_EVENT_HFCLK192MSTARTED</name>
          <initializer>= offsetof(NRF_CLOCK_Type, EVENTS_HFCLK192MSTARTED)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>HFCLK192M oscillator started. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Events. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_clock.h" line="390" column="1" bodyfile="hal/nrf_clock.h" bodystart="391" bodyend="417"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__nrf__clock__hal_1gae1a1fecb47d6d05b9b938d5c74314f86" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_clock_int_enable</definition>
        <argsstring>(NRF_CLOCK_Type *p_reg, uint32_t mask)</argsstring>
        <name>nrf_clock_int_enable</name>
        <param>
          <type>NRF_CLOCK_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Function for enabling the specified interrupt. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of interrupts to be enabled. Use <ref refid="group__nrf__clock__hal_1ga7ab8220532dae7b1dde0f5c329e81041" kindref="member">nrf_clock_int_mask_t</ref> values for bit masking. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_clock.h" line="846" column="24" bodyfile="hal/nrf_clock.h" bodystart="846" bodyend="849" declfile="hal/nrf_clock.h" declline="426" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__clock__hal_1gadded9b778880ab73d01775cc0ab4ab77" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_clock_int_disable</definition>
        <argsstring>(NRF_CLOCK_Type *p_reg, uint32_t mask)</argsstring>
        <name>nrf_clock_int_disable</name>
        <param>
          <type>NRF_CLOCK_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Function for disabling the specified interrupt. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of interrupts to be disabled. Use <ref refid="group__nrf__clock__hal_1ga7ab8220532dae7b1dde0f5c329e81041" kindref="member">nrf_clock_int_mask_t</ref> values for bit masking. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_clock.h" line="851" column="24" bodyfile="hal/nrf_clock.h" bodystart="851" bodyend="854" declfile="hal/nrf_clock.h" declline="435" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__clock__hal_1ga3cfc1dfe6d92419878efa3d92203d1f3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_clock_int_enable_check</definition>
        <argsstring>(NRF_CLOCK_Type const *p_reg, uint32_t mask)</argsstring>
        <name>nrf_clock_int_enable_check</name>
        <param>
          <type>NRF_CLOCK_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Function for checking if the specified interrupts are enabled. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of interrupts to be checked. Use <ref refid="group__nrf__clock__hal_1ga7ab8220532dae7b1dde0f5c329e81041" kindref="member">nrf_clock_int_mask_t</ref> values for bit masking.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Mask of enabled interrupts. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_clock.h" line="856" column="28" bodyfile="hal/nrf_clock.h" bodystart="856" bodyend="859" declfile="hal/nrf_clock.h" declline="446" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__clock__hal_1gab667ae60ddf82e1e8bd4ffced897af0c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_clock_task_address_get</definition>
        <argsstring>(NRF_CLOCK_Type const *p_reg, nrf_clock_task_t task)</argsstring>
        <name>nrf_clock_task_address_get</name>
        <param>
          <type>NRF_CLOCK_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__clock__hal_1ga6bf1711bc8cb7614c8ae806155bd3f33" kindref="member">nrf_clock_task_t</ref></type>
          <declname>task</declname>
        </param>
        <briefdescription>
<para>Function for retrieving the address of the specified task. </para>
        </briefdescription>
        <detaileddescription>
<para>This function can be used by the PPI module.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">task</parametername>
</parameternamelist>
<parameterdescription>
<para>CLOCK Task.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Address of the requested task register. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_clock.h" line="861" column="28" bodyfile="hal/nrf_clock.h" bodystart="861" bodyend="865" declfile="hal/nrf_clock.h" declline="457" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__clock__hal_1gaf3e684a3ac2f5e050185d2fa654de394" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_clock_task_trigger</definition>
        <argsstring>(NRF_CLOCK_Type *p_reg, nrf_clock_task_t task)</argsstring>
        <name>nrf_clock_task_trigger</name>
        <param>
          <type>NRF_CLOCK_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__clock__hal_1ga6bf1711bc8cb7614c8ae806155bd3f33" kindref="member">nrf_clock_task_t</ref></type>
          <declname>task</declname>
        </param>
        <briefdescription>
<para>Function for setting the specified task. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">task</parametername>
</parameternamelist>
<parameterdescription>
<para>Task to be activated. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_clock.h" line="867" column="24" bodyfile="hal/nrf_clock.h" bodystart="867" bodyend="870" declfile="hal/nrf_clock.h" declline="466" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__clock__hal_1gab6633ed4e3965b482f4bcf82084ced89" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_clock_event_address_get</definition>
        <argsstring>(NRF_CLOCK_Type const *p_reg, nrf_clock_event_t event)</argsstring>
        <name>nrf_clock_event_address_get</name>
        <param>
          <type>NRF_CLOCK_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__clock__hal_1ga8843dd5805c2b01f9b832ed73d583695" kindref="member">nrf_clock_event_t</ref></type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>Function for retrieving the address of the specified event. </para>
        </briefdescription>
        <detaileddescription>
<para>This function can be used by the PPI module.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>CLOCK Event.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Address of the specified event register. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_clock.h" line="872" column="28" bodyfile="hal/nrf_clock.h" bodystart="872" bodyend="876" declfile="hal/nrf_clock.h" declline="477" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__clock__hal_1ga1f7973a6180d8bf7ab6e93b9f6d3ff7c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_clock_event_clear</definition>
        <argsstring>(NRF_CLOCK_Type *p_reg, nrf_clock_event_t event)</argsstring>
        <name>nrf_clock_event_clear</name>
        <param>
          <type>NRF_CLOCK_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__clock__hal_1ga8843dd5805c2b01f9b832ed73d583695" kindref="member">nrf_clock_event_t</ref></type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>Function for clearing the specified event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event to clear. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_clock.h" line="878" column="24" bodyfile="hal/nrf_clock.h" bodystart="878" bodyend="882" declfile="hal/nrf_clock.h" declline="486" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__clock__hal_1ga8ecb4611627133df496528e764455198" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE bool</type>
        <definition>NRF_STATIC_INLINE bool nrf_clock_event_check</definition>
        <argsstring>(NRF_CLOCK_Type const *p_reg, nrf_clock_event_t event)</argsstring>
        <name>nrf_clock_event_check</name>
        <param>
          <type>NRF_CLOCK_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__clock__hal_1ga8843dd5805c2b01f9b832ed73d583695" kindref="member">nrf_clock_event_t</ref></type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>Function for retrieving the state of the specified event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event to be checked.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>The event has been generated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>The event has not been generated. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_clock.h" line="884" column="24" bodyfile="hal/nrf_clock.h" bodystart="884" bodyend="887" declfile="hal/nrf_clock.h" declline="497" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__clock__hal_1gabed84813929d82ba6c6c647c3d6bf158" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE bool</type>
        <definition>NRF_STATIC_INLINE bool nrf_clock_start_task_check</definition>
        <argsstring>(NRF_CLOCK_Type const *p_reg, nrf_clock_domain_t domain)</argsstring>
        <name>nrf_clock_start_task_check</name>
        <param>
          <type>NRF_CLOCK_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__clock__hal_1ga1739a9f32e7efbf83dc6e773b05211c1" kindref="member">nrf_clock_domain_t</ref></type>
          <declname>domain</declname>
        </param>
        <briefdescription>
<para>Function for retrieving the trigger status of the task START for given domain. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">domain</parametername>
</parameternamelist>
<parameterdescription>
<para>Clock domain.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>The task START for the given domain has not been triggered. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>The task START for the given domain has been triggered. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
<para>&lt; LF clock RUN register definition.</para>
<para>&lt; LF clock RUN status mask definition.</para>
<para>&lt; LF clock RUN status position definition.</para>
<para>&lt; HF clock RUN register definition.</para>
<para>&lt; HF clock RUN status mask definition.</para>
<para>&lt; HF clock RUN status position definition.</para>
        </inbodydescription>
        <location file="hal/nrf_clock.h" line="889" column="24" bodyfile="hal/nrf_clock.h" bodystart="889" bodyend="914" declfile="hal/nrf_clock.h" declline="508" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__clock__hal_1gacdce7b3bd39e2466a100f16b41ac72d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE bool</type>
        <definition>NRF_STATIC_INLINE bool nrf_clock_is_running</definition>
        <argsstring>(NRF_CLOCK_Type const *p_reg, nrf_clock_domain_t domain, void *p_clk_src)</argsstring>
        <name>nrf_clock_is_running</name>
        <param>
          <type>NRF_CLOCK_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__clock__hal_1ga1739a9f32e7efbf83dc6e773b05211c1" kindref="member">nrf_clock_domain_t</ref></type>
          <declname>domain</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>p_clk_src</declname>
        </param>
        <briefdescription>
<para>Function for retrieving the state of the clock. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">domain</parametername>
</parameternamelist>
<parameterdescription>
<para>Clock domain. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">p_clk_src</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to clock source that is running. Set to NULL if not needed. Ignored for HFCLKAUDIO domain. Variable pointed by <computeroutput>p_clk_src</computeroutput> must be of either <ref refid="group__nrf__clock__hal_1ga5b00bcdc07defd8187f2be8a2ec7a597" kindref="member">nrf_clock_lfclk_t</ref> type for LFCLK or <ref refid="group__nrf__clock__hal_1gac89aad0e037b7aeefc5264a4dca76197" kindref="member">nrf_clock_hfclk_t</ref> type for HFCLK and HFCLK192M.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>The clock is not running. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>The clock is running. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
<para>&lt; LF clock STAT register definition.</para>
<para>&lt; LF clock STAT state mask definition.</para>
<para>&lt; LF clock STAT register definition.</para>
<para>&lt; LF clock STAT source mask definition.</para>
<para>&lt; LF clock STAT source position definition.</para>
<para>&lt; HF clock STAT register definition.</para>
<para>&lt; HF clock STAT state mask definition.</para>
        </inbodydescription>
        <location file="hal/nrf_clock.h" line="927" column="24" bodyfile="hal/nrf_clock.h" bodystart="927" bodyend="980" declfile="hal/nrf_clock.h" declline="524" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__clock__hal_1ga24c29888cb9c057a3f01457bf3ceb246" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_clock_lf_src_set</definition>
        <argsstring>(NRF_CLOCK_Type *p_reg, nrf_clock_lfclk_t source)</argsstring>
        <name>nrf_clock_lf_src_set</name>
        <param>
          <type>NRF_CLOCK_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__clock__hal_1ga5b00bcdc07defd8187f2be8a2ec7a597" kindref="member">nrf_clock_lfclk_t</ref></type>
          <declname>source</declname>
        </param>
        <briefdescription>
<para>Function for changing the low-frequency clock source. </para>
        </briefdescription>
        <detaileddescription>
<para>Check in Product Specification if this function can be called when the low-frequency clock is running.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">source</parametername>
</parameternamelist>
<parameterdescription>
<para>New low-frequency clock source. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
<para>&lt; LF clock SRC register definition.</para>
        </inbodydescription>
        <location file="hal/nrf_clock.h" line="986" column="24" bodyfile="hal/nrf_clock.h" bodystart="986" bodyend="989" declfile="hal/nrf_clock.h" declline="536" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__clock__hal_1ga91f9e95a8a8717d0d76cd12c70cdd1c9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE <ref refid="group__nrf__clock__hal_1ga5b00bcdc07defd8187f2be8a2ec7a597" kindref="member">nrf_clock_lfclk_t</ref></type>
        <definition>NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_src_get</definition>
        <argsstring>(NRF_CLOCK_Type const *p_reg)</argsstring>
        <name>nrf_clock_lf_src_get</name>
        <param>
          <type>NRF_CLOCK_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for retrieving the selected source for the low-frequency clock. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>NRF_CLOCK_LFCLK_RC</parametername>
</parameternamelist>
<parameterdescription>
<para>The internal 32 kHz RC oscillator is the selected source for the low-frequency clock. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NRF_CLOCK_LFCLK_Xtal</parametername>
</parameternamelist>
<parameterdescription>
<para>An external 32 kHz crystal oscillator is the selected source for the low-frequency clock. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NRF_CLOCK_LFCLK_Synth</parametername>
</parameternamelist>
<parameterdescription>
<para>The internal 32 kHz synthesized from the HFCLK is the selected source for the low-frequency clock. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
<para>&lt; LF clock SRC register definition.</para>
        </inbodydescription>
        <location file="hal/nrf_clock.h" line="991" column="37" bodyfile="hal/nrf_clock.h" bodystart="991" bodyend="994" declfile="hal/nrf_clock.h" declline="550" declcolumn="37"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__clock__hal_1ga738da128e4aefd63a596c86395a3abb4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE <ref refid="group__nrf__clock__hal_1ga5b00bcdc07defd8187f2be8a2ec7a597" kindref="member">nrf_clock_lfclk_t</ref></type>
        <definition>NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_actv_src_get</definition>
        <argsstring>(NRF_CLOCK_Type const *p_reg)</argsstring>
        <name>nrf_clock_lf_actv_src_get</name>
        <param>
          <type>NRF_CLOCK_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for retrieving the active source of the low-frequency clock. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This function is deprecated. Use <ref refid="group__nrf__clock__hal_1gacdce7b3bd39e2466a100f16b41ac72d1" kindref="member">nrf_clock_is_running</ref> instead.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>NRF_CLOCK_LFCLK_RC</parametername>
</parameternamelist>
<parameterdescription>
<para>The internal 32 kHz RC oscillator is the active source of the low-frequency clock. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NRF_CLOCK_LFCLK_Xtal</parametername>
</parameternamelist>
<parameterdescription>
<para>An external 32 kHz crystal oscillator is the active source of the low-frequency clock. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NRF_CLOCK_LFCLK_Synth</parametername>
</parameternamelist>
<parameterdescription>
<para>The internal 32 kHz synthesized from the HFCLK is the active source of the low-frequency clock. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_clock.h" line="996" column="37" bodyfile="hal/nrf_clock.h" bodystart="996" bodyend="1001" declfile="hal/nrf_clock.h" declline="566" declcolumn="37"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__clock__hal_1gad69ff6c345172118cc4afb226048af3a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE <ref refid="group__nrf__clock__hal_1ga5b00bcdc07defd8187f2be8a2ec7a597" kindref="member">nrf_clock_lfclk_t</ref></type>
        <definition>NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get</definition>
        <argsstring>(NRF_CLOCK_Type const *p_reg)</argsstring>
        <name>nrf_clock_lf_srccopy_get</name>
        <param>
          <type>NRF_CLOCK_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for retrieving the clock source for the LFCLK clock when the task LKCLKSTART is triggered. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>NRF_CLOCK_LFCLK_RC</parametername>
</parameternamelist>
<parameterdescription>
<para>The internal 32 kHz RC oscillator is running and generating the LFCLK clock. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NRF_CLOCK_LFCLK_Xtal</parametername>
</parameternamelist>
<parameterdescription>
<para>An external 32 kHz crystal oscillator is running and generating the LFCLK clock. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NRF_CLOCK_LFCLK_Synth</parametername>
</parameternamelist>
<parameterdescription>
<para>The internal 32 kHz synthesized from the HFCLK is running and generating the LFCLK clock. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
<para>&lt; LF clock SRCCOPY register definition.</para>
<para>&lt; LF clock SRCCOPY status mask definition.</para>
<para>&lt; LF clock SRCCOPY status position definition.</para>
        </inbodydescription>
        <location file="hal/nrf_clock.h" line="1003" column="37" bodyfile="hal/nrf_clock.h" bodystart="1003" bodyend="1007" declfile="hal/nrf_clock.h" declline="581" declcolumn="37"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__clock__hal_1gab68648e381ee3e2f5a1c77b051ae19c0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE bool</type>
        <definition>NRF_STATIC_INLINE bool nrf_clock_lf_is_running</definition>
        <argsstring>(NRF_CLOCK_Type const *p_reg)</argsstring>
        <name>nrf_clock_lf_is_running</name>
        <param>
          <type>NRF_CLOCK_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for retrieving the state of the LFCLK clock. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This function is deprecated. Use <ref refid="group__nrf__clock__hal_1gacdce7b3bd39e2466a100f16b41ac72d1" kindref="member">nrf_clock_is_running</ref> instead.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>The LFCLK clock is not running. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>The LFCLK clock is running. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_clock.h" line="1009" column="24" bodyfile="hal/nrf_clock.h" bodystart="1009" bodyend="1012" declfile="hal/nrf_clock.h" declline="593" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__clock__hal_1ga5e3fc67f9a0e1e612d748a1a9b7b4184" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE <ref refid="group__nrf__clock__hal_1ga0147a15524c768cc1f8aa8a1cd323f1e" kindref="member">nrf_clock_start_task_status_t</ref></type>
        <definition>NRF_STATIC_INLINE nrf_clock_start_task_status_t nrf_clock_lf_start_task_status_get</definition>
        <argsstring>(NRF_CLOCK_Type const *p_reg)</argsstring>
        <name>nrf_clock_lf_start_task_status_get</name>
        <param>
          <type>NRF_CLOCK_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for retrieving the trigger status of the task LFCLKSTART. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This function is deprecated. Use <ref refid="group__nrf__clock__hal_1gabed84813929d82ba6c6c647c3d6bf158" kindref="member">nrf_clock_start_task_check</ref> instead.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>NRF_CLOCK_START_TASK_NOT_TRIGGERED</parametername>
</parameternamelist>
<parameterdescription>
<para>The task LFCLKSTART has not been triggered. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NRF_CLOCK_START_TASK_TRIGGERED</parametername>
</parameternamelist>
<parameterdescription>
<para>The task LFCLKSTART has been triggered. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_clock.h" line="1015" column="31" bodyfile="hal/nrf_clock.h" bodystart="1015" bodyend="1019" declfile="hal/nrf_clock.h" declline="606" declcolumn="31"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__clock__hal_1gab7cab3a3c552786d73ff99c011ddc312" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_clock_hf_src_set</definition>
        <argsstring>(NRF_CLOCK_Type *p_reg, nrf_clock_hfclk_t source)</argsstring>
        <name>nrf_clock_hf_src_set</name>
        <param>
          <type>NRF_CLOCK_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__clock__hal_1gac89aad0e037b7aeefc5264a4dca76197" kindref="member">nrf_clock_hfclk_t</ref></type>
          <declname>source</declname>
        </param>
        <briefdescription>
<para>Function for changing the high-frequency clock source. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">source</parametername>
</parameternamelist>
<parameterdescription>
<para>New high-frequency clock source. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_clock.h" line="1022" column="24" bodyfile="hal/nrf_clock.h" bodystart="1022" bodyend="1025" declfile="hal/nrf_clock.h" declline="615" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__clock__hal_1ga34024ba919471d72f9237c447175faca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE <ref refid="group__nrf__clock__hal_1gac89aad0e037b7aeefc5264a4dca76197" kindref="member">nrf_clock_hfclk_t</ref></type>
        <definition>NRF_STATIC_INLINE nrf_clock_hfclk_t nrf_clock_hf_src_get</definition>
        <argsstring>(NRF_CLOCK_Type const *p_reg)</argsstring>
        <name>nrf_clock_hf_src_get</name>
        <param>
          <type>NRF_CLOCK_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for retrieving the selected source of the high-frequency clock. </para>
        </briefdescription>
        <detaileddescription>
<para>For SoCs not featuring the HFCLKSRC register, this is always also the active source of the high-frequency clock.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>NRF_CLOCK_HFCLK_LOW_ACCURACY</parametername>
</parameternamelist>
<parameterdescription>
<para>The internal RC oscillator is the selected source of the high-frequency clock. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NRF_CLOCK_HFCLK_HIGH_ACCURACY</parametername>
</parameternamelist>
<parameterdescription>
<para>An external crystal oscillator is the selected source of the high-frequency clock. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_clock.h" line="1028" column="37" bodyfile="hal/nrf_clock.h" bodystart="1028" bodyend="1041" declfile="hal/nrf_clock.h" declline="631" declcolumn="37"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__clock__hal_1ga70445979a0eda29dcb76b4be0ef8e03b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE bool</type>
        <definition>NRF_STATIC_INLINE bool nrf_clock_hf_is_running</definition>
        <argsstring>(NRF_CLOCK_Type const *p_reg, nrf_clock_hfclk_t clk_src)</argsstring>
        <name>nrf_clock_hf_is_running</name>
        <param>
          <type>NRF_CLOCK_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__clock__hal_1gac89aad0e037b7aeefc5264a4dca76197" kindref="member">nrf_clock_hfclk_t</ref></type>
          <declname>clk_src</declname>
        </param>
        <briefdescription>
<para>Function for retrieving the state of the HFCLK clock. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This function is deprecated. Use <ref refid="group__nrf__clock__hal_1gacdce7b3bd39e2466a100f16b41ac72d1" kindref="member">nrf_clock_is_running</ref> instead.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">clk_src</parametername>
</parameternamelist>
<parameterdescription>
<para>Clock source to be checked.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>The HFCLK clock is not running. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>The HFCLK clock is running. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_clock.h" line="1043" column="24" bodyfile="hal/nrf_clock.h" bodystart="1043" bodyend="1049" declfile="hal/nrf_clock.h" declline="644" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__clock__hal_1ga32910f934744e72a7544b53be569dfd6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE <ref refid="group__nrf__clock__hal_1ga0147a15524c768cc1f8aa8a1cd323f1e" kindref="member">nrf_clock_start_task_status_t</ref></type>
        <definition>NRF_STATIC_INLINE nrf_clock_start_task_status_t nrf_clock_hf_start_task_status_get</definition>
        <argsstring>(NRF_CLOCK_Type const *p_reg)</argsstring>
        <name>nrf_clock_hf_start_task_status_get</name>
        <param>
          <type>NRF_CLOCK_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for retrieving the trigger status of the task HFCLKSTART. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This function is deprecated. Use <ref refid="group__nrf__clock__hal_1gabed84813929d82ba6c6c647c3d6bf158" kindref="member">nrf_clock_start_task_check</ref> instead.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>NRF_CLOCK_START_TASK_NOT_TRIGGERED</parametername>
</parameternamelist>
<parameterdescription>
<para>The task HFCLKSTART has not been triggered. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NRF_CLOCK_START_TASK_TRIGGERED</parametername>
</parameternamelist>
<parameterdescription>
<para>The task HFCLKSTART has been triggered. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_clock.h" line="1052" column="31" bodyfile="hal/nrf_clock.h" bodystart="1052" bodyend="1056" declfile="hal/nrf_clock.h" declline="658" declcolumn="31"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__clock__hal_1gaf44598c429dfbfcc55d482e11bdf1d4b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_clock_hfclkaudio_config_set</definition>
        <argsstring>(NRF_CLOCK_Type *p_reg, uint16_t freq_value)</argsstring>
        <name>nrf_clock_hfclkaudio_config_set</name>
        <param>
          <type>NRF_CLOCK_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>freq_value</declname>
        </param>
        <briefdescription>
<para>Function for changing the Audio clock FREQ_VALUE. </para>
        </briefdescription>
        <detaileddescription>
<para>The frequency of HFCLKAUDIO ranges from 10.666 MHz to 13.333 MHz in 40.7 Hz steps. To calculate <computeroutput>freq_value</computeroutput> corresponding to the chosen frequency, use the following equation: FREQ_VALUE = 2^16 * ((12 * f_out / 32M) - 4)</para>
<para><simplesect kind="warning"><para>Chosen frequency must fit in 11.176 MHz - 11.402 MHz or 12.165 MHz - 12.411 MHz frequency bands.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">freq_value</parametername>
</parameternamelist>
<parameterdescription>
<para>New FREQ_VALUE </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_clock.h" line="1060" column="6" bodyfile="hal/nrf_clock.h" bodystart="1060" bodyend="1063" declfile="hal/nrf_clock.h" declline="674" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__clock__hal_1gaba822bac96cbd67e5f9f255af89a1f5e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint16_t</type>
        <definition>NRF_STATIC_INLINE uint16_t nrf_clock_hfclkaudio_config_get</definition>
        <argsstring>(NRF_CLOCK_Type const *p_reg)</argsstring>
        <name>nrf_clock_hfclkaudio_config_get</name>
        <param>
          <type>NRF_CLOCK_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for retrieving the Audio clock FREQ_VALUE. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
The frequency of HFCLKAUDIO ranges from 10.666 MHz to 13.333 MHz in 40.7 Hz steps. To calculate frequency corresponding to the returned FREQ_VALUE, use the following equation: f_out = 32M * (4 + FREQ_VALUE * 2^(-16))/12</para>
<para><simplesect kind="return"><para>FREQ_VALUE of the Audio clock. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_clock.h" line="1066" column="10" bodyfile="hal/nrf_clock.h" bodystart="1066" bodyend="1069" declfile="hal/nrf_clock.h" declline="688" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__clock__hal_1ga31257b566ba4812c296bbc4fa63f7886" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_clock_cal_timer_timeout_set</definition>
        <argsstring>(NRF_CLOCK_Type *p_reg, uint32_t interval)</argsstring>
        <name>nrf_clock_cal_timer_timeout_set</name>
        <param>
          <type>NRF_CLOCK_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>interval</declname>
        </param>
        <briefdescription>
<para>Function for changing the calibration timer interval. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">interval</parametername>
</parameternamelist>
<parameterdescription>
<para>New calibration timer interval in 0.25 s resolution (range: 0.25 seconds to 31.75 seconds). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_clock.h" line="1113" column="24" bodyfile="hal/nrf_clock.h" bodystart="1113" bodyend="1116" declfile="hal/nrf_clock.h" declline="699" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__clock__hal_1ga9307f09045353d04c29bf8ca29cc0c28" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_clock_hfclk192m_div_set</definition>
        <argsstring>(NRF_CLOCK_Type *p_reg, nrf_clock_hfclk_div_t divider)</argsstring>
        <name>nrf_clock_hfclk192m_div_set</name>
        <param>
          <type>NRF_CLOCK_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__clock__hal_1ga4ae12749dff0c4975b250728d6de0ad6" kindref="member">nrf_clock_hfclk_div_t</ref></type>
          <declname>divider</declname>
        </param>
        <briefdescription>
<para>Function for changing the HFCLK192M frequency divider. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">divider</parametername>
</parameternamelist>
<parameterdescription>
<para>New HFCLK192M divider. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_clock.h" line="1089" column="6" bodyfile="hal/nrf_clock.h" bodystart="1089" bodyend="1093" declfile="hal/nrf_clock.h" declline="729" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__clock__hal_1ga53f5fd112e0c314b3b2fd677ad029246" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE <ref refid="group__nrf__clock__hal_1ga4ae12749dff0c4975b250728d6de0ad6" kindref="member">nrf_clock_hfclk_div_t</ref></type>
        <definition>NRF_STATIC_INLINE nrf_clock_hfclk_div_t nrf_clock_hfclk192m_div_get</definition>
        <argsstring>(NRF_CLOCK_Type const *p_reg)</argsstring>
        <name>nrf_clock_hfclk192m_div_get</name>
        <param>
          <type>NRF_CLOCK_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for retrieving the HFCLK192M frequency divider. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>HFCLK192M frequency divider. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_clock.h" line="1095" column="41" bodyfile="hal/nrf_clock.h" bodystart="1095" bodyend="1099" declfile="hal/nrf_clock.h" declline="739" declcolumn="41"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__clock__hal_1ga84665d1956d9324a08402a91225fc15c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_clock_hfclk192m_src_set</definition>
        <argsstring>(NRF_CLOCK_Type *p_reg, nrf_clock_hfclk_t source)</argsstring>
        <name>nrf_clock_hfclk192m_src_set</name>
        <param>
          <type>NRF_CLOCK_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__clock__hal_1gac89aad0e037b7aeefc5264a4dca76197" kindref="member">nrf_clock_hfclk_t</ref></type>
          <declname>source</declname>
        </param>
        <briefdescription>
<para>Function for changing the HFCLK192M source. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">source</parametername>
</parameternamelist>
<parameterdescription>
<para>New HFCLK192M source. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_clock.h" line="1101" column="24" bodyfile="hal/nrf_clock.h" bodystart="1101" bodyend="1104" declfile="hal/nrf_clock.h" declline="747" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__clock__hal_1ga4709388f27018bc447eb944ec7f15f2c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE <ref refid="group__nrf__clock__hal_1gac89aad0e037b7aeefc5264a4dca76197" kindref="member">nrf_clock_hfclk_t</ref></type>
        <definition>NRF_STATIC_INLINE nrf_clock_hfclk_t nrf_clock_hfclk192m_src_get</definition>
        <argsstring>(NRF_CLOCK_Type const *p_reg)</argsstring>
        <name>nrf_clock_hfclk192m_src_get</name>
        <param>
          <type>NRF_CLOCK_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for retrieving the selected source of the HFCLK192M. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>NRF_CLOCK_HFCLK_LOW_ACCURACY</parametername>
</parameternamelist>
<parameterdescription>
<para>The internal RC oscillator is the selected source of the HFCLK192M. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NRF_CLOCK_HFCLK_HIGH_ACCURACY</parametername>
</parameternamelist>
<parameterdescription>
<para>An external crystal oscillator is the selected source of the HFCLK192M. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_clock.h" line="1106" column="37" bodyfile="hal/nrf_clock.h" bodystart="1106" bodyend="1109" declfile="hal/nrf_clock.h" declline="760" declcolumn="37"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__clock__hal_1ga842e2ffb161363df7d4769ab67a317ba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_clock_alwaysrun_set</definition>
        <argsstring>(NRF_CLOCK_Type *p_reg, nrf_clock_domain_t domain, bool alwaysrun)</argsstring>
        <name>nrf_clock_alwaysrun_set</name>
        <param>
          <type>NRF_CLOCK_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__clock__hal_1ga1739a9f32e7efbf83dc6e773b05211c1" kindref="member">nrf_clock_domain_t</ref></type>
          <declname>domain</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>alwaysrun</declname>
        </param>
        <briefdescription>
<para>Function for setting the clock domain to always run. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">domain</parametername>
</parameternamelist>
<parameterdescription>
<para>Clock domain. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">alwaysrun</parametername>
</parameternamelist>
<parameterdescription>
<para>Ensure the clock is always running. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
<para>&lt; LF clock ALWAYSRUN register definition.</para>
<para>&lt; LF clock ALWAYSRUN mask definition.</para>
<para>&lt; LF clock ALWAYSRUN position definition.</para>
        </inbodydescription>
        <location file="hal/nrf_clock.h" line="1121" column="24" bodyfile="hal/nrf_clock.h" bodystart="1121" bodyend="1159" declfile="hal/nrf_clock.h" declline="772" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__clock__hal_1ga930ec730c515f7443c2eac61fe829cb1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE bool</type>
        <definition>NRF_STATIC_INLINE bool nrf_clock_alwaysrun_get</definition>
        <argsstring>(NRF_CLOCK_Type const *p_reg, nrf_clock_domain_t domain)</argsstring>
        <name>nrf_clock_alwaysrun_get</name>
        <param>
          <type>NRF_CLOCK_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__clock__hal_1ga1739a9f32e7efbf83dc6e773b05211c1" kindref="member">nrf_clock_domain_t</ref></type>
          <declname>domain</declname>
        </param>
        <briefdescription>
<para>Function for checking if the clock domain is configured to always run. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">domain</parametername>
</parameternamelist>
<parameterdescription>
<para>Clock domain.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>The clock domain is configured to always run. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>The clock domain is not configured to always run. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
<para>&lt; LF clock ALWAYSRUN register definition.</para>
<para>&lt; LF clock ALWAYSRUN position definition.</para>
<para>&lt; LF clock ALWAYSRUN mask definition.</para>
        </inbodydescription>
        <location file="hal/nrf_clock.h" line="1161" column="24" bodyfile="hal/nrf_clock.h" bodystart="1161" bodyend="1190" declfile="hal/nrf_clock.h" declline="784" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__clock__hal_1gad64c2d8e17a381a70ff1c867a3763da2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE bool</type>
        <definition>NRF_STATIC_INLINE bool nrf_clock_alwaysrun_active_get</definition>
        <argsstring>(NRF_CLOCK_Type const *p_reg, nrf_clock_domain_t domain)</argsstring>
        <name>nrf_clock_alwaysrun_active_get</name>
        <param>
          <type>NRF_CLOCK_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__clock__hal_1ga1739a9f32e7efbf83dc6e773b05211c1" kindref="member">nrf_clock_domain_t</ref></type>
          <declname>domain</declname>
        </param>
        <briefdescription>
<para>Function for checking if the clock domain always run setting is active. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">domain</parametername>
</parameternamelist>
<parameterdescription>
<para>Clock domain.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>The clock domain always run setting is active. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>The clock domain always run setting is not active. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
<para>&lt; LF clock STAT register definition.</para>
<para>&lt; LF clock STAT alwaysrunning position definition.</para>
<para>&lt; LF clock STAT alwaysrunning mask definition.</para>
        </inbodydescription>
        <location file="hal/nrf_clock.h" line="1192" column="24" bodyfile="hal/nrf_clock.h" bodystart="1192" bodyend="1221" declfile="hal/nrf_clock.h" declline="795" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__clock__hal_1gad555b0e6d610054730a7beac749ba5c0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_clock_subscribe_set</definition>
        <argsstring>(NRF_CLOCK_Type *p_reg, nrf_clock_task_t task, uint8_t channel)</argsstring>
        <name>nrf_clock_subscribe_set</name>
        <param>
          <type>NRF_CLOCK_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__clock__hal_1ga6bf1711bc8cb7614c8ae806155bd3f33" kindref="member">nrf_clock_task_t</ref></type>
          <declname>task</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>channel</declname>
        </param>
        <briefdescription>
<para>Function for setting the subscribe configuration for a given CLOCK task. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">task</parametername>
</parameternamelist>
<parameterdescription>
<para>Task for which to set the configuration. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">channel</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel through which to subscribe events. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_clock.h" line="809" column="24" declfile="hal/nrf_clock.h" declline="809" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__clock__hal_1gaed03227123a60ea7c8bc4ed832adf6f3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_clock_subscribe_clear</definition>
        <argsstring>(NRF_CLOCK_Type *p_reg, nrf_clock_task_t task)</argsstring>
        <name>nrf_clock_subscribe_clear</name>
        <param>
          <type>NRF_CLOCK_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__clock__hal_1ga6bf1711bc8cb7614c8ae806155bd3f33" kindref="member">nrf_clock_task_t</ref></type>
          <declname>task</declname>
        </param>
        <briefdescription>
<para>Function for clearing the subscribe configuration for a given CLOCK task. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">task</parametername>
</parameternamelist>
<parameterdescription>
<para>Task for which to clear the configuration. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_clock.h" line="820" column="24" declfile="hal/nrf_clock.h" declline="820" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__clock__hal_1gad0b543bcc840e79ffd5a93035f938910" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_clock_publish_set</definition>
        <argsstring>(NRF_CLOCK_Type *p_reg, nrf_clock_event_t event, uint8_t channel)</argsstring>
        <name>nrf_clock_publish_set</name>
        <param>
          <type>NRF_CLOCK_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__clock__hal_1ga8843dd5805c2b01f9b832ed73d583695" kindref="member">nrf_clock_event_t</ref></type>
          <declname>event</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>channel</declname>
        </param>
        <briefdescription>
<para>Function for setting the publish configuration for a given CLOCK event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event for which to set the configuration. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">channel</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel through which to publish the event. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_clock.h" line="830" column="24" declfile="hal/nrf_clock.h" declline="830" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__clock__hal_1ga136d09d2b0eafa0118c76cb977c6f743" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_clock_publish_clear</definition>
        <argsstring>(NRF_CLOCK_Type *p_reg, nrf_clock_event_t event)</argsstring>
        <name>nrf_clock_publish_clear</name>
        <param>
          <type>NRF_CLOCK_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__clock__hal_1ga8843dd5805c2b01f9b832ed73d583695" kindref="member">nrf_clock_event_t</ref></type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>Function for clearing the publish configuration for a given CLOCK event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event for which to clear the configuration. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_clock.h" line="841" column="24" declfile="hal/nrf_clock.h" declline="841" declcolumn="24"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2015<sp/>-<sp/>2024,<sp/>Nordic<sp/>Semiconductor<sp/>ASA</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>All<sp/>rights<sp/>reserved.</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>SPDX-License-Identifier:<sp/>BSD-3-Clause</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions<sp/>are<sp/>met:</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>1.<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright<sp/>notice,<sp/>this</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>2.<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the<sp/>distribution.</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/>3.<sp/>Neither<sp/>the<sp/>name<sp/>of<sp/>the<sp/>copyright<sp/>holder<sp/>nor<sp/>the<sp/>names<sp/>of<sp/>its</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>contributors<sp/>may<sp/>be<sp/>used<sp/>to<sp/>endorse<sp/>or<sp/>promote<sp/>products<sp/>derived<sp/>from<sp/>this</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>software<sp/>without<sp/>specific<sp/>prior<sp/>written<sp/>permission.</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>COPYRIGHT<sp/>HOLDERS<sp/>AND<sp/>CONTRIBUTORS<sp/>&quot;AS<sp/>IS&quot;</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/>AND<sp/>ANY<sp/>EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>THE</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*<sp/>ARE<sp/>DISCLAIMED.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>COPYRIGHT<sp/>HOLDER<sp/>OR<sp/>CONTRIBUTORS<sp/>BE</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,<sp/>SPECIAL,<sp/>EXEMPLARY,<sp/>OR</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>PROCUREMENT<sp/>OF</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>*<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,<sp/>DATA,<sp/>OR<sp/>PROFITS;<sp/>OR<sp/>BUSINESS</highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/>*<sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY<sp/>THEORY<sp/>OF<sp/>LIABILITY,<sp/>WHETHER<sp/>IN</highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/>*<sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR<sp/>OTHERWISE)</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/>*<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE<sp/>OF<sp/>THIS<sp/>SOFTWARE,<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/>*<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight></codeline>
<codeline lineno="32"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>NRF_CLOCK_H__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_CLOCK_H__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;nrfx.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="43"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="44"><highlight class="comment"><sp/>*<sp/>@defgroup<sp/>nrf_clock_hal<sp/>Clock<sp/>HAL</highlight></codeline>
<codeline lineno="45"><highlight class="comment"><sp/>*<sp/>@{</highlight></codeline>
<codeline lineno="46"><highlight class="comment"><sp/>*<sp/>@ingroup<sp/>nrf_clock</highlight></codeline>
<codeline lineno="47"><highlight class="comment"><sp/>*<sp/>@brief<sp/><sp/><sp/>Hardware<sp/>access<sp/>layer<sp/>for<sp/>managing<sp/>the<sp/>CLOCK<sp/>peripheral.</highlight></codeline>
<codeline lineno="48"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="49"><highlight class="comment"><sp/>*<sp/>This<sp/>code<sp/>can<sp/>be<sp/>used<sp/>to<sp/>manage<sp/>low-frequency<sp/>clock<sp/>(LFCLK),<sp/>high-frequency<sp/>clock<sp/>(HFCLK),</highlight></codeline>
<codeline lineno="50"><highlight class="comment"><sp/>*<sp/>high-frequency<sp/>192<sp/>MHz<sp/>clock<sp/>(HFCLK192M)<sp/>and<sp/>high-frequency<sp/>audio<sp/>clock<sp/>(HFCLKAUDIO)</highlight></codeline>
<codeline lineno="51"><highlight class="comment"><sp/>*<sp/>settings.</highlight></codeline>
<codeline lineno="52"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(CLOCK_LFCLKSRC_BYPASS_Msk)<sp/>&amp;&amp;<sp/>defined(CLOCK_LFCLKSRC_EXTERNAL_Msk)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Enable<sp/>support<sp/>for<sp/>external<sp/>LFCLK<sp/>sources.<sp/>Read<sp/>more<sp/>in<sp/>the<sp/>Product<sp/>Specification.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_CLOCK_USE_EXTERNAL_LFCLK_SOURCES</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(CLOCK_INTENSET_DONE_Msk)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="60"><highlight class="comment">/**<sp/>@brief<sp/>Symbol<sp/>indicating<sp/>whether<sp/>the<sp/>Low<sp/>Frequency<sp/>Clock<sp/>calibration<sp/>is<sp/>present.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_CLOCK_HAS_CALIBRATION<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_CLOCK_HAS_CALIBRATION<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(CLOCK_CTIV_CTIV_Msk)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="67"><highlight class="comment">/**<sp/>@brief<sp/>Symbol<sp/>indicating<sp/>whether<sp/>the<sp/>Low<sp/>Frequency<sp/>Clock<sp/>calibration<sp/>timer<sp/>is<sp/>present.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_CLOCK_HAS_CALIBRATION_TIMER<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_CLOCK_HAS_CALIBRATION_TIMER<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(defined(CLOCK_INTENSET_HFCLK192MSTARTED_Msk)<sp/>&amp;&amp;<sp/>!defined(NRF5340_XXAA_NETWORK))<sp/>\</highlight></codeline>
<codeline lineno="74"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="75"><highlight class="comment">/**<sp/>@brief<sp/>Symbol<sp/>indicating<sp/>whether<sp/>the<sp/>192<sp/>MHz<sp/>clock<sp/>is<sp/>present.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_CLOCK_HAS_HFCLK192M<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_CLOCK_HAS_HFCLK192M<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(defined(CLOCK_INTENSET_HFCLKAUDIOSTARTED_Msk)<sp/>&amp;&amp;<sp/>!defined(NRF5340_XXAA_NETWORK))<sp/>\</highlight></codeline>
<codeline lineno="82"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="83"><highlight class="comment">/**<sp/>@brief<sp/>Symbol<sp/>indicating<sp/>whether<sp/>the<sp/>Audio<sp/>clock<sp/>is<sp/>present.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_CLOCK_HAS_HFCLKAUDIO<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_CLOCK_HAS_HFCLKAUDIO<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(defined(CLOCK_HFCLKCTRL_HCLK_Div1)<sp/>&amp;&amp;<sp/>!defined(NRF5340_XXAA_NETWORK))<sp/>\</highlight></codeline>
<codeline lineno="90"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="91"><highlight class="comment">/**<sp/>@brief<sp/>Symbol<sp/>indicating<sp/>whether<sp/>the<sp/>HFCLK<sp/>frequency<sp/>configuration<sp/>is<sp/>present.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_CLOCK_HAS_HFCLK_DIV<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_CLOCK_HAS_HFCLK_DIV<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(CLOCK_LFCLKALWAYSRUN_ALWAYSRUN_Msk)<sp/>||<sp/>defined(CLOCK_LFCLK_ALWAYSRUN_ALWAYSRUN_Msk)<sp/>||<sp/>\</highlight></codeline>
<codeline lineno="98"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="99"><highlight class="comment">/**<sp/>@brief<sp/>Symbol<sp/>indicating<sp/>whether<sp/>the<sp/>ALWAYSRUN<sp/>register<sp/>is<sp/>present<sp/>for<sp/>LFCLK.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_CLOCK_HAS_LFCLK_ALWAYSRUN<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_CLOCK_HAS_LFCLK_ALWAYSRUN<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(CLOCK_HFCLKALWAYSRUN_ALWAYSRUN_Msk)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="106"><highlight class="comment">/**<sp/>@brief<sp/>Symbol<sp/>indicating<sp/>whether<sp/>the<sp/>ALWAYSRUN<sp/>register<sp/>is<sp/>present<sp/>for<sp/>HFCLK.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_CLOCK_HAS_HFCLK_ALWAYSRUN<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_CLOCK_HAS_HFCLK_ALWAYSRUN<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(CLOCK_HFCLKSRC_SRC_Msk)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="113"><highlight class="comment">/**<sp/>@brief<sp/>Symbol<sp/>indicating<sp/>whether<sp/>the<sp/>HFCLKSRC<sp/>register<sp/>is<sp/>present.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_CLOCK_HAS_HFCLKSRC<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_CLOCK_HAS_HFCLKSRC<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(CLOCK_TASKS_PLLSTART_TASKS_PLLSTART_Msk)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="120"><highlight class="comment">/**<sp/>@brief<sp/>Symbol<sp/>indicating<sp/>whether<sp/>the<sp/>PLL<sp/>section<sp/>is<sp/>present.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_CLOCK_HAS_PLL<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_CLOCK_HAS_PLL<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(CLOCK_TASKS_XOSTART_TASKS_XOSTART_Msk)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="127"><highlight class="comment">/**<sp/>@brief<sp/>Symbol<sp/>indicating<sp/>whether<sp/>XO<sp/>registers<sp/>are<sp/>present.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_CLOCK_HAS_XO<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_CLOCK_HAS_XO<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(CLOCK_LFCLK_SRC_SRC_Msk)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="134"><highlight class="comment">/**<sp/>@brief<sp/>Symbol<sp/>indicating<sp/>whether<sp/>the<sp/>CLOCK<sp/>type<sp/>contains<sp/>LFCLK<sp/>subtype.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_CLOCK_HAS_LFCLK_TYPE<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_CLOCK_HAS_LFCLK_TYPE<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_CLOCK_HAS_LFCLK_TYPE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_CLOCK_LFCLKRUN_STATUS_NotTriggered<sp/>CLOCK_LFCLK_RUN_STATUS_NotTriggered<sp/></highlight><highlight class="comment">/**&lt;<sp/>Task<sp/>LFCLKSTART/HFCLKSTART<sp/>has<sp/>not<sp/>been<sp/>triggered<sp/>definiton.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_CLOCK_LFCLKRUN_STATUS_Triggered<sp/><sp/><sp/><sp/>CLOCK_LFCLK_RUN_STATUS_Triggered<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Task<sp/>LFCLKSTART/HFCLKSTART<sp/>has<sp/>been<sp/>triggered.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_CLOCK_INTENSET_LFCLKSTARTED_Msk<sp/><sp/><sp/><sp/>CLOCK_INTENSET_LFCLKSTARTED_Msk<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Interrupt<sp/>on<sp/>LFCLKSTARTED<sp/>event<sp/>mask<sp/>definition.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_LFCLKSRCCOPY<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LFCLK.SRCCOPY<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LF<sp/>clock<sp/>SRCCOPY<sp/>register<sp/>definition.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_LFCLKRUN<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LFCLK.RUN<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LF<sp/>clock<sp/>RUN<sp/>register<sp/>definition.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_LFCLKSTAT<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LFCLK.STAT<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LF<sp/>clock<sp/>STAT<sp/>register<sp/>definition.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_LFCLKSRC<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LFCLK.SRC<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LF<sp/>clock<sp/>SRC<sp/>register<sp/>definition.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_LFCLKALWAYSRUN<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LFCLK.ALWAYSRUN<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LF<sp/>clock<sp/>ALWAYSRUN<sp/>register<sp/>definition.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_CLOCK_LFCLKSRCCOPY_SRC_Msk<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CLOCK_LFCLK_SRCCOPY_SRC_Msk<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LF<sp/>clock<sp/>SRCCOPY<sp/>status<sp/>mask<sp/>definition.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_CLOCK_LFCLKSRCCOPY_SRC_Pos<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CLOCK_LFCLK_SRCCOPY_SRC_Pos<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LF<sp/>clock<sp/>SRCCOPY<sp/>status<sp/>position<sp/>definition.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_CLOCK_LFCLKRUN_STATUS_Msk<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CLOCK_LFCLK_RUN_STATUS_Msk<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LF<sp/>clock<sp/>RUN<sp/>status<sp/>mask<sp/>definition.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_CLOCK_LFCLKRUN_STATUS_Pos<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CLOCK_LFCLK_RUN_STATUS_Pos<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LF<sp/>clock<sp/>RUN<sp/>status<sp/>position<sp/>definition.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_CLOCK_LFCLKSTAT_SRC_Msk<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CLOCK_LFCLK_STAT_SRC_Msk<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LF<sp/>clock<sp/>STAT<sp/>source<sp/>mask<sp/>definition.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_CLOCK_LFCLKSTAT_SRC_Pos<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CLOCK_LFCLK_STAT_SRC_Pos<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LF<sp/>clock<sp/>STAT<sp/>source<sp/>position<sp/>definition.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_CLOCK_LFCLKSTAT_STATE_Msk<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CLOCK_LFCLK_STAT_STATE_Msk<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LF<sp/>clock<sp/>STAT<sp/>state<sp/>mask<sp/>definition.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_CLOCK_LFCLKSTAT_STATE_Pos<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CLOCK_LFCLK_STAT_STATE_Pos<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LF<sp/>clock<sp/>STAT<sp/>state<sp/>position<sp/>definition.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_CLOCK_LFCLKSTAT_ALWAYSRUNNING_Msk<sp/><sp/>CLOCK_LFCLK_STAT_ALWAYSRUNNING_Msk<sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LF<sp/>clock<sp/>STAT<sp/>alwaysrunning<sp/>position<sp/>definition.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_CLOCK_LFCLKSTAT_ALWAYSRUNNING_Pos<sp/><sp/>CLOCK_LFCLK_STAT_ALWAYSRUNNING_Pos<sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LF<sp/>clock<sp/>STAT<sp/>alwaysrunning<sp/>mask<sp/>definition.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_CLOCK_LFCLKALWAYSRUN_ALWAYSRUN_Msk<sp/>CLOCK_LFCLK_ALWAYSRUN_ALWAYSRUN_Msk<sp/></highlight><highlight class="comment">/**&lt;<sp/>LF<sp/>clock<sp/>ALWAYSRUN<sp/>position<sp/>definition.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_CLOCK_LFCLKALWAYSRUN_ALWAYSRUN_Pos<sp/>CLOCK_LFCLK_ALWAYSRUN_ALWAYSRUN_Pos<sp/></highlight><highlight class="comment">/**&lt;<sp/>LF<sp/>clock<sp/>ALWAYSRUN<sp/>mask<sp/>definition.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_CLOCK_LFCLKRUN_STATUS_NotTriggered<sp/>CLOCK_LFCLKRUN_STATUS_NotTriggered</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_CLOCK_LFCLKRUN_STATUS_Triggered<sp/><sp/><sp/><sp/>CLOCK_LFCLKRUN_STATUS_Triggered</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_CLOCK_INTENSET_LFCLKSTARTED_Msk<sp/><sp/><sp/><sp/>CLOCK_INTENSET_LFCLKSTARTED_Msk</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_LFCLKSRCCOPY<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LFCLKSRCCOPY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_LFCLKRUN<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LFCLKRUN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_LFCLKSTAT<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LFCLKSTAT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_LFCLKSRC<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LFCLKSRC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_LFCLKALWAYSRUN<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LFCLKALWAYSRUN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_CLOCK_LFCLKSRCCOPY_SRC_Msk<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CLOCK_LFCLKSRCCOPY_SRC_Msk</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_CLOCK_LFCLKSRCCOPY_SRC_Pos<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CLOCK_LFCLKSRCCOPY_SRC_Pos</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_CLOCK_LFCLKRUN_STATUS_Msk<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CLOCK_LFCLKRUN_STATUS_Msk</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_CLOCK_LFCLKRUN_STATUS_Pos<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CLOCK_LFCLKRUN_STATUS_Pos</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_CLOCK_LFCLKSTAT_SRC_Msk<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CLOCK_LFCLKSTAT_SRC_Msk</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_CLOCK_LFCLKSTAT_SRC_Pos<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CLOCK_LFCLKSTAT_SRC_Pos</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_CLOCK_LFCLKSTAT_STATE_Msk<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CLOCK_LFCLKSTAT_STATE_Msk</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_CLOCK_LFCLKSTAT_STATE_Pos<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CLOCK_LFCLKSTAT_STATE_Pos</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_CLOCK_LFCLKSTAT_ALWAYSRUNNING_Msk<sp/><sp/>CLOCK_LFCLKSTAT_ALWAYSRUNNING_Msk</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_CLOCK_LFCLKSTAT_ALWAYSRUNNING_Pos<sp/><sp/>CLOCK_LFCLKSTAT_ALWAYSRUNNING_Pos</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_CLOCK_LFCLKALWAYSRUN_ALWAYSRUN_Msk<sp/>CLOCK_LFCLKALWAYSRUN_ALWAYSRUN_Msk</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_CLOCK_LFCLKALWAYSRUN_ALWAYSRUN_Pos<sp/>CLOCK_LFCLKALWAYSRUN_ALWAYSRUN_Pos</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_CLOCK_HAS_XO</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_CLOCK_INTENSET_HFCLKSTARTED_Msk<sp/>CLOCK_INTEN_XOSTARTED_Msk<sp/></highlight><highlight class="comment">/**&lt;<sp/>HF<sp/>clock<sp/>bit<sp/>mask<sp/>in<sp/>interrupt<sp/>register.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_TASKS_HFCLKSTART<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TASKS_XOSTART<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Task<sp/>HF<sp/>clock<sp/>start<sp/>definition.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_TASKS_HFCLKSTOP<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TASKS_XOSTOP<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Task<sp/>HF<sp/>clock<sp/>stop<sp/>definition.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_EVENTS_HFCLKSTARTED<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EVENTS_XOSTARTED<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Event<sp/>HF<sp/>clock<sp/>startrd<sp/>definition.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_HFCLKRUN<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>XO.RUN<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>HF<sp/>clock<sp/>RUN<sp/>register<sp/>definition.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_HFCLKSTAT<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>XO.STAT<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>HF<sp/>clock<sp/>STAT<sp/>register<sp/>definition.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_CLOCK_HFCLKRUN_STATUS_Msk<sp/><sp/><sp/><sp/><sp/><sp/><sp/>CLOCK_XO_RUN_STATUS_Msk<sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>HF<sp/>clock<sp/>RUN<sp/>status<sp/>mask<sp/>definition.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_CLOCK_HFCLKRUN_STATUS_Pos<sp/><sp/><sp/><sp/><sp/><sp/><sp/>CLOCK_XO_RUN_STATUS_Pos<sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>HF<sp/>clock<sp/>RUN<sp/>status<sp/>position<sp/>definition.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_CLOCK_HFCLKSTAT_STATE_Msk<sp/><sp/><sp/><sp/><sp/><sp/><sp/>CLOCK_XO_STAT_STATE_Msk<sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>HF<sp/>clock<sp/>STAT<sp/>state<sp/>mask<sp/>definition.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_CLOCK_HFCLKSTAT_STATE_Pos<sp/><sp/><sp/><sp/><sp/><sp/><sp/>CLOCK_XO_STAT_STATE_Pos<sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>HF<sp/>clock<sp/>STAT<sp/>state<sp/>position<sp/>definition.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_CLOCK_INTENSET_HFCLKSTARTED_Msk<sp/>CLOCK_INTENSET_HFCLKSTARTED_Msk</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_TASKS_HFCLKSTART<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TASKS_HFCLKSTART</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_TASKS_HFCLKSTOP<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TASKS_HFCLKSTOP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_EVENTS_HFCLKSTARTED<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EVENTS_HFCLKSTARTED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_HFCLKRUN<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HFCLKRUN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_HFCLKSTAT<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HFCLKSTAT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_CLOCK_HFCLKRUN_STATUS_Msk<sp/><sp/><sp/><sp/><sp/><sp/><sp/>CLOCK_HFCLKRUN_STATUS_Msk</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_CLOCK_HFCLKRUN_STATUS_Pos<sp/><sp/><sp/><sp/><sp/><sp/><sp/>CLOCK_HFCLKRUN_STATUS_Pos</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_CLOCK_HFCLKSTAT_STATE_Msk<sp/><sp/><sp/><sp/><sp/><sp/><sp/>CLOCK_HFCLKSTAT_STATE_Msk</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_CLOCK_HFCLKSTAT_STATE_Pos<sp/><sp/><sp/><sp/><sp/><sp/><sp/>CLOCK_HFCLKSTAT_STATE_Pos</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="208"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="209"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Low-frequency<sp/>clock<sp/>sources.</highlight></codeline>
<codeline lineno="210"><highlight class="comment"><sp/>*<sp/>@details<sp/>Used<sp/>by<sp/>LFCLKSRC,<sp/>LFCLKSTAT,<sp/>and<sp/>LFCLKSRCCOPY<sp/>registers.</highlight></codeline>
<codeline lineno="211"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal">{</highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(CLOCK_LFCLKSRC_SRC_LFULP)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__clock__hal_1gga5b00bcdc07defd8187f2be8a2ec7a597abbf41d486a54192b0710aaec4fc80c57" kindref="member">NRF_CLOCK_LFCLK_LFULP</ref><sp/>=<sp/>CLOCK_LFCLKSRC_SRC_LFULP,<sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Internal<sp/>32<sp/>kHz<sp/>Ultra-low<sp/>power<sp/>oscillator.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(CLOCK_LFCLKSRC_SRC_RC)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__clock__hal_1gga5b00bcdc07defd8187f2be8a2ec7a597ae2a6613188db56db98d2a71a1656556d" kindref="member">NRF_CLOCK_LFCLK_RC</ref><sp/><sp/><sp/><sp/>=<sp/>CLOCK_LFCLKSRC_SRC_RC,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Internal<sp/>32<sp/>kHz<sp/>RC<sp/>oscillator.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>NRF_CLOCK_HAS_LFCLK_TYPE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__clock__hal_1gga5b00bcdc07defd8187f2be8a2ec7a597ae2a6613188db56db98d2a71a1656556d" kindref="member">NRF_CLOCK_LFCLK_RC</ref><sp/><sp/><sp/><sp/>=<sp/>CLOCK_LFCLK_SRC_SRC_LFRC,<sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Internal<sp/>32<sp/>kHz<sp/>RC<sp/>oscillator.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__clock__hal_1gga5b00bcdc07defd8187f2be8a2ec7a597ae2a6613188db56db98d2a71a1656556d" kindref="member">NRF_CLOCK_LFCLK_RC</ref><sp/><sp/><sp/><sp/>=<sp/>CLOCK_LFCLKSRC_SRC_LFRC,<sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Internal<sp/>32<sp/>kHz<sp/>RC<sp/>oscillator.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(CLOCK_LFCLKSRC_SRC_Xtal)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__clock__hal_1gga5b00bcdc07defd8187f2be8a2ec7a597a0488e22c4ffb91ea744b59010f9d413c" kindref="member">NRF_CLOCK_LFCLK_XTAL</ref><sp/><sp/>=<sp/>CLOCK_LFCLKSRC_SRC_Xtal,<sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>External<sp/>32<sp/>kHz<sp/>crystal.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>NRF_CLOCK_HAS_LFCLK_TYPE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__clock__hal_1gga5b00bcdc07defd8187f2be8a2ec7a597a0488e22c4ffb91ea744b59010f9d413c" kindref="member">NRF_CLOCK_LFCLK_XTAL</ref><sp/><sp/>=<sp/>CLOCK_LFCLK_SRC_SRC_LFXO,<sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>External<sp/>32<sp/>kHz<sp/>crystal.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__clock__hal_1gga5b00bcdc07defd8187f2be8a2ec7a597a0488e22c4ffb91ea744b59010f9d413c" kindref="member">NRF_CLOCK_LFCLK_XTAL</ref><sp/><sp/>=<sp/>CLOCK_LFCLKSRC_SRC_LFXO,<sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>External<sp/>32<sp/>kHz<sp/>crystal.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(CLOCK_LFCLKSRC_SRC_Synth)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__clock__hal_1gga5b00bcdc07defd8187f2be8a2ec7a597a75d19341d350c8c24a9d036ab45e7a9e" kindref="member">NRF_CLOCK_LFCLK_SYNTH</ref><sp/>=<sp/>CLOCK_LFCLKSRC_SRC_Synth,<sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Internal<sp/>32<sp/>kHz<sp/>synthesized<sp/>from<sp/>HFCLK<sp/>system<sp/>clock.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>NRF_CLOCK_HAS_LFCLK_TYPE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__clock__hal_1gga5b00bcdc07defd8187f2be8a2ec7a597a75d19341d350c8c24a9d036ab45e7a9e" kindref="member">NRF_CLOCK_LFCLK_SYNTH</ref><sp/>=<sp/>CLOCK_LFCLK_SRC_SRC_LFSYNT,<sp/></highlight><highlight class="comment">/**&lt;<sp/>Internal<sp/>32<sp/>kHz<sp/>synthesized<sp/>from<sp/>HFCLK<sp/>system<sp/>clock.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(CLOCK_LFCLKSRC_SRC_LFSYNT)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__clock__hal_1gga5b00bcdc07defd8187f2be8a2ec7a597a75d19341d350c8c24a9d036ab45e7a9e" kindref="member">NRF_CLOCK_LFCLK_SYNTH</ref><sp/>=<sp/>CLOCK_LFCLKSRC_SRC_LFSYNT,<sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Internal<sp/>32<sp/>kHz<sp/>synthesized<sp/>from<sp/>HFCLK<sp/>system<sp/>clock.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(NRF_CLOCK_USE_EXTERNAL_LFCLK_SOURCES)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="243"><highlight class="comment"><sp/><sp/><sp/><sp/>/**</highlight></codeline>
<codeline lineno="244"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>External<sp/>32<sp/>kHz<sp/>low<sp/>swing<sp/>signal.<sp/>Used<sp/>only<sp/>with<sp/>the<sp/>LFCLKSRC<sp/>register.</highlight></codeline>
<codeline lineno="245"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>For<sp/>the<sp/>others<sp/>@ref<sp/>NRF_CLOCK_LFCLK_XTAL<sp/>is<sp/>returned<sp/>for<sp/>this<sp/>setting.</highlight></codeline>
<codeline lineno="246"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__clock__hal_1gga5b00bcdc07defd8187f2be8a2ec7a597a6267606ab850cb0772e20bcd51a2ba31" kindref="member">NRF_CLOCK_LFCLK_XTAL_LOW_SWING</ref><sp/>=<sp/>(CLOCK_LFCLKSRC_SRC_Xtal<sp/>|</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(CLOCK_LFCLKSRC_EXTERNAL_Enabled<sp/>&lt;&lt;<sp/>CLOCK_LFCLKSRC_EXTERNAL_Pos)),</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="249"><highlight class="comment"><sp/><sp/><sp/><sp/>/**</highlight></codeline>
<codeline lineno="250"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>External<sp/>32<sp/>kHz<sp/>full<sp/>swing<sp/>signal.<sp/>Used<sp/>only<sp/>with<sp/>the<sp/>LFCLKSRC<sp/>register.</highlight></codeline>
<codeline lineno="251"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>For<sp/>the<sp/>others<sp/>@ref<sp/>NRF_CLOCK_LFCLK_XTAL<sp/>is<sp/>returned<sp/>for<sp/>this<sp/>setting.</highlight></codeline>
<codeline lineno="252"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__clock__hal_1gga5b00bcdc07defd8187f2be8a2ec7a597abe6c2514d4e6aad768354e24674bd1fc" kindref="member">NRF_CLOCK_LFCLK_XTAL_FULL_SWING</ref><sp/>=<sp/>(CLOCK_LFCLKSRC_SRC_Xtal<sp/>|</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(CLOCK_LFCLKSRC_BYPASS_Enabled<sp/><sp/><sp/>&lt;&lt;<sp/>CLOCK_LFCLKSRC_BYPASS_Pos)<sp/>|</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(CLOCK_LFCLKSRC_EXTERNAL_Enabled<sp/>&lt;&lt;<sp/>CLOCK_LFCLKSRC_EXTERNAL_Pos)),</highlight></codeline>
<codeline lineno="256"><highlight class="normal">#endif<sp/></highlight><highlight class="comment">//<sp/>defined(NRF_CLOCK_USE_EXTERNAL_LFCLK_SOURCES)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal">}<sp/><ref refid="group__nrf__clock__hal_1ga5b00bcdc07defd8187f2be8a2ec7a597" kindref="member">nrf_clock_lfclk_t</ref>;</highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="259"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="260"><highlight class="comment"><sp/>*<sp/>@brief<sp/>High-frequency<sp/>clock<sp/>sources.</highlight></codeline>
<codeline lineno="261"><highlight class="comment"><sp/>*<sp/>@details<sp/>Used<sp/>by<sp/>HFCLKSTAT<sp/>and<sp/>HFCLK192MSTAT<sp/>registers.</highlight></codeline>
<codeline lineno="262"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal">{</highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(CLOCK_HFCLKSTAT_SRC_Xtal)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__clock__hal_1ggac89aad0e037b7aeefc5264a4dca76197acd16ac7a514b4ce5fad5229330d3ee91" kindref="member">NRF_CLOCK_HFCLK_HIGH_ACCURACY</ref><sp/>=<sp/>CLOCK_HFCLKSTAT_SRC_Xtal,<sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>External<sp/>16<sp/>MHz/32<sp/>MHz<sp/>crystal<sp/>oscillator.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>NRF_CLOCK_HAS_XO</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__clock__hal_1ggac89aad0e037b7aeefc5264a4dca76197acd16ac7a514b4ce5fad5229330d3ee91" kindref="member">NRF_CLOCK_HFCLK_HIGH_ACCURACY</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>External<sp/>32<sp/>MHz<sp/>crystal<sp/>oscillator.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__clock__hal_1ggac89aad0e037b7aeefc5264a4dca76197acd16ac7a514b4ce5fad5229330d3ee91" kindref="member">NRF_CLOCK_HFCLK_HIGH_ACCURACY</ref><sp/>=<sp/>CLOCK_HFCLKSTAT_SRC_HFXO,<sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>External<sp/>32<sp/>MHz<sp/>crystal<sp/>oscillator.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(CLOCK_HFCLKSTAT_SRC_RC)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__clock__hal_1ggac89aad0e037b7aeefc5264a4dca76197ac818a771af1b52744004d50920fd584d" kindref="member">NRF_CLOCK_HFCLK_LOW_ACCURACY</ref><sp/><sp/>=<sp/>CLOCK_HFCLKSTAT_SRC_RC,<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Internal<sp/>16<sp/>MHz<sp/>RC<sp/>oscillator.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(CLOCK_HFCLKSTAT_SRC_HFINT)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__clock__hal_1ggac89aad0e037b7aeefc5264a4dca76197ac818a771af1b52744004d50920fd584d" kindref="member">NRF_CLOCK_HFCLK_LOW_ACCURACY</ref><sp/><sp/>=<sp/>CLOCK_HFCLKSTAT_SRC_HFINT,<sp/></highlight><highlight class="comment">/**&lt;<sp/>Internal<sp/>16<sp/>MHz<sp/>RC<sp/>oscillator.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__clock__hal_1ggac89aad0e037b7aeefc5264a4dca76197ac818a771af1b52744004d50920fd584d" kindref="member">NRF_CLOCK_HFCLK_LOW_ACCURACY</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Internal<sp/>RC<sp/>oscillator.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal">}<sp/><ref refid="group__nrf__clock__hal_1gac89aad0e037b7aeefc5264a4dca76197" kindref="member">nrf_clock_hfclk_t</ref>;</highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="282"><highlight class="comment">/**<sp/>@brief<sp/>Clock<sp/>domains.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal">{</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/>NRF_CLOCK_DOMAIN_LFCLK,</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/>NRF_CLOCK_DOMAIN_HFCLK,</highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_CLOCK_HAS_HFCLK192M</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/>NRF_CLOCK_DOMAIN_HFCLK192M,</highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_CLOCK_HAS_HFCLKAUDIO</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/>NRF_CLOCK_DOMAIN_HFCLKAUDIO,</highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal">}<sp/><ref refid="group__nrf__clock__hal_1ga1739a9f32e7efbf83dc6e773b05211c1" kindref="member">nrf_clock_domain_t</ref>;</highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(CLOCK_FEATURE_HFCLK_DIVIDE_PRESENT)<sp/>||<sp/>NRF_CLOCK_HAS_HFCLK192M</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="296"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="297"><highlight class="comment"><sp/>*<sp/>@brief<sp/>High-frequency<sp/>clock<sp/>frequency<sp/>configuration.</highlight></codeline>
<codeline lineno="298"><highlight class="comment"><sp/>*<sp/>@details<sp/>Used<sp/>by<sp/>HFCLKCTRL<sp/>and<sp/>HFCLK192MCTRL<sp/>registers.</highlight></codeline>
<codeline lineno="299"><highlight class="comment"><sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal">{</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__clock__hal_1gga4ae12749dff0c4975b250728d6de0ad6a0ac2a5d326b764d7d22e521767996ec8" kindref="member">NRF_CLOCK_HFCLK_DIV_1</ref><sp/>=<sp/>CLOCK_HFCLKCTRL_HCLK_Div1,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Divide<sp/>HFCLK/HFCLK192M<sp/>by<sp/>1<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__clock__hal_1gga4ae12749dff0c4975b250728d6de0ad6abea8f4e6147da9de0e57590f23e9fd3c" kindref="member">NRF_CLOCK_HFCLK_DIV_2</ref><sp/>=<sp/>CLOCK_HFCLKCTRL_HCLK_Div2,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Divide<sp/>HFCLK/HFCLK192M<sp/>by<sp/>2<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_CLOCK_HAS_HFCLK192M</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__clock__hal_1gga4ae12749dff0c4975b250728d6de0ad6a1334c6bb50f2d41948a016fa5e17eee8" kindref="member">NRF_CLOCK_HFCLK_DIV_4</ref><sp/>=<sp/>CLOCK_HFCLK192MCTRL_HCLK192M_Div4,<sp/></highlight><highlight class="comment">/**&lt;<sp/>Divide<sp/>HFCLK192M<sp/>by<sp/>4<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal">}<sp/><ref refid="group__nrf__clock__hal_1ga4ae12749dff0c4975b250728d6de0ad6" kindref="member">nrf_clock_hfclk_div_t</ref>;</highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>defined(CLOCK_FEATURE_HFCLK_DIVIDE_PRESENT)<sp/>||<sp/>NRF_CLOCK_HAS_HFCLK192M</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="310"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="311"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Trigger<sp/>status<sp/>of<sp/>task<sp/>LFCLKSTART/HFCLKSTART.</highlight></codeline>
<codeline lineno="312"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="313"><highlight class="comment"><sp/>*<sp/>@note<sp/>This<sp/>enum<sp/>is<sp/>deprecated.</highlight></codeline>
<codeline lineno="314"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="315"><highlight class="comment"><sp/>*<sp/>@details<sp/>Used<sp/>by<sp/>LFCLKRUN<sp/>and<sp/>HFCLKRUN<sp/>registers.</highlight></codeline>
<codeline lineno="316"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal">{</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__clock__hal_1gga0147a15524c768cc1f8aa8a1cd323f1ea45055344396fd799150ad4543601de89" kindref="member">NRF_CLOCK_START_TASK_NOT_TRIGGERED</ref><sp/>=<sp/><ref refid="group__nrf__clock__hal_1ga25f77a2fd0ef192c443d7b88cd007d84" kindref="member">NRF_CLOCK_LFCLKRUN_STATUS_NotTriggered</ref>,<sp/></highlight><highlight class="comment">/**&lt;<sp/>Task<sp/>LFCLKSTART/HFCLKSTART<sp/>has<sp/>not<sp/>been<sp/>triggered.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__clock__hal_1gga0147a15524c768cc1f8aa8a1cd323f1ea56bd6949215384c687e25ec8382fbe94" kindref="member">NRF_CLOCK_START_TASK_TRIGGERED</ref><sp/><sp/><sp/><sp/><sp/>=<sp/><ref refid="group__nrf__clock__hal_1ga195c4bbb56c69035f161f93144957b65" kindref="member">NRF_CLOCK_LFCLKRUN_STATUS_Triggered</ref><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Task<sp/>LFCLKSTART/HFCLKSTART<sp/>has<sp/>been<sp/>triggered.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal">}<sp/><ref refid="group__nrf__clock__hal_1ga0147a15524c768cc1f8aa8a1cd323f1e" kindref="member">nrf_clock_start_task_status_t</ref>;</highlight></codeline>
<codeline lineno="322"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="323"><highlight class="comment">/**<sp/>@brief<sp/>Interrupts.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal">{</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__clock__hal_1gga7ab8220532dae7b1dde0f5c329e81041ab96bb7ba8e2668d6ccf823ef2e45b6d1" kindref="member">NRF_CLOCK_INT_HF_STARTED_MASK</ref><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><ref refid="group__nrf__clock__hal_1ga263a8a23be70ebb916ebcbb79ea5bba1" kindref="member">NRF_CLOCK_INTENSET_HFCLKSTARTED_Msk</ref>,<sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Interrupt<sp/>on<sp/>HFCLKSTARTED<sp/>event.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__clock__hal_1gga7ab8220532dae7b1dde0f5c329e81041a3cb9f64dae43d178a8d9f5a11253502e" kindref="member">NRF_CLOCK_INT_LF_STARTED_MASK</ref><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><ref refid="group__nrf__clock__hal_1ga54b345f822889c4b0c04c046f7bba26e" kindref="member">NRF_CLOCK_INTENSET_LFCLKSTARTED_Msk</ref>,<sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Interrupt<sp/>on<sp/>LFCLKSTARTED<sp/>event.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_CLOCK_HAS_PLL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__clock__hal_1gga7ab8220532dae7b1dde0f5c329e81041aa67a87bbb43193939daba915fa46ab8e" kindref="member">NRFX_CLOCK_INT_PLL_STARTED_MASK</ref><sp/><sp/><sp/><sp/>=<sp/>CLOCK_INTENSET_PLLSTARTED_Msk,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Interrupt<sp/>on<sp/>PLLSTARTED<sp/>event.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_CLOCK_HAS_CALIBRATION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__clock__hal_1gga7ab8220532dae7b1dde0f5c329e81041a40c10edbbcd14de73fb05aa14bf1a17c" kindref="member">NRF_CLOCK_INT_DONE_MASK</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>CLOCK_INTENSET_DONE_Msk,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Interrupt<sp/>on<sp/>DONE<sp/>event.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_CLOCK_HAS_CALIBRATION_TIMER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__clock__hal_1gga7ab8220532dae7b1dde0f5c329e81041a0820ea89bcb64904238b43bb758ebfaa" kindref="member">NRF_CLOCK_INT_CTTO_MASK</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>CLOCK_INTENSET_CTTO_Msk,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Interrupt<sp/>on<sp/>CTTO<sp/>event.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(CLOCK_INTENSET_CTSTARTED_Msk)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__clock__hal_1gga7ab8220532dae7b1dde0f5c329e81041a20f1a621f577542de76fefa9a0e4ff46" kindref="member">NRF_CLOCK_INT_CTSTARTED_MASK</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>CLOCK_INTENSET_CTSTARTED_Msk,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Interrupt<sp/>on<sp/>CTSTARTED<sp/>event.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__clock__hal_1gga7ab8220532dae7b1dde0f5c329e81041a962143d35daba16a64de96f9bfa92d7a" kindref="member">NRF_CLOCK_INT_CTSTOPPED_MASK</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>CLOCK_INTENSET_CTSTOPPED_Msk<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Interrupt<sp/>on<sp/>CTSTOPPED<sp/>event.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_CLOCK_HAS_HFCLKAUDIO</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/>NRF_CLOCK_INT_HFAUDIO_STARTED_MASK<sp/>=<sp/>CLOCK_INTENSET_HFCLKAUDIOSTARTED_Msk,<sp/></highlight><highlight class="comment">/**&lt;<sp/>Interrupt<sp/>on<sp/>HFCLKAUDIOSTARTED<sp/>event.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_CLOCK_HAS_HFCLK192M</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__clock__hal_1gga7ab8220532dae7b1dde0f5c329e81041a873c3c6987903b97f5f4a4e415bf3fe2" kindref="member">NRF_CLOCK_INT_HF192M_STARTED_MASK</ref><sp/><sp/>=<sp/>CLOCK_INTENSET_HFCLK192MSTARTED_Msk,<sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Interrupt<sp/>on<sp/>HFCLK192MSTARTED<sp/>event.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal">}<sp/><ref refid="group__nrf__clock__hal_1ga7ab8220532dae7b1dde0f5c329e81041" kindref="member">nrf_clock_int_mask_t</ref>;</highlight></codeline>
<codeline lineno="350"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="351"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="352"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Tasks.</highlight></codeline>
<codeline lineno="353"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="354"><highlight class="comment"><sp/>*<sp/>@details<sp/>The<sp/>NRF_CLOCK_TASK_LFCLKSTOP<sp/>task<sp/>cannot<sp/>be<sp/>set<sp/>when<sp/>the<sp/>low-frequency<sp/>clock<sp/>is<sp/>not<sp/>running.</highlight></codeline>
<codeline lineno="355"><highlight class="comment"><sp/>*<sp/>The<sp/>NRF_CLOCK_TASK_HFCLKSTOP<sp/>task<sp/>cannot<sp/>be<sp/>set<sp/>when<sp/>the<sp/>high-frequency<sp/>clock<sp/>is<sp/>not<sp/>running.</highlight></codeline>
<codeline lineno="356"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal">{</highlight></codeline>
<codeline lineno="359"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_CLOCK_HAS_XO</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__clock__hal_1gga6bf1711bc8cb7614c8ae806155bd3f33a05f479c3cb57882e1f4f9caf8bfe9a8a" kindref="member">NRF_CLOCK_TASK_HFCLKSTART</ref><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_CLOCK_Type,<sp/>TASKS_XOSTART),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Start<sp/>HFCLK<sp/>clock<sp/>source.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__clock__hal_1gga6bf1711bc8cb7614c8ae806155bd3f33a823dc0e6043cc8f47e48f3749bb34de4" kindref="member">NRF_CLOCK_TASK_HFCLKSTOP</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_CLOCK_Type,<sp/>TASKS_XOSTOP),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Stop<sp/>HFCLK<sp/>clock<sp/>source.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__clock__hal_1gga6bf1711bc8cb7614c8ae806155bd3f33a05f479c3cb57882e1f4f9caf8bfe9a8a" kindref="member">NRF_CLOCK_TASK_HFCLKSTART</ref><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_CLOCK_Type,<sp/>TASKS_HFCLKSTART),<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Start<sp/>HFCLK<sp/>clock<sp/>source.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__clock__hal_1gga6bf1711bc8cb7614c8ae806155bd3f33a823dc0e6043cc8f47e48f3749bb34de4" kindref="member">NRF_CLOCK_TASK_HFCLKSTOP</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_CLOCK_Type,<sp/>TASKS_HFCLKSTOP),<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Stop<sp/>HFCLK<sp/>clock<sp/>source.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_CLOCK_HAS_PLL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__clock__hal_1gga6bf1711bc8cb7614c8ae806155bd3f33a5e327e366f08c5a70aae84c69fcb9fa9" kindref="member">NRF_CLOCK_TASK_PLLSTART</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_CLOCK_Type,<sp/>TASKS_PLLSTART),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Start<sp/>PLL<sp/>and<sp/>keep<sp/>it<sp/>running,<sp/>regardless<sp/>of<sp/>the<sp/>automatic<sp/>clock<sp/>requests.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__clock__hal_1gga6bf1711bc8cb7614c8ae806155bd3f33a00dbca23a7eb97a5c0c053b82cb2b00b" kindref="member">NRF_CLOCK_TASK_PLLSTOP</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_CLOCK_Type,<sp/>TASKS_PLLSTOP),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Stop<sp/>PLL.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__clock__hal_1gga6bf1711bc8cb7614c8ae806155bd3f33a665f140a53313b4eb7613281653cc6af" kindref="member">NRF_CLOCK_TASK_LFCLKSTART</ref><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_CLOCK_Type,<sp/>TASKS_LFCLKSTART),<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Start<sp/>LFCLK<sp/>clock<sp/>source.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__clock__hal_1gga6bf1711bc8cb7614c8ae806155bd3f33a6165f023d815930d80553ac6b86b9f26" kindref="member">NRF_CLOCK_TASK_LFCLKSTOP</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_CLOCK_Type,<sp/>TASKS_LFCLKSTOP),<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Stop<sp/>LFCLK<sp/>clock<sp/>source.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_CLOCK_HAS_CALIBRATION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__clock__hal_1gga6bf1711bc8cb7614c8ae806155bd3f33aac43909700fa7e7449fed9007558e3d7" kindref="member">NRF_CLOCK_TASK_CAL</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_CLOCK_Type,<sp/>TASKS_CAL),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Start<sp/>calibration<sp/>of<sp/>LFCLK<sp/>RC<sp/>oscillator.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="375"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_CLOCK_HAS_CALIBRATION_TIMER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__clock__hal_1gga6bf1711bc8cb7614c8ae806155bd3f33a8c1b64a0d977cd142123fcb9a86fe5d4" kindref="member">NRF_CLOCK_TASK_CTSTART</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_CLOCK_Type,<sp/>TASKS_CTSTART),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Start<sp/>calibration<sp/>timer.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__clock__hal_1gga6bf1711bc8cb7614c8ae806155bd3f33a16b1a0dcf1ea9da5a7639b4e14e7d892" kindref="member">NRF_CLOCK_TASK_CTSTOP</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_CLOCK_Type,<sp/>TASKS_CTSTOP)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Stop<sp/>calibration<sp/>timer.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_CLOCK_HAS_HFCLKAUDIO</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/>NRF_CLOCK_TASK_HFCLKAUDIOSTART<sp/>=<sp/>offsetof(NRF_CLOCK_Type,<sp/>TASKS_HFCLKAUDIOSTART),<sp/></highlight><highlight class="comment">/**&lt;<sp/>Start<sp/>HFCLKAUDIO<sp/>clock<sp/>source.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__clock__hal_1gga6bf1711bc8cb7614c8ae806155bd3f33ad88378a98026d7231754361ecc0d6277" kindref="member">NRF_CLOCK_TASK_HFCLKAUDIOSTOP</ref><sp/><sp/>=<sp/>offsetof(NRF_CLOCK_Type,<sp/>TASKS_HFCLKAUDIOSTOP),<sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Stop<sp/>HFCLKAUDIO<sp/>clock<sp/>source.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_CLOCK_HAS_HFCLK192M</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__clock__hal_1gga6bf1711bc8cb7614c8ae806155bd3f33ae3aa365e4009bed61581e206d5b9e342" kindref="member">NRF_CLOCK_TASK_HFCLK192MSTART</ref><sp/><sp/>=<sp/>offsetof(NRF_CLOCK_Type,<sp/>TASKS_HFCLK192MSTART),<sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Start<sp/>HFCLK192M<sp/>clock<sp/>source.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__clock__hal_1gga6bf1711bc8cb7614c8ae806155bd3f33a6178d7f357cfd604622d53c986446d6b" kindref="member">NRF_CLOCK_TASK_HFCLK192MSTOP</ref><sp/><sp/><sp/>=<sp/>offsetof(NRF_CLOCK_Type,<sp/>TASKS_HFCLK192MSTOP),<sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Stop<sp/>HFCLK192M<sp/>clock<sp/>source.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal">}<sp/><ref refid="group__nrf__clock__hal_1ga6bf1711bc8cb7614c8ae806155bd3f33" kindref="member">nrf_clock_task_t</ref>;</highlight></codeline>
<codeline lineno="388"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="389"><highlight class="comment">/**<sp/>@brief<sp/>Events.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal">{</highlight></codeline>
<codeline lineno="392"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_CLOCK_HAS_XO</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__clock__hal_1gga8843dd5805c2b01f9b832ed73d583695abc6d081122f7071932c374f83d38d489" kindref="member">NRF_CLOCK_EVENT_HFCLKSTARTED</ref><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_CLOCK_Type,<sp/>EVENTS_XOSTARTED),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>HFCLK<sp/>oscillator<sp/>started.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__clock__hal_1gga8843dd5805c2b01f9b832ed73d583695abc6d081122f7071932c374f83d38d489" kindref="member">NRF_CLOCK_EVENT_HFCLKSTARTED</ref><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_CLOCK_Type,<sp/>EVENTS_HFCLKSTARTED),<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>HFCLK<sp/>oscillator<sp/>started.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="396"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_CLOCK_HAS_PLL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__clock__hal_1gga8843dd5805c2b01f9b832ed73d583695ac6647ea9d607760a3bebe2c4f7463961" kindref="member">NRF_CLOCK_EVENT_PLLSTARTED</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_CLOCK_Type,<sp/>EVENTS_PLLSTARTED),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>PLL<sp/>started.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__clock__hal_1gga8843dd5805c2b01f9b832ed73d583695ad75ad033bf0be9432bd3aa9b0931f07b" kindref="member">NRF_CLOCK_EVENT_LFCLKSTARTED</ref><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_CLOCK_Type,<sp/>EVENTS_LFCLKSTARTED),<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>LFCLK<sp/>oscillator<sp/>started.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_CLOCK_HAS_CALIBRATION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__clock__hal_1gga8843dd5805c2b01f9b832ed73d583695aa862d96adb9c7579442fb51670237efb" kindref="member">NRF_CLOCK_EVENT_DONE</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_CLOCK_Type,<sp/>EVENTS_DONE),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Calibration<sp/>of<sp/>LFCLK<sp/>RC<sp/>oscillator<sp/>completed.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="404"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_CLOCK_HAS_CALIBRATION_TIMER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__clock__hal_1gga8843dd5805c2b01f9b832ed73d583695ab2c012e2ac3e1a52f320040a598c1375" kindref="member">NRF_CLOCK_EVENT_CTTO</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_CLOCK_Type,<sp/>EVENTS_CTTO),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Calibration<sp/>timer<sp/>time-out.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(CLOCK_INTENSET_CTSTARTED_Msk)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__clock__hal_1gga8843dd5805c2b01f9b832ed73d583695aa1d704aa864c7e38c09c0a9ca0afd493" kindref="member">NRF_CLOCK_EVENT_CTSTARTED</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_CLOCK_Type,<sp/>EVENTS_CTSTARTED),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Calibration<sp/>timer<sp/>started.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__clock__hal_1gga8843dd5805c2b01f9b832ed73d583695a59e0c66caf3e8f6cad63ecfe007494e2" kindref="member">NRF_CLOCK_EVENT_CTSTOPPED</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_CLOCK_Type,<sp/>EVENTS_CTSTOPPED)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Calibration<sp/>timer<sp/>stopped.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="411"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_CLOCK_HAS_HFCLKAUDIO</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/>NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED<sp/>=<sp/>offsetof(NRF_CLOCK_Type,<sp/>EVENTS_HFCLKAUDIOSTARTED),<sp/></highlight><highlight class="comment">/**&lt;<sp/>HFCLKAUDIO<sp/>oscillator<sp/>started.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="414"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_CLOCK_HAS_HFCLK192M</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__clock__hal_1gga8843dd5805c2b01f9b832ed73d583695a81353d1135143c314380e46df15cfba5" kindref="member">NRF_CLOCK_EVENT_HFCLK192MSTARTED</ref><sp/><sp/>=<sp/>offsetof(NRF_CLOCK_Type,<sp/>EVENTS_HFCLK192MSTARTED),<sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>HFCLK192M<sp/>oscillator<sp/>started.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="416"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="417"><highlight class="normal">}<sp/><ref refid="group__nrf__clock__hal_1ga8843dd5805c2b01f9b832ed73d583695" kindref="member">nrf_clock_event_t</ref>;</highlight></codeline>
<codeline lineno="418"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="419"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="420"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>enabling<sp/>the<sp/>specified<sp/>interrupt.</highlight></codeline>
<codeline lineno="421"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="422"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="423"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>mask<sp/><sp/>Mask<sp/>of<sp/>interrupts<sp/>to<sp/>be<sp/>enabled.</highlight></codeline>
<codeline lineno="424"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Use<sp/>@ref<sp/>nrf_clock_int_mask_t<sp/>values<sp/>for<sp/>bit<sp/>masking.</highlight></codeline>
<codeline lineno="425"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="426"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__clock__hal_1gae1a1fecb47d6d05b9b938d5c74314f86" kindref="member">nrf_clock_int_enable</ref>(NRF_CLOCK_Type<sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>mask);</highlight></codeline>
<codeline lineno="427"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="428"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="429"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>disabling<sp/>the<sp/>specified<sp/>interrupt.</highlight></codeline>
<codeline lineno="430"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="431"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="432"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>mask<sp/><sp/>Mask<sp/>of<sp/>interrupts<sp/>to<sp/>be<sp/>disabled.</highlight></codeline>
<codeline lineno="433"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Use<sp/>@ref<sp/>nrf_clock_int_mask_t<sp/>values<sp/>for<sp/>bit<sp/>masking.</highlight></codeline>
<codeline lineno="434"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="435"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__clock__hal_1gadded9b778880ab73d01775cc0ab4ab77" kindref="member">nrf_clock_int_disable</ref>(NRF_CLOCK_Type<sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>mask);</highlight></codeline>
<codeline lineno="436"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="437"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="438"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>checking<sp/>if<sp/>the<sp/>specified<sp/>interrupts<sp/>are<sp/>enabled.</highlight></codeline>
<codeline lineno="439"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="440"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="441"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>mask<sp/><sp/>Mask<sp/>of<sp/>interrupts<sp/>to<sp/>be<sp/>checked.</highlight></codeline>
<codeline lineno="442"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Use<sp/>@ref<sp/>nrf_clock_int_mask_t<sp/>values<sp/>for<sp/>bit<sp/>masking.</highlight></codeline>
<codeline lineno="443"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="444"><highlight class="comment"><sp/>*<sp/>@return<sp/>Mask<sp/>of<sp/>enabled<sp/>interrupts.</highlight></codeline>
<codeline lineno="445"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="446"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__clock__hal_1ga3cfc1dfe6d92419878efa3d92203d1f3" kindref="member">nrf_clock_int_enable_check</ref>(NRF_CLOCK_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>mask);</highlight></codeline>
<codeline lineno="447"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="448"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="449"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>retrieving<sp/>the<sp/>address<sp/>of<sp/>the<sp/>specified<sp/>task.</highlight></codeline>
<codeline lineno="450"><highlight class="comment"><sp/>*<sp/>@details<sp/>This<sp/>function<sp/>can<sp/>be<sp/>used<sp/>by<sp/>the<sp/>PPI<sp/>module.</highlight></codeline>
<codeline lineno="451"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="452"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="453"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>task<sp/><sp/>CLOCK<sp/>Task.</highlight></codeline>
<codeline lineno="454"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="455"><highlight class="comment"><sp/>*<sp/>@return<sp/>Address<sp/>of<sp/>the<sp/>requested<sp/>task<sp/>register.</highlight></codeline>
<codeline lineno="456"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="457"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__clock__hal_1gab667ae60ddf82e1e8bd4ffced897af0c" kindref="member">nrf_clock_task_address_get</ref>(NRF_CLOCK_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__clock__hal_1ga6bf1711bc8cb7614c8ae806155bd3f33" kindref="member">nrf_clock_task_t</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>task);</highlight></codeline>
<codeline lineno="459"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="460"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="461"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>the<sp/>specified<sp/>task.</highlight></codeline>
<codeline lineno="462"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="463"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="464"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>task<sp/><sp/>Task<sp/>to<sp/>be<sp/>activated.</highlight></codeline>
<codeline lineno="465"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="466"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__clock__hal_1gaf3e684a3ac2f5e050185d2fa654de394" kindref="member">nrf_clock_task_trigger</ref>(NRF_CLOCK_Type<sp/>*<sp/>p_reg,<sp/><ref refid="group__nrf__clock__hal_1ga6bf1711bc8cb7614c8ae806155bd3f33" kindref="member">nrf_clock_task_t</ref><sp/>task);</highlight></codeline>
<codeline lineno="467"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="468"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="469"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>retrieving<sp/>the<sp/>address<sp/>of<sp/>the<sp/>specified<sp/>event.</highlight></codeline>
<codeline lineno="470"><highlight class="comment"><sp/>*<sp/>@details<sp/>This<sp/>function<sp/>can<sp/>be<sp/>used<sp/>by<sp/>the<sp/>PPI<sp/>module.</highlight></codeline>
<codeline lineno="471"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="472"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="473"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>event<sp/>CLOCK<sp/>Event.</highlight></codeline>
<codeline lineno="474"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="475"><highlight class="comment"><sp/>*<sp/>@return<sp/>Address<sp/>of<sp/>the<sp/>specified<sp/>event<sp/>register.</highlight></codeline>
<codeline lineno="476"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="477"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__clock__hal_1gab6633ed4e3965b482f4bcf82084ced89" kindref="member">nrf_clock_event_address_get</ref>(NRF_CLOCK_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__clock__hal_1ga8843dd5805c2b01f9b832ed73d583695" kindref="member">nrf_clock_event_t</ref><sp/><sp/><sp/><sp/><sp/><sp/>event);</highlight></codeline>
<codeline lineno="479"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="480"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="481"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>clearing<sp/>the<sp/>specified<sp/>event.</highlight></codeline>
<codeline lineno="482"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="483"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="484"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>event<sp/>Event<sp/>to<sp/>clear.</highlight></codeline>
<codeline lineno="485"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="486"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__clock__hal_1ga1f7973a6180d8bf7ab6e93b9f6d3ff7c" kindref="member">nrf_clock_event_clear</ref>(NRF_CLOCK_Type<sp/>*<sp/>p_reg,<sp/><ref refid="group__nrf__clock__hal_1ga8843dd5805c2b01f9b832ed73d583695" kindref="member">nrf_clock_event_t</ref><sp/>event);</highlight></codeline>
<codeline lineno="487"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="488"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="489"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>retrieving<sp/>the<sp/>state<sp/>of<sp/>the<sp/>specified<sp/>event.</highlight></codeline>
<codeline lineno="490"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="491"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="492"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>event<sp/>Event<sp/>to<sp/>be<sp/>checked.</highlight></codeline>
<codeline lineno="493"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="494"><highlight class="comment"><sp/>*<sp/>@retval<sp/>true<sp/><sp/>The<sp/>event<sp/>has<sp/>been<sp/>generated.</highlight></codeline>
<codeline lineno="495"><highlight class="comment"><sp/>*<sp/>@retval<sp/>false<sp/>The<sp/>event<sp/>has<sp/>not<sp/>been<sp/>generated.</highlight></codeline>
<codeline lineno="496"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="497"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrf__clock__hal_1ga8ecb4611627133df496528e764455198" kindref="member">nrf_clock_event_check</ref>(NRF_CLOCK_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,<sp/><ref refid="group__nrf__clock__hal_1ga8843dd5805c2b01f9b832ed73d583695" kindref="member">nrf_clock_event_t</ref><sp/>event);</highlight></codeline>
<codeline lineno="498"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="499"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="500"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>retrieving<sp/>the<sp/>trigger<sp/>status<sp/>of<sp/>the<sp/>task<sp/>START<sp/>for<sp/>given<sp/>domain.</highlight></codeline>
<codeline lineno="501"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="502"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="503"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>domain<sp/>Clock<sp/>domain.</highlight></codeline>
<codeline lineno="504"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="505"><highlight class="comment"><sp/>*<sp/>@retval<sp/>false<sp/>The<sp/>task<sp/>START<sp/>for<sp/>the<sp/>given<sp/>domain<sp/>has<sp/>not<sp/>been<sp/>triggered.</highlight></codeline>
<codeline lineno="506"><highlight class="comment"><sp/>*<sp/>@retval<sp/>true<sp/><sp/>The<sp/>task<sp/>START<sp/>for<sp/>the<sp/>given<sp/>domain<sp/>has<sp/>been<sp/>triggered.</highlight></codeline>
<codeline lineno="507"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="508"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrf__clock__hal_1gabed84813929d82ba6c6c647c3d6bf158" kindref="member">nrf_clock_start_task_check</ref>(NRF_CLOCK_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__clock__hal_1ga1739a9f32e7efbf83dc6e773b05211c1" kindref="member">nrf_clock_domain_t</ref><sp/><sp/><sp/><sp/><sp/>domain);</highlight></codeline>
<codeline lineno="510"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="511"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="512"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>retrieving<sp/>the<sp/>state<sp/>of<sp/>the<sp/>clock.</highlight></codeline>
<codeline lineno="513"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="514"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/><sp/>p_reg<sp/><sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="515"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/><sp/>domain<sp/><sp/><sp/><sp/>Clock<sp/>domain.</highlight></codeline>
<codeline lineno="516"><highlight class="comment"><sp/>*<sp/>@param[out]<sp/>p_clk_src<sp/>Pointer<sp/>to<sp/>clock<sp/>source<sp/>that<sp/>is<sp/>running.<sp/>Set<sp/>to<sp/>NULL<sp/>if<sp/>not<sp/>needed.</highlight></codeline>
<codeline lineno="517"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Ignored<sp/>for<sp/>HFCLKAUDIO<sp/>domain.<sp/>Variable<sp/>pointed<sp/>by<sp/>@p<sp/>p_clk_src</highlight></codeline>
<codeline lineno="518"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>must<sp/>be<sp/>of<sp/>either<sp/>@ref<sp/>nrf_clock_lfclk_t<sp/>type<sp/>for<sp/>LFCLK</highlight></codeline>
<codeline lineno="519"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>or<sp/>@ref<sp/>nrf_clock_hfclk_t<sp/>type<sp/>for<sp/>HFCLK<sp/>and<sp/>HFCLK192M.</highlight></codeline>
<codeline lineno="520"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="521"><highlight class="comment"><sp/>*<sp/>@retval<sp/>false<sp/>The<sp/>clock<sp/>is<sp/>not<sp/>running.</highlight></codeline>
<codeline lineno="522"><highlight class="comment"><sp/>*<sp/>@retval<sp/>true<sp/><sp/>The<sp/>clock<sp/>is<sp/>running.</highlight></codeline>
<codeline lineno="523"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="524"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrf__clock__hal_1gacdce7b3bd39e2466a100f16b41ac72d1" kindref="member">nrf_clock_is_running</ref>(NRF_CLOCK_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__clock__hal_1ga1739a9f32e7efbf83dc6e773b05211c1" kindref="member">nrf_clock_domain_t</ref><sp/><sp/><sp/><sp/><sp/>domain,</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_clk_src);</highlight></codeline>
<codeline lineno="527"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="528"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="529"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>changing<sp/>the<sp/>low-frequency<sp/>clock<sp/>source.</highlight></codeline>
<codeline lineno="530"><highlight class="comment"><sp/>*<sp/>@details<sp/>Check<sp/>in<sp/>Product<sp/>Specification<sp/>if<sp/>this<sp/>function<sp/>can<sp/>be<sp/>called<sp/>when</highlight></codeline>
<codeline lineno="531"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>low-frequency<sp/>clock<sp/>is<sp/>running.</highlight></codeline>
<codeline lineno="532"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="533"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="534"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>source<sp/>New<sp/>low-frequency<sp/>clock<sp/>source.</highlight></codeline>
<codeline lineno="535"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="536"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__clock__hal_1ga24c29888cb9c057a3f01457bf3ceb246" kindref="member">nrf_clock_lf_src_set</ref>(NRF_CLOCK_Type<sp/>*<sp/>p_reg,<sp/><ref refid="group__nrf__clock__hal_1ga5b00bcdc07defd8187f2be8a2ec7a597" kindref="member">nrf_clock_lfclk_t</ref><sp/>source);</highlight></codeline>
<codeline lineno="537"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="538"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="539"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>retrieving<sp/>the<sp/>selected<sp/>source<sp/>for<sp/>the<sp/>low-frequency<sp/>clock.</highlight></codeline>
<codeline lineno="540"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="541"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="542"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="543"><highlight class="comment"><sp/>*<sp/>@retval<sp/>NRF_CLOCK_LFCLK_RC<sp/><sp/><sp/><sp/>The<sp/>internal<sp/>32<sp/>kHz<sp/>RC<sp/>oscillator</highlight></codeline>
<codeline lineno="544"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is<sp/>the<sp/>selected<sp/>source<sp/>for<sp/>the<sp/>low-frequency<sp/>clock.</highlight></codeline>
<codeline lineno="545"><highlight class="comment"><sp/>*<sp/>@retval<sp/>NRF_CLOCK_LFCLK_Xtal<sp/><sp/>An<sp/>external<sp/>32<sp/>kHz<sp/>crystal<sp/>oscillator</highlight></codeline>
<codeline lineno="546"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is<sp/>the<sp/>selected<sp/>source<sp/>for<sp/>the<sp/>low-frequency<sp/>clock.</highlight></codeline>
<codeline lineno="547"><highlight class="comment"><sp/>*<sp/>@retval<sp/>NRF_CLOCK_LFCLK_Synth<sp/>The<sp/>internal<sp/>32<sp/>kHz<sp/>synthesized<sp/>from</highlight></codeline>
<codeline lineno="548"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>HFCLK<sp/>is<sp/>the<sp/>selected<sp/>source<sp/>for<sp/>the<sp/>low-frequency<sp/>clock.</highlight></codeline>
<codeline lineno="549"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="550"><highlight class="normal">NRF_STATIC_INLINE<sp/><ref refid="group__nrf__clock__hal_1ga5b00bcdc07defd8187f2be8a2ec7a597" kindref="member">nrf_clock_lfclk_t</ref><sp/><ref refid="group__nrf__clock__hal_1ga91f9e95a8a8717d0d76cd12c70cdd1c9" kindref="member">nrf_clock_lf_src_get</ref>(NRF_CLOCK_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="551"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="552"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="553"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>retrieving<sp/>the<sp/>active<sp/>source<sp/>of<sp/>the<sp/>low-frequency<sp/>clock.</highlight></codeline>
<codeline lineno="554"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="555"><highlight class="comment"><sp/>*<sp/>@note<sp/>This<sp/>function<sp/>is<sp/>deprecated.<sp/>Use<sp/>@ref<sp/>nrf_clock_is_running<sp/>instead.</highlight></codeline>
<codeline lineno="556"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="557"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="558"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="559"><highlight class="comment"><sp/>*<sp/>@retval<sp/>NRF_CLOCK_LFCLK_RC<sp/><sp/><sp/><sp/>The<sp/>internal<sp/>32<sp/>kHz<sp/>RC<sp/>oscillator</highlight></codeline>
<codeline lineno="560"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is<sp/>the<sp/>active<sp/>source<sp/>of<sp/>the<sp/>low-frequency<sp/>clock.</highlight></codeline>
<codeline lineno="561"><highlight class="comment"><sp/>*<sp/>@retval<sp/>NRF_CLOCK_LFCLK_Xtal<sp/><sp/>An<sp/>external<sp/>32<sp/>kHz<sp/>crystal<sp/>oscillator</highlight></codeline>
<codeline lineno="562"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is<sp/>the<sp/>active<sp/>source<sp/>of<sp/>the<sp/>low-frequency<sp/>clock.</highlight></codeline>
<codeline lineno="563"><highlight class="comment"><sp/>*<sp/>@retval<sp/>NRF_CLOCK_LFCLK_Synth<sp/>The<sp/>internal<sp/>32<sp/>kHz<sp/>synthesized<sp/>from</highlight></codeline>
<codeline lineno="564"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>HFCLK<sp/>is<sp/>the<sp/>active<sp/>source<sp/>of<sp/>the<sp/>low-frequency<sp/>clock.</highlight></codeline>
<codeline lineno="565"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="566"><highlight class="normal">NRF_STATIC_INLINE<sp/><ref refid="group__nrf__clock__hal_1ga5b00bcdc07defd8187f2be8a2ec7a597" kindref="member">nrf_clock_lfclk_t</ref><sp/><ref refid="group__nrf__clock__hal_1ga738da128e4aefd63a596c86395a3abb4" kindref="member">nrf_clock_lf_actv_src_get</ref>(NRF_CLOCK_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="567"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="568"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="569"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>retrieving<sp/>the<sp/>clock<sp/>source<sp/>for<sp/>the<sp/>LFCLK<sp/>clock<sp/>when</highlight></codeline>
<codeline lineno="570"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>task<sp/>LKCLKSTART<sp/>is<sp/>triggered.</highlight></codeline>
<codeline lineno="571"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="572"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="573"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="574"><highlight class="comment"><sp/>*<sp/>@retval<sp/>NRF_CLOCK_LFCLK_RC<sp/><sp/><sp/><sp/>The<sp/>internal<sp/>32<sp/>kHz<sp/>RC<sp/>oscillator</highlight></codeline>
<codeline lineno="575"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is<sp/>running<sp/>and<sp/>generating<sp/>the<sp/>LFCLK<sp/>clock.</highlight></codeline>
<codeline lineno="576"><highlight class="comment"><sp/>*<sp/>@retval<sp/>NRF_CLOCK_LFCLK_Xtal<sp/><sp/>An<sp/>external<sp/>32<sp/>kHz<sp/>crystal<sp/>oscillator</highlight></codeline>
<codeline lineno="577"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is<sp/>running<sp/>and<sp/>generating<sp/>the<sp/>LFCLK<sp/>clock.</highlight></codeline>
<codeline lineno="578"><highlight class="comment"><sp/>*<sp/>@retval<sp/>NRF_CLOCK_LFCLK_Synth<sp/>The<sp/>internal<sp/>32<sp/>kHz<sp/>synthesized<sp/>from</highlight></codeline>
<codeline lineno="579"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>HFCLK<sp/>is<sp/>running<sp/>and<sp/>generating<sp/>the<sp/>LFCLK<sp/>clock.</highlight></codeline>
<codeline lineno="580"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="581"><highlight class="normal">NRF_STATIC_INLINE<sp/><ref refid="group__nrf__clock__hal_1ga5b00bcdc07defd8187f2be8a2ec7a597" kindref="member">nrf_clock_lfclk_t</ref><sp/><ref refid="group__nrf__clock__hal_1gad69ff6c345172118cc4afb226048af3a" kindref="member">nrf_clock_lf_srccopy_get</ref>(NRF_CLOCK_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="582"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="583"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="584"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>retrieving<sp/>the<sp/>state<sp/>of<sp/>the<sp/>LFCLK<sp/>clock.</highlight></codeline>
<codeline lineno="585"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="586"><highlight class="comment"><sp/>*<sp/>@note<sp/>This<sp/>function<sp/>is<sp/>deprecated.<sp/>Use<sp/>@ref<sp/>nrf_clock_is_running<sp/>instead.</highlight></codeline>
<codeline lineno="587"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="588"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="589"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="590"><highlight class="comment"><sp/>*<sp/>@retval<sp/>false<sp/>The<sp/>LFCLK<sp/>clock<sp/>is<sp/>not<sp/>running.</highlight></codeline>
<codeline lineno="591"><highlight class="comment"><sp/>*<sp/>@retval<sp/>true<sp/><sp/>The<sp/>LFCLK<sp/>clock<sp/>is<sp/>running.</highlight></codeline>
<codeline lineno="592"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="593"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrf__clock__hal_1gab68648e381ee3e2f5a1c77b051ae19c0" kindref="member">nrf_clock_lf_is_running</ref>(NRF_CLOCK_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="594"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="595"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="596"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>retrieving<sp/>the<sp/>trigger<sp/>status<sp/>of<sp/>the<sp/>task<sp/>LFCLKSTART.</highlight></codeline>
<codeline lineno="597"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="598"><highlight class="comment"><sp/>*<sp/>@note<sp/>This<sp/>function<sp/>is<sp/>deprecated.<sp/>Use<sp/>@ref<sp/>nrf_clock_start_task_check<sp/>instead.</highlight></codeline>
<codeline lineno="599"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="600"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="601"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="602"><highlight class="comment"><sp/>*<sp/>@retval<sp/>NRF_CLOCK_START_TASK_NOT_TRIGGERED<sp/>The<sp/>task<sp/>LFCLKSTART<sp/>has<sp/>not<sp/>been<sp/>triggered.</highlight></codeline>
<codeline lineno="603"><highlight class="comment"><sp/>*<sp/>@retval<sp/>NRF_CLOCK_START_TASK_TRIGGERED<sp/><sp/><sp/><sp/><sp/>The<sp/>task<sp/>LFCLKSTART<sp/>has<sp/>been<sp/>triggered.</highlight></codeline>
<codeline lineno="604"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="605"><highlight class="normal">NRF_STATIC_INLINE</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><ref refid="group__nrf__clock__hal_1ga0147a15524c768cc1f8aa8a1cd323f1e" kindref="member">nrf_clock_start_task_status_t</ref><sp/><ref refid="group__nrf__clock__hal_1ga5e3fc67f9a0e1e612d748a1a9b7b4184" kindref="member">nrf_clock_lf_start_task_status_get</ref>(NRF_CLOCK_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="607"><highlight class="normal"></highlight></codeline>
<codeline lineno="608"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_CLOCK_HAS_HFCLKSRC</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="609"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="610"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>changing<sp/>the<sp/>high-frequency<sp/>clock<sp/>source.</highlight></codeline>
<codeline lineno="611"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="612"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="613"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>source<sp/>New<sp/>high-frequency<sp/>clock<sp/>source.</highlight></codeline>
<codeline lineno="614"><highlight class="comment"><sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="615"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__clock__hal_1gab7cab3a3c552786d73ff99c011ddc312" kindref="member">nrf_clock_hf_src_set</ref>(NRF_CLOCK_Type<sp/>*<sp/>p_reg,<sp/><ref refid="group__nrf__clock__hal_1gac89aad0e037b7aeefc5264a4dca76197" kindref="member">nrf_clock_hfclk_t</ref><sp/>source);</highlight></codeline>
<codeline lineno="616"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="617"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="618"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="619"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>retrieving<sp/>the<sp/>selected<sp/>source<sp/>of<sp/>the<sp/>high-frequency<sp/>clock.</highlight></codeline>
<codeline lineno="620"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="621"><highlight class="comment"><sp/>*<sp/>For<sp/>SoCs<sp/>not<sp/>featuring<sp/>the<sp/>HFCLKSRC<sp/>register,<sp/>this<sp/>is<sp/>always<sp/>also<sp/>the<sp/>active<sp/>source</highlight></codeline>
<codeline lineno="622"><highlight class="comment"><sp/>*<sp/>of<sp/>the<sp/>high-frequency<sp/>clock.</highlight></codeline>
<codeline lineno="623"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="624"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="625"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="626"><highlight class="comment"><sp/>*<sp/>@retval<sp/>NRF_CLOCK_HFCLK_LOW_ACCURACY<sp/><sp/>The<sp/>internal<sp/>RC<sp/>oscillator<sp/>is<sp/>the<sp/>selected</highlight></codeline>
<codeline lineno="627"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>source<sp/>of<sp/>the<sp/>high-frequency<sp/>clock.</highlight></codeline>
<codeline lineno="628"><highlight class="comment"><sp/>*<sp/>@retval<sp/>NRF_CLOCK_HFCLK_HIGH_ACCURACY<sp/>An<sp/>external<sp/>crystal<sp/>oscillator<sp/>is<sp/>the<sp/>selected</highlight></codeline>
<codeline lineno="629"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>source<sp/>of<sp/>the<sp/>high-frequency<sp/>clock.</highlight></codeline>
<codeline lineno="630"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="631"><highlight class="normal">NRF_STATIC_INLINE<sp/><ref refid="group__nrf__clock__hal_1gac89aad0e037b7aeefc5264a4dca76197" kindref="member">nrf_clock_hfclk_t</ref><sp/><ref refid="group__nrf__clock__hal_1ga34024ba919471d72f9237c447175faca" kindref="member">nrf_clock_hf_src_get</ref>(NRF_CLOCK_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="632"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="633"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="634"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>retrieving<sp/>the<sp/>state<sp/>of<sp/>the<sp/>HFCLK<sp/>clock.</highlight></codeline>
<codeline lineno="635"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="636"><highlight class="comment"><sp/>*<sp/>@note<sp/>This<sp/>function<sp/>is<sp/>deprecated.<sp/>Use<sp/>@ref<sp/>nrf_clock_is_running<sp/>instead.</highlight></codeline>
<codeline lineno="637"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="638"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="639"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>clk_src<sp/>Clock<sp/>source<sp/>to<sp/>be<sp/>checked.</highlight></codeline>
<codeline lineno="640"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="641"><highlight class="comment"><sp/>*<sp/>@retval<sp/>false<sp/>The<sp/>HFCLK<sp/>clock<sp/>is<sp/>not<sp/>running.</highlight></codeline>
<codeline lineno="642"><highlight class="comment"><sp/>*<sp/>@retval<sp/>true<sp/><sp/>The<sp/>HFCLK<sp/>clock<sp/>is<sp/>running.</highlight></codeline>
<codeline lineno="643"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="644"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrf__clock__hal_1ga70445979a0eda29dcb76b4be0ef8e03b" kindref="member">nrf_clock_hf_is_running</ref>(NRF_CLOCK_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__clock__hal_1gac89aad0e037b7aeefc5264a4dca76197" kindref="member">nrf_clock_hfclk_t</ref><sp/><sp/><sp/><sp/><sp/><sp/>clk_src);</highlight></codeline>
<codeline lineno="646"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="647"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="648"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>retrieving<sp/>the<sp/>trigger<sp/>status<sp/>of<sp/>the<sp/>task<sp/>HFCLKSTART.</highlight></codeline>
<codeline lineno="649"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="650"><highlight class="comment"><sp/>*<sp/>@note<sp/>This<sp/>function<sp/>is<sp/>deprecated.<sp/>Use<sp/>@ref<sp/>nrf_clock_start_task_check<sp/>instead.</highlight></codeline>
<codeline lineno="651"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="652"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="653"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="654"><highlight class="comment"><sp/>*<sp/>@retval<sp/>NRF_CLOCK_START_TASK_NOT_TRIGGERED<sp/>The<sp/>task<sp/>HFCLKSTART<sp/>has<sp/>not<sp/>been<sp/>triggered.</highlight></codeline>
<codeline lineno="655"><highlight class="comment"><sp/>*<sp/>@retval<sp/>NRF_CLOCK_START_TASK_TRIGGERED<sp/><sp/><sp/><sp/><sp/>The<sp/>task<sp/>HFCLKSTART<sp/>has<sp/>been<sp/>triggered.</highlight></codeline>
<codeline lineno="656"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="657"><highlight class="normal">NRF_STATIC_INLINE</highlight></codeline>
<codeline lineno="658"><highlight class="normal"><ref refid="group__nrf__clock__hal_1ga0147a15524c768cc1f8aa8a1cd323f1e" kindref="member">nrf_clock_start_task_status_t</ref><sp/><ref refid="group__nrf__clock__hal_1ga32910f934744e72a7544b53be569dfd6" kindref="member">nrf_clock_hf_start_task_status_get</ref>(NRF_CLOCK_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="659"><highlight class="normal"></highlight></codeline>
<codeline lineno="660"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_CLOCK_HAS_HFCLKAUDIO</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="661"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="662"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>changing<sp/>the<sp/>Audio<sp/>clock<sp/>FREQ_VALUE.</highlight></codeline>
<codeline lineno="663"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="664"><highlight class="comment"><sp/>*<sp/>The<sp/>frequency<sp/>of<sp/>HFCLKAUDIO<sp/>ranges<sp/>from<sp/>10.666<sp/>MHz<sp/>to<sp/>13.333<sp/>MHz<sp/>in<sp/>40.7<sp/>Hz<sp/>steps.</highlight></codeline>
<codeline lineno="665"><highlight class="comment"><sp/>*<sp/>To<sp/>calculate<sp/>@p<sp/>freq_value<sp/>corresponding<sp/>to<sp/>the<sp/>chosen<sp/>frequency,<sp/>use<sp/>the<sp/>following<sp/>equation:</highlight></codeline>
<codeline lineno="666"><highlight class="comment"><sp/>*<sp/>FREQ_VALUE<sp/>=<sp/>2^16<sp/>*<sp/>((12<sp/>*<sp/>f_out<sp/>/<sp/>32M)<sp/>-<sp/>4)</highlight></codeline>
<codeline lineno="667"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="668"><highlight class="comment"><sp/>*<sp/>@warning<sp/>Chosen<sp/>frequency<sp/>must<sp/>fit<sp/>in<sp/>11.176<sp/>MHz<sp/>-<sp/>11.402<sp/>MHz<sp/>or<sp/>12.165<sp/>MHz<sp/>-<sp/>12.411<sp/>MHz<sp/>frequency<sp/>bands.</highlight></codeline>
<codeline lineno="669"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="670"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/><sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="671"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>freq_value<sp/>New<sp/>FREQ_VALUE</highlight></codeline>
<codeline lineno="672"><highlight class="comment"><sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="673"><highlight class="normal">NRF_STATIC_INLINE</highlight></codeline>
<codeline lineno="674"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__clock__hal_1gaf44598c429dfbfcc55d482e11bdf1d4b" kindref="member">nrf_clock_hfclkaudio_config_set</ref>(NRF_CLOCK_Type<sp/>*<sp/>p_reg,<sp/>uint16_t<sp/>freq_value);</highlight></codeline>
<codeline lineno="675"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="676"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="677"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>retrieving<sp/>the<sp/>Audio<sp/>clock<sp/>FREQ_VALUE.</highlight></codeline>
<codeline lineno="678"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="679"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="680"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="681"><highlight class="comment"><sp/>*<sp/>The<sp/>frequency<sp/>of<sp/>HFCLKAUDIO<sp/>ranges<sp/>from<sp/>10.666<sp/>MHz<sp/>to<sp/>13.333<sp/>MHz<sp/>in<sp/>40.7<sp/>Hz<sp/>steps.</highlight></codeline>
<codeline lineno="682"><highlight class="comment"><sp/>*<sp/>To<sp/>calculate<sp/>frequency<sp/>corresponding<sp/>to<sp/>the<sp/>returned<sp/>FREQ_VALUE,<sp/>use<sp/>the<sp/>following<sp/>equation:</highlight></codeline>
<codeline lineno="683"><highlight class="comment"><sp/>*<sp/>f_out<sp/>=<sp/>32M<sp/>*<sp/>(4<sp/>+<sp/>FREQ_VALUE<sp/>*<sp/>2^(-16))/12</highlight></codeline>
<codeline lineno="684"><highlight class="comment"></highlight></codeline>
<codeline lineno="685"><highlight class="comment"><sp/>*<sp/>@return<sp/>FREQ_VALUE<sp/>of<sp/>the<sp/>Audio<sp/>clock.</highlight></codeline>
<codeline lineno="686"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="687"><highlight class="normal">NRF_STATIC_INLINE</highlight></codeline>
<codeline lineno="688"><highlight class="normal">uint16_t<sp/><ref refid="group__nrf__clock__hal_1gaba822bac96cbd67e5f9f255af89a1f5e" kindref="member">nrf_clock_hfclkaudio_config_get</ref>(NRF_CLOCK_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="689"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="690"><highlight class="normal"></highlight></codeline>
<codeline lineno="691"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_CLOCK_HAS_CALIBRATION_TIMER</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="692"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="693"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>changing<sp/>the<sp/>calibration<sp/>timer<sp/>interval.</highlight></codeline>
<codeline lineno="694"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="695"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="696"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>interval<sp/>New<sp/>calibration<sp/>timer<sp/>interval<sp/>in<sp/>0.25<sp/>s<sp/>resolution</highlight></codeline>
<codeline lineno="697"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(range:<sp/>0.25<sp/>seconds<sp/>to<sp/>31.75<sp/>seconds).</highlight></codeline>
<codeline lineno="698"><highlight class="comment"><sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="699"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__clock__hal_1ga31257b566ba4812c296bbc4fa63f7886" kindref="member">nrf_clock_cal_timer_timeout_set</ref>(NRF_CLOCK_Type<sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>interval);</highlight></codeline>
<codeline lineno="700"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="701"><highlight class="normal"></highlight></codeline>
<codeline lineno="702"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(CLOCK_FEATURE_HFCLK_DIVIDE_PRESENT)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="703"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="704"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>changing<sp/>the<sp/>HFCLK<sp/>frequency<sp/>divider.</highlight></codeline>
<codeline lineno="705"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="706"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="707"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>divider<sp/>New<sp/>HFCLK<sp/>divider.</highlight></codeline>
<codeline lineno="708"><highlight class="comment"><sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="709"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>nrf_clock_hfclk_div_set(NRF_CLOCK_Type<sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__clock__hal_1ga4ae12749dff0c4975b250728d6de0ad6" kindref="member">nrf_clock_hfclk_div_t</ref><sp/>divider);</highlight></codeline>
<codeline lineno="711"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="712"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="713"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>retrieving<sp/>the<sp/>HFCLK<sp/>frequency<sp/>divider.</highlight></codeline>
<codeline lineno="714"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="715"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="716"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="717"><highlight class="comment"><sp/>*<sp/>@return<sp/>HFCLK<sp/>frequency<sp/>divider.</highlight></codeline>
<codeline lineno="718"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="719"><highlight class="normal">NRF_STATIC_INLINE<sp/><ref refid="group__nrf__clock__hal_1ga4ae12749dff0c4975b250728d6de0ad6" kindref="member">nrf_clock_hfclk_div_t</ref><sp/>nrf_clock_hfclk_div_get(NRF_CLOCK_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="720"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="721"><highlight class="normal"></highlight></codeline>
<codeline lineno="722"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_CLOCK_HAS_HFCLK192M</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="723"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="724"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>changing<sp/>the<sp/>HFCLK192M<sp/>frequency<sp/>divider.</highlight></codeline>
<codeline lineno="725"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="726"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="727"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>divider<sp/>New<sp/>HFCLK192M<sp/>divider.</highlight></codeline>
<codeline lineno="728"><highlight class="comment"><sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="729"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__clock__hal_1ga9307f09045353d04c29bf8ca29cc0c28" kindref="member">nrf_clock_hfclk192m_div_set</ref>(NRF_CLOCK_Type<sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__clock__hal_1ga4ae12749dff0c4975b250728d6de0ad6" kindref="member">nrf_clock_hfclk_div_t</ref><sp/>divider);</highlight></codeline>
<codeline lineno="731"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="732"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="733"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>retrieving<sp/>the<sp/>HFCLK192M<sp/>frequency<sp/>divider.</highlight></codeline>
<codeline lineno="734"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="735"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="736"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="737"><highlight class="comment"><sp/>*<sp/>@return<sp/>HFCLK192M<sp/>frequency<sp/>divider.</highlight></codeline>
<codeline lineno="738"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="739"><highlight class="normal">NRF_STATIC_INLINE<sp/><ref refid="group__nrf__clock__hal_1ga4ae12749dff0c4975b250728d6de0ad6" kindref="member">nrf_clock_hfclk_div_t</ref><sp/><ref refid="group__nrf__clock__hal_1ga53f5fd112e0c314b3b2fd677ad029246" kindref="member">nrf_clock_hfclk192m_div_get</ref>(NRF_CLOCK_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="740"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="741"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="742"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>changing<sp/>the<sp/>HFCLK192M<sp/>source.</highlight></codeline>
<codeline lineno="743"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="744"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="745"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>source<sp/>New<sp/>HFCLK192M<sp/>source.</highlight></codeline>
<codeline lineno="746"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="747"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__clock__hal_1ga84665d1956d9324a08402a91225fc15c" kindref="member">nrf_clock_hfclk192m_src_set</ref>(NRF_CLOCK_Type<sp/>*<sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__clock__hal_1gac89aad0e037b7aeefc5264a4dca76197" kindref="member">nrf_clock_hfclk_t</ref><sp/>source);</highlight></codeline>
<codeline lineno="749"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="750"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="751"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>retrieving<sp/>the<sp/>selected<sp/>source<sp/>of<sp/>the<sp/>HFCLK192M.</highlight></codeline>
<codeline lineno="752"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="753"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="754"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="755"><highlight class="comment"><sp/>*<sp/>@retval<sp/>NRF_CLOCK_HFCLK_LOW_ACCURACY<sp/><sp/>The<sp/>internal<sp/>RC<sp/>oscillator<sp/>is<sp/>the<sp/>selected</highlight></codeline>
<codeline lineno="756"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>source<sp/>of<sp/>the<sp/>HFCLK192M.</highlight></codeline>
<codeline lineno="757"><highlight class="comment"><sp/>*<sp/>@retval<sp/>NRF_CLOCK_HFCLK_HIGH_ACCURACY<sp/>An<sp/>external<sp/>crystal<sp/>oscillator<sp/>is<sp/>the<sp/>selected</highlight></codeline>
<codeline lineno="758"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>source<sp/>of<sp/>the<sp/>HFCLK192M.</highlight></codeline>
<codeline lineno="759"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="760"><highlight class="normal">NRF_STATIC_INLINE<sp/><ref refid="group__nrf__clock__hal_1gac89aad0e037b7aeefc5264a4dca76197" kindref="member">nrf_clock_hfclk_t</ref><sp/><ref refid="group__nrf__clock__hal_1ga4709388f27018bc447eb944ec7f15f2c" kindref="member">nrf_clock_hfclk192m_src_get</ref>(NRF_CLOCK_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="761"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRF_CLOCK_HAS_HFCLK192M</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="762"><highlight class="normal"></highlight></codeline>
<codeline lineno="763"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(NRF_CLOCK_HAS_LFCLK_ALWAYSRUN<sp/>||<sp/>NRF_CLOCK_HAS_HFCLK_ALWAYSRUN<sp/>||<sp/>NRF_CLOCK_HAS_HFCLK192M<sp/>||<sp/>\</highlight></codeline>
<codeline lineno="764"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>NRF_CLOCK_HAS_HFCLKAUDIO)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="765"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="766"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>the<sp/>clock<sp/>domain<sp/>to<sp/>always<sp/>run.</highlight></codeline>
<codeline lineno="767"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="768"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="769"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>domain<sp/><sp/><sp/><sp/>Clock<sp/>domain.</highlight></codeline>
<codeline lineno="770"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>alwaysrun<sp/>Ensure<sp/>the<sp/>clock<sp/>is<sp/>always<sp/>running.</highlight></codeline>
<codeline lineno="771"><highlight class="comment"><sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="772"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__clock__hal_1ga842e2ffb161363df7d4769ab67a317ba" kindref="member">nrf_clock_alwaysrun_set</ref>(NRF_CLOCK_Type<sp/>*<sp/><sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__clock__hal_1ga1739a9f32e7efbf83dc6e773b05211c1" kindref="member">nrf_clock_domain_t</ref><sp/>domain,</highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>alwaysrun);</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="775"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="776"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>checking<sp/>if<sp/>the<sp/>clock<sp/>domain<sp/>is<sp/>configured<sp/>to<sp/>always<sp/>run.</highlight></codeline>
<codeline lineno="777"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="778"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="779"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>domain<sp/>Clock<sp/>domain.</highlight></codeline>
<codeline lineno="780"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="781"><highlight class="comment"><sp/>*<sp/>@retval<sp/>true<sp/><sp/>The<sp/>clock<sp/>domain<sp/>is<sp/>configured<sp/>to<sp/>always<sp/>run.</highlight></codeline>
<codeline lineno="782"><highlight class="comment"><sp/>*<sp/>@retval<sp/>false<sp/>The<sp/>clock<sp/>domain<sp/>is<sp/>not<sp/>configured<sp/>to<sp/>always<sp/>run.</highlight></codeline>
<codeline lineno="783"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="784"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrf__clock__hal_1ga930ec730c515f7443c2eac61fe829cb1" kindref="member">nrf_clock_alwaysrun_get</ref>(NRF_CLOCK_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__clock__hal_1ga1739a9f32e7efbf83dc6e773b05211c1" kindref="member">nrf_clock_domain_t</ref><sp/><sp/><sp/><sp/><sp/>domain);</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="786"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="787"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>checking<sp/>if<sp/>the<sp/>clock<sp/>domain<sp/>always<sp/>run<sp/>setting<sp/>is<sp/>active.</highlight></codeline>
<codeline lineno="788"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="789"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="790"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>domain<sp/>Clock<sp/>domain.</highlight></codeline>
<codeline lineno="791"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="792"><highlight class="comment"><sp/>*<sp/>@retval<sp/>true<sp/><sp/>The<sp/>clock<sp/>domain<sp/>always<sp/>run<sp/>setting<sp/>is<sp/>active.</highlight></codeline>
<codeline lineno="793"><highlight class="comment"><sp/>*<sp/>@retval<sp/>false<sp/>The<sp/>clock<sp/>domain<sp/>always<sp/>run<sp/>setting<sp/>is<sp/>not<sp/>active.</highlight></codeline>
<codeline lineno="794"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="795"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrf__clock__hal_1gad64c2d8e17a381a70ff1c867a3763da2" kindref="member">nrf_clock_alwaysrun_active_get</ref>(NRF_CLOCK_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__clock__hal_1ga1739a9f32e7efbf83dc6e773b05211c1" kindref="member">nrf_clock_domain_t</ref><sp/><sp/><sp/><sp/><sp/>domain);</highlight></codeline>
<codeline lineno="797"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>(NRF_CLOCK_HAS_LFCLK_ALWAYSRUN<sp/>||<sp/>NRF_CLOCK_HAS_HFCLK_ALWAYSRUN<sp/>||</highlight></codeline>
<codeline lineno="798"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NRF_CLOCK_HAS_HFCLK192M<sp/>||<sp/>NRF_CLOCK_HAS_HFCLKAUDIO)<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="799"><highlight class="normal"></highlight></codeline>
<codeline lineno="800"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(DPPI_PRESENT)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="801"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="802"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>the<sp/>subscribe<sp/>configuration<sp/>for<sp/>a<sp/>given</highlight></codeline>
<codeline lineno="803"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CLOCK<sp/>task.</highlight></codeline>
<codeline lineno="804"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="805"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="806"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>task<sp/><sp/><sp/><sp/>Task<sp/>for<sp/>which<sp/>to<sp/>set<sp/>the<sp/>configuration.</highlight></codeline>
<codeline lineno="807"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>channel<sp/>Channel<sp/>through<sp/>which<sp/>to<sp/>subscribe<sp/>events.</highlight></codeline>
<codeline lineno="808"><highlight class="comment"><sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="809"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__clock__hal_1gad555b0e6d610054730a7beac749ba5c0" kindref="member">nrf_clock_subscribe_set</ref>(NRF_CLOCK_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__clock__hal_1ga6bf1711bc8cb7614c8ae806155bd3f33" kindref="member">nrf_clock_task_t</ref><sp/>task,</highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>channel);</highlight></codeline>
<codeline lineno="812"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="813"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="814"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>clearing<sp/>the<sp/>subscribe<sp/>configuration<sp/>for<sp/>a<sp/>given</highlight></codeline>
<codeline lineno="815"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CLOCK<sp/>task.</highlight></codeline>
<codeline lineno="816"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="817"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="818"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>task<sp/><sp/>Task<sp/>for<sp/>which<sp/>to<sp/>clear<sp/>the<sp/>configuration.</highlight></codeline>
<codeline lineno="819"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="820"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__clock__hal_1gaed03227123a60ea7c8bc4ed832adf6f3" kindref="member">nrf_clock_subscribe_clear</ref>(NRF_CLOCK_Type<sp/>*<sp/>p_reg,<sp/><ref refid="group__nrf__clock__hal_1ga6bf1711bc8cb7614c8ae806155bd3f33" kindref="member">nrf_clock_task_t</ref><sp/>task);</highlight></codeline>
<codeline lineno="821"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="822"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="823"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>the<sp/>publish<sp/>configuration<sp/>for<sp/>a<sp/>given</highlight></codeline>
<codeline lineno="824"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CLOCK<sp/>event.</highlight></codeline>
<codeline lineno="825"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="826"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="827"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>event<sp/><sp/><sp/>Event<sp/>for<sp/>which<sp/>to<sp/>set<sp/>the<sp/>configuration.</highlight></codeline>
<codeline lineno="828"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>channel<sp/>Channel<sp/>through<sp/>which<sp/>to<sp/>publish<sp/>the<sp/>event.</highlight></codeline>
<codeline lineno="829"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="830"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__clock__hal_1gad0b543bcc840e79ffd5a93035f938910" kindref="member">nrf_clock_publish_set</ref>(NRF_CLOCK_Type<sp/>*<sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__clock__hal_1ga8843dd5805c2b01f9b832ed73d583695" kindref="member">nrf_clock_event_t</ref><sp/>event,</highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>channel);</highlight></codeline>
<codeline lineno="833"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="834"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="835"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>clearing<sp/>the<sp/>publish<sp/>configuration<sp/>for<sp/>a<sp/>given</highlight></codeline>
<codeline lineno="836"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CLOCK<sp/>event.</highlight></codeline>
<codeline lineno="837"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="838"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="839"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>event<sp/>Event<sp/>for<sp/>which<sp/>to<sp/>clear<sp/>the<sp/>configuration.</highlight></codeline>
<codeline lineno="840"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="841"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__clock__hal_1ga136d09d2b0eafa0118c76cb977c6f743" kindref="member">nrf_clock_publish_clear</ref>(NRF_CLOCK_Type<sp/>*<sp/>p_reg,<sp/><ref refid="group__nrf__clock__hal_1ga8843dd5805c2b01f9b832ed73d583695" kindref="member">nrf_clock_event_t</ref><sp/>event);</highlight></codeline>
<codeline lineno="842"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>defined(DPPI_PRESENT)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="843"><highlight class="normal"></highlight></codeline>
<codeline lineno="844"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>NRF_DECLARE_ONLY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="845"><highlight class="normal"></highlight></codeline>
<codeline lineno="846"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__clock__hal_1gae1a1fecb47d6d05b9b938d5c74314f86" kindref="member">nrf_clock_int_enable</ref>(NRF_CLOCK_Type<sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>mask)</highlight></codeline>
<codeline lineno="847"><highlight class="normal">{</highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;INTENSET<sp/>=<sp/>mask;</highlight></codeline>
<codeline lineno="849"><highlight class="normal">}</highlight></codeline>
<codeline lineno="850"><highlight class="normal"></highlight></codeline>
<codeline lineno="851"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__clock__hal_1gadded9b778880ab73d01775cc0ab4ab77" kindref="member">nrf_clock_int_disable</ref>(NRF_CLOCK_Type<sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>mask)</highlight></codeline>
<codeline lineno="852"><highlight class="normal">{</highlight></codeline>
<codeline lineno="853"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;INTENCLR<sp/>=<sp/>mask;</highlight></codeline>
<codeline lineno="854"><highlight class="normal">}</highlight></codeline>
<codeline lineno="855"><highlight class="normal"></highlight></codeline>
<codeline lineno="856"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__clock__hal_1ga3cfc1dfe6d92419878efa3d92203d1f3" kindref="member">nrf_clock_int_enable_check</ref>(NRF_CLOCK_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>mask)</highlight></codeline>
<codeline lineno="857"><highlight class="normal">{</highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p_reg-&gt;INTENSET<sp/>&amp;<sp/>mask;</highlight></codeline>
<codeline lineno="859"><highlight class="normal">}</highlight></codeline>
<codeline lineno="860"><highlight class="normal"></highlight></codeline>
<codeline lineno="861"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__clock__hal_1gab667ae60ddf82e1e8bd4ffced897af0c" kindref="member">nrf_clock_task_address_get</ref>(NRF_CLOCK_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="862"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__clock__hal_1ga6bf1711bc8cb7614c8ae806155bd3f33" kindref="member">nrf_clock_task_t</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>task)</highlight></codeline>
<codeline lineno="863"><highlight class="normal">{</highlight></codeline>
<codeline lineno="864"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>nrf_task_event_address_get(p_reg,<sp/>task);</highlight></codeline>
<codeline lineno="865"><highlight class="normal">}</highlight></codeline>
<codeline lineno="866"><highlight class="normal"></highlight></codeline>
<codeline lineno="867"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__clock__hal_1gaf3e684a3ac2f5e050185d2fa654de394" kindref="member">nrf_clock_task_trigger</ref>(NRF_CLOCK_Type<sp/>*<sp/>p_reg,<sp/><ref refid="group__nrf__clock__hal_1ga6bf1711bc8cb7614c8ae806155bd3f33" kindref="member">nrf_clock_task_t</ref><sp/>task)</highlight></codeline>
<codeline lineno="868"><highlight class="normal">{</highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/><sp/><sp/><sp/>*((</highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint32_t<sp/>*)((uint8_t<sp/>*)p_reg<sp/>+<sp/>(uint32_t)task))<sp/>=<sp/>0x1UL;</highlight></codeline>
<codeline lineno="870"><highlight class="normal">}</highlight></codeline>
<codeline lineno="871"><highlight class="normal"></highlight></codeline>
<codeline lineno="872"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__clock__hal_1gab6633ed4e3965b482f4bcf82084ced89" kindref="member">nrf_clock_event_address_get</ref>(NRF_CLOCK_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="873"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__clock__hal_1ga8843dd5805c2b01f9b832ed73d583695" kindref="member">nrf_clock_event_t</ref><sp/><sp/><sp/><sp/><sp/><sp/>event)</highlight></codeline>
<codeline lineno="874"><highlight class="normal">{</highlight></codeline>
<codeline lineno="875"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>nrf_task_event_address_get(p_reg,<sp/>event);</highlight></codeline>
<codeline lineno="876"><highlight class="normal">}</highlight></codeline>
<codeline lineno="877"><highlight class="normal"></highlight></codeline>
<codeline lineno="878"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__clock__hal_1ga1f7973a6180d8bf7ab6e93b9f6d3ff7c" kindref="member">nrf_clock_event_clear</ref>(NRF_CLOCK_Type<sp/>*<sp/>p_reg,<sp/><ref refid="group__nrf__clock__hal_1ga8843dd5805c2b01f9b832ed73d583695" kindref="member">nrf_clock_event_t</ref><sp/>event)</highlight></codeline>
<codeline lineno="879"><highlight class="normal">{</highlight></codeline>
<codeline lineno="880"><highlight class="normal"><sp/><sp/><sp/><sp/>*((</highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint32_t<sp/>*)((uint8_t<sp/>*)p_reg<sp/>+<sp/>(uint32_t)event))<sp/>=<sp/>0x0UL;</highlight></codeline>
<codeline lineno="881"><highlight class="normal"><sp/><sp/><sp/><sp/>nrf_event_readback((uint8_t<sp/>*)p_reg<sp/>+<sp/>(uint32_t)event);</highlight></codeline>
<codeline lineno="882"><highlight class="normal">}</highlight></codeline>
<codeline lineno="883"><highlight class="normal"></highlight></codeline>
<codeline lineno="884"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrf__clock__hal_1ga8ecb4611627133df496528e764455198" kindref="member">nrf_clock_event_check</ref>(NRF_CLOCK_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,<sp/><ref refid="group__nrf__clock__hal_1ga8843dd5805c2b01f9b832ed73d583695" kindref="member">nrf_clock_event_t</ref><sp/>event)</highlight></codeline>
<codeline lineno="885"><highlight class="normal">{</highlight></codeline>
<codeline lineno="886"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>nrf_event_check(p_reg,<sp/>event);</highlight></codeline>
<codeline lineno="887"><highlight class="normal">}</highlight></codeline>
<codeline lineno="888"><highlight class="normal"></highlight></codeline>
<codeline lineno="889"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrf__clock__hal_1gabed84813929d82ba6c6c647c3d6bf158" kindref="member">nrf_clock_start_task_check</ref>(NRF_CLOCK_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="890"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__clock__hal_1ga1739a9f32e7efbf83dc6e773b05211c1" kindref="member">nrf_clock_domain_t</ref><sp/><sp/><sp/><sp/><sp/>domain)</highlight></codeline>
<codeline lineno="891"><highlight class="normal">{</highlight></codeline>
<codeline lineno="892"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(domain)</highlight></codeline>
<codeline lineno="893"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="894"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>NRF_CLOCK_DOMAIN_LFCLK:</highlight></codeline>
<codeline lineno="895"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((p_reg-&gt;NRF_LFCLKRUN<sp/>&amp;<sp/><ref refid="group__nrf__clock__hal_1gadb033159a59d2a159e520afa62169298" kindref="member">NRF_CLOCK_LFCLKRUN_STATUS_Msk</ref>)</highlight></codeline>
<codeline lineno="896"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;<sp/><ref refid="group__nrf__clock__hal_1gaf0956809045fc8b9ca93e772e414b3d9" kindref="member">NRF_CLOCK_LFCLKRUN_STATUS_Pos</ref>);</highlight></codeline>
<codeline lineno="897"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>NRF_CLOCK_DOMAIN_HFCLK:</highlight></codeline>
<codeline lineno="898"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((p_reg-&gt;NRF_HFCLKRUN<sp/>&amp;<sp/><ref refid="group__nrf__clock__hal_1ga9a8f01a63f230b3a330e8ce140f7a187" kindref="member">NRF_CLOCK_HFCLKRUN_STATUS_Msk</ref>)</highlight></codeline>
<codeline lineno="899"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;<sp/><ref refid="group__nrf__clock__hal_1ga972f816a3a1b384ae4a4453ca80bb1fe" kindref="member">NRF_CLOCK_HFCLKRUN_STATUS_Pos</ref>);</highlight></codeline>
<codeline lineno="900"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_CLOCK_HAS_HFCLK192M</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="901"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>NRF_CLOCK_DOMAIN_HFCLK192M:</highlight></codeline>
<codeline lineno="902"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((p_reg-&gt;HFCLK192MRUN<sp/>&amp;<sp/>CLOCK_HFCLK192MRUN_STATUS_Msk)</highlight></codeline>
<codeline lineno="903"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;<sp/>CLOCK_HFCLK192MRUN_STATUS_Pos);</highlight></codeline>
<codeline lineno="904"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="905"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_CLOCK_HAS_HFCLKAUDIO</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="906"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>NRF_CLOCK_DOMAIN_HFCLKAUDIO:</highlight></codeline>
<codeline lineno="907"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((p_reg-&gt;HFCLKAUDIORUN<sp/>&amp;<sp/>CLOCK_HFCLKAUDIORUN_STATUS_Msk)</highlight></codeline>
<codeline lineno="908"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;<sp/>CLOCK_HFCLKAUDIORUN_STATUS_Pos);</highlight></codeline>
<codeline lineno="909"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="910"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="911"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrfx__glue_1ga9698a3f6b6bea455d2b54a79e514ee36" kindref="member">NRFX_ASSERT</ref>(0);</highlight></codeline>
<codeline lineno="912"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="913"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="914"><highlight class="normal">}</highlight></codeline>
<codeline lineno="915"><highlight class="normal"></highlight></codeline>
<codeline lineno="916"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="917"><highlight class="comment"><sp/>*<sp/>`-Warray-bounds`<sp/>warning<sp/>is<sp/>disabled<sp/>for<sp/>the<sp/>`nrf_clock_is_running`</highlight></codeline>
<codeline lineno="918"><highlight class="comment"><sp/>*<sp/>function<sp/>because<sp/>GCC<sp/>12<sp/>and<sp/>above<sp/>may<sp/>report<sp/>a<sp/>false<sp/>positive<sp/>due<sp/>to<sp/>the</highlight></codeline>
<codeline lineno="919"><highlight class="comment"><sp/>*<sp/>size<sp/>of<sp/>the<sp/>write<sp/>access<sp/>to<sp/>the<sp/>memory<sp/>address<sp/>pointed<sp/>by<sp/>the<sp/>`p_clk_src`</highlight></codeline>
<codeline lineno="920"><highlight class="comment"><sp/>*<sp/>argument<sp/>being<sp/>variable<sp/>depending<sp/>on<sp/>the<sp/>value<sp/>of<sp/>the<sp/>`domain`<sp/>argument.</highlight></codeline>
<codeline lineno="921"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="922"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__GNUC__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="923"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>GCC<sp/>diagnostic<sp/>push</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="924"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>GCC<sp/>diagnostic<sp/>ignored<sp/>&quot;-Warray-bounds&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="925"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="926"><highlight class="normal"></highlight></codeline>
<codeline lineno="927"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrf__clock__hal_1gacdce7b3bd39e2466a100f16b41ac72d1" kindref="member">nrf_clock_is_running</ref>(NRF_CLOCK_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="928"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__clock__hal_1ga1739a9f32e7efbf83dc6e773b05211c1" kindref="member">nrf_clock_domain_t</ref><sp/><sp/><sp/><sp/><sp/>domain,</highlight></codeline>
<codeline lineno="929"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_clk_src)</highlight></codeline>
<codeline lineno="930"><highlight class="normal">{</highlight></codeline>
<codeline lineno="931"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>clock_running;</highlight></codeline>
<codeline lineno="932"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(domain)</highlight></codeline>
<codeline lineno="933"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="934"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>NRF_CLOCK_DOMAIN_LFCLK:</highlight></codeline>
<codeline lineno="935"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>clock_running<sp/>=<sp/>p_reg-&gt;NRF_LFCLKSTAT<sp/>&amp;<sp/><ref refid="group__nrf__clock__hal_1ga5484cddb1dfe1ed4d3982ad1307c0cbb" kindref="member">NRF_CLOCK_LFCLKSTAT_STATE_Msk</ref>;</highlight></codeline>
<codeline lineno="936"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p_clk_src<sp/>!=<sp/>NULL)</highlight></codeline>
<codeline lineno="937"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="938"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*(<ref refid="group__nrf__clock__hal_1ga5b00bcdc07defd8187f2be8a2ec7a597" kindref="member">nrf_clock_lfclk_t</ref><sp/>*)p_clk_src)<sp/>=</highlight></codeline>
<codeline lineno="939"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<ref refid="group__nrf__clock__hal_1ga5b00bcdc07defd8187f2be8a2ec7a597" kindref="member">nrf_clock_lfclk_t</ref>)((p_reg-&gt;NRF_LFCLKSTAT<sp/>&amp;<sp/><ref refid="group__nrf__clock__hal_1gabdde88064b5d20e53721f151ba8c8f48" kindref="member">NRF_CLOCK_LFCLKSTAT_SRC_Msk</ref>)</highlight></codeline>
<codeline lineno="940"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;<sp/><ref refid="group__nrf__clock__hal_1ga60e48ade4d634efe42a552122e76eeea" kindref="member">NRF_CLOCK_LFCLKSTAT_SRC_Pos</ref>);</highlight></codeline>
<codeline lineno="941"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="942"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="943"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>NRF_CLOCK_DOMAIN_HFCLK:</highlight></codeline>
<codeline lineno="944"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>clock_running<sp/>=<sp/>p_reg-&gt;NRF_HFCLKSTAT<sp/>&amp;<sp/><ref refid="group__nrf__clock__hal_1ga0054b72186e455d70e8ce2164b1eb951" kindref="member">NRF_CLOCK_HFCLKSTAT_STATE_Msk</ref>;</highlight></codeline>
<codeline lineno="945"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p_clk_src<sp/>!=<sp/>NULL)</highlight></codeline>
<codeline lineno="946"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="947"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_CLOCK_HAS_XO</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="948"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>XO<sp/>registers<sp/>do<sp/>not<sp/>contain<sp/>information<sp/>about<sp/>low<sp/>accuracy<sp/>source<sp/>being<sp/>active.</highlight></codeline>
<codeline lineno="949"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>It<sp/>has<sp/>to<sp/>be<sp/>derived<sp/>from<sp/>HFCLK<sp/>state.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="950"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*(<ref refid="group__nrf__clock__hal_1gac89aad0e037b7aeefc5264a4dca76197" kindref="member">nrf_clock_hfclk_t</ref><sp/>*)p_clk_src)<sp/>=<sp/>clock_running<sp/>?<sp/><ref refid="group__nrf__clock__hal_1ggac89aad0e037b7aeefc5264a4dca76197acd16ac7a514b4ce5fad5229330d3ee91" kindref="member">NRF_CLOCK_HFCLK_HIGH_ACCURACY</ref><sp/>:</highlight></codeline>
<codeline lineno="951"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__clock__hal_1ggac89aad0e037b7aeefc5264a4dca76197ac818a771af1b52744004d50920fd584d" kindref="member">NRF_CLOCK_HFCLK_LOW_ACCURACY</ref>;</highlight></codeline>
<codeline lineno="952"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="953"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*(<ref refid="group__nrf__clock__hal_1gac89aad0e037b7aeefc5264a4dca76197" kindref="member">nrf_clock_hfclk_t</ref><sp/>*)p_clk_src)<sp/>=</highlight></codeline>
<codeline lineno="954"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<ref refid="group__nrf__clock__hal_1gac89aad0e037b7aeefc5264a4dca76197" kindref="member">nrf_clock_hfclk_t</ref>)((p_reg-&gt;NRF_HFCLKSTAT<sp/>&amp;<sp/>CLOCK_HFCLKSTAT_SRC_Msk)</highlight></codeline>
<codeline lineno="955"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;<sp/>CLOCK_HFCLKSTAT_SRC_Pos);</highlight></codeline>
<codeline lineno="956"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="957"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="958"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="959"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_CLOCK_HAS_HFCLK192M</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="960"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>NRF_CLOCK_DOMAIN_HFCLK192M:</highlight></codeline>
<codeline lineno="961"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>clock_running<sp/>=<sp/>p_reg-&gt;HFCLK192MSTAT<sp/>&amp;<sp/>CLOCK_HFCLK192MSTAT_STATE_Msk;</highlight></codeline>
<codeline lineno="962"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p_clk_src<sp/>!=<sp/>NULL)</highlight></codeline>
<codeline lineno="963"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="964"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*(<ref refid="group__nrf__clock__hal_1gac89aad0e037b7aeefc5264a4dca76197" kindref="member">nrf_clock_hfclk_t</ref><sp/>*)p_clk_src)<sp/>=</highlight></codeline>
<codeline lineno="965"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<ref refid="group__nrf__clock__hal_1gac89aad0e037b7aeefc5264a4dca76197" kindref="member">nrf_clock_hfclk_t</ref>)((p_reg-&gt;HFCLK192MSTAT<sp/>&amp;<sp/>CLOCK_HFCLK192MSTAT_SRC_Msk)</highlight></codeline>
<codeline lineno="966"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;<sp/>CLOCK_HFCLK192MSTAT_SRC_Pos);</highlight></codeline>
<codeline lineno="967"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="968"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="969"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="970"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_CLOCK_HAS_HFCLKAUDIO</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="971"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>NRF_CLOCK_DOMAIN_HFCLKAUDIO:</highlight></codeline>
<codeline lineno="972"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>clock_running<sp/>=<sp/>p_reg-&gt;HFCLKAUDIOSTAT<sp/>&amp;<sp/>CLOCK_HFCLKAUDIOSTAT_STATE_Msk;</highlight></codeline>
<codeline lineno="973"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="974"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="975"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="976"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrfx__glue_1ga9698a3f6b6bea455d2b54a79e514ee36" kindref="member">NRFX_ASSERT</ref>(0);</highlight></codeline>
<codeline lineno="977"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="978"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="979"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>clock_running;</highlight></codeline>
<codeline lineno="980"><highlight class="normal">}</highlight></codeline>
<codeline lineno="981"><highlight class="normal"></highlight></codeline>
<codeline lineno="982"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__GNUC__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="983"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>GCC<sp/>diagnostic<sp/>pop</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="984"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="985"><highlight class="normal"></highlight></codeline>
<codeline lineno="986"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__clock__hal_1ga24c29888cb9c057a3f01457bf3ceb246" kindref="member">nrf_clock_lf_src_set</ref>(NRF_CLOCK_Type<sp/>*<sp/>p_reg,<sp/><ref refid="group__nrf__clock__hal_1ga5b00bcdc07defd8187f2be8a2ec7a597" kindref="member">nrf_clock_lfclk_t</ref><sp/>source)</highlight></codeline>
<codeline lineno="987"><highlight class="normal">{</highlight></codeline>
<codeline lineno="988"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;NRF_LFCLKSRC<sp/>=<sp/>(uint32_t)(source);</highlight></codeline>
<codeline lineno="989"><highlight class="normal">}</highlight></codeline>
<codeline lineno="990"><highlight class="normal"></highlight></codeline>
<codeline lineno="991"><highlight class="normal">NRF_STATIC_INLINE<sp/><ref refid="group__nrf__clock__hal_1ga5b00bcdc07defd8187f2be8a2ec7a597" kindref="member">nrf_clock_lfclk_t</ref><sp/><ref refid="group__nrf__clock__hal_1ga91f9e95a8a8717d0d76cd12c70cdd1c9" kindref="member">nrf_clock_lf_src_get</ref>(NRF_CLOCK_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="992"><highlight class="normal">{</highlight></codeline>
<codeline lineno="993"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="group__nrf__clock__hal_1ga5b00bcdc07defd8187f2be8a2ec7a597" kindref="member">nrf_clock_lfclk_t</ref>)(p_reg-&gt;NRF_LFCLKSRC);</highlight></codeline>
<codeline lineno="994"><highlight class="normal">}</highlight></codeline>
<codeline lineno="995"><highlight class="normal"></highlight></codeline>
<codeline lineno="996"><highlight class="normal">NRF_STATIC_INLINE<sp/><ref refid="group__nrf__clock__hal_1ga5b00bcdc07defd8187f2be8a2ec7a597" kindref="member">nrf_clock_lfclk_t</ref><sp/><ref refid="group__nrf__clock__hal_1ga738da128e4aefd63a596c86395a3abb4" kindref="member">nrf_clock_lf_actv_src_get</ref>(NRF_CLOCK_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="997"><highlight class="normal">{</highlight></codeline>
<codeline lineno="998"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__clock__hal_1ga5b00bcdc07defd8187f2be8a2ec7a597" kindref="member">nrf_clock_lfclk_t</ref><sp/>clk_src;</highlight></codeline>
<codeline lineno="999"><highlight class="normal"><sp/><sp/><sp/><sp/>(void)<ref refid="group__nrf__clock__hal_1gacdce7b3bd39e2466a100f16b41ac72d1" kindref="member">nrf_clock_is_running</ref>(p_reg,<sp/>NRF_CLOCK_DOMAIN_LFCLK,<sp/>&amp;clk_src);</highlight></codeline>
<codeline lineno="1000"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>clk_src;</highlight></codeline>
<codeline lineno="1001"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1002"><highlight class="normal"></highlight></codeline>
<codeline lineno="1003"><highlight class="normal">NRF_STATIC_INLINE<sp/><ref refid="group__nrf__clock__hal_1ga5b00bcdc07defd8187f2be8a2ec7a597" kindref="member">nrf_clock_lfclk_t</ref><sp/><ref refid="group__nrf__clock__hal_1gad69ff6c345172118cc4afb226048af3a" kindref="member">nrf_clock_lf_srccopy_get</ref>(NRF_CLOCK_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="1004"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1005"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="group__nrf__clock__hal_1ga5b00bcdc07defd8187f2be8a2ec7a597" kindref="member">nrf_clock_lfclk_t</ref>)((p_reg-&gt;NRF_LFCLKSRCCOPY<sp/>&amp;<sp/><ref refid="group__nrf__clock__hal_1gaf09c25badcc39b2c874044dea30e9d35" kindref="member">NRF_CLOCK_LFCLKSRCCOPY_SRC_Msk</ref>)</highlight></codeline>
<codeline lineno="1006"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;<sp/><ref refid="group__nrf__clock__hal_1gacdf20044a3e28b286cdc47d455cf3291" kindref="member">NRF_CLOCK_LFCLKSRCCOPY_SRC_Pos</ref>);</highlight></codeline>
<codeline lineno="1007"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1008"><highlight class="normal"></highlight></codeline>
<codeline lineno="1009"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrf__clock__hal_1gab68648e381ee3e2f5a1c77b051ae19c0" kindref="member">nrf_clock_lf_is_running</ref>(NRF_CLOCK_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="1010"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1011"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__nrf__clock__hal_1gacdce7b3bd39e2466a100f16b41ac72d1" kindref="member">nrf_clock_is_running</ref>(p_reg,<sp/>NRF_CLOCK_DOMAIN_LFCLK,<sp/>NULL);</highlight></codeline>
<codeline lineno="1012"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1013"><highlight class="normal"></highlight></codeline>
<codeline lineno="1014"><highlight class="normal">NRF_STATIC_INLINE</highlight></codeline>
<codeline lineno="1015"><highlight class="normal"><ref refid="group__nrf__clock__hal_1ga0147a15524c768cc1f8aa8a1cd323f1e" kindref="member">nrf_clock_start_task_status_t</ref><sp/><ref refid="group__nrf__clock__hal_1ga5e3fc67f9a0e1e612d748a1a9b7b4184" kindref="member">nrf_clock_lf_start_task_status_get</ref>(NRF_CLOCK_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="1016"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1017"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="group__nrf__clock__hal_1ga0147a15524c768cc1f8aa8a1cd323f1e" kindref="member">nrf_clock_start_task_status_t</ref>)<ref refid="group__nrf__clock__hal_1gabed84813929d82ba6c6c647c3d6bf158" kindref="member">nrf_clock_start_task_check</ref>(p_reg,</highlight></codeline>
<codeline lineno="1018"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NRF_CLOCK_DOMAIN_LFCLK);</highlight></codeline>
<codeline lineno="1019"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1020"><highlight class="normal"></highlight></codeline>
<codeline lineno="1021"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_CLOCK_HAS_HFCLKSRC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1022"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__clock__hal_1gab7cab3a3c552786d73ff99c011ddc312" kindref="member">nrf_clock_hf_src_set</ref>(NRF_CLOCK_Type<sp/>*<sp/>p_reg,<sp/><ref refid="group__nrf__clock__hal_1gac89aad0e037b7aeefc5264a4dca76197" kindref="member">nrf_clock_hfclk_t</ref><sp/>source)</highlight></codeline>
<codeline lineno="1023"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1024"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;HFCLKSRC<sp/>=<sp/>(uint32_t)(source);</highlight></codeline>
<codeline lineno="1025"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1026"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1027"><highlight class="normal"></highlight></codeline>
<codeline lineno="1028"><highlight class="normal">NRF_STATIC_INLINE<sp/><ref refid="group__nrf__clock__hal_1gac89aad0e037b7aeefc5264a4dca76197" kindref="member">nrf_clock_hfclk_t</ref><sp/><ref refid="group__nrf__clock__hal_1ga34024ba919471d72f9237c447175faca" kindref="member">nrf_clock_hf_src_get</ref>(NRF_CLOCK_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="1029"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1030"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_CLOCK_HAS_HFCLKSRC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1031"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="group__nrf__clock__hal_1gac89aad0e037b7aeefc5264a4dca76197" kindref="member">nrf_clock_hfclk_t</ref>)(p_reg-&gt;HFCLKSRC);</highlight></codeline>
<codeline lineno="1032"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>NRF_CLOCK_HAS_XO</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1033"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>XO<sp/>registers<sp/>do<sp/>not<sp/>contain<sp/>information<sp/>about<sp/>low<sp/>accuracy<sp/>source<sp/>being<sp/>active.</highlight></codeline>
<codeline lineno="1034"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>It<sp/>has<sp/>to<sp/>be<sp/>derived<sp/>from<sp/>HFCLK<sp/>state.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1035"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(p_reg-&gt;NRF_HFCLKSTAT<sp/>&amp;<sp/><ref refid="group__nrf__clock__hal_1ga0054b72186e455d70e8ce2164b1eb951" kindref="member">NRF_CLOCK_HFCLKSTAT_STATE_Msk</ref>)<sp/>?<sp/><ref refid="group__nrf__clock__hal_1ggac89aad0e037b7aeefc5264a4dca76197acd16ac7a514b4ce5fad5229330d3ee91" kindref="member">NRF_CLOCK_HFCLK_HIGH_ACCURACY</ref><sp/>:</highlight></codeline>
<codeline lineno="1036"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__clock__hal_1ggac89aad0e037b7aeefc5264a4dca76197ac818a771af1b52744004d50920fd584d" kindref="member">NRF_CLOCK_HFCLK_LOW_ACCURACY</ref>;</highlight></codeline>
<codeline lineno="1037"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1038"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="group__nrf__clock__hal_1gac89aad0e037b7aeefc5264a4dca76197" kindref="member">nrf_clock_hfclk_t</ref>)((p_reg-&gt;HFCLKSTAT<sp/>&amp;<sp/>CLOCK_HFCLKSTAT_SRC_Msk)</highlight></codeline>
<codeline lineno="1039"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;<sp/>CLOCK_HFCLKSTAT_SRC_Pos);</highlight></codeline>
<codeline lineno="1040"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1041"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1042"><highlight class="normal"></highlight></codeline>
<codeline lineno="1043"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrf__clock__hal_1ga70445979a0eda29dcb76b4be0ef8e03b" kindref="member">nrf_clock_hf_is_running</ref>(NRF_CLOCK_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="1044"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__clock__hal_1gac89aad0e037b7aeefc5264a4dca76197" kindref="member">nrf_clock_hfclk_t</ref><sp/><sp/><sp/><sp/><sp/><sp/>clk_src)</highlight></codeline>
<codeline lineno="1045"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1046"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__clock__hal_1gac89aad0e037b7aeefc5264a4dca76197" kindref="member">nrf_clock_hfclk_t</ref><sp/>active_clk_src;</highlight></codeline>
<codeline lineno="1047"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ret<sp/>=<sp/><ref refid="group__nrf__clock__hal_1gacdce7b3bd39e2466a100f16b41ac72d1" kindref="member">nrf_clock_is_running</ref>(p_reg,<sp/>NRF_CLOCK_DOMAIN_HFCLK,<sp/>&amp;active_clk_src);</highlight></codeline>
<codeline lineno="1048"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(ret<sp/>&amp;&amp;<sp/>(active_clk_src<sp/>==<sp/>clk_src));</highlight></codeline>
<codeline lineno="1049"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1050"><highlight class="normal"></highlight></codeline>
<codeline lineno="1051"><highlight class="normal">NRF_STATIC_INLINE</highlight></codeline>
<codeline lineno="1052"><highlight class="normal"><ref refid="group__nrf__clock__hal_1ga0147a15524c768cc1f8aa8a1cd323f1e" kindref="member">nrf_clock_start_task_status_t</ref><sp/><ref refid="group__nrf__clock__hal_1ga32910f934744e72a7544b53be569dfd6" kindref="member">nrf_clock_hf_start_task_status_get</ref>(NRF_CLOCK_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="1053"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1054"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="group__nrf__clock__hal_1ga0147a15524c768cc1f8aa8a1cd323f1e" kindref="member">nrf_clock_start_task_status_t</ref>)<ref refid="group__nrf__clock__hal_1gabed84813929d82ba6c6c647c3d6bf158" kindref="member">nrf_clock_start_task_check</ref>(p_reg,</highlight></codeline>
<codeline lineno="1055"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NRF_CLOCK_DOMAIN_HFCLK);</highlight></codeline>
<codeline lineno="1056"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1057"><highlight class="normal"></highlight></codeline>
<codeline lineno="1058"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_CLOCK_HAS_HFCLKAUDIO</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1059"><highlight class="normal">NRF_STATIC_INLINE</highlight></codeline>
<codeline lineno="1060"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__clock__hal_1gaf44598c429dfbfcc55d482e11bdf1d4b" kindref="member">nrf_clock_hfclkaudio_config_set</ref>(NRF_CLOCK_Type<sp/>*<sp/>p_reg,<sp/>uint16_t<sp/>freq_value)</highlight></codeline>
<codeline lineno="1061"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1062"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;HFCLKAUDIO.FREQUENCY<sp/>=<sp/>freq_value;</highlight></codeline>
<codeline lineno="1063"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1064"><highlight class="normal"></highlight></codeline>
<codeline lineno="1065"><highlight class="normal">NRF_STATIC_INLINE</highlight></codeline>
<codeline lineno="1066"><highlight class="normal">uint16_t<sp/><ref refid="group__nrf__clock__hal_1gaba822bac96cbd67e5f9f255af89a1f5e" kindref="member">nrf_clock_hfclkaudio_config_get</ref>(NRF_CLOCK_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="1067"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1068"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(uint16_t)(p_reg-&gt;HFCLKAUDIO.FREQUENCY);</highlight></codeline>
<codeline lineno="1069"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1070"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1071"><highlight class="normal"></highlight></codeline>
<codeline lineno="1072"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(CLOCK_FEATURE_HFCLK_DIVIDE_PRESENT)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1073"><highlight class="normal">NRF_STATIC_INLINE</highlight></codeline>
<codeline lineno="1074"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>nrf_clock_hfclk_div_set(NRF_CLOCK_Type<sp/>*<sp/>p_reg,<sp/><ref refid="group__nrf__clock__hal_1ga4ae12749dff0c4975b250728d6de0ad6" kindref="member">nrf_clock_hfclk_div_t</ref><sp/>divider)</highlight></codeline>
<codeline lineno="1075"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1076"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;HFCLKCTRL<sp/>=<sp/>(((uint8_t)(divider)<sp/>&lt;&lt;<sp/>CLOCK_HFCLKCTRL_HCLK_Pos)<sp/>&amp;</highlight></codeline>
<codeline lineno="1077"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CLOCK_HFCLKCTRL_HCLK_Msk);</highlight></codeline>
<codeline lineno="1078"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1079"><highlight class="normal"></highlight></codeline>
<codeline lineno="1080"><highlight class="normal">NRF_STATIC_INLINE<sp/><ref refid="group__nrf__clock__hal_1ga4ae12749dff0c4975b250728d6de0ad6" kindref="member">nrf_clock_hfclk_div_t</ref><sp/>nrf_clock_hfclk_div_get(NRF_CLOCK_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="1081"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1082"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="group__nrf__clock__hal_1ga4ae12749dff0c4975b250728d6de0ad6" kindref="member">nrf_clock_hfclk_div_t</ref>)((p_reg-&gt;HFCLKCTRL<sp/>&amp;<sp/>CLOCK_HFCLKCTRL_HCLK_Msk)</highlight></codeline>
<codeline lineno="1083"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;<sp/>CLOCK_HFCLKCTRL_HCLK_Pos);</highlight></codeline>
<codeline lineno="1084"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1085"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1086"><highlight class="normal"></highlight></codeline>
<codeline lineno="1087"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_CLOCK_HAS_HFCLK192M</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1088"><highlight class="normal">NRF_STATIC_INLINE</highlight></codeline>
<codeline lineno="1089"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__clock__hal_1ga9307f09045353d04c29bf8ca29cc0c28" kindref="member">nrf_clock_hfclk192m_div_set</ref>(NRF_CLOCK_Type<sp/>*<sp/>p_reg,<sp/><ref refid="group__nrf__clock__hal_1ga4ae12749dff0c4975b250728d6de0ad6" kindref="member">nrf_clock_hfclk_div_t</ref><sp/>divider)</highlight></codeline>
<codeline lineno="1090"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1091"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;HFCLK192MCTRL<sp/>=<sp/>(((uint8_t)(divider)<sp/>&lt;&lt;<sp/>CLOCK_HFCLK192MCTRL_HCLK192M_Pos)<sp/>&amp;</highlight></codeline>
<codeline lineno="1092"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CLOCK_HFCLK192MCTRL_HCLK192M_Msk);</highlight></codeline>
<codeline lineno="1093"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1094"><highlight class="normal"></highlight></codeline>
<codeline lineno="1095"><highlight class="normal">NRF_STATIC_INLINE<sp/><ref refid="group__nrf__clock__hal_1ga4ae12749dff0c4975b250728d6de0ad6" kindref="member">nrf_clock_hfclk_div_t</ref><sp/><ref refid="group__nrf__clock__hal_1ga53f5fd112e0c314b3b2fd677ad029246" kindref="member">nrf_clock_hfclk192m_div_get</ref>(NRF_CLOCK_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="1096"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1097"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="group__nrf__clock__hal_1ga4ae12749dff0c4975b250728d6de0ad6" kindref="member">nrf_clock_hfclk_div_t</ref>)((p_reg-&gt;HFCLK192MCTRL<sp/>&amp;<sp/>CLOCK_HFCLK192MCTRL_HCLK192M_Msk)</highlight></codeline>
<codeline lineno="1098"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;<sp/>CLOCK_HFCLK192MCTRL_HCLK192M_Pos);</highlight></codeline>
<codeline lineno="1099"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1100"><highlight class="normal"></highlight></codeline>
<codeline lineno="1101"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__clock__hal_1ga84665d1956d9324a08402a91225fc15c" kindref="member">nrf_clock_hfclk192m_src_set</ref>(NRF_CLOCK_Type<sp/>*<sp/>p_reg,<sp/><ref refid="group__nrf__clock__hal_1gac89aad0e037b7aeefc5264a4dca76197" kindref="member">nrf_clock_hfclk_t</ref><sp/>source)</highlight></codeline>
<codeline lineno="1102"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1103"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;HFCLK192MSRC<sp/>=<sp/>(uint32_t)(source);</highlight></codeline>
<codeline lineno="1104"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1105"><highlight class="normal"></highlight></codeline>
<codeline lineno="1106"><highlight class="normal">NRF_STATIC_INLINE<sp/><ref refid="group__nrf__clock__hal_1gac89aad0e037b7aeefc5264a4dca76197" kindref="member">nrf_clock_hfclk_t</ref><sp/><ref refid="group__nrf__clock__hal_1ga4709388f27018bc447eb944ec7f15f2c" kindref="member">nrf_clock_hfclk192m_src_get</ref>(NRF_CLOCK_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="1107"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1108"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="group__nrf__clock__hal_1gac89aad0e037b7aeefc5264a4dca76197" kindref="member">nrf_clock_hfclk_t</ref>)(p_reg-&gt;HFCLK192MSRC);</highlight></codeline>
<codeline lineno="1109"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1110"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1111"><highlight class="normal"></highlight></codeline>
<codeline lineno="1112"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_CLOCK_HAS_CALIBRATION_TIMER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1113"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__clock__hal_1ga31257b566ba4812c296bbc4fa63f7886" kindref="member">nrf_clock_cal_timer_timeout_set</ref>(NRF_CLOCK_Type<sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>interval)</highlight></codeline>
<codeline lineno="1114"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1115"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;CTIV<sp/>=<sp/>((interval<sp/>&lt;&lt;<sp/>CLOCK_CTIV_CTIV_Pos)<sp/>&amp;<sp/>CLOCK_CTIV_CTIV_Msk);</highlight></codeline>
<codeline lineno="1116"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1117"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1118"><highlight class="normal"></highlight></codeline>
<codeline lineno="1119"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(NRF_CLOCK_HAS_LFCLK_ALWAYSRUN<sp/>||<sp/>NRF_CLOCK_HAS_HFCLK_ALWAYSRUN<sp/>||<sp/>NRF_CLOCK_HAS_HFCLK192M<sp/>||<sp/>\</highlight></codeline>
<codeline lineno="1120"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>NRF_CLOCK_HAS_HFCLKAUDIO)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1121"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__clock__hal_1ga842e2ffb161363df7d4769ab67a317ba" kindref="member">nrf_clock_alwaysrun_set</ref>(NRF_CLOCK_Type<sp/>*<sp/><sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="1122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__clock__hal_1ga1739a9f32e7efbf83dc6e773b05211c1" kindref="member">nrf_clock_domain_t</ref><sp/>domain,</highlight></codeline>
<codeline lineno="1123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>alwaysrun)</highlight></codeline>
<codeline lineno="1124"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1125"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(domain)</highlight></codeline>
<codeline lineno="1126"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1127"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_CLOCK_HAS_LFCLK_ALWAYSRUN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>NRF_CLOCK_DOMAIN_LFCLK:</highlight></codeline>
<codeline lineno="1129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_reg-&gt;NRF_LFCLKALWAYSRUN<sp/>=</highlight></codeline>
<codeline lineno="1130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((alwaysrun<sp/>&lt;&lt;<sp/><ref refid="group__nrf__clock__hal_1gab91b3624656e5175625ae800f4938a9e" kindref="member">NRF_CLOCK_LFCLKALWAYSRUN_ALWAYSRUN_Pos</ref>)</highlight></codeline>
<codeline lineno="1131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;<sp/><ref refid="group__nrf__clock__hal_1gaad7f55c79e5021acde2dc1c9deb91af5" kindref="member">NRF_CLOCK_LFCLKALWAYSRUN_ALWAYSRUN_Msk</ref>);</highlight></codeline>
<codeline lineno="1132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1133"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1134"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_CLOCK_HAS_HFCLK_ALWAYSRUN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>NRF_CLOCK_DOMAIN_HFCLK:</highlight></codeline>
<codeline lineno="1136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_reg-&gt;HFCLKALWAYSRUN<sp/>=</highlight></codeline>
<codeline lineno="1137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((alwaysrun<sp/>&lt;&lt;<sp/>CLOCK_HFCLKALWAYSRUN_ALWAYSRUN_Pos)</highlight></codeline>
<codeline lineno="1138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;<sp/>CLOCK_HFCLKALWAYSRUN_ALWAYSRUN_Msk);</highlight></codeline>
<codeline lineno="1139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1140"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1141"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_CLOCK_HAS_HFCLK192M</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>NRF_CLOCK_DOMAIN_HFCLK192M:</highlight></codeline>
<codeline lineno="1143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_reg-&gt;HFCLK192MALWAYSRUN<sp/>=</highlight></codeline>
<codeline lineno="1144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((alwaysrun<sp/>&lt;&lt;<sp/>CLOCK_HFCLK192MALWAYSRUN_ALWAYSRUN_Pos)</highlight></codeline>
<codeline lineno="1145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;<sp/>CLOCK_HFCLK192MALWAYSRUN_ALWAYSRUN_Msk);</highlight></codeline>
<codeline lineno="1146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1147"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1148"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_CLOCK_HAS_HFCLKAUDIO</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>NRF_CLOCK_DOMAIN_HFCLKAUDIO:</highlight></codeline>
<codeline lineno="1150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_reg-&gt;HFCLKAUDIOALWAYSRUN<sp/>=</highlight></codeline>
<codeline lineno="1151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((alwaysrun<sp/>&lt;&lt;<sp/>CLOCK_HFCLKAUDIOALWAYSRUN_ALWAYSRUN_Pos)</highlight></codeline>
<codeline lineno="1152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;<sp/>CLOCK_HFCLKAUDIOALWAYSRUN_ALWAYSRUN_Msk);</highlight></codeline>
<codeline lineno="1153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1154"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrfx__glue_1ga9698a3f6b6bea455d2b54a79e514ee36" kindref="member">NRFX_ASSERT</ref>(0);</highlight></codeline>
<codeline lineno="1157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1158"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1159"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1160"><highlight class="normal"></highlight></codeline>
<codeline lineno="1161"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrf__clock__hal_1ga930ec730c515f7443c2eac61fe829cb1" kindref="member">nrf_clock_alwaysrun_get</ref>(NRF_CLOCK_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="1162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__clock__hal_1ga1739a9f32e7efbf83dc6e773b05211c1" kindref="member">nrf_clock_domain_t</ref><sp/><sp/><sp/><sp/><sp/>domain)</highlight></codeline>
<codeline lineno="1163"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1164"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(domain)</highlight></codeline>
<codeline lineno="1165"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1166"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_CLOCK_HAS_LFCLK_ALWAYSRUN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>NRF_CLOCK_DOMAIN_LFCLK:</highlight></codeline>
<codeline lineno="1168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((p_reg-&gt;NRF_LFCLKALWAYSRUN<sp/>&amp;<sp/><ref refid="group__nrf__clock__hal_1gaad7f55c79e5021acde2dc1c9deb91af5" kindref="member">NRF_CLOCK_LFCLKALWAYSRUN_ALWAYSRUN_Msk</ref>)</highlight></codeline>
<codeline lineno="1169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;<sp/><ref refid="group__nrf__clock__hal_1gab91b3624656e5175625ae800f4938a9e" kindref="member">NRF_CLOCK_LFCLKALWAYSRUN_ALWAYSRUN_Pos</ref>);</highlight></codeline>
<codeline lineno="1170"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1171"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_CLOCK_HAS_HFCLK_ALWAYSRUN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>NRF_CLOCK_DOMAIN_HFCLK:</highlight></codeline>
<codeline lineno="1173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((p_reg-&gt;HFCLKALWAYSRUN<sp/>&amp;<sp/>CLOCK_HFCLKALWAYSRUN_ALWAYSRUN_Msk)</highlight></codeline>
<codeline lineno="1174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;<sp/>CLOCK_HFCLKALWAYSRUN_ALWAYSRUN_Pos);</highlight></codeline>
<codeline lineno="1175"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1176"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_CLOCK_HAS_HFCLK192M</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>NRF_CLOCK_DOMAIN_HFCLK192M:</highlight></codeline>
<codeline lineno="1178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((p_reg-&gt;HFCLK192MALWAYSRUN<sp/>&amp;<sp/>CLOCK_HFCLK192MALWAYSRUN_ALWAYSRUN_Msk)</highlight></codeline>
<codeline lineno="1179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;<sp/>CLOCK_HFCLK192MALWAYSRUN_ALWAYSRUN_Pos);</highlight></codeline>
<codeline lineno="1180"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1181"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_CLOCK_HAS_HFCLKAUDIO</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>NRF_CLOCK_DOMAIN_HFCLKAUDIO:</highlight></codeline>
<codeline lineno="1183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((p_reg-&gt;HFCLKAUDIOALWAYSRUN<sp/>&amp;<sp/>CLOCK_HFCLKAUDIOALWAYSRUN_ALWAYSRUN_Msk)</highlight></codeline>
<codeline lineno="1184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;<sp/>CLOCK_HFCLKAUDIOALWAYSRUN_ALWAYSRUN_Pos);</highlight></codeline>
<codeline lineno="1185"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrfx__glue_1ga9698a3f6b6bea455d2b54a79e514ee36" kindref="member">NRFX_ASSERT</ref>(0);</highlight></codeline>
<codeline lineno="1188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1189"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1190"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1191"><highlight class="normal"></highlight></codeline>
<codeline lineno="1192"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrf__clock__hal_1gad64c2d8e17a381a70ff1c867a3763da2" kindref="member">nrf_clock_alwaysrun_active_get</ref>(NRF_CLOCK_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="1193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__clock__hal_1ga1739a9f32e7efbf83dc6e773b05211c1" kindref="member">nrf_clock_domain_t</ref><sp/><sp/><sp/><sp/><sp/>domain)</highlight></codeline>
<codeline lineno="1194"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1195"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(domain)</highlight></codeline>
<codeline lineno="1196"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1197"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_CLOCK_HAS_LFCLK_ALWAYSRUN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>NRF_CLOCK_DOMAIN_LFCLK:</highlight></codeline>
<codeline lineno="1199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((p_reg-&gt;NRF_LFCLKSTAT<sp/>&amp;<sp/><ref refid="group__nrf__clock__hal_1ga2f550a2c6a1a8f58a48c7d8b8262ada2" kindref="member">NRF_CLOCK_LFCLKSTAT_ALWAYSRUNNING_Msk</ref>)</highlight></codeline>
<codeline lineno="1200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;<sp/><ref refid="group__nrf__clock__hal_1gada8946d0e1958e581118011582d9450b" kindref="member">NRF_CLOCK_LFCLKSTAT_ALWAYSRUNNING_Pos</ref>);</highlight></codeline>
<codeline lineno="1201"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1202"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_CLOCK_HAS_HFCLK_ALWAYSRUN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>NRF_CLOCK_DOMAIN_HFCLK:</highlight></codeline>
<codeline lineno="1204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((p_reg-&gt;HFCLKSTAT<sp/>&amp;<sp/>CLOCK_HFCLKSTAT_ALWAYSRUNNING_Msk)</highlight></codeline>
<codeline lineno="1205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;<sp/>CLOCK_HFCLKSTAT_ALWAYSRUNNING_Pos);</highlight></codeline>
<codeline lineno="1206"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1207"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_CLOCK_HAS_HFCLK192M</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>NRF_CLOCK_DOMAIN_HFCLK192M:</highlight></codeline>
<codeline lineno="1209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((p_reg-&gt;HFCLK192MSTAT<sp/>&amp;<sp/>CLOCK_HFCLK192MSTAT_ALWAYSRUNNING_Msk)</highlight></codeline>
<codeline lineno="1210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;<sp/>CLOCK_HFCLK192MSTAT_ALWAYSRUNNING_Pos);</highlight></codeline>
<codeline lineno="1211"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1212"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_CLOCK_HAS_HFCLKAUDIO</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>NRF_CLOCK_DOMAIN_HFCLKAUDIO:</highlight></codeline>
<codeline lineno="1214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((p_reg-&gt;HFCLKAUDIOSTAT<sp/>&amp;<sp/>CLOCK_HFCLKAUDIOSTAT_ALWAYSRUNNING_Msk)</highlight></codeline>
<codeline lineno="1215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;<sp/>CLOCK_HFCLKAUDIOSTAT_ALWAYSRUNNING_Pos);</highlight></codeline>
<codeline lineno="1216"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrfx__glue_1ga9698a3f6b6bea455d2b54a79e514ee36" kindref="member">NRFX_ASSERT</ref>(0);</highlight></codeline>
<codeline lineno="1219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1220"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1221"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1222"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>(NRF_CLOCK_HAS_LFCLK_ALWAYSRUN<sp/>||<sp/>NRF_CLOCK_HAS_HFCLK_ALWAYSRUN<sp/>||</highlight></codeline>
<codeline lineno="1223"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NRF_CLOCK_HAS_HFCLK192M<sp/>||<sp/>NRF_CLOCK_HAS_HFCLKAUDIO)<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1224"><highlight class="normal"></highlight></codeline>
<codeline lineno="1225"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(DPPI_PRESENT)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1226"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__clock__hal_1gad555b0e6d610054730a7beac749ba5c0" kindref="member">nrf_clock_subscribe_set</ref>(NRF_CLOCK_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="1227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__clock__hal_1ga6bf1711bc8cb7614c8ae806155bd3f33" kindref="member">nrf_clock_task_t</ref><sp/>task,</highlight></codeline>
<codeline lineno="1228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>channel)</highlight></codeline>
<codeline lineno="1229"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1230"><highlight class="normal"><sp/><sp/><sp/><sp/>*((</highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint32_t<sp/>*)<sp/>((uint8_t<sp/>*)p_reg+<sp/>(uint32_t)task<sp/>+<sp/>0x80uL))<sp/>=</highlight></codeline>
<codeline lineno="1231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)channel<sp/>|<sp/>NRF_SUBSCRIBE_PUBLISH_ENABLE);</highlight></codeline>
<codeline lineno="1232"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1233"><highlight class="normal"></highlight></codeline>
<codeline lineno="1234"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__clock__hal_1gaed03227123a60ea7c8bc4ed832adf6f3" kindref="member">nrf_clock_subscribe_clear</ref>(NRF_CLOCK_Type<sp/>*<sp/>p_reg,<sp/><ref refid="group__nrf__clock__hal_1ga6bf1711bc8cb7614c8ae806155bd3f33" kindref="member">nrf_clock_task_t</ref><sp/>task)</highlight></codeline>
<codeline lineno="1235"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1236"><highlight class="normal"><sp/><sp/><sp/><sp/>*((</highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint32_t<sp/>*)<sp/>((uint8_t<sp/>*)p_reg<sp/>+<sp/>(uint32_t)task<sp/>+<sp/>0x80uL))<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1237"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1238"><highlight class="normal"></highlight></codeline>
<codeline lineno="1239"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__clock__hal_1gad0b543bcc840e79ffd5a93035f938910" kindref="member">nrf_clock_publish_set</ref>(NRF_CLOCK_Type<sp/>*<sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="1240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__clock__hal_1ga8843dd5805c2b01f9b832ed73d583695" kindref="member">nrf_clock_event_t</ref><sp/>event,</highlight></codeline>
<codeline lineno="1241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>channel)</highlight></codeline>
<codeline lineno="1242"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1243"><highlight class="normal"><sp/><sp/><sp/><sp/>*((</highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint32_t<sp/>*)<sp/>((uint8_t<sp/>*)p_reg<sp/>+<sp/>(uint32_t)event<sp/>+<sp/>0x80uL))<sp/>=</highlight></codeline>
<codeline lineno="1244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)channel<sp/>|<sp/>NRF_SUBSCRIBE_PUBLISH_ENABLE);</highlight></codeline>
<codeline lineno="1245"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1246"><highlight class="normal"></highlight></codeline>
<codeline lineno="1247"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__clock__hal_1ga136d09d2b0eafa0118c76cb977c6f743" kindref="member">nrf_clock_publish_clear</ref>(NRF_CLOCK_Type<sp/>*<sp/>p_reg,<sp/><ref refid="group__nrf__clock__hal_1ga8843dd5805c2b01f9b832ed73d583695" kindref="member">nrf_clock_event_t</ref><sp/>event)</highlight></codeline>
<codeline lineno="1248"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1249"><highlight class="normal"><sp/><sp/><sp/><sp/>*((</highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint32_t<sp/>*)<sp/>((uint8_t<sp/>*)p_reg<sp/>+<sp/>(uint32_t)event<sp/>+<sp/>0x80uL))<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1250"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1251"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>defined(DPPI_PRESENT)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1252"><highlight class="normal"></highlight></codeline>
<codeline lineno="1253"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRF_DECLARE_ONLY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1254"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1255"><highlight class="comment">/**<sp/>@}<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1256"><highlight class="normal"></highlight></codeline>
<codeline lineno="1257"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1258"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1259"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1260"><highlight class="normal"></highlight></codeline>
<codeline lineno="1261"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRF_CLOCK_H__</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="hal/nrf_clock.h"/>
  </compounddef>
</doxygen>
