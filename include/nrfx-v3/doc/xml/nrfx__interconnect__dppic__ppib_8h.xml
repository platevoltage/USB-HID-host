<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="nrfx__interconnect__dppic__ppib_8h" kind="file" language="C++">
    <compoundname>nrfx_interconnect_dppic_ppib.h</compoundname>
    <includes refid="nrf__dppi_8h" local="no">hal/nrf_dppi.h</includes>
    <innerclass refid="structnrfx__interconnect__ppib__t" prot="public">nrfx_interconnect_ppib_t</innerclass>
    <innerclass refid="structnrfx__interconnect__dppic__ppib__t" prot="public">nrfx_interconnect_dppic_ppib_t</innerclass>
    <innerclass refid="structnrfx__interconnect__dppic__t" prot="public">nrfx_interconnect_dppic_t</innerclass>
    <innerclass refid="structnrfx__interconnect__dppic__to__dppic__path__t" prot="public">nrfx_interconnect_dppic_to_dppic_path_t</innerclass>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__nrfx__interconnect__dppic__ppib_1gabeb0e38bbeba46c7bdadb3d1430898c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structnrfx__interconnect__dppic__t" kindref="compound">nrfx_interconnect_dppic_t</ref> *</type>
        <definition>nrfx_interconnect_dppic_t * nrfx_interconnect_dppic_at_index_get</definition>
        <argsstring>(uint8_t index)</argsstring>
        <name>nrfx_interconnect_dppic_at_index_get</name>
        <param>
          <type>uint8_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Function for getting DPPIC interconnect object under a specific index from connection map. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">index</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of expected <ref refid="structnrfx__interconnect__dppic__t" kindref="compound">nrfx_interconnect_dppic_t</ref> object.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to <ref refid="structnrfx__interconnect__dppic__t" kindref="compound">nrfx_interconnect_dppic_t</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="soc/interconnect/dppic_ppib/nrfx_interconnect_dppic_ppib.h" line="92" column="28" declfile="soc/interconnect/dppic_ppib/nrfx_interconnect_dppic_ppib.h" declline="92" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfx__interconnect__dppic__ppib_1gabacbe9d23183381df9f93f135b3d0210" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structnrfx__interconnect__dppic__t" kindref="compound">nrfx_interconnect_dppic_t</ref> *</type>
        <definition>nrfx_interconnect_dppic_t * nrfx_interconnect_dppic_get</definition>
        <argsstring>(uint8_t apb_index)</argsstring>
        <name>nrfx_interconnect_dppic_get</name>
        <param>
          <type>uint8_t</type>
          <declname>apb_index</declname>
        </param>
        <briefdescription>
<para>Function for getting DPPIC interconnect object with a specific domain. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">apb_index</parametername>
</parameternamelist>
<parameterdescription>
<para>APB index that belongs to DPPIC interconnect.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to <ref refid="structnrfx__interconnect__dppic__t" kindref="compound">nrfx_interconnect_dppic_t</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="soc/interconnect/dppic_ppib/nrfx_interconnect_dppic_ppib.h" line="101" column="28" declfile="soc/interconnect/dppic_ppib/nrfx_interconnect_dppic_ppib.h" declline="101" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfx__interconnect__dppic__ppib_1gae2b6d915ea76fa9e9bf96d068c1c8aeb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structnrfx__interconnect__dppic__t" kindref="compound">nrfx_interconnect_dppic_t</ref> *</type>
        <definition>nrfx_interconnect_dppic_t * nrfx_interconnect_dppic_main_get</definition>
        <argsstring>(void)</argsstring>
        <name>nrfx_interconnect_dppic_main_get</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Function for getting main DPPIC interconnect object. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Pointer to <ref refid="structnrfx__interconnect__dppic__t" kindref="compound">nrfx_interconnect_dppic_t</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="soc/interconnect/dppic_ppib/nrfx_interconnect_dppic_ppib.h" line="108" column="28" declfile="soc/interconnect/dppic_ppib/nrfx_interconnect_dppic_ppib.h" declline="108" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfx__interconnect__dppic__ppib_1gab44ac156cac702fd8daa82a9e2f6f957" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structnrfx__interconnect__ppib__t" kindref="compound">nrfx_interconnect_ppib_t</ref> *</type>
        <definition>nrfx_interconnect_ppib_t * nrfx_interconnect_ppib_at_index_get</definition>
        <argsstring>(uint8_t index)</argsstring>
        <name>nrfx_interconnect_ppib_at_index_get</name>
        <param>
          <type>uint8_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Function for getting PPIB interconnect object at specified index from connection map. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">index</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of expected <ref refid="structnrfx__interconnect__ppib__t" kindref="compound">nrfx_interconnect_ppib_t</ref> object.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to <ref refid="structnrfx__interconnect__ppib__t" kindref="compound">nrfx_interconnect_ppib_t</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="soc/interconnect/dppic_ppib/nrfx_interconnect_dppic_ppib.h" line="117" column="27" declfile="soc/interconnect/dppic_ppib/nrfx_interconnect_dppic_ppib.h" declline="117" declcolumn="27"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfx__interconnect__dppic__ppib_1gabd145147abfe12cdd3eb64ad89080260" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool nrfx_interconnect_direct_connection_check</definition>
        <argsstring>(nrfx_interconnect_dppic_to_dppic_path_t *p_path)</argsstring>
        <name>nrfx_interconnect_direct_connection_check</name>
        <param>
          <type><ref refid="structnrfx__interconnect__dppic__to__dppic__path__t" kindref="compound">nrfx_interconnect_dppic_to_dppic_path_t</ref> *</type>
          <declname>p_path</declname>
        </param>
        <briefdescription>
<para>Function for checking if path from source DPPIC to destination DPPIC exists. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_path</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to path from source DPPIC to destination DPPIC. When path exists, <computeroutput>p_path</computeroutput> is filled with PPIB information.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if direct connection exists, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="soc/interconnect/dppic_ppib/nrfx_interconnect_dppic_ppib.h" line="127" column="6" declfile="soc/interconnect/dppic_ppib/nrfx_interconnect_dppic_ppib.h" declline="127" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfx__interconnect__dppic__ppib_1gaf20ec832f2294faf47efc6256d1e3fe8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>nrf_apb_index_t</type>
        <definition>nrf_apb_index_t nrfx_interconnect_apb_index_get</definition>
        <argsstring>(uint32_t addr)</argsstring>
        <name>nrfx_interconnect_apb_index_get</name>
        <param>
          <type>uint32_t</type>
          <declname>addr</declname>
        </param>
        <briefdescription>
<para>Function for getting <computeroutput>nrf_apb_index_t</computeroutput> from memory address. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Memory address.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>APB index. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="soc/interconnect/dppic_ppib/nrfx_interconnect_dppic_ppib.h" line="136" column="17" declfile="soc/interconnect/dppic_ppib/nrfx_interconnect_dppic_ppib.h" declline="136" declcolumn="17"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2023<sp/>-<sp/>2024,<sp/>Nordic<sp/>Semiconductor<sp/>ASA</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>All<sp/>rights<sp/>reserved.</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>SPDX-License-Identifier:<sp/>BSD-3-Clause</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions<sp/>are<sp/>met:</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>1.<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright<sp/>notice,<sp/>this</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>2.<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the<sp/>distribution.</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/>3.<sp/>Neither<sp/>the<sp/>name<sp/>of<sp/>the<sp/>copyright<sp/>holder<sp/>nor<sp/>the<sp/>names<sp/>of<sp/>its</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>contributors<sp/>may<sp/>be<sp/>used<sp/>to<sp/>endorse<sp/>or<sp/>promote<sp/>products<sp/>derived<sp/>from<sp/>this</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>software<sp/>without<sp/>specific<sp/>prior<sp/>written<sp/>permission.</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>COPYRIGHT<sp/>HOLDERS<sp/>AND<sp/>CONTRIBUTORS<sp/>&quot;AS<sp/>IS&quot;</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/>AND<sp/>ANY<sp/>EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>THE</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*<sp/>ARE<sp/>DISCLAIMED.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>COPYRIGHT<sp/>HOLDER<sp/>OR<sp/>CONTRIBUTORS<sp/>BE</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,<sp/>SPECIAL,<sp/>EXEMPLARY,<sp/>OR</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>PROCUREMENT<sp/>OF</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>*<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,<sp/>DATA,<sp/>OR<sp/>PROFITS;<sp/>OR<sp/>BUSINESS</highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/>*<sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY<sp/>THEORY<sp/>OF<sp/>LIABILITY,<sp/>WHETHER<sp/>IN</highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/>*<sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR<sp/>OTHERWISE)</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/>*<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE<sp/>OF<sp/>THIS<sp/>SOFTWARE,<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/>*<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight></codeline>
<codeline lineno="32"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>NRFX_INTERCONNECT_DPPIC_PPIB_H__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRFX_INTERCONNECT_DPPIC_PPIB_H__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;hal/nrf_dppi.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="43"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="44"><highlight class="comment"><sp/>*<sp/>@defgroup<sp/>nrfx_interconnect_dppic_ppib<sp/>DPPIC<sp/>and<sp/>PPIB<sp/>interconnect<sp/>support</highlight></codeline>
<codeline lineno="45"><highlight class="comment"><sp/>*<sp/>@{</highlight></codeline>
<codeline lineno="46"><highlight class="comment"><sp/>*<sp/>@ingroup<sp/>nrfx</highlight></codeline>
<codeline lineno="47"><highlight class="comment"><sp/>*<sp/>@brief<sp/><sp/><sp/>Support<sp/>for<sp/>DPPIC<sp/>and<sp/>PPIB<sp/>interconnect<sp/>services.</highlight></codeline>
<codeline lineno="48"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="50"><highlight class="comment">/**<sp/>@brief<sp/>PPIB<sp/>interconnect<sp/>properties<sp/>structure.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51" refid="structnrfx__interconnect__ppib__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal">{</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/>NRF_PPIB_Type<sp/>*<sp/>p_ppib1;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>First<sp/>PPIB<sp/>peripheral.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/>NRF_PPIB_Type<sp/>*<sp/>p_ppib2;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Second<sp/>PPIB<sp/>peripheral.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__glue_1ga5c369f6aae1199f71a2b1899dd65cc15" kindref="member">nrfx_atomic_t</ref><sp/><sp/><sp/>channels_mask;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Mask<sp/>of<sp/>configurable<sp/>channels<sp/>between<sp/>the<sp/>first<sp/>and<sp/>the<sp/>second<sp/>PPIB<sp/>instance.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>allocate_flag[PPIB_CHANNEL_MAX_COUNT];<sp/></highlight><highlight class="comment">///&lt;<sp/>Virtual<sp/>channels<sp/>assigned<sp/>to<sp/>each<sp/>of<sp/>PPIB<sp/>channels.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal">}<sp/><ref refid="structnrfx__interconnect__ppib__t" kindref="compound">nrfx_interconnect_ppib_t</ref>;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="59"><highlight class="comment">/**<sp/>@brief<sp/>DPPIC<sp/>and<sp/>PPIB<sp/>interconnect<sp/>properties<sp/>structure.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60" refid="structnrfx__interconnect__dppic__ppib__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal">{</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/>NRF_DPPIC_Type<sp/>*<sp/>dppic;<sp/></highlight><highlight class="comment">///&lt;<sp/>DPPIC<sp/>peripheral.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/>NRF_PPIB_Type<sp/>*<sp/><sp/>ppib;<sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>PPIB<sp/>peripheral.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal">}<sp/><ref refid="structnrfx__interconnect__dppic__ppib__t" kindref="compound">nrfx_interconnect_dppic_ppib_t</ref>;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="66"><highlight class="comment">/**<sp/>@brief<sp/>DPPIC<sp/>properties<sp/>structure.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67" refid="structnrfx__interconnect__dppic__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal">{</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>apb_index;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>APB<sp/>index<sp/>to<sp/>which<sp/>DPPIC<sp/>belongs.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>NRF_DPPIC_Type<sp/>*<sp/>dppic;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>DPPIC<sp/>peripheral<sp/>that<sp/>belongs<sp/>to<sp/>a<sp/>given<sp/>domain.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__glue_1ga5c369f6aae1199f71a2b1899dd65cc15" kindref="member">nrfx_atomic_t</ref><sp/><sp/><sp/><sp/>channels_mask;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Mask<sp/>of<sp/>configurable<sp/>DPPIC<sp/>channels.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>allocate_flag[NRF_DPPI_CH_NUM_MAX];<sp/></highlight><highlight class="comment">///&lt;<sp/>Virtual<sp/>channels<sp/>assigned<sp/>to<sp/>each<sp/>of<sp/>DPPIC<sp/>channels.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>apb_size;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Size<sp/>of<sp/>APB.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal">}<sp/><ref refid="structnrfx__interconnect__dppic__t" kindref="compound">nrfx_interconnect_dppic_t</ref>;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="76"><highlight class="comment">/**<sp/>@brief<sp/>DPPIC<sp/>to<sp/>DPPIC<sp/>connection<sp/>structure.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77" refid="structnrfx__interconnect__dppic__to__dppic__path__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal">{</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structnrfx__interconnect__dppic__t" kindref="compound">nrfx_interconnect_dppic_t</ref><sp/>*<sp/>src_dppic;<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Pointer<sp/>to<sp/>the<sp/>source<sp/>of<sp/>DPPIC<sp/>interconnect<sp/>instance.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structnrfx__interconnect__dppic__t" kindref="compound">nrfx_interconnect_dppic_t</ref><sp/>*<sp/>dst_dppic;<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Pointer<sp/>to<sp/>the<sp/>destination<sp/>of<sp/>DPPIC<sp/>interconnect<sp/>instance.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structnrfx__interconnect__ppib__t" kindref="compound">nrfx_interconnect_ppib_t</ref><sp/>*<sp/><sp/>ppib;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Pointer<sp/>to<sp/>the<sp/>PPIB<sp/>interconnect<sp/>instance<sp/>between<sp/>@p<sp/>src_dppic<sp/>and<sp/>@p<sp/>dst_dppic.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ppib_inverted;<sp/></highlight><highlight class="comment">///&lt;<sp/>True<sp/>if<sp/>PPIB<sp/>connection<sp/>goes<sp/>from<sp/>second<sp/>to<sp/>first<sp/>PPIB<sp/>peripherial<sp/>instance,<sp/>false<sp/>otherwise.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal">}<sp/><ref refid="structnrfx__interconnect__dppic__to__dppic__path__t" kindref="compound">nrfx_interconnect_dppic_to_dppic_path_t</ref>;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="85"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="86"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>DPPIC<sp/>interconnect<sp/>object<sp/>under<sp/>a<sp/>specific<sp/>index<sp/>from<sp/>connection<sp/>map.</highlight></codeline>
<codeline lineno="87"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="88"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>index<sp/>Index<sp/>of<sp/>expected<sp/>@ref<sp/>nrfx_interconnect_dppic_t<sp/>object.</highlight></codeline>
<codeline lineno="89"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="90"><highlight class="comment"><sp/>*<sp/>@return<sp/>Pointer<sp/>to<sp/>@ref<sp/>nrfx_interconnect_dppic_t.</highlight></codeline>
<codeline lineno="91"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><ref refid="structnrfx__interconnect__dppic__t" kindref="compound">nrfx_interconnect_dppic_t</ref><sp/>*<sp/><ref refid="group__nrfx__interconnect__dppic__ppib_1gabeb0e38bbeba46c7bdadb3d1430898c5" kindref="member">nrfx_interconnect_dppic_at_index_get</ref>(uint8_t<sp/>index);</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="94"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="95"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>DPPIC<sp/>interconnect<sp/>object<sp/>with<sp/>a<sp/>specific<sp/>domain.</highlight></codeline>
<codeline lineno="96"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="97"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>apb_index<sp/>APB<sp/>index<sp/>that<sp/>belongs<sp/>to<sp/>DPPIC<sp/>interconnect.</highlight></codeline>
<codeline lineno="98"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="99"><highlight class="comment"><sp/>*<sp/>@return<sp/>Pointer<sp/>to<sp/>@ref<sp/>nrfx_interconnect_dppic_t.</highlight></codeline>
<codeline lineno="100"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><ref refid="structnrfx__interconnect__dppic__t" kindref="compound">nrfx_interconnect_dppic_t</ref><sp/>*<sp/><ref refid="group__nrfx__interconnect__dppic__ppib_1gabacbe9d23183381df9f93f135b3d0210" kindref="member">nrfx_interconnect_dppic_get</ref>(uint8_t<sp/>apb_index);</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="103"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="104"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>main<sp/>DPPIC<sp/>interconnect<sp/>object.</highlight></codeline>
<codeline lineno="105"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="106"><highlight class="comment"><sp/>*<sp/>@return<sp/>Pointer<sp/>to<sp/>@ref<sp/>nrfx_interconnect_dppic_t.</highlight></codeline>
<codeline lineno="107"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><ref refid="structnrfx__interconnect__dppic__t" kindref="compound">nrfx_interconnect_dppic_t</ref><sp/>*<sp/><ref refid="group__nrfx__interconnect__dppic__ppib_1gae2b6d915ea76fa9e9bf96d068c1c8aeb" kindref="member">nrfx_interconnect_dppic_main_get</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="110"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="111"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>PPIB<sp/>interconnect<sp/>object<sp/>at<sp/>specified<sp/>index<sp/>from<sp/>connection<sp/>map.</highlight></codeline>
<codeline lineno="112"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="113"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>index<sp/>Index<sp/>of<sp/>expected<sp/>@ref<sp/>nrfx_interconnect_ppib_t<sp/>object.</highlight></codeline>
<codeline lineno="114"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="115"><highlight class="comment"><sp/>*<sp/>@return<sp/>Pointer<sp/>to<sp/>@ref<sp/>nrfx_interconnect_ppib_t.</highlight></codeline>
<codeline lineno="116"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><ref refid="structnrfx__interconnect__ppib__t" kindref="compound">nrfx_interconnect_ppib_t</ref><sp/>*<sp/><ref refid="group__nrfx__interconnect__dppic__ppib_1gab44ac156cac702fd8daa82a9e2f6f957" kindref="member">nrfx_interconnect_ppib_at_index_get</ref>(uint8_t<sp/>index);</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="119"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="120"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>checking<sp/>if<sp/>path<sp/>from<sp/>source<sp/>DPPIC<sp/>to<sp/>destination<sp/>DPPIC<sp/>exists.</highlight></codeline>
<codeline lineno="121"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="122"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_path<sp/>Pointer<sp/>to<sp/>path<sp/>from<sp/>source<sp/>DPPIC<sp/>to<sp/>destination<sp/>DPPIC.</highlight></codeline>
<codeline lineno="123"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>When<sp/>path<sp/>exists,<sp/>@p<sp/>p_path<sp/>is<sp/>filled<sp/>with<sp/>PPIB<sp/>information.</highlight></codeline>
<codeline lineno="124"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="125"><highlight class="comment"><sp/>*<sp/>@return<sp/>True<sp/>if<sp/>direct<sp/>connection<sp/>exists,<sp/>false<sp/>otherwise.</highlight></codeline>
<codeline lineno="126"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrfx__interconnect__dppic__ppib_1gabd145147abfe12cdd3eb64ad89080260" kindref="member">nrfx_interconnect_direct_connection_check</ref>(<ref refid="structnrfx__interconnect__dppic__to__dppic__path__t" kindref="compound">nrfx_interconnect_dppic_to_dppic_path_t</ref><sp/>*<sp/>p_path);</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="129"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="130"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>@p<sp/>nrf_apb_index_t<sp/>from<sp/>memory<sp/>address.</highlight></codeline>
<codeline lineno="131"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="132"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>addr<sp/>Memory<sp/>address.</highlight></codeline>
<codeline lineno="133"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="134"><highlight class="comment"><sp/>*<sp/>@return<sp/>APB<sp/>index.</highlight></codeline>
<codeline lineno="135"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal">nrf_apb_index_t<sp/><ref refid="group__nrfx__interconnect__dppic__ppib_1gaf20ec832f2294faf47efc6256d1e3fe8" kindref="member">nrfx_interconnect_apb_index_get</ref>(uint32_t<sp/>addr);</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="138"><highlight class="comment">/**<sp/>@}<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal">}</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRFX_INTERCONNECT_DPPIC_PPIB_H__</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="soc/interconnect/dppic_ppib/nrfx_interconnect_dppic_ppib.h"/>
  </compounddef>
</doxygen>
